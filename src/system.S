
tools/system:     file format elf32-i386


Disassembly of section .text:

00000000 <pg_dir>:
       0:	b8 10 00 00 00       	mov    $0x10,%eax
       5:	8e d8                	mov    %eax,%ds
       7:	8e c0                	mov    %eax,%es
       9:	8e e0                	mov    %eax,%fs
       b:	8e e8                	mov    %eax,%gs
       d:	0f b2 25 c0 e2 02 00 	lss    0x2e2c0,%esp
      14:	e8 58 00 00 00       	call   71 <setup_idt>
      19:	e8 83 00 00 00       	call   a1 <setup_gdt>
      1e:	b8 10 00 00 00       	mov    $0x10,%eax
      23:	8e d8                	mov    %eax,%ds
      25:	8e c0                	mov    %eax,%es
      27:	8e e0                	mov    %eax,%fs
      29:	8e e8                	mov    %eax,%gs
      2b:	0f b2 25 c0 e2 02 00 	lss    0x2e2c0,%esp
      32:	31 c0                	xor    %eax,%eax
      34:	40                   	inc    %eax
      35:	a3 00 00 00 00       	mov    %eax,0x0
      3a:	39 05 00 00 10 00    	cmp    %eax,0x100000
      40:	74 f2                	je     34 <OLDSS+0x4>
      42:	0f 20 c0             	mov    %cr0,%eax
      45:	25 11 00 00 80       	and    $0x80000011,%eax
      4a:	83 c8 02             	or     $0x2,%eax
      4d:	0f 22 c0             	mov    %eax,%cr0
      50:	e8 05 00 00 00       	call   5a <check_x87>
      55:	e9 a6 53 00 00       	jmp    5400 <after_page_tables>

0000005a <check_x87>:
      5a:	db e3                	fninit 
      5c:	9b df e0             	fstsw  %ax
      5f:	3c 00                	cmp    $0x0,%al
      61:	74 0b                	je     6e <check_x87+0x14>
      63:	0f 20 c0             	mov    %cr0,%eax
      66:	83 f0 06             	xor    $0x6,%eax
      69:	0f 22 c0             	mov    %eax,%cr0
      6c:	c3                   	ret    
      6d:	90                   	nop
      6e:	db e4                	fnsetpm(287 only) 
      70:	c3                   	ret    

00000071 <setup_idt>:
      71:	8d 15 28 54 00 00    	lea    0x5428,%edx
      77:	b8 00 00 08 00       	mov    $0x80000,%eax
      7c:	66 89 d0             	mov    %dx,%ax
      7f:	66 ba 00 8e          	mov    $0x8e00,%dx
      83:	8d 3d b8 54 00 00    	lea    0x54b8,%edi
      89:	b9 00 01 00 00       	mov    $0x100,%ecx

0000008e <rp_sidt>:
      8e:	89 07                	mov    %eax,(%edi)
      90:	89 57 04             	mov    %edx,0x4(%edi)
      93:	83 c7 08             	add    $0x8,%edi
      96:	49                   	dec    %ecx
      97:	75 f5                	jne    8e <rp_sidt>
      99:	0f 01 1d aa 54 00 00 	lidtl  0x54aa
      a0:	c3                   	ret    

000000a1 <setup_gdt>:
      a1:	0f 01 15 b2 54 00 00 	lgdtl  0x54b2
      a8:	c3                   	ret    
	...

00001000 <pg0>:
	...

00002000 <pg1>:
	...

00003000 <pg2>:
	...

00004000 <pg3>:
	...

00005000 <tmp_floppy_area>:
	...

00005400 <after_page_tables>:
    5400:	6a 00                	push   $0x0
    5402:	6a 00                	push   $0x0
    5404:	6a 00                	push   $0x0
    5406:	68 12 54 00 00       	push   $0x5412
    540b:	68 00 68 00 00       	push   $0x6800
    5410:	eb 3c                	jmp    544e <setup_paging>

00005412 <L6>:
    5412:	eb fe                	jmp    5412 <L6>

00005414 <int_msg>:
    5414:	55                   	push   %ebp
    5415:	6e                   	outsb  %ds:(%esi),(%dx)
    5416:	6b 6e 6f 77          	imul   $0x77,0x6f(%esi),%ebp
    541a:	6e                   	outsb  %ds:(%esi),(%dx)
    541b:	20 69 6e             	and    %ch,0x6e(%ecx)
    541e:	74 65                	je     5485 <setup_paging+0x37>
    5420:	72 72                	jb     5494 <setup_paging+0x46>
    5422:	75 70                	jne    5494 <setup_paging+0x46>
    5424:	74 0a                	je     5430 <ignore_int+0x8>
    5426:	0d                   	.byte 0xd
	...

00005428 <ignore_int>:
    5428:	50                   	push   %eax
    5429:	51                   	push   %ecx
    542a:	52                   	push   %edx
    542b:	1e                   	push   %ds
    542c:	06                   	push   %es
    542d:	0f a0                	push   %fs
    542f:	b8 10 00 00 00       	mov    $0x10,%eax
    5434:	8e d8                	mov    %eax,%ds
    5436:	8e c0                	mov    %eax,%es
    5438:	8e e0                	mov    %eax,%fs
    543a:	68 14 54 00 00       	push   $0x5414
    543f:	e8 03 38 00 00       	call   8c47 <printk>
    5444:	58                   	pop    %eax
    5445:	0f a1                	pop    %fs
    5447:	07                   	pop    %es
    5448:	1f                   	pop    %ds
    5449:	5a                   	pop    %edx
    544a:	59                   	pop    %ecx
    544b:	58                   	pop    %eax
    544c:	cf                   	iret   
    544d:	90                   	nop

0000544e <setup_paging>:
    544e:	b9 00 14 00 00       	mov    $0x1400,%ecx
    5453:	31 c0                	xor    %eax,%eax
    5455:	31 ff                	xor    %edi,%edi
    5457:	fc                   	cld    
    5458:	f3 ab                	rep stos %eax,%es:(%edi)
    545a:	c7 05 00 00 00 00 07 	movl   $0x1007,0x0
    5461:	10 00 00 
    5464:	c7 05 04 00 00 00 07 	movl   $0x2007,0x4
    546b:	20 00 00 
    546e:	c7 05 08 00 00 00 07 	movl   $0x3007,0x8
    5475:	30 00 00 
    5478:	c7 05 0c 00 00 00 07 	movl   $0x4007,0xc
    547f:	40 00 00 
    5482:	bf fc 4f 00 00       	mov    $0x4ffc,%edi
    5487:	b8 07 f0 ff 00       	mov    $0xfff007,%eax
    548c:	fd                   	std    
    548d:	ab                   	stos   %eax,%es:(%edi)
    548e:	2d 00 10 00 00       	sub    $0x1000,%eax
    5493:	7d f8                	jge    548d <setup_paging+0x3f>
    5495:	fc                   	cld    
    5496:	31 c0                	xor    %eax,%eax
    5498:	0f 22 d8             	mov    %eax,%cr3
    549b:	0f 20 c0             	mov    %cr0,%eax
    549e:	0d 00 00 00 80       	or     $0x80000000,%eax
    54a3:	0f 22 c0             	mov    %eax,%cr0
    54a6:	c3                   	ret    
    54a7:	90                   	nop
	...

000054aa <idt_descr>:
    54aa:	ff 07                	incl   (%edi)
    54ac:	b8 54 00 00 00       	mov    $0x54,%eax
	...

000054b2 <gdt_descr>:
    54b2:	ff 07                	incl   (%edi)
    54b4:	b8                   	.byte 0xb8
    54b5:	5c                   	pop    %esp
	...

000054b8 <idt>:
	...

00005cb8 <gdt>:
	...
    5cc0:	ff 0f                	decl   (%edi)
    5cc2:	00 00                	add    %al,(%eax)
    5cc4:	00 9a c0 00 ff 0f    	add    %bl,0xfff00c0(%edx)
    5cca:	00 00                	add    %al,(%eax)
    5ccc:	00 92 c0 00 00 00    	add    %dl,0xc0(%edx)
	...

000064b8 <fork>:
// __attribute__((always_inline))表示将函数强制设置为内联函数
// int fork(void) __attribute__((always_inline));
//  int pause()系统调用：暂停进程的执行，直到收到一个信号。
// int pause(void) __attribute__((always_inline));
// fork()系统调用函数的定义
_syscall0(int, fork)
    64b8:	83 ec 10             	sub    $0x10,%esp
    64bb:	b8 02 00 00 00       	mov    $0x2,%eax
    64c0:	cd 80                	int    $0x80
    64c2:	89 44 24 0c          	mov    %eax,0xc(%esp)
    64c6:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    64cb:	78 06                	js     64d3 <fork+0x1b>
    64cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    64d1:	eb 10                	jmp    64e3 <fork+0x2b>
    64d3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    64d7:	f7 d8                	neg    %eax
    64d9:	a3 24 58 04 00       	mov    %eax,0x45824
    64de:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    64e3:	83 c4 10             	add    $0x10,%esp
    64e6:	c3                   	ret    

000064e7 <pause>:
// pause()系统调用函数的定义
_syscall0(int, pause)
    64e7:	83 ec 10             	sub    $0x10,%esp
    64ea:	b8 1d 00 00 00       	mov    $0x1d,%eax
    64ef:	cd 80                	int    $0x80
    64f1:	89 44 24 0c          	mov    %eax,0xc(%esp)
    64f5:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    64fa:	78 06                	js     6502 <pause+0x1b>
    64fc:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6500:	eb 10                	jmp    6512 <pause+0x2b>
    6502:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6506:	f7 d8                	neg    %eax
    6508:	a3 24 58 04 00       	mov    %eax,0x45824
    650d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    6512:	83 c4 10             	add    $0x10,%esp
    6515:	c3                   	ret    

00006516 <setup>:
// int setup(void * BIOS)系统调用,仅用于linux初始化(仅在这个程序中被调用).
_syscall1(int, setup, void *, BIOS)
    6516:	53                   	push   %ebx
    6517:	83 ec 10             	sub    $0x10,%esp
    651a:	8b 54 24 18          	mov    0x18(%esp),%edx
    651e:	b8 00 00 00 00       	mov    $0x0,%eax
    6523:	89 d3                	mov    %edx,%ebx
    6525:	cd 80                	int    $0x80
    6527:	89 44 24 0c          	mov    %eax,0xc(%esp)
    652b:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    6530:	78 06                	js     6538 <setup+0x22>
    6532:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6536:	eb 10                	jmp    6548 <setup+0x32>
    6538:	8b 44 24 0c          	mov    0xc(%esp),%eax
    653c:	f7 d8                	neg    %eax
    653e:	a3 24 58 04 00       	mov    %eax,0x45824
    6543:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    6548:	83 c4 10             	add    $0x10,%esp
    654b:	5b                   	pop    %ebx
    654c:	c3                   	ret    

0000654d <sync>:
// int sync()系统调用：更新文件系统。
_syscall0(int, sync)
    654d:	83 ec 10             	sub    $0x10,%esp
    6550:	b8 24 00 00 00       	mov    $0x24,%eax
    6555:	cd 80                	int    $0x80
    6557:	89 44 24 0c          	mov    %eax,0xc(%esp)
    655b:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    6560:	78 06                	js     6568 <sync+0x1b>
    6562:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6566:	eb 10                	jmp    6578 <sync+0x2b>
    6568:	8b 44 24 0c          	mov    0xc(%esp),%eax
    656c:	f7 d8                	neg    %eax
    656e:	a3 24 58 04 00       	mov    %eax,0x45824
    6573:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    6578:	83 c4 10             	add    $0x10,%esp
    657b:	c3                   	ret    

0000657c <fork_for_process0>:
extern long rd_init(long mem_start, int length);	// 虚拟盘初始化(blk_drv/ramdisk.c)
extern long kernel_mktime(struct tm * tm);			// 计算系统开机启动时间(秒)

// fork系统调用函数,该函数作为static inline表示内联函数，主要用来在进程0里面创建进程1的时候内联，使进程0在生成进程1的时候
// 不使用自己的用户堆栈
static inline long fork_for_process0() {
    657c:	83 ec 10             	sub    $0x10,%esp
	long __res;
	__asm__ volatile (
    657f:	b8 02 00 00 00       	mov    $0x2,%eax
    6584:	cd 80                	int    $0x80
    6586:	89 44 24 0c          	mov    %eax,0xc(%esp)
		"int $0x80\n\t"  														/* 调用系统中断0x80 */
		: "=a" (__res)  														/* 返回值->eax(__res) */
		: "0" (2));  															/* 输入为系统中断调用号__NR_name */
	if (__res >= 0)  															/* 如果返回值>=0,则直接返回该值 */
    658a:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    658f:	78 06                	js     6597 <fork_for_process0+0x1b>
		return __res;
    6591:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6595:	eb 10                	jmp    65a7 <fork_for_process0+0x2b>
	errno = -__res;  															/* 否则置出错号,并返回-1 */
    6597:	8b 44 24 0c          	mov    0xc(%esp),%eax
    659b:	f7 d8                	neg    %eax
    659d:	a3 24 58 04 00       	mov    %eax,0x45824
	return -1;
    65a2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
    65a7:	83 c4 10             	add    $0x10,%esp
    65aa:	c3                   	ret    

000065ab <sprintf>:

// 内核专用sprintf()函数.该函数用于产生格式化信息并输出到指定缓冲区str中.参数'*fmt'指定输出将采用格式.
static int sprintf(char * str, const char *fmt, ...)
{
    65ab:	83 ec 1c             	sub    $0x1c,%esp
	va_list args;
	int i;

	va_start(args, fmt);
    65ae:	8d 44 24 24          	lea    0x24(%esp),%eax
    65b2:	83 c0 04             	add    $0x4,%eax
    65b5:	89 44 24 0c          	mov    %eax,0xc(%esp)
	i = vsprintf(str, fmt, args);
    65b9:	8b 44 24 24          	mov    0x24(%esp),%eax
    65bd:	83 ec 04             	sub    $0x4,%esp
    65c0:	ff 74 24 10          	pushl  0x10(%esp)
    65c4:	50                   	push   %eax
    65c5:	ff 74 24 2c          	pushl  0x2c(%esp)
    65c9:	e8 b7 29 00 00       	call   8f85 <vsprintf>
    65ce:	83 c4 10             	add    $0x10,%esp
    65d1:	89 44 24 08          	mov    %eax,0x8(%esp)
	va_end(args);
	return i;
    65d5:	8b 44 24 08          	mov    0x8(%esp),%eax
}
    65d9:	83 c4 1c             	add    $0x1c,%esp
    65dc:	c3                   	ret    

000065dd <time_init>:
#define BCD_TO_BIN(val) ((val) = ((val)&15) + ((val) >> 4) * 10)

// 该函数取CMOS实时钟信息作为开机时间,并保存到全局变量startup_time(秒)中.其中调用的函数kernel_mktime()用于计算从
// 1970年1月1日0时起到开机当日经过的秒数,作为开机时间.
static void time_init(void)
{
    65dd:	83 ec 3c             	sub    $0x3c,%esp
	struct tm time;								// 时间结构tm定义在include/time.h中
	// CMOS的访问速度很慢.为了减小时间误差,在读取了下面循环中所有数值后,若此时CMOS中秒值了变化,那么就重新读取所有值.这样内核
	// 就能把与CMOS时间误差控制在1秒之内.
	do {
		time.tm_sec = CMOS_READ(0);				// 当前时间秒值(均是BCD码值)
    65e0:	b8 80 00 00 00       	mov    $0x80,%eax
    65e5:	ba 70 00 00 00       	mov    $0x70,%edx
    65ea:	ee                   	out    %al,(%dx)
    65eb:	eb 00                	jmp    65ed <time_init+0x10>
    65ed:	eb 00                	jmp    65ef <time_init+0x12>
    65ef:	b8 71 00 00 00       	mov    $0x71,%eax
    65f4:	89 c2                	mov    %eax,%edx
    65f6:	ec                   	in     (%dx),%al
    65f7:	eb 00                	jmp    65f9 <time_init+0x1c>
    65f9:	eb 00                	jmp    65fb <time_init+0x1e>
    65fb:	88 44 24 2f          	mov    %al,0x2f(%esp)
    65ff:	0f b6 44 24 2f       	movzbl 0x2f(%esp),%eax
    6604:	0f b6 c0             	movzbl %al,%eax
    6607:	89 44 24 04          	mov    %eax,0x4(%esp)
		time.tm_min = CMOS_READ(2);				// 当前分钟值.
    660b:	b8 82 00 00 00       	mov    $0x82,%eax
    6610:	ba 70 00 00 00       	mov    $0x70,%edx
    6615:	ee                   	out    %al,(%dx)
    6616:	eb 00                	jmp    6618 <time_init+0x3b>
    6618:	eb 00                	jmp    661a <time_init+0x3d>
    661a:	b8 71 00 00 00       	mov    $0x71,%eax
    661f:	89 c2                	mov    %eax,%edx
    6621:	ec                   	in     (%dx),%al
    6622:	eb 00                	jmp    6624 <time_init+0x47>
    6624:	eb 00                	jmp    6626 <time_init+0x49>
    6626:	88 44 24 2e          	mov    %al,0x2e(%esp)
    662a:	0f b6 44 24 2e       	movzbl 0x2e(%esp),%eax
    662f:	0f b6 c0             	movzbl %al,%eax
    6632:	89 44 24 08          	mov    %eax,0x8(%esp)
		time.tm_hour = CMOS_READ(4);			// 当前小时值.
    6636:	b8 84 00 00 00       	mov    $0x84,%eax
    663b:	ba 70 00 00 00       	mov    $0x70,%edx
    6640:	ee                   	out    %al,(%dx)
    6641:	eb 00                	jmp    6643 <time_init+0x66>
    6643:	eb 00                	jmp    6645 <time_init+0x68>
    6645:	b8 71 00 00 00       	mov    $0x71,%eax
    664a:	89 c2                	mov    %eax,%edx
    664c:	ec                   	in     (%dx),%al
    664d:	eb 00                	jmp    664f <time_init+0x72>
    664f:	eb 00                	jmp    6651 <time_init+0x74>
    6651:	88 44 24 2d          	mov    %al,0x2d(%esp)
    6655:	0f b6 44 24 2d       	movzbl 0x2d(%esp),%eax
    665a:	0f b6 c0             	movzbl %al,%eax
    665d:	89 44 24 0c          	mov    %eax,0xc(%esp)
		time.tm_mday = CMOS_READ(7);			// 一月中的当天日期.
    6661:	b8 87 00 00 00       	mov    $0x87,%eax
    6666:	ba 70 00 00 00       	mov    $0x70,%edx
    666b:	ee                   	out    %al,(%dx)
    666c:	eb 00                	jmp    666e <time_init+0x91>
    666e:	eb 00                	jmp    6670 <time_init+0x93>
    6670:	b8 71 00 00 00       	mov    $0x71,%eax
    6675:	89 c2                	mov    %eax,%edx
    6677:	ec                   	in     (%dx),%al
    6678:	eb 00                	jmp    667a <time_init+0x9d>
    667a:	eb 00                	jmp    667c <time_init+0x9f>
    667c:	88 44 24 2c          	mov    %al,0x2c(%esp)
    6680:	0f b6 44 24 2c       	movzbl 0x2c(%esp),%eax
    6685:	0f b6 c0             	movzbl %al,%eax
    6688:	89 44 24 10          	mov    %eax,0x10(%esp)
		time.tm_mon = CMOS_READ(8);				// 当前月份(1-12)
    668c:	b8 88 00 00 00       	mov    $0x88,%eax
    6691:	ba 70 00 00 00       	mov    $0x70,%edx
    6696:	ee                   	out    %al,(%dx)
    6697:	eb 00                	jmp    6699 <time_init+0xbc>
    6699:	eb 00                	jmp    669b <time_init+0xbe>
    669b:	b8 71 00 00 00       	mov    $0x71,%eax
    66a0:	89 c2                	mov    %eax,%edx
    66a2:	ec                   	in     (%dx),%al
    66a3:	eb 00                	jmp    66a5 <time_init+0xc8>
    66a5:	eb 00                	jmp    66a7 <time_init+0xca>
    66a7:	88 44 24 2b          	mov    %al,0x2b(%esp)
    66ab:	0f b6 44 24 2b       	movzbl 0x2b(%esp),%eax
    66b0:	0f b6 c0             	movzbl %al,%eax
    66b3:	89 44 24 14          	mov    %eax,0x14(%esp)
		time.tm_year = CMOS_READ(9);			// 当前年份.
    66b7:	b8 89 00 00 00       	mov    $0x89,%eax
    66bc:	ba 70 00 00 00       	mov    $0x70,%edx
    66c1:	ee                   	out    %al,(%dx)
    66c2:	eb 00                	jmp    66c4 <time_init+0xe7>
    66c4:	eb 00                	jmp    66c6 <time_init+0xe9>
    66c6:	b8 71 00 00 00       	mov    $0x71,%eax
    66cb:	89 c2                	mov    %eax,%edx
    66cd:	ec                   	in     (%dx),%al
    66ce:	eb 00                	jmp    66d0 <time_init+0xf3>
    66d0:	eb 00                	jmp    66d2 <time_init+0xf5>
    66d2:	88 44 24 2a          	mov    %al,0x2a(%esp)
    66d6:	0f b6 44 24 2a       	movzbl 0x2a(%esp),%eax
    66db:	0f b6 c0             	movzbl %al,%eax
    66de:	89 44 24 18          	mov    %eax,0x18(%esp)
	} while (time.tm_sec != CMOS_READ(0));
    66e2:	8b 4c 24 04          	mov    0x4(%esp),%ecx
    66e6:	b8 80 00 00 00       	mov    $0x80,%eax
    66eb:	ba 70 00 00 00       	mov    $0x70,%edx
    66f0:	ee                   	out    %al,(%dx)
    66f1:	eb 00                	jmp    66f3 <time_init+0x116>
    66f3:	eb 00                	jmp    66f5 <time_init+0x118>
    66f5:	b8 71 00 00 00       	mov    $0x71,%eax
    66fa:	89 c2                	mov    %eax,%edx
    66fc:	ec                   	in     (%dx),%al
    66fd:	eb 00                	jmp    66ff <time_init+0x122>
    66ff:	eb 00                	jmp    6701 <time_init+0x124>
    6701:	88 44 24 29          	mov    %al,0x29(%esp)
    6705:	0f b6 44 24 29       	movzbl 0x29(%esp),%eax
    670a:	0f b6 c0             	movzbl %al,%eax
    670d:	39 c1                	cmp    %eax,%ecx
    670f:	0f 85 cb fe ff ff    	jne    65e0 <time_init+0x3>
	BCD_TO_BIN(time.tm_sec);					// 转换成进进制数值.
    6715:	8b 44 24 04          	mov    0x4(%esp),%eax
    6719:	83 e0 0f             	and    $0xf,%eax
    671c:	89 c1                	mov    %eax,%ecx
    671e:	8b 44 24 04          	mov    0x4(%esp),%eax
    6722:	c1 f8 04             	sar    $0x4,%eax
    6725:	89 c2                	mov    %eax,%edx
    6727:	89 d0                	mov    %edx,%eax
    6729:	c1 e0 02             	shl    $0x2,%eax
    672c:	01 d0                	add    %edx,%eax
    672e:	01 c0                	add    %eax,%eax
    6730:	01 c8                	add    %ecx,%eax
    6732:	89 44 24 04          	mov    %eax,0x4(%esp)
	BCD_TO_BIN(time.tm_min);
    6736:	8b 44 24 08          	mov    0x8(%esp),%eax
    673a:	83 e0 0f             	and    $0xf,%eax
    673d:	89 c1                	mov    %eax,%ecx
    673f:	8b 44 24 08          	mov    0x8(%esp),%eax
    6743:	c1 f8 04             	sar    $0x4,%eax
    6746:	89 c2                	mov    %eax,%edx
    6748:	89 d0                	mov    %edx,%eax
    674a:	c1 e0 02             	shl    $0x2,%eax
    674d:	01 d0                	add    %edx,%eax
    674f:	01 c0                	add    %eax,%eax
    6751:	01 c8                	add    %ecx,%eax
    6753:	89 44 24 08          	mov    %eax,0x8(%esp)
	BCD_TO_BIN(time.tm_hour);
    6757:	8b 44 24 0c          	mov    0xc(%esp),%eax
    675b:	83 e0 0f             	and    $0xf,%eax
    675e:	89 c1                	mov    %eax,%ecx
    6760:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6764:	c1 f8 04             	sar    $0x4,%eax
    6767:	89 c2                	mov    %eax,%edx
    6769:	89 d0                	mov    %edx,%eax
    676b:	c1 e0 02             	shl    $0x2,%eax
    676e:	01 d0                	add    %edx,%eax
    6770:	01 c0                	add    %eax,%eax
    6772:	01 c8                	add    %ecx,%eax
    6774:	89 44 24 0c          	mov    %eax,0xc(%esp)
	BCD_TO_BIN(time.tm_mday);
    6778:	8b 44 24 10          	mov    0x10(%esp),%eax
    677c:	83 e0 0f             	and    $0xf,%eax
    677f:	89 c1                	mov    %eax,%ecx
    6781:	8b 44 24 10          	mov    0x10(%esp),%eax
    6785:	c1 f8 04             	sar    $0x4,%eax
    6788:	89 c2                	mov    %eax,%edx
    678a:	89 d0                	mov    %edx,%eax
    678c:	c1 e0 02             	shl    $0x2,%eax
    678f:	01 d0                	add    %edx,%eax
    6791:	01 c0                	add    %eax,%eax
    6793:	01 c8                	add    %ecx,%eax
    6795:	89 44 24 10          	mov    %eax,0x10(%esp)
	BCD_TO_BIN(time.tm_mon);
    6799:	8b 44 24 14          	mov    0x14(%esp),%eax
    679d:	83 e0 0f             	and    $0xf,%eax
    67a0:	89 c1                	mov    %eax,%ecx
    67a2:	8b 44 24 14          	mov    0x14(%esp),%eax
    67a6:	c1 f8 04             	sar    $0x4,%eax
    67a9:	89 c2                	mov    %eax,%edx
    67ab:	89 d0                	mov    %edx,%eax
    67ad:	c1 e0 02             	shl    $0x2,%eax
    67b0:	01 d0                	add    %edx,%eax
    67b2:	01 c0                	add    %eax,%eax
    67b4:	01 c8                	add    %ecx,%eax
    67b6:	89 44 24 14          	mov    %eax,0x14(%esp)
	BCD_TO_BIN(time.tm_year);
    67ba:	8b 44 24 18          	mov    0x18(%esp),%eax
    67be:	83 e0 0f             	and    $0xf,%eax
    67c1:	89 c1                	mov    %eax,%ecx
    67c3:	8b 44 24 18          	mov    0x18(%esp),%eax
    67c7:	c1 f8 04             	sar    $0x4,%eax
    67ca:	89 c2                	mov    %eax,%edx
    67cc:	89 d0                	mov    %edx,%eax
    67ce:	c1 e0 02             	shl    $0x2,%eax
    67d1:	01 d0                	add    %edx,%eax
    67d3:	01 c0                	add    %eax,%eax
    67d5:	01 c8                	add    %ecx,%eax
    67d7:	89 44 24 18          	mov    %eax,0x18(%esp)
	time.tm_mon--;								// tm_mon中月份范围是0~11.
    67db:	8b 44 24 14          	mov    0x14(%esp),%eax
    67df:	83 e8 01             	sub    $0x1,%eax
    67e2:	89 44 24 14          	mov    %eax,0x14(%esp)
	startup_time = kernel_mktime(&time);		// 计算开机时间.kernel/mktime.c
    67e6:	83 ec 0c             	sub    $0xc,%esp
    67e9:	8d 44 24 10          	lea    0x10(%esp),%eax
    67ed:	50                   	push   %eax
    67ee:	e8 0f 54 00 00       	call   bc02 <kernel_mktime>
    67f3:	83 c4 10             	add    $0x10,%esp
    67f6:	a3 04 eb 02 00       	mov    %eax,0x2eb04
}
    67fb:	90                   	nop
    67fc:	83 c4 3c             	add    $0x3c,%esp
    67ff:	c3                   	ret    

00006800 <main>:
struct drive_info { char dummy[32]; } drive_info;	// 用于存放硬盘参数表信息.

// 内核初始化主程序.初始化结束后将以任务0(idle任务即空闲任务)的身份运行.
// 英文注释含义是"这里确实是void,没错.在startup程序(head.s)中就是这样假设的".参见head.h程序代码.
int main(void)										/* This really IS void, no error here. */
{													/* The startup routine assumes (well, ...) this */
    6800:	8d 4c 24 04          	lea    0x4(%esp),%ecx
    6804:	83 e4 f0             	and    $0xfffffff0,%esp
    6807:	ff 71 fc             	pushl  -0x4(%ecx)
    680a:	55                   	push   %ebp
    680b:	89 e5                	mov    %esp,%ebp
    680d:	51                   	push   %ecx
    680e:	83 ec 04             	sub    $0x4,%esp
#ifdef EM
	// 开启仿真协处理器
	__asm__("movl %cr0,%eax \n\t" \
    6811:	0f 20 c0             	mov    %cr0,%eax
    6814:	83 f0 06             	xor    $0x6,%eax
    6817:	0f 22 c0             	mov    %eax,%cr0
	// 首先保存根文件系统设备和交换文件设备号,并根据setup.s程序中获取的信息设置控制台终端屏幕行,列数环境变量TERM,并用其设置初始init进程
	// 中执行etc/rc文件和shell程序使用的环境变量,以及复制内存0x90080处的硬盘表.
	// 其中ROOT_DEV已在前面包含进的include/linux/fs.h文件上被声明为extern_int
	// 而SWAP_DEV在include/linux/mm.h文件内也作了相同声明.这里mm.h文件并没有显式地列在本程序前部,因为前面包含进的include/linux/sched.h
	// 文件中已经含有它.
 	ROOT_DEV = ORIG_ROOT_DEV;										// ROOT_DEV定义在fs/super.c
    681a:	b8 fc 01 09 00       	mov    $0x901fc,%eax
    681f:	0f b7 00             	movzwl (%eax),%eax
    6822:	0f b7 c0             	movzwl %ax,%eax
    6825:	a3 cc 10 03 00       	mov    %eax,0x310cc
 	SWAP_DEV = ORIG_SWAP_DEV;										// SWAP_DEV定义在mm/swap.c
    682a:	b8 fa 01 09 00       	mov    $0x901fa,%eax
    682f:	0f b7 00             	movzwl (%eax),%eax
    6832:	0f b7 c0             	movzwl %ax,%eax
    6835:	a3 a0 01 03 00       	mov    %eax,0x301a0
   	sprintf(term, "TERM=con%dx%d", CON_COLS, CON_ROWS);
    683a:	b8 0e 00 09 00       	mov    $0x9000e,%eax
    683f:	0f b7 00             	movzwl (%eax),%eax
    6842:	0f b7 c0             	movzwl %ax,%eax
    6845:	0f b6 d0             	movzbl %al,%edx
    6848:	b8 0e 00 09 00       	mov    $0x9000e,%eax
    684d:	0f b7 00             	movzwl (%eax),%eax
    6850:	66 c1 e8 08          	shr    $0x8,%ax
    6854:	0f b7 c0             	movzwl %ax,%eax
    6857:	52                   	push   %edx
    6858:	50                   	push   %eax
    6859:	68 87 2a 02 00       	push   $0x22a87
    685e:	68 e0 ea 02 00       	push   $0x2eae0
    6863:	e8 43 fd ff ff       	call   65ab <sprintf>
    6868:	83 c4 10             	add    $0x10,%esp
	envp[1] = term;
    686b:	c7 05 20 d0 02 00 e0 	movl   $0x2eae0,0x2d020
    6872:	ea 02 00 
	envp_rc[1] = term;
    6875:	c7 05 0c d0 02 00 e0 	movl   $0x2eae0,0x2d00c
    687c:	ea 02 00 
    drive_info = DRIVE_INFO;										// 复制内存0x90080处的硬盘参数表.
    687f:	b8 80 00 09 00       	mov    $0x90080,%eax
    6884:	8b 10                	mov    (%eax),%edx
    6886:	89 15 20 f7 03 00    	mov    %edx,0x3f720
    688c:	8b 50 04             	mov    0x4(%eax),%edx
    688f:	89 15 24 f7 03 00    	mov    %edx,0x3f724
    6895:	8b 50 08             	mov    0x8(%eax),%edx
    6898:	89 15 28 f7 03 00    	mov    %edx,0x3f728
    689e:	8b 50 0c             	mov    0xc(%eax),%edx
    68a1:	89 15 2c f7 03 00    	mov    %edx,0x3f72c
    68a7:	8b 50 10             	mov    0x10(%eax),%edx
    68aa:	89 15 30 f7 03 00    	mov    %edx,0x3f730
    68b0:	8b 50 14             	mov    0x14(%eax),%edx
    68b3:	89 15 34 f7 03 00    	mov    %edx,0x3f734
    68b9:	8b 50 18             	mov    0x18(%eax),%edx
    68bc:	89 15 38 f7 03 00    	mov    %edx,0x3f738
    68c2:	8b 40 1c             	mov    0x1c(%eax),%eax
    68c5:	a3 3c f7 03 00       	mov    %eax,0x3f73c

	// 接着根据机器物理内存容量设置高速缓冲区和主内存的位置和范围.
	// 高速缓存末端地址->buffer_memory_end;机器内存容量->memory_end;主内存开始地址->main_memory_start.
	// 设置物理内存大小
	memory_end = (1 << 20) + (EXT_MEM_K << 10);						// 内存大小=1MB + 扩展内存(k)*1024字节.
    68ca:	b8 02 00 09 00       	mov    $0x90002,%eax
    68cf:	0f b7 00             	movzwl (%eax),%eax
    68d2:	0f b7 c0             	movzwl %ax,%eax
    68d5:	c1 e0 0a             	shl    $0xa,%eax
    68d8:	05 00 00 10 00       	add    $0x100000,%eax
    68dd:	a3 c0 ea 02 00       	mov    %eax,0x2eac0
	memory_end &= 0xfffff000;										// 忽略不到4KB(1页)的内存数.
    68e2:	a1 c0 ea 02 00       	mov    0x2eac0,%eax
    68e7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    68ec:	a3 c0 ea 02 00       	mov    %eax,0x2eac0
	if (memory_end > 16 * 1024 * 1024)								// 如果内存量超过16MB,则按16MB计.
    68f1:	a1 c0 ea 02 00       	mov    0x2eac0,%eax
    68f6:	3d 00 00 00 01       	cmp    $0x1000000,%eax
    68fb:	7e 0a                	jle    6907 <main+0x107>
		memory_end = 16 * 1024 * 1024;
    68fd:	c7 05 c0 ea 02 00 00 	movl   $0x1000000,0x2eac0
    6904:	00 00 01 
	// 根据物理内存的大小设置高速缓冲去的末端大小
	if (memory_end > 12 * 1024 * 1024) 								// 如果内存>12MB,则设置缓冲区末端=4MB
    6907:	a1 c0 ea 02 00       	mov    0x2eac0,%eax
    690c:	3d 00 00 c0 00       	cmp    $0xc00000,%eax
    6911:	7e 0c                	jle    691f <main+0x11f>
		buffer_memory_end = 4 * 1024 * 1024;
    6913:	c7 05 c4 ea 02 00 00 	movl   $0x400000,0x2eac4
    691a:	00 40 00 
    691d:	eb 22                	jmp    6941 <main+0x141>
	else if (memory_end > 6 * 1024 * 1024)							// 否则若内存>6MB,则设置缓冲区末端=2MB
    691f:	a1 c0 ea 02 00       	mov    0x2eac0,%eax
    6924:	3d 00 00 60 00       	cmp    $0x600000,%eax
    6929:	7e 0c                	jle    6937 <main+0x137>
		buffer_memory_end = 2 * 1024 * 1024;
    692b:	c7 05 c4 ea 02 00 00 	movl   $0x200000,0x2eac4
    6932:	00 20 00 
    6935:	eb 0a                	jmp    6941 <main+0x141>
	else
		buffer_memory_end = 1 * 1024 * 1024;						// 否则则设置缓冲区末端=1MB
    6937:	c7 05 c4 ea 02 00 00 	movl   $0x100000,0x2eac4
    693e:	00 10 00 
	// 根据高速缓冲区的末端大小设置主内存区的起始地址
	main_memory_start = buffer_memory_end;							// 主内存起始位置 = 缓冲区末端
    6941:	a1 c4 ea 02 00       	mov    0x2eac4,%eax
    6946:	a3 c8 ea 02 00       	mov    %eax,0x2eac8
	// 参见kernel/blk_drv/ramdisk.c.
#ifdef RAMDISK
	main_memory_start += rd_init(main_memory_start, RAMDISK * 1024);
#endif
	// 以下是内核进行所有方面的初始化工作.
	mem_init(main_memory_start, memory_end);						// 主内存区初始化.(mm/memory.c)
    694b:	8b 15 c0 ea 02 00    	mov    0x2eac0,%edx
    6951:	a1 c8 ea 02 00       	mov    0x2eac8,%eax
    6956:	83 ec 08             	sub    $0x8,%esp
    6959:	52                   	push   %edx
    695a:	50                   	push   %eax
    695b:	e8 b9 5f 00 00       	call   c919 <mem_init>
    6960:	83 c4 10             	add    $0x10,%esp
	trap_init();                                    				// 陷阱门(硬件中断向量)初始化.(kernel/traps.c)
    6963:	e8 58 16 00 00       	call   7fc0 <trap_init>
	blk_dev_init();													// 块设备初始化.(blk_drv/ll_rw_blk.c)
    6968:	e8 db 00 01 00       	call   16a48 <blk_dev_init>
	chr_dev_init();													// 字符设备初始化.(chr_drv/tty_io.c)
    696d:	e8 2d 32 01 00       	call   19b9f <chr_dev_init>
 	tty_init();														// tty初始化(chr_drv/tty_io.c)
    6972:	e8 2a 32 01 00       	call   19ba1 <tty_init>
	time_init();													// 设置开机启动时间.
    6977:	e8 61 fc ff ff       	call   65dd <time_init>
 	sched_init();													// 调度程序初始化(加载任务0的tr,ldtr)(kernel/sched.c)
    697c:	e8 04 0e 00 00       	call   7785 <sched_init>
	buffer_init(buffer_memory_end);									// 缓冲管理初始化,建内存链表等.(fs/buffer.c)
    6981:	a1 c4 ea 02 00       	mov    0x2eac4,%eax
    6986:	83 ec 0c             	sub    $0xc,%esp
    6989:	50                   	push   %eax
    698a:	e8 12 90 00 00       	call   f9a1 <buffer_init>
    698f:	83 c4 10             	add    $0x10,%esp
	hd_init();														// 硬盘初始化.	(blk_drv/hd.c)
    6992:	e8 c3 1b 01 00       	call   1855a <hd_init>
	floppy_init();													// 软驱初始化.	(blk_drv/floppy.c)
    6997:	e8 6d 0d 01 00       	call   17709 <floppy_init>
	sti();															// 所有初始化工作都完了,于是开启中断.
    699c:	fb                   	sti    
	// 打印内核初始化完毕
	Log(LOG_INFO_TYPE, "<<<<< Linux0.12 Kernel Init Finished, Ready Start Process0 >>>>>\n");
    699d:	83 ec 08             	sub    $0x8,%esp
    69a0:	68 98 2a 02 00       	push   $0x22a98
    69a5:	6a 00                	push   $0x0
    69a7:	e8 43 c0 01 00       	call   229ef <Log>
    69ac:	83 c4 10             	add    $0x10,%esp
	// 下面过程通过在堆栈中设置的参数,利用中断返回指令启动任务0执行.
	move_to_user_mode();											// 移到用户模式下执行.(include/asm/system.h)
    69af:	89 e0                	mov    %esp,%eax
    69b1:	6a 17                	push   $0x17
    69b3:	50                   	push   %eax
    69b4:	9c                   	pushf  
    69b5:	6a 0f                	push   $0xf
    69b7:	68 bd 69 00 00       	push   $0x69bd
    69bc:	cf                   	iret   
    69bd:	b8 17 00 00 00       	mov    $0x17,%eax
    69c2:	8e d8                	mov    %eax,%ds
    69c4:	8e c0                	mov    %eax,%es
    69c6:	8e e0                	mov    %eax,%fs
    69c8:	8e e8                	mov    %eax,%gs
	if (!fork_for_process0()) {										/* we count on this going ok */
    69ca:	e8 ad fb ff ff       	call   657c <fork_for_process0>
    69cf:	85 c0                	test   %eax,%eax
    69d1:	75 05                	jne    69d8 <main+0x1d8>
		init();														// 在新建的子进程(任务1即init进程)中执行.
    69d3:	e8 4f 00 00 00       	call   6a27 <init>
	 * 我们就回到这里,一直循环执行'pause()'.
	 */
	// pause()系统调用(kernel/sched.c)会把任务0转换成可中断等待状态,再执行调度函数.但是调度函数只要发现系统中没有其他任务可以运行时就会切换
	// 到任务0,是不信赖于任务0的状态.
	for(;;)
		__asm__("int $0x80"::"a" (__NR_pause):);					// 即执行系统调用pause().
    69d8:	b8 1d 00 00 00       	mov    $0x1d,%eax
    69dd:	cd 80                	int    $0x80
    69df:	eb f7                	jmp    69d8 <main+0x1d8>

000069e1 <printf>:

// 下面函数产生格式化信息并输出到标准输出设备stdout(1),这里是指屏幕上显示.参数'*fmt'指定输出将采用的格式,参见标准C语言书籍.
// 该子程序正好是vsprintf如何使用的一个简单例子.该程序使用vsprintf()将格式化的字符串放入printbuf缓冲区,然后用write()将
// 缓冲区的内容输出到标准设备(1--stdout).vsprintf()函数的实现见kernel/vsprintf.c.
int printf(const char *fmt, ...)
{
    69e1:	83 ec 1c             	sub    $0x1c,%esp
	va_list args;
	int i;

	va_start(args, fmt);
    69e4:	8d 44 24 24          	lea    0x24(%esp),%eax
    69e8:	89 44 24 0c          	mov    %eax,0xc(%esp)
	write(1, printbuf, i = vsprintf(printbuf, fmt, args));
    69ec:	8b 44 24 20          	mov    0x20(%esp),%eax
    69f0:	83 ec 04             	sub    $0x4,%esp
    69f3:	ff 74 24 10          	pushl  0x10(%esp)
    69f7:	50                   	push   %eax
    69f8:	68 c0 e6 02 00       	push   $0x2e6c0
    69fd:	e8 83 25 00 00       	call   8f85 <vsprintf>
    6a02:	83 c4 10             	add    $0x10,%esp
    6a05:	89 44 24 08          	mov    %eax,0x8(%esp)
    6a09:	83 ec 04             	sub    $0x4,%esp
    6a0c:	ff 74 24 0c          	pushl  0xc(%esp)
    6a10:	68 c0 e6 02 00       	push   $0x2e6c0
    6a15:	6a 01                	push   $0x1
    6a17:	e8 a5 be 01 00       	call   228c1 <write>
    6a1c:	83 c4 10             	add    $0x10,%esp
	va_end(args);
	return i;
    6a1f:	8b 44 24 08          	mov    0x8(%esp),%eax
}
    6a23:	83 c4 1c             	add    $0x1c,%esp
    6a26:	c3                   	ret    

00006a27 <init>:

// 在main()中已经进行子系统初始化,包括内存管理,各种硬件设备和驱动程序.init()函数在任务0第1次创建的子进程(任务1)中.它首先对第一个将要执行
// 的程序(shell)的环境进行初始化,然后以登录shell方式加载程序并执行之.
void init(void)
{
    6a27:	83 ec 1c             	sub    $0x1c,%esp
	int pid, i, fd;
	// setup()是一个系统调用.用于读取硬盘参数和分区表信息并加载虚拟盘(若存在的话)和安装根文件系统设备.该函数用25行上的宏定义,对就函数是sys_setup(),
	// 在块设备子目录kernel/blk_drv/hd.c.
	setup((void *) &drive_info);
    6a2a:	68 20 f7 03 00       	push   $0x3f720
    6a2f:	e8 e2 fa ff ff       	call   6516 <setup>
    6a34:	83 c4 04             	add    $0x4,%esp
	// 下面以读写访问方式打开设备"/dev/tty0",它对应终端控制台.由于这是第一次打开文件操作,因此产生的文件句柄号(文件描述符)肯定是0.该句柄是UNIX类操作
	// 系统默认的控制台标准输入句柄stdin.这里再把它以读和写的方式分别打开是为了复制产生标准输出(写)句柄stdout和标准出错输出句柄stderr.函数前面的"(void)"
	// 前缀用于表示强制函数无需返回值.
	(void) open("/dev/tty1", O_RDWR, 0);
    6a37:	83 ec 04             	sub    $0x4,%esp
    6a3a:	6a 00                	push   $0x0
    6a3c:	6a 02                	push   $0x2
    6a3e:	68 da 2a 02 00       	push   $0x22ada
    6a43:	e8 f9 bd 01 00       	call   22841 <open>
    6a48:	83 c4 10             	add    $0x10,%esp
	(void) dup(0);													// 复制句柄,产生句柄1号--stdout标准输出设备.
    6a4b:	83 ec 0c             	sub    $0xc,%esp
    6a4e:	6a 00                	push   $0x0
    6a50:	e8 a9 be 01 00       	call   228fe <dup>
    6a55:	83 c4 10             	add    $0x10,%esp
	(void) dup(0);													// 复制句柄,产生句柄2号--stderr标准出错输出设备.
    6a58:	83 ec 0c             	sub    $0xc,%esp
    6a5b:	6a 00                	push   $0x0
    6a5d:	e8 9c be 01 00       	call   228fe <dup>
    6a62:	83 c4 10             	add    $0x10,%esp
	// 进程1执行的用户级代码的开始
	printf("<<<<< Process 1 console fd = %d >>>>>\n", fd);
    6a65:	83 ec 08             	sub    $0x8,%esp
    6a68:	ff 74 24 14          	pushl  0x14(%esp)
    6a6c:	68 e4 2a 02 00       	push   $0x22ae4
    6a71:	e8 6b ff ff ff       	call   69e1 <printf>
    6a76:	83 c4 10             	add    $0x10,%esp
	// 下面打印缓冲区块数和总字节数,每块1024字节,以及主内存区空闲内存字节数.
	printf("<<<<< %d buffers = %d bytes buffer space >>>>>\n\r", NR_BUFFERS,
    6a79:	a1 c0 10 03 00       	mov    0x310c0,%eax
    6a7e:	c1 e0 0a             	shl    $0xa,%eax
    6a81:	89 c2                	mov    %eax,%edx
    6a83:	a1 c0 10 03 00       	mov    0x310c0,%eax
    6a88:	83 ec 04             	sub    $0x4,%esp
    6a8b:	52                   	push   %edx
    6a8c:	50                   	push   %eax
    6a8d:	68 0c 2b 02 00       	push   $0x22b0c
    6a92:	e8 4a ff ff ff       	call   69e1 <printf>
    6a97:	83 c4 10             	add    $0x10,%esp
			NR_BUFFERS * BLOCK_SIZE);
	printf("<<<<< Free mem: %d bytes >>>>>\n\r", memory_end - main_memory_start);
    6a9a:	8b 15 c0 ea 02 00    	mov    0x2eac0,%edx
    6aa0:	a1 c8 ea 02 00       	mov    0x2eac8,%eax
    6aa5:	29 c2                	sub    %eax,%edx
    6aa7:	89 d0                	mov    %edx,%eax
    6aa9:	83 ec 08             	sub    $0x8,%esp
    6aac:	50                   	push   %eax
    6aad:	68 40 2b 02 00       	push   $0x22b40
    6ab2:	e8 2a ff ff ff       	call   69e1 <printf>
    6ab7:	83 c4 10             	add    $0x10,%esp
	// 下面fork()用于创建一个子进程(任务2).对于被创建的子进程,fork()将返回0值,对于原进程(父进程)则返回子进程的进程号pid.所以第202--206行是子进程执行的内容.
	// 该子进程关闭了句柄0(stdin),以只读方式打开/etc/rc文件,并使用execve()函数将进程自身替换成/bin/sh程序(即shell程序),然后执行/bin/sh程序.所携带的参数
	// 和环境变量分别由argv_rc和envp_rc数组给出.关闭句柄0并立刻打开/etc/rc文件的作用是把标准输入stdin重定向到/etc/rc/文件.这样shell程序/bin/sh就可以运行
	// rc文件中设置的命令.由于这里sh的运行方式是非交互式的,因此在执行完rc文件中的命令后就会立刻退出,进程2也随之结束.并于execve()函数说明请参见fs/exec.c程序.
	// 函数_exit()退出时的出错码1 - 操作未许可;2 -- 文件或目录不存在.
	if (!(pid = fork())) {
    6aba:	e8 f9 f9 ff ff       	call   64b8 <fork>
    6abf:	89 44 24 08          	mov    %eax,0x8(%esp)
    6ac3:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    6ac8:	75 59                	jne    6b23 <init+0xfc>
		close(0);
    6aca:	83 ec 0c             	sub    $0xc,%esp
    6acd:	6a 00                	push   $0x0
    6acf:	e8 b6 bd 01 00       	call   2288a <close>
    6ad4:	83 c4 10             	add    $0x10,%esp
		if (open("/etc/rc", O_RDONLY, 0))
    6ad7:	83 ec 04             	sub    $0x4,%esp
    6ada:	6a 00                	push   $0x0
    6adc:	6a 00                	push   $0x0
    6ade:	68 61 2b 02 00       	push   $0x22b61
    6ae3:	e8 59 bd 01 00       	call   22841 <open>
    6ae8:	83 c4 10             	add    $0x10,%esp
    6aeb:	85 c0                	test   %eax,%eax
    6aed:	74 0d                	je     6afc <init+0xd5>
			_exit(1);												// 若打开文件失败,则退出(lib/_exit.c).
    6aef:	83 ec 0c             	sub    $0xc,%esp
    6af2:	6a 01                	push   $0x1
    6af4:	e8 37 bd 01 00       	call   22830 <_exit>
    6af9:	83 c4 10             	add    $0x10,%esp
		execve("/bin/sh", argv_rc, envp_rc);						// 替换成/bin/sh程序并执行.
    6afc:	83 ec 04             	sub    $0x4,%esp
    6aff:	68 08 d0 02 00       	push   $0x2d008
    6b04:	68 00 d0 02 00       	push   $0x2d000
    6b09:	68 60 2a 02 00       	push   $0x22a60
    6b0e:	e8 51 be 01 00       	call   22964 <execve>
    6b13:	83 c4 10             	add    $0x10,%esp
		_exit(2);													// 若execve()执行失败则退出.
    6b16:	83 ec 0c             	sub    $0xc,%esp
    6b19:	6a 02                	push   $0x2
    6b1b:	e8 10 bd 01 00       	call   22830 <_exit>
    6b20:	83 c4 10             	add    $0x10,%esp
    }
	// 下面还是父进程（1）执行的语句。wait()等待子进程停止或终止，返回值应是子进程的进程号（pid)。这三句的作用是父进程等待子进程
	// 的结束。&i是存放返回状态信息的位置。如果wait()返回值不等于子进程号，则继续等待。
  	if (pid > 0)
    6b23:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    6b28:	7e 17                	jle    6b41 <init+0x11a>
		while (pid != wait(&i));
    6b2a:	90                   	nop
    6b2b:	83 ec 0c             	sub    $0xc,%esp
    6b2e:	8d 44 24 10          	lea    0x10(%esp),%eax
    6b32:	50                   	push   %eax
    6b33:	e8 a6 be 01 00       	call   229de <wait>
    6b38:	83 c4 10             	add    $0x10,%esp
    6b3b:	3b 44 24 08          	cmp    0x8(%esp),%eax
    6b3f:	75 ea                	jne    6b2b <init+0x104>
	// 失败”信息并继续执行。对于所创建的子进程将关闭所有以前还遗留的句柄（stdin、stdout、stderr），新创建一个会话并设置进程组号，
	// 然后重新打开/dev/tty0作为stdin，并复制成stdout和stderr。再次执行系统解释程序/bin/sh。但这次执行所选用的参数和环境数组另
	// 选了一套。然后父进程再次运行wait()等等。如果子进程又停止了执行，则在标准输出上显示出错信息“子进程pid停止了运行，返回码是i”，
	// 然后继续重试下去...，形成“大”死循环。
	while (1) {
		if ((pid = fork()) < 0) {
    6b41:	e8 72 f9 ff ff       	call   64b8 <fork>
    6b46:	89 44 24 08          	mov    %eax,0x8(%esp)
    6b4a:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    6b4f:	79 17                	jns    6b68 <init+0x141>
			printf("Fork failed in init %c\r\n", ' ');
    6b51:	83 ec 08             	sub    $0x8,%esp
    6b54:	6a 20                	push   $0x20
    6b56:	68 69 2b 02 00       	push   $0x22b69
    6b5b:	e8 81 fe ff ff       	call   69e1 <printf>
    6b60:	83 c4 10             	add    $0x10,%esp
			continue;
    6b63:	e9 c2 00 00 00       	jmp    6c2a <init+0x203>
		}
		if (!pid) {                             					// 新的子进程。
    6b68:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    6b6d:	0f 85 80 00 00 00    	jne    6bf3 <init+0x1cc>
			close(0); close(1); close(2);
    6b73:	83 ec 0c             	sub    $0xc,%esp
    6b76:	6a 00                	push   $0x0
    6b78:	e8 0d bd 01 00       	call   2288a <close>
    6b7d:	83 c4 10             	add    $0x10,%esp
    6b80:	83 ec 0c             	sub    $0xc,%esp
    6b83:	6a 01                	push   $0x1
    6b85:	e8 00 bd 01 00       	call   2288a <close>
    6b8a:	83 c4 10             	add    $0x10,%esp
    6b8d:	83 ec 0c             	sub    $0xc,%esp
    6b90:	6a 02                	push   $0x2
    6b92:	e8 f3 bc 01 00       	call   2288a <close>
    6b97:	83 c4 10             	add    $0x10,%esp
			setsid();                       						// 创建一新的会话期，见后面说明。
    6b9a:	e8 96 bd 01 00       	call   22935 <setsid>
			(void) open("/dev/tty1", O_RDWR, 0);
    6b9f:	83 ec 04             	sub    $0x4,%esp
    6ba2:	6a 00                	push   $0x0
    6ba4:	6a 02                	push   $0x2
    6ba6:	68 da 2a 02 00       	push   $0x22ada
    6bab:	e8 91 bc 01 00       	call   22841 <open>
    6bb0:	83 c4 10             	add    $0x10,%esp
			(void) dup(0);
    6bb3:	83 ec 0c             	sub    $0xc,%esp
    6bb6:	6a 00                	push   $0x0
    6bb8:	e8 41 bd 01 00       	call   228fe <dup>
    6bbd:	83 c4 10             	add    $0x10,%esp
			(void) dup(0);
    6bc0:	83 ec 0c             	sub    $0xc,%esp
    6bc3:	6a 00                	push   $0x0
    6bc5:	e8 34 bd 01 00       	call   228fe <dup>
    6bca:	83 c4 10             	add    $0x10,%esp
			_exit(execve("/bin/sh", argv, envp));
    6bcd:	83 ec 04             	sub    $0x4,%esp
    6bd0:	68 1c d0 02 00       	push   $0x2d01c
    6bd5:	68 14 d0 02 00       	push   $0x2d014
    6bda:	68 60 2a 02 00       	push   $0x22a60
    6bdf:	e8 80 bd 01 00       	call   22964 <execve>
    6be4:	83 c4 10             	add    $0x10,%esp
    6be7:	83 ec 0c             	sub    $0xc,%esp
    6bea:	50                   	push   %eax
    6beb:	e8 40 bc 01 00       	call   22830 <_exit>
    6bf0:	83 c4 10             	add    $0x10,%esp
		}
		while (1)
			if (pid == wait(&i))
    6bf3:	83 ec 0c             	sub    $0xc,%esp
    6bf6:	8d 44 24 10          	lea    0x10(%esp),%eax
    6bfa:	50                   	push   %eax
    6bfb:	e8 de bd 01 00       	call   229de <wait>
    6c00:	83 c4 10             	add    $0x10,%esp
    6c03:	3b 44 24 08          	cmp    0x8(%esp),%eax
    6c07:	74 02                	je     6c0b <init+0x1e4>
				break;
		printf("\n\rchild %d died with code %04x\n\r", pid, i);
    6c09:	eb e8                	jmp    6bf3 <init+0x1cc>
			(void) dup(0);
			_exit(execve("/bin/sh", argv, envp));
		}
		while (1)
			if (pid == wait(&i))
				break;
    6c0b:	90                   	nop
		printf("\n\rchild %d died with code %04x\n\r", pid, i);
    6c0c:	8b 44 24 04          	mov    0x4(%esp),%eax
    6c10:	83 ec 04             	sub    $0x4,%esp
    6c13:	50                   	push   %eax
    6c14:	ff 74 24 10          	pushl  0x10(%esp)
    6c18:	68 84 2b 02 00       	push   $0x22b84
    6c1d:	e8 bf fd ff ff       	call   69e1 <printf>
    6c22:	83 c4 10             	add    $0x10,%esp
		sync();
    6c25:	e8 23 f9 ff ff       	call   654d <sync>
	}
    6c2a:	e9 12 ff ff ff       	jmp    6b41 <init+0x11a>
    6c2f:	90                   	nop

00006c30 <show_task>:
// 除了SIGKILL和SIGSTOP信号以外其他信号都是可阻塞的.
#define _BLOCKABLE (~(_S(SIGKILL) | _S(SIGSTOP)))

// 内核调试函数.显示任务号nr的进程号,进程状态和内核堆栈空闲字节数(大约).
void show_task(int nr, struct task_struct * p)
{
    6c30:	53                   	push   %ebx
    6c31:	83 ec 18             	sub    $0x18,%esp
	int i, j = 4096 - sizeof(struct task_struct);
    6c34:	c7 44 24 08 7c 0b 00 	movl   $0xb7c,0x8(%esp)
    6c3b:	00 

	printk("%d: pid=%d, state=%d, father=%d, child=%d, ", nr, p->pid,
		p->state, p->p_pptr->pid, p->p_cptr ? p->p_cptr->pid : -1);
    6c3c:	8b 44 24 24          	mov    0x24(%esp),%eax
    6c40:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
// 内核调试函数.显示任务号nr的进程号,进程状态和内核堆栈空闲字节数(大约).
void show_task(int nr, struct task_struct * p)
{
	int i, j = 4096 - sizeof(struct task_struct);

	printk("%d: pid=%d, state=%d, father=%d, child=%d, ", nr, p->pid,
    6c46:	85 c0                	test   %eax,%eax
    6c48:	74 12                	je     6c5c <show_task+0x2c>
		p->state, p->p_pptr->pid, p->p_cptr ? p->p_cptr->pid : -1);
    6c4a:	8b 44 24 24          	mov    0x24(%esp),%eax
    6c4e:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
// 内核调试函数.显示任务号nr的进程号,进程状态和内核堆栈空闲字节数(大约).
void show_task(int nr, struct task_struct * p)
{
	int i, j = 4096 - sizeof(struct task_struct);

	printk("%d: pid=%d, state=%d, father=%d, child=%d, ", nr, p->pid,
    6c54:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    6c5a:	eb 05                	jmp    6c61 <show_task+0x31>
    6c5c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
		p->state, p->p_pptr->pid, p->p_cptr ? p->p_cptr->pid : -1);
    6c61:	8b 54 24 24          	mov    0x24(%esp),%edx
    6c65:	8b 92 bc 02 00 00    	mov    0x2bc(%edx),%edx
// 内核调试函数.显示任务号nr的进程号,进程状态和内核堆栈空闲字节数(大约).
void show_task(int nr, struct task_struct * p)
{
	int i, j = 4096 - sizeof(struct task_struct);

	printk("%d: pid=%d, state=%d, father=%d, child=%d, ", nr, p->pid,
    6c6b:	8b 9a 2c 02 00 00    	mov    0x22c(%edx),%ebx
    6c71:	8b 54 24 24          	mov    0x24(%esp),%edx
    6c75:	8b 0a                	mov    (%edx),%ecx
    6c77:	8b 54 24 24          	mov    0x24(%esp),%edx
    6c7b:	8b 92 2c 02 00 00    	mov    0x22c(%edx),%edx
    6c81:	83 ec 08             	sub    $0x8,%esp
    6c84:	50                   	push   %eax
    6c85:	53                   	push   %ebx
    6c86:	51                   	push   %ecx
    6c87:	52                   	push   %edx
    6c88:	ff 74 24 38          	pushl  0x38(%esp)
    6c8c:	68 a8 2b 02 00       	push   $0x22ba8
    6c91:	e8 b1 1f 00 00       	call   8c47 <printk>
    6c96:	83 c4 20             	add    $0x20,%esp
		p->state, p->p_pptr->pid, p->p_cptr ? p->p_cptr->pid : -1);
	i = 0;
    6c99:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    6ca0:	00 
	while (i < j && !((char *)(p + 1))[i])				// 检测指定任务数据结构以后等于0的字节数.
    6ca1:	eb 05                	jmp    6ca8 <show_task+0x78>
		i++;
    6ca3:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
	int i, j = 4096 - sizeof(struct task_struct);

	printk("%d: pid=%d, state=%d, father=%d, child=%d, ", nr, p->pid,
		p->state, p->p_pptr->pid, p->p_cptr ? p->p_cptr->pid : -1);
	i = 0;
	while (i < j && !((char *)(p + 1))[i])				// 检测指定任务数据结构以后等于0的字节数.
    6ca8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6cac:	3b 44 24 08          	cmp    0x8(%esp),%eax
    6cb0:	7d 17                	jge    6cc9 <show_task+0x99>
    6cb2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6cb6:	8d 90 84 04 00 00    	lea    0x484(%eax),%edx
    6cbc:	8b 44 24 24          	mov    0x24(%esp),%eax
    6cc0:	01 d0                	add    %edx,%eax
    6cc2:	0f b6 00             	movzbl (%eax),%eax
    6cc5:	84 c0                	test   %al,%al
    6cc7:	74 da                	je     6ca3 <show_task+0x73>
		i++;
	printk("%d/%d chars free in kstack\n\r", i, j);
    6cc9:	83 ec 04             	sub    $0x4,%esp
    6ccc:	ff 74 24 0c          	pushl  0xc(%esp)
    6cd0:	ff 74 24 14          	pushl  0x14(%esp)
    6cd4:	68 d4 2b 02 00       	push   $0x22bd4
    6cd9:	e8 69 1f 00 00       	call   8c47 <printk>
    6cde:	83 c4 10             	add    $0x10,%esp
	printk("   PC=%08X.", *(1019 + (unsigned long *) p));
    6ce1:	8b 44 24 24          	mov    0x24(%esp),%eax
    6ce5:	05 ec 0f 00 00       	add    $0xfec,%eax
    6cea:	8b 00                	mov    (%eax),%eax
    6cec:	83 ec 08             	sub    $0x8,%esp
    6cef:	50                   	push   %eax
    6cf0:	68 f1 2b 02 00       	push   $0x22bf1
    6cf5:	e8 4d 1f 00 00       	call   8c47 <printk>
    6cfa:	83 c4 10             	add    $0x10,%esp
	if (p->p_ysptr || p->p_osptr)
    6cfd:	8b 44 24 24          	mov    0x24(%esp),%eax
    6d01:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    6d07:	85 c0                	test   %eax,%eax
    6d09:	75 0e                	jne    6d19 <show_task+0xe9>
    6d0b:	8b 44 24 24          	mov    0x24(%esp),%eax
    6d0f:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    6d15:	85 c0                	test   %eax,%eax
    6d17:	74 5e                	je     6d77 <show_task+0x147>
		printk("   Younger sib=%d, older sib=%d\n\r",
			p->p_ysptr ? p->p_ysptr->pid : -1,
			p->p_osptr ? p->p_osptr->pid : -1);
    6d19:	8b 44 24 24          	mov    0x24(%esp),%eax
    6d1d:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
	while (i < j && !((char *)(p + 1))[i])				// 检测指定任务数据结构以后等于0的字节数.
		i++;
	printk("%d/%d chars free in kstack\n\r", i, j);
	printk("   PC=%08X.", *(1019 + (unsigned long *) p));
	if (p->p_ysptr || p->p_osptr)
		printk("   Younger sib=%d, older sib=%d\n\r",
    6d23:	85 c0                	test   %eax,%eax
    6d25:	74 12                	je     6d39 <show_task+0x109>
			p->p_ysptr ? p->p_ysptr->pid : -1,
			p->p_osptr ? p->p_osptr->pid : -1);
    6d27:	8b 44 24 24          	mov    0x24(%esp),%eax
    6d2b:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
	while (i < j && !((char *)(p + 1))[i])				// 检测指定任务数据结构以后等于0的字节数.
		i++;
	printk("%d/%d chars free in kstack\n\r", i, j);
	printk("   PC=%08X.", *(1019 + (unsigned long *) p));
	if (p->p_ysptr || p->p_osptr)
		printk("   Younger sib=%d, older sib=%d\n\r",
    6d31:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
    6d37:	eb 05                	jmp    6d3e <show_task+0x10e>
    6d39:	ba ff ff ff ff       	mov    $0xffffffff,%edx
			p->p_ysptr ? p->p_ysptr->pid : -1,
    6d3e:	8b 44 24 24          	mov    0x24(%esp),%eax
    6d42:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
	while (i < j && !((char *)(p + 1))[i])				// 检测指定任务数据结构以后等于0的字节数.
		i++;
	printk("%d/%d chars free in kstack\n\r", i, j);
	printk("   PC=%08X.", *(1019 + (unsigned long *) p));
	if (p->p_ysptr || p->p_osptr)
		printk("   Younger sib=%d, older sib=%d\n\r",
    6d48:	85 c0                	test   %eax,%eax
    6d4a:	74 12                	je     6d5e <show_task+0x12e>
			p->p_ysptr ? p->p_ysptr->pid : -1,
    6d4c:	8b 44 24 24          	mov    0x24(%esp),%eax
    6d50:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
	while (i < j && !((char *)(p + 1))[i])				// 检测指定任务数据结构以后等于0的字节数.
		i++;
	printk("%d/%d chars free in kstack\n\r", i, j);
	printk("   PC=%08X.", *(1019 + (unsigned long *) p));
	if (p->p_ysptr || p->p_osptr)
		printk("   Younger sib=%d, older sib=%d\n\r",
    6d56:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    6d5c:	eb 05                	jmp    6d63 <show_task+0x133>
    6d5e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    6d63:	83 ec 04             	sub    $0x4,%esp
    6d66:	52                   	push   %edx
    6d67:	50                   	push   %eax
    6d68:	68 00 2c 02 00       	push   $0x22c00
    6d6d:	e8 d5 1e 00 00       	call   8c47 <printk>
    6d72:	83 c4 10             	add    $0x10,%esp
    6d75:	eb 10                	jmp    6d87 <show_task+0x157>
			p->p_ysptr ? p->p_ysptr->pid : -1,
			p->p_osptr ? p->p_osptr->pid : -1);
	else
		printk("\n\r");
    6d77:	83 ec 0c             	sub    $0xc,%esp
    6d7a:	68 22 2c 02 00       	push   $0x22c22
    6d7f:	e8 c3 1e 00 00       	call   8c47 <printk>
    6d84:	83 c4 10             	add    $0x10,%esp
}
    6d87:	90                   	nop
    6d88:	83 c4 18             	add    $0x18,%esp
    6d8b:	5b                   	pop    %ebx
    6d8c:	c3                   	ret    

00006d8d <show_state>:

// 显示所有任务的任务号,进程号,进程状态和内核堆栈空闲字节数(大约).
// NR_TASKS是系统能容纳的最大进程(任务)数量(64个),定义在include/kernel/sched.h
void show_state(void)
{
    6d8d:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	printk("\rTask-info:\n\r");
    6d90:	83 ec 0c             	sub    $0xc,%esp
    6d93:	68 25 2c 02 00       	push   $0x22c25
    6d98:	e8 aa 1e 00 00       	call   8c47 <printk>
    6d9d:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NR_TASKS; i++)
    6da0:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    6da7:	00 
    6da8:	eb 2f                	jmp    6dd9 <show_state+0x4c>
		if (task[i])
    6daa:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6dae:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    6db5:	85 c0                	test   %eax,%eax
    6db7:	74 1b                	je     6dd4 <show_state+0x47>
			show_task(i, task[i]);
    6db9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6dbd:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    6dc4:	83 ec 08             	sub    $0x8,%esp
    6dc7:	50                   	push   %eax
    6dc8:	ff 74 24 18          	pushl  0x18(%esp)
    6dcc:	e8 5f fe ff ff       	call   6c30 <show_task>
    6dd1:	83 c4 10             	add    $0x10,%esp
void show_state(void)
{
	int i;

	printk("\rTask-info:\n\r");
	for (i = 0; i < NR_TASKS; i++)
    6dd4:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    6dd9:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    6dde:	7e ca                	jle    6daa <show_state+0x1d>
		if (task[i])
			show_task(i, task[i]);
}
    6de0:	90                   	nop
    6de1:	83 c4 1c             	add    $0x1c,%esp
    6de4:	c3                   	ret    

00006de5 <math_state_restore>:
 */
// 当任务被调度交换过以后,该函数用以保存原任务的协处理器状态(上下文)并恢复新调度进来的当前任务的协处理器执行状态.
void math_state_restore()
{
	// 如果任务没变则返回(上一个任务就是当前任务).这里"上一个任务"是指刚被交换出去的任务.
	if (last_task_used_math == current)
    6de5:	8b 15 0c eb 02 00    	mov    0x2eb0c,%edx
    6deb:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    6df0:	39 c2                	cmp    %eax,%edx
    6df2:	74 4f                	je     6e43 <math_state_restore+0x5e>
		return;
	// 在发送协处理器命令之前要先必WAIT指令.如果上个任务使用了协处理器,则保存其状态.
	__asm__("fwait");
    6df4:	9b                   	fwait
	if (last_task_used_math) {
    6df5:	a1 0c eb 02 00       	mov    0x2eb0c,%eax
    6dfa:	85 c0                	test   %eax,%eax
    6dfc:	74 0b                	je     6e09 <math_state_restore+0x24>
		__asm__("fnsave %0"::"m" (last_task_used_math->tss.i387));
    6dfe:	a1 0c eb 02 00       	mov    0x2eb0c,%eax
    6e03:	dd b0 18 04 00 00    	fnsave 0x418(%eax)
	}
	// 现在,las_task_used_math指向当前任务,以备当前任务被交换出去时使用.此时如果当前任务用过协处理器,则恢复其状态.否则的话说明是第一次使用,
	// 于是就向协处理器发初始化命令,并设置使用协处理器标志.
	last_task_used_math = current;
    6e09:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    6e0e:	a3 0c eb 02 00       	mov    %eax,0x2eb0c
	if (current->used_math) {
    6e13:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    6e18:	0f b7 80 28 03 00 00 	movzwl 0x328(%eax),%eax
    6e1f:	66 85 c0             	test   %ax,%ax
    6e22:	74 0d                	je     6e31 <math_state_restore+0x4c>
		__asm__("frstor %0"::"m" (current->tss.i387));
    6e24:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    6e29:	dd a0 18 04 00 00    	frstor 0x418(%eax)
    6e2f:	eb 13                	jmp    6e44 <math_state_restore+0x5f>
	} else {
		__asm__("fninit"::);					// 向协处理器发初始化命令.
    6e31:	db e3                	fninit 
		current->used_math=1;					// 设置已使用协处理器标志.
    6e33:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    6e38:	66 c7 80 28 03 00 00 	movw   $0x1,0x328(%eax)
    6e3f:	01 00 
    6e41:	eb 01                	jmp    6e44 <math_state_restore+0x5f>
// 当任务被调度交换过以后,该函数用以保存原任务的协处理器状态(上下文)并恢复新调度进来的当前任务的协处理器执行状态.
void math_state_restore()
{
	// 如果任务没变则返回(上一个任务就是当前任务).这里"上一个任务"是指刚被交换出去的任务.
	if (last_task_used_math == current)
		return;
    6e43:	90                   	nop
		__asm__("frstor %0"::"m" (current->tss.i387));
	} else {
		__asm__("fninit"::);					// 向协处理器发初始化命令.
		current->used_math=1;					// 设置已使用协处理器标志.
	}
}
    6e44:	c3                   	ret    

00006e45 <schedule>:
 *
 * 注意!!任务0是个闲置('idle')任务,只有当没有其他任务可以运行时才调用它.它不能被杀死,也不睡眠.任务0中的状态信息'state'是从
 * 来不用的.
 */
void schedule(void)
{
    6e45:	83 ec 20             	sub    $0x20,%esp

	/* check alarm, wake up any interruptible tasks that have got a signal */
	/* 检测alarm(进程的报警定时值),唤醒任何已得到信号的可中断任务 */

	// 从任务数组中最后一个任务开始循环检测alarm.在循环时跳过空指针项.
	for(p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    6e48:	c7 44 24 10 bc e2 02 	movl   $0x2e2bc,0x10(%esp)
    6e4f:	00 
    6e50:	e9 e6 00 00 00       	jmp    6f3b <schedule+0xf6>
		if (*p) {
    6e55:	8b 44 24 10          	mov    0x10(%esp),%eax
    6e59:	8b 00                	mov    (%eax),%eax
    6e5b:	85 c0                	test   %eax,%eax
    6e5d:	0f 84 d3 00 00 00    	je     6f36 <schedule+0xf1>
			// 如果设置过任务超时定时timeout,并且已经超时,则复位超时定时值,并且如果任务处于可中断睡眠状态TASK_INTERRUPTIBLE下,将其置为就绪
			// 状态(TASK_RUNNING).
			if ((*p)->timeout && (*p)->timeout < jiffies) {
    6e63:	8b 44 24 10          	mov    0x10(%esp),%eax
    6e67:	8b 00                	mov    (%eax),%eax
    6e69:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
    6e6f:	85 c0                	test   %eax,%eax
    6e71:	74 3e                	je     6eb1 <schedule+0x6c>
    6e73:	8b 44 24 10          	mov    0x10(%esp),%eax
    6e77:	8b 00                	mov    (%eax),%eax
    6e79:	8b 90 d8 02 00 00    	mov    0x2d8(%eax),%edx
    6e7f:	a1 00 eb 02 00       	mov    0x2eb00,%eax
    6e84:	39 c2                	cmp    %eax,%edx
    6e86:	73 29                	jae    6eb1 <schedule+0x6c>
				(*p)->timeout = 0;
    6e88:	8b 44 24 10          	mov    0x10(%esp),%eax
    6e8c:	8b 00                	mov    (%eax),%eax
    6e8e:	c7 80 d8 02 00 00 00 	movl   $0x0,0x2d8(%eax)
    6e95:	00 00 00 
				if ((*p)->state == TASK_INTERRUPTIBLE)
    6e98:	8b 44 24 10          	mov    0x10(%esp),%eax
    6e9c:	8b 00                	mov    (%eax),%eax
    6e9e:	8b 00                	mov    (%eax),%eax
    6ea0:	83 f8 01             	cmp    $0x1,%eax
    6ea3:	75 0c                	jne    6eb1 <schedule+0x6c>
					(*p)->state = TASK_RUNNING;
    6ea5:	8b 44 24 10          	mov    0x10(%esp),%eax
    6ea9:	8b 00                	mov    (%eax),%eax
    6eab:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			}
			// 如果设置过任务的定时值alarm,并且已经过期(alarm<jiffies),则在信号位图中置SIGALRM信号,即向任务发送SIGALARM信号.然后清alarm.
			// 该信号的默认操作是终止进程.jiffies是系统从开机开始算起的滴答数(10ms/滴答).定义在sched.h中.
			if ((*p)->alarm && (*p)->alarm < jiffies) {
    6eb1:	8b 44 24 10          	mov    0x10(%esp),%eax
    6eb5:	8b 00                	mov    (%eax),%eax
    6eb7:	8b 80 dc 02 00 00    	mov    0x2dc(%eax),%eax
    6ebd:	85 c0                	test   %eax,%eax
    6ebf:	74 3a                	je     6efb <schedule+0xb6>
    6ec1:	8b 44 24 10          	mov    0x10(%esp),%eax
    6ec5:	8b 00                	mov    (%eax),%eax
    6ec7:	8b 90 dc 02 00 00    	mov    0x2dc(%eax),%edx
    6ecd:	a1 00 eb 02 00       	mov    0x2eb00,%eax
    6ed2:	39 c2                	cmp    %eax,%edx
    6ed4:	73 25                	jae    6efb <schedule+0xb6>
				(*p)->signal |= (1 << (SIGALRM - 1));
    6ed6:	8b 44 24 10          	mov    0x10(%esp),%eax
    6eda:	8b 00                	mov    (%eax),%eax
    6edc:	8b 54 24 10          	mov    0x10(%esp),%edx
    6ee0:	8b 12                	mov    (%edx),%edx
    6ee2:	8b 52 0c             	mov    0xc(%edx),%edx
    6ee5:	80 ce 20             	or     $0x20,%dh
    6ee8:	89 50 0c             	mov    %edx,0xc(%eax)
				(*p)->alarm = 0;
    6eeb:	8b 44 24 10          	mov    0x10(%esp),%eax
    6eef:	8b 00                	mov    (%eax),%eax
    6ef1:	c7 80 dc 02 00 00 00 	movl   $0x0,0x2dc(%eax)
    6ef8:	00 00 00 
			}
			// 如果信号位图中除被阻塞的信号外还有其他信号,并且任务处于可中断状态,则置任务为就绪状态.
			// 其中'~(_BLOCKABLE & (*p)->blocked)'用于忽略被阻塞的信号,但SIGKILL和SIGSTOP不能被阻塞.
			if (((*p)->signal & ~(_BLOCKABLE & (*p)->blocked)) && (*p)->state == TASK_INTERRUPTIBLE)
    6efb:	8b 44 24 10          	mov    0x10(%esp),%eax
    6eff:	8b 00                	mov    (%eax),%eax
    6f01:	8b 50 0c             	mov    0xc(%eax),%edx
    6f04:	8b 44 24 10          	mov    0x10(%esp),%eax
    6f08:	8b 00                	mov    (%eax),%eax
    6f0a:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
    6f10:	25 ff fe fb ff       	and    $0xfffbfeff,%eax
    6f15:	f7 d0                	not    %eax
    6f17:	21 d0                	and    %edx,%eax
    6f19:	85 c0                	test   %eax,%eax
    6f1b:	74 19                	je     6f36 <schedule+0xf1>
    6f1d:	8b 44 24 10          	mov    0x10(%esp),%eax
    6f21:	8b 00                	mov    (%eax),%eax
    6f23:	8b 00                	mov    (%eax),%eax
    6f25:	83 f8 01             	cmp    $0x1,%eax
    6f28:	75 0c                	jne    6f36 <schedule+0xf1>
				(*p)->state = TASK_RUNNING;
    6f2a:	8b 44 24 10          	mov    0x10(%esp),%eax
    6f2e:	8b 00                	mov    (%eax),%eax
    6f30:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	/* check alarm, wake up any interruptible tasks that have got a signal */
	/* 检测alarm(进程的报警定时值),唤醒任何已得到信号的可中断任务 */

	// 从任务数组中最后一个任务开始循环检测alarm.在循环时跳过空指针项.
	for(p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    6f36:	83 6c 24 10 04       	subl   $0x4,0x10(%esp)
    6f3b:	81 7c 24 10 c0 e1 02 	cmpl   $0x2e1c0,0x10(%esp)
    6f42:	00 
    6f43:	0f 87 0c ff ff ff    	ja     6e55 <schedule+0x10>
		}

	/* this is the scheduler proper: */
	/* 这里是调度程序的主要部分 */
	while (1) {
		c = -1;
    6f49:	c7 44 24 14 ff ff ff 	movl   $0xffffffff,0x14(%esp)
    6f50:	ff 
		next = 0;
    6f51:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
    6f58:	00 
		i = NR_TASKS;
    6f59:	c7 44 24 1c 40 00 00 	movl   $0x40,0x1c(%esp)
    6f60:	00 
		p = &task[NR_TASKS];
    6f61:	c7 44 24 10 c0 e2 02 	movl   $0x2e2c0,0x10(%esp)
    6f68:	00 
		// 这段代码是从任务数组的最后一个任务开始循环处理,并跳过不含任务的数组糟.比较每个就绪状态任务的counter(任务运行时间的递减滴答计数)值,
		// 哪一个值大,运行时间还不长,next就指向哪个的任务号.
		while (--i) {
    6f69:	eb 41                	jmp    6fac <schedule+0x167>
			// 当前索引没有进程指针则跳过当前循环
			if (!*--p)
    6f6b:	83 6c 24 10 04       	subl   $0x4,0x10(%esp)
    6f70:	8b 44 24 10          	mov    0x10(%esp),%eax
    6f74:	8b 00                	mov    (%eax),%eax
    6f76:	85 c0                	test   %eax,%eax
    6f78:	75 02                	jne    6f7c <schedule+0x137>
				continue;
    6f7a:	eb 30                	jmp    6fac <schedule+0x167>
			if ((*p)->state == TASK_RUNNING && (*p)->counter > c)
    6f7c:	8b 44 24 10          	mov    0x10(%esp),%eax
    6f80:	8b 00                	mov    (%eax),%eax
    6f82:	8b 00                	mov    (%eax),%eax
    6f84:	85 c0                	test   %eax,%eax
    6f86:	75 24                	jne    6fac <schedule+0x167>
    6f88:	8b 44 24 10          	mov    0x10(%esp),%eax
    6f8c:	8b 00                	mov    (%eax),%eax
    6f8e:	8b 40 04             	mov    0x4(%eax),%eax
    6f91:	3b 44 24 14          	cmp    0x14(%esp),%eax
    6f95:	7e 15                	jle    6fac <schedule+0x167>
				c = (*p)->counter, next = i;
    6f97:	8b 44 24 10          	mov    0x10(%esp),%eax
    6f9b:	8b 00                	mov    (%eax),%eax
    6f9d:	8b 40 04             	mov    0x4(%eax),%eax
    6fa0:	89 44 24 14          	mov    %eax,0x14(%esp)
    6fa4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    6fa8:	89 44 24 18          	mov    %eax,0x18(%esp)
		next = 0;
		i = NR_TASKS;
		p = &task[NR_TASKS];
		// 这段代码是从任务数组的最后一个任务开始循环处理,并跳过不含任务的数组糟.比较每个就绪状态任务的counter(任务运行时间的递减滴答计数)值,
		// 哪一个值大,运行时间还不长,next就指向哪个的任务号.
		while (--i) {
    6fac:	83 6c 24 1c 01       	subl   $0x1,0x1c(%esp)
    6fb1:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
    6fb6:	75 b3                	jne    6f6b <schedule+0x126>
				c = (*p)->counter, next = i;
		}
		// 如果比较得出有counter值不等于0的结果,或者後方中没有一个可运行的任务存在(此时c仍然为-1,next=0),则退出开始的循环,执行161行上的任务切换
		// 操作.否则就根据每个任务的优先权值,更新每一个任务的counter值,然后回到125行重新比较.counter值的计算方式为counter = counter /2 +priority.
		// 注意,这里计算过程不考虑进程的状态.
		if (c) break;
    6fb8:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    6fbd:	75 49                	jne    7008 <schedule+0x1c3>
		for(p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    6fbf:	c7 44 24 10 bc e2 02 	movl   $0x2e2bc,0x10(%esp)
    6fc6:	00 
    6fc7:	eb 30                	jmp    6ff9 <schedule+0x1b4>
			if (*p)
    6fc9:	8b 44 24 10          	mov    0x10(%esp),%eax
    6fcd:	8b 00                	mov    (%eax),%eax
    6fcf:	85 c0                	test   %eax,%eax
    6fd1:	74 21                	je     6ff4 <schedule+0x1af>
				(*p)->counter = ((*p)->counter >> 1) + (*p)->priority;
    6fd3:	8b 44 24 10          	mov    0x10(%esp),%eax
    6fd7:	8b 00                	mov    (%eax),%eax
    6fd9:	8b 54 24 10          	mov    0x10(%esp),%edx
    6fdd:	8b 12                	mov    (%edx),%edx
    6fdf:	8b 52 04             	mov    0x4(%edx),%edx
    6fe2:	89 d1                	mov    %edx,%ecx
    6fe4:	d1 f9                	sar    %ecx
    6fe6:	8b 54 24 10          	mov    0x10(%esp),%edx
    6fea:	8b 12                	mov    (%edx),%edx
    6fec:	8b 52 08             	mov    0x8(%edx),%edx
    6fef:	01 ca                	add    %ecx,%edx
    6ff1:	89 50 04             	mov    %edx,0x4(%eax)
		}
		// 如果比较得出有counter值不等于0的结果,或者後方中没有一个可运行的任务存在(此时c仍然为-1,next=0),则退出开始的循环,执行161行上的任务切换
		// 操作.否则就根据每个任务的优先权值,更新每一个任务的counter值,然后回到125行重新比较.counter值的计算方式为counter = counter /2 +priority.
		// 注意,这里计算过程不考虑进程的状态.
		if (c) break;
		for(p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    6ff4:	83 6c 24 10 04       	subl   $0x4,0x10(%esp)
    6ff9:	81 7c 24 10 c0 e1 02 	cmpl   $0x2e1c0,0x10(%esp)
    7000:	00 
    7001:	77 c6                	ja     6fc9 <schedule+0x184>
			if (*p)
				(*p)->counter = ((*p)->counter >> 1) + (*p)->priority;
	}
    7003:	e9 41 ff ff ff       	jmp    6f49 <schedule+0x104>
				c = (*p)->counter, next = i;
		}
		// 如果比较得出有counter值不等于0的结果,或者後方中没有一个可运行的任务存在(此时c仍然为-1,next=0),则退出开始的循环,执行161行上的任务切换
		// 操作.否则就根据每个任务的优先权值,更新每一个任务的counter值,然后回到125行重新比较.counter值的计算方式为counter = counter /2 +priority.
		// 注意,这里计算过程不考虑进程的状态.
		if (c) break;
    7008:	90                   	nop
			if (*p)
				(*p)->counter = ((*p)->counter >> 1) + (*p)->priority;
	}
	// 用下面的宏(定义在sched.h中)把当前任务指针current指向任务号为next的任务,并切换到该任务中运行.在146行上next被初始化为0.因此若系统中没有任何
	// 其他任务可运行时,则next始终为0.因此调度函数会在系统空闲时去执行任务0.此时任务0权执行pause()
	switch_to(next);					// 切换到任务号为next的任务,并运行之.
    7009:	8b 44 24 18          	mov    0x18(%esp),%eax
    700d:	c1 e0 04             	shl    $0x4,%eax
    7010:	8d 50 20             	lea    0x20(%eax),%edx
    7013:	8b 44 24 18          	mov    0x18(%esp),%eax
    7017:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    701e:	89 c1                	mov    %eax,%ecx
    7020:	39 0d a0 e1 02 00    	cmp    %ecx,0x2e1a0
    7026:	74 19                	je     7041 <schedule+0x1fc>
    7028:	66 89 54 24 0c       	mov    %dx,0xc(%esp)
    702d:	87 0d a0 e1 02 00    	xchg   %ecx,0x2e1a0
    7033:	ff 6c 24 08          	ljmp   *0x8(%esp)
    7037:	39 0d 0c eb 02 00    	cmp    %ecx,0x2eb0c
    703d:	75 02                	jne    7041 <schedule+0x1fc>
    703f:	0f 06                	clts   
}
    7041:	90                   	nop
    7042:	83 c4 20             	add    $0x20,%esp
    7045:	c3                   	ret    

00007046 <sys_pause>:
// pause()系统调用.转换当前任务的状态为可中断的等待状态,并重新调试.
// 该系统调用将导致进程进入睡眠状态,直到收到一个信号.该信号用于终止进程或者使进程调用一个信号捕获函数.只有当捕获了一个信号,并且信号捕获处理函数返回,
// pause()才会返回.此时pause()返回值应该是-1,并且errno被置为EINTR.这里还没有完全实现(直到0.95版).
int sys_pause(void)
{
	current->state = TASK_INTERRUPTIBLE;
    7046:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    704b:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
	schedule();
    7051:	e8 ef fd ff ff       	call   6e45 <schedule>
	return 0;
    7056:	b8 00 00 00 00       	mov    $0x0,%eax
}
    705b:	c3                   	ret    

0000705c <__sleep_on>:
// 是任务结构)会改变,因此为了能修改调用该函数程序中原来就是指针变量的值,就需要传递指针'*p'的指针,即'**p'.
// 参数state是任务睡眠使用的状态:TASK_INTERRUPTIBLE或TASK_INTERRUPTIBLE.处于不可中断睡眠状态(TASK_UNINTERRUPTIBLE)的任务需要内核程序利用
// wake_up()函数明确唤醒之.处于可中断睡眠状态(TASK_INTERRUPTIBLE)可以通过信号,任务起时等手段唤醒(置为就绪状态TASK_RUNNING).
// *** 注意,由于本内核代码不是很成熟,因此下列与睡眠相关的代码存在一些问题,不宜深究.
static inline void __sleep_on(struct task_struct **p, int state)
{
    705c:	83 ec 1c             	sub    $0x1c,%esp
	struct task_struct *tmp;

	// 若指针无效,则退出.(指针所指的对象可以是NULL,但指针本身不会为0).
	// 如果当前任务是任务0,则死机(impossible!).
	if (!p)
    705f:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    7064:	0f 84 ae 00 00 00    	je     7118 <__sleep_on+0xbc>
		return;
	if (current == &(init_task.task))
    706a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    706f:	3d a0 d1 02 00       	cmp    $0x2d1a0,%eax
    7074:	75 10                	jne    7086 <__sleep_on+0x2a>
		panic("task[0] trying to sleep");
    7076:	83 ec 0c             	sub    $0xc,%esp
    7079:	68 33 2c 02 00       	push   $0x22c33
    707e:	e8 85 1b 00 00       	call   8c08 <panic>
    7083:	83 c4 10             	add    $0x10,%esp
	// 让tmp指向已经在等待队列上的任务(如果有的话),例如inode->i_wait.并且将睡眠队列头的等待指针指向当前任务.这样就把当前任务插入到了*p的等待队列中.然后
	// 将当前任务置为指定的等待状态,并执行重新调度.
	tmp = *p;
    7086:	8b 44 24 20          	mov    0x20(%esp),%eax
    708a:	8b 00                	mov    (%eax),%eax
    708c:	89 44 24 0c          	mov    %eax,0xc(%esp)
	*p = current;
    7090:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    7096:	8b 44 24 20          	mov    0x20(%esp),%eax
    709a:	89 10                	mov    %edx,(%eax)
	current->state = state;
    709c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    70a1:	8b 54 24 24          	mov    0x24(%esp),%edx
    70a5:	89 10                	mov    %edx,(%eax)
	// 将当前进程睡眠后立刻调用调度函数进行调度新的进程执行
repeat:	schedule();
    70a7:	e8 99 fd ff ff       	call   6e45 <schedule>
	// 只有当这个等待任务被唤醒时,程序才会返回到这里,表示进程已被明确地唤醒并执行.如果等待队列中还有等待任务,并且队列头指针*p所指向的任务不是当前任务时,说明
	// 在本任务插入等待队列后还有任务进入等待队列.于是我们应该也要唤醒这个任务,而我们自己应按顺序让这些后面进入队列的任务唤醒,因此这里将等待队列头所指任务先
	// 置为就绪状态,而自己则置为不可中断等待状态,即自己要等待这些后续队列的任务被唤醒而执行时来唤醒本任务.然后重新执行调度程序.
	if (*p && *p != current) {
    70ac:	8b 44 24 20          	mov    0x20(%esp),%eax
    70b0:	8b 00                	mov    (%eax),%eax
    70b2:	85 c0                	test   %eax,%eax
    70b4:	74 28                	je     70de <__sleep_on+0x82>
    70b6:	8b 44 24 20          	mov    0x20(%esp),%eax
    70ba:	8b 10                	mov    (%eax),%edx
    70bc:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    70c1:	39 c2                	cmp    %eax,%edx
    70c3:	74 19                	je     70de <__sleep_on+0x82>
		(**p).state = 0;
    70c5:	8b 44 24 20          	mov    0x20(%esp),%eax
    70c9:	8b 00                	mov    (%eax),%eax
    70cb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		current->state = TASK_UNINTERRUPTIBLE;
    70d1:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    70d6:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
		goto repeat;
    70dc:	eb c9                	jmp    70a7 <__sleep_on+0x4b>
	}
	// 执行到这里,说明本任务真正被唤醒执行.此时等待队列头指针应该指向本任务,若它为空,则表明调度有问题,于是显示警告信息.最后我们让头指针指向在我们前面进入队列的
	// 任务(*p = tmp).若确实存在这样一个任务,即队列中还有任务(tmp不为空),就唤醒之.最先进入队列的任务在唤醒后运行时最终会把等待队列头指针置成NULL.
	if (!*p)
    70de:	8b 44 24 20          	mov    0x20(%esp),%eax
    70e2:	8b 00                	mov    (%eax),%eax
    70e4:	85 c0                	test   %eax,%eax
    70e6:	75 10                	jne    70f8 <__sleep_on+0x9c>
		printk("Warning: *P = NULL\n\r");
    70e8:	83 ec 0c             	sub    $0xc,%esp
    70eb:	68 4b 2c 02 00       	push   $0x22c4b
    70f0:	e8 52 1b 00 00       	call   8c47 <printk>
    70f5:	83 c4 10             	add    $0x10,%esp
	if (*p = tmp)
    70f8:	8b 44 24 20          	mov    0x20(%esp),%eax
    70fc:	8b 54 24 0c          	mov    0xc(%esp),%edx
    7100:	89 10                	mov    %edx,(%eax)
    7102:	8b 44 24 20          	mov    0x20(%esp),%eax
    7106:	8b 00                	mov    (%eax),%eax
    7108:	85 c0                	test   %eax,%eax
    710a:	74 0d                	je     7119 <__sleep_on+0xbd>
		tmp->state = 0;
    710c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7110:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    7116:	eb 01                	jmp    7119 <__sleep_on+0xbd>
	struct task_struct *tmp;

	// 若指针无效,则退出.(指针所指的对象可以是NULL,但指针本身不会为0).
	// 如果当前任务是任务0,则死机(impossible!).
	if (!p)
		return;
    7118:	90                   	nop
	// 任务(*p = tmp).若确实存在这样一个任务,即队列中还有任务(tmp不为空),就唤醒之.最先进入队列的任务在唤醒后运行时最终会把等待队列头指针置成NULL.
	if (!*p)
		printk("Warning: *P = NULL\n\r");
	if (*p = tmp)
		tmp->state = 0;
}
    7119:	83 c4 1c             	add    $0x1c,%esp
    711c:	c3                   	ret    

0000711d <interruptible_sleep_on>:

// 将当前任务置为可中断的等待状态(TASK_INIERRUPTIBLE),并放入头指针*p指定的等待队列中.
void interruptible_sleep_on(struct task_struct **p)
{
    711d:	83 ec 0c             	sub    $0xc,%esp
	__sleep_on(p, TASK_INTERRUPTIBLE);
    7120:	83 ec 08             	sub    $0x8,%esp
    7123:	6a 01                	push   $0x1
    7125:	ff 74 24 1c          	pushl  0x1c(%esp)
    7129:	e8 2e ff ff ff       	call   705c <__sleep_on>
    712e:	83 c4 10             	add    $0x10,%esp
}
    7131:	90                   	nop
    7132:	83 c4 0c             	add    $0xc,%esp
    7135:	c3                   	ret    

00007136 <sleep_on>:

// 把当前任务置为不可中断的等待状态(TASK_UNINTERRUPTIBLE),并让睡眠队列头指针指向当前任务.只有明确地唤醒时才会返回.该函数提供了进程与中断处理程序之间的
// 同步机制.
void sleep_on(struct task_struct **p)
{
    7136:	83 ec 0c             	sub    $0xc,%esp
	__sleep_on(p, TASK_UNINTERRUPTIBLE);
    7139:	83 ec 08             	sub    $0x8,%esp
    713c:	6a 02                	push   $0x2
    713e:	ff 74 24 1c          	pushl  0x1c(%esp)
    7142:	e8 15 ff ff ff       	call   705c <__sleep_on>
    7147:	83 c4 10             	add    $0x10,%esp
}
    714a:	90                   	nop
    714b:	83 c4 0c             	add    $0xc,%esp
    714e:	c3                   	ret    

0000714f <wake_up>:

// 唤醒*p指向的任务.*p是任务等待队列头指针.由于新等待任务是插入在等待队列头指针处的,因此唤醒的是最后进入等待队列的任务.若该任务已经处于停止或
// 僵死状态,则显示警告信息.
void wake_up(struct task_struct **p)
{
    714f:	83 ec 0c             	sub    $0xc,%esp
	if (p && *p) {
    7152:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    7157:	74 50                	je     71a9 <wake_up+0x5a>
    7159:	8b 44 24 10          	mov    0x10(%esp),%eax
    715d:	8b 00                	mov    (%eax),%eax
    715f:	85 c0                	test   %eax,%eax
    7161:	74 46                	je     71a9 <wake_up+0x5a>
		if ((**p).state == TASK_STOPPED)						// 处于停止状态.
    7163:	8b 44 24 10          	mov    0x10(%esp),%eax
    7167:	8b 00                	mov    (%eax),%eax
    7169:	8b 00                	mov    (%eax),%eax
    716b:	83 f8 04             	cmp    $0x4,%eax
    716e:	75 10                	jne    7180 <wake_up+0x31>
			printk("wake_up: TASK_STOPPED");
    7170:	83 ec 0c             	sub    $0xc,%esp
    7173:	68 60 2c 02 00       	push   $0x22c60
    7178:	e8 ca 1a 00 00       	call   8c47 <printk>
    717d:	83 c4 10             	add    $0x10,%esp
		if ((**p).state == TASK_ZOMBIE)							// 处于僵死状态.
    7180:	8b 44 24 10          	mov    0x10(%esp),%eax
    7184:	8b 00                	mov    (%eax),%eax
    7186:	8b 00                	mov    (%eax),%eax
    7188:	83 f8 03             	cmp    $0x3,%eax
    718b:	75 10                	jne    719d <wake_up+0x4e>
			printk("wake_up: TASK_ZOMBIE");
    718d:	83 ec 0c             	sub    $0xc,%esp
    7190:	68 76 2c 02 00       	push   $0x22c76
    7195:	e8 ad 1a 00 00       	call   8c47 <printk>
    719a:	83 c4 10             	add    $0x10,%esp
		(**p).state=0;											// 置为就绪状态TASK_RUNNING.
    719d:	8b 44 24 10          	mov    0x10(%esp),%eax
    71a1:	8b 00                	mov    (%eax),%eax
    71a3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	}
}
    71a9:	90                   	nop
    71aa:	83 c4 0c             	add    $0xc,%esp
    71ad:	c3                   	ret    

000071ae <ticks_to_floppy_on>:

// 指定软驱启动到正常运转状态所需等待时间.
// 参数nr -- 软驱号(0--3),返回值为滴答.
// 局部变量selected是选中软驱标志(blk_drv/floppy.c).mask是所选软驱对应的数字输出寄存器中启动马达位.mask高4位是各软驱启动马达标志.
int ticks_to_floppy_on(unsigned int nr)
{
    71ae:	83 ec 1c             	sub    $0x1c,%esp
	extern unsigned char selected;
	unsigned char mask = 0x10 << nr;
    71b1:	8b 44 24 20          	mov    0x20(%esp),%eax
    71b5:	ba 10 00 00 00       	mov    $0x10,%edx
    71ba:	89 c1                	mov    %eax,%ecx
    71bc:	d3 e2                	shl    %cl,%edx
    71be:	89 d0                	mov    %edx,%eax
    71c0:	88 44 24 0f          	mov    %al,0xf(%esp)

	// 系统最多有4个软驱.首先预先设置好指定软驱nr停转之前需要经过的时间(100秒).然后取当前DOR寄存器值到临时变量mask中,并把指定软驱的马达
	// 启动标志置位.
	if (nr > 3)
    71c4:	83 7c 24 20 03       	cmpl   $0x3,0x20(%esp)
    71c9:	76 10                	jbe    71db <ticks_to_floppy_on+0x2d>
		panic("floppy_on: nr>3");
    71cb:	83 ec 0c             	sub    $0xc,%esp
    71ce:	68 8b 2c 02 00       	push   $0x22c8b
    71d3:	e8 30 1a 00 00       	call   8c08 <panic>
    71d8:	83 c4 10             	add    $0x10,%esp
	moff_timer[nr] = 10000;							/* 100 s = very big :-) */	// 停转维持时间.
    71db:	8b 44 24 20          	mov    0x20(%esp),%eax
    71df:	c7 04 85 30 eb 02 00 	movl   $0x2710,0x2eb30(,%eax,4)
    71e6:	10 27 00 00 
	cli();											/* use floppy_off to turn it off */	// 关中断
    71ea:	fa                   	cli    
	mask |= current_DOR;
    71eb:	0f b6 05 c8 e2 02 00 	movzbl 0x2e2c8,%eax
    71f2:	08 44 24 0f          	or     %al,0xf(%esp)
	// 如果当前没有选择软驱,则首先复位其他软驱的选择位,然后指定软驱选择位.
	if (!selected) {
    71f6:	0f b6 05 58 11 03 00 	movzbl 0x31158,%eax
    71fd:	84 c0                	test   %al,%al
    71ff:	75 0d                	jne    720e <ticks_to_floppy_on+0x60>
		mask &= 0xFC;
    7201:	80 64 24 0f fc       	andb   $0xfc,0xf(%esp)
		mask |= nr;
    7206:	8b 44 24 20          	mov    0x20(%esp),%eax
    720a:	08 44 24 0f          	or     %al,0xf(%esp)
	}
	// 如果数字输出寄存器的当前值与要求的值不同,则向FDC数字输出端口输出新值(mask),并且如果要求启动的马达还没有启动,则置相应软驱的马达启动
	// 定时器值(HZ/2 = 0.5秒或50个滴答).若已经启动,则再设置启动定时为2个滴答,能满足下面do_floppy_timer()中先递减后判断的要求.执行本次
	// 定时代码的要求即可.此后更新当前数字输出寄存器current_DOR.
	if (mask != current_DOR) {
    720e:	0f b6 05 c8 e2 02 00 	movzbl 0x2e2c8,%eax
    7215:	38 44 24 0f          	cmp    %al,0xf(%esp)
    7219:	74 5c                	je     7277 <ticks_to_floppy_on+0xc9>
		outb(mask, FD_DOR);
    721b:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
    7220:	ba f2 03 00 00       	mov    $0x3f2,%edx
    7225:	ee                   	out    %al,(%dx)
		if ((mask ^ current_DOR) & 0xf0)
    7226:	0f b6 05 c8 e2 02 00 	movzbl 0x2e2c8,%eax
    722d:	32 44 24 0f          	xor    0xf(%esp),%al
    7231:	0f b6 c0             	movzbl %al,%eax
    7234:	25 f0 00 00 00       	and    $0xf0,%eax
    7239:	85 c0                	test   %eax,%eax
    723b:	74 11                	je     724e <ticks_to_floppy_on+0xa0>
			mon_timer[nr] = HZ / 2;
    723d:	8b 44 24 20          	mov    0x20(%esp),%eax
    7241:	c7 04 85 20 eb 02 00 	movl   $0x32,0x2eb20(,%eax,4)
    7248:	32 00 00 00 
    724c:	eb 1f                	jmp    726d <ticks_to_floppy_on+0xbf>
		else if (mon_timer[nr] < 2)
    724e:	8b 44 24 20          	mov    0x20(%esp),%eax
    7252:	8b 04 85 20 eb 02 00 	mov    0x2eb20(,%eax,4),%eax
    7259:	83 f8 01             	cmp    $0x1,%eax
    725c:	7f 0f                	jg     726d <ticks_to_floppy_on+0xbf>
			mon_timer[nr] = 2;
    725e:	8b 44 24 20          	mov    0x20(%esp),%eax
    7262:	c7 04 85 20 eb 02 00 	movl   $0x2,0x2eb20(,%eax,4)
    7269:	02 00 00 00 
		current_DOR = mask;
    726d:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
    7272:	a2 c8 e2 02 00       	mov    %al,0x2e2c8
	}
	sti();											// 开中断.
    7277:	fb                   	sti    
	return mon_timer[nr];							// 最后返回启动马达所需的时间值.
    7278:	8b 44 24 20          	mov    0x20(%esp),%eax
    727c:	8b 04 85 20 eb 02 00 	mov    0x2eb20(,%eax,4),%eax
}
    7283:	83 c4 1c             	add    $0x1c,%esp
    7286:	c3                   	ret    

00007287 <floppy_on>:

// 等待指定软驱马达启动所需的一段时间,然后返回.
// 设置指定软驱的马达启动到正常转速所需的延时,然后睡眠等待.在定时中断过程中会一直递减判断这里设定的延时值.当延时到期,就会 这里的等待进程.
void floppy_on(unsigned int nr)
{
    7287:	83 ec 0c             	sub    $0xc,%esp
	// 关中断.如果马达启动定时还没到,就一直把当前进程置为不可中断睡眠状态并放入等待马达运行的队列中.然后开中断.
	cli();
    728a:	fa                   	cli    
	while (ticks_to_floppy_on(nr))
    728b:	eb 18                	jmp    72a5 <floppy_on+0x1e>
		sleep_on(nr + wait_motor);
    728d:	8b 44 24 10          	mov    0x10(%esp),%eax
    7291:	c1 e0 02             	shl    $0x2,%eax
    7294:	05 10 eb 02 00       	add    $0x2eb10,%eax
    7299:	83 ec 0c             	sub    $0xc,%esp
    729c:	50                   	push   %eax
    729d:	e8 94 fe ff ff       	call   7136 <sleep_on>
    72a2:	83 c4 10             	add    $0x10,%esp
// 设置指定软驱的马达启动到正常转速所需的延时,然后睡眠等待.在定时中断过程中会一直递减判断这里设定的延时值.当延时到期,就会 这里的等待进程.
void floppy_on(unsigned int nr)
{
	// 关中断.如果马达启动定时还没到,就一直把当前进程置为不可中断睡眠状态并放入等待马达运行的队列中.然后开中断.
	cli();
	while (ticks_to_floppy_on(nr))
    72a5:	83 ec 0c             	sub    $0xc,%esp
    72a8:	ff 74 24 1c          	pushl  0x1c(%esp)
    72ac:	e8 fd fe ff ff       	call   71ae <ticks_to_floppy_on>
    72b1:	83 c4 10             	add    $0x10,%esp
    72b4:	85 c0                	test   %eax,%eax
    72b6:	75 d5                	jne    728d <floppy_on+0x6>
		sleep_on(nr + wait_motor);
	sti();
    72b8:	fb                   	sti    
}
    72b9:	90                   	nop
    72ba:	83 c4 0c             	add    $0xc,%esp
    72bd:	c3                   	ret    

000072be <floppy_off>:

// 置关闭相应软驱马达停转定时器(3秒).
// 若不使用该函数明确关闭指定的软驱马达,则在马达开启100秒之后也会被关闭.
void floppy_off(unsigned int nr)
{
	moff_timer[nr] = 3 * HZ;
    72be:	8b 44 24 04          	mov    0x4(%esp),%eax
    72c2:	c7 04 85 30 eb 02 00 	movl   $0x12c,0x2eb30(,%eax,4)
    72c9:	2c 01 00 00 
}
    72cd:	90                   	nop
    72ce:	c3                   	ret    

000072cf <do_floppy_timer>:

// 软盘定时处理子程序.更新马达启动定时值和马达关闭停转时值.该子程序会在时钟定时中断过程中被调用,因此系统每经过一个滴答(10ms)就会被
// 调用一次,随时更新马达开启或停转定时器的值.如果某一个马达停转定时到,则将数字输出寄存器马达启动位复位.
void do_floppy_timer(void)
{
    72cf:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	unsigned char mask = 0x10;
    72d2:	c6 44 24 0b 10       	movb   $0x10,0xb(%esp)

	for (i = 0 ; i < 4 ; i++, mask <<= 1) {
    72d7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    72de:	00 
    72df:	e9 be 00 00 00       	jmp    73a2 <do_floppy_timer+0xd3>
		if (!(mask & current_DOR))						// 如果不是DOR指定的马达则跳过.
    72e4:	0f b6 05 c8 e2 02 00 	movzbl 0x2e2c8,%eax
    72eb:	22 44 24 0b          	and    0xb(%esp),%al
    72ef:	84 c0                	test   %al,%al
    72f1:	0f 84 a1 00 00 00    	je     7398 <do_floppy_timer+0xc9>
			continue;
		if (mon_timer[i]) {								// 如果马达启动定时到则唤醒进程.
    72f7:	8b 44 24 0c          	mov    0xc(%esp),%eax
    72fb:	8b 04 85 20 eb 02 00 	mov    0x2eb20(,%eax,4),%eax
    7302:	85 c0                	test   %eax,%eax
    7304:	74 42                	je     7348 <do_floppy_timer+0x79>
			if (!--mon_timer[i])
    7306:	8b 44 24 0c          	mov    0xc(%esp),%eax
    730a:	8b 04 85 20 eb 02 00 	mov    0x2eb20(,%eax,4),%eax
    7311:	8d 50 ff             	lea    -0x1(%eax),%edx
    7314:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7318:	89 14 85 20 eb 02 00 	mov    %edx,0x2eb20(,%eax,4)
    731f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7323:	8b 04 85 20 eb 02 00 	mov    0x2eb20(,%eax,4),%eax
    732a:	85 c0                	test   %eax,%eax
    732c:	75 6b                	jne    7399 <do_floppy_timer+0xca>
				wake_up(i + wait_motor);
    732e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7332:	c1 e0 02             	shl    $0x2,%eax
    7335:	05 10 eb 02 00       	add    $0x2eb10,%eax
    733a:	83 ec 0c             	sub    $0xc,%esp
    733d:	50                   	push   %eax
    733e:	e8 0c fe ff ff       	call   714f <wake_up>
    7343:	83 c4 10             	add    $0x10,%esp
    7346:	eb 51                	jmp    7399 <do_floppy_timer+0xca>
		} else if (!moff_timer[i]) {					// 如果马达停转定时到则复位相应马达启动位,并且更新数字输出寄存器.
    7348:	8b 44 24 0c          	mov    0xc(%esp),%eax
    734c:	8b 04 85 30 eb 02 00 	mov    0x2eb30(,%eax,4),%eax
    7353:	85 c0                	test   %eax,%eax
    7355:	75 26                	jne    737d <do_floppy_timer+0xae>
			current_DOR &= ~mask;
    7357:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
    735c:	f7 d0                	not    %eax
    735e:	89 c2                	mov    %eax,%edx
    7360:	0f b6 05 c8 e2 02 00 	movzbl 0x2e2c8,%eax
    7367:	21 d0                	and    %edx,%eax
    7369:	a2 c8 e2 02 00       	mov    %al,0x2e2c8
			outb(current_DOR, FD_DOR);
    736e:	0f b6 05 c8 e2 02 00 	movzbl 0x2e2c8,%eax
    7375:	ba f2 03 00 00       	mov    $0x3f2,%edx
    737a:	ee                   	out    %al,(%dx)
    737b:	eb 1c                	jmp    7399 <do_floppy_timer+0xca>
		} else
			moff_timer[i]--;							// 否则马达停转计时递减.
    737d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7381:	8b 04 85 30 eb 02 00 	mov    0x2eb30(,%eax,4),%eax
    7388:	8d 50 ff             	lea    -0x1(%eax),%edx
    738b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    738f:	89 14 85 30 eb 02 00 	mov    %edx,0x2eb30(,%eax,4)
    7396:	eb 01                	jmp    7399 <do_floppy_timer+0xca>
	int i;
	unsigned char mask = 0x10;

	for (i = 0 ; i < 4 ; i++, mask <<= 1) {
		if (!(mask & current_DOR))						// 如果不是DOR指定的马达则跳过.
			continue;
    7398:	90                   	nop
void do_floppy_timer(void)
{
	int i;
	unsigned char mask = 0x10;

	for (i = 0 ; i < 4 ; i++, mask <<= 1) {
    7399:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    739e:	d0 64 24 0b          	shlb   0xb(%esp)
    73a2:	83 7c 24 0c 03       	cmpl   $0x3,0xc(%esp)
    73a7:	0f 8e 37 ff ff ff    	jle    72e4 <do_floppy_timer+0x15>
			current_DOR &= ~mask;
			outb(current_DOR, FD_DOR);
		} else
			moff_timer[i]--;							// 否则马达停转计时递减.
	}
}
    73ad:	90                   	nop
    73ae:	83 c4 1c             	add    $0x1c,%esp
    73b1:	c3                   	ret    

000073b2 <add_timer>:

// 添加定时器.输入参数为指定的定时值(滴答数)和相应的处理程序指针.
// 软盘驱动程序(floppy.c)利用该函数执行启动或关闭马达的延时操作.
// 参数jiffies- 以10毫秒计的滴答数; *fn() - 定时时间到时执行的函数.
void add_timer(long jiffies, void (*fn)(void))
{
    73b2:	83 ec 1c             	sub    $0x1c,%esp
	struct timer_list * p;

	// 如果定时处理程序指针为空,则退出.否则关中断.
	if (!fn)
    73b5:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
    73ba:	0f 84 54 01 00 00    	je     7514 <add_timer+0x162>
		return;
	cli();
    73c0:	fa                   	cli    
	// 如果定时值<=0,则立刻调用其处理程序.并且该定时器不加入链表中.
	if (jiffies <= 0)
    73c1:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    73c6:	7f 0b                	jg     73d3 <add_timer+0x21>
		(fn)();
    73c8:	8b 44 24 24          	mov    0x24(%esp),%eax
    73cc:	ff d0                	call   *%eax
    73ce:	e9 3e 01 00 00       	jmp    7511 <add_timer+0x15f>
	else {
		// 否则从定时器数组中,找一个空闲项.
		for (p = timer_list ; p < timer_list + TIME_REQUESTS ; p++)
    73d3:	c7 44 24 0c 40 eb 02 	movl   $0x2eb40,0xc(%esp)
    73da:	00 
    73db:	eb 10                	jmp    73ed <add_timer+0x3b>
			if (!p->fn)
    73dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    73e1:	8b 40 04             	mov    0x4(%eax),%eax
    73e4:	85 c0                	test   %eax,%eax
    73e6:	74 12                	je     73fa <add_timer+0x48>
	// 如果定时值<=0,则立刻调用其处理程序.并且该定时器不加入链表中.
	if (jiffies <= 0)
		(fn)();
	else {
		// 否则从定时器数组中,找一个空闲项.
		for (p = timer_list ; p < timer_list + TIME_REQUESTS ; p++)
    73e8:	83 44 24 0c 0c       	addl   $0xc,0xc(%esp)
    73ed:	b8 40 ee 02 00       	mov    $0x2ee40,%eax
    73f2:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    73f6:	72 e5                	jb     73dd <add_timer+0x2b>
    73f8:	eb 01                	jmp    73fb <add_timer+0x49>
			if (!p->fn)
				break;
    73fa:	90                   	nop
		// 如果已经用完了定时器数组,则系统崩溃.否则向定时器数据结构填入就信息,并链入链表头.
		if (p >= timer_list + TIME_REQUESTS)
    73fb:	b8 40 ee 02 00       	mov    $0x2ee40,%eax
    7400:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    7404:	72 10                	jb     7416 <add_timer+0x64>
			panic("No more time requests free");
    7406:	83 ec 0c             	sub    $0xc,%esp
    7409:	68 9b 2c 02 00       	push   $0x22c9b
    740e:	e8 f5 17 00 00       	call   8c08 <panic>
    7413:	83 c4 10             	add    $0x10,%esp
		p->fn = fn;
    7416:	8b 44 24 0c          	mov    0xc(%esp),%eax
    741a:	8b 54 24 24          	mov    0x24(%esp),%edx
    741e:	89 50 04             	mov    %edx,0x4(%eax)
		p->jiffies = jiffies;
    7421:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7425:	8b 54 24 20          	mov    0x20(%esp),%edx
    7429:	89 10                	mov    %edx,(%eax)
		p->next = next_timer;
    742b:	8b 15 40 ee 02 00    	mov    0x2ee40,%edx
    7431:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7435:	89 50 08             	mov    %edx,0x8(%eax)
		next_timer = p;
    7438:	8b 44 24 0c          	mov    0xc(%esp),%eax
    743c:	a3 40 ee 02 00       	mov    %eax,0x2ee40
		// 链表项按定时值从小到大排序.在排序时减去排在前面需要的滴答数,这样在处理定时器时只要查看链表头的第一项的定时是否到期即可.
		// [[?? 这段程序好像没有考虑周全.如果新插入的定时器值小于原来关一个定时器值时则根本没会进入循环中,但此时还是应该将紧随后面
		// 的一个定时器值减去新的第1个的定时值.即如果第1个定时值<=第2个,则第2个定时值扣除第1个的值即可,否则进入下面循环中进行处理.]]
		while (p->next && p->next->jiffies < p->jiffies) {
    7441:	eb 72                	jmp    74b5 <add_timer+0x103>
			p->jiffies -= p->next->jiffies;
    7443:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7447:	8b 10                	mov    (%eax),%edx
    7449:	8b 44 24 0c          	mov    0xc(%esp),%eax
    744d:	8b 40 08             	mov    0x8(%eax),%eax
    7450:	8b 00                	mov    (%eax),%eax
    7452:	29 c2                	sub    %eax,%edx
    7454:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7458:	89 10                	mov    %edx,(%eax)
			fn = p->fn;
    745a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    745e:	8b 40 04             	mov    0x4(%eax),%eax
    7461:	89 44 24 24          	mov    %eax,0x24(%esp)
			p->fn = p->next->fn;
    7465:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7469:	8b 40 08             	mov    0x8(%eax),%eax
    746c:	8b 50 04             	mov    0x4(%eax),%edx
    746f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7473:	89 50 04             	mov    %edx,0x4(%eax)
			p->next->fn = fn;
    7476:	8b 44 24 0c          	mov    0xc(%esp),%eax
    747a:	8b 40 08             	mov    0x8(%eax),%eax
    747d:	8b 54 24 24          	mov    0x24(%esp),%edx
    7481:	89 50 04             	mov    %edx,0x4(%eax)
			jiffies = p->jiffies;
    7484:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7488:	8b 00                	mov    (%eax),%eax
    748a:	89 44 24 20          	mov    %eax,0x20(%esp)
			p->jiffies = p->next->jiffies;
    748e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7492:	8b 40 08             	mov    0x8(%eax),%eax
    7495:	8b 10                	mov    (%eax),%edx
    7497:	8b 44 24 0c          	mov    0xc(%esp),%eax
    749b:	89 10                	mov    %edx,(%eax)
			p->next->jiffies = jiffies;
    749d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74a1:	8b 40 08             	mov    0x8(%eax),%eax
    74a4:	8b 54 24 20          	mov    0x20(%esp),%edx
    74a8:	89 10                	mov    %edx,(%eax)
			p = p->next;
    74aa:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74ae:	8b 40 08             	mov    0x8(%eax),%eax
    74b1:	89 44 24 0c          	mov    %eax,0xc(%esp)
		p->next = next_timer;
		next_timer = p;
		// 链表项按定时值从小到大排序.在排序时减去排在前面需要的滴答数,这样在处理定时器时只要查看链表头的第一项的定时是否到期即可.
		// [[?? 这段程序好像没有考虑周全.如果新插入的定时器值小于原来关一个定时器值时则根本没会进入循环中,但此时还是应该将紧随后面
		// 的一个定时器值减去新的第1个的定时值.即如果第1个定时值<=第2个,则第2个定时值扣除第1个的值即可,否则进入下面循环中进行处理.]]
		while (p->next && p->next->jiffies < p->jiffies) {
    74b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74b9:	8b 40 08             	mov    0x8(%eax),%eax
    74bc:	85 c0                	test   %eax,%eax
    74be:	74 17                	je     74d7 <add_timer+0x125>
    74c0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74c4:	8b 40 08             	mov    0x8(%eax),%eax
    74c7:	8b 10                	mov    (%eax),%edx
    74c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74cd:	8b 00                	mov    (%eax),%eax
    74cf:	39 c2                	cmp    %eax,%edx
    74d1:	0f 8c 6c ff ff ff    	jl     7443 <add_timer+0x91>
			p->jiffies = p->next->jiffies;
			p->next->jiffies = jiffies;
			p = p->next;
		}
		// 修正上述问题.
		if(p->next && p->next->jiffies >= p->jiffies) {
    74d7:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74db:	8b 40 08             	mov    0x8(%eax),%eax
    74de:	85 c0                	test   %eax,%eax
    74e0:	74 2f                	je     7511 <add_timer+0x15f>
    74e2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74e6:	8b 40 08             	mov    0x8(%eax),%eax
    74e9:	8b 10                	mov    (%eax),%edx
    74eb:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74ef:	8b 00                	mov    (%eax),%eax
    74f1:	39 c2                	cmp    %eax,%edx
    74f3:	7c 1c                	jl     7511 <add_timer+0x15f>
			p->next->jiffies -= p->jiffies;
    74f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74f9:	8b 40 08             	mov    0x8(%eax),%eax
    74fc:	8b 54 24 0c          	mov    0xc(%esp),%edx
    7500:	8b 52 08             	mov    0x8(%edx),%edx
    7503:	8b 0a                	mov    (%edx),%ecx
    7505:	8b 54 24 0c          	mov    0xc(%esp),%edx
    7509:	8b 12                	mov    (%edx),%edx
    750b:	29 d1                	sub    %edx,%ecx
    750d:	89 ca                	mov    %ecx,%edx
    750f:	89 10                	mov    %edx,(%eax)
		}
	}
	sti();
    7511:	fb                   	sti    
    7512:	eb 01                	jmp    7515 <add_timer+0x163>
{
	struct timer_list * p;

	// 如果定时处理程序指针为空,则退出.否则关中断.
	if (!fn)
		return;
    7514:	90                   	nop
		if(p->next && p->next->jiffies >= p->jiffies) {
			p->next->jiffies -= p->jiffies;
		}
	}
	sti();
}
    7515:	83 c4 1c             	add    $0x1c,%esp
    7518:	c3                   	ret    

00007519 <do_timer>:

// 时钟中断C函数处理程序,在sys_call.s中的timer_interrupt被调用.
// 参数cpl是当前特权级0或3,是时钟中断发生时正被执行的代码选择符中的特权级.cpl=0时表示中断发生时正在执行内核代码,cpl=3时表示中断发生时正在执行用户
// 代码.对于一个进程由于执行时间片用完时,则进行任务切换.并执行一个计时更新工作.
void do_timer(long cpl)
{
    7519:	83 ec 1c             	sub    $0x1c,%esp
	static int blanked = 0;

	// 首先判断是否经过了一定时间而让屏幕黑屏(blankcount).如果blankcount计数不为零,或者黑屏延时间隔时间blankinterval为0的话,那么若已经处理黑屏状态
	// (黑屏标志blanked=1),则让屏幕恢复显示.若blnkcount计数不为零,则递减之,并且复位黑屏标志.
	if (blankcount || !blankinterval) {
    751c:	a1 28 ee 03 00       	mov    0x3ee28,%eax
    7521:	85 c0                	test   %eax,%eax
    7523:	75 09                	jne    752e <do_timer+0x15>
    7525:	a1 24 ee 03 00       	mov    0x3ee24,%eax
    752a:	85 c0                	test   %eax,%eax
    752c:	75 30                	jne    755e <do_timer+0x45>
		if (blanked)
    752e:	a1 44 ee 02 00       	mov    0x2ee44,%eax
    7533:	85 c0                	test   %eax,%eax
    7535:	74 05                	je     753c <do_timer+0x23>
			unblank_screen();
    7537:	e8 11 60 01 00       	call   1d54d <unblank_screen>
		if (blankcount)
    753c:	a1 28 ee 03 00       	mov    0x3ee28,%eax
    7541:	85 c0                	test   %eax,%eax
    7543:	74 0d                	je     7552 <do_timer+0x39>
			blankcount--;
    7545:	a1 28 ee 03 00       	mov    0x3ee28,%eax
    754a:	83 e8 01             	sub    $0x1,%eax
    754d:	a3 28 ee 03 00       	mov    %eax,0x3ee28
		blanked = 0;
    7552:	c7 05 44 ee 02 00 00 	movl   $0x0,0x2ee44
    7559:	00 00 00 
    755c:	eb 18                	jmp    7576 <do_timer+0x5d>
	// 否则的话若黑屏标志末置位,则让屏幕黑屏,并且设置黑屏标志.
	} else if (!blanked) {
    755e:	a1 44 ee 02 00       	mov    0x2ee44,%eax
    7563:	85 c0                	test   %eax,%eax
    7565:	75 0f                	jne    7576 <do_timer+0x5d>
		blank_screen();
    7567:	e8 cc 5f 01 00       	call   1d538 <blank_screen>
		blanked = 1;
    756c:	c7 05 44 ee 02 00 01 	movl   $0x1,0x2ee44
    7573:	00 00 00 
	}
	// 接着处理硬盘操作超时问题.如果硬盘超时计数递减之后为0,则进行硬盘访问超时处理.
	if (hd_timeout)
    7576:	a1 84 11 03 00       	mov    0x31184,%eax
    757b:	85 c0                	test   %eax,%eax
    757d:	74 1b                	je     759a <do_timer+0x81>
		if (!--hd_timeout)
    757f:	a1 84 11 03 00       	mov    0x31184,%eax
    7584:	83 e8 01             	sub    $0x1,%eax
    7587:	a3 84 11 03 00       	mov    %eax,0x31184
    758c:	a1 84 11 03 00       	mov    0x31184,%eax
    7591:	85 c0                	test   %eax,%eax
    7593:	75 05                	jne    759a <do_timer+0x81>
			hd_times_out();							// 硬盘访问超时处理(blk_drv/hd.c).
    7595:	e8 a5 0c 01 00       	call   1823f <hd_times_out>

	// 如果发声计数次数到,则关闭发声.(向0x61口发送命令,复位位0和1.位0控制8253计数器2的工作,位1控制扬声器.
	if (beepcount)									// 扬声器发声时间滴答数(chr_drv/console.c)
    759a:	a1 2c ee 03 00       	mov    0x3ee2c,%eax
    759f:	85 c0                	test   %eax,%eax
    75a1:	74 1b                	je     75be <do_timer+0xa5>
		if (!--beepcount)
    75a3:	a1 2c ee 03 00       	mov    0x3ee2c,%eax
    75a8:	83 e8 01             	sub    $0x1,%eax
    75ab:	a3 2c ee 03 00       	mov    %eax,0x3ee2c
    75b0:	a1 2c ee 03 00       	mov    0x3ee2c,%eax
    75b5:	85 c0                	test   %eax,%eax
    75b7:	75 05                	jne    75be <do_timer+0xa5>
			sysbeepstop();
    75b9:	e8 2c 5e 01 00       	call   1d3ea <sysbeepstop>

	// 如果当前特权级(cpl)为0(最高,表示是内核程序在工作),则将内核代码时间stime递增;[Linus把内核程序统称为超级用户(superviser)的
	// 程序.这种称呼来自Intel CPU手册.]如果cpl>0,则表示是一般用户程序在工作,增加utime.
	if (cpl)
    75be:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    75c3:	74 16                	je     75db <do_timer+0xc2>
		current->utime++;
    75c5:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    75ca:	8b 90 e0 02 00 00    	mov    0x2e0(%eax),%edx
    75d0:	83 c2 01             	add    $0x1,%edx
    75d3:	89 90 e0 02 00 00    	mov    %edx,0x2e0(%eax)
    75d9:	eb 14                	jmp    75ef <do_timer+0xd6>
	else
		current->stime++;
    75db:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    75e0:	8b 90 e4 02 00 00    	mov    0x2e4(%eax),%edx
    75e6:	83 c2 01             	add    $0x1,%edx
    75e9:	89 90 e4 02 00 00    	mov    %edx,0x2e4(%eax)

	// 如果有定时器存在,则将链表第1个定时器的值减1.如果已等于0,则调用相应的处理程序,并将该处理程序指针置空.然后去掉该项定时器.next_timer是
	// 定时器链表的头指针.
	if (next_timer) {
    75ef:	a1 40 ee 02 00       	mov    0x2ee40,%eax
    75f4:	85 c0                	test   %eax,%eax
    75f6:	74 4d                	je     7645 <do_timer+0x12c>
		next_timer->jiffies--;
    75f8:	a1 40 ee 02 00       	mov    0x2ee40,%eax
    75fd:	8b 10                	mov    (%eax),%edx
    75ff:	83 ea 01             	sub    $0x1,%edx
    7602:	89 10                	mov    %edx,(%eax)
		while (next_timer && next_timer->jiffies <= 0) {
    7604:	eb 2b                	jmp    7631 <do_timer+0x118>
			void (*fn)(void);						// 这里插入了一个函数指针定义!!

			fn = next_timer->fn;
    7606:	a1 40 ee 02 00       	mov    0x2ee40,%eax
    760b:	8b 40 04             	mov    0x4(%eax),%eax
    760e:	89 44 24 0c          	mov    %eax,0xc(%esp)
			next_timer->fn = NULL;
    7612:	a1 40 ee 02 00       	mov    0x2ee40,%eax
    7617:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
			next_timer = next_timer->next;
    761e:	a1 40 ee 02 00       	mov    0x2ee40,%eax
    7623:	8b 40 08             	mov    0x8(%eax),%eax
    7626:	a3 40 ee 02 00       	mov    %eax,0x2ee40
			(fn)();									// 调用定时处理函数.
    762b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    762f:	ff d0                	call   *%eax

	// 如果有定时器存在,则将链表第1个定时器的值减1.如果已等于0,则调用相应的处理程序,并将该处理程序指针置空.然后去掉该项定时器.next_timer是
	// 定时器链表的头指针.
	if (next_timer) {
		next_timer->jiffies--;
		while (next_timer && next_timer->jiffies <= 0) {
    7631:	a1 40 ee 02 00       	mov    0x2ee40,%eax
    7636:	85 c0                	test   %eax,%eax
    7638:	74 0b                	je     7645 <do_timer+0x12c>
    763a:	a1 40 ee 02 00       	mov    0x2ee40,%eax
    763f:	8b 00                	mov    (%eax),%eax
    7641:	85 c0                	test   %eax,%eax
    7643:	7e c1                	jle    7606 <do_timer+0xed>
			next_timer = next_timer->next;
			(fn)();									// 调用定时处理函数.
		}
	}
	// 如果当前软盘控制器FDC的数字输出寄存器中马达启动位有置位的,则执行软盘定时程序.
	if (current_DOR & 0xf0)
    7645:	0f b6 05 c8 e2 02 00 	movzbl 0x2e2c8,%eax
    764c:	0f b6 c0             	movzbl %al,%eax
    764f:	25 f0 00 00 00       	and    $0xf0,%eax
    7654:	85 c0                	test   %eax,%eax
    7656:	74 05                	je     765d <do_timer+0x144>
		do_floppy_timer();
    7658:	e8 72 fc ff ff       	call   72cf <do_floppy_timer>
	// 如果进程运行时间还没完,则退出.否则置当前任务运行计数值为0.并且若发生时钟中断时正在内核代码中运行则返回,否则调用执行调试函数.
	if ((--current->counter) > 0) return;
    765d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    7662:	8b 50 04             	mov    0x4(%eax),%edx
    7665:	83 ea 01             	sub    $0x1,%edx
    7668:	89 50 04             	mov    %edx,0x4(%eax)
    766b:	8b 40 04             	mov    0x4(%eax),%eax
    766e:	85 c0                	test   %eax,%eax
    7670:	7f 1a                	jg     768c <do_timer+0x173>
	current->counter = 0;
    7672:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    7677:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	if (!cpl) return;								// 对于内核态程序,不信赖counter值进行调试.
    767e:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    7683:	74 0a                	je     768f <do_timer+0x176>
	schedule();
    7685:	e8 bb f7 ff ff       	call   6e45 <schedule>
    768a:	eb 04                	jmp    7690 <do_timer+0x177>
	}
	// 如果当前软盘控制器FDC的数字输出寄存器中马达启动位有置位的,则执行软盘定时程序.
	if (current_DOR & 0xf0)
		do_floppy_timer();
	// 如果进程运行时间还没完,则退出.否则置当前任务运行计数值为0.并且若发生时钟中断时正在内核代码中运行则返回,否则调用执行调试函数.
	if ((--current->counter) > 0) return;
    768c:	90                   	nop
    768d:	eb 01                	jmp    7690 <do_timer+0x177>
	current->counter = 0;
	if (!cpl) return;								// 对于内核态程序,不信赖counter值进行调试.
    768f:	90                   	nop
	schedule();
}
    7690:	83 c4 1c             	add    $0x1c,%esp
    7693:	c3                   	ret    

00007694 <sys_alarm>:
// 进程数据结构中报警定时值alarm的单位是系统滴答（1滴答为10毫秒），它是系统开机起到设置定时操作时系统滴答值jiffies和转换成滴答
// 单位的定时值之和，即'jiffies + HZ*定时秒值'。而参数给出的是以秒为单位的定时值，因此本函数的主要操作是进行两个单位的转换。
// 其中常数HZ = 100,是内核系统运行频率。定义在inlucde/sched.h上。
// 参数seconds是新的定时时间值，单位是秒。
int sys_alarm(long seconds)
{
    7694:	83 ec 10             	sub    $0x10,%esp
	int old = current->alarm;
    7697:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    769c:	8b 80 dc 02 00 00    	mov    0x2dc(%eax),%eax
    76a2:	89 44 24 0c          	mov    %eax,0xc(%esp)

	if (old)
    76a6:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    76ab:	74 1d                	je     76ca <sys_alarm+0x36>
		old = (old - jiffies) / HZ;
    76ad:	8b 54 24 0c          	mov    0xc(%esp),%edx
    76b1:	a1 00 eb 02 00       	mov    0x2eb00,%eax
    76b6:	29 c2                	sub    %eax,%edx
    76b8:	89 d0                	mov    %edx,%eax
    76ba:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    76bf:	f7 e2                	mul    %edx
    76c1:	89 d0                	mov    %edx,%eax
    76c3:	c1 e8 05             	shr    $0x5,%eax
    76c6:	89 44 24 0c          	mov    %eax,0xc(%esp)
	current->alarm = (seconds>0)?(jiffies+HZ*seconds):0;
    76ca:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    76cf:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    76d4:	7e 13                	jle    76e9 <sys_alarm+0x55>
    76d6:	8b 54 24 14          	mov    0x14(%esp),%edx
    76da:	6b d2 64             	imul   $0x64,%edx,%edx
    76dd:	89 d1                	mov    %edx,%ecx
    76df:	8b 15 00 eb 02 00    	mov    0x2eb00,%edx
    76e5:	01 ca                	add    %ecx,%edx
    76e7:	eb 05                	jmp    76ee <sys_alarm+0x5a>
    76e9:	ba 00 00 00 00       	mov    $0x0,%edx
    76ee:	89 90 dc 02 00 00    	mov    %edx,0x2dc(%eax)
	return (old);
    76f4:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    76f8:	83 c4 10             	add    $0x10,%esp
    76fb:	c3                   	ret    

000076fc <sys_getpid>:

// 取当前进程号pid。
int sys_getpid(void)
{
	return current->pid;
    76fc:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    7701:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
}
    7707:	c3                   	ret    

00007708 <sys_getppid>:

// 取父进程号ppid。
int sys_getppid(void)
{
	return current->p_pptr->pid;
    7708:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    770d:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    7713:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
}
    7719:	c3                   	ret    

0000771a <sys_getuid>:

// 取用户uid。
int sys_getuid(void)
{
	return current->uid;
    771a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    771f:	0f b7 80 cc 02 00 00 	movzwl 0x2cc(%eax),%eax
    7726:	0f b7 c0             	movzwl %ax,%eax
}
    7729:	c3                   	ret    

0000772a <sys_geteuid>:

// 取有效的用户号euid。
int sys_geteuid(void)
{
	return current->euid;
    772a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    772f:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    7736:	0f b7 c0             	movzwl %ax,%eax
}
    7739:	c3                   	ret    

0000773a <sys_getgid>:

// 取组号gid。
int sys_getgid(void)
{
	return current->gid;
    773a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    773f:	0f b7 80 d2 02 00 00 	movzwl 0x2d2(%eax),%eax
    7746:	0f b7 c0             	movzwl %ax,%eax
}
    7749:	c3                   	ret    

0000774a <sys_getegid>:

// 取有效的组号egid。
int sys_getegid(void)
{
	return current->egid;
    774a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    774f:	0f b7 80 d4 02 00 00 	movzwl 0x2d4(%eax),%eax
    7756:	0f b7 c0             	movzwl %ax,%eax
}
    7759:	c3                   	ret    

0000775a <sys_nice>:

// 系统调用功能 -- 降低对CPU的使用优先权（有人会用吗？）。
// 应该限制increment为大于0的值，否则可使优先仅增大！！
int sys_nice(long increment)
{
	if (current->priority-increment > 0)
    775a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    775f:	8b 40 08             	mov    0x8(%eax),%eax
    7762:	2b 44 24 04          	sub    0x4(%esp),%eax
    7766:	85 c0                	test   %eax,%eax
    7768:	7e 15                	jle    777f <sys_nice+0x25>
		current->priority -= increment;
    776a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    776f:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    7775:	8b 52 08             	mov    0x8(%edx),%edx
    7778:	2b 54 24 04          	sub    0x4(%esp),%edx
    777c:	89 50 08             	mov    %edx,0x8(%eax)
	return 0;
    777f:	b8 00 00 00 00       	mov    $0x0,%eax
}
    7784:	c3                   	ret    

00007785 <sched_init>:

// 内核调度程序的初始化子程序
void sched_init(void)
{
    7785:	55                   	push   %ebp
    7786:	57                   	push   %edi
    7787:	56                   	push   %esi
    7788:	53                   	push   %ebx
    7789:	83 ec 10             	sub    $0x10,%esp
		panic("Struct sigaction MUST be 16 bytes");
	// 在全局描述符表中设置初始任务(任务0)的任务状态段描述符和局部数据表描述符.
	// FIRST_TSS_ENTRY和FIRST_LDT_ENTRY的值分别是4和5,定义在include/linux/sched.h中.gdt是一个描述符表数组(include/linux/head.h),
	// 实际上对应程序head.s中的他已描述符表基址(gdt).因此gdt+FIRST_TSS_ENTRY即为gdt[FIRST_TSS_ENTRY](即是gdt[4]),即gdt数组第4项的地址
	// 参见include/asm/system.h
	set_tss_desc(gdt + FIRST_TSS_ENTRY, &(init_task.task.tss));
    778c:	ba d8 5c 00 00       	mov    $0x5cd8,%edx
    7791:	b9 da 5c 00 00       	mov    $0x5cda,%ecx
    7796:	bb dc 5c 00 00       	mov    $0x5cdc,%ebx
    779b:	be dd 5c 00 00       	mov    $0x5cdd,%esi
    77a0:	bf de 5c 00 00       	mov    $0x5cde,%edi
    77a5:	bd df 5c 00 00       	mov    $0x5cdf,%ebp
    77aa:	b8 50 d5 02 00       	mov    $0x2d550,%eax
    77af:	66 c7 02 68 00       	movw   $0x68,(%edx)
    77b4:	66 89 01             	mov    %ax,(%ecx)
    77b7:	c1 c8 10             	ror    $0x10,%eax
    77ba:	88 03                	mov    %al,(%ebx)
    77bc:	c6 06 89             	movb   $0x89,(%esi)
    77bf:	c6 07 00             	movb   $0x0,(%edi)
    77c2:	88 65 00             	mov    %ah,0x0(%ebp)
    77c5:	c1 c8 10             	ror    $0x10,%eax
	set_ldt_desc(gdt + FIRST_LDT_ENTRY, &(init_task.task.ldt));
    77c8:	ba e0 5c 00 00       	mov    $0x5ce0,%edx
    77cd:	b9 e2 5c 00 00       	mov    $0x5ce2,%ecx
    77d2:	bb e4 5c 00 00       	mov    $0x5ce4,%ebx
    77d7:	be e5 5c 00 00       	mov    $0x5ce5,%esi
    77dc:	bf e6 5c 00 00       	mov    $0x5ce6,%edi
    77e1:	bd e7 5c 00 00       	mov    $0x5ce7,%ebp
    77e6:	b8 38 d5 02 00       	mov    $0x2d538,%eax
    77eb:	66 c7 02 68 00       	movw   $0x68,(%edx)
    77f0:	66 89 01             	mov    %ax,(%ecx)
    77f3:	c1 c8 10             	ror    $0x10,%eax
    77f6:	88 03                	mov    %al,(%ebx)
    77f8:	c6 06 82             	movb   $0x82,(%esi)
    77fb:	c6 07 00             	movb   $0x0,(%edi)
    77fe:	88 65 00             	mov    %ah,0x0(%ebp)
    7801:	c1 c8 10             	ror    $0x10,%eax
	// 清任务数组和描述符表项(注意i=1开始,所以初始任务的描述符还在).描述符项结构定义在文件include/linux/head.h中.
	p = gdt + 2 + FIRST_TSS_ENTRY;
    7804:	c7 44 24 08 e8 5c 00 	movl   $0x5ce8,0x8(%esp)
    780b:	00 
	// 初始化除进程一以外的其他进程指针
	for(i = 1; i < NR_TASKS; i++) {
    780c:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
    7813:	00 
    7814:	eb 4e                	jmp    7864 <sched_init+0xdf>
		task[i] = NULL;
    7816:	8b 44 24 0c          	mov    0xc(%esp),%eax
    781a:	c7 04 85 c0 e1 02 00 	movl   $0x0,0x2e1c0(,%eax,4)
    7821:	00 00 00 00 
		p->a = p->b = 0;
    7825:	8b 44 24 08          	mov    0x8(%esp),%eax
    7829:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    7830:	8b 44 24 08          	mov    0x8(%esp),%eax
    7834:	8b 50 04             	mov    0x4(%eax),%edx
    7837:	8b 44 24 08          	mov    0x8(%esp),%eax
    783b:	89 10                	mov    %edx,(%eax)
		p++;
    783d:	83 44 24 08 08       	addl   $0x8,0x8(%esp)
		p->a = p->b = 0;
    7842:	8b 44 24 08          	mov    0x8(%esp),%eax
    7846:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    784d:	8b 44 24 08          	mov    0x8(%esp),%eax
    7851:	8b 50 04             	mov    0x4(%eax),%edx
    7854:	8b 44 24 08          	mov    0x8(%esp),%eax
    7858:	89 10                	mov    %edx,(%eax)
		p++;
    785a:	83 44 24 08 08       	addl   $0x8,0x8(%esp)
	set_tss_desc(gdt + FIRST_TSS_ENTRY, &(init_task.task.tss));
	set_ldt_desc(gdt + FIRST_LDT_ENTRY, &(init_task.task.ldt));
	// 清任务数组和描述符表项(注意i=1开始,所以初始任务的描述符还在).描述符项结构定义在文件include/linux/head.h中.
	p = gdt + 2 + FIRST_TSS_ENTRY;
	// 初始化除进程一以外的其他进程指针
	for(i = 1; i < NR_TASKS; i++) {
    785f:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    7864:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    7869:	7e ab                	jle    7816 <sched_init+0x91>
	}
	/* Clear NT, so that we won't have troubles with that later on */
	/* 清除标志寄存器中的位NT,这样以后就不会有麻烦 */
	// EFLAGS中的NT标志位用于控制任务的嵌套调用.当NT位置位时,那么当前中断任务执行IRET指令时就会引起任务切换.NT指出TSS中的back_link字段是否有效.
	// NT=0时无效.
	__asm__("pushfl ; andl $0xffffbfff,(%esp) ; popfl");
    786b:	9c                   	pushf  
    786c:	81 24 24 ff bf ff ff 	andl   $0xffffbfff,(%esp)
    7873:	9d                   	popf   
	// 将任务0的TSS段选择符加载到任务寄存器tr.将局部描述符表段选择符加载到局部描述符表寄存器ldtr中.注意!!是将GDT中相应LDT描述符的选择符加载到ldtr.
	// 只明确加这一次,以后新任务LDT的加载,是CPU根据TSS中的LDT项自动加载.
	ltr(0);								// 定义在include/linux/sched.h
    7874:	b8 20 00 00 00       	mov    $0x20,%eax
    7879:	0f 00 d8             	ltr    %ax
	lldt(0);							// 其中参数(0)是任务号.
    787c:	b8 28 00 00 00       	mov    $0x28,%eax
    7881:	0f 00 d0             	lldt   %ax
	// 下面代码用于初始化8253定时器.通道0,选择工作方式3,二进制计数方式.通道0的输出引脚接在中断控制主芯片的IRQ0上,它每10毫秒发出一个IRQ0请求.
	// LATCH是初始定时计数值.
	outb_p(0x36, 0x43);					/* binary, mode 3, LSB/MSB, ch 0 */
    7884:	b8 36 00 00 00       	mov    $0x36,%eax
    7889:	ba 43 00 00 00       	mov    $0x43,%edx
    788e:	ee                   	out    %al,(%dx)
    788f:	eb 00                	jmp    7891 <sched_init+0x10c>
    7891:	eb 00                	jmp    7893 <sched_init+0x10e>
	outb_p(LATCH & 0xff, 0x40);			/* LSB */	// 定时值低字节
    7893:	b8 9b 00 00 00       	mov    $0x9b,%eax
    7898:	ba 40 00 00 00       	mov    $0x40,%edx
    789d:	ee                   	out    %al,(%dx)
    789e:	eb 00                	jmp    78a0 <sched_init+0x11b>
    78a0:	eb 00                	jmp    78a2 <sched_init+0x11d>
	outb(LATCH >> 8, 0x40);				/* MSB */	// 定时值高字节
    78a2:	b8 2e 00 00 00       	mov    $0x2e,%eax
    78a7:	ba 40 00 00 00       	mov    $0x40,%edx
    78ac:	ee                   	out    %al,(%dx)
	// 设置时钟中断处理程序句柄(设置时钟中断门).修改中断控制器屏蔽码,允许时钟中断.
	// 然后设置系统调用中断门.这两个设置中断描述衔表IDT中描述符的宏定义在文件include/asm/system.h中.两者的区别参见system.h文件开始处的说明.
	set_intr_gate(0x20, &timer_interrupt);
    78ad:	b9 b8 55 00 00       	mov    $0x55b8,%ecx
    78b2:	bb bc 55 00 00       	mov    $0x55bc,%ebx
    78b7:	ba 20 7a 00 00       	mov    $0x7a20,%edx
    78bc:	b8 00 00 08 00       	mov    $0x80000,%eax
    78c1:	66 89 d0             	mov    %dx,%ax
    78c4:	66 ba 00 8e          	mov    $0x8e00,%dx
    78c8:	89 01                	mov    %eax,(%ecx)
    78ca:	89 13                	mov    %edx,(%ebx)
	outb(inb_p(0x21) & ~0x01, 0x21);
    78cc:	b8 21 00 00 00       	mov    $0x21,%eax
    78d1:	89 c2                	mov    %eax,%edx
    78d3:	ec                   	in     (%dx),%al
    78d4:	eb 00                	jmp    78d6 <sched_init+0x151>
    78d6:	eb 00                	jmp    78d8 <sched_init+0x153>
    78d8:	88 44 24 07          	mov    %al,0x7(%esp)
    78dc:	0f b6 44 24 07       	movzbl 0x7(%esp),%eax
    78e1:	0f b6 c0             	movzbl %al,%eax
    78e4:	83 e0 fe             	and    $0xfffffffe,%eax
    78e7:	ba 21 00 00 00       	mov    $0x21,%edx
    78ec:	ee                   	out    %al,(%dx)
	set_system_gate(0x80, &system_call);
    78ed:	b9 b8 58 00 00       	mov    $0x58b8,%ecx
    78f2:	bb bc 58 00 00       	mov    $0x58bc,%ebx
    78f7:	ba 28 79 00 00       	mov    $0x7928,%edx
    78fc:	b8 00 00 08 00       	mov    $0x80000,%eax
    7901:	66 89 d0             	mov    %dx,%ax
    7904:	66 ba 00 ef          	mov    $0xef00,%dx
    7908:	89 01                	mov    %eax,(%ecx)
    790a:	89 13                	mov    %edx,(%ebx)
}
    790c:	90                   	nop
    790d:	83 c4 10             	add    $0x10,%esp
    7910:	5b                   	pop    %ebx
    7911:	5e                   	pop    %esi
    7912:	5f                   	pop    %edi
    7913:	5d                   	pop    %ebp
    7914:	c3                   	ret    
    7915:	66 90                	xchg   %ax,%ax
    7917:	90                   	nop

00007918 <bad_sys_call>:
    7918:	6a da                	push   $0xffffffda
    791a:	eb 50                	jmp    796c <ret_from_sys_call>

0000791c <reschedule>:
    791c:	68 6c 79 00 00       	push   $0x796c
    7921:	e9 1f f5 ff ff       	jmp    6e45 <schedule>
    7926:	66 90                	xchg   %ax,%ax

00007928 <system_call>:
    7928:	1e                   	push   %ds
    7929:	06                   	push   %es
    792a:	0f a0                	push   %fs
    792c:	50                   	push   %eax
    792d:	52                   	push   %edx
    792e:	51                   	push   %ecx
    792f:	53                   	push   %ebx
    7930:	ba 10 00 00 00       	mov    $0x10,%edx
    7935:	8e da                	mov    %edx,%ds
    7937:	8e c2                	mov    %edx,%es
    7939:	ba 17 00 00 00       	mov    $0x17,%edx
    793e:	8e e2                	mov    %edx,%fs
    7940:	3b 05 9c d1 02 00    	cmp    0x2d19c,%eax
    7946:	73 d0                	jae    7918 <bad_sys_call>
    7948:	8b 1c 85 40 d0 02 00 	mov    0x2d040(,%eax,4),%ebx
    794f:	83 fb 00             	cmp    $0x0,%ebx
    7952:	75 05                	jne    7959 <sys_call>
    7954:	e8 0d 2a 00 00       	call   a366 <sys_default>

00007959 <sys_call>:
    7959:	ff d3                	call   *%ebx
    795b:	50                   	push   %eax
    795c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    7961:	83 38 00             	cmpl   $0x0,(%eax)
    7964:	75 b6                	jne    791c <reschedule>
    7966:	83 78 04 00          	cmpl   $0x0,0x4(%eax)
    796a:	74 b0                	je     791c <reschedule>

0000796c <ret_from_sys_call>:
    796c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    7971:	3b 05 c0 e1 02 00    	cmp    0x2e1c0,%eax
    7977:	74 34                	je     79ad <ret_from_sys_call+0x41>
    7979:	66 83 7c 24 24 0f    	cmpw   $0xf,0x24(%esp)
    797f:	75 2c                	jne    79ad <ret_from_sys_call+0x41>
    7981:	66 83 7c 24 30 17    	cmpw   $0x17,0x30(%esp)
    7987:	75 24                	jne    79ad <ret_from_sys_call+0x41>
    7989:	8b 58 0c             	mov    0xc(%eax),%ebx
    798c:	8b 88 10 02 00 00    	mov    0x210(%eax),%ecx
    7992:	f7 d1                	not    %ecx
    7994:	21 d9                	and    %ebx,%ecx
    7996:	0f bc c9             	bsf    %ecx,%ecx
    7999:	74 12                	je     79ad <ret_from_sys_call+0x41>
    799b:	0f b3 cb             	btr    %ecx,%ebx
    799e:	89 58 0c             	mov    %ebx,0xc(%eax)
    79a1:	41                   	inc    %ecx
    79a2:	51                   	push   %ecx
    79a3:	e8 65 3f 00 00       	call   b90d <do_signal>
    79a8:	59                   	pop    %ecx
    79a9:	85 c0                	test   %eax,%eax
    79ab:	75 af                	jne    795c <sys_call+0x3>
    79ad:	58                   	pop    %eax
    79ae:	5b                   	pop    %ebx
    79af:	59                   	pop    %ecx
    79b0:	5a                   	pop    %edx
    79b1:	83 c4 04             	add    $0x4,%esp
    79b4:	0f a1                	pop    %fs
    79b6:	07                   	pop    %es
    79b7:	1f                   	pop    %ds
    79b8:	cf                   	iret   
    79b9:	8d 76 00             	lea    0x0(%esi),%esi

000079bc <coprocessor_error>:
    79bc:	1e                   	push   %ds
    79bd:	06                   	push   %es
    79be:	0f a0                	push   %fs
    79c0:	6a ff                	push   $0xffffffff
    79c2:	52                   	push   %edx
    79c3:	51                   	push   %ecx
    79c4:	53                   	push   %ebx
    79c5:	50                   	push   %eax
    79c6:	b8 10 00 00 00       	mov    $0x10,%eax
    79cb:	8e d8                	mov    %eax,%ds
    79cd:	8e c0                	mov    %eax,%es
    79cf:	b8 17 00 00 00       	mov    $0x17,%eax
    79d4:	8e e0                	mov    %eax,%fs
    79d6:	68 6c 79 00 00       	push   $0x796c
    79db:	e9 2c 92 01 00       	jmp    20c0c <math_error>

000079e0 <device_not_available>:
    79e0:	1e                   	push   %ds
    79e1:	06                   	push   %es
    79e2:	0f a0                	push   %fs
    79e4:	6a ff                	push   $0xffffffff
    79e6:	52                   	push   %edx
    79e7:	51                   	push   %ecx
    79e8:	53                   	push   %ebx
    79e9:	50                   	push   %eax
    79ea:	b8 10 00 00 00       	mov    $0x10,%eax
    79ef:	8e d8                	mov    %eax,%ds
    79f1:	8e c0                	mov    %eax,%es
    79f3:	b8 17 00 00 00       	mov    $0x17,%eax
    79f8:	8e e0                	mov    %eax,%fs
    79fa:	68 6c 79 00 00       	push   $0x796c
    79ff:	0f 06                	clts   
    7a01:	0f 20 c0             	mov    %cr0,%eax
    7a04:	a9 04 00 00 00       	test   $0x4,%eax
    7a09:	0f 84 d6 f3 ff ff    	je     6de5 <math_state_restore>
    7a0f:	55                   	push   %ebp
    7a10:	56                   	push   %esi
    7a11:	57                   	push   %edi
    7a12:	6a 00                	push   $0x0
    7a14:	e8 fd 8f 01 00       	call   20a16 <math_emulate>
    7a19:	83 c4 04             	add    $0x4,%esp
    7a1c:	5f                   	pop    %edi
    7a1d:	5e                   	pop    %esi
    7a1e:	5d                   	pop    %ebp
    7a1f:	c3                   	ret    

00007a20 <timer_interrupt>:
    7a20:	1e                   	push   %ds
    7a21:	06                   	push   %es
    7a22:	0f a0                	push   %fs
    7a24:	6a ff                	push   $0xffffffff
    7a26:	52                   	push   %edx
    7a27:	51                   	push   %ecx
    7a28:	53                   	push   %ebx
    7a29:	50                   	push   %eax
    7a2a:	b8 10 00 00 00       	mov    $0x10,%eax
    7a2f:	8e d8                	mov    %eax,%ds
    7a31:	8e c0                	mov    %eax,%es
    7a33:	b8 17 00 00 00       	mov    $0x17,%eax
    7a38:	8e e0                	mov    %eax,%fs
    7a3a:	ff 05 00 eb 02 00    	incl   0x2eb00
    7a40:	b0 20                	mov    $0x20,%al
    7a42:	e6 20                	out    %al,$0x20
    7a44:	8b 44 24 24          	mov    0x24(%esp),%eax
    7a48:	83 e0 03             	and    $0x3,%eax
    7a4b:	50                   	push   %eax
    7a4c:	e8 c8 fa ff ff       	call   7519 <do_timer>
    7a51:	83 c4 04             	add    $0x4,%esp
    7a54:	e9 13 ff ff ff       	jmp    796c <ret_from_sys_call>
    7a59:	8d 76 00             	lea    0x0(%esi),%esi

00007a5c <sys_execve>:
    7a5c:	8d 44 24 20          	lea    0x20(%esp),%eax
    7a60:	50                   	push   %eax
    7a61:	e8 43 9e 00 00       	call   118a9 <do_execve>
    7a66:	83 c4 04             	add    $0x4,%esp
    7a69:	c3                   	ret    
    7a6a:	66 90                	xchg   %ax,%ax

00007a6c <sys_fork>:
    7a6c:	e8 e7 10 00 00       	call   8b58 <find_empty_process>
    7a71:	85 c0                	test   %eax,%eax
    7a73:	78 0e                	js     7a83 <sys_fork+0x17>
    7a75:	0f a8                	push   %gs
    7a77:	56                   	push   %esi
    7a78:	57                   	push   %edi
    7a79:	55                   	push   %ebp
    7a7a:	50                   	push   %eax
    7a7b:	e8 7b 0b 00 00       	call   85fb <copy_process>
    7a80:	83 c4 14             	add    $0x14,%esp
    7a83:	c3                   	ret    

00007a84 <hd_interrupt>:
    7a84:	50                   	push   %eax
    7a85:	51                   	push   %ecx
    7a86:	52                   	push   %edx
    7a87:	1e                   	push   %ds
    7a88:	06                   	push   %es
    7a89:	0f a0                	push   %fs
    7a8b:	b8 10 00 00 00       	mov    $0x10,%eax
    7a90:	8e d8                	mov    %eax,%ds
    7a92:	8e c0                	mov    %eax,%es
    7a94:	b8 17 00 00 00       	mov    $0x17,%eax
    7a99:	8e e0                	mov    %eax,%fs
    7a9b:	b0 20                	mov    $0x20,%al
    7a9d:	e6 a0                	out    %al,$0xa0
    7a9f:	eb 00                	jmp    7aa1 <hd_interrupt+0x1d>
    7aa1:	eb 00                	jmp    7aa3 <hd_interrupt+0x1f>
    7aa3:	31 d2                	xor    %edx,%edx
    7aa5:	89 15 84 11 03 00    	mov    %edx,0x31184
    7aab:	87 15 80 11 03 00    	xchg   %edx,0x31180
    7ab1:	85 d2                	test   %edx,%edx
    7ab3:	75 05                	jne    7aba <hd_interrupt+0x36>
    7ab5:	ba 7c 80 01 00       	mov    $0x1807c,%edx
    7aba:	e6 20                	out    %al,$0x20
    7abc:	ff d2                	call   *%edx
    7abe:	0f a1                	pop    %fs
    7ac0:	07                   	pop    %es
    7ac1:	1f                   	pop    %ds
    7ac2:	5a                   	pop    %edx
    7ac3:	59                   	pop    %ecx
    7ac4:	58                   	pop    %eax
    7ac5:	cf                   	iret   

00007ac6 <floppy_interrupt>:
    7ac6:	50                   	push   %eax
    7ac7:	51                   	push   %ecx
    7ac8:	52                   	push   %edx
    7ac9:	1e                   	push   %ds
    7aca:	06                   	push   %es
    7acb:	0f a0                	push   %fs
    7acd:	b8 10 00 00 00       	mov    $0x10,%eax
    7ad2:	8e d8                	mov    %eax,%ds
    7ad4:	8e c0                	mov    %eax,%es
    7ad6:	b8 17 00 00 00       	mov    $0x17,%eax
    7adb:	8e e0                	mov    %eax,%fs
    7add:	b0 20                	mov    $0x20,%al
    7adf:	e6 20                	out    %al,$0x20
    7ae1:	31 c0                	xor    %eax,%eax
    7ae3:	87 05 54 11 03 00    	xchg   %eax,0x31154
    7ae9:	85 c0                	test   %eax,%eax
    7aeb:	75 05                	jne    7af2 <floppy_interrupt+0x2c>
    7aed:	b8 e9 72 01 00       	mov    $0x172e9,%eax
    7af2:	ff d0                	call   *%eax
    7af4:	0f a1                	pop    %fs
    7af6:	07                   	pop    %es
    7af7:	1f                   	pop    %ds
    7af8:	5a                   	pop    %edx
    7af9:	59                   	pop    %ecx
    7afa:	58                   	pop    %eax
    7afb:	cf                   	iret   

00007afc <parallel_interrupt>:
    7afc:	50                   	push   %eax
    7afd:	b0 20                	mov    $0x20,%al
    7aff:	e6 20                	out    %al,$0x20
    7b01:	58                   	pop    %eax
    7b02:	cf                   	iret   

00007b03 <die>:
void alignment_check(void);					// int46(kernel/asm.s)

// 该子程序用来打印出错中断的名称,出错号,调用程序的EIP,EFLAGS,ESP,fs段寄存器值,段的基址,段的长度,进程号pid,任务号,10字节指令码.如果
// 堆栈在用户数据段,则还打印16字节堆栈内容.这些信息可用于程序调试.
static void die(char * str, long esp_ptr, long nr)
{
    7b03:	56                   	push   %esi
    7b04:	53                   	push   %ebx
    7b05:	83 ec 14             	sub    $0x14,%esp
	long * esp = (long *) esp_ptr;
    7b08:	8b 44 24 24          	mov    0x24(%esp),%eax
    7b0c:	89 44 24 08          	mov    %eax,0x8(%esp)
	int i;

	printk("%s: %04x\n\r",str, nr & 0xffff);
    7b10:	8b 44 24 28          	mov    0x28(%esp),%eax
    7b14:	0f b7 c0             	movzwl %ax,%eax
    7b17:	83 ec 04             	sub    $0x4,%esp
    7b1a:	50                   	push   %eax
    7b1b:	ff 74 24 28          	pushl  0x28(%esp)
    7b1f:	68 b8 2c 02 00       	push   $0x22cb8
    7b24:	e8 1e 11 00 00       	call   8c47 <printk>
    7b29:	83 c4 10             	add    $0x10,%esp
	// 下行打印语句显示当前调用进程的CS:EIP,EFLAGS和SS:ESP的值.
	// (1) EIP:\t%04x:%p\n	-- esp[1]是段选择符(cs),esp[0]是eip
	// (2) EFLAGS:\t%p	-- esp[2]是eflags
	// (2) ESP:\t%04x:%p\n	-- esp[4]是原ss,esp[3]是原esp
	printk("EIP:\t%04x:%p\nEFLAGS:\t%p\nESP:\t%04x:%p\n",
		esp[1], esp[0], esp[2], esp[4], esp[3]);
    7b2c:	8b 44 24 08          	mov    0x8(%esp),%eax
    7b30:	83 c0 0c             	add    $0xc,%eax
	printk("%s: %04x\n\r",str, nr & 0xffff);
	// 下行打印语句显示当前调用进程的CS:EIP,EFLAGS和SS:ESP的值.
	// (1) EIP:\t%04x:%p\n	-- esp[1]是段选择符(cs),esp[0]是eip
	// (2) EFLAGS:\t%p	-- esp[2]是eflags
	// (2) ESP:\t%04x:%p\n	-- esp[4]是原ss,esp[3]是原esp
	printk("EIP:\t%04x:%p\nEFLAGS:\t%p\nESP:\t%04x:%p\n",
    7b33:	8b 30                	mov    (%eax),%esi
		esp[1], esp[0], esp[2], esp[4], esp[3]);
    7b35:	8b 44 24 08          	mov    0x8(%esp),%eax
    7b39:	83 c0 10             	add    $0x10,%eax
	printk("%s: %04x\n\r",str, nr & 0xffff);
	// 下行打印语句显示当前调用进程的CS:EIP,EFLAGS和SS:ESP的值.
	// (1) EIP:\t%04x:%p\n	-- esp[1]是段选择符(cs),esp[0]是eip
	// (2) EFLAGS:\t%p	-- esp[2]是eflags
	// (2) ESP:\t%04x:%p\n	-- esp[4]是原ss,esp[3]是原esp
	printk("EIP:\t%04x:%p\nEFLAGS:\t%p\nESP:\t%04x:%p\n",
    7b3c:	8b 18                	mov    (%eax),%ebx
		esp[1], esp[0], esp[2], esp[4], esp[3]);
    7b3e:	8b 44 24 08          	mov    0x8(%esp),%eax
    7b42:	83 c0 08             	add    $0x8,%eax
	printk("%s: %04x\n\r",str, nr & 0xffff);
	// 下行打印语句显示当前调用进程的CS:EIP,EFLAGS和SS:ESP的值.
	// (1) EIP:\t%04x:%p\n	-- esp[1]是段选择符(cs),esp[0]是eip
	// (2) EFLAGS:\t%p	-- esp[2]是eflags
	// (2) ESP:\t%04x:%p\n	-- esp[4]是原ss,esp[3]是原esp
	printk("EIP:\t%04x:%p\nEFLAGS:\t%p\nESP:\t%04x:%p\n",
    7b45:	8b 08                	mov    (%eax),%ecx
    7b47:	8b 44 24 08          	mov    0x8(%esp),%eax
    7b4b:	8b 10                	mov    (%eax),%edx
		esp[1], esp[0], esp[2], esp[4], esp[3]);
    7b4d:	8b 44 24 08          	mov    0x8(%esp),%eax
    7b51:	83 c0 04             	add    $0x4,%eax
	printk("%s: %04x\n\r",str, nr & 0xffff);
	// 下行打印语句显示当前调用进程的CS:EIP,EFLAGS和SS:ESP的值.
	// (1) EIP:\t%04x:%p\n	-- esp[1]是段选择符(cs),esp[0]是eip
	// (2) EFLAGS:\t%p	-- esp[2]是eflags
	// (2) ESP:\t%04x:%p\n	-- esp[4]是原ss,esp[3]是原esp
	printk("EIP:\t%04x:%p\nEFLAGS:\t%p\nESP:\t%04x:%p\n",
    7b54:	8b 00                	mov    (%eax),%eax
    7b56:	83 ec 08             	sub    $0x8,%esp
    7b59:	56                   	push   %esi
    7b5a:	53                   	push   %ebx
    7b5b:	51                   	push   %ecx
    7b5c:	52                   	push   %edx
    7b5d:	50                   	push   %eax
    7b5e:	68 c4 2c 02 00       	push   $0x22cc4
    7b63:	e8 df 10 00 00       	call   8c47 <printk>
    7b68:	83 c4 20             	add    $0x20,%esp
		esp[1], esp[0], esp[2], esp[4], esp[3]);
	printk("fs: %04x\n", _fs());
    7b6b:	66 8c e0             	mov    %fs,%ax
    7b6e:	89 c3                	mov    %eax,%ebx
    7b70:	89 d8                	mov    %ebx,%eax
    7b72:	0f b7 c0             	movzwl %ax,%eax
    7b75:	83 ec 08             	sub    $0x8,%esp
    7b78:	50                   	push   %eax
    7b79:	68 ea 2c 02 00       	push   $0x22cea
    7b7e:	e8 c4 10 00 00       	call   8c47 <printk>
    7b83:	83 c4 10             	add    $0x10,%esp
	printk("base: %p, limit: %p\n", get_base(current->ldt[1]), get_limit(0x17));
    7b86:	b8 17 00 00 00       	mov    $0x17,%eax
    7b8b:	0f 03 c0             	lsl    %ax,%eax
    7b8e:	40                   	inc    %eax
    7b8f:	89 44 24 04          	mov    %eax,0x4(%esp)
    7b93:	8b 4c 24 04          	mov    0x4(%esp),%ecx
    7b97:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    7b9c:	05 a0 03 00 00       	add    $0x3a0,%eax
    7ba1:	83 c0 02             	add    $0x2,%eax
    7ba4:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    7baa:	81 c2 a0 03 00 00    	add    $0x3a0,%edx
    7bb0:	8d 72 04             	lea    0x4(%edx),%esi
    7bb3:	8b 1d a0 e1 02 00    	mov    0x2e1a0,%ebx
    7bb9:	81 c3 a0 03 00 00    	add    $0x3a0,%ebx
    7bbf:	83 c3 07             	add    $0x7,%ebx
    7bc2:	8a 33                	mov    (%ebx),%dh
    7bc4:	8a 16                	mov    (%esi),%dl
    7bc6:	c1 e2 10             	shl    $0x10,%edx
    7bc9:	66 8b 10             	mov    (%eax),%dx
    7bcc:	89 d0                	mov    %edx,%eax
    7bce:	89 04 24             	mov    %eax,(%esp)
    7bd1:	8b 04 24             	mov    (%esp),%eax
    7bd4:	83 ec 04             	sub    $0x4,%esp
    7bd7:	51                   	push   %ecx
    7bd8:	50                   	push   %eax
    7bd9:	68 f4 2c 02 00       	push   $0x22cf4
    7bde:	e8 64 10 00 00       	call   8c47 <printk>
    7be3:	83 c4 10             	add    $0x10,%esp
	if (esp[4] == 0x17) {						// 或原ss值为0x17(用户栈),则还打印出用户栈的4个长字值(16字节).
    7be6:	8b 44 24 08          	mov    0x8(%esp),%eax
    7bea:	83 c0 10             	add    $0x10,%eax
    7bed:	8b 00                	mov    (%eax),%eax
    7bef:	83 f8 17             	cmp    $0x17,%eax
    7bf2:	75 71                	jne    7c65 <die+0x162>
		printk("Stack: ");
    7bf4:	83 ec 0c             	sub    $0xc,%esp
    7bf7:	68 09 2d 02 00       	push   $0x22d09
    7bfc:	e8 46 10 00 00       	call   8c47 <printk>
    7c01:	83 c4 10             	add    $0x10,%esp
		for (i = 0; i < 4; i++)
    7c04:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    7c0b:	00 
    7c0c:	eb 40                	jmp    7c4e <die+0x14b>
			printk("%p ", get_seg_long(0x17, i + (long *)esp[3]));
    7c0e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7c12:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    7c19:	8b 44 24 08          	mov    0x8(%esp),%eax
    7c1d:	83 c0 0c             	add    $0xc,%eax
    7c20:	8b 00                	mov    (%eax),%eax
    7c22:	01 d0                	add    %edx,%eax
    7c24:	89 c2                	mov    %eax,%edx
    7c26:	b8 17 00 00 00       	mov    $0x17,%eax
    7c2b:	0f a0                	push   %fs
    7c2d:	8e e0                	mov    %eax,%fs
    7c2f:	64 8b 02             	mov    %fs:(%edx),%eax
    7c32:	0f a1                	pop    %fs
    7c34:	89 c3                	mov    %eax,%ebx
    7c36:	89 d8                	mov    %ebx,%eax
    7c38:	83 ec 08             	sub    $0x8,%esp
    7c3b:	50                   	push   %eax
    7c3c:	68 11 2d 02 00       	push   $0x22d11
    7c41:	e8 01 10 00 00       	call   8c47 <printk>
    7c46:	83 c4 10             	add    $0x10,%esp
		esp[1], esp[0], esp[2], esp[4], esp[3]);
	printk("fs: %04x\n", _fs());
	printk("base: %p, limit: %p\n", get_base(current->ldt[1]), get_limit(0x17));
	if (esp[4] == 0x17) {						// 或原ss值为0x17(用户栈),则还打印出用户栈的4个长字值(16字节).
		printk("Stack: ");
		for (i = 0; i < 4; i++)
    7c49:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    7c4e:	83 7c 24 0c 03       	cmpl   $0x3,0xc(%esp)
    7c53:	7e b9                	jle    7c0e <die+0x10b>
			printk("%p ", get_seg_long(0x17, i + (long *)esp[3]));
		printk("\n");
    7c55:	83 ec 0c             	sub    $0xc,%esp
    7c58:	68 15 2d 02 00       	push   $0x22d15
    7c5d:	e8 e5 0f 00 00       	call   8c47 <printk>
    7c62:	83 c4 10             	add    $0x10,%esp
	}
	str(i);										// 取当前运行任务的任务号(include/linux/sched.h).
    7c65:	b8 00 00 00 00       	mov    $0x0,%eax
    7c6a:	66 0f 00 c8          	str    %ax
    7c6e:	83 e8 20             	sub    $0x20,%eax
    7c71:	c1 e8 04             	shr    $0x4,%eax
    7c74:	89 44 24 0c          	mov    %eax,0xc(%esp)
	printk("Pid: %d, process nr: %d\n\r", current->pid, 0xffff & i);
    7c78:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7c7c:	0f b7 d0             	movzwl %ax,%edx
    7c7f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    7c84:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    7c8a:	83 ec 04             	sub    $0x4,%esp
    7c8d:	52                   	push   %edx
    7c8e:	50                   	push   %eax
    7c8f:	68 17 2d 02 00       	push   $0x22d17
    7c94:	e8 ae 0f 00 00       	call   8c47 <printk>
    7c99:	83 c4 10             	add    $0x10,%esp
                        						// 进程号,任务号.
	for(i = 0; i < 10; i++)
    7c9c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    7ca3:	00 
    7ca4:	eb 40                	jmp    7ce6 <die+0x1e3>
		printk("%02x ", 0xff & get_seg_byte(esp[1], (i+(char *)esp[0])));
    7ca6:	8b 44 24 08          	mov    0x8(%esp),%eax
    7caa:	83 c0 04             	add    $0x4,%eax
    7cad:	8b 00                	mov    (%eax),%eax
    7caf:	8b 54 24 08          	mov    0x8(%esp),%edx
    7cb3:	8b 12                	mov    (%edx),%edx
    7cb5:	89 d1                	mov    %edx,%ecx
    7cb7:	8b 54 24 0c          	mov    0xc(%esp),%edx
    7cbb:	01 ca                	add    %ecx,%edx
    7cbd:	0f a0                	push   %fs
    7cbf:	8e e0                	mov    %eax,%fs
    7cc1:	64 8a 02             	mov    %fs:(%edx),%al
    7cc4:	0f a1                	pop    %fs
    7cc6:	89 c3                	mov    %eax,%ebx
    7cc8:	89 d8                	mov    %ebx,%eax
    7cca:	0f be c0             	movsbl %al,%eax
    7ccd:	0f b6 c0             	movzbl %al,%eax
    7cd0:	83 ec 08             	sub    $0x8,%esp
    7cd3:	50                   	push   %eax
    7cd4:	68 31 2d 02 00       	push   $0x22d31
    7cd9:	e8 69 0f 00 00       	call   8c47 <printk>
    7cde:	83 c4 10             	add    $0x10,%esp
		printk("\n");
	}
	str(i);										// 取当前运行任务的任务号(include/linux/sched.h).
	printk("Pid: %d, process nr: %d\n\r", current->pid, 0xffff & i);
                        						// 进程号,任务号.
	for(i = 0; i < 10; i++)
    7ce1:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    7ce6:	83 7c 24 0c 09       	cmpl   $0x9,0xc(%esp)
    7ceb:	7e b9                	jle    7ca6 <die+0x1a3>
		printk("%02x ", 0xff & get_seg_byte(esp[1], (i+(char *)esp[0])));
	printk("\n\r");
    7ced:	83 ec 0c             	sub    $0xc,%esp
    7cf0:	68 37 2d 02 00       	push   $0x22d37
    7cf5:	e8 4d 0f 00 00       	call   8c47 <printk>
    7cfa:	83 c4 10             	add    $0x10,%esp
	do_exit(11);								/* play segment exception */
    7cfd:	83 ec 0c             	sub    $0xc,%esp
    7d00:	6a 0b                	push   $0xb
    7d02:	e8 e3 30 00 00       	call   adea <do_exit>
    7d07:	83 c4 10             	add    $0x10,%esp
}
    7d0a:	90                   	nop
    7d0b:	83 c4 14             	add    $0x14,%esp
    7d0e:	5b                   	pop    %ebx
    7d0f:	5e                   	pop    %esi
    7d10:	c3                   	ret    

00007d11 <do_double_fault>:

// 以下这些以do_开头的函数是asm.s中对应中断处理程序调用的C函数.
void do_double_fault(long esp, long error_code)
{
    7d11:	83 ec 0c             	sub    $0xc,%esp
	die("double fault", esp, error_code);
    7d14:	83 ec 04             	sub    $0x4,%esp
    7d17:	ff 74 24 18          	pushl  0x18(%esp)
    7d1b:	ff 74 24 18          	pushl  0x18(%esp)
    7d1f:	68 3a 2d 02 00       	push   $0x22d3a
    7d24:	e8 da fd ff ff       	call   7b03 <die>
    7d29:	83 c4 10             	add    $0x10,%esp
}
    7d2c:	90                   	nop
    7d2d:	83 c4 0c             	add    $0xc,%esp
    7d30:	c3                   	ret    

00007d31 <do_general_protection>:

void do_general_protection(long esp, long error_code)
{
    7d31:	83 ec 0c             	sub    $0xc,%esp
	die("general protection", esp, error_code);
    7d34:	83 ec 04             	sub    $0x4,%esp
    7d37:	ff 74 24 18          	pushl  0x18(%esp)
    7d3b:	ff 74 24 18          	pushl  0x18(%esp)
    7d3f:	68 47 2d 02 00       	push   $0x22d47
    7d44:	e8 ba fd ff ff       	call   7b03 <die>
    7d49:	83 c4 10             	add    $0x10,%esp
}
    7d4c:	90                   	nop
    7d4d:	83 c4 0c             	add    $0xc,%esp
    7d50:	c3                   	ret    

00007d51 <do_alignment_check>:

void do_alignment_check(long esp, long error_code)
{
    7d51:	83 ec 0c             	sub    $0xc,%esp
    die("alignment check", esp, error_code);
    7d54:	83 ec 04             	sub    $0x4,%esp
    7d57:	ff 74 24 18          	pushl  0x18(%esp)
    7d5b:	ff 74 24 18          	pushl  0x18(%esp)
    7d5f:	68 5a 2d 02 00       	push   $0x22d5a
    7d64:	e8 9a fd ff ff       	call   7b03 <die>
    7d69:	83 c4 10             	add    $0x10,%esp
}
    7d6c:	90                   	nop
    7d6d:	83 c4 0c             	add    $0xc,%esp
    7d70:	c3                   	ret    

00007d71 <do_divide_error>:

void do_divide_error(long esp, long error_code)
{
    7d71:	83 ec 0c             	sub    $0xc,%esp
	die("divide error", esp, error_code);
    7d74:	83 ec 04             	sub    $0x4,%esp
    7d77:	ff 74 24 18          	pushl  0x18(%esp)
    7d7b:	ff 74 24 18          	pushl  0x18(%esp)
    7d7f:	68 6a 2d 02 00       	push   $0x22d6a
    7d84:	e8 7a fd ff ff       	call   7b03 <die>
    7d89:	83 c4 10             	add    $0x10,%esp
}
    7d8c:	90                   	nop
    7d8d:	83 c4 0c             	add    $0xc,%esp
    7d90:	c3                   	ret    

00007d91 <do_int3>:
// 参数是进入中断后被顺序压入堆栈的寄存器值.参见asm.s程序.
void do_int3(long * esp, long error_code,
		long fs, long es, long ds,
		long ebp, long esi, long edi,
		long edx, long ecx, long ebx, long eax)
{
    7d91:	83 ec 1c             	sub    $0x1c,%esp
	int tr;

	__asm__("str %%ax":"=a" (tr):"0" (0));		// 取任务寄存器值->tr
    7d94:	b8 00 00 00 00       	mov    $0x0,%eax
    7d99:	66 0f 00 c8          	str    %ax
    7d9d:	89 44 24 0c          	mov    %eax,0xc(%esp)
	printk("eax\t\tebx\t\tecx\t\tedx\n\r%8x\t%8x\t%8x\t%8x\n\r",
    7da1:	83 ec 0c             	sub    $0xc,%esp
    7da4:	ff 74 24 4c          	pushl  0x4c(%esp)
    7da8:	ff 74 24 54          	pushl  0x54(%esp)
    7dac:	ff 74 24 5c          	pushl  0x5c(%esp)
    7db0:	ff 74 24 64          	pushl  0x64(%esp)
    7db4:	68 78 2d 02 00       	push   $0x22d78
    7db9:	e8 89 0e 00 00       	call   8c47 <printk>
    7dbe:	83 c4 20             	add    $0x20,%esp
		eax, ebx, ecx, edx);
	printk("esi\t\tedi\t\tebp\t\tesp\n\r%8x\t%8x\t%8x\t%8x\n\r",
    7dc1:	8b 44 24 20          	mov    0x20(%esp),%eax
    7dc5:	83 ec 0c             	sub    $0xc,%esp
    7dc8:	50                   	push   %eax
    7dc9:	ff 74 24 44          	pushl  0x44(%esp)
    7dcd:	ff 74 24 50          	pushl  0x50(%esp)
    7dd1:	ff 74 24 50          	pushl  0x50(%esp)
    7dd5:	68 a0 2d 02 00       	push   $0x22da0
    7dda:	e8 68 0e 00 00       	call   8c47 <printk>
    7ddf:	83 c4 20             	add    $0x20,%esp
		esi, edi, ebp, (long) esp);
	printk("\n\rds\tes\tfs\ttr\n\r%4x\t%4x\t%4x\t%4x\n\r",
    7de2:	83 ec 0c             	sub    $0xc,%esp
    7de5:	ff 74 24 18          	pushl  0x18(%esp)
    7de9:	ff 74 24 38          	pushl  0x38(%esp)
    7ded:	ff 74 24 40          	pushl  0x40(%esp)
    7df1:	ff 74 24 48          	pushl  0x48(%esp)
    7df5:	68 c8 2d 02 00       	push   $0x22dc8
    7dfa:	e8 48 0e 00 00       	call   8c47 <printk>
    7dff:	83 c4 20             	add    $0x20,%esp
		ds, es, fs, tr);
	printk("EIP: %8x   CS: %4x  EFLAGS: %8x\n\r", esp[0], esp[1], esp[2]);
    7e02:	8b 44 24 20          	mov    0x20(%esp),%eax
    7e06:	83 c0 08             	add    $0x8,%eax
    7e09:	8b 08                	mov    (%eax),%ecx
    7e0b:	8b 44 24 20          	mov    0x20(%esp),%eax
    7e0f:	83 c0 04             	add    $0x4,%eax
    7e12:	8b 10                	mov    (%eax),%edx
    7e14:	8b 44 24 20          	mov    0x20(%esp),%eax
    7e18:	8b 00                	mov    (%eax),%eax
    7e1a:	51                   	push   %ecx
    7e1b:	52                   	push   %edx
    7e1c:	50                   	push   %eax
    7e1d:	68 ec 2d 02 00       	push   $0x22dec
    7e22:	e8 20 0e 00 00       	call   8c47 <printk>
    7e27:	83 c4 10             	add    $0x10,%esp
}
    7e2a:	90                   	nop
    7e2b:	83 c4 1c             	add    $0x1c,%esp
    7e2e:	c3                   	ret    

00007e2f <do_nmi>:

void do_nmi(long esp, long error_code)
{
    7e2f:	83 ec 0c             	sub    $0xc,%esp
	die("nmi", esp, error_code);
    7e32:	83 ec 04             	sub    $0x4,%esp
    7e35:	ff 74 24 18          	pushl  0x18(%esp)
    7e39:	ff 74 24 18          	pushl  0x18(%esp)
    7e3d:	68 0e 2e 02 00       	push   $0x22e0e
    7e42:	e8 bc fc ff ff       	call   7b03 <die>
    7e47:	83 c4 10             	add    $0x10,%esp
}
    7e4a:	90                   	nop
    7e4b:	83 c4 0c             	add    $0xc,%esp
    7e4e:	c3                   	ret    

00007e4f <do_debug>:

void do_debug(long esp, long error_code)
{
    7e4f:	83 ec 0c             	sub    $0xc,%esp
	die("debug", esp, error_code);
    7e52:	83 ec 04             	sub    $0x4,%esp
    7e55:	ff 74 24 18          	pushl  0x18(%esp)
    7e59:	ff 74 24 18          	pushl  0x18(%esp)
    7e5d:	68 12 2e 02 00       	push   $0x22e12
    7e62:	e8 9c fc ff ff       	call   7b03 <die>
    7e67:	83 c4 10             	add    $0x10,%esp
}
    7e6a:	90                   	nop
    7e6b:	83 c4 0c             	add    $0xc,%esp
    7e6e:	c3                   	ret    

00007e6f <do_overflow>:

void do_overflow(long esp, long error_code)
{
    7e6f:	83 ec 0c             	sub    $0xc,%esp
	die("overflow", esp, error_code);
    7e72:	83 ec 04             	sub    $0x4,%esp
    7e75:	ff 74 24 18          	pushl  0x18(%esp)
    7e79:	ff 74 24 18          	pushl  0x18(%esp)
    7e7d:	68 18 2e 02 00       	push   $0x22e18
    7e82:	e8 7c fc ff ff       	call   7b03 <die>
    7e87:	83 c4 10             	add    $0x10,%esp
}
    7e8a:	90                   	nop
    7e8b:	83 c4 0c             	add    $0xc,%esp
    7e8e:	c3                   	ret    

00007e8f <do_bounds>:

void do_bounds(long esp, long error_code)
{
    7e8f:	83 ec 0c             	sub    $0xc,%esp
	die("bounds", esp, error_code);
    7e92:	83 ec 04             	sub    $0x4,%esp
    7e95:	ff 74 24 18          	pushl  0x18(%esp)
    7e99:	ff 74 24 18          	pushl  0x18(%esp)
    7e9d:	68 21 2e 02 00       	push   $0x22e21
    7ea2:	e8 5c fc ff ff       	call   7b03 <die>
    7ea7:	83 c4 10             	add    $0x10,%esp
}
    7eaa:	90                   	nop
    7eab:	83 c4 0c             	add    $0xc,%esp
    7eae:	c3                   	ret    

00007eaf <do_invalid_op>:

void do_invalid_op(long esp, long error_code)
{
    7eaf:	83 ec 0c             	sub    $0xc,%esp
	die("invalid operand", esp, error_code);
    7eb2:	83 ec 04             	sub    $0x4,%esp
    7eb5:	ff 74 24 18          	pushl  0x18(%esp)
    7eb9:	ff 74 24 18          	pushl  0x18(%esp)
    7ebd:	68 28 2e 02 00       	push   $0x22e28
    7ec2:	e8 3c fc ff ff       	call   7b03 <die>
    7ec7:	83 c4 10             	add    $0x10,%esp
}
    7eca:	90                   	nop
    7ecb:	83 c4 0c             	add    $0xc,%esp
    7ece:	c3                   	ret    

00007ecf <do_device_not_available>:

void do_device_not_available(long esp, long error_code)
{
    7ecf:	83 ec 0c             	sub    $0xc,%esp
	die("device not available", esp, error_code);
    7ed2:	83 ec 04             	sub    $0x4,%esp
    7ed5:	ff 74 24 18          	pushl  0x18(%esp)
    7ed9:	ff 74 24 18          	pushl  0x18(%esp)
    7edd:	68 38 2e 02 00       	push   $0x22e38
    7ee2:	e8 1c fc ff ff       	call   7b03 <die>
    7ee7:	83 c4 10             	add    $0x10,%esp
}
    7eea:	90                   	nop
    7eeb:	83 c4 0c             	add    $0xc,%esp
    7eee:	c3                   	ret    

00007eef <do_coprocessor_segment_overrun>:

void do_coprocessor_segment_overrun(long esp, long error_code)
{
    7eef:	83 ec 0c             	sub    $0xc,%esp
	die("coprocessor segment overrun", esp, error_code);
    7ef2:	83 ec 04             	sub    $0x4,%esp
    7ef5:	ff 74 24 18          	pushl  0x18(%esp)
    7ef9:	ff 74 24 18          	pushl  0x18(%esp)
    7efd:	68 4d 2e 02 00       	push   $0x22e4d
    7f02:	e8 fc fb ff ff       	call   7b03 <die>
    7f07:	83 c4 10             	add    $0x10,%esp
}
    7f0a:	90                   	nop
    7f0b:	83 c4 0c             	add    $0xc,%esp
    7f0e:	c3                   	ret    

00007f0f <do_invalid_TSS>:

void do_invalid_TSS(long esp, long error_code)
{
    7f0f:	83 ec 0c             	sub    $0xc,%esp
	die("invalid TSS", esp, error_code);
    7f12:	83 ec 04             	sub    $0x4,%esp
    7f15:	ff 74 24 18          	pushl  0x18(%esp)
    7f19:	ff 74 24 18          	pushl  0x18(%esp)
    7f1d:	68 69 2e 02 00       	push   $0x22e69
    7f22:	e8 dc fb ff ff       	call   7b03 <die>
    7f27:	83 c4 10             	add    $0x10,%esp
}
    7f2a:	90                   	nop
    7f2b:	83 c4 0c             	add    $0xc,%esp
    7f2e:	c3                   	ret    

00007f2f <do_segment_not_present>:

void do_segment_not_present(long esp, long error_code)
{
    7f2f:	83 ec 0c             	sub    $0xc,%esp
	die("segment not present", esp, error_code);
    7f32:	83 ec 04             	sub    $0x4,%esp
    7f35:	ff 74 24 18          	pushl  0x18(%esp)
    7f39:	ff 74 24 18          	pushl  0x18(%esp)
    7f3d:	68 75 2e 02 00       	push   $0x22e75
    7f42:	e8 bc fb ff ff       	call   7b03 <die>
    7f47:	83 c4 10             	add    $0x10,%esp
}
    7f4a:	90                   	nop
    7f4b:	83 c4 0c             	add    $0xc,%esp
    7f4e:	c3                   	ret    

00007f4f <do_stack_segment>:

void do_stack_segment(long esp, long error_code)
{
    7f4f:	83 ec 0c             	sub    $0xc,%esp
	die("stack segment", esp, error_code);
    7f52:	83 ec 04             	sub    $0x4,%esp
    7f55:	ff 74 24 18          	pushl  0x18(%esp)
    7f59:	ff 74 24 18          	pushl  0x18(%esp)
    7f5d:	68 89 2e 02 00       	push   $0x22e89
    7f62:	e8 9c fb ff ff       	call   7b03 <die>
    7f67:	83 c4 10             	add    $0x10,%esp
}
    7f6a:	90                   	nop
    7f6b:	83 c4 0c             	add    $0xc,%esp
    7f6e:	c3                   	ret    

00007f6f <do_coprocessor_error>:

void do_coprocessor_error(long esp, long error_code)
{
    7f6f:	83 ec 0c             	sub    $0xc,%esp
	if (last_task_used_math != current)
    7f72:	8b 15 0c eb 02 00    	mov    0x2eb0c,%edx
    7f78:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    7f7d:	39 c2                	cmp    %eax,%edx
    7f7f:	75 1a                	jne    7f9b <do_coprocessor_error+0x2c>
		return;
	die("coprocessor error", esp, error_code);
    7f81:	83 ec 04             	sub    $0x4,%esp
    7f84:	ff 74 24 18          	pushl  0x18(%esp)
    7f88:	ff 74 24 18          	pushl  0x18(%esp)
    7f8c:	68 97 2e 02 00       	push   $0x22e97
    7f91:	e8 6d fb ff ff       	call   7b03 <die>
    7f96:	83 c4 10             	add    $0x10,%esp
    7f99:	eb 01                	jmp    7f9c <do_coprocessor_error+0x2d>
}

void do_coprocessor_error(long esp, long error_code)
{
	if (last_task_used_math != current)
		return;
    7f9b:	90                   	nop
	die("coprocessor error", esp, error_code);
}
    7f9c:	83 c4 0c             	add    $0xc,%esp
    7f9f:	c3                   	ret    

00007fa0 <do_reserved>:

void do_reserved(long esp, long error_code)
{
    7fa0:	83 ec 0c             	sub    $0xc,%esp
	die("reserved (15,17-47) error", esp, error_code);
    7fa3:	83 ec 04             	sub    $0x4,%esp
    7fa6:	ff 74 24 18          	pushl  0x18(%esp)
    7faa:	ff 74 24 18          	pushl  0x18(%esp)
    7fae:	68 a9 2e 02 00       	push   $0x22ea9
    7fb3:	e8 4b fb ff ff       	call   7b03 <die>
    7fb8:	83 c4 10             	add    $0x10,%esp
}
    7fbb:	90                   	nop
    7fbc:	83 c4 0c             	add    $0xc,%esp
    7fbf:	c3                   	ret    

00007fc0 <trap_init>:
// 下面是异常(陷阱)中断程序初始化子程序.设置它们的中断调用门(中断向量).
// set_trap_gate()与set_system_gate()都使用了中断描述符表IDT中的陷阱门(Trap Gate),它们之间的主要区别在于前者设置的特权级为0,
// 后者是3.因此断点陷阱中断int3,溢出中断overflow和边界出错中断bounds可以由任何程序调用.这两个函数均是嵌入式汇编宏程序,参见
// include/asm/system.h
void trap_init(void)
{
    7fc0:	53                   	push   %ebx
    7fc1:	83 ec 10             	sub    $0x10,%esp
	int i;

	set_trap_gate(0, &divide_error);							// 设置除操作出错的中断向量值.
    7fc4:	b9 b8 54 00 00       	mov    $0x54b8,%ecx
    7fc9:	bb bc 54 00 00       	mov    $0x54bc,%ebx
    7fce:	ba c7 82 00 00       	mov    $0x82c7,%edx
    7fd3:	b8 00 00 08 00       	mov    $0x80000,%eax
    7fd8:	66 89 d0             	mov    %dx,%ax
    7fdb:	66 ba 00 8f          	mov    $0x8f00,%dx
    7fdf:	89 01                	mov    %eax,(%ecx)
    7fe1:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(1, &debug);
    7fe3:	b9 c0 54 00 00       	mov    $0x54c0,%ecx
    7fe8:	bb c4 54 00 00       	mov    $0x54c4,%ebx
    7fed:	ba fc 82 00 00       	mov    $0x82fc,%edx
    7ff2:	b8 00 00 08 00       	mov    $0x80000,%eax
    7ff7:	66 89 d0             	mov    %dx,%ax
    7ffa:	66 ba 00 8f          	mov    $0x8f00,%dx
    7ffe:	89 01                	mov    %eax,(%ecx)
    8000:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(2, &nmi);
    8002:	b9 c8 54 00 00       	mov    $0x54c8,%ecx
    8007:	bb cc 54 00 00       	mov    $0x54cc,%ebx
    800c:	ba 03 83 00 00       	mov    $0x8303,%edx
    8011:	b8 00 00 08 00       	mov    $0x80000,%eax
    8016:	66 89 d0             	mov    %dx,%ax
    8019:	66 ba 00 8f          	mov    $0x8f00,%dx
    801d:	89 01                	mov    %eax,(%ecx)
    801f:	89 13                	mov    %edx,(%ebx)
	set_system_gate(3, &int3);									/* int3-5 can be called from all */
    8021:	b9 d0 54 00 00       	mov    $0x54d0,%ecx
    8026:	bb d4 54 00 00       	mov    $0x54d4,%ebx
    802b:	ba 0a 83 00 00       	mov    $0x830a,%edx
    8030:	b8 00 00 08 00       	mov    $0x80000,%eax
    8035:	66 89 d0             	mov    %dx,%ax
    8038:	66 ba 00 ef          	mov    $0xef00,%dx
    803c:	89 01                	mov    %eax,(%ecx)
    803e:	89 13                	mov    %edx,(%ebx)
	set_system_gate(4, &overflow);
    8040:	b9 d8 54 00 00       	mov    $0x54d8,%ecx
    8045:	bb dc 54 00 00       	mov    $0x54dc,%ebx
    804a:	ba 11 83 00 00       	mov    $0x8311,%edx
    804f:	b8 00 00 08 00       	mov    $0x80000,%eax
    8054:	66 89 d0             	mov    %dx,%ax
    8057:	66 ba 00 ef          	mov    $0xef00,%dx
    805b:	89 01                	mov    %eax,(%ecx)
    805d:	89 13                	mov    %edx,(%ebx)
	set_system_gate(5, &bounds);
    805f:	b9 e0 54 00 00       	mov    $0x54e0,%ecx
    8064:	bb e4 54 00 00       	mov    $0x54e4,%ebx
    8069:	ba 18 83 00 00       	mov    $0x8318,%edx
    806e:	b8 00 00 08 00       	mov    $0x80000,%eax
    8073:	66 89 d0             	mov    %dx,%ax
    8076:	66 ba 00 ef          	mov    $0xef00,%dx
    807a:	89 01                	mov    %eax,(%ecx)
    807c:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(6, &invalid_op);
    807e:	b9 e8 54 00 00       	mov    $0x54e8,%ecx
    8083:	bb ec 54 00 00       	mov    $0x54ec,%ebx
    8088:	ba 1f 83 00 00       	mov    $0x831f,%edx
    808d:	b8 00 00 08 00       	mov    $0x80000,%eax
    8092:	66 89 d0             	mov    %dx,%ax
    8095:	66 ba 00 8f          	mov    $0x8f00,%dx
    8099:	89 01                	mov    %eax,(%ecx)
    809b:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(7, &device_not_available);					// 函数未实现
    809d:	b9 f0 54 00 00       	mov    $0x54f0,%ecx
    80a2:	bb f4 54 00 00       	mov    $0x54f4,%ebx
    80a7:	ba e0 79 00 00       	mov    $0x79e0,%edx
    80ac:	b8 00 00 08 00       	mov    $0x80000,%eax
    80b1:	66 89 d0             	mov    %dx,%ax
    80b4:	66 ba 00 8f          	mov    $0x8f00,%dx
    80b8:	89 01                	mov    %eax,(%ecx)
    80ba:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(8, &double_fault);
    80bc:	b9 f8 54 00 00       	mov    $0x54f8,%ecx
    80c1:	bb fc 54 00 00       	mov    $0x54fc,%ebx
    80c6:	ba 49 83 00 00       	mov    $0x8349,%edx
    80cb:	b8 00 00 08 00       	mov    $0x80000,%eax
    80d0:	66 89 d0             	mov    %dx,%ax
    80d3:	66 ba 00 8f          	mov    $0x8f00,%dx
    80d7:	89 01                	mov    %eax,(%ecx)
    80d9:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(9, &coprocessor_segment_overrun);
    80db:	b9 00 55 00 00       	mov    $0x5500,%ecx
    80e0:	bb 04 55 00 00       	mov    $0x5504,%ebx
    80e5:	ba 26 83 00 00       	mov    $0x8326,%edx
    80ea:	b8 00 00 08 00       	mov    $0x80000,%eax
    80ef:	66 89 d0             	mov    %dx,%ax
    80f2:	66 ba 00 8f          	mov    $0x8f00,%dx
    80f6:	89 01                	mov    %eax,(%ecx)
    80f8:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(10, &invalid_TSS);
    80fa:	b9 08 55 00 00       	mov    $0x5508,%ecx
    80ff:	bb 0c 55 00 00       	mov    $0x550c,%ebx
    8104:	ba 80 83 00 00       	mov    $0x8380,%edx
    8109:	b8 00 00 08 00       	mov    $0x80000,%eax
    810e:	66 89 d0             	mov    %dx,%ax
    8111:	66 ba 00 8f          	mov    $0x8f00,%dx
    8115:	89 01                	mov    %eax,(%ecx)
    8117:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(11, &segment_not_present);
    8119:	b9 10 55 00 00       	mov    $0x5510,%ecx
    811e:	bb 14 55 00 00       	mov    $0x5514,%ebx
    8123:	ba 87 83 00 00       	mov    $0x8387,%edx
    8128:	b8 00 00 08 00       	mov    $0x80000,%eax
    812d:	66 89 d0             	mov    %dx,%ax
    8130:	66 ba 00 8f          	mov    $0x8f00,%dx
    8134:	89 01                	mov    %eax,(%ecx)
    8136:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(12, &stack_segment);
    8138:	b9 18 55 00 00       	mov    $0x5518,%ecx
    813d:	bb 1c 55 00 00       	mov    $0x551c,%ebx
    8142:	ba 8e 83 00 00       	mov    $0x838e,%edx
    8147:	b8 00 00 08 00       	mov    $0x80000,%eax
    814c:	66 89 d0             	mov    %dx,%ax
    814f:	66 ba 00 8f          	mov    $0x8f00,%dx
    8153:	89 01                	mov    %eax,(%ecx)
    8155:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(13, &general_protection);
    8157:	b9 20 55 00 00       	mov    $0x5520,%ecx
    815c:	bb 24 55 00 00       	mov    $0x5524,%ebx
    8161:	ba 95 83 00 00       	mov    $0x8395,%edx
    8166:	b8 00 00 08 00       	mov    $0x80000,%eax
    816b:	66 89 d0             	mov    %dx,%ax
    816e:	66 ba 00 8f          	mov    $0x8f00,%dx
    8172:	89 01                	mov    %eax,(%ecx)
    8174:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(14, &page_fault);
    8176:	b9 28 55 00 00       	mov    $0x5528,%ecx
    817b:	bb 2c 55 00 00       	mov    $0x552c,%ebx
    8180:	ba 30 d3 00 00       	mov    $0xd330,%edx
    8185:	b8 00 00 08 00       	mov    $0x80000,%eax
    818a:	66 89 d0             	mov    %dx,%ax
    818d:	66 ba 00 8f          	mov    $0x8f00,%dx
    8191:	89 01                	mov    %eax,(%ecx)
    8193:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(15, &reserved);
    8195:	b9 30 55 00 00       	mov    $0x5530,%ecx
    819a:	bb 34 55 00 00       	mov    $0x5534,%ebx
    819f:	ba 2d 83 00 00       	mov    $0x832d,%edx
    81a4:	b8 00 00 08 00       	mov    $0x80000,%eax
    81a9:	66 89 d0             	mov    %dx,%ax
    81ac:	66 ba 00 8f          	mov    $0x8f00,%dx
    81b0:	89 01                	mov    %eax,(%ecx)
    81b2:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(16, &coprocessor_error);						// 函数未实现
    81b4:	b9 38 55 00 00       	mov    $0x5538,%ecx
    81b9:	bb 3c 55 00 00       	mov    $0x553c,%ebx
    81be:	ba bc 79 00 00       	mov    $0x79bc,%edx
    81c3:	b8 00 00 08 00       	mov    $0x80000,%eax
    81c8:	66 89 d0             	mov    %dx,%ax
    81cb:	66 ba 00 8f          	mov    $0x8f00,%dx
    81cf:	89 01                	mov    %eax,(%ecx)
    81d1:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(17, &alignment_check);
    81d3:	b9 40 55 00 00       	mov    $0x5540,%ecx
    81d8:	bb 44 55 00 00       	mov    $0x5544,%ebx
    81dd:	ba 9c 83 00 00       	mov    $0x839c,%edx
    81e2:	b8 00 00 08 00       	mov    $0x80000,%eax
    81e7:	66 89 d0             	mov    %dx,%ax
    81ea:	66 ba 00 8f          	mov    $0x8f00,%dx
    81ee:	89 01                	mov    %eax,(%ecx)
    81f0:	89 13                	mov    %edx,(%ebx)
	// 下面把int17-47的陷阱门先均设置为reserved,以后各硬件初始化时会重新设置自己的陷阱门.
	for (i = 18; i < 48; i++)
    81f2:	c7 44 24 0c 12 00 00 	movl   $0x12,0xc(%esp)
    81f9:	00 
    81fa:	eb 36                	jmp    8232 <trap_init+0x272>
		set_trap_gate(i, &reserved);
    81fc:	8b 44 24 0c          	mov    0xc(%esp),%eax
    8200:	c1 e0 03             	shl    $0x3,%eax
    8203:	8d 88 b8 54 00 00    	lea    0x54b8(%eax),%ecx
    8209:	8b 44 24 0c          	mov    0xc(%esp),%eax
    820d:	c1 e0 03             	shl    $0x3,%eax
    8210:	05 b8 54 00 00       	add    $0x54b8,%eax
    8215:	8d 58 04             	lea    0x4(%eax),%ebx
    8218:	ba 2d 83 00 00       	mov    $0x832d,%edx
    821d:	b8 00 00 08 00       	mov    $0x80000,%eax
    8222:	66 89 d0             	mov    %dx,%ax
    8225:	66 ba 00 8f          	mov    $0x8f00,%dx
    8229:	89 01                	mov    %eax,(%ecx)
    822b:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(14, &page_fault);
	set_trap_gate(15, &reserved);
	set_trap_gate(16, &coprocessor_error);						// 函数未实现
	set_trap_gate(17, &alignment_check);
	// 下面把int17-47的陷阱门先均设置为reserved,以后各硬件初始化时会重新设置自己的陷阱门.
	for (i = 18; i < 48; i++)
    822d:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    8232:	83 7c 24 0c 2f       	cmpl   $0x2f,0xc(%esp)
    8237:	7e c3                	jle    81fc <trap_init+0x23c>
		set_trap_gate(i, &reserved);
	// 设置协处理器中断0x2d(45)陷阱门描述符,并允许其产生中断请求.设置并行口中断描述符.
	set_trap_gate(45, &irq13);
    8239:	b9 20 56 00 00       	mov    $0x5620,%ecx
    823e:	bb 24 56 00 00       	mov    $0x5624,%ebx
    8243:	ba 34 83 00 00       	mov    $0x8334,%edx
    8248:	b8 00 00 08 00       	mov    $0x80000,%eax
    824d:	66 89 d0             	mov    %dx,%ax
    8250:	66 ba 00 8f          	mov    $0x8f00,%dx
    8254:	89 01                	mov    %eax,(%ecx)
    8256:	89 13                	mov    %edx,(%ebx)
	outb_p(inb_p(0x21)&0xfb, 0x21);								// 允许8259A主芯片的IRQ2中断请求(连接从芯片)
    8258:	b8 21 00 00 00       	mov    $0x21,%eax
    825d:	89 c2                	mov    %eax,%edx
    825f:	ec                   	in     (%dx),%al
    8260:	eb 00                	jmp    8262 <trap_init+0x2a2>
    8262:	eb 00                	jmp    8264 <trap_init+0x2a4>
    8264:	88 44 24 0b          	mov    %al,0xb(%esp)
    8268:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
    826d:	0f b6 c0             	movzbl %al,%eax
    8270:	25 fb 00 00 00       	and    $0xfb,%eax
    8275:	ba 21 00 00 00       	mov    $0x21,%edx
    827a:	ee                   	out    %al,(%dx)
    827b:	eb 00                	jmp    827d <trap_init+0x2bd>
    827d:	eb 00                	jmp    827f <trap_init+0x2bf>
	outb(inb_p(0xA1)&0xdf, 0xA1);								// 允许8259A从芯片的IRQ13中断请求(协处理器中断)
    827f:	b8 a1 00 00 00       	mov    $0xa1,%eax
    8284:	89 c2                	mov    %eax,%edx
    8286:	ec                   	in     (%dx),%al
    8287:	eb 00                	jmp    8289 <trap_init+0x2c9>
    8289:	eb 00                	jmp    828b <trap_init+0x2cb>
    828b:	88 44 24 0a          	mov    %al,0xa(%esp)
    828f:	0f b6 44 24 0a       	movzbl 0xa(%esp),%eax
    8294:	0f b6 c0             	movzbl %al,%eax
    8297:	25 df 00 00 00       	and    $0xdf,%eax
    829c:	ba a1 00 00 00       	mov    $0xa1,%edx
    82a1:	ee                   	out    %al,(%dx)
	set_trap_gate(39, &parallel_interrupt);						// 设置并行口1的中断0x27陷阱门描述符.
    82a2:	b9 f0 55 00 00       	mov    $0x55f0,%ecx
    82a7:	bb f4 55 00 00       	mov    $0x55f4,%ebx
    82ac:	ba fc 7a 00 00       	mov    $0x7afc,%edx
    82b1:	b8 00 00 08 00       	mov    $0x80000,%eax
    82b6:	66 89 d0             	mov    %dx,%ax
    82b9:	66 ba 00 8f          	mov    $0x8f00,%dx
    82bd:	89 01                	mov    %eax,(%ecx)
    82bf:	89 13                	mov    %edx,(%ebx)
}
    82c1:	90                   	nop
    82c2:	83 c4 10             	add    $0x10,%esp
    82c5:	5b                   	pop    %ebx
    82c6:	c3                   	ret    

000082c7 <divide_error>:
    82c7:	68 71 7d 00 00       	push   $0x7d71

000082cc <no_error_code>:
    82cc:	87 04 24             	xchg   %eax,(%esp)
    82cf:	53                   	push   %ebx
    82d0:	51                   	push   %ecx
    82d1:	52                   	push   %edx
    82d2:	57                   	push   %edi
    82d3:	56                   	push   %esi
    82d4:	55                   	push   %ebp
    82d5:	1e                   	push   %ds
    82d6:	06                   	push   %es
    82d7:	0f a0                	push   %fs
    82d9:	6a 00                	push   $0x0
    82db:	8d 54 24 2c          	lea    0x2c(%esp),%edx
    82df:	52                   	push   %edx
    82e0:	ba 10 00 00 00       	mov    $0x10,%edx
    82e5:	8e da                	mov    %edx,%ds
    82e7:	8e c2                	mov    %edx,%es
    82e9:	8e e2                	mov    %edx,%fs
    82eb:	ff d0                	call   *%eax
    82ed:	83 c4 08             	add    $0x8,%esp
    82f0:	0f a1                	pop    %fs
    82f2:	07                   	pop    %es
    82f3:	1f                   	pop    %ds
    82f4:	5d                   	pop    %ebp
    82f5:	5e                   	pop    %esi
    82f6:	5f                   	pop    %edi
    82f7:	5a                   	pop    %edx
    82f8:	59                   	pop    %ecx
    82f9:	5b                   	pop    %ebx
    82fa:	58                   	pop    %eax
    82fb:	cf                   	iret   

000082fc <debug>:
    82fc:	68 91 7d 00 00       	push   $0x7d91
    8301:	eb c9                	jmp    82cc <no_error_code>

00008303 <nmi>:
    8303:	68 2f 7e 00 00       	push   $0x7e2f
    8308:	eb c2                	jmp    82cc <no_error_code>

0000830a <int3>:
    830a:	68 91 7d 00 00       	push   $0x7d91
    830f:	eb bb                	jmp    82cc <no_error_code>

00008311 <overflow>:
    8311:	68 6f 7e 00 00       	push   $0x7e6f
    8316:	eb b4                	jmp    82cc <no_error_code>

00008318 <bounds>:
    8318:	68 8f 7e 00 00       	push   $0x7e8f
    831d:	eb ad                	jmp    82cc <no_error_code>

0000831f <invalid_op>:
    831f:	68 af 7e 00 00       	push   $0x7eaf
    8324:	eb a6                	jmp    82cc <no_error_code>

00008326 <coprocessor_segment_overrun>:
    8326:	68 ef 7e 00 00       	push   $0x7eef
    832b:	eb 9f                	jmp    82cc <no_error_code>

0000832d <reserved>:
    832d:	68 a0 7f 00 00       	push   $0x7fa0
    8332:	eb 98                	jmp    82cc <no_error_code>

00008334 <irq13>:
    8334:	50                   	push   %eax
    8335:	30 c0                	xor    %al,%al
    8337:	e6 f0                	out    %al,$0xf0
    8339:	b0 20                	mov    $0x20,%al
    833b:	e6 20                	out    %al,$0x20
    833d:	eb 00                	jmp    833f <irq13+0xb>
    833f:	eb 00                	jmp    8341 <irq13+0xd>
    8341:	e6 a0                	out    %al,$0xa0
    8343:	58                   	pop    %eax
    8344:	e9 73 f6 ff ff       	jmp    79bc <coprocessor_error>

00008349 <double_fault>:
    8349:	68 11 7d 00 00       	push   $0x7d11

0000834e <error_code>:
    834e:	87 44 24 04          	xchg   %eax,0x4(%esp)
    8352:	87 1c 24             	xchg   %ebx,(%esp)
    8355:	51                   	push   %ecx
    8356:	52                   	push   %edx
    8357:	57                   	push   %edi
    8358:	56                   	push   %esi
    8359:	55                   	push   %ebp
    835a:	1e                   	push   %ds
    835b:	06                   	push   %es
    835c:	0f a0                	push   %fs
    835e:	50                   	push   %eax
    835f:	8d 44 24 2c          	lea    0x2c(%esp),%eax
    8363:	50                   	push   %eax
    8364:	b8 10 00 00 00       	mov    $0x10,%eax
    8369:	8e d8                	mov    %eax,%ds
    836b:	8e c0                	mov    %eax,%es
    836d:	8e e0                	mov    %eax,%fs
    836f:	ff d3                	call   *%ebx
    8371:	83 c4 08             	add    $0x8,%esp
    8374:	0f a1                	pop    %fs
    8376:	07                   	pop    %es
    8377:	1f                   	pop    %ds
    8378:	5d                   	pop    %ebp
    8379:	5e                   	pop    %esi
    837a:	5f                   	pop    %edi
    837b:	5a                   	pop    %edx
    837c:	59                   	pop    %ecx
    837d:	5b                   	pop    %ebx
    837e:	58                   	pop    %eax
    837f:	cf                   	iret   

00008380 <invalid_TSS>:
    8380:	68 0f 7f 00 00       	push   $0x7f0f
    8385:	eb c7                	jmp    834e <error_code>

00008387 <segment_not_present>:
    8387:	68 2f 7f 00 00       	push   $0x7f2f
    838c:	eb c0                	jmp    834e <error_code>

0000838e <stack_segment>:
    838e:	68 4f 7f 00 00       	push   $0x7f4f
    8393:	eb b9                	jmp    834e <error_code>

00008395 <general_protection>:
    8395:	68 31 7d 00 00       	push   $0x7d31
    839a:	eb b2                	jmp    834e <error_code>

0000839c <alignment_check>:
    839c:	68 51 7d 00 00       	push   $0x7d51
    83a1:	eb ab                	jmp    834e <error_code>

000083a3 <verify_area>:
// 可以通过设置该标志来达到使用本函数同样的目的.该函数对当前进程逻辑地址从addr到addr + size这一段范围以页为单位执行写操作前
// 的检测操作.由于检测判断是以页面为单位进行操作,因此程序首先需要找出addr所在页面开始地址start,然后start加上进程数据段基址,
// 使这个start变换成CPU 4GB线性空间中的地址.最后循环调用write_verify()对指定大小的内存空间进行写前验证.若页面是只读的,
// 则执行共享检验和复制页面操作(写时复制).
void verify_area(void * addr, int size)
{
    83a3:	53                   	push   %ebx
    83a4:	83 ec 18             	sub    $0x18,%esp
	unsigned long start;

	// 首先将起始地址start调整为其所在页的左边界开始位置,同时相应地调整验证区域大小.下句中的start & 0xfff用来获得指定起始位置addr
	// (也即start)在所在页面中的偏移值,原验证范围size加上这个偏移值即扩展成以addr所在页面起始位置开始的范围值.因此在30行上也需要
	// 把验证开始位置start调整成页面边界值.
	start = (unsigned long) addr;
    83a7:	8b 44 24 20          	mov    0x20(%esp),%eax
    83ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
	size += start & 0xfff;
    83af:	8b 44 24 0c          	mov    0xc(%esp),%eax
    83b3:	25 ff 0f 00 00       	and    $0xfff,%eax
    83b8:	89 c2                	mov    %eax,%edx
    83ba:	8b 44 24 24          	mov    0x24(%esp),%eax
    83be:	01 d0                	add    %edx,%eax
    83c0:	89 44 24 24          	mov    %eax,0x24(%esp)
	start &= 0xfffff000;					// 此时start是当前进程空间中的逻辑地址.
    83c4:	81 64 24 0c 00 f0 ff 	andl   $0xfffff000,0xc(%esp)
    83cb:	ff 
	// 下面把start加上进程数据段在线性地址空间中的起始基址,变成系统整个线性空间中的地址位置.对于Linux0.1x内核,其数据段和代码段在
	// 线性地址空间中的基址和限长均相同.然后循环进行写页面验证.若页面不可写,则复制页面.(mm/memory.c)
	start += get_base(current->ldt[2]);
    83cc:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    83d1:	05 a8 03 00 00       	add    $0x3a8,%eax
    83d6:	83 c0 02             	add    $0x2,%eax
    83d9:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    83df:	81 c2 a8 03 00 00    	add    $0x3a8,%edx
    83e5:	8d 5a 04             	lea    0x4(%edx),%ebx
    83e8:	8b 0d a0 e1 02 00    	mov    0x2e1a0,%ecx
    83ee:	81 c1 a8 03 00 00    	add    $0x3a8,%ecx
    83f4:	83 c1 07             	add    $0x7,%ecx
    83f7:	8a 31                	mov    (%ecx),%dh
    83f9:	8a 13                	mov    (%ebx),%dl
    83fb:	c1 e2 10             	shl    $0x10,%edx
    83fe:	66 8b 10             	mov    (%eax),%dx
    8401:	89 d0                	mov    %edx,%eax
    8403:	89 44 24 08          	mov    %eax,0x8(%esp)
    8407:	8b 44 24 08          	mov    0x8(%esp),%eax
    840b:	01 44 24 0c          	add    %eax,0xc(%esp)
	while (size > 0) {
    840f:	eb 1f                	jmp    8430 <verify_area+0x8d>
		size -= 4096;
    8411:	81 6c 24 24 00 10 00 	subl   $0x1000,0x24(%esp)
    8418:	00 
		write_verify(start);				// include/linux/sched.h
    8419:	83 ec 0c             	sub    $0xc,%esp
    841c:	ff 74 24 18          	pushl  0x18(%esp)
    8420:	e8 8d 3f 00 00       	call   c3b2 <write_verify>
    8425:	83 c4 10             	add    $0x10,%esp
		start += 4096;
    8428:	81 44 24 0c 00 10 00 	addl   $0x1000,0xc(%esp)
    842f:	00 
	size += start & 0xfff;
	start &= 0xfffff000;					// 此时start是当前进程空间中的逻辑地址.
	// 下面把start加上进程数据段在线性地址空间中的起始基址,变成系统整个线性空间中的地址位置.对于Linux0.1x内核,其数据段和代码段在
	// 线性地址空间中的基址和限长均相同.然后循环进行写页面验证.若页面不可写,则复制页面.(mm/memory.c)
	start += get_base(current->ldt[2]);
	while (size > 0) {
    8430:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
    8435:	7f da                	jg     8411 <verify_area+0x6e>
		size -= 4096;
		write_verify(start);				// include/linux/sched.h
		start += 4096;
	}
}
    8437:	90                   	nop
    8438:	83 c4 18             	add    $0x18,%esp
    843b:	5b                   	pop    %ebx
    843c:	c3                   	ret    

0000843d <copy_mem>:
// 复制内存页表.
// 参数nr是新任务号;p是新任务数据结构指针.该函数为新任务在线性地址空间中设置代码段和数据段基址,限长,并复制页表.由于Linux系统采用写时
// 复制(copy on write)技术,因此这里仅为新进程设置自己的页目录表项和页表项,而没有实际为新进程分配物理内存页面.此时新进程与其父进程
// 共享所有内存页面.操作成功返回0,否则返回出错号.
int copy_mem(int nr, struct task_struct * p)
{
    843d:	56                   	push   %esi
    843e:	53                   	push   %ebx
    843f:	83 ec 34             	sub    $0x34,%esp

	// 首先取当前进程局部描述符表中代码段描述符和数据段描述符项中的段限长(字节数).
	// 0x0f是代码段选择符;0x17是数据段选择符.然后取当前进程代码段和数据段的线性地址空间中的基地址.由于Linux0.12内核还不支持代码和数据段分立的情况,
	// 因此这里需要检查代码段和数据段基址是否都相同,并且要求数据段的长度至少不小于代码段的长度,否则内核显示出错信息,并停止运行.
	// get_limit()和get_base()定义在include/linux/sched.h.
	code_limit = get_limit(0x0f);
    8442:	b8 0f 00 00 00       	mov    $0xf,%eax
    8447:	0f 03 c0             	lsl    %ax,%eax
    844a:	40                   	inc    %eax
    844b:	89 44 24 2c          	mov    %eax,0x2c(%esp)
    844f:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    8453:	89 44 24 28          	mov    %eax,0x28(%esp)
	data_limit = get_limit(0x17);
    8457:	b8 17 00 00 00       	mov    $0x17,%eax
    845c:	0f 03 c0             	lsl    %ax,%eax
    845f:	40                   	inc    %eax
    8460:	89 44 24 24          	mov    %eax,0x24(%esp)
    8464:	8b 44 24 24          	mov    0x24(%esp),%eax
    8468:	89 44 24 20          	mov    %eax,0x20(%esp)
	old_code_base = get_base(current->ldt[1]);
    846c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    8471:	05 a0 03 00 00       	add    $0x3a0,%eax
    8476:	83 c0 02             	add    $0x2,%eax
    8479:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    847f:	81 c2 a0 03 00 00    	add    $0x3a0,%edx
    8485:	8d 5a 04             	lea    0x4(%edx),%ebx
    8488:	8b 0d a0 e1 02 00    	mov    0x2e1a0,%ecx
    848e:	81 c1 a0 03 00 00    	add    $0x3a0,%ecx
    8494:	83 c1 07             	add    $0x7,%ecx
    8497:	8a 31                	mov    (%ecx),%dh
    8499:	8a 13                	mov    (%ebx),%dl
    849b:	c1 e2 10             	shl    $0x10,%edx
    849e:	66 8b 10             	mov    (%eax),%dx
    84a1:	89 d0                	mov    %edx,%eax
    84a3:	89 44 24 1c          	mov    %eax,0x1c(%esp)
    84a7:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    84ab:	89 44 24 18          	mov    %eax,0x18(%esp)
	old_data_base = get_base(current->ldt[2]);
    84af:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    84b4:	05 a8 03 00 00       	add    $0x3a8,%eax
    84b9:	83 c0 02             	add    $0x2,%eax
    84bc:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    84c2:	81 c2 a8 03 00 00    	add    $0x3a8,%edx
    84c8:	8d 72 04             	lea    0x4(%edx),%esi
    84cb:	8b 0d a0 e1 02 00    	mov    0x2e1a0,%ecx
    84d1:	81 c1 a8 03 00 00    	add    $0x3a8,%ecx
    84d7:	83 c1 07             	add    $0x7,%ecx
    84da:	8a 31                	mov    (%ecx),%dh
    84dc:	8a 16                	mov    (%esi),%dl
    84de:	c1 e2 10             	shl    $0x10,%edx
    84e1:	66 8b 10             	mov    (%eax),%dx
    84e4:	89 d0                	mov    %edx,%eax
    84e6:	89 44 24 14          	mov    %eax,0x14(%esp)
    84ea:	8b 44 24 14          	mov    0x14(%esp),%eax
    84ee:	89 44 24 10          	mov    %eax,0x10(%esp)
	if (old_data_base != old_code_base)
    84f2:	8b 44 24 10          	mov    0x10(%esp),%eax
    84f6:	3b 44 24 18          	cmp    0x18(%esp),%eax
    84fa:	74 10                	je     850c <copy_mem+0xcf>
		panic("We don't support separate I&D");
    84fc:	83 ec 0c             	sub    $0xc,%esp
    84ff:	68 c4 2e 02 00       	push   $0x22ec4
    8504:	e8 ff 06 00 00       	call   8c08 <panic>
    8509:	83 c4 10             	add    $0x10,%esp
	if (data_limit < code_limit)
    850c:	8b 44 24 20          	mov    0x20(%esp),%eax
    8510:	3b 44 24 28          	cmp    0x28(%esp),%eax
    8514:	73 10                	jae    8526 <copy_mem+0xe9>
		panic("Bad data_limit");
    8516:	83 ec 0c             	sub    $0xc,%esp
    8519:	68 e2 2e 02 00       	push   $0x22ee2
    851e:	e8 e5 06 00 00       	call   8c08 <panic>
    8523:	83 c4 10             	add    $0x10,%esp
	// 然后设置创建中的新进程在线性地址空间中的基地址等于(64MB*其任务号),并用该值设置新进程局部描述符表中段描述符中的基地址.接着设置新进程的页目录
	// 表项和页表项,即复制当前进程(父进程)的页目录表项和页表项.此时子进程共享父进程的内存页面.
	// 正常情况下copy_page_tables()返回0,否则表示出错,则释放刚申请的页表项.
	new_data_base = new_code_base = nr * TASK_SIZE;
    8526:	8b 44 24 40          	mov    0x40(%esp),%eax
    852a:	c1 e0 1a             	shl    $0x1a,%eax
    852d:	89 44 24 0c          	mov    %eax,0xc(%esp)
    8531:	8b 44 24 0c          	mov    0xc(%esp),%eax
    8535:	89 44 24 08          	mov    %eax,0x8(%esp)
	p->start_code = new_code_base;
    8539:	8b 44 24 44          	mov    0x44(%esp),%eax
    853d:	8b 54 24 0c          	mov    0xc(%esp),%edx
    8541:	89 90 18 02 00 00    	mov    %edx,0x218(%eax)
	set_base(p->ldt[1], new_code_base);
    8547:	8b 44 24 44          	mov    0x44(%esp),%eax
    854b:	05 a0 03 00 00       	add    $0x3a0,%eax
    8550:	8d 48 02             	lea    0x2(%eax),%ecx
    8553:	8b 44 24 44          	mov    0x44(%esp),%eax
    8557:	05 a0 03 00 00       	add    $0x3a0,%eax
    855c:	8d 58 04             	lea    0x4(%eax),%ebx
    855f:	8b 44 24 44          	mov    0x44(%esp),%eax
    8563:	05 a0 03 00 00       	add    $0x3a0,%eax
    8568:	8d 70 07             	lea    0x7(%eax),%esi
    856b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    856f:	89 c2                	mov    %eax,%edx
    8571:	66 89 11             	mov    %dx,(%ecx)
    8574:	c1 ca 10             	ror    $0x10,%edx
    8577:	88 13                	mov    %dl,(%ebx)
    8579:	88 36                	mov    %dh,(%esi)
    857b:	89 d0                	mov    %edx,%eax
    857d:	89 44 24 04          	mov    %eax,0x4(%esp)
	set_base(p->ldt[2], new_data_base);
    8581:	8b 44 24 44          	mov    0x44(%esp),%eax
    8585:	05 a8 03 00 00       	add    $0x3a8,%eax
    858a:	8d 48 02             	lea    0x2(%eax),%ecx
    858d:	8b 44 24 44          	mov    0x44(%esp),%eax
    8591:	05 a8 03 00 00       	add    $0x3a8,%eax
    8596:	8d 58 04             	lea    0x4(%eax),%ebx
    8599:	8b 44 24 44          	mov    0x44(%esp),%eax
    859d:	05 a8 03 00 00       	add    $0x3a8,%eax
    85a2:	8d 70 07             	lea    0x7(%eax),%esi
    85a5:	8b 44 24 08          	mov    0x8(%esp),%eax
    85a9:	89 c2                	mov    %eax,%edx
    85ab:	66 89 11             	mov    %dx,(%ecx)
    85ae:	c1 ca 10             	ror    $0x10,%edx
    85b1:	88 13                	mov    %dl,(%ebx)
    85b3:	88 36                	mov    %dh,(%esi)
    85b5:	89 d0                	mov    %edx,%eax
    85b7:	89 04 24             	mov    %eax,(%esp)
	if (copy_page_tables(old_data_base, new_data_base, data_limit)) {
    85ba:	8b 44 24 20          	mov    0x20(%esp),%eax
    85be:	83 ec 04             	sub    $0x4,%esp
    85c1:	50                   	push   %eax
    85c2:	ff 74 24 10          	pushl  0x10(%esp)
    85c6:	ff 74 24 1c          	pushl  0x1c(%esp)
    85ca:	e8 df 38 00 00       	call   beae <copy_page_tables>
    85cf:	83 c4 10             	add    $0x10,%esp
    85d2:	85 c0                	test   %eax,%eax
    85d4:	74 1a                	je     85f0 <copy_mem+0x1b3>
		free_page_tables(new_data_base, data_limit);
    85d6:	83 ec 08             	sub    $0x8,%esp
    85d9:	ff 74 24 28          	pushl  0x28(%esp)
    85dd:	ff 74 24 14          	pushl  0x14(%esp)
    85e1:	e8 93 37 00 00       	call   bd79 <free_page_tables>
    85e6:	83 c4 10             	add    $0x10,%esp
		return -ENOMEM;
    85e9:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
    85ee:	eb 05                	jmp    85f5 <copy_mem+0x1b8>
	}
	return 0;
    85f0:	b8 00 00 00 00       	mov    $0x0,%eax
}
    85f5:	83 c4 34             	add    $0x34,%esp
    85f8:	5b                   	pop    %ebx
    85f9:	5e                   	pop    %esi
    85fa:	c3                   	ret    

000085fb <copy_process>:
// 其中参数nr是调用find_empty_process()分配的任务数组项号.
int copy_process(int nr, long ebp, long edi, long esi, long gs, long none,
		long ebx, long ecx, long edx, long orig_eax,
		long fs, long es, long ds,
		long eip, long cs, long eflags, long esp, long ss)
{
    85fb:	55                   	push   %ebp
    85fc:	57                   	push   %edi
    85fd:	56                   	push   %esi
    85fe:	53                   	push   %ebx
    85ff:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	struct file *f;

	// 首先为新任务数据结构分配内存.如果内存分配出错,则返回出错码并退出.然后将新任务结构指针放入任务数组的nr项中.其中nr为任务号,由前面
	// find_empty_process()返回.接着把当前进程任务结构复制到刚申请到的内存页面p开始处.
	p = (struct task_struct *) get_free_page();
    8602:	e8 87 4a 00 00       	call   d08e <get_free_page>
    8607:	89 44 24 08          	mov    %eax,0x8(%esp)
	if (!p)
    860b:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    8610:	75 0a                	jne    861c <copy_process+0x21>
		return -EAGAIN;
    8612:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
    8617:	e9 34 05 00 00       	jmp    8b50 <copy_process+0x555>
	task[nr] = p;
    861c:	8b 44 24 30          	mov    0x30(%esp),%eax
    8620:	8b 54 24 08          	mov    0x8(%esp),%edx
    8624:	89 14 85 c0 e1 02 00 	mov    %edx,0x2e1c0(,%eax,4)
	*p = *current;							/* NOTE! this doesn't copy the supervisor stack */	/* 注意!这样不会复制超级用户堆栈(只复制进程结构) */
    862b:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    8630:	8b 54 24 08          	mov    0x8(%esp),%edx
    8634:	89 c3                	mov    %eax,%ebx
    8636:	b8 21 01 00 00       	mov    $0x121,%eax
    863b:	89 d7                	mov    %edx,%edi
    863d:	89 de                	mov    %ebx,%esi
    863f:	89 c1                	mov    %eax,%ecx
    8641:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	//	memcpy(p, current, sizeof(struct task_struct));
	// 随后对复制来的进程结构内容进行一些修改,作为新进程的任务结构.先将新进程的状态置为不可中断等待状态,以防止内核调试其执行.然后设置新进程
	// 的进程号pid,并初始化进程运行时间片值等于其priorty值(一般为16个嘀嗒).接着复位新进程的信号位图,报警定时值,会话(session)领导标志
	// leader,进程及其子进程在内核和用户态运行时间统计值,还设置进程开始运行的系统时间start_time.
	p->state = TASK_UNINTERRUPTIBLE;
    8643:	8b 44 24 08          	mov    0x8(%esp),%eax
    8647:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
	p->pid = last_pid;						// 新进程号.也由find_empty_process()得到.
    864d:	8b 15 48 ee 02 00    	mov    0x2ee48,%edx
    8653:	8b 44 24 08          	mov    0x8(%esp),%eax
    8657:	89 90 2c 02 00 00    	mov    %edx,0x22c(%eax)
	p->counter = p->priority;				// 运行时间片值(嘀嗒数).
    865d:	8b 44 24 08          	mov    0x8(%esp),%eax
    8661:	8b 50 08             	mov    0x8(%eax),%edx
    8664:	8b 44 24 08          	mov    0x8(%esp),%eax
    8668:	89 50 04             	mov    %edx,0x4(%eax)
	p->signal = 0;							// 信号位图.
    866b:	8b 44 24 08          	mov    0x8(%esp),%eax
    866f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	p->alarm = 0;							// 报警定时值(嘀嗒数).
    8676:	8b 44 24 08          	mov    0x8(%esp),%eax
    867a:	c7 80 dc 02 00 00 00 	movl   $0x0,0x2dc(%eax)
    8681:	00 00 00 
	p->leader = 0;							/* process leadership doesn't inherit */	/* 进程的领导权是不能继承的 */
    8684:	8b 44 24 08          	mov    0x8(%esp),%eax
    8688:	c7 80 38 02 00 00 00 	movl   $0x0,0x238(%eax)
    868f:	00 00 00 
	p->utime = p->stime = 0;				// 用户态时间和核心态运行时间.
    8692:	8b 44 24 08          	mov    0x8(%esp),%eax
    8696:	c7 80 e4 02 00 00 00 	movl   $0x0,0x2e4(%eax)
    869d:	00 00 00 
    86a0:	8b 44 24 08          	mov    0x8(%esp),%eax
    86a4:	8b 90 e4 02 00 00    	mov    0x2e4(%eax),%edx
    86aa:	8b 44 24 08          	mov    0x8(%esp),%eax
    86ae:	89 90 e0 02 00 00    	mov    %edx,0x2e0(%eax)
	p->cutime = p->cstime = 0;				// 子进程用户态和核心态运行时间.
    86b4:	8b 44 24 08          	mov    0x8(%esp),%eax
    86b8:	c7 80 ec 02 00 00 00 	movl   $0x0,0x2ec(%eax)
    86bf:	00 00 00 
    86c2:	8b 44 24 08          	mov    0x8(%esp),%eax
    86c6:	8b 90 ec 02 00 00    	mov    0x2ec(%eax),%edx
    86cc:	8b 44 24 08          	mov    0x8(%esp),%eax
    86d0:	89 90 e8 02 00 00    	mov    %edx,0x2e8(%eax)
	p->start_time = jiffies;				// 进程开始运行时间(当前时间滴答数).
    86d6:	a1 00 eb 02 00       	mov    0x2eb00,%eax
    86db:	89 c2                	mov    %eax,%edx
    86dd:	8b 44 24 08          	mov    0x8(%esp),%eax
    86e1:	89 90 f0 02 00 00    	mov    %edx,0x2f0(%eax)
	// 再修改任务状态段TSS数据.由于系统给任务结构p分配了1页新内存,所以(PAGE_SIZE + (long) p)让esp0正好指向该页顶端.ss0:esp0用作程序在内核
	// 态执行时的栈.另外,在第3章中我们已经知道,每个任务在GDT表中都有两个段描述符,一个是任务的TSS段描述符,另一个是任务的LDT表段描述符.下面语句就是
	// 把GDT中本任务LDT段描述符的选择符保存在本任务的TSS段.当CPU执行切换任务时,会自动从TSS中把LDT段描述符的选择符加载到ldtr寄存器中.
	p->tss.back_link = 0;
    86e7:	8b 44 24 08          	mov    0x8(%esp),%eax
    86eb:	c7 80 b0 03 00 00 00 	movl   $0x0,0x3b0(%eax)
    86f2:	00 00 00 
	p->tss.esp0 = PAGE_SIZE + (long) p;		// 任务内核态栈指针.
    86f5:	8b 44 24 08          	mov    0x8(%esp),%eax
    86f9:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
    86ff:	8b 44 24 08          	mov    0x8(%esp),%eax
    8703:	89 90 b4 03 00 00    	mov    %edx,0x3b4(%eax)
	p->tss.ss0 = 0x10;              		// 内核态栈的段选择符(与内核数据段相同).
    8709:	8b 44 24 08          	mov    0x8(%esp),%eax
    870d:	c7 80 b8 03 00 00 10 	movl   $0x10,0x3b8(%eax)
    8714:	00 00 00 
	p->tss.eip = eip;						// 指令代码指针.
    8717:	8b 44 24 08          	mov    0x8(%esp),%eax
    871b:	8b 54 24 64          	mov    0x64(%esp),%edx
    871f:	89 90 d0 03 00 00    	mov    %edx,0x3d0(%eax)
	p->tss.eflags = eflags;					// 标志寄存器.
    8725:	8b 44 24 08          	mov    0x8(%esp),%eax
    8729:	8b 54 24 6c          	mov    0x6c(%esp),%edx
    872d:	89 90 d4 03 00 00    	mov    %edx,0x3d4(%eax)
	p->tss.eax = 0;							// 这是当fork()返回时新进程会返回0的原因所在.
    8733:	8b 44 24 08          	mov    0x8(%esp),%eax
    8737:	c7 80 d8 03 00 00 00 	movl   $0x0,0x3d8(%eax)
    873e:	00 00 00 
	p->tss.ecx = ecx;
    8741:	8b 44 24 08          	mov    0x8(%esp),%eax
    8745:	8b 54 24 4c          	mov    0x4c(%esp),%edx
    8749:	89 90 dc 03 00 00    	mov    %edx,0x3dc(%eax)
	p->tss.edx = edx;
    874f:	8b 44 24 08          	mov    0x8(%esp),%eax
    8753:	8b 54 24 50          	mov    0x50(%esp),%edx
    8757:	89 90 e0 03 00 00    	mov    %edx,0x3e0(%eax)
	p->tss.ebx = ebx;
    875d:	8b 44 24 08          	mov    0x8(%esp),%eax
    8761:	8b 54 24 48          	mov    0x48(%esp),%edx
    8765:	89 90 e4 03 00 00    	mov    %edx,0x3e4(%eax)
	p->tss.esp = esp;
    876b:	8b 44 24 08          	mov    0x8(%esp),%eax
    876f:	8b 54 24 70          	mov    0x70(%esp),%edx
    8773:	89 90 e8 03 00 00    	mov    %edx,0x3e8(%eax)
	p->tss.ebp = ebp;
    8779:	8b 44 24 08          	mov    0x8(%esp),%eax
    877d:	8b 54 24 34          	mov    0x34(%esp),%edx
    8781:	89 90 ec 03 00 00    	mov    %edx,0x3ec(%eax)
	p->tss.esi = esi;
    8787:	8b 44 24 08          	mov    0x8(%esp),%eax
    878b:	8b 54 24 3c          	mov    0x3c(%esp),%edx
    878f:	89 90 f0 03 00 00    	mov    %edx,0x3f0(%eax)
	p->tss.edi = edi;
    8795:	8b 44 24 08          	mov    0x8(%esp),%eax
    8799:	8b 54 24 38          	mov    0x38(%esp),%edx
    879d:	89 90 f4 03 00 00    	mov    %edx,0x3f4(%eax)
	p->tss.es = es & 0xffff;				// 段寄存器仅16位有效.
    87a3:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    87a7:	0f b7 d0             	movzwl %ax,%edx
    87aa:	8b 44 24 08          	mov    0x8(%esp),%eax
    87ae:	89 90 f8 03 00 00    	mov    %edx,0x3f8(%eax)
	p->tss.cs = cs & 0xffff;
    87b4:	8b 44 24 68          	mov    0x68(%esp),%eax
    87b8:	0f b7 d0             	movzwl %ax,%edx
    87bb:	8b 44 24 08          	mov    0x8(%esp),%eax
    87bf:	89 90 fc 03 00 00    	mov    %edx,0x3fc(%eax)
	p->tss.ss = ss & 0xffff;
    87c5:	8b 44 24 74          	mov    0x74(%esp),%eax
    87c9:	0f b7 d0             	movzwl %ax,%edx
    87cc:	8b 44 24 08          	mov    0x8(%esp),%eax
    87d0:	89 90 00 04 00 00    	mov    %edx,0x400(%eax)
	p->tss.ds = ds & 0xffff;
    87d6:	8b 44 24 60          	mov    0x60(%esp),%eax
    87da:	0f b7 d0             	movzwl %ax,%edx
    87dd:	8b 44 24 08          	mov    0x8(%esp),%eax
    87e1:	89 90 04 04 00 00    	mov    %edx,0x404(%eax)
	p->tss.fs = fs & 0xffff;
    87e7:	8b 44 24 58          	mov    0x58(%esp),%eax
    87eb:	0f b7 d0             	movzwl %ax,%edx
    87ee:	8b 44 24 08          	mov    0x8(%esp),%eax
    87f2:	89 90 08 04 00 00    	mov    %edx,0x408(%eax)
	p->tss.gs = gs & 0xffff;
    87f8:	8b 44 24 40          	mov    0x40(%esp),%eax
    87fc:	0f b7 d0             	movzwl %ax,%edx
    87ff:	8b 44 24 08          	mov    0x8(%esp),%eax
    8803:	89 90 0c 04 00 00    	mov    %edx,0x40c(%eax)
	p->tss.ldt = _LDT(nr);					// 任务局部表描述符的选择符(LDT描述符在GET中).
    8809:	8b 44 24 30          	mov    0x30(%esp),%eax
    880d:	c1 e0 04             	shl    $0x4,%eax
    8810:	83 c0 28             	add    $0x28,%eax
    8813:	89 c2                	mov    %eax,%edx
    8815:	8b 44 24 08          	mov    0x8(%esp),%eax
    8819:	89 90 10 04 00 00    	mov    %edx,0x410(%eax)
	p->tss.trace_bitmap = 0x80000000;		// (高16位有效).
    881f:	8b 44 24 08          	mov    0x8(%esp),%eax
    8823:	c7 80 14 04 00 00 00 	movl   $0x80000000,0x414(%eax)
    882a:	00 00 80 
	// 如果当前任务使用了协处理器,就保存其上下文.汇编指令clts用于清除控制寄存器CR0中的任务已交换(TS)标志.每当发生任务切换,CPU都会设置该标志.该标志用于管理
	// 数学协处理器:如果该标志置位,那么每个ESC指令都会被捕获(异常7).如果协处理器存在标志MP也同时置位的话,那么WAIT指令也会捕获.因此,如果任务切换发生在一个
	// ESC指令开始执行之后,则协处理器中的内容就可能需要在执行新的ESC指令之前保存起来.捕获处理句柄会保存协处理器的内容并复位TS标志.指令fnsave用于把协处理器的
	// 所有状态保存到目的操作数指定的内存区域中(tss.i387).
	if (last_task_used_math == current)
    882d:	8b 15 0c eb 02 00    	mov    0x2eb0c,%edx
    8833:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    8838:	39 c2                	cmp    %eax,%edx
    883a:	75 12                	jne    884e <copy_process+0x253>
		__asm__("clts ; fnsave %0 ; frstor %0"::"m" (p->tss.i387));
    883c:	8b 44 24 08          	mov    0x8(%esp),%eax
    8840:	0f 06                	clts   
    8842:	dd b0 18 04 00 00    	fnsave 0x418(%eax)
    8848:	dd a0 18 04 00 00    	frstor 0x418(%eax)
	// 接下来复制进程页表.即在线性地址空间设置新任务代码段和数据段描述符中的基址和限长,并复制页表.如果出错(返回值不是0),则复位任务数组中相应项并
	// 释放为该新任务分配的用于任务结构的内存页.
	if (copy_mem(nr, p)) {					// 返回不为0示出错.
    884e:	83 ec 08             	sub    $0x8,%esp
    8851:	ff 74 24 10          	pushl  0x10(%esp)
    8855:	ff 74 24 3c          	pushl  0x3c(%esp)
    8859:	e8 df fb ff ff       	call   843d <copy_mem>
    885e:	83 c4 10             	add    $0x10,%esp
    8861:	85 c0                	test   %eax,%eax
    8863:	74 29                	je     888e <copy_process+0x293>
		task[nr] = NULL;
    8865:	8b 44 24 30          	mov    0x30(%esp),%eax
    8869:	c7 04 85 c0 e1 02 00 	movl   $0x0,0x2e1c0(,%eax,4)
    8870:	00 00 00 00 
		free_page((long) p);
    8874:	8b 44 24 08          	mov    0x8(%esp),%eax
    8878:	83 ec 0c             	sub    $0xc,%esp
    887b:	50                   	push   %eax
    887c:	e8 7e 34 00 00       	call   bcff <free_page>
    8881:	83 c4 10             	add    $0x10,%esp
		return -EAGAIN;
    8884:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
    8889:	e9 c2 02 00 00       	jmp    8b50 <copy_process+0x555>
	}
	// 如果父进程中有文件是打开的,则将对应文件的打开次数增1.因为这里创建的子进程会与父进程共享这些打开的文件.将当前进程(父进程)的pwd,root和
	// executable引用次数均增1.与上面同样的道理,子进程也引用了这些i节点.
	for (i = 0; i < NR_OPEN; i++)
    888e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    8895:	00 
    8896:	eb 35                	jmp    88cd <copy_process+0x2d2>
		if (f = p->filp[i])
    8898:	8b 44 24 08          	mov    0x8(%esp),%eax
    889c:	8b 54 24 0c          	mov    0xc(%esp),%edx
    88a0:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    88a6:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    88aa:	89 44 24 04          	mov    %eax,0x4(%esp)
    88ae:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    88b3:	74 13                	je     88c8 <copy_process+0x2cd>
			f->f_count++;
    88b5:	8b 44 24 04          	mov    0x4(%esp),%eax
    88b9:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    88bd:	8d 50 01             	lea    0x1(%eax),%edx
    88c0:	8b 44 24 04          	mov    0x4(%esp),%eax
    88c4:	66 89 50 04          	mov    %dx,0x4(%eax)
		free_page((long) p);
		return -EAGAIN;
	}
	// 如果父进程中有文件是打开的,则将对应文件的打开次数增1.因为这里创建的子进程会与父进程共享这些打开的文件.将当前进程(父进程)的pwd,root和
	// executable引用次数均增1.与上面同样的道理,子进程也引用了这些i节点.
	for (i = 0; i < NR_OPEN; i++)
    88c8:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    88cd:	83 7c 24 0c 13       	cmpl   $0x13,0xc(%esp)
    88d2:	7e c4                	jle    8898 <copy_process+0x29d>
		if (f = p->filp[i])
			f->f_count++;
	if (current->pwd)
    88d4:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    88d9:	8b 80 34 03 00 00    	mov    0x334(%eax),%eax
    88df:	85 c0                	test   %eax,%eax
    88e1:	74 16                	je     88f9 <copy_process+0x2fe>
		current->pwd->i_count++;
    88e3:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    88e8:	8b 80 34 03 00 00    	mov    0x334(%eax),%eax
    88ee:	0f b7 50 34          	movzwl 0x34(%eax),%edx
    88f2:	83 c2 01             	add    $0x1,%edx
    88f5:	66 89 50 34          	mov    %dx,0x34(%eax)
	if (current->root)
    88f9:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    88fe:	8b 80 38 03 00 00    	mov    0x338(%eax),%eax
    8904:	85 c0                	test   %eax,%eax
    8906:	74 16                	je     891e <copy_process+0x323>
		current->root->i_count++;
    8908:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    890d:	8b 80 38 03 00 00    	mov    0x338(%eax),%eax
    8913:	0f b7 50 34          	movzwl 0x34(%eax),%edx
    8917:	83 c2 01             	add    $0x1,%edx
    891a:	66 89 50 34          	mov    %dx,0x34(%eax)
	if (current->executable)
    891e:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    8923:	8b 80 3c 03 00 00    	mov    0x33c(%eax),%eax
    8929:	85 c0                	test   %eax,%eax
    892b:	74 16                	je     8943 <copy_process+0x348>
		current->executable->i_count++;
    892d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    8932:	8b 80 3c 03 00 00    	mov    0x33c(%eax),%eax
    8938:	0f b7 50 34          	movzwl 0x34(%eax),%edx
    893c:	83 c2 01             	add    $0x1,%edx
    893f:	66 89 50 34          	mov    %dx,0x34(%eax)
	if (current->library)
    8943:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    8948:	8b 80 40 03 00 00    	mov    0x340(%eax),%eax
    894e:	85 c0                	test   %eax,%eax
    8950:	74 16                	je     8968 <copy_process+0x36d>
		current->library->i_count++;
    8952:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    8957:	8b 80 40 03 00 00    	mov    0x340(%eax),%eax
    895d:	0f b7 50 34          	movzwl 0x34(%eax),%edx
    8961:	83 c2 01             	add    $0x1,%edx
    8964:	66 89 50 34          	mov    %dx,0x34(%eax)
	// 设置等于父进程的最新子进程指针.若当前进程确实还有其他子进程,则让比邻老兄进程的最年轻进程指针p_yspter指向新进程.最后把当前进程的最新子进程指针指向这个新进程.
	// 然后把新进程设置成就绪态.最后返回新进程号.
	// 另外,set_tss_desc()和set_ldt_desc()定义在include/asm/system.h文件中."gdt+(nr<<1)+FIRST_TSS_ENTRY"是任务nr的TSS描述符项在全局表中的地址.
	// 因为每个任务占用GDT表中2项,因此上式中要包括'(nr<<1)'.
	// 请注意,在任务切换时,任务寄存器tr会由CPU自动加载.
	set_tss_desc(gdt + (nr << 1) + FIRST_TSS_ENTRY, &(p->tss));
    8968:	8b 44 24 08          	mov    0x8(%esp),%eax
    896c:	05 b0 03 00 00       	add    $0x3b0,%eax
    8971:	8b 54 24 30          	mov    0x30(%esp),%edx
    8975:	01 d2                	add    %edx,%edx
    8977:	83 c2 04             	add    $0x4,%edx
    897a:	c1 e2 03             	shl    $0x3,%edx
    897d:	81 c2 b8 5c 00 00    	add    $0x5cb8,%edx
    8983:	8b 4c 24 30          	mov    0x30(%esp),%ecx
    8987:	01 c9                	add    %ecx,%ecx
    8989:	83 c1 04             	add    $0x4,%ecx
    898c:	c1 e1 03             	shl    $0x3,%ecx
    898f:	83 c1 02             	add    $0x2,%ecx
    8992:	81 c1 b8 5c 00 00    	add    $0x5cb8,%ecx
    8998:	8b 5c 24 30          	mov    0x30(%esp),%ebx
    899c:	01 db                	add    %ebx,%ebx
    899e:	83 c3 04             	add    $0x4,%ebx
    89a1:	c1 e3 03             	shl    $0x3,%ebx
    89a4:	83 c3 04             	add    $0x4,%ebx
    89a7:	81 c3 b8 5c 00 00    	add    $0x5cb8,%ebx
    89ad:	8b 74 24 30          	mov    0x30(%esp),%esi
    89b1:	01 f6                	add    %esi,%esi
    89b3:	83 c6 04             	add    $0x4,%esi
    89b6:	c1 e6 03             	shl    $0x3,%esi
    89b9:	83 c6 05             	add    $0x5,%esi
    89bc:	81 c6 b8 5c 00 00    	add    $0x5cb8,%esi
    89c2:	8b 7c 24 30          	mov    0x30(%esp),%edi
    89c6:	01 ff                	add    %edi,%edi
    89c8:	83 c7 04             	add    $0x4,%edi
    89cb:	c1 e7 03             	shl    $0x3,%edi
    89ce:	83 c7 06             	add    $0x6,%edi
    89d1:	81 c7 b8 5c 00 00    	add    $0x5cb8,%edi
    89d7:	8b 6c 24 30          	mov    0x30(%esp),%ebp
    89db:	01 ed                	add    %ebp,%ebp
    89dd:	83 c5 04             	add    $0x4,%ebp
    89e0:	c1 e5 03             	shl    $0x3,%ebp
    89e3:	83 c5 07             	add    $0x7,%ebp
    89e6:	81 c5 b8 5c 00 00    	add    $0x5cb8,%ebp
    89ec:	66 c7 02 68 00       	movw   $0x68,(%edx)
    89f1:	66 89 01             	mov    %ax,(%ecx)
    89f4:	c1 c8 10             	ror    $0x10,%eax
    89f7:	88 03                	mov    %al,(%ebx)
    89f9:	c6 06 89             	movb   $0x89,(%esi)
    89fc:	c6 07 00             	movb   $0x0,(%edi)
    89ff:	88 65 00             	mov    %ah,0x0(%ebp)
    8a02:	c1 c8 10             	ror    $0x10,%eax
	set_ldt_desc(gdt + (nr << 1) + FIRST_LDT_ENTRY, &(p->ldt));
    8a05:	8b 44 24 08          	mov    0x8(%esp),%eax
    8a09:	05 98 03 00 00       	add    $0x398,%eax
    8a0e:	8b 54 24 30          	mov    0x30(%esp),%edx
    8a12:	01 d2                	add    %edx,%edx
    8a14:	83 c2 05             	add    $0x5,%edx
    8a17:	c1 e2 03             	shl    $0x3,%edx
    8a1a:	81 c2 b8 5c 00 00    	add    $0x5cb8,%edx
    8a20:	8b 4c 24 30          	mov    0x30(%esp),%ecx
    8a24:	01 c9                	add    %ecx,%ecx
    8a26:	83 c1 05             	add    $0x5,%ecx
    8a29:	c1 e1 03             	shl    $0x3,%ecx
    8a2c:	83 c1 02             	add    $0x2,%ecx
    8a2f:	81 c1 b8 5c 00 00    	add    $0x5cb8,%ecx
    8a35:	8b 5c 24 30          	mov    0x30(%esp),%ebx
    8a39:	01 db                	add    %ebx,%ebx
    8a3b:	83 c3 05             	add    $0x5,%ebx
    8a3e:	c1 e3 03             	shl    $0x3,%ebx
    8a41:	83 c3 04             	add    $0x4,%ebx
    8a44:	81 c3 b8 5c 00 00    	add    $0x5cb8,%ebx
    8a4a:	8b 74 24 30          	mov    0x30(%esp),%esi
    8a4e:	01 f6                	add    %esi,%esi
    8a50:	83 c6 05             	add    $0x5,%esi
    8a53:	c1 e6 03             	shl    $0x3,%esi
    8a56:	83 c6 05             	add    $0x5,%esi
    8a59:	81 c6 b8 5c 00 00    	add    $0x5cb8,%esi
    8a5f:	8b 7c 24 30          	mov    0x30(%esp),%edi
    8a63:	01 ff                	add    %edi,%edi
    8a65:	83 c7 05             	add    $0x5,%edi
    8a68:	c1 e7 03             	shl    $0x3,%edi
    8a6b:	83 c7 06             	add    $0x6,%edi
    8a6e:	81 c7 b8 5c 00 00    	add    $0x5cb8,%edi
    8a74:	8b 6c 24 30          	mov    0x30(%esp),%ebp
    8a78:	01 ed                	add    %ebp,%ebp
    8a7a:	83 c5 05             	add    $0x5,%ebp
    8a7d:	c1 e5 03             	shl    $0x3,%ebp
    8a80:	83 c5 07             	add    $0x7,%ebp
    8a83:	81 c5 b8 5c 00 00    	add    $0x5cb8,%ebp
    8a89:	66 c7 02 68 00       	movw   $0x68,(%edx)
    8a8e:	66 89 01             	mov    %ax,(%ecx)
    8a91:	c1 c8 10             	ror    $0x10,%eax
    8a94:	88 03                	mov    %al,(%ebx)
    8a96:	c6 06 82             	movb   $0x82,(%esi)
    8a99:	c6 07 00             	movb   $0x0,(%edi)
    8a9c:	88 65 00             	mov    %ah,0x0(%ebp)
    8a9f:	c1 c8 10             	ror    $0x10,%eax
	p->p_pptr = current;				// 设置新进程的父进程指针.
    8aa2:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    8aa8:	8b 44 24 08          	mov    0x8(%esp),%eax
    8aac:	89 90 bc 02 00 00    	mov    %edx,0x2bc(%eax)
	p->p_cptr = 0;						// 复位新进程的最新子进程指针.
    8ab2:	8b 44 24 08          	mov    0x8(%esp),%eax
    8ab6:	c7 80 c0 02 00 00 00 	movl   $0x0,0x2c0(%eax)
    8abd:	00 00 00 
	p->p_ysptr = 0;						// 复位新进程的比邻年轻兄弟进程指针.
    8ac0:	8b 44 24 08          	mov    0x8(%esp),%eax
    8ac4:	c7 80 c4 02 00 00 00 	movl   $0x0,0x2c4(%eax)
    8acb:	00 00 00 
	p->p_osptr = current->p_cptr;		// 设置新进程的比邻老兄兄弟进程指针.
    8ace:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    8ad3:	8b 90 c0 02 00 00    	mov    0x2c0(%eax),%edx
    8ad9:	8b 44 24 08          	mov    0x8(%esp),%eax
    8add:	89 90 c8 02 00 00    	mov    %edx,0x2c8(%eax)
	if (p->p_osptr)						// 若新进程有老兄兄弟进程,则让其年轻进程兄弟指针指向新进程
    8ae3:	8b 44 24 08          	mov    0x8(%esp),%eax
    8ae7:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    8aed:	85 c0                	test   %eax,%eax
    8aef:	74 14                	je     8b05 <copy_process+0x50a>
		p->p_osptr->p_ysptr = p;
    8af1:	8b 44 24 08          	mov    0x8(%esp),%eax
    8af5:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    8afb:	8b 54 24 08          	mov    0x8(%esp),%edx
    8aff:	89 90 c4 02 00 00    	mov    %edx,0x2c4(%eax)
	current->p_cptr = p;				// 让当前进程最新子进程指针指向新进程.
    8b05:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    8b0a:	8b 54 24 08          	mov    0x8(%esp),%edx
    8b0e:	89 90 c0 02 00 00    	mov    %edx,0x2c0(%eax)
	p->state = TASK_RUNNING;			/* do this last, just in case */        /* 设置进程状态为待运行状态栏 */
    8b14:	8b 44 24 08          	mov    0x8(%esp),%eax
    8b18:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	Log(LOG_INFO_TYPE, "<<<<< fork new process current_pid = %d, child_pid = %d, nr = %d >>>>>\n", current->pid, p->pid, nr);
    8b1e:	8b 44 24 08          	mov    0x8(%esp),%eax
    8b22:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
    8b28:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    8b2d:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    8b33:	83 ec 0c             	sub    $0xc,%esp
    8b36:	ff 74 24 3c          	pushl  0x3c(%esp)
    8b3a:	52                   	push   %edx
    8b3b:	50                   	push   %eax
    8b3c:	68 f4 2e 02 00       	push   $0x22ef4
    8b41:	6a 00                	push   $0x0
    8b43:	e8 a7 9e 01 00       	call   229ef <Log>
    8b48:	83 c4 20             	add    $0x20,%esp
	return last_pid;        			// 返回新进程号
    8b4b:	a1 48 ee 02 00       	mov    0x2ee48,%eax
}
    8b50:	83 c4 1c             	add    $0x1c,%esp
    8b53:	5b                   	pop    %ebx
    8b54:	5e                   	pop    %esi
    8b55:	5f                   	pop    %edi
    8b56:	5d                   	pop    %ebp
    8b57:	c3                   	ret    

00008b58 <find_empty_process>:

// 为新进程取得不重复的进程号last_pid.函数返回在任务数组中的任务号(数组项).
int find_empty_process(void)
{
    8b58:	83 ec 10             	sub    $0x10,%esp

	// 首先获取新的进程号.如果last_pid增1后超出进程号的正数表示范围,则重新从1开始使用pid号.然后在任务数组中搜索刚设置的pid号是
	// 否已经被任何任务使用.如果是则跳转到函数开始处理重新获得一个pid号.接着在任务数组中为新任务寻找一个空闲项,并返回项号.last_pid是一
	// 个全局变量,不用返回.如果此时任务数组中64个项已经被全部占用,则返回出错码.
	repeat:
		if ((++last_pid) < 0) last_pid = 1;
    8b5b:	a1 48 ee 02 00       	mov    0x2ee48,%eax
    8b60:	83 c0 01             	add    $0x1,%eax
    8b63:	a3 48 ee 02 00       	mov    %eax,0x2ee48
    8b68:	a1 48 ee 02 00       	mov    0x2ee48,%eax
    8b6d:	85 c0                	test   %eax,%eax
    8b6f:	79 0a                	jns    8b7b <find_empty_process+0x23>
    8b71:	c7 05 48 ee 02 00 01 	movl   $0x1,0x2ee48
    8b78:	00 00 00 
		for(i = 0 ; i < NR_TASKS ; i++)
    8b7b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    8b82:	00 
    8b83:	eb 48                	jmp    8bcd <find_empty_process+0x75>
			if (task[i] && ((task[i]->pid == last_pid) ||
    8b85:	8b 44 24 0c          	mov    0xc(%esp),%eax
    8b89:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    8b90:	85 c0                	test   %eax,%eax
    8b92:	74 34                	je     8bc8 <find_empty_process+0x70>
    8b94:	8b 44 24 0c          	mov    0xc(%esp),%eax
    8b98:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    8b9f:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
    8ba5:	a1 48 ee 02 00       	mov    0x2ee48,%eax
    8baa:	39 c2                	cmp    %eax,%edx
    8bac:	74 ad                	je     8b5b <find_empty_process+0x3>
				        (task[i]->pgrp == last_pid)))
    8bae:	8b 44 24 0c          	mov    0xc(%esp),%eax
    8bb2:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    8bb9:	8b 90 30 02 00 00    	mov    0x230(%eax),%edx
    8bbf:	a1 48 ee 02 00       	mov    0x2ee48,%eax
	// 否已经被任何任务使用.如果是则跳转到函数开始处理重新获得一个pid号.接着在任务数组中为新任务寻找一个空闲项,并返回项号.last_pid是一
	// 个全局变量,不用返回.如果此时任务数组中64个项已经被全部占用,则返回出错码.
	repeat:
		if ((++last_pid) < 0) last_pid = 1;
		for(i = 0 ; i < NR_TASKS ; i++)
			if (task[i] && ((task[i]->pid == last_pid) ||
    8bc4:	39 c2                	cmp    %eax,%edx
    8bc6:	74 93                	je     8b5b <find_empty_process+0x3>
	// 首先获取新的进程号.如果last_pid增1后超出进程号的正数表示范围,则重新从1开始使用pid号.然后在任务数组中搜索刚设置的pid号是
	// 否已经被任何任务使用.如果是则跳转到函数开始处理重新获得一个pid号.接着在任务数组中为新任务寻找一个空闲项,并返回项号.last_pid是一
	// 个全局变量,不用返回.如果此时任务数组中64个项已经被全部占用,则返回出错码.
	repeat:
		if ((++last_pid) < 0) last_pid = 1;
		for(i = 0 ; i < NR_TASKS ; i++)
    8bc8:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    8bcd:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    8bd2:	7e b1                	jle    8b85 <find_empty_process+0x2d>
			if (task[i] && ((task[i]->pid == last_pid) ||
				        (task[i]->pgrp == last_pid)))
				goto repeat;
	for(i = 1 ; i < NR_TASKS ; i++)
    8bd4:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
    8bdb:	00 
    8bdc:	eb 1a                	jmp    8bf8 <find_empty_process+0xa0>
		if (!task[i])
    8bde:	8b 44 24 0c          	mov    0xc(%esp),%eax
    8be2:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    8be9:	85 c0                	test   %eax,%eax
    8beb:	75 06                	jne    8bf3 <find_empty_process+0x9b>
			return i;
    8bed:	8b 44 24 0c          	mov    0xc(%esp),%eax
    8bf1:	eb 11                	jmp    8c04 <find_empty_process+0xac>
		if ((++last_pid) < 0) last_pid = 1;
		for(i = 0 ; i < NR_TASKS ; i++)
			if (task[i] && ((task[i]->pid == last_pid) ||
				        (task[i]->pgrp == last_pid)))
				goto repeat;
	for(i = 1 ; i < NR_TASKS ; i++)
    8bf3:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    8bf8:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    8bfd:	7e df                	jle    8bde <find_empty_process+0x86>
		if (!task[i])
			return i;
	return -EAGAIN;
    8bff:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
}
    8c04:	83 c4 10             	add    $0x10,%esp
    8c07:	c3                   	ret    

00008c08 <panic>:
// 如果当前进程是任务0的话,还说明是交换任务出错,并且还没有运行文件系统同步函数.
// 函数名前的关键字volatile用于告诉编译器gcc该函数不会返回.这样可让gcc产生更好一些的代码,更重要的是使用这个关键字
// 以避免产生某些(未初始化变量的)假警告信息.
// 等同于现在gcc的函数属性说明:void panic(const char *s) __attribute__((noreturn));
void panic(const char * s)
{
    8c08:	83 ec 0c             	sub    $0xc,%esp
	printk("Kernel panic: %s\n\r", s);
    8c0b:	83 ec 08             	sub    $0x8,%esp
    8c0e:	ff 74 24 18          	pushl  0x18(%esp)
    8c12:	68 3c 2f 02 00       	push   $0x22f3c
    8c17:	e8 2b 00 00 00       	call   8c47 <printk>
    8c1c:	83 c4 10             	add    $0x10,%esp
	if (current == task[0])
    8c1f:	8b 15 c0 e1 02 00    	mov    0x2e1c0,%edx
    8c25:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    8c2a:	39 c2                	cmp    %eax,%edx
    8c2c:	75 12                	jne    8c40 <panic+0x38>
		printk("In swapper task - not syncing\n\r");
    8c2e:	83 ec 0c             	sub    $0xc,%esp
    8c31:	68 50 2f 02 00       	push   $0x22f50
    8c36:	e8 0c 00 00 00       	call   8c47 <printk>
    8c3b:	83 c4 10             	add    $0x10,%esp
    8c3e:	eb 05                	jmp    8c45 <panic+0x3d>
	else
		sys_sync();
    8c40:	e8 14 63 00 00       	call   ef59 <sys_sync>
	for(;;);
    8c45:	eb fe                	jmp    8c45 <panic+0x3d>

00008c47 <printk>:
// 函数vsprintf()定义在linux/kernel/vsprintf.c中
extern int vsprintf(char * buf, const char * fmt, va_list args);

// 内核使用的显示函数.
int printk(const char *fmt, ...)
{
    8c47:	83 ec 1c             	sub    $0x1c,%esp
	va_list args;							// va_list实际上是一个字符指针类型.
	int i;

	// 运行参数处理开始函数.然后使用格式串fmt将参数列表args输出到buf中.返回值i等于输出字符串的长度.再运行参数处理结束函数.最后调用控制台显示
	// 函数并返回显示字符数.
	va_start(args, fmt);
    8c4a:	8d 44 24 24          	lea    0x24(%esp),%eax
    8c4e:	89 44 24 0c          	mov    %eax,0xc(%esp)
	i = vsprintf(buf, fmt, args);
    8c52:	8b 44 24 20          	mov    0x20(%esp),%eax
    8c56:	83 ec 04             	sub    $0x4,%esp
    8c59:	ff 74 24 10          	pushl  0x10(%esp)
    8c5d:	50                   	push   %eax
    8c5e:	68 60 ee 02 00       	push   $0x2ee60
    8c63:	e8 1d 03 00 00       	call   8f85 <vsprintf>
    8c68:	83 c4 10             	add    $0x10,%esp
    8c6b:	89 44 24 08          	mov    %eax,0x8(%esp)
	va_end(args);
	console_print(buf);						// chr_drv/console.c
    8c6f:	83 ec 0c             	sub    $0xc,%esp
    8c72:	68 60 ee 02 00       	push   $0x2ee60
    8c77:	e8 e6 48 01 00       	call   1d562 <console_print>
    8c7c:	83 c4 10             	add    $0x10,%esp
	return i;
    8c7f:	8b 44 24 08          	mov    0x8(%esp),%eax
}
    8c83:	83 c4 1c             	add    $0x1c,%esp
    8c86:	c3                   	ret    

00008c87 <strlen>:
// 计算字符串长度.
// 参数:s - 字符串
// %0 - ecx(__res),%1 - edi(字符串指针s),%2 - eax(0),%3 - ecx(0xffffffff).
// 返回:返回字符串长度.
static inline int strlen(const char * s)
{
    8c87:	57                   	push   %edi
register int __res __asm__("cx");       					// __res是寄存器变量(ecx).
__asm__(
    8c88:	8b 54 24 08          	mov    0x8(%esp),%edx
    8c8c:	b8 00 00 00 00       	mov    $0x0,%eax
    8c91:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    8c96:	89 d7                	mov    %edx,%edi
    8c98:	fc                   	cld    
    8c99:	f2 ae                	repnz scas %es:(%edi),%al
    8c9b:	f7 d1                	not    %ecx
    8c9d:	49                   	dec    %ecx
	"repne\n\t"												// al(0)与字符串中字符es:[edi比较,
	"scasb\n\t"												// 若不相等就一直比较.
	"notl %0\n\t"											// ecx取反.
	"decl %0"												// ecx--,得字符串的长度值.
	:"=c" (__res):"D" (s), "a" (0), "0" (0xffffffff));
return __res;												// 返回字符串长度值.
    8c9e:	89 c8                	mov    %ecx,%eax
}
    8ca0:	5f                   	pop    %edi
    8ca1:	c3                   	ret    

00008ca2 <skip_atoi>:
/* 我们使用下面的定义,这样我们就可以不使用ctype库了 */
#define is_digit(c)	((c) >= '0' && (c) <= '9')	// 判断字符c是否为数字字符.

// 该函数将字符数字串转换成整数.输入是数字串指针的指针,返回是结果数值.另外指针将前移.
static int skip_atoi(const char **s)
{
    8ca2:	53                   	push   %ebx
    8ca3:	83 ec 10             	sub    $0x10,%esp
	int i = 0;
    8ca6:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    8cad:	00 

	while (is_digit(**s))
    8cae:	eb 2d                	jmp    8cdd <skip_atoi+0x3b>
		i = i*10 + *((*s)++) - '0';
    8cb0:	8b 54 24 0c          	mov    0xc(%esp),%edx
    8cb4:	89 d0                	mov    %edx,%eax
    8cb6:	c1 e0 02             	shl    $0x2,%eax
    8cb9:	01 d0                	add    %edx,%eax
    8cbb:	01 c0                	add    %eax,%eax
    8cbd:	89 c3                	mov    %eax,%ebx
    8cbf:	8b 44 24 18          	mov    0x18(%esp),%eax
    8cc3:	8b 00                	mov    (%eax),%eax
    8cc5:	8d 48 01             	lea    0x1(%eax),%ecx
    8cc8:	8b 54 24 18          	mov    0x18(%esp),%edx
    8ccc:	89 0a                	mov    %ecx,(%edx)
    8cce:	0f b6 00             	movzbl (%eax),%eax
    8cd1:	0f be c0             	movsbl %al,%eax
    8cd4:	01 d8                	add    %ebx,%eax
    8cd6:	83 e8 30             	sub    $0x30,%eax
    8cd9:	89 44 24 0c          	mov    %eax,0xc(%esp)
// 该函数将字符数字串转换成整数.输入是数字串指针的指针,返回是结果数值.另外指针将前移.
static int skip_atoi(const char **s)
{
	int i = 0;

	while (is_digit(**s))
    8cdd:	8b 44 24 18          	mov    0x18(%esp),%eax
    8ce1:	8b 00                	mov    (%eax),%eax
    8ce3:	0f b6 00             	movzbl (%eax),%eax
    8ce6:	3c 2f                	cmp    $0x2f,%al
    8ce8:	7e 0d                	jle    8cf7 <skip_atoi+0x55>
    8cea:	8b 44 24 18          	mov    0x18(%esp),%eax
    8cee:	8b 00                	mov    (%eax),%eax
    8cf0:	0f b6 00             	movzbl (%eax),%eax
    8cf3:	3c 39                	cmp    $0x39,%al
    8cf5:	7e b9                	jle    8cb0 <skip_atoi+0xe>
		i = i*10 + *((*s)++) - '0';
	return i;
    8cf7:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    8cfb:	83 c4 10             	add    $0x10,%esp
    8cfe:	5b                   	pop    %ebx
    8cff:	c3                   	ret    

00008d00 <number>:
// 将整数转换为指定进制的字符串.
// 输入: num-整数; base-进制; size-字符串长度;precision-数字长度(精度);type-类型选项.
// 输出: 数字转换成字符串后指向该字符串末端后面的指针.
static char * number(char * str, int num, int base, int size, int precision
	,int type)
{
    8d00:	53                   	push   %ebx
    8d01:	83 ec 40             	sub    $0x40,%esp
	char c,sign,tmp[36];
	const char *digits="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    8d04:	c7 44 24 38 70 2f 02 	movl   $0x22f70,0x38(%esp)
    8d0b:	00 
	int i;

	// 如果类型type指出用小写字母,则定义小写字母集.
	// 如果类型指出要左调整(靠左边界),则屏蔽类型中的填零标志.
	// 如果进制基数小于2或大于36,则退出处理,即本程序只能处理基数在2-36之间的数.
	if (type & SMALL) digits = "0123456789abcdefghijklmnopqrstuvwxyz";
    8d0c:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    8d10:	83 e0 40             	and    $0x40,%eax
    8d13:	85 c0                	test   %eax,%eax
    8d15:	74 08                	je     8d1f <number+0x1f>
    8d17:	c7 44 24 38 98 2f 02 	movl   $0x22f98,0x38(%esp)
    8d1e:	00 
	if (type & LEFT) type &= ~ZEROPAD;
    8d1f:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    8d23:	83 e0 10             	and    $0x10,%eax
    8d26:	85 c0                	test   %eax,%eax
    8d28:	74 05                	je     8d2f <number+0x2f>
    8d2a:	83 64 24 5c fe       	andl   $0xfffffffe,0x5c(%esp)
	if (base < 2 || base > 36)
    8d2f:	83 7c 24 50 01       	cmpl   $0x1,0x50(%esp)
    8d34:	7e 07                	jle    8d3d <number+0x3d>
    8d36:	83 7c 24 50 24       	cmpl   $0x24,0x50(%esp)
    8d3b:	7e 0a                	jle    8d47 <number+0x47>
		return 0;
    8d3d:	b8 00 00 00 00       	mov    $0x0,%eax
    8d42:	e9 39 02 00 00       	jmp    8f80 <number+0x280>
	// 如果类型指出要填零,则置字符变量c='0',否则c等于空格字符.
	// 如果类型指出是带符号数并且数值num小于0,则置符号变量sign=负号,并使num取绝对值.
	// 否则如果类型指出是加号,则置sign=加号,否则若类型带空格标志则sign=空格,否则置0.
	c = (type & ZEROPAD) ? '0' : ' ' ;
    8d47:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    8d4b:	83 e0 01             	and    $0x1,%eax
    8d4e:	85 c0                	test   %eax,%eax
    8d50:	74 07                	je     8d59 <number+0x59>
    8d52:	b8 30 00 00 00       	mov    $0x30,%eax
    8d57:	eb 05                	jmp    8d5e <number+0x5e>
    8d59:	b8 20 00 00 00       	mov    $0x20,%eax
    8d5e:	88 44 24 33          	mov    %al,0x33(%esp)
	if (type & SIGN && num < 0) {
    8d62:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    8d66:	83 e0 02             	and    $0x2,%eax
    8d69:	85 c0                	test   %eax,%eax
    8d6b:	74 12                	je     8d7f <number+0x7f>
    8d6d:	83 7c 24 4c 00       	cmpl   $0x0,0x4c(%esp)
    8d72:	79 0b                	jns    8d7f <number+0x7f>
		sign = '-';
    8d74:	c6 44 24 3f 2d       	movb   $0x2d,0x3f(%esp)
		num = -num;
    8d79:	f7 5c 24 4c          	negl   0x4c(%esp)
    8d7d:	eb 2d                	jmp    8dac <number+0xac>
	} else
		sign = (type & PLUS) ? '+' : ((type & SPACE) ? ' ' : 0);
    8d7f:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    8d83:	83 e0 04             	and    $0x4,%eax
    8d86:	85 c0                	test   %eax,%eax
    8d88:	75 19                	jne    8da3 <number+0xa3>
    8d8a:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    8d8e:	83 e0 08             	and    $0x8,%eax
    8d91:	85 c0                	test   %eax,%eax
    8d93:	74 07                	je     8d9c <number+0x9c>
    8d95:	b8 20 00 00 00       	mov    $0x20,%eax
    8d9a:	eb 0c                	jmp    8da8 <number+0xa8>
    8d9c:	b8 00 00 00 00       	mov    $0x0,%eax
    8da1:	eb 05                	jmp    8da8 <number+0xa8>
    8da3:	b8 2b 00 00 00       	mov    $0x2b,%eax
    8da8:	88 44 24 3f          	mov    %al,0x3f(%esp)
	// 若带符号,则宽度值减1.若类型指出是特殊转换,则对十六进制宽度再减少2位(用于0x),对于八进制宽度减1(用于八进制转换结果前放一个零).
	if (sign) size--;
    8dac:	80 7c 24 3f 00       	cmpb   $0x0,0x3f(%esp)
    8db1:	74 05                	je     8db8 <number+0xb8>
    8db3:	83 6c 24 54 01       	subl   $0x1,0x54(%esp)
	if (type & SPECIAL)
    8db8:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    8dbc:	83 e0 20             	and    $0x20,%eax
    8dbf:	85 c0                	test   %eax,%eax
    8dc1:	74 1a                	je     8ddd <number+0xdd>
		if (base == 16) size -= 2;
    8dc3:	83 7c 24 50 10       	cmpl   $0x10,0x50(%esp)
    8dc8:	75 07                	jne    8dd1 <number+0xd1>
    8dca:	83 6c 24 54 02       	subl   $0x2,0x54(%esp)
    8dcf:	eb 0c                	jmp    8ddd <number+0xdd>
		else if (base == 8) size--;
    8dd1:	83 7c 24 50 08       	cmpl   $0x8,0x50(%esp)
    8dd6:	75 05                	jne    8ddd <number+0xdd>
    8dd8:	83 6c 24 54 01       	subl   $0x1,0x54(%esp)
	// 如果数值num为0,则临时字符串='0';否则根据给定的基数将数值num转换成字符形式.
	i = 0;
    8ddd:	c7 44 24 34 00 00 00 	movl   $0x0,0x34(%esp)
    8de4:	00 
	if (num == 0)
    8de5:	83 7c 24 4c 00       	cmpl   $0x0,0x4c(%esp)
    8dea:	75 47                	jne    8e33 <number+0x133>
		tmp[i++] = '0';
    8dec:	8b 44 24 34          	mov    0x34(%esp),%eax
    8df0:	8d 50 01             	lea    0x1(%eax),%edx
    8df3:	89 54 24 34          	mov    %edx,0x34(%esp)
    8df7:	c6 44 04 08 30       	movb   $0x30,0x8(%esp,%eax,1)
    8dfc:	eb 3c                	jmp    8e3a <number+0x13a>
	else while (num != 0)
		tmp[i++] = digits[do_div(num, base)];
    8dfe:	8b 4c 24 34          	mov    0x34(%esp),%ecx
    8e02:	8d 41 01             	lea    0x1(%ecx),%eax
    8e05:	89 44 24 34          	mov    %eax,0x34(%esp)
    8e09:	8b 44 24 4c          	mov    0x4c(%esp),%eax
    8e0d:	ba 00 00 00 00       	mov    $0x0,%edx
    8e12:	8b 5c 24 50          	mov    0x50(%esp),%ebx
    8e16:	f7 f3                	div    %ebx
    8e18:	89 44 24 4c          	mov    %eax,0x4c(%esp)
    8e1c:	89 54 24 2c          	mov    %edx,0x2c(%esp)
    8e20:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    8e24:	89 c2                	mov    %eax,%edx
    8e26:	8b 44 24 38          	mov    0x38(%esp),%eax
    8e2a:	01 d0                	add    %edx,%eax
    8e2c:	0f b6 00             	movzbl (%eax),%eax
    8e2f:	88 44 0c 08          	mov    %al,0x8(%esp,%ecx,1)
		else if (base == 8) size--;
	// 如果数值num为0,则临时字符串='0';否则根据给定的基数将数值num转换成字符形式.
	i = 0;
	if (num == 0)
		tmp[i++] = '0';
	else while (num != 0)
    8e33:	83 7c 24 4c 00       	cmpl   $0x0,0x4c(%esp)
    8e38:	75 c4                	jne    8dfe <number+0xfe>
		tmp[i++] = digits[do_div(num, base)];
	// 若数值字符个数大于精度值,则精度值扩展为数字个数值.
	// 宽度值size减去用于存放数值字符的个数.
	if (i > precision) precision = i;
    8e3a:	8b 44 24 34          	mov    0x34(%esp),%eax
    8e3e:	3b 44 24 58          	cmp    0x58(%esp),%eax
    8e42:	7e 08                	jle    8e4c <number+0x14c>
    8e44:	8b 44 24 34          	mov    0x34(%esp),%eax
    8e48:	89 44 24 58          	mov    %eax,0x58(%esp)
	size -= precision;
    8e4c:	8b 44 24 58          	mov    0x58(%esp),%eax
    8e50:	29 44 24 54          	sub    %eax,0x54(%esp)
	// 从这里真正开始形成所需要的转换结果,并暂时放在字符串str中.
	// 若类型中没有填零(ZEROPAD)和左靠齐(左调整)标志,则在str中首先填放剩余宽度值指出的空格数.若需带符号位,则存入符号.
	if (!(type & (ZEROPAD + LEFT)))
    8e54:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    8e58:	83 e0 11             	and    $0x11,%eax
    8e5b:	85 c0                	test   %eax,%eax
    8e5d:	75 1f                	jne    8e7e <number+0x17e>
		while(size-- > 0)
    8e5f:	eb 0e                	jmp    8e6f <number+0x16f>
			*str++ = ' ';
    8e61:	8b 44 24 48          	mov    0x48(%esp),%eax
    8e65:	8d 50 01             	lea    0x1(%eax),%edx
    8e68:	89 54 24 48          	mov    %edx,0x48(%esp)
    8e6c:	c6 00 20             	movb   $0x20,(%eax)
	if (i > precision) precision = i;
	size -= precision;
	// 从这里真正开始形成所需要的转换结果,并暂时放在字符串str中.
	// 若类型中没有填零(ZEROPAD)和左靠齐(左调整)标志,则在str中首先填放剩余宽度值指出的空格数.若需带符号位,则存入符号.
	if (!(type & (ZEROPAD + LEFT)))
		while(size-- > 0)
    8e6f:	8b 44 24 54          	mov    0x54(%esp),%eax
    8e73:	8d 50 ff             	lea    -0x1(%eax),%edx
    8e76:	89 54 24 54          	mov    %edx,0x54(%esp)
    8e7a:	85 c0                	test   %eax,%eax
    8e7c:	7f e3                	jg     8e61 <number+0x161>
			*str++ = ' ';
	if (sign)
    8e7e:	80 7c 24 3f 00       	cmpb   $0x0,0x3f(%esp)
    8e83:	74 12                	je     8e97 <number+0x197>
		*str++ = sign;
    8e85:	8b 44 24 48          	mov    0x48(%esp),%eax
    8e89:	8d 50 01             	lea    0x1(%eax),%edx
    8e8c:	89 54 24 48          	mov    %edx,0x48(%esp)
    8e90:	0f b6 54 24 3f       	movzbl 0x3f(%esp),%edx
    8e95:	88 10                	mov    %dl,(%eax)
	// 若类型指出是特殊转换,则对于八进制转换结果头一位放置一个'0';而对于十六进制则存放'0x'.
	if (type & SPECIAL)
    8e97:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    8e9b:	83 e0 20             	and    $0x20,%eax
    8e9e:	85 c0                	test   %eax,%eax
    8ea0:	74 41                	je     8ee3 <number+0x1e3>
		if (base == 8)
    8ea2:	83 7c 24 50 08       	cmpl   $0x8,0x50(%esp)
    8ea7:	75 10                	jne    8eb9 <number+0x1b9>
			*str++ = '0';
    8ea9:	8b 44 24 48          	mov    0x48(%esp),%eax
    8ead:	8d 50 01             	lea    0x1(%eax),%edx
    8eb0:	89 54 24 48          	mov    %edx,0x48(%esp)
    8eb4:	c6 00 30             	movb   $0x30,(%eax)
    8eb7:	eb 2a                	jmp    8ee3 <number+0x1e3>
		else if (base == 16) {
    8eb9:	83 7c 24 50 10       	cmpl   $0x10,0x50(%esp)
    8ebe:	75 23                	jne    8ee3 <number+0x1e3>
			*str++ = '0';
    8ec0:	8b 44 24 48          	mov    0x48(%esp),%eax
    8ec4:	8d 50 01             	lea    0x1(%eax),%edx
    8ec7:	89 54 24 48          	mov    %edx,0x48(%esp)
    8ecb:	c6 00 30             	movb   $0x30,(%eax)
			*str++ = digits[33];						// 'X'或'x'
    8ece:	8b 44 24 48          	mov    0x48(%esp),%eax
    8ed2:	8d 50 01             	lea    0x1(%eax),%edx
    8ed5:	89 54 24 48          	mov    %edx,0x48(%esp)
    8ed9:	8b 54 24 38          	mov    0x38(%esp),%edx
    8edd:	0f b6 52 21          	movzbl 0x21(%edx),%edx
    8ee1:	88 10                	mov    %dl,(%eax)
		}
	// 若类型中没有左调整(左靠齐)标志,则在剩余宽度中存放c字符('0'或空格)
	if (!(type & LEFT))
    8ee3:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    8ee7:	83 e0 10             	and    $0x10,%eax
    8eea:	85 c0                	test   %eax,%eax
    8eec:	75 33                	jne    8f21 <number+0x221>
		while(size-- > 0)
    8eee:	eb 12                	jmp    8f02 <number+0x202>
			*str++ = c;
    8ef0:	8b 44 24 48          	mov    0x48(%esp),%eax
    8ef4:	8d 50 01             	lea    0x1(%eax),%edx
    8ef7:	89 54 24 48          	mov    %edx,0x48(%esp)
    8efb:	0f b6 54 24 33       	movzbl 0x33(%esp),%edx
    8f00:	88 10                	mov    %dl,(%eax)
			*str++ = '0';
			*str++ = digits[33];						// 'X'或'x'
		}
	// 若类型中没有左调整(左靠齐)标志,则在剩余宽度中存放c字符('0'或空格)
	if (!(type & LEFT))
		while(size-- > 0)
    8f02:	8b 44 24 54          	mov    0x54(%esp),%eax
    8f06:	8d 50 ff             	lea    -0x1(%eax),%edx
    8f09:	89 54 24 54          	mov    %edx,0x54(%esp)
    8f0d:	85 c0                	test   %eax,%eax
    8f0f:	7f df                	jg     8ef0 <number+0x1f0>
			*str++ = c;
	// 此时i存有数值num的数字个数.若数字个数小于精度值,则str中放入(精度值-i)个'0'.
	while(i < precision--)
    8f11:	eb 0e                	jmp    8f21 <number+0x221>
		*str++ = '0';
    8f13:	8b 44 24 48          	mov    0x48(%esp),%eax
    8f17:	8d 50 01             	lea    0x1(%eax),%edx
    8f1a:	89 54 24 48          	mov    %edx,0x48(%esp)
    8f1e:	c6 00 30             	movb   $0x30,(%eax)
	// 若类型中没有左调整(左靠齐)标志,则在剩余宽度中存放c字符('0'或空格)
	if (!(type & LEFT))
		while(size-- > 0)
			*str++ = c;
	// 此时i存有数值num的数字个数.若数字个数小于精度值,则str中放入(精度值-i)个'0'.
	while(i < precision--)
    8f21:	8b 44 24 58          	mov    0x58(%esp),%eax
    8f25:	8d 50 ff             	lea    -0x1(%eax),%edx
    8f28:	89 54 24 58          	mov    %edx,0x58(%esp)
    8f2c:	3b 44 24 34          	cmp    0x34(%esp),%eax
    8f30:	7f e1                	jg     8f13 <number+0x213>
		*str++ = '0';
	// 将数值转换好的数字字符填入str中.共i个.
	while(i-- > 0)
    8f32:	eb 1a                	jmp    8f4e <number+0x24e>
		*str++ = tmp[i];
    8f34:	8b 44 24 48          	mov    0x48(%esp),%eax
    8f38:	8d 50 01             	lea    0x1(%eax),%edx
    8f3b:	89 54 24 48          	mov    %edx,0x48(%esp)
    8f3f:	8d 4c 24 08          	lea    0x8(%esp),%ecx
    8f43:	8b 54 24 34          	mov    0x34(%esp),%edx
    8f47:	01 ca                	add    %ecx,%edx
    8f49:	0f b6 12             	movzbl (%edx),%edx
    8f4c:	88 10                	mov    %dl,(%eax)
			*str++ = c;
	// 此时i存有数值num的数字个数.若数字个数小于精度值,则str中放入(精度值-i)个'0'.
	while(i < precision--)
		*str++ = '0';
	// 将数值转换好的数字字符填入str中.共i个.
	while(i-- > 0)
    8f4e:	8b 44 24 34          	mov    0x34(%esp),%eax
    8f52:	8d 50 ff             	lea    -0x1(%eax),%edx
    8f55:	89 54 24 34          	mov    %edx,0x34(%esp)
    8f59:	85 c0                	test   %eax,%eax
    8f5b:	7f d7                	jg     8f34 <number+0x234>
		*str++ = tmp[i];
	// 若宽度值仍大于零,则表示类型标志中有左靠齐标志.则在剩余宽度中放入空格.
	while(size-- > 0)
    8f5d:	eb 0e                	jmp    8f6d <number+0x26d>
		*str++ = ' ';
    8f5f:	8b 44 24 48          	mov    0x48(%esp),%eax
    8f63:	8d 50 01             	lea    0x1(%eax),%edx
    8f66:	89 54 24 48          	mov    %edx,0x48(%esp)
    8f6a:	c6 00 20             	movb   $0x20,(%eax)
		*str++ = '0';
	// 将数值转换好的数字字符填入str中.共i个.
	while(i-- > 0)
		*str++ = tmp[i];
	// 若宽度值仍大于零,则表示类型标志中有左靠齐标志.则在剩余宽度中放入空格.
	while(size-- > 0)
    8f6d:	8b 44 24 54          	mov    0x54(%esp),%eax
    8f71:	8d 50 ff             	lea    -0x1(%eax),%edx
    8f74:	89 54 24 54          	mov    %edx,0x54(%esp)
    8f78:	85 c0                	test   %eax,%eax
    8f7a:	7f e3                	jg     8f5f <number+0x25f>
		*str++ = ' ';
	return str;											// 返回转换好的指向字符串末端后的指针.
    8f7c:	8b 44 24 48          	mov    0x48(%esp),%eax
}
    8f80:	83 c4 40             	add    $0x40,%esp
    8f83:	5b                   	pop    %ebx
    8f84:	c3                   	ret    

00008f85 <vsprintf>:

// 下面函数是送格式化输出到字符串中.
// 为了能在内核中使用格式化的输出,Linus在内核实现了该C标准函数.
// 其中参数fmt是格式字符串;args是个数变化的值;buf是输出字符串缓冲区.
int vsprintf(char *buf, const char *fmt, va_list args)
{
    8f85:	83 ec 30             	sub    $0x30,%esp
				   											number of chars for from string */
														/* min.整数数字个数;max.字符串中字符个数 */
	int qualifier;										/* 'h', 'l', or 'L' for integer fields */	/* 'h','l',或 'L'用于整数字段 */

	// 首先将字符指针指向buf,然后扫描格式字符串,对各个格式转换指示进行相应的处理.
	for (str=buf ; *fmt ; ++fmt) {
    8f88:	8b 44 24 34          	mov    0x34(%esp),%eax
    8f8c:	89 44 24 24          	mov    %eax,0x24(%esp)
    8f90:	e9 3b 04 00 00       	jmp    93d0 <vsprintf+0x44b>
		// 格式转换指示字符串均'%'开始,这里从fmt格式字符串中扫描'%',寻找格式转换字符串的开始.不是格式指示的一般字符均被依次存入str.
		if (*fmt != '%') {
    8f95:	8b 44 24 38          	mov    0x38(%esp),%eax
    8f99:	0f b6 00             	movzbl (%eax),%eax
    8f9c:	3c 25                	cmp    $0x25,%al
    8f9e:	74 19                	je     8fb9 <vsprintf+0x34>
			*str++ = *fmt;
    8fa0:	8b 44 24 24          	mov    0x24(%esp),%eax
    8fa4:	8d 50 01             	lea    0x1(%eax),%edx
    8fa7:	89 54 24 24          	mov    %edx,0x24(%esp)
    8fab:	8b 54 24 38          	mov    0x38(%esp),%edx
    8faf:	0f b6 12             	movzbl (%edx),%edx
    8fb2:	88 10                	mov    %dl,(%eax)
			continue;
    8fb4:	e9 0c 04 00 00       	jmp    93c5 <vsprintf+0x440>
		}

		// 下面取得格式指示字符串中的标志域,并将标志常量放入flags变量中.
		/* process flags */
		flags = 0;
    8fb9:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
    8fc0:	00 
		repeat:
			++fmt;		/* this also skips first '%' */
    8fc1:	8b 44 24 38          	mov    0x38(%esp),%eax
    8fc5:	83 c0 01             	add    $0x1,%eax
    8fc8:	89 44 24 38          	mov    %eax,0x38(%esp)
			switch (*fmt) {
    8fcc:	8b 44 24 38          	mov    0x38(%esp),%eax
    8fd0:	0f b6 00             	movzbl (%eax),%eax
    8fd3:	0f be c0             	movsbl %al,%eax
    8fd6:	83 e8 20             	sub    $0x20,%eax
    8fd9:	83 f8 10             	cmp    $0x10,%eax
    8fdc:	77 2c                	ja     900a <vsprintf+0x85>
    8fde:	8b 04 85 c0 2f 02 00 	mov    0x22fc0(,%eax,4),%eax
    8fe5:	ff e0                	jmp    *%eax
				case '-': flags |= LEFT; goto repeat;		// 左靠齐调整
    8fe7:	83 4c 24 1c 10       	orl    $0x10,0x1c(%esp)
    8fec:	eb d3                	jmp    8fc1 <vsprintf+0x3c>
				case '+': flags |= PLUS; goto repeat;		// 放加号
    8fee:	83 4c 24 1c 04       	orl    $0x4,0x1c(%esp)
    8ff3:	eb cc                	jmp    8fc1 <vsprintf+0x3c>
				case ' ': flags |= SPACE; goto repeat;		// 放空格
    8ff5:	83 4c 24 1c 08       	orl    $0x8,0x1c(%esp)
    8ffa:	eb c5                	jmp    8fc1 <vsprintf+0x3c>
				case '#': flags |= SPECIAL; goto repeat;	// 是特殊转换
    8ffc:	83 4c 24 1c 20       	orl    $0x20,0x1c(%esp)
    9001:	eb be                	jmp    8fc1 <vsprintf+0x3c>
				case '0': flags |= ZEROPAD; goto repeat;	// 要填零(即'0')
    9003:	83 4c 24 1c 01       	orl    $0x1,0x1c(%esp)
    9008:	eb b7                	jmp    8fc1 <vsprintf+0x3c>
				}

		// 取当前参数字段宽度域值,放入field_width变量中.如果宽度域中是数值则直接其为宽度值.如果宽度域中是字符'*',表示下一个参数指定宽度.因此
		// 调用va_arg取宽度值.若此时宽度值小于0,则该负数表示其带有标志域'-'标志(左靠齐),因此还需在标志变量中添入该标志,并将字段宽度值取为其绝对值.
		/* get field width */
		field_width = -1;
    900a:	c7 44 24 18 ff ff ff 	movl   $0xffffffff,0x18(%esp)
    9011:	ff 
		if (is_digit(*fmt))
    9012:	8b 44 24 38          	mov    0x38(%esp),%eax
    9016:	0f b6 00             	movzbl (%eax),%eax
    9019:	3c 2f                	cmp    $0x2f,%al
    901b:	7e 1e                	jle    903b <vsprintf+0xb6>
    901d:	8b 44 24 38          	mov    0x38(%esp),%eax
    9021:	0f b6 00             	movzbl (%eax),%eax
    9024:	3c 39                	cmp    $0x39,%al
    9026:	7f 13                	jg     903b <vsprintf+0xb6>
			field_width = skip_atoi(&fmt);
    9028:	8d 44 24 38          	lea    0x38(%esp),%eax
    902c:	50                   	push   %eax
    902d:	e8 70 fc ff ff       	call   8ca2 <skip_atoi>
    9032:	83 c4 04             	add    $0x4,%esp
    9035:	89 44 24 18          	mov    %eax,0x18(%esp)
    9039:	eb 36                	jmp    9071 <vsprintf+0xec>
		else if (*fmt == '*') {
    903b:	8b 44 24 38          	mov    0x38(%esp),%eax
    903f:	0f b6 00             	movzbl (%eax),%eax
    9042:	3c 2a                	cmp    $0x2a,%al
    9044:	75 2b                	jne    9071 <vsprintf+0xec>
			/* it's the next argument */
			++fmt;
    9046:	8b 44 24 38          	mov    0x38(%esp),%eax
    904a:	83 c0 01             	add    $0x1,%eax
    904d:	89 44 24 38          	mov    %eax,0x38(%esp)
			field_width = va_arg(args, int);
    9051:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    9056:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    905a:	8b 40 fc             	mov    -0x4(%eax),%eax
    905d:	89 44 24 18          	mov    %eax,0x18(%esp)
			if (field_width < 0) {
    9061:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    9066:	79 09                	jns    9071 <vsprintf+0xec>
				field_width = -field_width;
    9068:	f7 5c 24 18          	negl   0x18(%esp)
				flags |= LEFT;
    906c:	83 4c 24 1c 10       	orl    $0x10,0x1c(%esp)
		}

	// 下面这段代码,取格式转换串的精度域,并放入precision变量中.精度域开始的标志是'.'.其处理过程与上面宽度域的类似.如果精度域中是数值则直接取其为
	// 精度值.如果精度域中是字符'*',表示下一个参数指定精度.因此调用va_arg取精度值.若此时宽度值小于0,则将字段精度值取为0.
		/* get the precision */
		precision = -1;
    9071:	c7 44 24 14 ff ff ff 	movl   $0xffffffff,0x14(%esp)
    9078:	ff 
		if (*fmt == '.') {
    9079:	8b 44 24 38          	mov    0x38(%esp),%eax
    907d:	0f b6 00             	movzbl (%eax),%eax
    9080:	3c 2e                	cmp    $0x2e,%al
    9082:	75 69                	jne    90ed <vsprintf+0x168>
			++fmt;
    9084:	8b 44 24 38          	mov    0x38(%esp),%eax
    9088:	83 c0 01             	add    $0x1,%eax
    908b:	89 44 24 38          	mov    %eax,0x38(%esp)
			if (is_digit(*fmt))
    908f:	8b 44 24 38          	mov    0x38(%esp),%eax
    9093:	0f b6 00             	movzbl (%eax),%eax
    9096:	3c 2f                	cmp    $0x2f,%al
    9098:	7e 1e                	jle    90b8 <vsprintf+0x133>
    909a:	8b 44 24 38          	mov    0x38(%esp),%eax
    909e:	0f b6 00             	movzbl (%eax),%eax
    90a1:	3c 39                	cmp    $0x39,%al
    90a3:	7f 13                	jg     90b8 <vsprintf+0x133>
				precision = skip_atoi(&fmt);
    90a5:	8d 44 24 38          	lea    0x38(%esp),%eax
    90a9:	50                   	push   %eax
    90aa:	e8 f3 fb ff ff       	call   8ca2 <skip_atoi>
    90af:	83 c4 04             	add    $0x4,%esp
    90b2:	89 44 24 14          	mov    %eax,0x14(%esp)
    90b6:	eb 26                	jmp    90de <vsprintf+0x159>
			else if (*fmt == '*') {
    90b8:	8b 44 24 38          	mov    0x38(%esp),%eax
    90bc:	0f b6 00             	movzbl (%eax),%eax
    90bf:	3c 2a                	cmp    $0x2a,%al
    90c1:	75 1b                	jne    90de <vsprintf+0x159>
				/* it's the next argument */
                                ++fmt;
    90c3:	8b 44 24 38          	mov    0x38(%esp),%eax
    90c7:	83 c0 01             	add    $0x1,%eax
    90ca:	89 44 24 38          	mov    %eax,0x38(%esp)
				precision = va_arg(args, int);
    90ce:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    90d3:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    90d7:	8b 40 fc             	mov    -0x4(%eax),%eax
    90da:	89 44 24 14          	mov    %eax,0x14(%esp)
			}
			if (precision < 0)
    90de:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    90e3:	79 08                	jns    90ed <vsprintf+0x168>
				precision = 0;
    90e5:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
    90ec:	00 
		}

		// 下面这段代码分析长度修饰符,并将其存入qualifer变量.
		/* get the conversion qualifier */
		qualifier = -1;
    90ed:	c7 44 24 10 ff ff ff 	movl   $0xffffffff,0x10(%esp)
    90f4:	ff 
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L') {
    90f5:	8b 44 24 38          	mov    0x38(%esp),%eax
    90f9:	0f b6 00             	movzbl (%eax),%eax
    90fc:	3c 68                	cmp    $0x68,%al
    90fe:	74 16                	je     9116 <vsprintf+0x191>
    9100:	8b 44 24 38          	mov    0x38(%esp),%eax
    9104:	0f b6 00             	movzbl (%eax),%eax
    9107:	3c 6c                	cmp    $0x6c,%al
    9109:	74 0b                	je     9116 <vsprintf+0x191>
    910b:	8b 44 24 38          	mov    0x38(%esp),%eax
    910f:	0f b6 00             	movzbl (%eax),%eax
    9112:	3c 4c                	cmp    $0x4c,%al
    9114:	75 19                	jne    912f <vsprintf+0x1aa>
			qualifier = *fmt;
    9116:	8b 44 24 38          	mov    0x38(%esp),%eax
    911a:	0f b6 00             	movzbl (%eax),%eax
    911d:	0f be c0             	movsbl %al,%eax
    9120:	89 44 24 10          	mov    %eax,0x10(%esp)
			++fmt;
    9124:	8b 44 24 38          	mov    0x38(%esp),%eax
    9128:	83 c0 01             	add    $0x1,%eax
    912b:	89 44 24 38          	mov    %eax,0x38(%esp)
		}

		// 下面分析转换指示符.
		switch (*fmt) {
    912f:	8b 44 24 38          	mov    0x38(%esp),%eax
    9133:	0f b6 00             	movzbl (%eax),%eax
    9136:	0f be c0             	movsbl %al,%eax
    9139:	83 e8 58             	sub    $0x58,%eax
    913c:	83 f8 20             	cmp    $0x20,%eax
    913f:	0f 87 3a 02 00 00    	ja     937f <vsprintf+0x3fa>
    9145:	8b 04 85 04 30 02 00 	mov    0x23004(,%eax,4),%eax
    914c:	ff e0                	jmp    *%eax
		// 如果转换指示符是'c',则表示对应参数应是字符.此时如果标志域表明不是左靠齐,则该字段前面放入'宽度域值-1'个空格字符,然后再放入参数字符.如果
		// 宽度域还大于0,则表示左靠齐,则在参数字符后面添加'宽度值-1'个空格字符.
		case 'c':
			if (!(flags & LEFT))
    914e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    9152:	83 e0 10             	and    $0x10,%eax
    9155:	85 c0                	test   %eax,%eax
    9157:	75 1c                	jne    9175 <vsprintf+0x1f0>
				while (--field_width > 0)
    9159:	eb 0e                	jmp    9169 <vsprintf+0x1e4>
					*str++ = ' ';
    915b:	8b 44 24 24          	mov    0x24(%esp),%eax
    915f:	8d 50 01             	lea    0x1(%eax),%edx
    9162:	89 54 24 24          	mov    %edx,0x24(%esp)
    9166:	c6 00 20             	movb   $0x20,(%eax)
		switch (*fmt) {
		// 如果转换指示符是'c',则表示对应参数应是字符.此时如果标志域表明不是左靠齐,则该字段前面放入'宽度域值-1'个空格字符,然后再放入参数字符.如果
		// 宽度域还大于0,则表示左靠齐,则在参数字符后面添加'宽度值-1'个空格字符.
		case 'c':
			if (!(flags & LEFT))
				while (--field_width > 0)
    9169:	83 6c 24 18 01       	subl   $0x1,0x18(%esp)
    916e:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    9173:	7f e6                	jg     915b <vsprintf+0x1d6>
					*str++ = ' ';
			*str++ = (unsigned char) va_arg(args, int);
    9175:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    917a:	8b 44 24 24          	mov    0x24(%esp),%eax
    917e:	8d 50 01             	lea    0x1(%eax),%edx
    9181:	89 54 24 24          	mov    %edx,0x24(%esp)
    9185:	8b 54 24 3c          	mov    0x3c(%esp),%edx
    9189:	83 ea 04             	sub    $0x4,%edx
    918c:	8b 12                	mov    (%edx),%edx
    918e:	88 10                	mov    %dl,(%eax)
			while (--field_width > 0)
    9190:	eb 0e                	jmp    91a0 <vsprintf+0x21b>
				*str++ = ' ';
    9192:	8b 44 24 24          	mov    0x24(%esp),%eax
    9196:	8d 50 01             	lea    0x1(%eax),%edx
    9199:	89 54 24 24          	mov    %edx,0x24(%esp)
    919d:	c6 00 20             	movb   $0x20,(%eax)
		case 'c':
			if (!(flags & LEFT))
				while (--field_width > 0)
					*str++ = ' ';
			*str++ = (unsigned char) va_arg(args, int);
			while (--field_width > 0)
    91a0:	83 6c 24 18 01       	subl   $0x1,0x18(%esp)
    91a5:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    91aa:	7f e6                	jg     9192 <vsprintf+0x20d>
				*str++ = ' ';
			break;
    91ac:	e9 14 02 00 00       	jmp    93c5 <vsprintf+0x440>

		// 如果转换指示符是's',则表示对应参数是字符串.首先取参数字符串的长度,若其超过了精度域值,则扩展精度=字符串长度.此时如果标志域表明不是左靠齐,
		// 则该字段前放入'宽度值-字符串长度'个空格字符.然后再放入参数字符串.如果宽度域还大于0,则表示为左靠齐,则在参数字符串后面添加'宽度值-字符串长
		// 度'个空格字符.
		case 's':
			s = va_arg(args, char *);
    91b1:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    91b6:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    91ba:	8b 40 fc             	mov    -0x4(%eax),%eax
    91bd:	89 44 24 20          	mov    %eax,0x20(%esp)
			len = strlen(s);
    91c1:	ff 74 24 20          	pushl  0x20(%esp)
    91c5:	e8 bd fa ff ff       	call   8c87 <strlen>
    91ca:	83 c4 04             	add    $0x4,%esp
    91cd:	89 44 24 2c          	mov    %eax,0x2c(%esp)
			if (precision < 0)
    91d1:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    91d6:	79 0a                	jns    91e2 <vsprintf+0x25d>
				precision = len;
    91d8:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    91dc:	89 44 24 14          	mov    %eax,0x14(%esp)
    91e0:	eb 12                	jmp    91f4 <vsprintf+0x26f>
			else if (len > precision)
    91e2:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    91e6:	3b 44 24 14          	cmp    0x14(%esp),%eax
    91ea:	7e 08                	jle    91f4 <vsprintf+0x26f>
				len = precision;
    91ec:	8b 44 24 14          	mov    0x14(%esp),%eax
    91f0:	89 44 24 2c          	mov    %eax,0x2c(%esp)

			if (!(flags & LEFT))
    91f4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    91f8:	83 e0 10             	and    $0x10,%eax
    91fb:	85 c0                	test   %eax,%eax
    91fd:	75 21                	jne    9220 <vsprintf+0x29b>
				while (len < field_width--)
    91ff:	eb 0e                	jmp    920f <vsprintf+0x28a>
					*str++ = ' ';
    9201:	8b 44 24 24          	mov    0x24(%esp),%eax
    9205:	8d 50 01             	lea    0x1(%eax),%edx
    9208:	89 54 24 24          	mov    %edx,0x24(%esp)
    920c:	c6 00 20             	movb   $0x20,(%eax)
				precision = len;
			else if (len > precision)
				len = precision;

			if (!(flags & LEFT))
				while (len < field_width--)
    920f:	8b 44 24 18          	mov    0x18(%esp),%eax
    9213:	8d 50 ff             	lea    -0x1(%eax),%edx
    9216:	89 54 24 18          	mov    %edx,0x18(%esp)
    921a:	3b 44 24 2c          	cmp    0x2c(%esp),%eax
    921e:	7f e1                	jg     9201 <vsprintf+0x27c>
					*str++ = ' ';
			for (i = 0; i < len; ++i)
    9220:	c7 44 24 28 00 00 00 	movl   $0x0,0x28(%esp)
    9227:	00 
    9228:	eb 20                	jmp    924a <vsprintf+0x2c5>
				*str++ = *s++;
    922a:	8b 44 24 24          	mov    0x24(%esp),%eax
    922e:	8d 50 01             	lea    0x1(%eax),%edx
    9231:	89 54 24 24          	mov    %edx,0x24(%esp)
    9235:	8b 54 24 20          	mov    0x20(%esp),%edx
    9239:	8d 4a 01             	lea    0x1(%edx),%ecx
    923c:	89 4c 24 20          	mov    %ecx,0x20(%esp)
    9240:	0f b6 12             	movzbl (%edx),%edx
    9243:	88 10                	mov    %dl,(%eax)
				len = precision;

			if (!(flags & LEFT))
				while (len < field_width--)
					*str++ = ' ';
			for (i = 0; i < len; ++i)
    9245:	83 44 24 28 01       	addl   $0x1,0x28(%esp)
    924a:	8b 44 24 28          	mov    0x28(%esp),%eax
    924e:	3b 44 24 2c          	cmp    0x2c(%esp),%eax
    9252:	7c d6                	jl     922a <vsprintf+0x2a5>
				*str++ = *s++;
			while (len < field_width--)
    9254:	eb 0e                	jmp    9264 <vsprintf+0x2df>
				*str++ = ' ';
    9256:	8b 44 24 24          	mov    0x24(%esp),%eax
    925a:	8d 50 01             	lea    0x1(%eax),%edx
    925d:	89 54 24 24          	mov    %edx,0x24(%esp)
    9261:	c6 00 20             	movb   $0x20,(%eax)
			if (!(flags & LEFT))
				while (len < field_width--)
					*str++ = ' ';
			for (i = 0; i < len; ++i)
				*str++ = *s++;
			while (len < field_width--)
    9264:	8b 44 24 18          	mov    0x18(%esp),%eax
    9268:	8d 50 ff             	lea    -0x1(%eax),%edx
    926b:	89 54 24 18          	mov    %edx,0x18(%esp)
    926f:	3b 44 24 2c          	cmp    0x2c(%esp),%eax
    9273:	7f e1                	jg     9256 <vsprintf+0x2d1>
				*str++ = ' ';
			break;
    9275:	e9 4b 01 00 00       	jmp    93c5 <vsprintf+0x440>

		// 如果格式转换符是'o',表示需将对应的参数转换成八进制数的字符串.调用number()函数处理.
		case 'o':
			str = number(str, va_arg(args, unsigned long), 8,
    927a:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    927f:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    9283:	83 e8 04             	sub    $0x4,%eax
    9286:	8b 00                	mov    (%eax),%eax
    9288:	ff 74 24 1c          	pushl  0x1c(%esp)
    928c:	ff 74 24 18          	pushl  0x18(%esp)
    9290:	ff 74 24 20          	pushl  0x20(%esp)
    9294:	6a 08                	push   $0x8
    9296:	50                   	push   %eax
    9297:	ff 74 24 38          	pushl  0x38(%esp)
    929b:	e8 60 fa ff ff       	call   8d00 <number>
    92a0:	83 c4 18             	add    $0x18,%esp
    92a3:	89 44 24 24          	mov    %eax,0x24(%esp)
				field_width, precision, flags);
			break;
    92a7:	e9 19 01 00 00       	jmp    93c5 <vsprintf+0x440>

		// 如果格式转换符是'p',表示对应参数是一个指针类型.此时若该参数没有设置宽度域,则默认宽度为8,并且需要添零.然后调用number()函数进行处理.
		case 'p':
			if (field_width == -1) {
    92ac:	83 7c 24 18 ff       	cmpl   $0xffffffff,0x18(%esp)
    92b1:	75 0d                	jne    92c0 <vsprintf+0x33b>
				field_width = 8;
    92b3:	c7 44 24 18 08 00 00 	movl   $0x8,0x18(%esp)
    92ba:	00 
				flags |= ZEROPAD;
    92bb:	83 4c 24 1c 01       	orl    $0x1,0x1c(%esp)
			}
			str = number(str,
				(unsigned long) va_arg(args, void *), 16,
    92c0:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    92c5:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    92c9:	83 e8 04             	sub    $0x4,%eax
    92cc:	8b 00                	mov    (%eax),%eax
		case 'p':
			if (field_width == -1) {
				field_width = 8;
				flags |= ZEROPAD;
			}
			str = number(str,
    92ce:	ff 74 24 1c          	pushl  0x1c(%esp)
    92d2:	ff 74 24 18          	pushl  0x18(%esp)
    92d6:	ff 74 24 20          	pushl  0x20(%esp)
    92da:	6a 10                	push   $0x10
    92dc:	50                   	push   %eax
    92dd:	ff 74 24 38          	pushl  0x38(%esp)
    92e1:	e8 1a fa ff ff       	call   8d00 <number>
    92e6:	83 c4 18             	add    $0x18,%esp
    92e9:	89 44 24 24          	mov    %eax,0x24(%esp)
				(unsigned long) va_arg(args, void *), 16,
				field_width, precision, flags);
			break;
    92ed:	e9 d3 00 00 00       	jmp    93c5 <vsprintf+0x440>

		// 如果格式转换指示是'x'或'X',则表示对应参数需要打印成十六进制数输出.'x'表示用定字母表示.
		case 'x':
			flags |= SMALL;
    92f2:	83 4c 24 1c 40       	orl    $0x40,0x1c(%esp)
		case 'X':
			str = number(str, va_arg(args, unsigned long), 16,
    92f7:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    92fc:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    9300:	83 e8 04             	sub    $0x4,%eax
    9303:	8b 00                	mov    (%eax),%eax
    9305:	ff 74 24 1c          	pushl  0x1c(%esp)
    9309:	ff 74 24 18          	pushl  0x18(%esp)
    930d:	ff 74 24 20          	pushl  0x20(%esp)
    9311:	6a 10                	push   $0x10
    9313:	50                   	push   %eax
    9314:	ff 74 24 38          	pushl  0x38(%esp)
    9318:	e8 e3 f9 ff ff       	call   8d00 <number>
    931d:	83 c4 18             	add    $0x18,%esp
    9320:	89 44 24 24          	mov    %eax,0x24(%esp)
				field_width, precision, flags);
			break;
    9324:	e9 9c 00 00 00       	jmp    93c5 <vsprintf+0x440>

		// 如果格式转换字符是'd','i'或'u',则表示对应参数是整数,'d','i'代表符号整数,因此需要加上带符号标志.'u'代表无符号整数.
		case 'd':
		case 'i':
			flags |= SIGN;
    9329:	83 4c 24 1c 02       	orl    $0x2,0x1c(%esp)
		case 'u':
			str = number(str, va_arg(args, unsigned long), 10,
    932e:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    9333:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    9337:	83 e8 04             	sub    $0x4,%eax
    933a:	8b 00                	mov    (%eax),%eax
    933c:	ff 74 24 1c          	pushl  0x1c(%esp)
    9340:	ff 74 24 18          	pushl  0x18(%esp)
    9344:	ff 74 24 20          	pushl  0x20(%esp)
    9348:	6a 0a                	push   $0xa
    934a:	50                   	push   %eax
    934b:	ff 74 24 38          	pushl  0x38(%esp)
    934f:	e8 ac f9 ff ff       	call   8d00 <number>
    9354:	83 c4 18             	add    $0x18,%esp
    9357:	89 44 24 24          	mov    %eax,0x24(%esp)
				field_width, precision, flags);
			break;
    935b:	eb 68                	jmp    93c5 <vsprintf+0x440>

		// 若格式转换指示符是'n',则表示要把目前为止转换输出字符数保存到对应参数指针指定的位置中.首先利用va_arg()取得该参数指针,然后将已经转换好
		// 的字符数存入该指示的位置.
		case 'n':
			ip = va_arg(args, int *);
    935d:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    9362:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    9366:	8b 40 fc             	mov    -0x4(%eax),%eax
    9369:	89 44 24 0c          	mov    %eax,0xc(%esp)
			*ip = (str - buf);
    936d:	8b 54 24 24          	mov    0x24(%esp),%edx
    9371:	8b 44 24 34          	mov    0x34(%esp),%eax
    9375:	29 c2                	sub    %eax,%edx
    9377:	8b 44 24 0c          	mov    0xc(%esp),%eax
    937b:	89 10                	mov    %edx,(%eax)
			break;
    937d:	eb 46                	jmp    93c5 <vsprintf+0x440>

		// 若格式转换符不是'%',则表示格式字符串有错,直接将一个'%'写入输出串中.
		// 如果格式转换符的位置处还有字符,则也直接将该字符写入输出串中,并返回前面继续处理格式字符串.否则表示已经处理到格式字符串的结尾处,则退出循环.
		default:
			if (*fmt != '%')
    937f:	8b 44 24 38          	mov    0x38(%esp),%eax
    9383:	0f b6 00             	movzbl (%eax),%eax
    9386:	3c 25                	cmp    $0x25,%al
    9388:	74 0e                	je     9398 <vsprintf+0x413>
				*str++ = '%';
    938a:	8b 44 24 24          	mov    0x24(%esp),%eax
    938e:	8d 50 01             	lea    0x1(%eax),%edx
    9391:	89 54 24 24          	mov    %edx,0x24(%esp)
    9395:	c6 00 25             	movb   $0x25,(%eax)
			if (*fmt)
    9398:	8b 44 24 38          	mov    0x38(%esp),%eax
    939c:	0f b6 00             	movzbl (%eax),%eax
    939f:	84 c0                	test   %al,%al
    93a1:	74 16                	je     93b9 <vsprintf+0x434>
				*str++ = *fmt;
    93a3:	8b 44 24 24          	mov    0x24(%esp),%eax
    93a7:	8d 50 01             	lea    0x1(%eax),%edx
    93aa:	89 54 24 24          	mov    %edx,0x24(%esp)
    93ae:	8b 54 24 38          	mov    0x38(%esp),%edx
    93b2:	0f b6 12             	movzbl (%edx),%edx
    93b5:	88 10                	mov    %dl,(%eax)
			else
				--fmt;
			break;
    93b7:	eb 0b                	jmp    93c4 <vsprintf+0x43f>
			if (*fmt != '%')
				*str++ = '%';
			if (*fmt)
				*str++ = *fmt;
			else
				--fmt;
    93b9:	8b 44 24 38          	mov    0x38(%esp),%eax
    93bd:	83 e8 01             	sub    $0x1,%eax
    93c0:	89 44 24 38          	mov    %eax,0x38(%esp)
			break;
    93c4:	90                   	nop
				   											number of chars for from string */
														/* min.整数数字个数;max.字符串中字符个数 */
	int qualifier;										/* 'h', 'l', or 'L' for integer fields */	/* 'h','l',或 'L'用于整数字段 */

	// 首先将字符指针指向buf,然后扫描格式字符串,对各个格式转换指示进行相应的处理.
	for (str=buf ; *fmt ; ++fmt) {
    93c5:	8b 44 24 38          	mov    0x38(%esp),%eax
    93c9:	83 c0 01             	add    $0x1,%eax
    93cc:	89 44 24 38          	mov    %eax,0x38(%esp)
    93d0:	8b 44 24 38          	mov    0x38(%esp),%eax
    93d4:	0f b6 00             	movzbl (%eax),%eax
    93d7:	84 c0                	test   %al,%al
    93d9:	0f 85 b6 fb ff ff    	jne    8f95 <vsprintf+0x10>
			else
				--fmt;
			break;
		}
	}
	*str = '\0';										// 最后在转换好的字符串结尾处添上null.
    93df:	8b 44 24 24          	mov    0x24(%esp),%eax
    93e3:	c6 00 00             	movb   $0x0,(%eax)
	return str - buf;									// 返回转换好的字符串长度值.
    93e6:	8b 54 24 24          	mov    0x24(%esp),%edx
    93ea:	8b 44 24 34          	mov    0x34(%esp),%eax
    93ee:	29 c2                	sub    %eax,%edx
    93f0:	89 d0                	mov    %edx,%eax
}
    93f2:	83 c4 30             	add    $0x30,%esp
    93f5:	c3                   	ret    

000093f6 <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
    93f6:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
    93f7:	8b 44 24 08          	mov    0x8(%esp),%eax
    93fb:	64 8a 00             	mov    %fs:(%eax),%al
    93fe:	89 c3                	mov    %eax,%ebx
	return _v;
    9400:	89 d8                	mov    %ebx,%eax
}
    9402:	5b                   	pop    %ebx
    9403:	c3                   	ret    

00009404 <get_fs_word>:
//// 读取fs段中指定地址处的字.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的字.
static inline unsigned short get_fs_word(const unsigned short *addr)
{
    9404:	83 ec 10             	sub    $0x10,%esp
	unsigned short _v;

	__asm__ ("movw %%fs:%1,%0":"=q" (_v):"m" (*addr));
    9407:	8b 44 24 14          	mov    0x14(%esp),%eax
    940b:	64 66 8b 00          	mov    %fs:(%eax),%ax
    940f:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	return _v;
    9414:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
}
    9419:	83 c4 10             	add    $0x10,%esp
    941c:	c3                   	ret    

0000941d <get_fs_long>:
//// 读取fs段中指定地址处的长字(4字节).
// 参数:addr - 指定的内存地址.
// %0 - (返回的长字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的长字.
static inline unsigned long get_fs_long(const unsigned long *addr)
{
    941d:	83 ec 10             	sub    $0x10,%esp
	unsigned long _v;

	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
    9420:	8b 44 24 14          	mov    0x14(%esp),%eax
    9424:	64 8b 00             	mov    %fs:(%eax),%eax
    9427:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
    942b:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    942f:	83 c4 10             	add    $0x10,%esp
    9432:	c3                   	ret    

00009433 <put_fs_byte>:

//// 将一字节存放在fs段中指定内存地址处.
// 参数:val - 字节值;addr - 内存地址.
// %0 - 寄存器(字节值val);%1 - (内存地址addr).
static inline void put_fs_byte(char val,char *addr)
{
    9433:	83 ec 04             	sub    $0x4,%esp
    9436:	8b 44 24 08          	mov    0x8(%esp),%eax
    943a:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
    943d:	0f b6 04 24          	movzbl (%esp),%eax
    9441:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9445:	64 88 02             	mov    %al,%fs:(%edx)
}
    9448:	90                   	nop
    9449:	83 c4 04             	add    $0x4,%esp
    944c:	c3                   	ret    

0000944d <put_fs_word>:

//// 将一字存放在fs段中指定内存地址处.
// 参数:val - 字值;addr - 内存地址.
// %0 - 寄存器(字值val);%1 - (内存地址addr).
static inline void put_fs_word(short val,short * addr)
{
    944d:	83 ec 04             	sub    $0x4,%esp
    9450:	8b 44 24 08          	mov    0x8(%esp),%eax
    9454:	66 89 04 24          	mov    %ax,(%esp)
__asm__ ("movw %0,%%fs:%1"::"q" (val),"m" (*addr));
    9458:	0f b7 04 24          	movzwl (%esp),%eax
    945c:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9460:	64 66 89 02          	mov    %ax,%fs:(%edx)
}
    9464:	90                   	nop
    9465:	83 c4 04             	add    $0x4,%esp
    9468:	c3                   	ret    

00009469 <put_fs_long>:
//// 将一长字存放在fs段中指定内存地址处.
// 参数:val - 长字值;addr - 内存地址.
// %0 - 寄存器(长字值val);%1 - (内存地址addr).
static inline void put_fs_long(unsigned long val,unsigned long * addr)
{
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
    9469:	8b 44 24 04          	mov    0x4(%esp),%eax
    946d:	8b 54 24 08          	mov    0x8(%esp),%edx
    9471:	64 89 02             	mov    %eax,%fs:(%edx)
}
    9474:	90                   	nop
    9475:	c3                   	ret    

00009476 <memset>:

// 用字符填写指定长度内存块.
// 用字符c填写s指向的内存区域,共填count字节.
// %0 - eax(字符c),%1 - edi(内存地址),%2 - ecx(字节数count).
static inline void * memset(void * s, char c, int count)
{
    9476:	57                   	push   %edi
    9477:	83 ec 04             	sub    $0x4,%esp
    947a:	8b 44 24 10          	mov    0x10(%esp),%eax
    947e:	88 04 24             	mov    %al,(%esp)
__asm__(
    9481:	0f b6 04 24          	movzbl (%esp),%eax
    9485:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9489:	8b 4c 24 14          	mov    0x14(%esp),%ecx
    948d:	89 d7                	mov    %edx,%edi
    948f:	fc                   	cld    
    9490:	57                   	push   %edi
    9491:	f3 aa                	rep stos %al,%es:(%edi)
    9493:	5f                   	pop    %edi
		"rep\n\t"											// 重复ecx指定的次数,执行.
		"stosb\n\t"											// 将al中字符存入es:[edi]中,并且edi++.
		"popl %%edi"
		::"a" (c), "D" (s), "c" (count)
		:);
return s;
    9494:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    9498:	83 c4 04             	add    $0x4,%esp
    949b:	5f                   	pop    %edi
    949c:	c3                   	ret    

0000949d <sys_ftime>:

// 返回日期和时间（ftime - Fetch time）。
// 以下返回值是-ENOSYS的系统调用函数均表示在本版本内核中还未实现。
int sys_ftime()
{
	return -ENOSYS;
    949d:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    94a2:	c3                   	ret    

000094a3 <sys_break>:

int sys_break()
{
	return -ENOSYS;
    94a3:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    94a8:	c3                   	ret    

000094a9 <sys_ptrace>:

// 用于当前进程对子进程进行高度（debugging）。
int sys_ptrace()
{
	return -ENOSYS;
    94a9:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    94ae:	c3                   	ret    

000094af <sys_stty>:

// 改变并打印终端行设置。
int sys_stty()
{
	return -ENOSYS;
    94af:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    94b4:	c3                   	ret    

000094b5 <sys_gtty>:

// 取终端行设置信息。
int sys_gtty()
{
	return -ENOSYS;
    94b5:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    94ba:	c3                   	ret    

000094bb <sys_rename>:

// 修改文件名。
int sys_rename()
{
	return -ENOSYS;
    94bb:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    94c0:	c3                   	ret    

000094c1 <sys_prof>:

int sys_prof()
{
	return -ENOSYS;
    94c1:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    94c6:	c3                   	ret    

000094c7 <sys_setregid>:
// 设置当前任务的实际以及/或者有效组ID（gid）。如果任务没有超级用户特权，那么只能互换其实际组ID和有效组ID。
// 如果任务具有超级用户特权，就能任意设置有效的和实际的组ID。保留的gid（saved gid）被设置成与有效gid。实际
// 组ID是指进程当前的gid。
int sys_setregid(int rgid, int egid)
{
	if (rgid > 0) {
    94c7:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    94cc:	7e 3f                	jle    950d <sys_setregid+0x46>
		if ((current->gid == rgid) ||
    94ce:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    94d3:	0f b7 80 d2 02 00 00 	movzwl 0x2d2(%eax),%eax
    94da:	0f b7 c0             	movzwl %ax,%eax
    94dd:	3b 44 24 04          	cmp    0x4(%esp),%eax
    94e1:	74 11                	je     94f4 <sys_setregid+0x2d>
		    suser())
    94e3:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    94e8:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
// 如果任务具有超级用户特权，就能任意设置有效的和实际的组ID。保留的gid（saved gid）被设置成与有效gid。实际
// 组ID是指进程当前的gid。
int sys_setregid(int rgid, int egid)
{
	if (rgid > 0) {
		if ((current->gid == rgid) ||
    94ef:	66 85 c0             	test   %ax,%ax
    94f2:	75 12                	jne    9506 <sys_setregid+0x3f>
		    suser())
			current->gid = rgid;
    94f4:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    94f9:	8b 54 24 04          	mov    0x4(%esp),%edx
    94fd:	66 89 90 d2 02 00 00 	mov    %dx,0x2d2(%eax)
    9504:	eb 07                	jmp    950d <sys_setregid+0x46>
		else
			return(-EPERM);
    9506:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    950b:	eb 70                	jmp    957d <sys_setregid+0xb6>
	}
	if (egid > 0) {
    950d:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    9512:	7e 64                	jle    9578 <sys_setregid+0xb1>
		if ((current->gid == egid) ||
    9514:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9519:	0f b7 80 d2 02 00 00 	movzwl 0x2d2(%eax),%eax
    9520:	0f b7 c0             	movzwl %ax,%eax
    9523:	3b 44 24 08          	cmp    0x8(%esp),%eax
    9527:	74 26                	je     954f <sys_setregid+0x88>
		    (current->egid == egid) ||
    9529:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    952e:	0f b7 80 d4 02 00 00 	movzwl 0x2d4(%eax),%eax
    9535:	0f b7 c0             	movzwl %ax,%eax
			current->gid = rgid;
		else
			return(-EPERM);
	}
	if (egid > 0) {
		if ((current->gid == egid) ||
    9538:	3b 44 24 08          	cmp    0x8(%esp),%eax
    953c:	74 11                	je     954f <sys_setregid+0x88>
		    (current->egid == egid) ||
		    suser()) {
    953e:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9543:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
		else
			return(-EPERM);
	}
	if (egid > 0) {
		if ((current->gid == egid) ||
		    (current->egid == egid) ||
    954a:	66 85 c0             	test   %ax,%ax
    954d:	75 22                	jne    9571 <sys_setregid+0xaa>
		    suser()) {
			current->egid = egid;
    954f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9554:	8b 54 24 08          	mov    0x8(%esp),%edx
    9558:	66 89 90 d4 02 00 00 	mov    %dx,0x2d4(%eax)
			current->sgid = egid;
    955f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9564:	8b 54 24 08          	mov    0x8(%esp),%edx
    9568:	66 89 90 d6 02 00 00 	mov    %dx,0x2d6(%eax)
    956f:	eb 07                	jmp    9578 <sys_setregid+0xb1>
		} else
			return(-EPERM);
    9571:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    9576:	eb 05                	jmp    957d <sys_setregid+0xb6>
	}
	return 0;
    9578:	b8 00 00 00 00       	mov    $0x0,%eax
}
    957d:	c3                   	ret    

0000957e <sys_setgid>:
 */
// 设置进程组号（gid）。如果任务没有超级用户特权，它可以使用setgid()将其有效gid（effective gid）设置为成其保留
// gid（saved git）或其实际git（real gid）。如果任务有超级用户特权，则实际gid、有效gid和保留gid都被设置成参数
// 指定的gid。
int sys_setgid(int gid)
{
    957e:	53                   	push   %ebx
	if (suser())
    957f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9584:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    958b:	66 85 c0             	test   %ax,%ax
    958e:	75 3a                	jne    95ca <sys_setgid+0x4c>
		current->gid = current->egid = current->sgid = gid;
    9590:	8b 0d a0 e1 02 00    	mov    0x2e1a0,%ecx
    9596:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    959b:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    95a1:	8b 5c 24 08          	mov    0x8(%esp),%ebx
    95a5:	66 89 9a d6 02 00 00 	mov    %bx,0x2d6(%edx)
    95ac:	0f b7 92 d6 02 00 00 	movzwl 0x2d6(%edx),%edx
    95b3:	66 89 90 d4 02 00 00 	mov    %dx,0x2d4(%eax)
    95ba:	0f b7 80 d4 02 00 00 	movzwl 0x2d4(%eax),%eax
    95c1:	66 89 81 d2 02 00 00 	mov    %ax,0x2d2(%ecx)
    95c8:	eb 43                	jmp    960d <sys_setgid+0x8f>
	else if ((gid == current->gid) || (gid == current->sgid))
    95ca:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    95cf:	0f b7 80 d2 02 00 00 	movzwl 0x2d2(%eax),%eax
    95d6:	0f b7 c0             	movzwl %ax,%eax
    95d9:	3b 44 24 08          	cmp    0x8(%esp),%eax
    95dd:	74 15                	je     95f4 <sys_setgid+0x76>
    95df:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    95e4:	0f b7 80 d6 02 00 00 	movzwl 0x2d6(%eax),%eax
    95eb:	0f b7 c0             	movzwl %ax,%eax
    95ee:	3b 44 24 08          	cmp    0x8(%esp),%eax
    95f2:	75 12                	jne    9606 <sys_setgid+0x88>
		current->egid = gid;
    95f4:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    95f9:	8b 54 24 08          	mov    0x8(%esp),%edx
    95fd:	66 89 90 d4 02 00 00 	mov    %dx,0x2d4(%eax)
    9604:	eb 07                	jmp    960d <sys_setgid+0x8f>
	else
		return -EPERM;
    9606:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    960b:	eb 05                	jmp    9612 <sys_setgid+0x94>
	return 0;
    960d:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9612:	5b                   	pop    %ebx
    9613:	c3                   	ret    

00009614 <sys_acct>:

// 打开或关闭进程计账功能。
int sys_acct()
{
	return -ENOSYS;
    9614:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    9619:	c3                   	ret    

0000961a <sys_phys>:

// 映射任意物理内在到进程的虚拟地址空间。
int sys_phys()
{
	return -ENOSYS;
    961a:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    961f:	c3                   	ret    

00009620 <sys_lock>:

int sys_lock()
{
	return -ENOSYS;
    9620:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    9625:	c3                   	ret    

00009626 <sys_mpx>:

int sys_mpx()
{
	return -ENOSYS;
    9626:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    962b:	c3                   	ret    

0000962c <sys_ulimit>:

int sys_ulimit()
{
	return -ENOSYS;
    962c:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    9631:	c3                   	ret    

00009632 <sys_time>:

// 返回从1970年1月1日00:00:00 GMT开始计时的时间值（秒）。如果tloc不为null，则时间值也存储在那里。
// 由于参数是一个指针，而其所指位置在用户空间，因此需要使用函数put_fs_long()来访问该值。在进入内核中运行时，段
// 寄存器fs默认地指向当前用户数据空间。因此该函数就可利用fs来访问用户空间中的值。
int sys_time(long * tloc)
{
    9632:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	i = CURRENT_TIME;
    9635:	a1 00 eb 02 00       	mov    0x2eb00,%eax
    963a:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
    9640:	01 d0                	add    %edx,%eax
    9642:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9647:	f7 e2                	mul    %edx
    9649:	c1 ea 05             	shr    $0x5,%edx
    964c:	a1 04 eb 02 00       	mov    0x2eb04,%eax
    9651:	01 d0                	add    %edx,%eax
    9653:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (tloc) {
    9657:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    965c:	74 25                	je     9683 <sys_time+0x51>
		verify_area(tloc,4);            				// 验证内存容量是否够（这里是4字节）。
    965e:	83 ec 08             	sub    $0x8,%esp
    9661:	6a 04                	push   $0x4
    9663:	ff 74 24 2c          	pushl  0x2c(%esp)
    9667:	e8 37 ed ff ff       	call   83a3 <verify_area>
    966c:	83 c4 10             	add    $0x10,%esp
		put_fs_long(i,(unsigned long *)tloc);   		// 放入用户数据段tloc处。
    966f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9673:	83 ec 08             	sub    $0x8,%esp
    9676:	ff 74 24 28          	pushl  0x28(%esp)
    967a:	50                   	push   %eax
    967b:	e8 e9 fd ff ff       	call   9469 <put_fs_long>
    9680:	83 c4 10             	add    $0x10,%esp
	}
	return i;
    9683:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    9687:	83 c4 1c             	add    $0x1c,%esp
    968a:	c3                   	ret    

0000968b <sys_setreuid>:
 * 用setuid()和保存的gid的程序将会与POSIX 100%兼容。
 */
// 设置任务的实际以及/或者有效的用户ID（uid）。如果任务没有超级用户特权，那么只能互换其实际的uid和有效的uid。如果
// 任务具有超级用户特权，就能任意设置有效的和实际的用户ID。保存的uid（saved uid）被设置成与有效uid同值。
int sys_setreuid(int ruid, int euid)
{
    968b:	83 ec 10             	sub    $0x10,%esp
	int old_ruid = current->uid;
    968e:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9693:	0f b7 80 cc 02 00 00 	movzwl 0x2cc(%eax),%eax
    969a:	0f b7 c0             	movzwl %ax,%eax
    969d:	89 44 24 0c          	mov    %eax,0xc(%esp)

	if (ruid > 0) {
    96a1:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    96a6:	7e 49                	jle    96f1 <sys_setreuid+0x66>
		if ((current->euid == ruid) ||
    96a8:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    96ad:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    96b4:	0f b7 c0             	movzwl %ax,%eax
    96b7:	3b 44 24 14          	cmp    0x14(%esp),%eax
    96bb:	74 1b                	je     96d8 <sys_setreuid+0x4d>
    96bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    96c1:	3b 44 24 14          	cmp    0x14(%esp),%eax
    96c5:	74 11                	je     96d8 <sys_setreuid+0x4d>
                    (old_ruid == ruid) ||
		    suser())
    96c7:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    96cc:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
{
	int old_ruid = current->uid;

	if (ruid > 0) {
		if ((current->euid == ruid) ||
                    (old_ruid == ruid) ||
    96d3:	66 85 c0             	test   %ax,%ax
    96d6:	75 12                	jne    96ea <sys_setreuid+0x5f>
		    suser())
			current->uid = ruid;
    96d8:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    96dd:	8b 54 24 14          	mov    0x14(%esp),%edx
    96e1:	66 89 90 cc 02 00 00 	mov    %dx,0x2cc(%eax)
    96e8:	eb 07                	jmp    96f1 <sys_setreuid+0x66>
		else
			return(-EPERM);
    96ea:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    96ef:	eb 75                	jmp    9766 <sys_setreuid+0xdb>
	}
	if (euid > 0) {
    96f1:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    96f6:	7e 69                	jle    9761 <sys_setreuid+0xd6>
		if ((old_ruid == euid) ||
    96f8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    96fc:	3b 44 24 18          	cmp    0x18(%esp),%eax
    9700:	74 26                	je     9728 <sys_setreuid+0x9d>
                    (current->euid == euid) ||
    9702:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9707:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    970e:	0f b7 c0             	movzwl %ax,%eax
			current->uid = ruid;
		else
			return(-EPERM);
	}
	if (euid > 0) {
		if ((old_ruid == euid) ||
    9711:	3b 44 24 18          	cmp    0x18(%esp),%eax
    9715:	74 11                	je     9728 <sys_setreuid+0x9d>
                    (current->euid == euid) ||
		    suser()) {
    9717:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    971c:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
		else
			return(-EPERM);
	}
	if (euid > 0) {
		if ((old_ruid == euid) ||
                    (current->euid == euid) ||
    9723:	66 85 c0             	test   %ax,%ax
    9726:	75 22                	jne    974a <sys_setreuid+0xbf>
		    suser()) {
			current->euid = euid;
    9728:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    972d:	8b 54 24 18          	mov    0x18(%esp),%edx
    9731:	66 89 90 ce 02 00 00 	mov    %dx,0x2ce(%eax)
			current->suid = euid;
    9738:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    973d:	8b 54 24 18          	mov    0x18(%esp),%edx
    9741:	66 89 90 d0 02 00 00 	mov    %dx,0x2d0(%eax)
    9748:	eb 17                	jmp    9761 <sys_setreuid+0xd6>
		} else {
			current->uid = old_ruid;
    974a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    974f:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9753:	66 89 90 cc 02 00 00 	mov    %dx,0x2cc(%eax)
			return(-EPERM);
    975a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    975f:	eb 05                	jmp    9766 <sys_setreuid+0xdb>
		}
	}
	return 0;
    9761:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9766:	83 c4 10             	add    $0x10,%esp
    9769:	c3                   	ret    

0000976a <sys_setuid>:
 */
// 设置任务用户ID（uid）。如果任务没有超级用户特权，它可以使用setuid()将其有效的uid（effective uid）设置成其保存
// 的uid（saved uid）或其实际的uid（real uid）。如果用户有超级用户特权，则实际的uid、有效的uid和保存的uid都会被
// 设置成参数指定的uid。
int sys_setuid(int uid)
{
    976a:	53                   	push   %ebx
	if (suser())
    976b:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9770:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    9777:	66 85 c0             	test   %ax,%ax
    977a:	75 3a                	jne    97b6 <sys_setuid+0x4c>
		current->uid = current->euid = current->suid = uid;
    977c:	8b 0d a0 e1 02 00    	mov    0x2e1a0,%ecx
    9782:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9787:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    978d:	8b 5c 24 08          	mov    0x8(%esp),%ebx
    9791:	66 89 9a d0 02 00 00 	mov    %bx,0x2d0(%edx)
    9798:	0f b7 92 d0 02 00 00 	movzwl 0x2d0(%edx),%edx
    979f:	66 89 90 ce 02 00 00 	mov    %dx,0x2ce(%eax)
    97a6:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    97ad:	66 89 81 cc 02 00 00 	mov    %ax,0x2cc(%ecx)
    97b4:	eb 43                	jmp    97f9 <sys_setuid+0x8f>
	else if ((uid == current->uid) || (uid == current->suid))
    97b6:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    97bb:	0f b7 80 cc 02 00 00 	movzwl 0x2cc(%eax),%eax
    97c2:	0f b7 c0             	movzwl %ax,%eax
    97c5:	3b 44 24 08          	cmp    0x8(%esp),%eax
    97c9:	74 15                	je     97e0 <sys_setuid+0x76>
    97cb:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    97d0:	0f b7 80 d0 02 00 00 	movzwl 0x2d0(%eax),%eax
    97d7:	0f b7 c0             	movzwl %ax,%eax
    97da:	3b 44 24 08          	cmp    0x8(%esp),%eax
    97de:	75 12                	jne    97f2 <sys_setuid+0x88>
		current->euid = uid;
    97e0:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    97e5:	8b 54 24 08          	mov    0x8(%esp),%edx
    97e9:	66 89 90 ce 02 00 00 	mov    %dx,0x2ce(%eax)
    97f0:	eb 07                	jmp    97f9 <sys_setuid+0x8f>
	else
		return -EPERM;
    97f2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    97f7:	eb 05                	jmp    97fe <sys_setuid+0x94>
	return(0);
    97f9:	b8 00 00 00 00       	mov    $0x0,%eax
}
    97fe:	5b                   	pop    %ebx
    97ff:	c3                   	ret    

00009800 <sys_stime>:
// 由于参数是一个指针，而其所指位置在用户空间，因此需要使用函数get_fs_long()来访问该值。在进入内核中运行时，段
// 寄存器fs被默认地指向当前用户数据空间。因此该函数就可利用fs来访问用户空间中的值。函数参数提供的当前时间值减去
// 系统已经运行的时间秒值（jiffies/HZ）即是开机时间秒值。
int sys_stime(long * tptr)
{
	if (!suser())
    9800:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9805:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    980c:	66 85 c0             	test   %ax,%ax
    980f:	74 07                	je     9818 <sys_stime+0x18>
		return -EPERM;          					// 如果不是超级用户则出错返回（许可）。
    9811:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    9816:	eb 37                	jmp    984f <sys_stime+0x4f>
	startup_time = get_fs_long((unsigned long *)tptr) - jiffies / HZ;
    9818:	ff 74 24 04          	pushl  0x4(%esp)
    981c:	e8 fc fb ff ff       	call   941d <get_fs_long>
    9821:	83 c4 04             	add    $0x4,%esp
    9824:	89 c1                	mov    %eax,%ecx
    9826:	a1 00 eb 02 00       	mov    0x2eb00,%eax
    982b:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9830:	f7 e2                	mul    %edx
    9832:	89 d0                	mov    %edx,%eax
    9834:	c1 e8 05             	shr    $0x5,%eax
    9837:	29 c1                	sub    %eax,%ecx
    9839:	89 c8                	mov    %ecx,%eax
    983b:	a3 04 eb 02 00       	mov    %eax,0x2eb04
	jiffies_offset = 0;
    9840:	c7 05 08 eb 02 00 00 	movl   $0x0,0x2eb08
    9847:	00 00 00 
	return 0;
    984a:	b8 00 00 00 00       	mov    $0x0,%eax
}
    984f:	c3                   	ret    

00009850 <sys_times>:

// 获取当前任务运行时间统计值。
// 在tbuf所指用户数据空间处返回tms结构的任务运行时间统计值。tms结构中包括进程用户运行时间、内核（系统）时间、子进
// 程用户运行时间、子进程系统运行时间。函数返回值是系统运行到当前的嘀嗒数。
int sys_times(struct tms * tbuf)
{
    9850:	83 ec 0c             	sub    $0xc,%esp
	if (tbuf) {
    9853:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    9858:	0f 84 8b 00 00 00    	je     98e9 <sys_times+0x99>
		verify_area(tbuf,sizeof *tbuf);
    985e:	83 ec 08             	sub    $0x8,%esp
    9861:	6a 10                	push   $0x10
    9863:	ff 74 24 1c          	pushl  0x1c(%esp)
    9867:	e8 37 eb ff ff       	call   83a3 <verify_area>
    986c:	83 c4 10             	add    $0x10,%esp
		put_fs_long(current->utime,(unsigned long *)&tbuf->tms_utime);
    986f:	8b 44 24 10          	mov    0x10(%esp),%eax
    9873:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    9879:	8b 92 e0 02 00 00    	mov    0x2e0(%edx),%edx
    987f:	83 ec 08             	sub    $0x8,%esp
    9882:	50                   	push   %eax
    9883:	52                   	push   %edx
    9884:	e8 e0 fb ff ff       	call   9469 <put_fs_long>
    9889:	83 c4 10             	add    $0x10,%esp
		put_fs_long(current->stime,(unsigned long *)&tbuf->tms_stime);
    988c:	8b 44 24 10          	mov    0x10(%esp),%eax
    9890:	8d 50 04             	lea    0x4(%eax),%edx
    9893:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9898:	8b 80 e4 02 00 00    	mov    0x2e4(%eax),%eax
    989e:	83 ec 08             	sub    $0x8,%esp
    98a1:	52                   	push   %edx
    98a2:	50                   	push   %eax
    98a3:	e8 c1 fb ff ff       	call   9469 <put_fs_long>
    98a8:	83 c4 10             	add    $0x10,%esp
		put_fs_long(current->cutime,(unsigned long *)&tbuf->tms_cutime);
    98ab:	8b 44 24 10          	mov    0x10(%esp),%eax
    98af:	8d 50 08             	lea    0x8(%eax),%edx
    98b2:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    98b7:	8b 80 e8 02 00 00    	mov    0x2e8(%eax),%eax
    98bd:	83 ec 08             	sub    $0x8,%esp
    98c0:	52                   	push   %edx
    98c1:	50                   	push   %eax
    98c2:	e8 a2 fb ff ff       	call   9469 <put_fs_long>
    98c7:	83 c4 10             	add    $0x10,%esp
		put_fs_long(current->cstime,(unsigned long *)&tbuf->tms_cstime);
    98ca:	8b 44 24 10          	mov    0x10(%esp),%eax
    98ce:	8d 50 0c             	lea    0xc(%eax),%edx
    98d1:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    98d6:	8b 80 ec 02 00 00    	mov    0x2ec(%eax),%eax
    98dc:	83 ec 08             	sub    $0x8,%esp
    98df:	52                   	push   %edx
    98e0:	50                   	push   %eax
    98e1:	e8 83 fb ff ff       	call   9469 <put_fs_long>
    98e6:	83 c4 10             	add    $0x10,%esp
	}
	return jiffies;
    98e9:	a1 00 eb 02 00       	mov    0x2eb00,%eax
}
    98ee:	83 c4 0c             	add    $0xc,%esp
    98f1:	c3                   	ret    

000098f2 <sys_brk>:
// end_data_seg指定的值。该值必须大于代码结尾并且要小于堆栈结尾16KB。返回值是数据段的新结尾值（如果返回值与要求不
// 同，则表明有错误发生)。该函数并不被用户直接调用，而由libc库函数进行包装，并且返回值也不一样。
int sys_brk(unsigned long end_data_seg)
{
	// 如果参数值大于代码结尾，并且小于（堆栈 - 16KB），则设置新数据段结尾值。
	if (end_data_seg >= current->end_code &&
    98f2:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    98f7:	8b 80 1c 02 00 00    	mov    0x21c(%eax),%eax
    98fd:	3b 44 24 04          	cmp    0x4(%esp),%eax
    9901:	77 25                	ja     9928 <sys_brk+0x36>
	    end_data_seg < current->start_stack - 16384)
    9903:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9908:	8b 80 28 02 00 00    	mov    0x228(%eax),%eax
    990e:	2d 00 40 00 00       	sub    $0x4000,%eax
// end_data_seg指定的值。该值必须大于代码结尾并且要小于堆栈结尾16KB。返回值是数据段的新结尾值（如果返回值与要求不
// 同，则表明有错误发生)。该函数并不被用户直接调用，而由libc库函数进行包装，并且返回值也不一样。
int sys_brk(unsigned long end_data_seg)
{
	// 如果参数值大于代码结尾，并且小于（堆栈 - 16KB），则设置新数据段结尾值。
	if (end_data_seg >= current->end_code &&
    9913:	3b 44 24 04          	cmp    0x4(%esp),%eax
    9917:	76 0f                	jbe    9928 <sys_brk+0x36>
	    end_data_seg < current->start_stack - 16384)
		current->brk = end_data_seg;
    9919:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    991e:	8b 54 24 04          	mov    0x4(%esp),%edx
    9922:	89 90 24 02 00 00    	mov    %edx,0x224(%eax)
	return current->brk;            			// 返回进程当前的数据段结尾值。
    9928:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    992d:	8b 80 24 02 00 00    	mov    0x224(%eax),%eax
}
    9933:	c3                   	ret    

00009934 <sys_setpgid>:
// 设置指定进程pid的进程组号为pgid。
// 参数pid是指定进程的进程号。如果它为0,则让pid等于当前进程的进程号。参数pgid是指定的进程组号。如果它为0,则让它等于
// 进程组号。如果该函数用于将进程从一个进程组移到另一个进程组，则这两个进程组必须属于同一个会话（session）。在这种情
// 况下，参数pgid指定了要加入的现在进程组ID，此时该组的会话ID必须与将要加入进程的相同。
int sys_setpgid(int pid, int pgid)
{
    9934:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	// 如果参数pid为0,则pid取值为当前进程的进程号pid。如果参数pgid为0,则pgid也取值为当前进程的pid。[??这里与POSIX标
	// 准的描述有出入]。若pgid小于0,则返回无效错误码。
	if (!pid)
    9937:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    993c:	75 0f                	jne    994d <sys_setpgid+0x19>
		pid = current->pid;
    993e:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9943:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    9949:	89 44 24 20          	mov    %eax,0x20(%esp)
	if (!pgid)
    994d:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
    9952:	75 0f                	jne    9963 <sys_setpgid+0x2f>
		pgid = current->pid;
    9954:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9959:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    995f:	89 44 24 24          	mov    %eax,0x24(%esp)
	if (pgid < 0)
    9963:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
    9968:	79 0a                	jns    9974 <sys_setpgid+0x40>
		return -EINVAL;
    996a:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    996f:	e9 0e 01 00 00       	jmp    9a82 <sys_setpgid+0x14e>
	// 扫描任务数组，查找指定进程号pid的任务。如果找到了进程号是pid的进程，并且该进程的父进程就是当前进程或者该进程就是当
	// 前进程，那么若该任务已经是会话首领，则出错返回。若该任务的会话号（session）与当前进程的不同，或者指定的进程组号pgid
	// 与pid不同并且pgid进程组所属会话号与当前进程所属会话号不同，则也出错返回。否则把查找到的进程的pgrp设置为pgid，并
	// 返回0。若没有找到指定pid的进程，则返回进程不存在出错码。
	for (i = 0 ; i < NR_TASKS ; i++)
    9974:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    997b:	00 
    997c:	e9 f1 00 00 00       	jmp    9a72 <sys_setpgid+0x13e>
		if (task[i] && (task[i]->pid == pid) && ((task[i]->p_pptr == current) || (task[i] == current))) {
    9981:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9985:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    998c:	85 c0                	test   %eax,%eax
    998e:	0f 84 d9 00 00 00    	je     9a6d <sys_setpgid+0x139>
    9994:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9998:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    999f:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    99a5:	3b 44 24 20          	cmp    0x20(%esp),%eax
    99a9:	0f 85 be 00 00 00    	jne    9a6d <sys_setpgid+0x139>
    99af:	8b 44 24 0c          	mov    0xc(%esp),%eax
    99b3:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    99ba:	8b 90 bc 02 00 00    	mov    0x2bc(%eax),%edx
    99c0:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    99c5:	39 c2                	cmp    %eax,%edx
    99c7:	74 18                	je     99e1 <sys_setpgid+0xad>
    99c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    99cd:	8b 14 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%edx
    99d4:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    99d9:	39 c2                	cmp    %eax,%edx
    99db:	0f 85 8c 00 00 00    	jne    9a6d <sys_setpgid+0x139>
			if (task[i]->leader)
    99e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    99e5:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    99ec:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
    99f2:	85 c0                	test   %eax,%eax
    99f4:	74 0a                	je     9a00 <sys_setpgid+0xcc>
				return -EPERM;
    99f6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    99fb:	e9 82 00 00 00       	jmp    9a82 <sys_setpgid+0x14e>
			if ((task[i]->session != current->session) ||
    9a00:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9a04:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    9a0b:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
    9a11:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9a16:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
    9a1c:	39 c2                	cmp    %eax,%edx
    9a1e:	75 2a                	jne    9a4a <sys_setpgid+0x116>
    9a20:	8b 44 24 24          	mov    0x24(%esp),%eax
    9a24:	3b 44 24 20          	cmp    0x20(%esp),%eax
    9a28:	74 27                	je     9a51 <sys_setpgid+0x11d>
			    ((pgid != pid) &&
			     (session_of_pgrp(pgid) != current->session)))
    9a2a:	83 ec 0c             	sub    $0xc,%esp
    9a2d:	ff 74 24 30          	pushl  0x30(%esp)
    9a31:	e8 ac 10 00 00       	call   aae2 <session_of_pgrp>
    9a36:	83 c4 10             	add    $0x10,%esp
    9a39:	89 c2                	mov    %eax,%edx
    9a3b:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9a40:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
	for (i = 0 ; i < NR_TASKS ; i++)
		if (task[i] && (task[i]->pid == pid) && ((task[i]->p_pptr == current) || (task[i] == current))) {
			if (task[i]->leader)
				return -EPERM;
			if ((task[i]->session != current->session) ||
			    ((pgid != pid) &&
    9a46:	39 c2                	cmp    %eax,%edx
    9a48:	74 07                	je     9a51 <sys_setpgid+0x11d>
			     (session_of_pgrp(pgid) != current->session)))
				return -EPERM;
    9a4a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    9a4f:	eb 31                	jmp    9a82 <sys_setpgid+0x14e>
			task[i]->pgrp = pgid;
    9a51:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9a55:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    9a5c:	8b 54 24 24          	mov    0x24(%esp),%edx
    9a60:	89 90 30 02 00 00    	mov    %edx,0x230(%eax)
			return 0;
    9a66:	b8 00 00 00 00       	mov    $0x0,%eax
    9a6b:	eb 15                	jmp    9a82 <sys_setpgid+0x14e>
		return -EINVAL;
	// 扫描任务数组，查找指定进程号pid的任务。如果找到了进程号是pid的进程，并且该进程的父进程就是当前进程或者该进程就是当
	// 前进程，那么若该任务已经是会话首领，则出错返回。若该任务的会话号（session）与当前进程的不同，或者指定的进程组号pgid
	// 与pid不同并且pgid进程组所属会话号与当前进程所属会话号不同，则也出错返回。否则把查找到的进程的pgrp设置为pgid，并
	// 返回0。若没有找到指定pid的进程，则返回进程不存在出错码。
	for (i = 0 ; i < NR_TASKS ; i++)
    9a6d:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    9a72:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    9a77:	0f 8e 04 ff ff ff    	jle    9981 <sys_setpgid+0x4d>
			     (session_of_pgrp(pgid) != current->session)))
				return -EPERM;
			task[i]->pgrp = pgid;
			return 0;
		}
	return -ESRCH;
    9a7d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
    9a82:	83 c4 1c             	add    $0x1c,%esp
    9a85:	c3                   	ret    

00009a86 <sys_getpgrp>:

// 返回当前进程的进程组号。与getpgid(0)等同。
int sys_getpgrp(void)
{
	return current->pgrp;
    9a86:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9a8b:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
}
    9a91:	c3                   	ret    

00009a92 <sys_setsid>:
// 创建一个会话（session）（即设置其leader = 1），并且设置其会话号=其组号=其进程号。
// 如果当前进程已是会话首领并且不是超级用户，则出错返回。否则设置当前进程为新会话首领（leader = 1），并且设置当前进程会话
// 号session和组号pgrp都等于进程号pid，而且设置当前进程没有控制终端。最后系统调用返回会话号。
int sys_setsid(void)
{
	if (current->leader && !suser())
    9a92:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9a97:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
    9a9d:	85 c0                	test   %eax,%eax
    9a9f:	74 18                	je     9ab9 <sys_setsid+0x27>
    9aa1:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9aa6:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    9aad:	66 85 c0             	test   %ax,%ax
    9ab0:	74 07                	je     9ab9 <sys_setsid+0x27>
		return -EPERM;
    9ab2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    9ab7:	eb 52                	jmp    9b0b <sys_setsid+0x79>
	current->leader = 1;
    9ab9:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9abe:	c7 80 38 02 00 00 01 	movl   $0x1,0x238(%eax)
    9ac5:	00 00 00 
	current->session = current->pgrp = current->pid;
    9ac8:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    9ace:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9ad3:	8b 0d a0 e1 02 00    	mov    0x2e1a0,%ecx
    9ad9:	8b 89 2c 02 00 00    	mov    0x22c(%ecx),%ecx
    9adf:	89 88 30 02 00 00    	mov    %ecx,0x230(%eax)
    9ae5:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    9aeb:	89 82 34 02 00 00    	mov    %eax,0x234(%edx)
	current->tty = -1;      				// 表示当前进程没有控制终端。
    9af1:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9af6:	c7 80 2c 03 00 00 ff 	movl   $0xffffffff,0x32c(%eax)
    9afd:	ff ff ff 
	return current->pgrp;
    9b00:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9b05:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
}
    9b0b:	c3                   	ret    

00009b0c <sys_getgroups>:
// 取当前进程其他辅助用户组号。
// 任务数据结构中groups[]数组保存着进程同时所属的多个用户组号。该数组共NGROUPS个项，若某项值是NOGROUP（即为-1），则
// 表示从该项开始以后所有项都空闲。否则数组项中保存的是用户组号。
// 参数gidsetsize是获取的用户组号个数；grouplist是存储这些用户组号的用户空间缓存。
int sys_getgroups(int gidsetsize, gid_t *grouplist)
{
    9b0c:	83 ec 1c             	sub    $0x1c,%esp

	// 首先验证grouplist指针所指的用户缓存空间是否足够，然后从当前进程结构的groups[]数组中逐个取得用户组号并复制到用户缓存
	// 中。在复制过程中，如果groups[]中的项数大于给定的参数gitsetsize所指定的个数，则表示用户给出的缓存太小，不能容下当前
	// 进程所有组号，因此此次取组号操作会出错返回。若复制过程正常，则函数最后会返回复制的用户组号个数。（gidsetsize - gid
	// set size，用户组号集大小）。
	if (gidsetsize)
    9b0f:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    9b14:	74 16                	je     9b2c <sys_getgroups+0x20>
		verify_area(grouplist, sizeof(gid_t) * gidsetsize);
    9b16:	8b 44 24 20          	mov    0x20(%esp),%eax
    9b1a:	01 c0                	add    %eax,%eax
    9b1c:	83 ec 08             	sub    $0x8,%esp
    9b1f:	50                   	push   %eax
    9b20:	ff 74 24 30          	pushl  0x30(%esp)
    9b24:	e8 7a e8 ff ff       	call   83a3 <verify_area>
    9b29:	83 c4 10             	add    $0x10,%esp

	for (i = 0; (i < NGROUPS) && (current->groups[i] != NOGROUP); i++, grouplist++) {
    9b2c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    9b33:	00 
    9b34:	eb 46                	jmp    9b7c <sys_getgroups+0x70>
		if (gidsetsize) {
    9b36:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    9b3b:	74 35                	je     9b72 <sys_getgroups+0x66>
			if (i >= gidsetsize)
    9b3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9b41:	3b 44 24 20          	cmp    0x20(%esp),%eax
    9b45:	7c 07                	jl     9b4e <sys_getgroups+0x42>
				return -EINVAL;
    9b47:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    9b4c:	eb 51                	jmp    9b9f <sys_getgroups+0x93>
			put_fs_word(current->groups[i], (short *) grouplist);
    9b4e:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9b53:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9b57:	81 c2 8c 00 00 00    	add    $0x8c,%edx
    9b5d:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
    9b61:	98                   	cwtl   
    9b62:	83 ec 08             	sub    $0x8,%esp
    9b65:	ff 74 24 2c          	pushl  0x2c(%esp)
    9b69:	50                   	push   %eax
    9b6a:	e8 de f8 ff ff       	call   944d <put_fs_word>
    9b6f:	83 c4 10             	add    $0x10,%esp
	// 进程所有组号，因此此次取组号操作会出错返回。若复制过程正常，则函数最后会返回复制的用户组号个数。（gidsetsize - gid
	// set size，用户组号集大小）。
	if (gidsetsize)
		verify_area(grouplist, sizeof(gid_t) * gidsetsize);

	for (i = 0; (i < NGROUPS) && (current->groups[i] != NOGROUP); i++, grouplist++) {
    9b72:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    9b77:	83 44 24 24 02       	addl   $0x2,0x24(%esp)
    9b7c:	83 7c 24 0c 1f       	cmpl   $0x1f,0xc(%esp)
    9b81:	7f 18                	jg     9b9b <sys_getgroups+0x8f>
    9b83:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9b88:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9b8c:	81 c2 8c 00 00 00    	add    $0x8c,%edx
    9b92:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
    9b96:	83 f8 ff             	cmp    $0xffffffff,%eax
    9b99:	75 9b                	jne    9b36 <sys_getgroups+0x2a>
			if (i >= gidsetsize)
				return -EINVAL;
			put_fs_word(current->groups[i], (short *) grouplist);
		}
	}
	return(i);              				// 返回实际含有的用户组号个数。
    9b9b:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    9b9f:	83 c4 1c             	add    $0x1c,%esp
    9ba2:	c3                   	ret    

00009ba3 <sys_setgroups>:

// 设置当前进程同时所属的其他辅助用户组号。
// 参数gidsetsize是将设置的用户组号个数；grouplist是含有用户组号的用户空间缓存。
int sys_setgroups(int gidsetsize, gid_t *grouplist)
{
    9ba3:	53                   	push   %ebx
    9ba4:	83 ec 10             	sub    $0x10,%esp
	int	i;

	// 首先查权限和参数的有效性。只有超级用户可以修改或设置当前进程的辅助用户组号，而且设置的项数不能超过进程的groups[NGROUPS]
	// 数组的容量。然后从用户缓冲中逐个复制用户组号，共gidsetsize个。如果复制的个数没有填满group[]，则在随后一项上填上值为-1
	// 的项（NOGROUP）。最后函数返回0。
	if (!suser())
    9ba7:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9bac:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    9bb3:	66 85 c0             	test   %ax,%ax
    9bb6:	74 07                	je     9bbf <sys_setgroups+0x1c>
		return -EPERM;
    9bb8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    9bbd:	eb 72                	jmp    9c31 <sys_setgroups+0x8e>
	if (gidsetsize > NGROUPS)
    9bbf:	83 7c 24 18 20       	cmpl   $0x20,0x18(%esp)
    9bc4:	7e 07                	jle    9bcd <sys_setgroups+0x2a>
		return -EINVAL;
    9bc6:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    9bcb:	eb 64                	jmp    9c31 <sys_setgroups+0x8e>
	for (i = 0; i < gidsetsize; i++, grouplist++) {
    9bcd:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    9bd4:	00 
    9bd5:	eb 2d                	jmp    9c04 <sys_setgroups+0x61>
		current->groups[i] = get_fs_word((unsigned short *) grouplist);
    9bd7:	8b 1d a0 e1 02 00    	mov    0x2e1a0,%ebx
    9bdd:	ff 74 24 1c          	pushl  0x1c(%esp)
    9be1:	e8 1e f8 ff ff       	call   9404 <get_fs_word>
    9be6:	83 c4 04             	add    $0x4,%esp
    9be9:	0f b7 c0             	movzwl %ax,%eax
    9bec:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9bf0:	81 c2 8c 00 00 00    	add    $0x8c,%edx
    9bf6:	89 44 93 0c          	mov    %eax,0xc(%ebx,%edx,4)
	// 的项（NOGROUP）。最后函数返回0。
	if (!suser())
		return -EPERM;
	if (gidsetsize > NGROUPS)
		return -EINVAL;
	for (i = 0; i < gidsetsize; i++, grouplist++) {
    9bfa:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    9bff:	83 44 24 1c 02       	addl   $0x2,0x1c(%esp)
    9c04:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9c08:	3b 44 24 18          	cmp    0x18(%esp),%eax
    9c0c:	7c c9                	jl     9bd7 <sys_setgroups+0x34>
		current->groups[i] = get_fs_word((unsigned short *) grouplist);
	}
	if (i < NGROUPS)
    9c0e:	83 7c 24 0c 1f       	cmpl   $0x1f,0xc(%esp)
    9c13:	7f 17                	jg     9c2c <sys_setgroups+0x89>
		current->groups[i] = NOGROUP;
    9c15:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9c1a:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9c1e:	81 c2 8c 00 00 00    	add    $0x8c,%edx
    9c24:	c7 44 90 0c ff ff ff 	movl   $0xffffffff,0xc(%eax,%edx,4)
    9c2b:	ff 
	return 0;
    9c2c:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9c31:	83 c4 10             	add    $0x10,%esp
    9c34:	5b                   	pop    %ebx
    9c35:	c3                   	ret    

00009c36 <in_group_p>:

// 检查当前进程是否在指定的用户组grp中.是则返回1,否则返回0.
int in_group_p(gid_t grp)
{
    9c36:	83 ec 14             	sub    $0x14,%esp
    9c39:	8b 44 24 18          	mov    0x18(%esp),%eax
    9c3d:	66 89 04 24          	mov    %ax,(%esp)
	int	i;

	// 如果当前进程的有效组号就是grp,则表示进程属于grp进程组.函数返回1.否则就在进程的辅助用户组数组中扫描是否有grp进程组号.若
	// 有则函数也返回1.若扫描到值为NOGROUP的项,表示已扫描完全部有效项没有发现匹配的组号,因此函数返回0.
	if (grp == current->egid)
    9c41:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9c46:	0f b7 80 d4 02 00 00 	movzwl 0x2d4(%eax),%eax
    9c4d:	66 3b 04 24          	cmp    (%esp),%ax
    9c51:	75 07                	jne    9c5a <in_group_p+0x24>
		return 1;
    9c53:	b8 01 00 00 00       	mov    $0x1,%eax
    9c58:	eb 58                	jmp    9cb2 <in_group_p+0x7c>

	for (i = 0; i < NGROUPS; i++) {
    9c5a:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
    9c61:	00 
    9c62:	eb 3f                	jmp    9ca3 <in_group_p+0x6d>
		if (current->groups[i] == NOGROUP)
    9c64:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9c69:	8b 54 24 10          	mov    0x10(%esp),%edx
    9c6d:	81 c2 8c 00 00 00    	add    $0x8c,%edx
    9c73:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
    9c77:	83 f8 ff             	cmp    $0xffffffff,%eax
    9c7a:	74 30                	je     9cac <in_group_p+0x76>
			break;
		if (current->groups[i] == grp)
    9c7c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9c81:	8b 54 24 10          	mov    0x10(%esp),%edx
    9c85:	81 c2 8c 00 00 00    	add    $0x8c,%edx
    9c8b:	8b 54 90 0c          	mov    0xc(%eax,%edx,4),%edx
    9c8f:	0f b7 04 24          	movzwl (%esp),%eax
    9c93:	39 c2                	cmp    %eax,%edx
    9c95:	75 07                	jne    9c9e <in_group_p+0x68>
			return 1;
    9c97:	b8 01 00 00 00       	mov    $0x1,%eax
    9c9c:	eb 14                	jmp    9cb2 <in_group_p+0x7c>
	// 如果当前进程的有效组号就是grp,则表示进程属于grp进程组.函数返回1.否则就在进程的辅助用户组数组中扫描是否有grp进程组号.若
	// 有则函数也返回1.若扫描到值为NOGROUP的项,表示已扫描完全部有效项没有发现匹配的组号,因此函数返回0.
	if (grp == current->egid)
		return 1;

	for (i = 0; i < NGROUPS; i++) {
    9c9e:	83 44 24 10 01       	addl   $0x1,0x10(%esp)
    9ca3:	83 7c 24 10 1f       	cmpl   $0x1f,0x10(%esp)
    9ca8:	7e ba                	jle    9c64 <in_group_p+0x2e>
    9caa:	eb 01                	jmp    9cad <in_group_p+0x77>
		if (current->groups[i] == NOGROUP)
			break;
    9cac:	90                   	nop
		if (current->groups[i] == grp)
			return 1;
	}
	return 0;
    9cad:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9cb2:	83 c4 14             	add    $0x14,%esp
    9cb5:	c3                   	ret    

00009cb6 <sys_uname>:
	UTS_SYSNAME, UTS_NODENAME, UTS_RELEASE, UTS_VERSION, UTS_MACHINE
};

// 获取系统名称等信息。
int sys_uname(struct utsname * name)
{
    9cb6:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	if (!name) return -ERROR;
    9cb9:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    9cbe:	75 07                	jne    9cc7 <sys_uname+0x11>
    9cc0:	b8 9d ff ff ff       	mov    $0xffffff9d,%eax
    9cc5:	eb 54                	jmp    9d1b <sys_uname+0x65>
	verify_area(name,sizeof *name);
    9cc7:	83 ec 08             	sub    $0x8,%esp
    9cca:	6a 2d                	push   $0x2d
    9ccc:	ff 74 24 2c          	pushl  0x2c(%esp)
    9cd0:	e8 ce e6 ff ff       	call   83a3 <verify_area>
    9cd5:	83 c4 10             	add    $0x10,%esp
	for(i = 0; i < sizeof *name; i++)
    9cd8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    9cdf:	00 
    9ce0:	eb 2b                	jmp    9d0d <sys_uname+0x57>
		put_fs_byte(((char *) &thisname)[i], i + (char *) name);
    9ce2:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9ce6:	8b 44 24 20          	mov    0x20(%esp),%eax
    9cea:	01 c2                	add    %eax,%edx
    9cec:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9cf0:	05 e0 e2 02 00       	add    $0x2e2e0,%eax
    9cf5:	0f b6 00             	movzbl (%eax),%eax
    9cf8:	0f be c0             	movsbl %al,%eax
    9cfb:	83 ec 08             	sub    $0x8,%esp
    9cfe:	52                   	push   %edx
    9cff:	50                   	push   %eax
    9d00:	e8 2e f7 ff ff       	call   9433 <put_fs_byte>
    9d05:	83 c4 10             	add    $0x10,%esp
{
	int i;

	if (!name) return -ERROR;
	verify_area(name,sizeof *name);
	for(i = 0; i < sizeof *name; i++)
    9d08:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    9d0d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9d11:	83 f8 2c             	cmp    $0x2c,%eax
    9d14:	76 cc                	jbe    9ce2 <sys_uname+0x2c>
		put_fs_byte(((char *) &thisname)[i], i + (char *) name);
	return 0;
    9d16:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9d1b:	83 c4 1c             	add    $0x1c,%esp
    9d1e:	c3                   	ret    

00009d1f <sys_sethostname>:
 * 通过调用uname()只能实现sethostname和gethostname。
 */
// 设置系统主机名（系统的网络节点名）。
// 参数name指针指向用户数据区中含有主机名字符串的缓冲区；len是主机名字符串长度。
int sys_sethostname(char *name, int len)
{
    9d1f:	83 ec 10             	sub    $0x10,%esp
	int	i;

	// 系统主机名只能由超级用户设置或修改，并且主机名长度不能超过最大长度MAXHOSTNAMELEN。
	if (!suser())
    9d22:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9d27:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    9d2e:	66 85 c0             	test   %ax,%ax
    9d31:	74 0a                	je     9d3d <sys_sethostname+0x1e>
		return -EPERM;
    9d33:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    9d38:	e9 85 00 00 00       	jmp    9dc2 <sys_sethostname+0xa3>
	if (len > MAXHOSTNAMELEN)
    9d3d:	83 7c 24 18 08       	cmpl   $0x8,0x18(%esp)
    9d42:	7e 07                	jle    9d4b <sys_sethostname+0x2c>
		return -EINVAL;
    9d44:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    9d49:	eb 77                	jmp    9dc2 <sys_sethostname+0xa3>
	for (i = 0; i < len; i++) {
    9d4b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    9d52:	00 
    9d53:	eb 35                	jmp    9d8a <sys_sethostname+0x6b>
		if ((thisname.nodename[i] = get_fs_byte(name + i)) == 0)
    9d55:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9d59:	8b 44 24 14          	mov    0x14(%esp),%eax
    9d5d:	01 d0                	add    %edx,%eax
    9d5f:	50                   	push   %eax
    9d60:	e8 91 f6 ff ff       	call   93f6 <get_fs_byte>
    9d65:	83 c4 04             	add    $0x4,%esp
    9d68:	89 c2                	mov    %eax,%edx
    9d6a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9d6e:	05 e9 e2 02 00       	add    $0x2e2e9,%eax
    9d73:	88 10                	mov    %dl,(%eax)
    9d75:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9d79:	05 e9 e2 02 00       	add    $0x2e2e9,%eax
    9d7e:	0f b6 00             	movzbl (%eax),%eax
    9d81:	84 c0                	test   %al,%al
    9d83:	74 11                	je     9d96 <sys_sethostname+0x77>
	// 系统主机名只能由超级用户设置或修改，并且主机名长度不能超过最大长度MAXHOSTNAMELEN。
	if (!suser())
		return -EPERM;
	if (len > MAXHOSTNAMELEN)
		return -EINVAL;
	for (i = 0; i < len; i++) {
    9d85:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    9d8a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9d8e:	3b 44 24 18          	cmp    0x18(%esp),%eax
    9d92:	7c c1                	jl     9d55 <sys_sethostname+0x36>
    9d94:	eb 01                	jmp    9d97 <sys_sethostname+0x78>
		if ((thisname.nodename[i] = get_fs_byte(name + i)) == 0)
			break;
    9d96:	90                   	nop
	}
	// 在复制完毕后，如果用户提供的字符串没有包含NULL字符，那么若复制的主机名长度还没有超过MAXHOSTNAMELEN，则在主机名字
	// 符串后添加一个NULL。若已经填满MAXHOSTNAMELEN个字符，则把最后一个字符改成NULL字符。即thisname.nodename[min(
	// i,MAXHOSTNAMELEN)] = 0。
	if (thisname.nodename[i]) {
    9d97:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9d9b:	05 e9 e2 02 00       	add    $0x2e2e9,%eax
    9da0:	0f b6 00             	movzbl (%eax),%eax
    9da3:	84 c0                	test   %al,%al
    9da5:	74 16                	je     9dbd <sys_sethostname+0x9e>
		thisname.nodename[i > MAXHOSTNAMELEN ? MAXHOSTNAMELEN : i] = 0;
    9da7:	b8 08 00 00 00       	mov    $0x8,%eax
    9dac:	83 7c 24 0c 08       	cmpl   $0x8,0xc(%esp)
    9db1:	0f 4e 44 24 0c       	cmovle 0xc(%esp),%eax
    9db6:	c6 80 e9 e2 02 00 00 	movb   $0x0,0x2e2e9(%eax)
	}
	return 0;
    9dbd:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9dc2:	83 c4 10             	add    $0x10,%esp
    9dc5:	c3                   	ret    

00009dc6 <sys_getrlimit>:
// 界限（hard limit，即硬限制）。rlim[]数组的每一项对应系统对当前进程一种资源的界限信息。Linux 0.12系统共对6种资源
// 规定了界限，即RLIM_NLIMITS=6。请参考头文件include/sys/resource.h说明。
// 参数resource指定我们咨询的资源名称，实际上它是任务结构中rlim[]数组的索引项值。
// 参数rlim是指向rlimit结构的用户缓冲区指针，用于存放取得的资源界限信息。
int sys_getrlimit(int resource, struct rlimit *rlim)
{
    9dc6:	83 ec 0c             	sub    $0xc,%esp
	// 所咨询的资源resource实际上是进程任务结构中rlim[]数组的索引项值。该索引值当然不能大于数组的最大项数RLIM_NLIMITS。
	// 在验证过rlim指针所指用户缓冲足够以后，这里就把参数指定的资源resource结构信息复制到用户缓冲区中，并返回0。
	if (resource >= RLIM_NLIMITS)
    9dc9:	83 7c 24 10 05       	cmpl   $0x5,0x10(%esp)
    9dce:	7e 07                	jle    9dd7 <sys_getrlimit+0x11>
		return -EINVAL;
    9dd0:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    9dd5:	eb 5a                	jmp    9e31 <sys_getrlimit+0x6b>
	verify_area(rlim, sizeof *rlim);
    9dd7:	83 ec 08             	sub    $0x8,%esp
    9dda:	6a 08                	push   $0x8
    9ddc:	ff 74 24 20          	pushl  0x20(%esp)
    9de0:	e8 be e5 ff ff       	call   83a3 <verify_area>
    9de5:	83 c4 10             	add    $0x10,%esp
	put_fs_long(current->rlim[resource].rlim_cur,           // 当前（软）限制值。
    9de8:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9ded:	8b 54 24 10          	mov    0x10(%esp),%edx
    9df1:	83 c2 5e             	add    $0x5e,%edx
    9df4:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
    9df8:	83 ec 08             	sub    $0x8,%esp
    9dfb:	ff 74 24 1c          	pushl  0x1c(%esp)
    9dff:	50                   	push   %eax
    9e00:	e8 64 f6 ff ff       	call   9469 <put_fs_long>
    9e05:	83 c4 10             	add    $0x10,%esp
		    (unsigned long *) rlim);
	put_fs_long(current->rlim[resource].rlim_max,           // 系统（硬）限制值。
    9e08:	8b 44 24 14          	mov    0x14(%esp),%eax
    9e0c:	8d 50 04             	lea    0x4(%eax),%edx
    9e0f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9e14:	8b 4c 24 10          	mov    0x10(%esp),%ecx
    9e18:	83 c1 5e             	add    $0x5e,%ecx
    9e1b:	8b 44 c8 08          	mov    0x8(%eax,%ecx,8),%eax
    9e1f:	83 ec 08             	sub    $0x8,%esp
    9e22:	52                   	push   %edx
    9e23:	50                   	push   %eax
    9e24:	e8 40 f6 ff ff       	call   9469 <put_fs_long>
    9e29:	83 c4 10             	add    $0x10,%esp
		    ((unsigned long *) rlim) + 1);
	return 0;
    9e2c:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9e31:	83 c4 0c             	add    $0xc,%esp
    9e34:	c3                   	ret    

00009e35 <sys_setrlimit>:

// 设置当前进程指定资源的界限值。
// 参数resource指定我们设置界限的资源名称，实际上它是任务结构中rlim[]数组的索引项值。
// 参数rlim是指向rlimit结构的用户缓冲区指针，用于内核读取新的资源界限信息。
int sys_setrlimit(int resource, struct rlimit *rlim)
{
    9e35:	83 ec 10             	sub    $0x10,%esp

	// 首先判断参数resource（任务结构rlim[]项索引值）有效性。然后先让rlimit结构指针old指向进程任务结构中指定资源的当前
	// rlimit结构信息。接着把用户提供的资源界限信息复制到临时rlimit结构new中。此时如果判断出new结构中的软界限值或硬界限
	// 值大于进程该资源原硬界限值，并且当前不是超级用户的话，就返回许可出错。否则表示new中信息合理或者进程是超级用户进程，
	// 则修改原进程指定资源信息等于new结构中的信息，并成功返回0。
	if (resource >= RLIM_NLIMITS)
    9e38:	83 7c 24 14 05       	cmpl   $0x5,0x14(%esp)
    9e3d:	7e 0a                	jle    9e49 <sys_setrlimit+0x14>
		return -EINVAL;
    9e3f:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    9e44:	e9 88 00 00 00       	jmp    9ed1 <sys_setrlimit+0x9c>
	old = current->rlim + resource;
    9e49:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9e4e:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
    9e54:	8b 44 24 14          	mov    0x14(%esp),%eax
    9e58:	c1 e0 03             	shl    $0x3,%eax
    9e5b:	01 d0                	add    %edx,%eax
    9e5d:	89 44 24 0c          	mov    %eax,0xc(%esp)
	new.rlim_cur = get_fs_long((unsigned long *) rlim);
    9e61:	ff 74 24 18          	pushl  0x18(%esp)
    9e65:	e8 b3 f5 ff ff       	call   941d <get_fs_long>
    9e6a:	83 c4 04             	add    $0x4,%esp
    9e6d:	89 44 24 04          	mov    %eax,0x4(%esp)
	new.rlim_max = get_fs_long(((unsigned long *) rlim) + 1);
    9e71:	8b 44 24 18          	mov    0x18(%esp),%eax
    9e75:	83 c0 04             	add    $0x4,%eax
    9e78:	50                   	push   %eax
    9e79:	e8 9f f5 ff ff       	call   941d <get_fs_long>
    9e7e:	83 c4 04             	add    $0x4,%esp
    9e81:	89 44 24 08          	mov    %eax,0x8(%esp)
	if (((new.rlim_cur > old->rlim_max) || (new.rlim_max > old->rlim_max)) && !suser())
    9e85:	8b 54 24 04          	mov    0x4(%esp),%edx
    9e89:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9e8d:	8b 40 04             	mov    0x4(%eax),%eax
    9e90:	39 c2                	cmp    %eax,%edx
    9e92:	7f 0f                	jg     9ea3 <sys_setrlimit+0x6e>
    9e94:	8b 54 24 08          	mov    0x8(%esp),%edx
    9e98:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9e9c:	8b 40 04             	mov    0x4(%eax),%eax
    9e9f:	39 c2                	cmp    %eax,%edx
    9ea1:	7e 18                	jle    9ebb <sys_setrlimit+0x86>
    9ea3:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9ea8:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    9eaf:	66 85 c0             	test   %ax,%ax
    9eb2:	74 07                	je     9ebb <sys_setrlimit+0x86>
		return -EPERM;
    9eb4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    9eb9:	eb 16                	jmp    9ed1 <sys_setrlimit+0x9c>
	*old = new;
    9ebb:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
    9ebf:	8b 44 24 04          	mov    0x4(%esp),%eax
    9ec3:	8b 54 24 08          	mov    0x8(%esp),%edx
    9ec7:	89 01                	mov    %eax,(%ecx)
    9ec9:	89 51 04             	mov    %edx,0x4(%ecx)
	return 0;
    9ecc:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9ed1:	83 c4 10             	add    $0x10,%esp
    9ed4:	c3                   	ret    

00009ed5 <sys_getrusage>:
// 获取指定进程的资源利用信息。
// 本系统调用提供当前进程或其已终止的和等待着的子进程资源使用情况。如果参数who等于RUSAGE_SELF，则返回当前进程的资源利用
// 信息。如果指定进程who是RUSAGE_CHILDREN，则返回当前进程的已终止和等待着的子进程资源利用信息。符号常数RUSAGE_SELF和
// RUSAGE_CHILDREN以及rusage结构都定义在include/sys/resource.h文件中。
int sys_getrusage(int who, struct rusage *ru)
{
    9ed5:	83 ec 6c             	sub    $0x6c,%esp
	struct rusage r;
	unsigned long	*lp, *lpend, *dest;

	// 首先判断参数指定进程的有效性。如果who即不是RUSAGE_SELF（指定当前进程），也不是RUSAGE_CHILDREN（指定子进程），则以
	// 无效参数码返回。否则在验证了指针ru指定的用户缓冲区域后，把临时rusage结构区域r清零。
	if (who != RUSAGE_SELF && who != RUSAGE_CHILDREN)
    9ed8:	83 7c 24 70 00       	cmpl   $0x0,0x70(%esp)
    9edd:	74 11                	je     9ef0 <sys_getrusage+0x1b>
    9edf:	83 7c 24 70 ff       	cmpl   $0xffffffff,0x70(%esp)
    9ee4:	74 0a                	je     9ef0 <sys_getrusage+0x1b>
		return -EINVAL;
    9ee6:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    9eeb:	e9 2c 02 00 00       	jmp    a11c <sys_getrusage+0x247>
	verify_area(ru, sizeof *ru);
    9ef0:	83 ec 08             	sub    $0x8,%esp
    9ef3:	6a 48                	push   $0x48
    9ef5:	ff b4 24 80 00 00 00 	pushl  0x80(%esp)
    9efc:	e8 a2 e4 ff ff       	call   83a3 <verify_area>
    9f01:	83 c4 10             	add    $0x10,%esp
	memset((char *) &r, 0, sizeof(r));
    9f04:	83 ec 04             	sub    $0x4,%esp
    9f07:	6a 48                	push   $0x48
    9f09:	6a 00                	push   $0x0
    9f0b:	8d 44 24 18          	lea    0x18(%esp),%eax
    9f0f:	50                   	push   %eax
    9f10:	e8 61 f5 ff ff       	call   9476 <memset>
    9f15:	83 c4 10             	add    $0x10,%esp
	// 若参数who是RUSAGE_SELF，则复制当前进程资源利用信息到r结构中。若指定进程who是RUSAGE_CHILDREN，则复制当前进程的已终止
	// 和等待着的子进程资源利用信息到临时rusage结构r中。宏CT_TO_SECS和CT_TO_USECS用于把系统当前嘀嗒数转换成用秒值加微秒值
	// 表示。它们定义在include/linux/sched.h文件中。jiffies_offset是系统嘀嗒数误差调整数。
	if (who == RUSAGE_SELF) {
    9f18:	83 7c 24 70 00       	cmpl   $0x0,0x70(%esp)
    9f1d:	0f 85 d9 00 00 00    	jne    9ffc <sys_getrusage+0x127>
		r.ru_utime.tv_sec = CT_TO_SECS(current->utime);
    9f23:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9f28:	8b 88 e0 02 00 00    	mov    0x2e0(%eax),%ecx
    9f2e:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9f33:	89 c8                	mov    %ecx,%eax
    9f35:	f7 ea                	imul   %edx
    9f37:	c1 fa 05             	sar    $0x5,%edx
    9f3a:	89 c8                	mov    %ecx,%eax
    9f3c:	c1 f8 1f             	sar    $0x1f,%eax
    9f3f:	29 c2                	sub    %eax,%edx
    9f41:	89 d0                	mov    %edx,%eax
    9f43:	89 44 24 0c          	mov    %eax,0xc(%esp)
		r.ru_utime.tv_usec = CT_TO_USECS(current->utime);
    9f47:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9f4c:	8b 88 e0 02 00 00    	mov    0x2e0(%eax),%ecx
    9f52:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9f57:	89 c8                	mov    %ecx,%eax
    9f59:	f7 ea                	imul   %edx
    9f5b:	c1 fa 05             	sar    $0x5,%edx
    9f5e:	89 c8                	mov    %ecx,%eax
    9f60:	c1 f8 1f             	sar    $0x1f,%eax
    9f63:	29 c2                	sub    %eax,%edx
    9f65:	89 d0                	mov    %edx,%eax
    9f67:	6b c0 64             	imul   $0x64,%eax,%eax
    9f6a:	29 c1                	sub    %eax,%ecx
    9f6c:	89 c8                	mov    %ecx,%eax
    9f6e:	69 c8 40 42 0f 00    	imul   $0xf4240,%eax,%ecx
    9f74:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9f79:	89 c8                	mov    %ecx,%eax
    9f7b:	f7 ea                	imul   %edx
    9f7d:	c1 fa 05             	sar    $0x5,%edx
    9f80:	89 c8                	mov    %ecx,%eax
    9f82:	c1 f8 1f             	sar    $0x1f,%eax
    9f85:	29 c2                	sub    %eax,%edx
    9f87:	89 d0                	mov    %edx,%eax
    9f89:	89 44 24 10          	mov    %eax,0x10(%esp)
		r.ru_stime.tv_sec = CT_TO_SECS(current->stime);
    9f8d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9f92:	8b 88 e4 02 00 00    	mov    0x2e4(%eax),%ecx
    9f98:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9f9d:	89 c8                	mov    %ecx,%eax
    9f9f:	f7 ea                	imul   %edx
    9fa1:	c1 fa 05             	sar    $0x5,%edx
    9fa4:	89 c8                	mov    %ecx,%eax
    9fa6:	c1 f8 1f             	sar    $0x1f,%eax
    9fa9:	29 c2                	sub    %eax,%edx
    9fab:	89 d0                	mov    %edx,%eax
    9fad:	89 44 24 14          	mov    %eax,0x14(%esp)
		r.ru_stime.tv_usec = CT_TO_USECS(current->stime);
    9fb1:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9fb6:	8b 88 e4 02 00 00    	mov    0x2e4(%eax),%ecx
    9fbc:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9fc1:	89 c8                	mov    %ecx,%eax
    9fc3:	f7 ea                	imul   %edx
    9fc5:	c1 fa 05             	sar    $0x5,%edx
    9fc8:	89 c8                	mov    %ecx,%eax
    9fca:	c1 f8 1f             	sar    $0x1f,%eax
    9fcd:	29 c2                	sub    %eax,%edx
    9fcf:	89 d0                	mov    %edx,%eax
    9fd1:	6b c0 64             	imul   $0x64,%eax,%eax
    9fd4:	29 c1                	sub    %eax,%ecx
    9fd6:	89 c8                	mov    %ecx,%eax
    9fd8:	69 c8 40 42 0f 00    	imul   $0xf4240,%eax,%ecx
    9fde:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9fe3:	89 c8                	mov    %ecx,%eax
    9fe5:	f7 ea                	imul   %edx
    9fe7:	c1 fa 05             	sar    $0x5,%edx
    9fea:	89 c8                	mov    %ecx,%eax
    9fec:	c1 f8 1f             	sar    $0x1f,%eax
    9fef:	29 c2                	sub    %eax,%edx
    9ff1:	89 d0                	mov    %edx,%eax
    9ff3:	89 44 24 18          	mov    %eax,0x18(%esp)
    9ff7:	e9 d4 00 00 00       	jmp    a0d0 <sys_getrusage+0x1fb>
	} else {
		r.ru_utime.tv_sec = CT_TO_SECS(current->cutime);
    9ffc:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    a001:	8b 88 e8 02 00 00    	mov    0x2e8(%eax),%ecx
    a007:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a00c:	89 c8                	mov    %ecx,%eax
    a00e:	f7 ea                	imul   %edx
    a010:	c1 fa 05             	sar    $0x5,%edx
    a013:	89 c8                	mov    %ecx,%eax
    a015:	c1 f8 1f             	sar    $0x1f,%eax
    a018:	29 c2                	sub    %eax,%edx
    a01a:	89 d0                	mov    %edx,%eax
    a01c:	89 44 24 0c          	mov    %eax,0xc(%esp)
		r.ru_utime.tv_usec = CT_TO_USECS(current->cutime);
    a020:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    a025:	8b 88 e8 02 00 00    	mov    0x2e8(%eax),%ecx
    a02b:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a030:	89 c8                	mov    %ecx,%eax
    a032:	f7 ea                	imul   %edx
    a034:	c1 fa 05             	sar    $0x5,%edx
    a037:	89 c8                	mov    %ecx,%eax
    a039:	c1 f8 1f             	sar    $0x1f,%eax
    a03c:	29 c2                	sub    %eax,%edx
    a03e:	89 d0                	mov    %edx,%eax
    a040:	6b c0 64             	imul   $0x64,%eax,%eax
    a043:	29 c1                	sub    %eax,%ecx
    a045:	89 c8                	mov    %ecx,%eax
    a047:	69 c8 40 42 0f 00    	imul   $0xf4240,%eax,%ecx
    a04d:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a052:	89 c8                	mov    %ecx,%eax
    a054:	f7 ea                	imul   %edx
    a056:	c1 fa 05             	sar    $0x5,%edx
    a059:	89 c8                	mov    %ecx,%eax
    a05b:	c1 f8 1f             	sar    $0x1f,%eax
    a05e:	29 c2                	sub    %eax,%edx
    a060:	89 d0                	mov    %edx,%eax
    a062:	89 44 24 10          	mov    %eax,0x10(%esp)
		r.ru_stime.tv_sec = CT_TO_SECS(current->cstime);
    a066:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    a06b:	8b 88 ec 02 00 00    	mov    0x2ec(%eax),%ecx
    a071:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a076:	89 c8                	mov    %ecx,%eax
    a078:	f7 ea                	imul   %edx
    a07a:	c1 fa 05             	sar    $0x5,%edx
    a07d:	89 c8                	mov    %ecx,%eax
    a07f:	c1 f8 1f             	sar    $0x1f,%eax
    a082:	29 c2                	sub    %eax,%edx
    a084:	89 d0                	mov    %edx,%eax
    a086:	89 44 24 14          	mov    %eax,0x14(%esp)
		r.ru_stime.tv_usec = CT_TO_USECS(current->cstime);
    a08a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    a08f:	8b 88 ec 02 00 00    	mov    0x2ec(%eax),%ecx
    a095:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a09a:	89 c8                	mov    %ecx,%eax
    a09c:	f7 ea                	imul   %edx
    a09e:	c1 fa 05             	sar    $0x5,%edx
    a0a1:	89 c8                	mov    %ecx,%eax
    a0a3:	c1 f8 1f             	sar    $0x1f,%eax
    a0a6:	29 c2                	sub    %eax,%edx
    a0a8:	89 d0                	mov    %edx,%eax
    a0aa:	6b c0 64             	imul   $0x64,%eax,%eax
    a0ad:	29 c1                	sub    %eax,%ecx
    a0af:	89 c8                	mov    %ecx,%eax
    a0b1:	69 c8 40 42 0f 00    	imul   $0xf4240,%eax,%ecx
    a0b7:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a0bc:	89 c8                	mov    %ecx,%eax
    a0be:	f7 ea                	imul   %edx
    a0c0:	c1 fa 05             	sar    $0x5,%edx
    a0c3:	89 c8                	mov    %ecx,%eax
    a0c5:	c1 f8 1f             	sar    $0x1f,%eax
    a0c8:	29 c2                	sub    %eax,%edx
    a0ca:	89 d0                	mov    %edx,%eax
    a0cc:	89 44 24 18          	mov    %eax,0x18(%esp)
	}
	// 然后让lp指针指向r结构，lpend指向r结构末尾处，而dest指针指向用户空间中的ru结构。最后把r中信息复制到用户空间ru结构中，并
	// 返回0。
	lp = (unsigned long *) &r;
    a0d0:	8d 44 24 0c          	lea    0xc(%esp),%eax
    a0d4:	89 44 24 5c          	mov    %eax,0x5c(%esp)
	lpend = (unsigned long *) (&r + 1);
    a0d8:	8d 44 24 0c          	lea    0xc(%esp),%eax
    a0dc:	83 c0 48             	add    $0x48,%eax
    a0df:	89 44 24 54          	mov    %eax,0x54(%esp)
	dest = (unsigned long *) ru;
    a0e3:	8b 44 24 74          	mov    0x74(%esp),%eax
    a0e7:	89 44 24 58          	mov    %eax,0x58(%esp)
	for (; lp < lpend; lp++, dest++)
    a0eb:	eb 20                	jmp    a10d <sys_getrusage+0x238>
		put_fs_long(*lp, dest);
    a0ed:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    a0f1:	8b 00                	mov    (%eax),%eax
    a0f3:	83 ec 08             	sub    $0x8,%esp
    a0f6:	ff 74 24 60          	pushl  0x60(%esp)
    a0fa:	50                   	push   %eax
    a0fb:	e8 69 f3 ff ff       	call   9469 <put_fs_long>
    a100:	83 c4 10             	add    $0x10,%esp
	// 然后让lp指针指向r结构，lpend指向r结构末尾处，而dest指针指向用户空间中的ru结构。最后把r中信息复制到用户空间ru结构中，并
	// 返回0。
	lp = (unsigned long *) &r;
	lpend = (unsigned long *) (&r + 1);
	dest = (unsigned long *) ru;
	for (; lp < lpend; lp++, dest++)
    a103:	83 44 24 5c 04       	addl   $0x4,0x5c(%esp)
    a108:	83 44 24 58 04       	addl   $0x4,0x58(%esp)
    a10d:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    a111:	3b 44 24 54          	cmp    0x54(%esp),%eax
    a115:	72 d6                	jb     a0ed <sys_getrusage+0x218>
		put_fs_long(*lp, dest);
	return(0);
    a117:	b8 00 00 00 00       	mov    $0x0,%eax
}
    a11c:	83 c4 6c             	add    $0x6c,%esp
    a11f:	c3                   	ret    

0000a120 <sys_gettimeofday>:
// 取得系统当前时间，并用指定格式返回。
// timeval结构和timezone结构都定义在include/sys/time.h文件中。timeval结构含有秒和微秒（tv_sec和tv_usec）两个
// 字段。timezone结构含有本地距格林尼治标准时间以西的分钟数（tz_minuteswest）和夏令时间调整类型（tz_dsttime）两上
// 字段。（dst -- Daylight Savings Time）
int sys_gettimeofday(struct timeval *tv, struct timezone *tz)
{
    a120:	53                   	push   %ebx
    a121:	83 ec 08             	sub    $0x8,%esp
	// 如果参数给定的timeval结构指针不空，则在该结构中返回当前时间（秒值和微秒值）;
	// 如果参数给定的用户数据空间中timezone结构的指针不空，则也返回该结构的信息。
	// 程序中startup_time是系统开机时间（秒值）。宏CT_TO_SECS和CT_TO_USECS用于把系统当前嘀嗒数转换成用秒值加微秒值表示。
	// 它们定义在include/linux/sched.h文件中。jiffies_offset是系统嘀嗒数误差调整数。
	if (tv) {
    a124:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    a129:	0f 84 88 00 00 00    	je     a1b7 <sys_gettimeofday+0x97>
		verify_area(tv, sizeof *tv);
    a12f:	83 ec 08             	sub    $0x8,%esp
    a132:	6a 08                	push   $0x8
    a134:	ff 74 24 1c          	pushl  0x1c(%esp)
    a138:	e8 66 e2 ff ff       	call   83a3 <verify_area>
    a13d:	83 c4 10             	add    $0x10,%esp
		put_fs_long(startup_time + CT_TO_SECS(jiffies + jiffies_offset),
    a140:	a1 00 eb 02 00       	mov    0x2eb00,%eax
    a145:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
    a14b:	01 d0                	add    %edx,%eax
    a14d:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a152:	f7 e2                	mul    %edx
    a154:	c1 ea 05             	shr    $0x5,%edx
    a157:	a1 04 eb 02 00       	mov    0x2eb04,%eax
    a15c:	01 d0                	add    %edx,%eax
    a15e:	83 ec 08             	sub    $0x8,%esp
    a161:	ff 74 24 18          	pushl  0x18(%esp)
    a165:	50                   	push   %eax
    a166:	e8 fe f2 ff ff       	call   9469 <put_fs_long>
    a16b:	83 c4 10             	add    $0x10,%esp
			    (unsigned long *) tv);
		put_fs_long(CT_TO_USECS(jiffies + jiffies_offset),
    a16e:	8b 44 24 10          	mov    0x10(%esp),%eax
    a172:	8d 58 04             	lea    0x4(%eax),%ebx
    a175:	a1 00 eb 02 00       	mov    0x2eb00,%eax
    a17a:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
    a180:	8d 0c 10             	lea    (%eax,%edx,1),%ecx
    a183:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a188:	89 c8                	mov    %ecx,%eax
    a18a:	f7 e2                	mul    %edx
    a18c:	89 d0                	mov    %edx,%eax
    a18e:	c1 e8 05             	shr    $0x5,%eax
    a191:	6b c0 64             	imul   $0x64,%eax,%eax
    a194:	29 c1                	sub    %eax,%ecx
    a196:	89 c8                	mov    %ecx,%eax
    a198:	69 c0 40 42 0f 00    	imul   $0xf4240,%eax,%eax
    a19e:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a1a3:	f7 e2                	mul    %edx
    a1a5:	89 d0                	mov    %edx,%eax
    a1a7:	c1 e8 05             	shr    $0x5,%eax
    a1aa:	83 ec 08             	sub    $0x8,%esp
    a1ad:	53                   	push   %ebx
    a1ae:	50                   	push   %eax
    a1af:	e8 b5 f2 ff ff       	call   9469 <put_fs_long>
    a1b4:	83 c4 10             	add    $0x10,%esp
			    ((unsigned long *) tv) + 1);
	}
	if (tz) {
    a1b7:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    a1bc:	74 40                	je     a1fe <sys_gettimeofday+0xde>
		verify_area(tz, sizeof *tz);
    a1be:	83 ec 08             	sub    $0x8,%esp
    a1c1:	6a 08                	push   $0x8
    a1c3:	ff 74 24 20          	pushl  0x20(%esp)
    a1c7:	e8 d7 e1 ff ff       	call   83a3 <verify_area>
    a1cc:	83 c4 10             	add    $0x10,%esp
		put_fs_long(sys_tz.tz_minuteswest, (unsigned long *) tz);
    a1cf:	a1 60 f2 02 00       	mov    0x2f260,%eax
    a1d4:	83 ec 08             	sub    $0x8,%esp
    a1d7:	ff 74 24 1c          	pushl  0x1c(%esp)
    a1db:	50                   	push   %eax
    a1dc:	e8 88 f2 ff ff       	call   9469 <put_fs_long>
    a1e1:	83 c4 10             	add    $0x10,%esp
		put_fs_long(sys_tz.tz_dsttime, ((unsigned long *) tz) + 1);
    a1e4:	8b 44 24 14          	mov    0x14(%esp),%eax
    a1e8:	83 c0 04             	add    $0x4,%eax
    a1eb:	8b 15 64 f2 02 00    	mov    0x2f264,%edx
    a1f1:	83 ec 08             	sub    $0x8,%esp
    a1f4:	50                   	push   %eax
    a1f5:	52                   	push   %edx
    a1f6:	e8 6e f2 ff ff       	call   9469 <put_fs_long>
    a1fb:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
    a1fe:	b8 00 00 00 00       	mov    $0x0,%eax
}
    a203:	83 c4 08             	add    $0x8,%esp
    a206:	5b                   	pop    %ebx
    a207:	c3                   	ret    

0000a208 <sys_settimeofday>:
 */
// 设置系统当前时间。
// 参数tv是指向用户数据区中timeval结构信息的指针。参数tz是用户数据区中timezone结构的指针。该操作需要超级用户权限。如果
// 两者皆为空，则什么也不做，函数返回0。
int sys_settimeofday(struct timeval *tv, struct timezone *tz)
{
    a208:	53                   	push   %ebx
    a209:	83 ec 18             	sub    $0x18,%esp
	static int	firsttime = 1;
	void 		adjust_clock();

	// 设置系统当前时间需要超级用户权限。如果tz指针不空，则设置系统时区信息。即复制用户timezone结构信息到系统中的sys_tz结构
	// 中。如果是第1次调用本系统调用并且参数tv指针不空，则调整系统时钟值。
	if (!suser())
    a20c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    a211:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    a218:	66 85 c0             	test   %ax,%ax
    a21b:	74 0a                	je     a227 <sys_settimeofday+0x1f>
		return -EPERM;
    a21d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    a222:	e9 e6 00 00 00       	jmp    a30d <sys_settimeofday+0x105>
	if (tz) {
    a227:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
    a22c:	74 45                	je     a273 <sys_settimeofday+0x6b>
		sys_tz.tz_minuteswest = get_fs_long((unsigned long *) tz);
    a22e:	ff 74 24 24          	pushl  0x24(%esp)
    a232:	e8 e6 f1 ff ff       	call   941d <get_fs_long>
    a237:	83 c4 04             	add    $0x4,%esp
    a23a:	a3 60 f2 02 00       	mov    %eax,0x2f260
		sys_tz.tz_dsttime = get_fs_long(((unsigned long *) tz)+1);
    a23f:	8b 44 24 24          	mov    0x24(%esp),%eax
    a243:	83 c0 04             	add    $0x4,%eax
    a246:	50                   	push   %eax
    a247:	e8 d1 f1 ff ff       	call   941d <get_fs_long>
    a24c:	83 c4 04             	add    $0x4,%esp
    a24f:	a3 64 f2 02 00       	mov    %eax,0x2f264
		if (firsttime) {
    a254:	a1 10 e3 02 00       	mov    0x2e310,%eax
    a259:	85 c0                	test   %eax,%eax
    a25b:	74 16                	je     a273 <sys_settimeofday+0x6b>
			firsttime = 0;
    a25d:	c7 05 10 e3 02 00 00 	movl   $0x0,0x2e310
    a264:	00 00 00 
			if (!tv)
    a267:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    a26c:	75 05                	jne    a273 <sys_settimeofday+0x6b>
				adjust_clock();
    a26e:	e8 9f 00 00 00       	call   a312 <adjust_clock>
		}
	}
	// 如果参数的timeval结构指针tv不空，则用该结构信息设置系统时钟。首先从tv所指处获取以秒值（sec）加微秒值（usec）表示的系统
	// 时间，然后用秒值修改系统开机时间全局变量startup_time值，并用微秒值设置系统嘀嗒误差值jiffies_offset。
	if (tv) {
    a273:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    a278:	0f 84 8a 00 00 00    	je     a308 <sys_settimeofday+0x100>
		int sec, usec;

		sec = get_fs_long((unsigned long *)tv);
    a27e:	83 ec 0c             	sub    $0xc,%esp
    a281:	ff 74 24 2c          	pushl  0x2c(%esp)
    a285:	e8 93 f1 ff ff       	call   941d <get_fs_long>
    a28a:	83 c4 10             	add    $0x10,%esp
    a28d:	89 44 24 0c          	mov    %eax,0xc(%esp)
		usec = get_fs_long(((unsigned long *)tv) + 1);
    a291:	8b 44 24 20          	mov    0x20(%esp),%eax
    a295:	83 c0 04             	add    $0x4,%eax
    a298:	83 ec 0c             	sub    $0xc,%esp
    a29b:	50                   	push   %eax
    a29c:	e8 7c f1 ff ff       	call   941d <get_fs_long>
    a2a1:	83 c4 10             	add    $0x10,%esp
    a2a4:	89 44 24 08          	mov    %eax,0x8(%esp)

		startup_time = sec - jiffies / HZ;
    a2a8:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
    a2ac:	a1 00 eb 02 00       	mov    0x2eb00,%eax
    a2b1:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a2b6:	f7 e2                	mul    %edx
    a2b8:	89 d0                	mov    %edx,%eax
    a2ba:	c1 e8 05             	shr    $0x5,%eax
    a2bd:	29 c1                	sub    %eax,%ecx
    a2bf:	89 c8                	mov    %ecx,%eax
    a2c1:	a3 04 eb 02 00       	mov    %eax,0x2eb04
		jiffies_offset = usec * HZ / 1000000 - jiffies % HZ;
    a2c6:	8b 44 24 08          	mov    0x8(%esp),%eax
    a2ca:	6b c8 64             	imul   $0x64,%eax,%ecx
    a2cd:	ba 83 de 1b 43       	mov    $0x431bde83,%edx
    a2d2:	89 c8                	mov    %ecx,%eax
    a2d4:	f7 ea                	imul   %edx
    a2d6:	c1 fa 12             	sar    $0x12,%edx
    a2d9:	89 c8                	mov    %ecx,%eax
    a2db:	c1 f8 1f             	sar    $0x1f,%eax
    a2de:	29 c2                	sub    %eax,%edx
    a2e0:	89 d0                	mov    %edx,%eax
    a2e2:	89 c3                	mov    %eax,%ebx
    a2e4:	8b 0d 00 eb 02 00    	mov    0x2eb00,%ecx
    a2ea:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a2ef:	89 c8                	mov    %ecx,%eax
    a2f1:	f7 e2                	mul    %edx
    a2f3:	89 d0                	mov    %edx,%eax
    a2f5:	c1 e8 05             	shr    $0x5,%eax
    a2f8:	6b c0 64             	imul   $0x64,%eax,%eax
    a2fb:	29 c1                	sub    %eax,%ecx
    a2fd:	89 c8                	mov    %ecx,%eax
    a2ff:	29 c3                	sub    %eax,%ebx
    a301:	89 d8                	mov    %ebx,%eax
    a303:	a3 08 eb 02 00       	mov    %eax,0x2eb08
	}
	return 0;
    a308:	b8 00 00 00 00       	mov    $0x0,%eax
}
    a30d:	83 c4 18             	add    $0x18,%esp
    a310:	5b                   	pop    %ebx
    a311:	c3                   	ret    

0000a312 <adjust_clock>:
 */
// 把系统启动时间调整为以GMT为标准的时间。
// startup_time是秒值，因此这里需要把时区分钟值乘上60。
void adjust_clock()
{
	startup_time += sys_tz.tz_minuteswest * 60;
    a312:	a1 60 f2 02 00       	mov    0x2f260,%eax
    a317:	c1 e0 02             	shl    $0x2,%eax
    a31a:	89 c2                	mov    %eax,%edx
    a31c:	c1 e2 04             	shl    $0x4,%edx
    a31f:	29 c2                	sub    %eax,%edx
    a321:	89 d0                	mov    %edx,%eax
    a323:	89 c2                	mov    %eax,%edx
    a325:	a1 04 eb 02 00       	mov    0x2eb04,%eax
    a32a:	01 d0                	add    %edx,%eax
    a32c:	a3 04 eb 02 00       	mov    %eax,0x2eb04
}
    a331:	90                   	nop
    a332:	c3                   	ret    

0000a333 <sys_umask>:

// 设置当前进程创建文件属性屏蔽码为mask & 0777。并返回原屏蔽码。
int sys_umask(int mask)
{
    a333:	83 ec 10             	sub    $0x10,%esp
	int old = current->umask;
    a336:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    a33b:	0f b7 80 30 03 00 00 	movzwl 0x330(%eax),%eax
    a342:	0f b7 c0             	movzwl %ax,%eax
    a345:	89 44 24 0c          	mov    %eax,0xc(%esp)

	current->umask = mask & 0777;
    a349:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    a34e:	8b 54 24 14          	mov    0x14(%esp),%edx
    a352:	66 81 e2 ff 01       	and    $0x1ff,%dx
    a357:	66 89 90 30 03 00 00 	mov    %dx,0x330(%eax)
	return (old);
    a35e:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    a362:	83 c4 10             	add    $0x10,%esp
    a365:	c3                   	ret    

0000a366 <sys_default>:

// 用于捕获未实现的System Call调用。
int sys_default(unsigned long arg1, unsigned long arg2, unsigned long arg3, unsigned long code){
    a366:	83 ec 0c             	sub    $0xc,%esp
    printk("System Call Number:%d\r\n",code);
    a369:	83 ec 08             	sub    $0x8,%esp
    a36c:	ff 74 24 24          	pushl  0x24(%esp)
    a370:	68 88 30 02 00       	push   $0x23088
    a375:	e8 cd e8 ff ff       	call   8c47 <printk>
    a37a:	83 c4 10             	add    $0x10,%esp
    printk("Arg1:%X\r\n",arg1);
    a37d:	83 ec 08             	sub    $0x8,%esp
    a380:	ff 74 24 18          	pushl  0x18(%esp)
    a384:	68 a0 30 02 00       	push   $0x230a0
    a389:	e8 b9 e8 ff ff       	call   8c47 <printk>
    a38e:	83 c4 10             	add    $0x10,%esp
    printk("Arg2:%X\r\n",arg2);
    a391:	83 ec 08             	sub    $0x8,%esp
    a394:	ff 74 24 1c          	pushl  0x1c(%esp)
    a398:	68 aa 30 02 00       	push   $0x230aa
    a39d:	e8 a5 e8 ff ff       	call   8c47 <printk>
    a3a2:	83 c4 10             	add    $0x10,%esp
    printk("Arg3:%X\r\n",arg3);
    a3a5:	83 ec 08             	sub    $0x8,%esp
    a3a8:	ff 74 24 20          	pushl  0x20(%esp)
    a3ac:	68 b4 30 02 00       	push   $0x230b4
    a3b1:	e8 91 e8 ff ff       	call   8c47 <printk>
    a3b6:	83 c4 10             	add    $0x10,%esp
    for(;;);
    a3b9:	eb fe                	jmp    a3b9 <sys_default+0x53>

0000a3bb <put_fs_long>:
//// 将一长字存放在fs段中指定内存地址处.
// 参数:val - 长字值;addr - 内存地址.
// %0 - 寄存器(长字值val);%1 - (内存地址addr).
static inline void put_fs_long(unsigned long val,unsigned long * addr)
{
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
    a3bb:	8b 44 24 04          	mov    0x4(%esp),%eax
    a3bf:	8b 54 24 08          	mov    0x8(%esp),%edx
    a3c3:	64 89 02             	mov    %eax,%fs:(%edx)
}
    a3c6:	90                   	nop
    a3c7:	c3                   	ret    

0000a3c8 <release>:
// 释放指定进程占用的任务槽及其任务数据结构占用的内在页面。
// 参数p是任务数据结构指针。该函数在后面的sys_kill()和sys_waitpid()函数中被调用。扫描任务指针数组表task[]
// 以寻找指定的任务。如果找到，则首先清空该任务槽，然后释放该任务数据结构所占用的内在页面，最后执行调度函数并返回
// 立即退出。如果在任务数组表中没有找到指定任务对应的项，则内核panic。
void release(struct task_struct * p)
{
    a3c8:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	// 如果给定的任务结构指针为NULL则退出。如果该指针指向当前进程则显示警告信息退出。
	if (!p)
    a3cb:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    a3d0:	0f 84 f6 00 00 00    	je     a4cc <release+0x104>
		return;
	if (p == current) {
    a3d6:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    a3db:	39 44 24 20          	cmp    %eax,0x20(%esp)
    a3df:	75 15                	jne    a3f6 <release+0x2e>
		printk("task releasing itself\n\r");
    a3e1:	83 ec 0c             	sub    $0xc,%esp
    a3e4:	68 c0 30 02 00       	push   $0x230c0
    a3e9:	e8 59 e8 ff ff       	call   8c47 <printk>
    a3ee:	83 c4 10             	add    $0x10,%esp
		return;
    a3f1:	e9 d7 00 00 00       	jmp    a4cd <release+0x105>
	}
	// 扫描任务结构指针数组，寻找指定的任务p。如果找到，则置空任务指针数组中对应项，并且更新任务结构之间的关联指针，释放
	// 任务p数据结构占用的内在页面。最后在执行调度程序返回后退出。如果没有找到指定的任务p，则说明内核代码出错了，则显示出错
	// 信息并死机。
	// 更新链接部分的代码会把指定任务p从双向链表中删除。
	for (i = 1 ; i < NR_TASKS ; i++)
    a3f6:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
    a3fd:	00 
    a3fe:	e9 ac 00 00 00       	jmp    a4af <release+0xe7>
		if (task[i] == p) {
    a403:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a407:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a40e:	3b 44 24 20          	cmp    0x20(%esp),%eax
    a412:	0f 85 92 00 00 00    	jne    a4aa <release+0xe2>
			task[i] = NULL;
    a418:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a41c:	c7 04 85 c0 e1 02 00 	movl   $0x0,0x2e1c0(,%eax,4)
    a423:	00 00 00 00 
			// 指向比邻的老进程。如果任务p就是最新的子进程，则还需要更新其父进程的最新子进程指针cptr为指向p的比邻子进程。
			// 指针osptr（old sibling pointer）指向比p先创建的兄弟进程。
			// 指针ysptr（younger sibling pointer）指向比p后创建的兄弟进程。
			// 指针pptr（parent pointer）指向p的父进程。
			// 指针cptr（child pointer）是父进程指向最新（最后）创建的子进程。
			if (p->p_osptr)
    a427:	8b 44 24 20          	mov    0x20(%esp),%eax
    a42b:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a431:	85 c0                	test   %eax,%eax
    a433:	74 1a                	je     a44f <release+0x87>
				p->p_osptr->p_ysptr = p->p_ysptr;
    a435:	8b 44 24 20          	mov    0x20(%esp),%eax
    a439:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a43f:	8b 54 24 20          	mov    0x20(%esp),%edx
    a443:	8b 92 c4 02 00 00    	mov    0x2c4(%edx),%edx
    a449:	89 90 c4 02 00 00    	mov    %edx,0x2c4(%eax)
			if (p->p_ysptr)
    a44f:	8b 44 24 20          	mov    0x20(%esp),%eax
    a453:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    a459:	85 c0                	test   %eax,%eax
    a45b:	74 1c                	je     a479 <release+0xb1>
				p->p_ysptr->p_osptr = p->p_osptr;
    a45d:	8b 44 24 20          	mov    0x20(%esp),%eax
    a461:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    a467:	8b 54 24 20          	mov    0x20(%esp),%edx
    a46b:	8b 92 c8 02 00 00    	mov    0x2c8(%edx),%edx
    a471:	89 90 c8 02 00 00    	mov    %edx,0x2c8(%eax)
    a477:	eb 1a                	jmp    a493 <release+0xcb>
			else
				p->p_pptr->p_cptr = p->p_osptr;
    a479:	8b 44 24 20          	mov    0x20(%esp),%eax
    a47d:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    a483:	8b 54 24 20          	mov    0x20(%esp),%edx
    a487:	8b 92 c8 02 00 00    	mov    0x2c8(%edx),%edx
    a48d:	89 90 c0 02 00 00    	mov    %edx,0x2c0(%eax)
			// 释放要释放的进程数据结构占用的那页内存
			free_page((long)p);
    a493:	8b 44 24 20          	mov    0x20(%esp),%eax
    a497:	83 ec 0c             	sub    $0xc,%esp
    a49a:	50                   	push   %eax
    a49b:	e8 5f 18 00 00       	call   bcff <free_page>
    a4a0:	83 c4 10             	add    $0x10,%esp
			// 重新调度进程
			schedule();
    a4a3:	e8 9d c9 ff ff       	call   6e45 <schedule>
			return;
    a4a8:	eb 23                	jmp    a4cd <release+0x105>
	}
	// 扫描任务结构指针数组，寻找指定的任务p。如果找到，则置空任务指针数组中对应项，并且更新任务结构之间的关联指针，释放
	// 任务p数据结构占用的内在页面。最后在执行调度程序返回后退出。如果没有找到指定的任务p，则说明内核代码出错了，则显示出错
	// 信息并死机。
	// 更新链接部分的代码会把指定任务p从双向链表中删除。
	for (i = 1 ; i < NR_TASKS ; i++)
    a4aa:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    a4af:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    a4b4:	0f 8e 49 ff ff ff    	jle    a403 <release+0x3b>
			free_page((long)p);
			// 重新调度进程
			schedule();
			return;
		}
	panic("trying to release non-existent task");
    a4ba:	83 ec 0c             	sub    $0xc,%esp
    a4bd:	68 d8 30 02 00       	push   $0x230d8
    a4c2:	e8 41 e7 ff ff       	call   8c08 <panic>
    a4c7:	83 c4 10             	add    $0x10,%esp
    a4ca:	eb 01                	jmp    a4cd <release+0x105>
{
	int i;

	// 如果给定的任务结构指针为NULL则退出。如果该指针指向当前进程则显示警告信息退出。
	if (!p)
		return;
    a4cc:	90                   	nop
			// 重新调度进程
			schedule();
			return;
		}
	panic("trying to release non-existent task");
}
    a4cd:	83 c4 1c             	add    $0x1c,%esp
    a4d0:	c3                   	ret    

0000a4d1 <bad_task_ptr>:
/*
 * 检查task[]数组中是否存在一个指定的task_struct结构指针p。
 */
// 检测任务结构指针p。
int bad_task_ptr(struct task_struct *p)
{
    a4d1:	83 ec 10             	sub    $0x10,%esp
	int 	i;

	if (!p)
    a4d4:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    a4d9:	75 07                	jne    a4e2 <bad_task_ptr+0x11>
		return 0;
    a4db:	b8 00 00 00 00       	mov    $0x0,%eax
    a4e0:	eb 33                	jmp    a515 <bad_task_ptr+0x44>
	for (i = 0 ; i < NR_TASKS ; i++)
    a4e2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    a4e9:	00 
    a4ea:	eb 1d                	jmp    a509 <bad_task_ptr+0x38>
		if (task[i] == p)
    a4ec:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a4f0:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a4f7:	3b 44 24 14          	cmp    0x14(%esp),%eax
    a4fb:	75 07                	jne    a504 <bad_task_ptr+0x33>
			return 0;
    a4fd:	b8 00 00 00 00       	mov    $0x0,%eax
    a502:	eb 11                	jmp    a515 <bad_task_ptr+0x44>
{
	int 	i;

	if (!p)
		return 0;
	for (i = 0 ; i < NR_TASKS ; i++)
    a504:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    a509:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    a50e:	7e dc                	jle    a4ec <bad_task_ptr+0x1b>
		if (task[i] == p)
			return 0;
	return 1;
    a510:	b8 01 00 00 00       	mov    $0x1,%eax
}
    a515:	83 c4 10             	add    $0x10,%esp
    a518:	c3                   	ret    

0000a519 <audit_ptree>:
 * 该函数看上去要比实际的恐怖....其实我们仅仅验证了指针p_ysptr和p_osptr构成的双向链表，并检查
 * 了链表与指针p_cptr和p_pptr构成的进程树之间的关系。
 */
// 检查进程树。
void audit_ptree()
{
    a519:	83 ec 1c             	sub    $0x1c,%esp
	int	i;

	// 扫描系统中的除任务0以外的所有任务，检查它们中4个指针（pptr、cptr、ysptr和osptr）的正确性。若任务数组槽（项）
	// 为空则跳过。
	for (i = 1 ; i < NR_TASKS ; i++) {
    a51c:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
    a523:	00 
    a524:	e9 a6 04 00 00       	jmp    a9cf <audit_ptree+0x4b6>
		if (!task[i])
    a529:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a52d:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a534:	85 c0                	test   %eax,%eax
    a536:	0f 84 8d 04 00 00    	je     a9c9 <audit_ptree+0x4b0>
			continue;
		// 如果任务的父进程指针p_pptr没的指向任何进程（即在任务数组中存在），则显示警告信息“警告，pid号N的父进程链接有问题”。
		// 以下语句对cptr、ysptr和osptr进行类似操作。
		if (bad_task_ptr(task[i]->p_pptr))
    a53c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a540:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a547:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    a54d:	50                   	push   %eax
    a54e:	e8 7e ff ff ff       	call   a4d1 <bad_task_ptr>
    a553:	83 c4 04             	add    $0x4,%esp
    a556:	85 c0                	test   %eax,%eax
    a558:	74 22                	je     a57c <audit_ptree+0x63>
			printk("Warning, pid %d's parent link is bad\n",
				task[i]->pid);
    a55a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a55e:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
		if (!task[i])
			continue;
		// 如果任务的父进程指针p_pptr没的指向任何进程（即在任务数组中存在），则显示警告信息“警告，pid号N的父进程链接有问题”。
		// 以下语句对cptr、ysptr和osptr进行类似操作。
		if (bad_task_ptr(task[i]->p_pptr))
			printk("Warning, pid %d's parent link is bad\n",
    a565:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a56b:	83 ec 08             	sub    $0x8,%esp
    a56e:	50                   	push   %eax
    a56f:	68 fc 30 02 00       	push   $0x230fc
    a574:	e8 ce e6 ff ff       	call   8c47 <printk>
    a579:	83 c4 10             	add    $0x10,%esp
				task[i]->pid);
		if (bad_task_ptr(task[i]->p_cptr))
    a57c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a580:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a587:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
    a58d:	83 ec 0c             	sub    $0xc,%esp
    a590:	50                   	push   %eax
    a591:	e8 3b ff ff ff       	call   a4d1 <bad_task_ptr>
    a596:	83 c4 10             	add    $0x10,%esp
    a599:	85 c0                	test   %eax,%eax
    a59b:	74 22                	je     a5bf <audit_ptree+0xa6>
			printk("Warning, pid %d's child link is bad\n",
				task[i]->pid);
    a59d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a5a1:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
		// 以下语句对cptr、ysptr和osptr进行类似操作。
		if (bad_task_ptr(task[i]->p_pptr))
			printk("Warning, pid %d's parent link is bad\n",
				task[i]->pid);
		if (bad_task_ptr(task[i]->p_cptr))
			printk("Warning, pid %d's child link is bad\n",
    a5a8:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a5ae:	83 ec 08             	sub    $0x8,%esp
    a5b1:	50                   	push   %eax
    a5b2:	68 24 31 02 00       	push   $0x23124
    a5b7:	e8 8b e6 ff ff       	call   8c47 <printk>
    a5bc:	83 c4 10             	add    $0x10,%esp
				task[i]->pid);
		if (bad_task_ptr(task[i]->p_ysptr))
    a5bf:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a5c3:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a5ca:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    a5d0:	83 ec 0c             	sub    $0xc,%esp
    a5d3:	50                   	push   %eax
    a5d4:	e8 f8 fe ff ff       	call   a4d1 <bad_task_ptr>
    a5d9:	83 c4 10             	add    $0x10,%esp
    a5dc:	85 c0                	test   %eax,%eax
    a5de:	74 22                	je     a602 <audit_ptree+0xe9>
			printk("Warning, pid %d's ys link is bad\n",
				task[i]->pid);
    a5e0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a5e4:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
				task[i]->pid);
		if (bad_task_ptr(task[i]->p_cptr))
			printk("Warning, pid %d's child link is bad\n",
				task[i]->pid);
		if (bad_task_ptr(task[i]->p_ysptr))
			printk("Warning, pid %d's ys link is bad\n",
    a5eb:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a5f1:	83 ec 08             	sub    $0x8,%esp
    a5f4:	50                   	push   %eax
    a5f5:	68 4c 31 02 00       	push   $0x2314c
    a5fa:	e8 48 e6 ff ff       	call   8c47 <printk>
    a5ff:	83 c4 10             	add    $0x10,%esp
				task[i]->pid);
		if (bad_task_ptr(task[i]->p_osptr))
    a602:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a606:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a60d:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a613:	83 ec 0c             	sub    $0xc,%esp
    a616:	50                   	push   %eax
    a617:	e8 b5 fe ff ff       	call   a4d1 <bad_task_ptr>
    a61c:	83 c4 10             	add    $0x10,%esp
    a61f:	85 c0                	test   %eax,%eax
    a621:	74 22                	je     a645 <audit_ptree+0x12c>
			printk("Warning, pid %d's os link is bad\n",
				task[i]->pid);
    a623:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a627:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
				task[i]->pid);
		if (bad_task_ptr(task[i]->p_ysptr))
			printk("Warning, pid %d's ys link is bad\n",
				task[i]->pid);
		if (bad_task_ptr(task[i]->p_osptr))
			printk("Warning, pid %d's os link is bad\n",
    a62e:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a634:	83 ec 08             	sub    $0x8,%esp
    a637:	50                   	push   %eax
    a638:	68 70 31 02 00       	push   $0x23170
    a63d:	e8 05 e6 ff ff       	call   8c47 <printk>
    a642:	83 c4 10             	add    $0x10,%esp
				task[i]->pid);
		// 如果任务的父进程指针p_pptr指向了自己，则显示警告信息“警告，pid号N的父进程链接指针指向了自己”。以下语句对cptr、ysptr
		// 和osptr进行类似操作。
		if (task[i]->p_pptr == task[i])
    a645:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a649:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a650:	8b 90 bc 02 00 00    	mov    0x2bc(%eax),%edx
    a656:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a65a:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a661:	39 c2                	cmp    %eax,%edx
    a663:	75 10                	jne    a675 <audit_ptree+0x15c>
			printk("Warning, pid %d parent link points to self\n");
    a665:	83 ec 0c             	sub    $0xc,%esp
    a668:	68 94 31 02 00       	push   $0x23194
    a66d:	e8 d5 e5 ff ff       	call   8c47 <printk>
    a672:	83 c4 10             	add    $0x10,%esp
		if (task[i]->p_cptr == task[i])
    a675:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a679:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a680:	8b 90 c0 02 00 00    	mov    0x2c0(%eax),%edx
    a686:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a68a:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a691:	39 c2                	cmp    %eax,%edx
    a693:	75 10                	jne    a6a5 <audit_ptree+0x18c>
			printk("Warning, pid %d child link points to self\n");
    a695:	83 ec 0c             	sub    $0xc,%esp
    a698:	68 c0 31 02 00       	push   $0x231c0
    a69d:	e8 a5 e5 ff ff       	call   8c47 <printk>
    a6a2:	83 c4 10             	add    $0x10,%esp
		if (task[i]->p_ysptr == task[i])
    a6a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a6a9:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a6b0:	8b 90 c4 02 00 00    	mov    0x2c4(%eax),%edx
    a6b6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a6ba:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a6c1:	39 c2                	cmp    %eax,%edx
    a6c3:	75 10                	jne    a6d5 <audit_ptree+0x1bc>
			printk("Warning, pid %d ys link points to self\n");
    a6c5:	83 ec 0c             	sub    $0xc,%esp
    a6c8:	68 ec 31 02 00       	push   $0x231ec
    a6cd:	e8 75 e5 ff ff       	call   8c47 <printk>
    a6d2:	83 c4 10             	add    $0x10,%esp
		if (task[i]->p_osptr == task[i])
    a6d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a6d9:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a6e0:	8b 90 c8 02 00 00    	mov    0x2c8(%eax),%edx
    a6e6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a6ea:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a6f1:	39 c2                	cmp    %eax,%edx
    a6f3:	75 10                	jne    a705 <audit_ptree+0x1ec>
			printk("Warning, pid %d os link points to self\n");
    a6f5:	83 ec 0c             	sub    $0xc,%esp
    a6f8:	68 14 32 02 00       	push   $0x23214
    a6fd:	e8 45 e5 ff ff       	call   8c47 <printk>
    a702:	83 c4 10             	add    $0x10,%esp
		// 如果任务有比自己先创建的比邻兄弟进程，那么就检查它们是否有共同的父进程，并检查这个老兄弟进程的ysptr指针是否正确地指向本
		// 进程。否则显示警告信息。
		if (task[i]->p_osptr) {
    a705:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a709:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a710:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a716:	85 c0                	test   %eax,%eax
    a718:	0f 84 e1 00 00 00    	je     a7ff <audit_ptree+0x2e6>
			if (task[i]->p_pptr != task[i]->p_osptr->p_pptr)
    a71e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a722:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a729:	8b 90 bc 02 00 00    	mov    0x2bc(%eax),%edx
    a72f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a733:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a73a:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a740:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    a746:	39 c2                	cmp    %eax,%edx
    a748:	74 55                	je     a79f <audit_ptree+0x286>
				printk(
			"Warning, pid %d older sibling %d parent is %d\n",
				task[i]->pid, task[i]->p_osptr->pid,
				task[i]->p_osptr->p_pptr->pid);
    a74a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a74e:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a755:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a75b:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
			printk("Warning, pid %d os link points to self\n");
		// 如果任务有比自己先创建的比邻兄弟进程，那么就检查它们是否有共同的父进程，并检查这个老兄弟进程的ysptr指针是否正确地指向本
		// 进程。否则显示警告信息。
		if (task[i]->p_osptr) {
			if (task[i]->p_pptr != task[i]->p_osptr->p_pptr)
				printk(
    a761:	8b 88 2c 02 00 00    	mov    0x22c(%eax),%ecx
			"Warning, pid %d older sibling %d parent is %d\n",
				task[i]->pid, task[i]->p_osptr->pid,
    a767:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a76b:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a772:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
			printk("Warning, pid %d os link points to self\n");
		// 如果任务有比自己先创建的比邻兄弟进程，那么就检查它们是否有共同的父进程，并检查这个老兄弟进程的ysptr指针是否正确地指向本
		// 进程。否则显示警告信息。
		if (task[i]->p_osptr) {
			if (task[i]->p_pptr != task[i]->p_osptr->p_pptr)
				printk(
    a778:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
			"Warning, pid %d older sibling %d parent is %d\n",
				task[i]->pid, task[i]->p_osptr->pid,
    a77e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a782:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
			printk("Warning, pid %d os link points to self\n");
		// 如果任务有比自己先创建的比邻兄弟进程，那么就检查它们是否有共同的父进程，并检查这个老兄弟进程的ysptr指针是否正确地指向本
		// 进程。否则显示警告信息。
		if (task[i]->p_osptr) {
			if (task[i]->p_pptr != task[i]->p_osptr->p_pptr)
				printk(
    a789:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a78f:	51                   	push   %ecx
    a790:	52                   	push   %edx
    a791:	50                   	push   %eax
    a792:	68 3c 32 02 00       	push   $0x2323c
    a797:	e8 ab e4 ff ff       	call   8c47 <printk>
    a79c:	83 c4 10             	add    $0x10,%esp
			"Warning, pid %d older sibling %d parent is %d\n",
				task[i]->pid, task[i]->p_osptr->pid,
				task[i]->p_osptr->p_pptr->pid);
			if (task[i]->p_osptr->p_ysptr != task[i])
    a79f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a7a3:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a7aa:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a7b0:	8b 90 c4 02 00 00    	mov    0x2c4(%eax),%edx
    a7b6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a7ba:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a7c1:	39 c2                	cmp    %eax,%edx
    a7c3:	74 3a                	je     a7ff <audit_ptree+0x2e6>
				printk(
		"Warning, pid %d older sibling %d has mismatched ys link\n",
				task[i]->pid, task[i]->p_osptr->pid);
    a7c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a7c9:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a7d0:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
				printk(
			"Warning, pid %d older sibling %d parent is %d\n",
				task[i]->pid, task[i]->p_osptr->pid,
				task[i]->p_osptr->p_pptr->pid);
			if (task[i]->p_osptr->p_ysptr != task[i])
				printk(
    a7d6:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
		"Warning, pid %d older sibling %d has mismatched ys link\n",
				task[i]->pid, task[i]->p_osptr->pid);
    a7dc:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a7e0:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
				printk(
			"Warning, pid %d older sibling %d parent is %d\n",
				task[i]->pid, task[i]->p_osptr->pid,
				task[i]->p_osptr->p_pptr->pid);
			if (task[i]->p_osptr->p_ysptr != task[i])
				printk(
    a7e7:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a7ed:	83 ec 04             	sub    $0x4,%esp
    a7f0:	52                   	push   %edx
    a7f1:	50                   	push   %eax
    a7f2:	68 6c 32 02 00       	push   $0x2326c
    a7f7:	e8 4b e4 ff ff       	call   8c47 <printk>
    a7fc:	83 c4 10             	add    $0x10,%esp
		"Warning, pid %d older sibling %d has mismatched ys link\n",
				task[i]->pid, task[i]->p_osptr->pid);
		}
		// 如果任务有比自己后创建的比邻兄弟进程，那么就检查它们是否有共同的父进程，并检查这个小弟进程的osptr指针是否正确地指向本进程
		// 否则显示警告信息。
		if (task[i]->p_ysptr) {
    a7ff:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a803:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a80a:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    a810:	85 c0                	test   %eax,%eax
    a812:	0f 84 e1 00 00 00    	je     a8f9 <audit_ptree+0x3e0>
			if (task[i]->p_pptr != task[i]->p_ysptr->p_pptr)
    a818:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a81c:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a823:	8b 90 bc 02 00 00    	mov    0x2bc(%eax),%edx
    a829:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a82d:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a834:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    a83a:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    a840:	39 c2                	cmp    %eax,%edx
    a842:	74 55                	je     a899 <audit_ptree+0x380>
				printk(
			"Warning, pid %d younger sibling %d parent is %d\n",
				task[i]->pid, task[i]->p_osptr->pid,
				task[i]->p_osptr->p_pptr->pid);
    a844:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a848:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a84f:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a855:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
		}
		// 如果任务有比自己后创建的比邻兄弟进程，那么就检查它们是否有共同的父进程，并检查这个小弟进程的osptr指针是否正确地指向本进程
		// 否则显示警告信息。
		if (task[i]->p_ysptr) {
			if (task[i]->p_pptr != task[i]->p_ysptr->p_pptr)
				printk(
    a85b:	8b 88 2c 02 00 00    	mov    0x22c(%eax),%ecx
			"Warning, pid %d younger sibling %d parent is %d\n",
				task[i]->pid, task[i]->p_osptr->pid,
    a861:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a865:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a86c:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
		}
		// 如果任务有比自己后创建的比邻兄弟进程，那么就检查它们是否有共同的父进程，并检查这个小弟进程的osptr指针是否正确地指向本进程
		// 否则显示警告信息。
		if (task[i]->p_ysptr) {
			if (task[i]->p_pptr != task[i]->p_ysptr->p_pptr)
				printk(
    a872:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
			"Warning, pid %d younger sibling %d parent is %d\n",
				task[i]->pid, task[i]->p_osptr->pid,
    a878:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a87c:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
		}
		// 如果任务有比自己后创建的比邻兄弟进程，那么就检查它们是否有共同的父进程，并检查这个小弟进程的osptr指针是否正确地指向本进程
		// 否则显示警告信息。
		if (task[i]->p_ysptr) {
			if (task[i]->p_pptr != task[i]->p_ysptr->p_pptr)
				printk(
    a883:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a889:	51                   	push   %ecx
    a88a:	52                   	push   %edx
    a88b:	50                   	push   %eax
    a88c:	68 a8 32 02 00       	push   $0x232a8
    a891:	e8 b1 e3 ff ff       	call   8c47 <printk>
    a896:	83 c4 10             	add    $0x10,%esp
			"Warning, pid %d younger sibling %d parent is %d\n",
				task[i]->pid, task[i]->p_osptr->pid,
				task[i]->p_osptr->p_pptr->pid);
			if (task[i]->p_ysptr->p_osptr != task[i])
    a899:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a89d:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a8a4:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    a8aa:	8b 90 c8 02 00 00    	mov    0x2c8(%eax),%edx
    a8b0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a8b4:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a8bb:	39 c2                	cmp    %eax,%edx
    a8bd:	74 3a                	je     a8f9 <audit_ptree+0x3e0>
				printk(
		"Warning, pid %d younger sibling %d has mismatched os link\n",
				task[i]->pid, task[i]->p_ysptr->pid);
    a8bf:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a8c3:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a8ca:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
				printk(
			"Warning, pid %d younger sibling %d parent is %d\n",
				task[i]->pid, task[i]->p_osptr->pid,
				task[i]->p_osptr->p_pptr->pid);
			if (task[i]->p_ysptr->p_osptr != task[i])
				printk(
    a8d0:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
		"Warning, pid %d younger sibling %d has mismatched os link\n",
				task[i]->pid, task[i]->p_ysptr->pid);
    a8d6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a8da:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
				printk(
			"Warning, pid %d younger sibling %d parent is %d\n",
				task[i]->pid, task[i]->p_osptr->pid,
				task[i]->p_osptr->p_pptr->pid);
			if (task[i]->p_ysptr->p_osptr != task[i])
				printk(
    a8e1:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a8e7:	83 ec 04             	sub    $0x4,%esp
    a8ea:	52                   	push   %edx
    a8eb:	50                   	push   %eax
    a8ec:	68 dc 32 02 00       	push   $0x232dc
    a8f1:	e8 51 e3 ff ff       	call   8c47 <printk>
    a8f6:	83 c4 10             	add    $0x10,%esp
		"Warning, pid %d younger sibling %d has mismatched os link\n",
				task[i]->pid, task[i]->p_ysptr->pid);
		}
		// 如果任务的最新子进程指针cptr不空，那么检查该子进程的父进程是否为本进程，并检查该子进程的小弟进程指针yspter是否为空。若不是
		// 则显示警告信息。
		if (task[i]->p_cptr) {
    a8f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a8fd:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a904:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
    a90a:	85 c0                	test   %eax,%eax
    a90c:	0f 84 b8 00 00 00    	je     a9ca <audit_ptree+0x4b1>
			if (task[i]->p_cptr->p_pptr != task[i])
    a912:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a916:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a91d:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
    a923:	8b 90 bc 02 00 00    	mov    0x2bc(%eax),%edx
    a929:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a92d:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a934:	39 c2                	cmp    %eax,%edx
    a936:	74 3a                	je     a972 <audit_ptree+0x459>
				printk(
			"Warning, pid %d youngest child %d has mismatched parent link\n",
				task[i]->pid, task[i]->p_cptr->pid);
    a938:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a93c:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a943:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
		}
		// 如果任务的最新子进程指针cptr不空，那么检查该子进程的父进程是否为本进程，并检查该子进程的小弟进程指针yspter是否为空。若不是
		// 则显示警告信息。
		if (task[i]->p_cptr) {
			if (task[i]->p_cptr->p_pptr != task[i])
				printk(
    a949:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
			"Warning, pid %d youngest child %d has mismatched parent link\n",
				task[i]->pid, task[i]->p_cptr->pid);
    a94f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a953:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
		}
		// 如果任务的最新子进程指针cptr不空，那么检查该子进程的父进程是否为本进程，并检查该子进程的小弟进程指针yspter是否为空。若不是
		// 则显示警告信息。
		if (task[i]->p_cptr) {
			if (task[i]->p_cptr->p_pptr != task[i])
				printk(
    a95a:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a960:	83 ec 04             	sub    $0x4,%esp
    a963:	52                   	push   %edx
    a964:	50                   	push   %eax
    a965:	68 18 33 02 00       	push   $0x23318
    a96a:	e8 d8 e2 ff ff       	call   8c47 <printk>
    a96f:	83 c4 10             	add    $0x10,%esp
			"Warning, pid %d youngest child %d has mismatched parent link\n",
				task[i]->pid, task[i]->p_cptr->pid);
			if (task[i]->p_cptr->p_ysptr)
    a972:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a976:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a97d:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
    a983:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    a989:	85 c0                	test   %eax,%eax
    a98b:	74 3d                	je     a9ca <audit_ptree+0x4b1>
				printk(
			"Warning, pid %d youngest child %d has non-NULL ys link\n",
				task[i]->pid, task[i]->p_cptr->pid);
    a98d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a991:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a998:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
			if (task[i]->p_cptr->p_pptr != task[i])
				printk(
			"Warning, pid %d youngest child %d has mismatched parent link\n",
				task[i]->pid, task[i]->p_cptr->pid);
			if (task[i]->p_cptr->p_ysptr)
				printk(
    a99e:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
			"Warning, pid %d youngest child %d has non-NULL ys link\n",
				task[i]->pid, task[i]->p_cptr->pid);
    a9a4:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a9a8:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
			if (task[i]->p_cptr->p_pptr != task[i])
				printk(
			"Warning, pid %d youngest child %d has mismatched parent link\n",
				task[i]->pid, task[i]->p_cptr->pid);
			if (task[i]->p_cptr->p_ysptr)
				printk(
    a9af:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a9b5:	83 ec 04             	sub    $0x4,%esp
    a9b8:	52                   	push   %edx
    a9b9:	50                   	push   %eax
    a9ba:	68 58 33 02 00       	push   $0x23358
    a9bf:	e8 83 e2 ff ff       	call   8c47 <printk>
    a9c4:	83 c4 10             	add    $0x10,%esp
    a9c7:	eb 01                	jmp    a9ca <audit_ptree+0x4b1>

	// 扫描系统中的除任务0以外的所有任务，检查它们中4个指针（pptr、cptr、ysptr和osptr）的正确性。若任务数组槽（项）
	// 为空则跳过。
	for (i = 1 ; i < NR_TASKS ; i++) {
		if (!task[i])
			continue;
    a9c9:	90                   	nop
{
	int	i;

	// 扫描系统中的除任务0以外的所有任务，检查它们中4个指针（pptr、cptr、ysptr和osptr）的正确性。若任务数组槽（项）
	// 为空则跳过。
	for (i = 1 ; i < NR_TASKS ; i++) {
    a9ca:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    a9cf:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    a9d4:	0f 8e 4f fb ff ff    	jle    a529 <audit_ptree+0x10>
				printk(
			"Warning, pid %d youngest child %d has non-NULL ys link\n",
				task[i]->pid, task[i]->p_cptr->pid);
		}
	}
}
    a9da:	90                   	nop
    a9db:	83 c4 1c             	add    $0x1c,%esp
    a9de:	c3                   	ret    

0000a9df <send_sig>:

// 向指定任务p发送信号sig，权限为priv。
// 参数：sig - 信号值；p - 指定任务的指针；priv - 强制发送信号的标志。即不需要考虑进程用户属性或级别而能发
// 送信号sig并退出，否则返回未许可错误号。
static inline int send_sig(long sig, struct task_struct * p, int priv)
{
    a9df:	53                   	push   %ebx
	// 如果没有权限，并且当前进程的有效用户ID与进程p的不同，并且也不是超级用户，则说明没有向p发送信号的权利。suser()
	// 定义为（current->euid==0），用于判断是否为超级用户。
	if (!p)
    a9e0:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    a9e5:	75 0a                	jne    a9f1 <send_sig+0x12>
		return -EINVAL;
    a9e7:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    a9ec:	e9 ef 00 00 00       	jmp    aae0 <send_sig+0x101>
	if (!priv && (current->euid != p->euid) && !suser())
    a9f1:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    a9f6:	75 37                	jne    aa2f <send_sig+0x50>
    a9f8:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    a9fd:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
    aa04:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa08:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    aa0f:	66 39 c2             	cmp    %ax,%dx
    aa12:	74 1b                	je     aa2f <send_sig+0x50>
    aa14:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    aa19:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    aa20:	66 85 c0             	test   %ax,%ax
    aa23:	74 0a                	je     aa2f <send_sig+0x50>
		return -EPERM;
    aa25:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    aa2a:	e9 b1 00 00 00       	jmp    aae0 <send_sig+0x101>
	// 若需要发送的信号是SIGKILL或SIGCONT，那么如果此时接收信号的进程p正处于停止状态就置其为就绪（运行）状态。然后
	// 修改进程p的信号位图signal，去掉（复位）会导致进程停止的信号SIGSTOP、SIGTSTP、SIGTTIN和SIGTTOU。
	if ((sig == SIGKILL) || (sig == SIGCONT)) {
    aa2f:	83 7c 24 08 09       	cmpl   $0x9,0x8(%esp)
    aa34:	74 07                	je     aa3d <send_sig+0x5e>
    aa36:	83 7c 24 08 12       	cmpl   $0x12,0x8(%esp)
    aa3b:	75 38                	jne    aa75 <send_sig+0x96>
		if (p->state == TASK_STOPPED)
    aa3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa41:	8b 00                	mov    (%eax),%eax
    aa43:	83 f8 04             	cmp    $0x4,%eax
    aa46:	75 0a                	jne    aa52 <send_sig+0x73>
			p->state = TASK_RUNNING;
    aa48:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa4c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		p->exit_code = 0;
    aa52:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa56:	c7 80 14 02 00 00 00 	movl   $0x0,0x214(%eax)
    aa5d:	00 00 00 
		p->signal &= ~( (1 << (SIGSTOP - 1)) | (1 << (SIGTSTP - 1)) |
    aa60:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa64:	8b 40 0c             	mov    0xc(%eax),%eax
    aa67:	25 ff ff c3 ff       	and    $0xffc3ffff,%eax
    aa6c:	89 c2                	mov    %eax,%edx
    aa6e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa72:	89 50 0c             	mov    %edx,0xc(%eax)
				(1 << (SIGTTIN - 1)) | (1 << (SIGTTOU - 1)) );
	}
	/* If the signal will be ignored, don't even post it */
    /* 如果要发送的信号sig将被进程p忽略掉，那么就根本不用发送 */
	if ((int) p->sigaction[sig - 1].sa_handler == 1)
    aa75:	8b 44 24 08          	mov    0x8(%esp),%eax
    aa79:	8d 50 ff             	lea    -0x1(%eax),%edx
    aa7c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa80:	83 c2 01             	add    $0x1,%edx
    aa83:	c1 e2 04             	shl    $0x4,%edx
    aa86:	01 d0                	add    %edx,%eax
    aa88:	8b 00                	mov    (%eax),%eax
    aa8a:	83 f8 01             	cmp    $0x1,%eax
    aa8d:	75 07                	jne    aa96 <send_sig+0xb7>
		return 0;
    aa8f:	b8 00 00 00 00       	mov    $0x0,%eax
    aa94:	eb 4a                	jmp    aae0 <send_sig+0x101>
	/* Depends on order SIGSTOP, SIGTSTP, SIGTTIN, SIGTTOU */
   	/* 以下判断依赖于SIGSTOP、SIGTSTP、SIGTTIN和SIGTTOU */
	// 如果信号是SIGSTOP、SIGTSTP、SIGTTIN和SIGTTOU之一，那么说明要让接收信号的进程p停止运行。因此（若p的信号位图
	// 中有SIGCONT置位）就需要复位位图中继续运行的信号。
	if ((sig >= SIGSTOP) && (sig <= SIGTTOU))
    aa96:	83 7c 24 08 12       	cmpl   $0x12,0x8(%esp)
    aa9b:	7e 1c                	jle    aab9 <send_sig+0xda>
    aa9d:	83 7c 24 08 16       	cmpl   $0x16,0x8(%esp)
    aaa2:	7f 15                	jg     aab9 <send_sig+0xda>
		p->signal &= ~(1 << (SIGCONT - 1));
    aaa4:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aaa8:	8b 40 0c             	mov    0xc(%eax),%eax
    aaab:	25 ff ff fd ff       	and    $0xfffdffff,%eax
    aab0:	89 c2                	mov    %eax,%edx
    aab2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aab6:	89 50 0c             	mov    %edx,0xc(%eax)
	/* Actually deliver the signal */
    /* 最后，我们向进程p发送信号p */
	p->signal |= (1 << (sig - 1));
    aab9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aabd:	8b 40 0c             	mov    0xc(%eax),%eax
    aac0:	8b 54 24 08          	mov    0x8(%esp),%edx
    aac4:	83 ea 01             	sub    $0x1,%edx
    aac7:	bb 01 00 00 00       	mov    $0x1,%ebx
    aacc:	89 d1                	mov    %edx,%ecx
    aace:	d3 e3                	shl    %cl,%ebx
    aad0:	89 da                	mov    %ebx,%edx
    aad2:	09 c2                	or     %eax,%edx
    aad4:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aad8:	89 50 0c             	mov    %edx,0xc(%eax)
	return 0;
    aadb:	b8 00 00 00 00       	mov    $0x0,%eax
}
    aae0:	5b                   	pop    %ebx
    aae1:	c3                   	ret    

0000aae2 <session_of_pgrp>:

// 根据进程组号pgrp取得进程组所属的会话号。
// 扫描任务数组，寻找进程组号为pgrp的进程，并返回其会话号。如果没有找到指定的进程组号pgrp的任何进程，则返回-1.
int session_of_pgrp(int pgrp)
{
    aae2:	83 ec 10             	sub    $0x10,%esp
	struct task_struct **p;

 	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    aae5:	c7 44 24 0c bc e2 02 	movl   $0x2e2bc,0xc(%esp)
    aaec:	00 
    aaed:	eb 25                	jmp    ab14 <session_of_pgrp+0x32>
		if ((*p)->pgrp == pgrp)
    aaef:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aaf3:	8b 00                	mov    (%eax),%eax
    aaf5:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    aafb:	3b 44 24 14          	cmp    0x14(%esp),%eax
    aaff:	75 0e                	jne    ab0f <session_of_pgrp+0x2d>
			return((*p)->session);
    ab01:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ab05:	8b 00                	mov    (%eax),%eax
    ab07:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
    ab0d:	eb 14                	jmp    ab23 <session_of_pgrp+0x41>
// 扫描任务数组，寻找进程组号为pgrp的进程，并返回其会话号。如果没有找到指定的进程组号pgrp的任何进程，则返回-1.
int session_of_pgrp(int pgrp)
{
	struct task_struct **p;

 	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    ab0f:	83 6c 24 0c 04       	subl   $0x4,0xc(%esp)
    ab14:	81 7c 24 0c c0 e1 02 	cmpl   $0x2e1c0,0xc(%esp)
    ab1b:	00 
    ab1c:	77 d1                	ja     aaef <session_of_pgrp+0xd>
		if ((*p)->pgrp == pgrp)
			return((*p)->session);
	return -1;
    ab1e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
    ab23:	83 c4 10             	add    $0x10,%esp
    ab26:	c3                   	ret    

0000ab27 <kill_pg>:
// 参数：pgrp - 指定的进程组号；sig - 指定的信号；priv - 权限。
// 即向指定进程组pgrp中的每个进程发送指定信号sig。只要向一个进程发送成功最后就会返回0，否则如果没有找到指定进程
// 组号pgrp的任何一个进程，则返回出错号-ESRCH，若找到进程组号是pgrp的进程，但是发送信号失败，则返回发送失败的
// 错误码。
int kill_pg(int pgrp, int sig, int priv)
{
    ab27:	83 ec 10             	sub    $0x10,%esp
	struct task_struct **p;
	int err,retval = -ESRCH;                // -ESRCH表示指定的进程不存在。
    ab2a:	c7 44 24 08 fd ff ff 	movl   $0xfffffffd,0x8(%esp)
    ab31:	ff 
	int found = 0;
    ab32:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
    ab39:	00 

	// 首先判断给定的信号和进程组号是否有效。然后扫描系统中所有任务。若扫描到进程组号为pgrp的进程，就向其发送信号sig。
	// 只要有一次信号发送成功，函数最后就会返回0。
	if (sig < 1 || sig > 32 || pgrp <= 0)
    ab3a:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    ab3f:	7e 0e                	jle    ab4f <kill_pg+0x28>
    ab41:	83 7c 24 18 20       	cmpl   $0x20,0x18(%esp)
    ab46:	7f 07                	jg     ab4f <kill_pg+0x28>
    ab48:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    ab4d:	7f 07                	jg     ab56 <kill_pg+0x2f>
		return -EINVAL;
    ab4f:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    ab54:	eb 73                	jmp    abc9 <kill_pg+0xa2>
 	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    ab56:	c7 44 24 0c bc e2 02 	movl   $0x2e2bc,0xc(%esp)
    ab5d:	00 
    ab5e:	eb 4c                	jmp    abac <kill_pg+0x85>
		if ((*p)->pgrp == pgrp) {
    ab60:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ab64:	8b 00                	mov    (%eax),%eax
    ab66:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    ab6c:	3b 44 24 14          	cmp    0x14(%esp),%eax
    ab70:	75 35                	jne    aba7 <kill_pg+0x80>
			if (sig && (err = send_sig(sig, *p, priv)))
    ab72:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    ab77:	74 29                	je     aba2 <kill_pg+0x7b>
    ab79:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ab7d:	8b 00                	mov    (%eax),%eax
    ab7f:	ff 74 24 1c          	pushl  0x1c(%esp)
    ab83:	50                   	push   %eax
    ab84:	ff 74 24 20          	pushl  0x20(%esp)
    ab88:	e8 52 fe ff ff       	call   a9df <send_sig>
    ab8d:	83 c4 0c             	add    $0xc,%esp
    ab90:	89 04 24             	mov    %eax,(%esp)
    ab93:	83 3c 24 00          	cmpl   $0x0,(%esp)
    ab97:	74 09                	je     aba2 <kill_pg+0x7b>
				retval = err;
    ab99:	8b 04 24             	mov    (%esp),%eax
    ab9c:	89 44 24 08          	mov    %eax,0x8(%esp)
    aba0:	eb 05                	jmp    aba7 <kill_pg+0x80>
			else
				found++;
    aba2:	83 44 24 04 01       	addl   $0x1,0x4(%esp)

	// 首先判断给定的信号和进程组号是否有效。然后扫描系统中所有任务。若扫描到进程组号为pgrp的进程，就向其发送信号sig。
	// 只要有一次信号发送成功，函数最后就会返回0。
	if (sig < 1 || sig > 32 || pgrp <= 0)
		return -EINVAL;
 	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    aba7:	83 6c 24 0c 04       	subl   $0x4,0xc(%esp)
    abac:	81 7c 24 0c c0 e1 02 	cmpl   $0x2e1c0,0xc(%esp)
    abb3:	00 
    abb4:	77 aa                	ja     ab60 <kill_pg+0x39>
			if (sig && (err = send_sig(sig, *p, priv)))
				retval = err;
			else
				found++;
		}
	return(found ? 0 : retval);
    abb6:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    abbb:	75 06                	jne    abc3 <kill_pg+0x9c>
    abbd:	8b 44 24 08          	mov    0x8(%esp),%eax
    abc1:	eb 05                	jmp    abc8 <kill_pg+0xa1>
    abc3:	b8 00 00 00 00       	mov    $0x0,%eax
    abc8:	90                   	nop
}
    abc9:	83 c4 10             	add    $0x10,%esp
    abcc:	c3                   	ret    

0000abcd <kill_proc>:
// 终止进程（向进程发送信号）。
// 参数：pid - 进程号；sig - 指定信号；priv - 权限。
// 即向进程号为pid的进程发送指定信号sig。若找到指定pid的进程，那么若信号发送成功，则返回0，否则返回信号发送出错。
// 如果没有找到指定进程号pid的进程，则返回出错号-ESRCH（指定进程不存在）。
int kill_proc(int pid, int sig, int priv)
{
    abcd:	83 ec 10             	sub    $0x10,%esp
 	struct task_struct **p;

	if (sig < 1 || sig > 32)
    abd0:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    abd5:	7e 07                	jle    abde <kill_proc+0x11>
    abd7:	83 7c 24 18 20       	cmpl   $0x20,0x18(%esp)
    abdc:	7e 07                	jle    abe5 <kill_proc+0x18>
		return -EINVAL;
    abde:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    abe3:	eb 57                	jmp    ac3c <kill_proc+0x6f>
	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    abe5:	c7 44 24 0c bc e2 02 	movl   $0x2e2bc,0xc(%esp)
    abec:	00 
    abed:	eb 3e                	jmp    ac2d <kill_proc+0x60>
		if ((*p)->pid == pid)
    abef:	8b 44 24 0c          	mov    0xc(%esp),%eax
    abf3:	8b 00                	mov    (%eax),%eax
    abf5:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    abfb:	3b 44 24 14          	cmp    0x14(%esp),%eax
    abff:	75 27                	jne    ac28 <kill_proc+0x5b>
			return(sig ? send_sig(sig, *p, priv) : 0);
    ac01:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    ac06:	74 19                	je     ac21 <kill_proc+0x54>
    ac08:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ac0c:	8b 00                	mov    (%eax),%eax
    ac0e:	ff 74 24 1c          	pushl  0x1c(%esp)
    ac12:	50                   	push   %eax
    ac13:	ff 74 24 20          	pushl  0x20(%esp)
    ac17:	e8 c3 fd ff ff       	call   a9df <send_sig>
    ac1c:	83 c4 0c             	add    $0xc,%esp
    ac1f:	eb 1b                	jmp    ac3c <kill_proc+0x6f>
    ac21:	b8 00 00 00 00       	mov    $0x0,%eax
    ac26:	eb 14                	jmp    ac3c <kill_proc+0x6f>
{
 	struct task_struct **p;

	if (sig < 1 || sig > 32)
		return -EINVAL;
	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    ac28:	83 6c 24 0c 04       	subl   $0x4,0xc(%esp)
    ac2d:	81 7c 24 0c c0 e1 02 	cmpl   $0x2e1c0,0xc(%esp)
    ac34:	00 
    ac35:	77 b8                	ja     abef <kill_proc+0x22>
		if ((*p)->pid == pid)
			return(sig ? send_sig(sig, *p, priv) : 0);
	return(-ESRCH);
    ac37:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
    ac3c:	83 c4 10             	add    $0x10,%esp
    ac3f:	c3                   	ret    

0000ac40 <sys_kill>:
// 如果pid<-1，则信号sig将发送给进程组-pid的所有进程。
// 如果信号sig为0，则不发送信号，但仍会进行错误检查。如果成功则返回0.
// 该函数扫描任务数组表，并根据pid对满足条件的进程发送指定信号sig。若pid等于0，表明当前进程是进程组组长，因此需要
// 向所有组内的进程强制发送信号sig。
int sys_kill(int pid, int sig)
{
    ac40:	83 ec 10             	sub    $0x10,%esp
	struct task_struct **p = NR_TASKS + task;       // p指向任务数组最后一项。
    ac43:	c7 44 24 0c c0 e2 02 	movl   $0x2e2c0,0xc(%esp)
    ac4a:	00 
	int err, retval = 0;
    ac4b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    ac52:	00 

	if (!pid)
    ac53:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    ac58:	75 1c                	jne    ac76 <sys_kill+0x36>
		return(kill_pg(current->pid, sig, 0));
    ac5a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    ac5f:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    ac65:	6a 00                	push   $0x0
    ac67:	ff 74 24 1c          	pushl  0x1c(%esp)
    ac6b:	50                   	push   %eax
    ac6c:	e8 b6 fe ff ff       	call   ab27 <kill_pg>
    ac71:	83 c4 0c             	add    $0xc,%esp
    ac74:	eb 76                	jmp    acec <sys_kill+0xac>
	if (pid == -1) {
    ac76:	83 7c 24 14 ff       	cmpl   $0xffffffff,0x14(%esp)
    ac7b:	75 3f                	jne    acbc <sys_kill+0x7c>
		while (--p > &FIRST_TASK)
    ac7d:	eb 28                	jmp    aca7 <sys_kill+0x67>
			if (err = send_sig(sig, *p, 0))
    ac7f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ac83:	8b 00                	mov    (%eax),%eax
    ac85:	6a 00                	push   $0x0
    ac87:	50                   	push   %eax
    ac88:	ff 74 24 20          	pushl  0x20(%esp)
    ac8c:	e8 4e fd ff ff       	call   a9df <send_sig>
    ac91:	83 c4 0c             	add    $0xc,%esp
    ac94:	89 44 24 04          	mov    %eax,0x4(%esp)
    ac98:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    ac9d:	74 08                	je     aca7 <sys_kill+0x67>
				retval = err;
    ac9f:	8b 44 24 04          	mov    0x4(%esp),%eax
    aca3:	89 44 24 08          	mov    %eax,0x8(%esp)
	int err, retval = 0;

	if (!pid)
		return(kill_pg(current->pid, sig, 0));
	if (pid == -1) {
		while (--p > &FIRST_TASK)
    aca7:	83 6c 24 0c 04       	subl   $0x4,0xc(%esp)
    acac:	81 7c 24 0c c0 e1 02 	cmpl   $0x2e1c0,0xc(%esp)
    acb3:	00 
    acb4:	77 c9                	ja     ac7f <sys_kill+0x3f>
			if (err = send_sig(sig, *p, 0))
				retval = err;
		return(retval);
    acb6:	8b 44 24 08          	mov    0x8(%esp),%eax
    acba:	eb 30                	jmp    acec <sys_kill+0xac>
	}
	if (pid < 0)
    acbc:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    acc1:	79 17                	jns    acda <sys_kill+0x9a>
		return(kill_pg(-pid, sig, 0));
    acc3:	8b 44 24 14          	mov    0x14(%esp),%eax
    acc7:	f7 d8                	neg    %eax
    acc9:	6a 00                	push   $0x0
    accb:	ff 74 24 1c          	pushl  0x1c(%esp)
    accf:	50                   	push   %eax
    acd0:	e8 52 fe ff ff       	call   ab27 <kill_pg>
    acd5:	83 c4 0c             	add    $0xc,%esp
    acd8:	eb 12                	jmp    acec <sys_kill+0xac>
	/* Normal kill */
	return(kill_proc(pid, sig, 0));
    acda:	6a 00                	push   $0x0
    acdc:	ff 74 24 1c          	pushl  0x1c(%esp)
    ace0:	ff 74 24 1c          	pushl  0x1c(%esp)
    ace4:	e8 e4 fe ff ff       	call   abcd <kill_proc>
    ace9:	83 c4 0c             	add    $0xc,%esp
}
    acec:	83 c4 10             	add    $0x10,%esp
    acef:	c3                   	ret    

0000acf0 <is_orphaned_pgrp>:
// 扫描任务数组。如果任务项空，或者进程的组号与指定的不同，或者进程已经处于僵死状态。或者进程的父进程是init进程，
// 则说明扫描的进程不是指定进程组的成员，或者不满足要求，于是跳过。否则说明该进程是指定组的成员并且其父进程不是init
// 进程。此时如果该进程父进程的组号不等于指定的组号pgrp，但父进程的会话号等于进程的会话号，则说明它们同属于一个会话。
// 因此指定的pgrp进程组肯定不是孤儿进程组。否则......
int is_orphaned_pgrp(int pgrp)
{
    acf0:	83 ec 10             	sub    $0x10,%esp
	struct task_struct **p;

	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
    acf3:	c7 44 24 0c bc e2 02 	movl   $0x2e2bc,0xc(%esp)
    acfa:	00 
    acfb:	e9 87 00 00 00       	jmp    ad87 <is_orphaned_pgrp+0x97>
		if (!(*p) ||
    ad00:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ad04:	8b 00                	mov    (%eax),%eax
    ad06:	85 c0                	test   %eax,%eax
    ad08:	74 77                	je     ad81 <is_orphaned_pgrp+0x91>
		    ((*p)->pgrp != pgrp) ||
    ad0a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ad0e:	8b 00                	mov    (%eax),%eax
    ad10:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
int is_orphaned_pgrp(int pgrp)
{
	struct task_struct **p;

	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
		if (!(*p) ||
    ad16:	3b 44 24 14          	cmp    0x14(%esp),%eax
    ad1a:	75 65                	jne    ad81 <is_orphaned_pgrp+0x91>
		    ((*p)->pgrp != pgrp) ||
		    ((*p)->state == TASK_ZOMBIE) ||
    ad1c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ad20:	8b 00                	mov    (%eax),%eax
    ad22:	8b 00                	mov    (%eax),%eax
{
	struct task_struct **p;

	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
		if (!(*p) ||
		    ((*p)->pgrp != pgrp) ||
    ad24:	83 f8 03             	cmp    $0x3,%eax
    ad27:	74 58                	je     ad81 <is_orphaned_pgrp+0x91>
		    ((*p)->state == TASK_ZOMBIE) ||
		    ((*p)->p_pptr->pid == 1))
    ad29:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ad2d:	8b 00                	mov    (%eax),%eax
    ad2f:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    ad35:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
	struct task_struct **p;

	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
		if (!(*p) ||
		    ((*p)->pgrp != pgrp) ||
		    ((*p)->state == TASK_ZOMBIE) ||
    ad3b:	83 f8 01             	cmp    $0x1,%eax
    ad3e:	74 41                	je     ad81 <is_orphaned_pgrp+0x91>
		    ((*p)->p_pptr->pid == 1))
			continue;
		if (((*p)->p_pptr->pgrp != pgrp) &&
    ad40:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ad44:	8b 00                	mov    (%eax),%eax
    ad46:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    ad4c:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    ad52:	3b 44 24 14          	cmp    0x14(%esp),%eax
    ad56:	74 2a                	je     ad82 <is_orphaned_pgrp+0x92>
		    ((*p)->p_pptr->session == (*p)->session))
    ad58:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ad5c:	8b 00                	mov    (%eax),%eax
    ad5e:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    ad64:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
    ad6a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ad6e:	8b 00                	mov    (%eax),%eax
    ad70:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
		if (!(*p) ||
		    ((*p)->pgrp != pgrp) ||
		    ((*p)->state == TASK_ZOMBIE) ||
		    ((*p)->p_pptr->pid == 1))
			continue;
		if (((*p)->p_pptr->pgrp != pgrp) &&
    ad76:	39 c2                	cmp    %eax,%edx
    ad78:	75 08                	jne    ad82 <is_orphaned_pgrp+0x92>
		    ((*p)->p_pptr->session == (*p)->session))
			return 0;
    ad7a:	b8 00 00 00 00       	mov    $0x0,%eax
    ad7f:	eb 19                	jmp    ad9a <is_orphaned_pgrp+0xaa>
	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
		if (!(*p) ||
		    ((*p)->pgrp != pgrp) ||
		    ((*p)->state == TASK_ZOMBIE) ||
		    ((*p)->p_pptr->pid == 1))
			continue;
    ad81:	90                   	nop
// 因此指定的pgrp进程组肯定不是孤儿进程组。否则......
int is_orphaned_pgrp(int pgrp)
{
	struct task_struct **p;

	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
    ad82:	83 6c 24 0c 04       	subl   $0x4,0xc(%esp)
    ad87:	81 7c 24 0c c0 e1 02 	cmpl   $0x2e1c0,0xc(%esp)
    ad8e:	00 
    ad8f:	0f 87 6b ff ff ff    	ja     ad00 <is_orphaned_pgrp+0x10>
			continue;
		if (((*p)->p_pptr->pgrp != pgrp) &&
		    ((*p)->p_pptr->session == (*p)->session))
			return 0;
	}
	return(1);	/* (sighing) "Often!" */        /* (唉）是孤儿进程组！ */
    ad95:	b8 01 00 00 00       	mov    $0x1,%eax
}
    ad9a:	83 c4 10             	add    $0x10,%esp
    ad9d:	c3                   	ret    

0000ad9e <has_stopped_jobs>:

// 判断进程组中是否含有处于停止状态的作业（进程组）。有则返回1；无则返回0.
// 查找方法是扫描整个任务数组。检查属于指定组pgrp的任何进程是否处于停止状态。
static int has_stopped_jobs(int pgrp)
{
    ad9e:	83 ec 10             	sub    $0x10,%esp
	struct task_struct ** p;

	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
    ada1:	c7 44 24 0c bc e2 02 	movl   $0x2e2bc,0xc(%esp)
    ada8:	00 
    ada9:	eb 2c                	jmp    add7 <has_stopped_jobs+0x39>
		if ((*p)->pgrp != pgrp)
    adab:	8b 44 24 0c          	mov    0xc(%esp),%eax
    adaf:	8b 00                	mov    (%eax),%eax
    adb1:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    adb7:	3b 44 24 14          	cmp    0x14(%esp),%eax
    adbb:	75 14                	jne    add1 <has_stopped_jobs+0x33>
			continue;
		if ((*p)->state == TASK_STOPPED)
    adbd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    adc1:	8b 00                	mov    (%eax),%eax
    adc3:	8b 00                	mov    (%eax),%eax
    adc5:	83 f8 04             	cmp    $0x4,%eax
    adc8:	75 08                	jne    add2 <has_stopped_jobs+0x34>
			return(1);
    adca:	b8 01 00 00 00       	mov    $0x1,%eax
    adcf:	eb 15                	jmp    ade6 <has_stopped_jobs+0x48>
{
	struct task_struct ** p;

	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
		if ((*p)->pgrp != pgrp)
			continue;
    add1:	90                   	nop
// 查找方法是扫描整个任务数组。检查属于指定组pgrp的任何进程是否处于停止状态。
static int has_stopped_jobs(int pgrp)
{
	struct task_struct ** p;

	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
    add2:	83 6c 24 0c 04       	subl   $0x4,0xc(%esp)
    add7:	81 7c 24 0c c0 e1 02 	cmpl   $0x2e1c0,0xc(%esp)
    adde:	00 
    addf:	77 ca                	ja     adab <has_stopped_jobs+0xd>
		if ((*p)->pgrp != pgrp)
			continue;
		if ((*p)->state == TASK_STOPPED)
			return(1);
	}
	return(0);
    ade1:	b8 00 00 00 00       	mov    $0x0,%eax
}
    ade6:	83 c4 10             	add    $0x10,%esp
    ade9:	c3                   	ret    

0000adea <do_exit>:

// 程序退出处理函数。
// 该函数将根据进程自身的特性对其进行处理，并把当前进程状态设置成僵死状态TASK_ZOMBIE，最后调用调度函数schedule()去
// 执行其他进程，不再返回。
void do_exit(long code)
{
    adea:	56                   	push   %esi
    adeb:	53                   	push   %ebx
    adec:	83 ec 24             	sub    $0x24,%esp
	// 首先释放当前进程代码段和数据段所占的内存页。函数free_page_tables()的第1个参数（get_base()返回值）指明在CPU线性
	// 地址空间中起始其地址，第2个（get_limit()返回值）说明欲释放的字节长度值。get_base()宏中的current->ldt[1]给出进程
	// 代码段描述符的位置（current->ldt[2]给出进程数据段描述符的位置）；get_limit()中的0x0f是进程代码段的选择符（0x17是
	// 进程数据段的选择符）。即在取段其地址时使用该段的描述符所处地址作为参数，取段长度时使用该段的选择符作为参数。
	// free_page_tables()函数位于mm/memory.c文件；get_base()和get_limit()宏位于include/linux/sched.h头文件。
	free_page_tables(get_base(current->ldt[1]), get_limit(0x0f));
    adef:	b8 0f 00 00 00       	mov    $0xf,%eax
    adf4:	0f 03 c0             	lsl    %ax,%eax
    adf7:	40                   	inc    %eax
    adf8:	89 44 24 10          	mov    %eax,0x10(%esp)
    adfc:	8b 4c 24 10          	mov    0x10(%esp),%ecx
    ae00:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    ae05:	05 a0 03 00 00       	add    $0x3a0,%eax
    ae0a:	83 c0 02             	add    $0x2,%eax
    ae0d:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    ae13:	81 c2 a0 03 00 00    	add    $0x3a0,%edx
    ae19:	8d 72 04             	lea    0x4(%edx),%esi
    ae1c:	8b 1d a0 e1 02 00    	mov    0x2e1a0,%ebx
    ae22:	81 c3 a0 03 00 00    	add    $0x3a0,%ebx
    ae28:	83 c3 07             	add    $0x7,%ebx
    ae2b:	8a 33                	mov    (%ebx),%dh
    ae2d:	8a 16                	mov    (%esi),%dl
    ae2f:	c1 e2 10             	shl    $0x10,%edx
    ae32:	66 8b 10             	mov    (%eax),%dx
    ae35:	89 d0                	mov    %edx,%eax
    ae37:	89 44 24 0c          	mov    %eax,0xc(%esp)
    ae3b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ae3f:	83 ec 08             	sub    $0x8,%esp
    ae42:	51                   	push   %ecx
    ae43:	50                   	push   %eax
    ae44:	e8 30 0f 00 00       	call   bd79 <free_page_tables>
    ae49:	83 c4 10             	add    $0x10,%esp
	free_page_tables(get_base(current->ldt[2]), get_limit(0x17));
    ae4c:	b8 17 00 00 00       	mov    $0x17,%eax
    ae51:	0f 03 c0             	lsl    %ax,%eax
    ae54:	40                   	inc    %eax
    ae55:	89 44 24 08          	mov    %eax,0x8(%esp)
    ae59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
    ae5d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    ae62:	05 a8 03 00 00       	add    $0x3a8,%eax
    ae67:	83 c0 02             	add    $0x2,%eax
    ae6a:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    ae70:	81 c2 a8 03 00 00    	add    $0x3a8,%edx
    ae76:	8d 72 04             	lea    0x4(%edx),%esi
    ae79:	8b 1d a0 e1 02 00    	mov    0x2e1a0,%ebx
    ae7f:	81 c3 a8 03 00 00    	add    $0x3a8,%ebx
    ae85:	83 c3 07             	add    $0x7,%ebx
    ae88:	8a 33                	mov    (%ebx),%dh
    ae8a:	8a 16                	mov    (%esi),%dl
    ae8c:	c1 e2 10             	shl    $0x10,%edx
    ae8f:	66 8b 10             	mov    (%eax),%dx
    ae92:	89 d0                	mov    %edx,%eax
    ae94:	89 44 24 04          	mov    %eax,0x4(%esp)
    ae98:	8b 44 24 04          	mov    0x4(%esp),%eax
    ae9c:	83 ec 08             	sub    $0x8,%esp
    ae9f:	51                   	push   %ecx
    aea0:	50                   	push   %eax
    aea1:	e8 d3 0e 00 00       	call   bd79 <free_page_tables>
    aea6:	83 c4 10             	add    $0x10,%esp
	// 然后关闭当前进程打开着的所有文件。再对当前进程的工作目录pwd、根目录root、执行程序文件的i节点以及库文件进行同步操作，
	// 放回各个i节点并分别置空（释放）。接着把当前进程的状态设置为僵死状态（TASK_ZOMBIE），并设置进程退出码。
	for (i = 0 ; i < NR_OPEN ; i++)
    aea9:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
    aeb0:	00 
    aeb1:	eb 2b                	jmp    aede <do_exit+0xf4>
		if (current->filp[i])
    aeb3:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    aeb8:	8b 54 24 18          	mov    0x18(%esp),%edx
    aebc:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    aec2:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    aec6:	85 c0                	test   %eax,%eax
    aec8:	74 0f                	je     aed9 <do_exit+0xef>
			sys_close(i);
    aeca:	83 ec 0c             	sub    $0xc,%esp
    aecd:	ff 74 24 24          	pushl  0x24(%esp)
    aed1:	e8 fa 2c 00 00       	call   dbd0 <sys_close>
    aed6:	83 c4 10             	add    $0x10,%esp
	// free_page_tables()函数位于mm/memory.c文件；get_base()和get_limit()宏位于include/linux/sched.h头文件。
	free_page_tables(get_base(current->ldt[1]), get_limit(0x0f));
	free_page_tables(get_base(current->ldt[2]), get_limit(0x17));
	// 然后关闭当前进程打开着的所有文件。再对当前进程的工作目录pwd、根目录root、执行程序文件的i节点以及库文件进行同步操作，
	// 放回各个i节点并分别置空（释放）。接着把当前进程的状态设置为僵死状态（TASK_ZOMBIE），并设置进程退出码。
	for (i = 0 ; i < NR_OPEN ; i++)
    aed9:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
    aede:	83 7c 24 18 13       	cmpl   $0x13,0x18(%esp)
    aee3:	7e ce                	jle    aeb3 <do_exit+0xc9>
		if (current->filp[i])
			sys_close(i);
	Log(LOG_INFO_TYPE, "<<<<< sys_exit process pid = %d, exit_code = %d >>>>>\n", current->pid, code);
    aee5:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    aeea:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    aef0:	ff 74 24 30          	pushl  0x30(%esp)
    aef4:	50                   	push   %eax
    aef5:	68 90 33 02 00       	push   $0x23390
    aefa:	6a 00                	push   $0x0
    aefc:	e8 ee 7a 01 00       	call   229ef <Log>
    af01:	83 c4 10             	add    $0x10,%esp
	iput(current->pwd);
    af04:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    af09:	8b 80 34 03 00 00    	mov    0x334(%eax),%eax
    af0f:	83 ec 0c             	sub    $0xc,%esp
    af12:	50                   	push   %eax
    af13:	e8 d7 37 00 00       	call   e6ef <iput>
    af18:	83 c4 10             	add    $0x10,%esp
	current->pwd = NULL;
    af1b:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    af20:	c7 80 34 03 00 00 00 	movl   $0x0,0x334(%eax)
    af27:	00 00 00 
	iput(current->root);
    af2a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    af2f:	8b 80 38 03 00 00    	mov    0x338(%eax),%eax
    af35:	83 ec 0c             	sub    $0xc,%esp
    af38:	50                   	push   %eax
    af39:	e8 b1 37 00 00       	call   e6ef <iput>
    af3e:	83 c4 10             	add    $0x10,%esp
	current->root = NULL;
    af41:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    af46:	c7 80 38 03 00 00 00 	movl   $0x0,0x338(%eax)
    af4d:	00 00 00 
	iput(current->executable);
    af50:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    af55:	8b 80 3c 03 00 00    	mov    0x33c(%eax),%eax
    af5b:	83 ec 0c             	sub    $0xc,%esp
    af5e:	50                   	push   %eax
    af5f:	e8 8b 37 00 00       	call   e6ef <iput>
    af64:	83 c4 10             	add    $0x10,%esp
	current->executable = NULL;
    af67:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    af6c:	c7 80 3c 03 00 00 00 	movl   $0x0,0x33c(%eax)
    af73:	00 00 00 
	iput(current->library);
    af76:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    af7b:	8b 80 40 03 00 00    	mov    0x340(%eax),%eax
    af81:	83 ec 0c             	sub    $0xc,%esp
    af84:	50                   	push   %eax
    af85:	e8 65 37 00 00       	call   e6ef <iput>
    af8a:	83 c4 10             	add    $0x10,%esp
	current->library = NULL;
    af8d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    af92:	c7 80 40 03 00 00 00 	movl   $0x0,0x340(%eax)
    af99:	00 00 00 
	current->state = TASK_ZOMBIE;
    af9c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    afa1:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
	current->exit_code = code;
    afa7:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    afac:	8b 54 24 30          	mov    0x30(%esp),%edx
    afb0:	89 90 14 02 00 00    	mov    %edx,0x214(%eax)
     * 组将变成一个孤儿进程组。
     */
	// POSIX 3.2.2.2（1991版）是关于exit()函数的说明。如果父进程所在的进程组与当前进程的不同，但都处于同一个会话
	// （session）中，并且当前进程所在进程组将要变成孤儿进程了并且当前进程的进程组中含有处于停止状态的作业（进程），
	// 那么就要向这个当前进程的进程组发送两个信号：SIGHUP和SIGCONT。
	if ((current->p_pptr->pgrp != current->pgrp) &&
    afb6:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    afbb:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    afc1:	8b 90 30 02 00 00    	mov    0x230(%eax),%edx
    afc7:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    afcc:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    afd2:	39 c2                	cmp    %eax,%edx
    afd4:	0f 84 8c 00 00 00    	je     b066 <do_exit+0x27c>
	    (current->p_pptr->session == current->session) &&
    afda:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    afdf:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    afe5:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
    afeb:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    aff0:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
     * 组将变成一个孤儿进程组。
     */
	// POSIX 3.2.2.2（1991版）是关于exit()函数的说明。如果父进程所在的进程组与当前进程的不同，但都处于同一个会话
	// （session）中，并且当前进程所在进程组将要变成孤儿进程了并且当前进程的进程组中含有处于停止状态的作业（进程），
	// 那么就要向这个当前进程的进程组发送两个信号：SIGHUP和SIGCONT。
	if ((current->p_pptr->pgrp != current->pgrp) &&
    aff6:	39 c2                	cmp    %eax,%edx
    aff8:	75 6c                	jne    b066 <do_exit+0x27c>
	    (current->p_pptr->session == current->session) &&
	    is_orphaned_pgrp(current->pgrp) &&
    affa:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    afff:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b005:	83 ec 0c             	sub    $0xc,%esp
    b008:	50                   	push   %eax
    b009:	e8 e2 fc ff ff       	call   acf0 <is_orphaned_pgrp>
    b00e:	83 c4 10             	add    $0x10,%esp
     */
	// POSIX 3.2.2.2（1991版）是关于exit()函数的说明。如果父进程所在的进程组与当前进程的不同，但都处于同一个会话
	// （session）中，并且当前进程所在进程组将要变成孤儿进程了并且当前进程的进程组中含有处于停止状态的作业（进程），
	// 那么就要向这个当前进程的进程组发送两个信号：SIGHUP和SIGCONT。
	if ((current->p_pptr->pgrp != current->pgrp) &&
	    (current->p_pptr->session == current->session) &&
    b011:	85 c0                	test   %eax,%eax
    b013:	74 51                	je     b066 <do_exit+0x27c>
	    is_orphaned_pgrp(current->pgrp) &&
	    has_stopped_jobs(current->pgrp)) {
    b015:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b01a:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b020:	83 ec 0c             	sub    $0xc,%esp
    b023:	50                   	push   %eax
    b024:	e8 75 fd ff ff       	call   ad9e <has_stopped_jobs>
    b029:	83 c4 10             	add    $0x10,%esp
	// POSIX 3.2.2.2（1991版）是关于exit()函数的说明。如果父进程所在的进程组与当前进程的不同，但都处于同一个会话
	// （session）中，并且当前进程所在进程组将要变成孤儿进程了并且当前进程的进程组中含有处于停止状态的作业（进程），
	// 那么就要向这个当前进程的进程组发送两个信号：SIGHUP和SIGCONT。
	if ((current->p_pptr->pgrp != current->pgrp) &&
	    (current->p_pptr->session == current->session) &&
	    is_orphaned_pgrp(current->pgrp) &&
    b02c:	85 c0                	test   %eax,%eax
    b02e:	74 36                	je     b066 <do_exit+0x27c>
	    has_stopped_jobs(current->pgrp)) {
		kill_pg(current->pgrp,SIGHUP,1);
    b030:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b035:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b03b:	83 ec 04             	sub    $0x4,%esp
    b03e:	6a 01                	push   $0x1
    b040:	6a 01                	push   $0x1
    b042:	50                   	push   %eax
    b043:	e8 df fa ff ff       	call   ab27 <kill_pg>
    b048:	83 c4 10             	add    $0x10,%esp
		kill_pg(current->pgrp,SIGCONT,1);
    b04b:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b050:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b056:	83 ec 04             	sub    $0x4,%esp
    b059:	6a 01                	push   $0x1
    b05b:	6a 12                	push   $0x12
    b05d:	50                   	push   %eax
    b05e:	e8 c4 fa ff ff       	call   ab27 <kill_pg>
    b063:	83 c4 10             	add    $0x10,%esp
	}
	/* Let father know we died */           /* 通知父进程当前进程将终止 */
	current->p_pptr->signal |= (1 << (SIGCHLD - 1));
    b066:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b06b:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    b071:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    b077:	8b 92 bc 02 00 00    	mov    0x2bc(%edx),%edx
    b07d:	8b 52 0c             	mov    0xc(%edx),%edx
    b080:	81 ca 00 00 01 00    	or     $0x10000,%edx
    b086:	89 50 0c             	mov    %edx,0xc(%eax)
     * B. 检查当前进程的退出是否会造成任何进程组变成孤儿进程组。如果有，并且有处于停止状态
     * （TASK_STOPPED）的组员，则向它们发送一个SIGHUP信号和一个SIGCONT信号。（POSIX 3.2.2.2节要求）
     */
	// 如果当前进程有子进程（其p_cptr指针指向最近创建的子进程），则让进程1（init进程）成为其所有子进程的父进程。如果
	// 子进程已经处于僵死状态，则向init进程（父进程）发送子进程已终止信号SIGCHLD。
	if (p = current->p_cptr) {
    b089:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b08e:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
    b094:	89 44 24 1c          	mov    %eax,0x1c(%esp)
    b098:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
    b09d:	0f 84 42 01 00 00    	je     b1e5 <do_exit+0x3fb>
		while (1) {
			p->p_pptr = task[1];
    b0a3:	8b 15 c4 e1 02 00    	mov    0x2e1c4,%edx
    b0a9:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b0ad:	89 90 bc 02 00 00    	mov    %edx,0x2bc(%eax)
			if (p->state == TASK_ZOMBIE)
    b0b3:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b0b7:	8b 00                	mov    (%eax),%eax
    b0b9:	83 f8 03             	cmp    $0x3,%eax
    b0bc:	75 17                	jne    b0d5 <do_exit+0x2eb>
				task[1]->signal |= (1 << (SIGCHLD - 1));
    b0be:	a1 c4 e1 02 00       	mov    0x2e1c4,%eax
    b0c3:	8b 15 c4 e1 02 00    	mov    0x2e1c4,%edx
    b0c9:	8b 52 0c             	mov    0xc(%edx),%edx
    b0cc:	81 ca 00 00 01 00    	or     $0x10000,%edx
    b0d2:	89 50 0c             	mov    %edx,0xc(%eax)
             * 因此现在子进程所有进程组将变成孤儿进程组了。
             */
			// 如果子进程与当前进程不在同一个进程组但属于同一个session中，并且当前进程所在进程组将要变成孤儿进程了，并且当前
			// 进程的进程组中含有处于停止状态的作业（进程），那么就要向这个当前进程的进程组发送两个信号：SIGHUP和SIGCONT。如果
			// 该子进程有兄弟进程，则继续循环处理这些兄弟进程。
			if ((p->pgrp != current->pgrp) &&
    b0d5:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b0d9:	8b 90 30 02 00 00    	mov    0x230(%eax),%edx
    b0df:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b0e4:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b0ea:	39 c2                	cmp    %eax,%edx
    b0ec:	0f 84 81 00 00 00    	je     b173 <do_exit+0x389>
			    (p->session == current->session) &&
    b0f2:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b0f6:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
    b0fc:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b101:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
             * 因此现在子进程所有进程组将变成孤儿进程组了。
             */
			// 如果子进程与当前进程不在同一个进程组但属于同一个session中，并且当前进程所在进程组将要变成孤儿进程了，并且当前
			// 进程的进程组中含有处于停止状态的作业（进程），那么就要向这个当前进程的进程组发送两个信号：SIGHUP和SIGCONT。如果
			// 该子进程有兄弟进程，则继续循环处理这些兄弟进程。
			if ((p->pgrp != current->pgrp) &&
    b107:	39 c2                	cmp    %eax,%edx
    b109:	75 68                	jne    b173 <do_exit+0x389>
			    (p->session == current->session) &&
			    is_orphaned_pgrp(p->pgrp) &&
    b10b:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b10f:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b115:	83 ec 0c             	sub    $0xc,%esp
    b118:	50                   	push   %eax
    b119:	e8 d2 fb ff ff       	call   acf0 <is_orphaned_pgrp>
    b11e:	83 c4 10             	add    $0x10,%esp
             */
			// 如果子进程与当前进程不在同一个进程组但属于同一个session中，并且当前进程所在进程组将要变成孤儿进程了，并且当前
			// 进程的进程组中含有处于停止状态的作业（进程），那么就要向这个当前进程的进程组发送两个信号：SIGHUP和SIGCONT。如果
			// 该子进程有兄弟进程，则继续循环处理这些兄弟进程。
			if ((p->pgrp != current->pgrp) &&
			    (p->session == current->session) &&
    b121:	85 c0                	test   %eax,%eax
    b123:	74 4e                	je     b173 <do_exit+0x389>
			    is_orphaned_pgrp(p->pgrp) &&
			    has_stopped_jobs(p->pgrp)) {
    b125:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b129:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b12f:	83 ec 0c             	sub    $0xc,%esp
    b132:	50                   	push   %eax
    b133:	e8 66 fc ff ff       	call   ad9e <has_stopped_jobs>
    b138:	83 c4 10             	add    $0x10,%esp
			// 如果子进程与当前进程不在同一个进程组但属于同一个session中，并且当前进程所在进程组将要变成孤儿进程了，并且当前
			// 进程的进程组中含有处于停止状态的作业（进程），那么就要向这个当前进程的进程组发送两个信号：SIGHUP和SIGCONT。如果
			// 该子进程有兄弟进程，则继续循环处理这些兄弟进程。
			if ((p->pgrp != current->pgrp) &&
			    (p->session == current->session) &&
			    is_orphaned_pgrp(p->pgrp) &&
    b13b:	85 c0                	test   %eax,%eax
    b13d:	74 34                	je     b173 <do_exit+0x389>
			    has_stopped_jobs(p->pgrp)) {
				kill_pg(p->pgrp,SIGHUP,1);
    b13f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b143:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b149:	83 ec 04             	sub    $0x4,%esp
    b14c:	6a 01                	push   $0x1
    b14e:	6a 01                	push   $0x1
    b150:	50                   	push   %eax
    b151:	e8 d1 f9 ff ff       	call   ab27 <kill_pg>
    b156:	83 c4 10             	add    $0x10,%esp
				kill_pg(p->pgrp,SIGCONT,1);
    b159:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b15d:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b163:	83 ec 04             	sub    $0x4,%esp
    b166:	6a 01                	push   $0x1
    b168:	6a 12                	push   $0x12
    b16a:	50                   	push   %eax
    b16b:	e8 b7 f9 ff ff       	call   ab27 <kill_pg>
    b170:	83 c4 10             	add    $0x10,%esp
			}
			if (p->p_osptr) {
    b173:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b177:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    b17d:	85 c0                	test   %eax,%eax
    b17f:	74 13                	je     b194 <do_exit+0x3aa>
				p = p->p_osptr;
    b181:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b185:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    b18b:	89 44 24 1c          	mov    %eax,0x1c(%esp)
			p->p_osptr = task[1]->p_cptr;
			task[1]->p_cptr->p_ysptr = p;
			task[1]->p_cptr = current->p_cptr;
			current->p_cptr = 0;
			break;
		}
    b18f:	e9 0f ff ff ff       	jmp    b0a3 <do_exit+0x2b9>
             */
			// 通过上面处理，当前进程子进程的所有兄弟子进程都已经处理过。此时p指向最老的兄弟子进程。于是把这些兄弟子进程全部加入
			// init进程的子进程双向链表表头部中。加入后，init进程的p_cptr指向当前进程原子进程中最年轻的（the youngest）子进程
			// 而原子进程中最老的（the oldest）兄弟子进程p_osptr指向原init进程的最年轻进程，而原init进程中最年轻进程的p_ysptr
			// 指向原子进程中最老的兄弟子进程。最后把当前进程的p_cptr指针置空，并退出循环。
			p->p_osptr = task[1]->p_cptr;
    b194:	a1 c4 e1 02 00       	mov    0x2e1c4,%eax
    b199:	8b 90 c0 02 00 00    	mov    0x2c0(%eax),%edx
    b19f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b1a3:	89 90 c8 02 00 00    	mov    %edx,0x2c8(%eax)
			task[1]->p_cptr->p_ysptr = p;
    b1a9:	a1 c4 e1 02 00       	mov    0x2e1c4,%eax
    b1ae:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
    b1b4:	8b 54 24 1c          	mov    0x1c(%esp),%edx
    b1b8:	89 90 c4 02 00 00    	mov    %edx,0x2c4(%eax)
			task[1]->p_cptr = current->p_cptr;
    b1be:	a1 c4 e1 02 00       	mov    0x2e1c4,%eax
    b1c3:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    b1c9:	8b 92 c0 02 00 00    	mov    0x2c0(%edx),%edx
    b1cf:	89 90 c0 02 00 00    	mov    %edx,0x2c0(%eax)
			current->p_cptr = 0;
    b1d5:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b1da:	c7 80 c0 02 00 00 00 	movl   $0x0,0x2c0(%eax)
    b1e1:	00 00 00 
			break;
    b1e4:	90                   	nop
		}
	}
	// 如果当前进程是会话头领（leader）进程，那么若它有控制终端，则首先向使用该控制终端的进程组发送挂断信号SIGHUP，然后释放
	// 该终端。接着扫描任务数组，把属于当前进程会话中进程的终端置空（取消）。
	if (current->leader) {
    b1e5:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b1ea:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
    b1f0:	85 c0                	test   %eax,%eax
    b1f2:	0f 84 e7 00 00 00    	je     b2df <do_exit+0x4f5>
		struct task_struct **p;
		struct tty_struct *tty;

		if (current->tty >= 0) {
    b1f8:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b1fd:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
    b203:	85 c0                	test   %eax,%eax
    b205:	0f 88 90 00 00 00    	js     b29b <do_exit+0x4b1>
			tty = TTY_TABLE(current->tty);
    b20b:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b210:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
    b216:	85 c0                	test   %eax,%eax
    b218:	74 3d                	je     b257 <do_exit+0x46d>
    b21a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b21f:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
    b225:	83 f8 3f             	cmp    $0x3f,%eax
    b228:	7f 18                	jg     b242 <do_exit+0x458>
    b22a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b22f:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
    b235:	83 e8 01             	sub    $0x1,%eax
    b238:	c1 e0 06             	shl    $0x6,%eax
    b23b:	05 20 18 04 00       	add    $0x41820,%eax
    b240:	eb 22                	jmp    b264 <do_exit+0x47a>
    b242:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b247:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
    b24d:	c1 e0 06             	shl    $0x6,%eax
    b250:	05 20 18 04 00       	add    $0x41820,%eax
    b255:	eb 0d                	jmp    b264 <do_exit+0x47a>
    b257:	a1 80 12 03 00       	mov    0x31280,%eax
    b25c:	c1 e0 06             	shl    $0x6,%eax
    b25f:	05 20 18 04 00       	add    $0x41820,%eax
    b264:	89 04 24             	mov    %eax,(%esp)
			if (tty->pgrp>0)
    b267:	8b 04 24             	mov    (%esp),%eax
    b26a:	8b 40 24             	mov    0x24(%eax),%eax
    b26d:	85 c0                	test   %eax,%eax
    b26f:	7e 16                	jle    b287 <do_exit+0x49d>
				kill_pg(tty->pgrp, SIGHUP, 1);
    b271:	8b 04 24             	mov    (%esp),%eax
    b274:	8b 40 24             	mov    0x24(%eax),%eax
    b277:	83 ec 04             	sub    $0x4,%esp
    b27a:	6a 01                	push   $0x1
    b27c:	6a 01                	push   $0x1
    b27e:	50                   	push   %eax
    b27f:	e8 a3 f8 ff ff       	call   ab27 <kill_pg>
    b284:	83 c4 10             	add    $0x10,%esp
			tty->pgrp = 0;
    b287:	8b 04 24             	mov    (%esp),%eax
    b28a:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
			tty->session = 0;
    b291:	8b 04 24             	mov    (%esp),%eax
    b294:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
		}
	 	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    b29b:	c7 44 24 14 bc e2 02 	movl   $0x2e2bc,0x14(%esp)
    b2a2:	00 
    b2a3:	eb 30                	jmp    b2d5 <do_exit+0x4eb>
			if ((*p)->session == current->session)
    b2a5:	8b 44 24 14          	mov    0x14(%esp),%eax
    b2a9:	8b 00                	mov    (%eax),%eax
    b2ab:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
    b2b1:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b2b6:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
    b2bc:	39 c2                	cmp    %eax,%edx
    b2be:	75 10                	jne    b2d0 <do_exit+0x4e6>
				(*p)->tty = -1;
    b2c0:	8b 44 24 14          	mov    0x14(%esp),%eax
    b2c4:	8b 00                	mov    (%eax),%eax
    b2c6:	c7 80 2c 03 00 00 ff 	movl   $0xffffffff,0x32c(%eax)
    b2cd:	ff ff ff 
			if (tty->pgrp>0)
				kill_pg(tty->pgrp, SIGHUP, 1);
			tty->pgrp = 0;
			tty->session = 0;
		}
	 	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    b2d0:	83 6c 24 14 04       	subl   $0x4,0x14(%esp)
    b2d5:	81 7c 24 14 c0 e1 02 	cmpl   $0x2e1c0,0x14(%esp)
    b2dc:	00 
    b2dd:	77 c6                	ja     b2a5 <do_exit+0x4bb>
			if ((*p)->session == current->session)
				(*p)->tty = -1;
	}
	// 如果当前进程上次使用过协处理器，则把记录此信息的指针置空。若定义了调试进程树符号，则调用进程树检测显示函数。最后调用调度
	// 函数，重新调度进程运行，以让父进程能够处理僵死进程的其他善后事宜。
	if (last_task_used_math == current)
    b2df:	8b 15 0c eb 02 00    	mov    0x2eb0c,%edx
    b2e5:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b2ea:	39 c2                	cmp    %eax,%edx
    b2ec:	75 0a                	jne    b2f8 <do_exit+0x50e>
		last_task_used_math = NULL;
    b2ee:	c7 05 0c eb 02 00 00 	movl   $0x0,0x2eb0c
    b2f5:	00 00 00 
#ifdef DEBUG_PROC_TREE
	audit_ptree();
    b2f8:	e8 1c f2 ff ff       	call   a519 <audit_ptree>
#endif
	schedule();
    b2fd:	e8 43 bb ff ff       	call   6e45 <schedule>
}
    b302:	90                   	nop
    b303:	83 c4 24             	add    $0x24,%esp
    b306:	5b                   	pop    %ebx
    b307:	5e                   	pop    %esi
    b308:	c3                   	ret    

0000b309 <sys_exit>:
// 系统调用exit()。终止进程。
// 参数error_code是用户程序提供的退出状态信息，只有低字节有效。把error_code左移8位是wait()或waitpid()函数的要求。
// 低字节中将用来保存wait()的状态信息。例如，如果进程处于暂停状态（TASK_STOPPED），那么其低字节就等于0x7f。参见
// sys/wait.h文件。wait()或waitpid()利用这些宏就可以取得子进程的退出状态码或子进程终止的原因（信号）。
int sys_exit(int error_code)
{
    b309:	83 ec 0c             	sub    $0xc,%esp
	do_exit((error_code & 0xff) << 8);
    b30c:	8b 44 24 10          	mov    0x10(%esp),%eax
    b310:	c1 e0 08             	shl    $0x8,%eax
    b313:	0f b7 c0             	movzwl %ax,%eax
    b316:	83 ec 0c             	sub    $0xc,%esp
    b319:	50                   	push   %eax
    b31a:	e8 cb fa ff ff       	call   adea <do_exit>
    b31f:	83 c4 10             	add    $0x10,%esp
}
    b322:	90                   	nop
    b323:	83 c4 0c             	add    $0xc,%esp
    b326:	c3                   	ret    

0000b327 <sys_waitpid>:
// 若options = WUNTRACED，表示如果子进程是停止的，也马上返回（无须跟踪）。
// 若options = WNOHANG，表示如果没有子进程退出或终止就马上返回。
// 如果返回状态指针stat_addr不为空，则就将状态信息保存到那里。
// 参数pid是进程号；*stat_addr是保存状态信息位置的指针；options是waitpid选项。
int sys_waitpid(pid_t pid, unsigned long * stat_addr, int options)
{
    b327:	83 ec 1c             	sub    $0x1c,%esp
	int flag;               				// 该标志用于后面所选出的子进程处于就绪或睡眠态。
	struct task_struct *p;
	unsigned long oldblocked;

	// 首先验证将在存放状态信息的位置处内在空间足够。然后复位标志flag。接着从当前进程的最年轻子进程开始扫描子进程兄弟链表。
	verify_area(stat_addr, 4);
    b32a:	83 ec 08             	sub    $0x8,%esp
    b32d:	6a 04                	push   $0x4
    b32f:	ff 74 24 30          	pushl  0x30(%esp)
    b333:	e8 6b d0 ff ff       	call   83a3 <verify_area>
    b338:	83 c4 10             	add    $0x10,%esp
repeat:
	flag = 0;
    b33b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    b342:	00 
	for (p = current->p_cptr ; p ; p = p->p_osptr) {
    b343:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b348:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
    b34e:	89 44 24 08          	mov    %eax,0x8(%esp)
    b352:	e9 ad 01 00 00       	jmp    b504 <sys_waitpid+0x1dd>
		// 如果等待的子进程号pid>0，但与被扫描子进程p的pid不相等，说明它是当前进程另外的子进程，于是跳过该进程，接着扫描下一
		// 个进程。
		if (pid > 0) {
    b357:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    b35c:	7e 15                	jle    b373 <sys_waitpid+0x4c>
			if (p->pid != pid)
    b35e:	8b 44 24 08          	mov    0x8(%esp),%eax
    b362:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    b368:	3b 44 24 20          	cmp    0x20(%esp),%eax
    b36c:	74 49                	je     b3b7 <sys_waitpid+0x90>
				continue;
    b36e:	e9 83 01 00 00       	jmp    b4f6 <sys_waitpid+0x1cf>
		// 否则，如果指定等待进程的pid=0，表示正在等待进程组号等于当前进程组号的任何子进程。如果此时被扫描进程p的进程组号与当前
		// 进程的组号不等，则跳过。
		} else if (!pid) {
    b373:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    b378:	75 1e                	jne    b398 <sys_waitpid+0x71>
			if (p->pgrp != current->pgrp)
    b37a:	8b 44 24 08          	mov    0x8(%esp),%eax
    b37e:	8b 90 30 02 00 00    	mov    0x230(%eax),%edx
    b384:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b389:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b38f:	39 c2                	cmp    %eax,%edx
    b391:	74 24                	je     b3b7 <sys_waitpid+0x90>
				continue;
    b393:	e9 5e 01 00 00       	jmp    b4f6 <sys_waitpid+0x1cf>
		// 否则，如果指定的pid<-1，表示正在等待进程组号等于pid绝对值的任何子进程。如果此时被扫描进程p的组号与pid的绝对值
		// 不等，则跳过。
		} else if (pid != -1) {
    b398:	83 7c 24 20 ff       	cmpl   $0xffffffff,0x20(%esp)
    b39d:	74 18                	je     b3b7 <sys_waitpid+0x90>
			if (p->pgrp != -pid)
    b39f:	8b 44 24 08          	mov    0x8(%esp),%eax
    b3a3:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b3a9:	8b 54 24 20          	mov    0x20(%esp),%edx
    b3ad:	f7 da                	neg    %edx
    b3af:	39 d0                	cmp    %edx,%eax
    b3b1:	0f 85 3b 01 00 00    	jne    b4f2 <sys_waitpid+0x1cb>
		// pid等于-1）。接下来根据这个子进程p所处的状态来处理。
		// 当子进程p停止状态时，如果此时参数选项options中WUNTRACED标志没有置位，表示程序无须立刻返回，或者子进程此时的退出码等于
		// 0，于是继续扫描处理其他子进程。如果WUNTRACED置位且子进程退出码不为0,则把退出码移入高字节，同状态信息0x7f进行或运算后
		// 放入*stat_addr，在复位子进程退出码后立刻返回子进程号pid。这里0x7f表示的返回状态使WIFSTOPPED()宏为值。参见include/
		// sys/wait.h。
		switch (p->state) {
    b3b7:	8b 44 24 08          	mov    0x8(%esp),%eax
    b3bb:	8b 00                	mov    (%eax),%eax
    b3bd:	83 f8 03             	cmp    $0x3,%eax
    b3c0:	74 67                	je     b429 <sys_waitpid+0x102>
    b3c2:	83 f8 04             	cmp    $0x4,%eax
    b3c5:	0f 85 1d 01 00 00    	jne    b4e8 <sys_waitpid+0x1c1>
			case TASK_STOPPED:
				if (!(options & WUNTRACED) ||
    b3cb:	8b 44 24 28          	mov    0x28(%esp),%eax
    b3cf:	83 e0 02             	and    $0x2,%eax
    b3d2:	85 c0                	test   %eax,%eax
    b3d4:	0f 84 1b 01 00 00    	je     b4f5 <sys_waitpid+0x1ce>
				    !p->exit_code)
    b3da:	8b 44 24 08          	mov    0x8(%esp),%eax
    b3de:	8b 80 14 02 00 00    	mov    0x214(%eax),%eax
		// 0，于是继续扫描处理其他子进程。如果WUNTRACED置位且子进程退出码不为0,则把退出码移入高字节，同状态信息0x7f进行或运算后
		// 放入*stat_addr，在复位子进程退出码后立刻返回子进程号pid。这里0x7f表示的返回状态使WIFSTOPPED()宏为值。参见include/
		// sys/wait.h。
		switch (p->state) {
			case TASK_STOPPED:
				if (!(options & WUNTRACED) ||
    b3e4:	85 c0                	test   %eax,%eax
    b3e6:	0f 84 09 01 00 00    	je     b4f5 <sys_waitpid+0x1ce>
				    !p->exit_code)
					continue;
				put_fs_long((p->exit_code << 8) | 0x7f,
    b3ec:	8b 44 24 08          	mov    0x8(%esp),%eax
    b3f0:	8b 80 14 02 00 00    	mov    0x214(%eax),%eax
    b3f6:	c1 e0 08             	shl    $0x8,%eax
    b3f9:	83 c8 7f             	or     $0x7f,%eax
    b3fc:	83 ec 08             	sub    $0x8,%esp
    b3ff:	ff 74 24 2c          	pushl  0x2c(%esp)
    b403:	50                   	push   %eax
    b404:	e8 b2 ef ff ff       	call   a3bb <put_fs_long>
    b409:	83 c4 10             	add    $0x10,%esp
					stat_addr);
				p->exit_code = 0;
    b40c:	8b 44 24 08          	mov    0x8(%esp),%eax
    b410:	c7 80 14 02 00 00 00 	movl   $0x0,0x214(%eax)
    b417:	00 00 00 
				return p->pid;
    b41a:	8b 44 24 08          	mov    0x8(%esp),%eax
    b41e:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    b424:	e9 7e 01 00 00       	jmp    b5a7 <sys_waitpid+0x280>
			// 如果子进程p处于僵死状态，则首先把它在用户态和内核态运行的时间分别累计到当前进程（父进程）中，然后取出子进程pid和退出码，
			// 把退出码放入返回状态位置stat_addr处并释放该子进程。最后返回子进程的退出码和pid。若定义了调试进程树符号，则调用进程树
			// 检测显示函数。
			case TASK_ZOMBIE:
				current->cutime += p->utime;
    b429:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b42e:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    b434:	8b 8a e8 02 00 00    	mov    0x2e8(%edx),%ecx
    b43a:	8b 54 24 08          	mov    0x8(%esp),%edx
    b43e:	8b 92 e0 02 00 00    	mov    0x2e0(%edx),%edx
    b444:	01 ca                	add    %ecx,%edx
    b446:	89 90 e8 02 00 00    	mov    %edx,0x2e8(%eax)
				current->cstime += p->stime;
    b44c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b451:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    b457:	8b 8a ec 02 00 00    	mov    0x2ec(%edx),%ecx
    b45d:	8b 54 24 08          	mov    0x8(%esp),%edx
    b461:	8b 92 e4 02 00 00    	mov    0x2e4(%edx),%edx
    b467:	01 ca                	add    %ecx,%edx
    b469:	89 90 ec 02 00 00    	mov    %edx,0x2ec(%eax)
				flag = p->pid;
    b46f:	8b 44 24 08          	mov    0x8(%esp),%eax
    b473:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    b479:	89 44 24 0c          	mov    %eax,0xc(%esp)
				Log(LOG_INFO_TYPE, "<<<<< sys_waitpid current_pid = %d, child_pid = %d, exit_code = %d >>>>>\n", current->pid, p->pid, p->exit_code);
    b47d:	8b 44 24 08          	mov    0x8(%esp),%eax
    b481:	8b 88 14 02 00 00    	mov    0x214(%eax),%ecx
    b487:	8b 44 24 08          	mov    0x8(%esp),%eax
    b48b:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
    b491:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b496:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    b49c:	83 ec 0c             	sub    $0xc,%esp
    b49f:	51                   	push   %ecx
    b4a0:	52                   	push   %edx
    b4a1:	50                   	push   %eax
    b4a2:	68 c8 33 02 00       	push   $0x233c8
    b4a7:	6a 00                	push   $0x0
    b4a9:	e8 41 75 01 00       	call   229ef <Log>
    b4ae:	83 c4 20             	add    $0x20,%esp
				put_fs_long(p->exit_code, stat_addr);
    b4b1:	8b 44 24 08          	mov    0x8(%esp),%eax
    b4b5:	8b 80 14 02 00 00    	mov    0x214(%eax),%eax
    b4bb:	83 ec 08             	sub    $0x8,%esp
    b4be:	ff 74 24 2c          	pushl  0x2c(%esp)
    b4c2:	50                   	push   %eax
    b4c3:	e8 f3 ee ff ff       	call   a3bb <put_fs_long>
    b4c8:	83 c4 10             	add    $0x10,%esp
				release(p);
    b4cb:	83 ec 0c             	sub    $0xc,%esp
    b4ce:	ff 74 24 14          	pushl  0x14(%esp)
    b4d2:	e8 f1 ee ff ff       	call   a3c8 <release>
    b4d7:	83 c4 10             	add    $0x10,%esp
#ifdef DEBUG_PROC_TREE
				audit_ptree();
    b4da:	e8 3a f0 ff ff       	call   a519 <audit_ptree>
#endif
				return flag;
    b4df:	8b 44 24 0c          	mov    0xc(%esp),%eax
    b4e3:	e9 bf 00 00 00       	jmp    b5a7 <sys_waitpid+0x280>
			// 如果这个子进程p的状态即是不停止也不是僵死，那么就置flag = 1。表示找到过一个符合要求的子进程，但是它处于运行态或睡眠态。
			default:
				flag = 1;
    b4e8:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
    b4ef:	00 
				continue;
    b4f0:	eb 04                	jmp    b4f6 <sys_waitpid+0x1cf>
				continue;
		// 否则，如果指定的pid<-1，表示正在等待进程组号等于pid绝对值的任何子进程。如果此时被扫描进程p的组号与pid的绝对值
		// 不等，则跳过。
		} else if (pid != -1) {
			if (p->pgrp != -pid)
				continue;
    b4f2:	90                   	nop
    b4f3:	eb 01                	jmp    b4f6 <sys_waitpid+0x1cf>
		// sys/wait.h。
		switch (p->state) {
			case TASK_STOPPED:
				if (!(options & WUNTRACED) ||
				    !p->exit_code)
					continue;
    b4f5:	90                   	nop

	// 首先验证将在存放状态信息的位置处内在空间足够。然后复位标志flag。接着从当前进程的最年轻子进程开始扫描子进程兄弟链表。
	verify_area(stat_addr, 4);
repeat:
	flag = 0;
	for (p = current->p_cptr ; p ; p = p->p_osptr) {
    b4f6:	8b 44 24 08          	mov    0x8(%esp),%eax
    b4fa:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    b500:	89 44 24 08          	mov    %eax,0x8(%esp)
    b504:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    b509:	0f 85 48 fe ff ff    	jne    b357 <sys_waitpid+0x30>
    }
	// 在上面对任务数组扫描结束后，如果flag被置位，说明了有符合等待要求的子进程并没有处于退出立刻或僵死状态。此时如果已设置
	// WNOHANG选项（表示若没有子进程处于退出或终止态就返回），就立刻返回0,退出。否则把当前进程置为可中断等待状态，保留并修改当前
	// 进程信号阻塞位图，允许其接收SIGCHLD信号。然后执行调度程序。当系统又开始执行本进程时，如果本进程收到除SIGCHLD以外的
	// 其他未屏蔽信号，则以退出码“重新启动系统调用”返回。否则跳转到函数开始处repeat标号处重重复处理。
	if (flag) {
    b50f:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    b514:	0f 84 88 00 00 00    	je     b5a2 <sys_waitpid+0x27b>
		if (options & WNOHANG)
    b51a:	8b 44 24 28          	mov    0x28(%esp),%eax
    b51e:	83 e0 01             	and    $0x1,%eax
    b521:	85 c0                	test   %eax,%eax
    b523:	74 07                	je     b52c <sys_waitpid+0x205>
			return 0;
    b525:	b8 00 00 00 00       	mov    $0x0,%eax
    b52a:	eb 7b                	jmp    b5a7 <sys_waitpid+0x280>
		current->state = TASK_INTERRUPTIBLE;
    b52c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b531:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
		oldblocked = current->blocked;
    b537:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b53c:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
    b542:	89 44 24 04          	mov    %eax,0x4(%esp)
		current->blocked &= ~(1 << (SIGCHLD - 1));
    b546:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b54b:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    b551:	8b 92 10 02 00 00    	mov    0x210(%edx),%edx
    b557:	81 e2 ff ff fe ff    	and    $0xfffeffff,%edx
    b55d:	89 90 10 02 00 00    	mov    %edx,0x210(%eax)
		schedule();
    b563:	e8 dd b8 ff ff       	call   6e45 <schedule>
		current->blocked = oldblocked;
    b568:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b56d:	8b 54 24 04          	mov    0x4(%esp),%edx
    b571:	89 90 10 02 00 00    	mov    %edx,0x210(%eax)
		if (current->signal & ~(current->blocked | (1 << (SIGCHLD - 1))))
    b577:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b57c:	8b 50 0c             	mov    0xc(%eax),%edx
    b57f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b584:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
    b58a:	0d 00 00 01 00       	or     $0x10000,%eax
    b58f:	f7 d0                	not    %eax
    b591:	21 d0                	and    %edx,%eax
    b593:	85 c0                	test   %eax,%eax
    b595:	0f 84 a0 fd ff ff    	je     b33b <sys_waitpid+0x14>
			return -ERESTARTSYS;
    b59b:	b8 00 fe ff ff       	mov    $0xfffffe00,%eax
    b5a0:	eb 05                	jmp    b5a7 <sys_waitpid+0x280>
		else
			goto repeat;
	}
	// 若flag = 0，表示没有找到符合要求的子进程，则返回出错码（子进程不存在）。
	return -ECHILD;
    b5a2:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
}
    b5a7:	83 c4 1c             	add    $0x1c,%esp
    b5aa:	c3                   	ret    

0000b5ab <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
    b5ab:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
    b5ac:	8b 44 24 08          	mov    0x8(%esp),%eax
    b5b0:	64 8a 00             	mov    %fs:(%eax),%al
    b5b3:	89 c3                	mov    %eax,%ebx
	return _v;
    b5b5:	89 d8                	mov    %ebx,%eax
}
    b5b7:	5b                   	pop    %ebx
    b5b8:	c3                   	ret    

0000b5b9 <put_fs_byte>:

//// 将一字节存放在fs段中指定内存地址处.
// 参数:val - 字节值;addr - 内存地址.
// %0 - 寄存器(字节值val);%1 - (内存地址addr).
static inline void put_fs_byte(char val,char *addr)
{
    b5b9:	83 ec 04             	sub    $0x4,%esp
    b5bc:	8b 44 24 08          	mov    0x8(%esp),%eax
    b5c0:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
    b5c3:	0f b6 04 24          	movzbl (%esp),%eax
    b5c7:	8b 54 24 0c          	mov    0xc(%esp),%edx
    b5cb:	64 88 02             	mov    %al,%fs:(%edx)
}
    b5ce:	90                   	nop
    b5cf:	83 c4 04             	add    $0x4,%esp
    b5d2:	c3                   	ret    

0000b5d3 <put_fs_long>:
//// 将一长字存放在fs段中指定内存地址处.
// 参数:val - 长字值;addr - 内存地址.
// %0 - 寄存器(长字值val);%1 - (内存地址addr).
static inline void put_fs_long(unsigned long val,unsigned long * addr)
{
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
    b5d3:	8b 44 24 04          	mov    0x4(%esp),%eax
    b5d7:	8b 54 24 08          	mov    0x8(%esp),%edx
    b5db:	64 89 02             	mov    %eax,%fs:(%edx)
}
    b5de:	90                   	nop
    b5df:	c3                   	ret    

0000b5e0 <sys_sgetmask>:
#include <errno.h>

// 获取当前任务信号屏蔽位图（屏蔽码或阻塞码）。sgetmask可分解为signal-get-mask。以下类似。
int sys_sgetmask()
{
	return current->blocked;
    b5e0:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b5e5:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
}
    b5eb:	c3                   	ret    

0000b5ec <sys_ssetmask>:

// 设置新的信号屏蔽位图。信号SIGKILL和SIGSTOP不能被屏蔽。返回值是原信号屏蔽位图。
int sys_ssetmask(int newmask)
{
    b5ec:	83 ec 10             	sub    $0x10,%esp
	int old = current->blocked;
    b5ef:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b5f4:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
    b5fa:	89 44 24 0c          	mov    %eax,0xc(%esp)

	current->blocked = newmask & ~(1 << (SIGKILL - 1)) & ~(1 << (SIGSTOP - 1));
    b5fe:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b603:	8b 54 24 14          	mov    0x14(%esp),%edx
    b607:	81 e2 ff fe fb ff    	and    $0xfffbfeff,%edx
    b60d:	89 90 10 02 00 00    	mov    %edx,0x210(%eax)
	return old;
    b613:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    b617:	83 c4 10             	add    $0x10,%esp
    b61a:	c3                   	ret    

0000b61b <sys_sigpending>:

// 检测并取得进程收到的但被屏蔽（阻塞）的信号。还未处理信号的位图将被放入set中。
int sys_sigpending(sigset_t *set)
{
    b61b:	83 ec 0c             	sub    $0xc,%esp
    /* fill in "set" with signals pending but blocked. */
    /* 用还未处理并且被阻塞信号的位图填入set指针所指位置处 */
	// 首先验证进程提供的用户存储空间就有4个字节。然后把还未处理并且被阻塞信号的位图填入set指针所指位置处。
    verify_area(set, 4);
    b61e:	83 ec 08             	sub    $0x8,%esp
    b621:	6a 04                	push   $0x4
    b623:	ff 74 24 1c          	pushl  0x1c(%esp)
    b627:	e8 77 cd ff ff       	call   83a3 <verify_area>
    b62c:	83 c4 10             	add    $0x10,%esp
    put_fs_long(current->blocked & current->signal, (unsigned long *)set);
    b62f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b634:	8b 90 10 02 00 00    	mov    0x210(%eax),%edx
    b63a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b63f:	8b 40 0c             	mov    0xc(%eax),%eax
    b642:	21 d0                	and    %edx,%eax
    b644:	83 ec 08             	sub    $0x8,%esp
    b647:	ff 74 24 18          	pushl  0x18(%esp)
    b64b:	50                   	push   %eax
    b64c:	e8 82 ff ff ff       	call   b5d3 <put_fs_long>
    b651:	83 c4 10             	add    $0x10,%esp
    return 0;
    b654:	b8 00 00 00 00       	mov    $0x0,%eax
}
    b659:	83 c4 0c             	add    $0xc,%esp
    b65c:	c3                   	ret    

0000b65d <sys_sigsuspend>:
// 该系统调用临时把进程信号屏蔽码替换成参数中给定的set，然后挂起进程，直到收到一个信号为止。
// restart是一个被中断的系统调用重新启动标志。当第1次调用该系统调用时，这是0.并且在该函数中会把进程原来的阻塞码
// blocked保存起来（old_mask），并设置restart为非0值。因此当进程第2次调用该系统调用时，它就会恢复进程原来保存在
// old_mask中的阻塞码。
int sys_sigsuspend(int restart, unsigned long old_mask, unsigned long set)
{
    b65d:	83 ec 0c             	sub    $0xc,%esp
	// 相应的信号捕获函数。
    extern int sys_pause(void);

	// 如果restart标志不为0,表示重新让程序运行起来。于是恢复前面保存在old_mask中的原进程阻塞码。并返回码-EINTR（系统
	// 调用被信号中断）。
    if (restart) {
    b660:	8b 44 24 10          	mov    0x10(%esp),%eax
    b664:	85 c0                	test   %eax,%eax
    b666:	74 16                	je     b67e <sys_sigsuspend+0x21>
			/* we're restarting */  /* 我们正在重新启动系统调用 */
			current->blocked = old_mask;
    b668:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b66d:	8b 54 24 14          	mov    0x14(%esp),%edx
    b671:	89 90 10 02 00 00    	mov    %edx,0x210(%eax)
			return -EINTR;
    b677:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
    b67c:	eb 30                	jmp    b6ae <sys_sigsuspend+0x51>
	// 进程会去执行信号处理函数，然后本调用返回-ERESTARTNOINTR码退出。这个返回码说明在处理完信号后要求返回到本系统调用中继续
	// 运行，即本系统调用不会被中断。
    /* we're not restarting.  do the work */
    /* 我们不是重新运行，那么就干活吧 */
    //*(&restart) = 1;
	__asm__("movl $1, %0\n\t" \
    b67e:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
    b685:	00 
			: \
			:"m"(restart));
    //*(&old_mask) = current->blocked;
	__asm__("movl %%eax, %0\n\t" \
			: \
			:"m"(old_mask), "a"(current->blocked));
    b686:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b68b:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
    //*(&restart) = 1;
	__asm__("movl $1, %0\n\t" \
			: \
			:"m"(restart));
    //*(&old_mask) = current->blocked;
	__asm__("movl %%eax, %0\n\t" \
    b691:	89 44 24 14          	mov    %eax,0x14(%esp)
			: \
			:"m"(old_mask), "a"(current->blocked));
    current->blocked = set;
    b695:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b69a:	8b 54 24 18          	mov    0x18(%esp),%edx
    b69e:	89 90 10 02 00 00    	mov    %edx,0x210(%eax)
    (void) sys_pause();			/* return after a signal arrives */
    b6a4:	e8 9d b9 ff ff       	call   7046 <sys_pause>
    return -ERESTARTNOINTR;		/* handle the signal, and come back */
    b6a9:	b8 ff fd ff ff       	mov    $0xfffffdff,%eax
}
    b6ae:	83 c4 0c             	add    $0xc,%esp
    b6b1:	c3                   	ret    

0000b6b2 <save_old>:

// 复制sigaction数据到fs数据段to处。即从内核空间复制到用户（任务）数据段中。
static inline void save_old(char * from, char * to)
{
    b6b2:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	// 首先验证to处的内存空间是否足够大。然后把一个sigaction结构信息复制到fs段（用户）空间中。宏函数put_fs_byte()在
	// include/asm/segment.h中实现。
	verify_area(to, sizeof(struct sigaction));
    b6b5:	83 ec 08             	sub    $0x8,%esp
    b6b8:	6a 10                	push   $0x10
    b6ba:	ff 74 24 30          	pushl  0x30(%esp)
    b6be:	e8 e0 cc ff ff       	call   83a3 <verify_area>
    b6c3:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i < sizeof(struct sigaction) ; i++) {
    b6c6:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    b6cd:	00 
    b6ce:	eb 29                	jmp    b6f9 <save_old+0x47>
		put_fs_byte(*from, to);
    b6d0:	8b 44 24 20          	mov    0x20(%esp),%eax
    b6d4:	0f b6 00             	movzbl (%eax),%eax
    b6d7:	0f be c0             	movsbl %al,%eax
    b6da:	83 ec 08             	sub    $0x8,%esp
    b6dd:	ff 74 24 2c          	pushl  0x2c(%esp)
    b6e1:	50                   	push   %eax
    b6e2:	e8 d2 fe ff ff       	call   b5b9 <put_fs_byte>
    b6e7:	83 c4 10             	add    $0x10,%esp
		from++;
    b6ea:	83 44 24 20 01       	addl   $0x1,0x20(%esp)
		to++;
    b6ef:	83 44 24 24 01       	addl   $0x1,0x24(%esp)
	int i;

	// 首先验证to处的内存空间是否足够大。然后把一个sigaction结构信息复制到fs段（用户）空间中。宏函数put_fs_byte()在
	// include/asm/segment.h中实现。
	verify_area(to, sizeof(struct sigaction));
	for (i = 0 ; i < sizeof(struct sigaction) ; i++) {
    b6f4:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    b6f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    b6fd:	83 f8 0f             	cmp    $0xf,%eax
    b700:	76 ce                	jbe    b6d0 <save_old+0x1e>
		put_fs_byte(*from, to);
		from++;
		to++;
	}
}
    b702:	90                   	nop
    b703:	83 c4 1c             	add    $0x1c,%esp
    b706:	c3                   	ret    

0000b707 <get_new>:

// 把sigaction数据从fs数据段from位置复制到to处。即从用户数据空间取到内核数据段中。
static inline void get_new(char * from, char * to)
{
    b707:	53                   	push   %ebx
    b708:	83 ec 10             	sub    $0x10,%esp
	int i;

	for (i = 0 ; i < sizeof(struct sigaction) ; i++)
    b70b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    b712:	00 
    b713:	eb 26                	jmp    b73b <get_new+0x34>
		*(to++) = get_fs_byte(from++);
    b715:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
    b719:	8d 43 01             	lea    0x1(%ebx),%eax
    b71c:	89 44 24 1c          	mov    %eax,0x1c(%esp)
    b720:	8b 44 24 18          	mov    0x18(%esp),%eax
    b724:	8d 50 01             	lea    0x1(%eax),%edx
    b727:	89 54 24 18          	mov    %edx,0x18(%esp)
    b72b:	50                   	push   %eax
    b72c:	e8 7a fe ff ff       	call   b5ab <get_fs_byte>
    b731:	83 c4 04             	add    $0x4,%esp
    b734:	88 03                	mov    %al,(%ebx)
// 把sigaction数据从fs数据段from位置复制到to处。即从用户数据空间取到内核数据段中。
static inline void get_new(char * from, char * to)
{
	int i;

	for (i = 0 ; i < sizeof(struct sigaction) ; i++)
    b736:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    b73b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    b73f:	83 f8 0f             	cmp    $0xf,%eax
    b742:	76 d1                	jbe    b715 <get_new+0xe>
		*(to++) = get_fs_byte(from++);
}
    b744:	90                   	nop
    b745:	83 c4 10             	add    $0x10,%esp
    b748:	5b                   	pop    %ebx
    b749:	c3                   	ret    

0000b74a <sys_signal>:
// 信号句柄可以是用户指定的函数，也可以是SIG_DFL（默认句柄）或SIG_IGN（忽略）。
// 参数signum -- 指定的信号； handler -- 指定的句柄； restorer -- 恢复函数指针，该函数由Libc库提供。用于在信号
// 处理程序结束后恢复系统调用返回时几个寄存器的原有值以及系统调用的返回值，就好像系统调用没有执行过信号处理程序而直接
// 返回到用户程序一样。函数返回原信号句柄。
int sys_signal(int signum, long handler, long restorer)
{
    b74a:	83 ec 10             	sub    $0x10,%esp
	struct sigaction tmp;

	// 首先验证信号值在有效范围（1--32）内，并且不得是信号SIGKILL和SIGSTOP。因为这两个信号不能被进程捕获。
	if (signum < 1 || signum > 32 || signum == SIGKILL || signum == SIGSTOP)
    b74d:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    b752:	7e 15                	jle    b769 <sys_signal+0x1f>
    b754:	83 7c 24 14 20       	cmpl   $0x20,0x14(%esp)
    b759:	7f 0e                	jg     b769 <sys_signal+0x1f>
    b75b:	83 7c 24 14 09       	cmpl   $0x9,0x14(%esp)
    b760:	74 07                	je     b769 <sys_signal+0x1f>
    b762:	83 7c 24 14 13       	cmpl   $0x13,0x14(%esp)
    b767:	75 07                	jne    b770 <sys_signal+0x26>
		return -EINVAL;
    b769:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    b76e:	eb 6b                	jmp    b7db <sys_signal+0x91>
	// 然后根据提供的参数组建sigaction结构内容。sa_handler是指定的信号处理句柄（函数）。sa_mask是执行信号处理句柄时的
	// 信号屏蔽码。sa_flags是执行时的一些标志组合。这里设定该信号处理句柄只使用1次后就恢复到默认值，并允许信号在自己的处理
	// 句柄中收到。
	tmp.sa_handler = (void (*)(int)) handler;
    b770:	8b 44 24 18          	mov    0x18(%esp),%eax
    b774:	89 04 24             	mov    %eax,(%esp)
	tmp.sa_mask = 0;
    b777:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
    b77e:	00 
	tmp.sa_flags = SA_ONESHOT | SA_NOMASK;
    b77f:	c7 44 24 08 00 00 00 	movl   $0xc0000000,0x8(%esp)
    b786:	c0 
	tmp.sa_restorer = (void (*)(void)) restorer;    				// 保存恢复处理函数指针。
    b787:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b78b:	89 44 24 0c          	mov    %eax,0xc(%esp)
	// 接着取该信号原来的处理句柄，并设置该信号的sigaction结构。最后返回原信号句柄。
	handler = (long) current->sigaction[signum - 1].sa_handler;
    b78f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b794:	8b 54 24 14          	mov    0x14(%esp),%edx
    b798:	83 ea 01             	sub    $0x1,%edx
    b79b:	83 c2 01             	add    $0x1,%edx
    b79e:	c1 e2 04             	shl    $0x4,%edx
    b7a1:	01 d0                	add    %edx,%eax
    b7a3:	8b 00                	mov    (%eax),%eax
    b7a5:	89 44 24 18          	mov    %eax,0x18(%esp)
	current->sigaction[signum - 1] = tmp;
    b7a9:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b7ae:	8b 54 24 14          	mov    0x14(%esp),%edx
    b7b2:	83 ea 01             	sub    $0x1,%edx
    b7b5:	83 c2 01             	add    $0x1,%edx
    b7b8:	c1 e2 04             	shl    $0x4,%edx
    b7bb:	01 d0                	add    %edx,%eax
    b7bd:	8b 14 24             	mov    (%esp),%edx
    b7c0:	89 10                	mov    %edx,(%eax)
    b7c2:	8b 54 24 04          	mov    0x4(%esp),%edx
    b7c6:	89 50 04             	mov    %edx,0x4(%eax)
    b7c9:	8b 54 24 08          	mov    0x8(%esp),%edx
    b7cd:	89 50 08             	mov    %edx,0x8(%eax)
    b7d0:	8b 54 24 0c          	mov    0xc(%esp),%edx
    b7d4:	89 50 0c             	mov    %edx,0xc(%eax)
	return handler;
    b7d7:	8b 44 24 18          	mov    0x18(%esp),%eax
}
    b7db:	83 c4 10             	add    $0x10,%esp
    b7de:	c3                   	ret    

0000b7df <sys_sigaction>:

// sigaction()系统调用。改变进程在收到一个信号时的操作。signum是除了SIGKILL以外的任何信号。[如果新操作（action）不为空]
// 则新操作被安装。如果oldaction指针不为空，则原操作被保留到oldaction。成功则返回0,否则为-EINVAL。
int sys_sigaction(int signum, const struct sigaction * action,
	struct sigaction * oldaction)
{
    b7df:	56                   	push   %esi
    b7e0:	53                   	push   %ebx
    b7e1:	83 ec 14             	sub    $0x14,%esp
	struct sigaction tmp;

	// 首先验证信号值在有效范围（1--32）内，并且不得是信号SIGKILL和SIGSTOP。因为这两个信号不能被进程捕获。
	if (signum < 1 || signum > 32 || signum == SIGKILL || signum == SIGSTOP)
    b7e4:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    b7e9:	7e 15                	jle    b800 <sys_sigaction+0x21>
    b7eb:	83 7c 24 20 20       	cmpl   $0x20,0x20(%esp)
    b7f0:	7f 0e                	jg     b800 <sys_sigaction+0x21>
    b7f2:	83 7c 24 20 09       	cmpl   $0x9,0x20(%esp)
    b7f7:	74 07                	je     b800 <sys_sigaction+0x21>
    b7f9:	83 7c 24 20 13       	cmpl   $0x13,0x20(%esp)
    b7fe:	75 0a                	jne    b80a <sys_sigaction+0x2b>
		return -EINVAL;
    b800:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    b805:	e9 f7 00 00 00       	jmp    b901 <sys_sigaction+0x122>
	// 在信号的sigaction结构中设置新的操作（动作）。如果oldaction指针不为空的话，则将原操作指针保存到oldaction所指的位置。
	tmp = current->sigaction[signum - 1];
    b80a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b80f:	8b 54 24 20          	mov    0x20(%esp),%edx
    b813:	83 ea 01             	sub    $0x1,%edx
    b816:	83 c2 01             	add    $0x1,%edx
    b819:	c1 e2 04             	shl    $0x4,%edx
    b81c:	01 d0                	add    %edx,%eax
    b81e:	8b 10                	mov    (%eax),%edx
    b820:	89 14 24             	mov    %edx,(%esp)
    b823:	8b 50 04             	mov    0x4(%eax),%edx
    b826:	89 54 24 04          	mov    %edx,0x4(%esp)
    b82a:	8b 50 08             	mov    0x8(%eax),%edx
    b82d:	89 54 24 08          	mov    %edx,0x8(%esp)
    b831:	8b 40 0c             	mov    0xc(%eax),%eax
    b834:	89 44 24 0c          	mov    %eax,0xc(%esp)
	get_new((char *) action,
		(char *) (signum - 1 + current->sigaction));
    b838:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b83d:	8d 50 10             	lea    0x10(%eax),%edx
    b840:	8b 44 24 20          	mov    0x20(%esp),%eax
	// 首先验证信号值在有效范围（1--32）内，并且不得是信号SIGKILL和SIGSTOP。因为这两个信号不能被进程捕获。
	if (signum < 1 || signum > 32 || signum == SIGKILL || signum == SIGSTOP)
		return -EINVAL;
	// 在信号的sigaction结构中设置新的操作（动作）。如果oldaction指针不为空的话，则将原操作指针保存到oldaction所指的位置。
	tmp = current->sigaction[signum - 1];
	get_new((char *) action,
    b844:	05 ff ff ff 0f       	add    $0xfffffff,%eax
    b849:	c1 e0 04             	shl    $0x4,%eax
    b84c:	01 d0                	add    %edx,%eax
    b84e:	50                   	push   %eax
    b84f:	ff 74 24 28          	pushl  0x28(%esp)
    b853:	e8 af fe ff ff       	call   b707 <get_new>
    b858:	83 c4 08             	add    $0x8,%esp
		(char *) (signum - 1 + current->sigaction));
	if (oldaction)
    b85b:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    b860:	74 14                	je     b876 <sys_sigaction+0x97>
		save_old((char *) &tmp,(char *) oldaction);
    b862:	83 ec 08             	sub    $0x8,%esp
    b865:	ff 74 24 30          	pushl  0x30(%esp)
    b869:	8d 44 24 0c          	lea    0xc(%esp),%eax
    b86d:	50                   	push   %eax
    b86e:	e8 3f fe ff ff       	call   b6b2 <save_old>
    b873:	83 c4 10             	add    $0x10,%esp
	// 如果允许信号在自己的信号句柄中收到，则令屏蔽码为0,否则设置屏蔽本信号。
	if (current->sigaction[signum - 1].sa_flags & SA_NOMASK)
    b876:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b87b:	8b 54 24 20          	mov    0x20(%esp),%edx
    b87f:	83 ea 01             	sub    $0x1,%edx
    b882:	83 c2 01             	add    $0x1,%edx
    b885:	c1 e2 04             	shl    $0x4,%edx
    b888:	01 d0                	add    %edx,%eax
    b88a:	83 c0 08             	add    $0x8,%eax
    b88d:	8b 00                	mov    (%eax),%eax
    b88f:	25 00 00 00 40       	and    $0x40000000,%eax
    b894:	85 c0                	test   %eax,%eax
    b896:	74 1f                	je     b8b7 <sys_sigaction+0xd8>
		current->sigaction[signum - 1].sa_mask = 0;
    b898:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b89d:	8b 54 24 20          	mov    0x20(%esp),%edx
    b8a1:	83 ea 01             	sub    $0x1,%edx
    b8a4:	83 c2 01             	add    $0x1,%edx
    b8a7:	c1 e2 04             	shl    $0x4,%edx
    b8aa:	01 d0                	add    %edx,%eax
    b8ac:	83 c0 04             	add    $0x4,%eax
    b8af:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    b8b5:	eb 45                	jmp    b8fc <sys_sigaction+0x11d>
	else
		current->sigaction[signum - 1].sa_mask |= (1 << (signum - 1));
    b8b7:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b8bc:	8b 54 24 20          	mov    0x20(%esp),%edx
    b8c0:	8d 5a ff             	lea    -0x1(%edx),%ebx
    b8c3:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    b8c9:	8b 4c 24 20          	mov    0x20(%esp),%ecx
    b8cd:	83 e9 01             	sub    $0x1,%ecx
    b8d0:	83 c1 01             	add    $0x1,%ecx
    b8d3:	c1 e1 04             	shl    $0x4,%ecx
    b8d6:	01 ca                	add    %ecx,%edx
    b8d8:	83 c2 04             	add    $0x4,%edx
    b8db:	8b 12                	mov    (%edx),%edx
    b8dd:	8b 4c 24 20          	mov    0x20(%esp),%ecx
    b8e1:	83 e9 01             	sub    $0x1,%ecx
    b8e4:	be 01 00 00 00       	mov    $0x1,%esi
    b8e9:	d3 e6                	shl    %cl,%esi
    b8eb:	89 f1                	mov    %esi,%ecx
    b8ed:	09 ca                	or     %ecx,%edx
    b8ef:	8d 4b 01             	lea    0x1(%ebx),%ecx
    b8f2:	c1 e1 04             	shl    $0x4,%ecx
    b8f5:	01 c8                	add    %ecx,%eax
    b8f7:	83 c0 04             	add    $0x4,%eax
    b8fa:	89 10                	mov    %edx,(%eax)
	return 0;
    b8fc:	b8 00 00 00 00       	mov    $0x0,%eax
}
    b901:	83 c4 14             	add    $0x14,%esp
    b904:	5b                   	pop    %ebx
    b905:	5e                   	pop    %esi
    b906:	c3                   	ret    

0000b907 <core_dump>:
/*
 * 在当前目录中产生core dump映像文件的子程序。目前还没有实现。
 */
int core_dump(long signr)
{
	return(0);	/* We didn't do a dump */
    b907:	b8 00 00 00 00       	mov    $0x0,%eax
}
    b90c:	c3                   	ret    

0000b90d <do_signal>:
// 4、第124行压入栈中的当前处理的信号值（signr）。
int do_signal(long signr, long eax, long ebx, long ecx, long edx, long orig_eax,
	long fs, long es, long ds,
	long eip, long cs, long eflags,
	unsigned long * esp, long ss)
{
    b90d:	83 ec 2c             	sub    $0x2c,%esp
	unsigned long sa_handler;
	long old_eip = eip;
    b910:	8b 44 24 54          	mov    0x54(%esp),%eax
    b914:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	struct sigaction * sa = current->sigaction + signr - 1;			// 得到对应信号的处理数据结构
    b918:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b91d:	8d 50 10             	lea    0x10(%eax),%edx
    b920:	8b 44 24 30          	mov    0x30(%esp),%eax
    b924:	05 ff ff ff 0f       	add    $0xfffffff,%eax
    b929:	c1 e0 04             	shl    $0x4,%eax
    b92c:	01 d0                	add    %edx,%eax
    b92e:	89 44 24 14          	mov    %eax,0x14(%esp)
	// 当前读数据但没有读到任何数据等情况下，进程收到了任何一个非阻塞的信号，则都会-ERESTARTSYS返回值返回。它表示进程可以被
	// 中断，但是在继续执行后会重新启动系统调用。返回码-ERESTARTNOINTR说明在处理完信号后要求返回到原系统调用中继续运行，即系统
	// 调用不会被中断。
	// 因此下面语句说明如果是在系统调用中调用的本函数，并且相应系统调用的返回码eax等于-ERESTARTSYS或-ERESTARTNOINTR时进行下面
	// 的处理（实际上还没有真正回到用户程序中）。
	if ((orig_eax != -1) &&
    b932:	83 7c 24 44 ff       	cmpl   $0xffffffff,0x44(%esp)
    b937:	74 5e                	je     b997 <do_signal+0x8a>
	    ((eax == -ERESTARTSYS) || (eax == -ERESTARTNOINTR))) {
    b939:	8b 44 24 34          	mov    0x34(%esp),%eax
	// 当前读数据但没有读到任何数据等情况下，进程收到了任何一个非阻塞的信号，则都会-ERESTARTSYS返回值返回。它表示进程可以被
	// 中断，但是在继续执行后会重新启动系统调用。返回码-ERESTARTNOINTR说明在处理完信号后要求返回到原系统调用中继续运行，即系统
	// 调用不会被中断。
	// 因此下面语句说明如果是在系统调用中调用的本函数，并且相应系统调用的返回码eax等于-ERESTARTSYS或-ERESTARTNOINTR时进行下面
	// 的处理（实际上还没有真正回到用户程序中）。
	if ((orig_eax != -1) &&
    b93d:	3d 00 fe ff ff       	cmp    $0xfffffe00,%eax
    b942:	74 0b                	je     b94f <do_signal+0x42>
	    ((eax == -ERESTARTSYS) || (eax == -ERESTARTNOINTR))) {
    b944:	8b 44 24 34          	mov    0x34(%esp),%eax
    b948:	3d ff fd ff ff       	cmp    $0xfffffdff,%eax
    b94d:	75 48                	jne    b997 <do_signal+0x8a>
		// 如果系统调用返回码是-ERESTARTSYS（重新启动系统调用），并且sigaction中含有标志SA_INTERRUPT（系统调用被信号中断后不重新
		// 启动系统调用）或者信号值小于SIGCONT或者信号值大于SIGTTOU（即信号不是SIGCONT、SIGSTOP、SIGTSTP、SIGTTIN或SIGTTOU），
		// 则修改系统调用的返回值为eax = -EINTR，即被信号中断的系统调用。
		if ((eax == -ERESTARTSYS) && ((sa->sa_flags & SA_INTERRUPT) ||
    b94f:	8b 44 24 34          	mov    0x34(%esp),%eax
    b953:	3d 00 fe ff ff       	cmp    $0xfffffe00,%eax
    b958:	75 28                	jne    b982 <do_signal+0x75>
    b95a:	8b 44 24 14          	mov    0x14(%esp),%eax
    b95e:	8b 40 08             	mov    0x8(%eax),%eax
    b961:	25 00 00 00 20       	and    $0x20000000,%eax
    b966:	85 c0                	test   %eax,%eax
    b968:	75 0e                	jne    b978 <do_signal+0x6b>
    b96a:	83 7c 24 30 11       	cmpl   $0x11,0x30(%esp)
    b96f:	7e 07                	jle    b978 <do_signal+0x6b>
		    signr < SIGCONT || signr > SIGTTOU))
    b971:	83 7c 24 30 16       	cmpl   $0x16,0x30(%esp)
    b976:	7e 0a                	jle    b982 <do_signal+0x75>
			*(&eax) = -EINTR;
    b978:	c7 44 24 34 fc ff ff 	movl   $0xfffffffc,0x34(%esp)
    b97f:	ff 
    b980:	eb 15                	jmp    b997 <do_signal+0x8a>
		// 否则就恢复进程寄存器eax在调用系统调用之前的值，并且把源程序指令指针回调2个字节。即当返回用户程序时，让程序重新启动执行被信号
		// 中断的系统调用。
		else {
			*(&eax) = orig_eax;     				// orig_eax系统调用号
    b982:	8b 44 24 44          	mov    0x44(%esp),%eax
    b986:	89 44 24 34          	mov    %eax,0x34(%esp)
			//*(&eip) = old_eip -= 2;
			// 系统调用返回到用户态的时候再次执行本次系统调用
			old_eip -= 2;
    b98a:	83 6c 24 1c 02       	subl   $0x2,0x1c(%esp)
			__asm__ ("movl %%eax, %0\n\t" \
    b98f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b993:	89 44 24 54          	mov    %eax,0x54(%esp)
					: \
					:"m"(eip), "a"(old_eip));
		}
	}
	// 如果信号句柄为SIG_IGN（1,默认忽略句柄）则不对信号进行处理而直接返回。
	sa_handler = (unsigned long) sa->sa_handler;
    b997:	8b 44 24 14          	mov    0x14(%esp),%eax
    b99b:	8b 00                	mov    (%eax),%eax
    b99d:	89 44 24 10          	mov    %eax,0x10(%esp)
	if (sa_handler == 1)
    b9a1:	83 7c 24 10 01       	cmpl   $0x1,0x10(%esp)
    b9a6:	75 0a                	jne    b9b2 <do_signal+0xa5>
		return(1);   								/* Ignore, see if there are more signals... */
    b9a8:	b8 01 00 00 00       	mov    $0x1,%eax
    b9ad:	e9 4c 02 00 00       	jmp    bbfe <do_signal+0x2f1>
	// 如果句柄为SIG_DFL（0,默认处理），则根据具体的信号进行分别处理。
	if (!sa_handler) {
    b9b2:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    b9b7:	0f 85 b3 00 00 00    	jne    ba70 <do_signal+0x163>
		switch (signr) {
    b9bd:	8b 44 24 30          	mov    0x30(%esp),%eax
    b9c1:	83 e8 03             	sub    $0x3,%eax
    b9c4:	83 f8 13             	cmp    $0x13,%eax
    b9c7:	0f 87 94 00 00 00    	ja     ba61 <do_signal+0x154>
    b9cd:	8b 04 85 14 34 02 00 	mov    0x23414(,%eax,4),%eax
    b9d4:	ff e0                	jmp    *%eax
		// 如果信号是以下两个则也忽略之，并返回
		case SIGCONT:
		case SIGCHLD:
			return(1);  							/* Ignore, ... */
    b9d6:	b8 01 00 00 00       	mov    $0x1,%eax
    b9db:	e9 1e 02 00 00       	jmp    bbfe <do_signal+0x2f1>
		// 信号。
		case SIGSTOP:
		case SIGTSTP:
		case SIGTTIN:
		case SIGTTOU:
			current->state = TASK_STOPPED;
    b9e0:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b9e5:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
			current->exit_code = signr;
    b9eb:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b9f0:	8b 54 24 30          	mov    0x30(%esp),%edx
    b9f4:	89 90 14 02 00 00    	mov    %edx,0x214(%eax)
			if (!(current->p_pptr->sigaction[SIGCHLD - 1].sa_flags &
    b9fa:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b9ff:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    ba05:	8b 80 18 01 00 00    	mov    0x118(%eax),%eax
    ba0b:	83 e0 01             	and    $0x1,%eax
    ba0e:	85 c0                	test   %eax,%eax
    ba10:	75 23                	jne    ba35 <do_signal+0x128>
					SA_NOCLDSTOP))
				current->p_pptr->signal |= (1 << (SIGCHLD - 1));
    ba12:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    ba17:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    ba1d:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    ba23:	8b 92 bc 02 00 00    	mov    0x2bc(%edx),%edx
    ba29:	8b 52 0c             	mov    0xc(%edx),%edx
    ba2c:	81 ca 00 00 01 00    	or     $0x10000,%edx
    ba32:	89 50 0c             	mov    %edx,0xc(%eax)
			return(1);  							/* Reschedule another event */
    ba35:	b8 01 00 00 00       	mov    $0x1,%eax
    ba3a:	e9 bf 01 00 00       	jmp    bbfe <do_signal+0x2f1>
		case SIGILL:
		case SIGTRAP:
		case SIGIOT:
		case SIGFPE:
		case SIGSEGV:
			if (core_dump(signr))
    ba3f:	ff 74 24 30          	pushl  0x30(%esp)
    ba43:	e8 bf fe ff ff       	call   b907 <core_dump>
    ba48:	83 c4 04             	add    $0x4,%esp
    ba4b:	85 c0                	test   %eax,%eax
    ba4d:	74 12                	je     ba61 <do_signal+0x154>
				do_exit(signr | 0x80);
    ba4f:	8b 44 24 30          	mov    0x30(%esp),%eax
    ba53:	0c 80                	or     $0x80,%al
    ba55:	83 ec 0c             	sub    $0xc,%esp
    ba58:	50                   	push   %eax
    ba59:	e8 8c f3 ff ff       	call   adea <do_exit>
    ba5e:	83 c4 10             	add    $0x10,%esp
			/* fall through */
		default:
			do_exit(signr);
    ba61:	83 ec 0c             	sub    $0xc,%esp
    ba64:	ff 74 24 3c          	pushl  0x3c(%esp)
    ba68:	e8 7d f3 ff ff       	call   adea <do_exit>
    ba6d:	83 c4 10             	add    $0x10,%esp
	// 如果该信号句柄只需被调用一次，则将该句柄置空。注意，该信号句柄前面已经保存在sa_handler指针中。
	// 在系统调用进程内核时，用户程序返回地址（eip、cs）被保存在内核态栈中。下面这段代码修改内核态堆栈上用户调用时
	// 的代码指针eip为指向信号处理句柄，同时也将sa_restorer、signr、进程屏蔽码（如果SA_NOMASK没置位）、eax、
	// ecx、edx作为参数以及原调用系统调用的程序返回指针及标志寄存器值压入用户堆栈。因此在本次系统调用中断返回用户
	// 程序时会首先执行用户信号句柄程序，然后继续执行用户程序。
	if (sa->sa_flags & SA_ONESHOT)
    ba70:	8b 44 24 14          	mov    0x14(%esp),%eax
    ba74:	8b 40 08             	mov    0x8(%eax),%eax
    ba77:	85 c0                	test   %eax,%eax
    ba79:	79 0a                	jns    ba85 <do_signal+0x178>
		sa->sa_handler = NULL;
    ba7b:	8b 44 24 14          	mov    0x14(%esp),%eax
    ba7f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	// 调用者丢弃。这里之所以可以使用这种方式，是因为该函数是从汇编程序中被调用的，并且在函数返回后汇编程序并没有把
	// 调用do_signal()时的所有参数都丢弃。eip等仍然在堆栈中。
	// sigaction结构的sa_mask字段给出了在当前信号句柄（信号描述符）程序执行期间应该被屏蔽的信号集。同时，引起本
	// 信号句柄执行的信号也会被屏蔽。不过若sa_flags中使用了SA_NOMASK标志，那么引起本信号句柄执行的信号将不会被屏蔽
	// 掉。如果允许信号自己的处理句柄程序收到信号自己，则也需要将进程的信号阻塞码压入堆栈。
	*(&eip) = sa_handler;
    ba85:	8b 44 24 10          	mov    0x10(%esp),%eax
    ba89:	89 44 24 54          	mov    %eax,0x54(%esp)
	longs = (sa->sa_flags & SA_NOMASK)?7:8;
    ba8d:	8b 44 24 14          	mov    0x14(%esp),%eax
    ba91:	8b 40 08             	mov    0x8(%eax),%eax
    ba94:	25 00 00 00 40       	and    $0x40000000,%eax
    ba99:	85 c0                	test   %eax,%eax
    ba9b:	74 07                	je     baa4 <do_signal+0x197>
    ba9d:	b8 07 00 00 00       	mov    $0x7,%eax
    baa2:	eb 05                	jmp    baa9 <do_signal+0x19c>
    baa4:	b8 08 00 00 00       	mov    $0x8,%eax
    baa9:	89 44 24 0c          	mov    %eax,0xc(%esp)
	// 将原调用程序的用户堆栈指针向下扩展7（或8）个长字（用来存放调用信号句柄的参数等），并检查内存使用情况（如内存超
	// 界则分配新页等）。
	//*(&esp) -= longs;
	__asm__("subl %1, %0\n\t" \
			: \
			:"m"(esp), "a"(longs * 4));
    baad:	8b 44 24 0c          	mov    0xc(%esp),%eax
    bab1:	c1 e0 02             	shl    $0x2,%eax
	*(&eip) = sa_handler;
	longs = (sa->sa_flags & SA_NOMASK)?7:8;
	// 将原调用程序的用户堆栈指针向下扩展7（或8）个长字（用来存放调用信号句柄的参数等），并检查内存使用情况（如内存超
	// 界则分配新页等）。
	//*(&esp) -= longs;
	__asm__("subl %1, %0\n\t" \
    bab4:	29 44 24 60          	sub    %eax,0x60(%esp)
			: \
			:"m"(esp), "a"(longs * 4));
	verify_area(esp, longs * 4);
    bab8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    babc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    bac3:	8b 44 24 60          	mov    0x60(%esp),%eax
    bac7:	83 ec 08             	sub    $0x8,%esp
    baca:	52                   	push   %edx
    bacb:	50                   	push   %eax
    bacc:	e8 d2 c8 ff ff       	call   83a3 <verify_area>
    bad1:	83 c4 10             	add    $0x10,%esp
	// 在用户堆栈中从下到上存放sa_restorer、信号signr、屏蔽码blocked（如果SA_NOMASK置位）、eax、ecx、edx、eflags
	// 和用户程序原代码指针。
	tmp_esp = esp;
    bad4:	8b 44 24 60          	mov    0x60(%esp),%eax
    bad8:	89 44 24 18          	mov    %eax,0x18(%esp)
	put_fs_long((long) sa->sa_restorer, tmp_esp++);
    badc:	8b 44 24 18          	mov    0x18(%esp),%eax
    bae0:	8d 50 04             	lea    0x4(%eax),%edx
    bae3:	89 54 24 18          	mov    %edx,0x18(%esp)
    bae7:	8b 54 24 14          	mov    0x14(%esp),%edx
    baeb:	8b 52 0c             	mov    0xc(%edx),%edx
    baee:	83 ec 08             	sub    $0x8,%esp
    baf1:	50                   	push   %eax
    baf2:	52                   	push   %edx
    baf3:	e8 db fa ff ff       	call   b5d3 <put_fs_long>
    baf8:	83 c4 10             	add    $0x10,%esp
	put_fs_long(signr, tmp_esp++);
    bafb:	8b 44 24 18          	mov    0x18(%esp),%eax
    baff:	8d 50 04             	lea    0x4(%eax),%edx
    bb02:	89 54 24 18          	mov    %edx,0x18(%esp)
    bb06:	8b 54 24 30          	mov    0x30(%esp),%edx
    bb0a:	83 ec 08             	sub    $0x8,%esp
    bb0d:	50                   	push   %eax
    bb0e:	52                   	push   %edx
    bb0f:	e8 bf fa ff ff       	call   b5d3 <put_fs_long>
    bb14:	83 c4 10             	add    $0x10,%esp
	if (!(sa->sa_flags & SA_NOMASK))
    bb17:	8b 44 24 14          	mov    0x14(%esp),%eax
    bb1b:	8b 40 08             	mov    0x8(%eax),%eax
    bb1e:	25 00 00 00 40       	and    $0x40000000,%eax
    bb23:	85 c0                	test   %eax,%eax
    bb25:	75 24                	jne    bb4b <do_signal+0x23e>
		put_fs_long(current->blocked, tmp_esp++);
    bb27:	8b 44 24 18          	mov    0x18(%esp),%eax
    bb2b:	8d 50 04             	lea    0x4(%eax),%edx
    bb2e:	89 54 24 18          	mov    %edx,0x18(%esp)
    bb32:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    bb38:	8b 92 10 02 00 00    	mov    0x210(%edx),%edx
    bb3e:	83 ec 08             	sub    $0x8,%esp
    bb41:	50                   	push   %eax
    bb42:	52                   	push   %edx
    bb43:	e8 8b fa ff ff       	call   b5d3 <put_fs_long>
    bb48:	83 c4 10             	add    $0x10,%esp
	put_fs_long(eax, tmp_esp++);
    bb4b:	8b 44 24 18          	mov    0x18(%esp),%eax
    bb4f:	8d 50 04             	lea    0x4(%eax),%edx
    bb52:	89 54 24 18          	mov    %edx,0x18(%esp)
    bb56:	8b 54 24 34          	mov    0x34(%esp),%edx
    bb5a:	83 ec 08             	sub    $0x8,%esp
    bb5d:	50                   	push   %eax
    bb5e:	52                   	push   %edx
    bb5f:	e8 6f fa ff ff       	call   b5d3 <put_fs_long>
    bb64:	83 c4 10             	add    $0x10,%esp
	put_fs_long(ecx, tmp_esp++);
    bb67:	8b 44 24 18          	mov    0x18(%esp),%eax
    bb6b:	8d 50 04             	lea    0x4(%eax),%edx
    bb6e:	89 54 24 18          	mov    %edx,0x18(%esp)
    bb72:	8b 54 24 3c          	mov    0x3c(%esp),%edx
    bb76:	83 ec 08             	sub    $0x8,%esp
    bb79:	50                   	push   %eax
    bb7a:	52                   	push   %edx
    bb7b:	e8 53 fa ff ff       	call   b5d3 <put_fs_long>
    bb80:	83 c4 10             	add    $0x10,%esp
	put_fs_long(edx, tmp_esp++);
    bb83:	8b 44 24 18          	mov    0x18(%esp),%eax
    bb87:	8d 50 04             	lea    0x4(%eax),%edx
    bb8a:	89 54 24 18          	mov    %edx,0x18(%esp)
    bb8e:	8b 54 24 40          	mov    0x40(%esp),%edx
    bb92:	83 ec 08             	sub    $0x8,%esp
    bb95:	50                   	push   %eax
    bb96:	52                   	push   %edx
    bb97:	e8 37 fa ff ff       	call   b5d3 <put_fs_long>
    bb9c:	83 c4 10             	add    $0x10,%esp
	put_fs_long(eflags, tmp_esp++);
    bb9f:	8b 44 24 18          	mov    0x18(%esp),%eax
    bba3:	8d 50 04             	lea    0x4(%eax),%edx
    bba6:	89 54 24 18          	mov    %edx,0x18(%esp)
    bbaa:	8b 54 24 5c          	mov    0x5c(%esp),%edx
    bbae:	83 ec 08             	sub    $0x8,%esp
    bbb1:	50                   	push   %eax
    bbb2:	52                   	push   %edx
    bbb3:	e8 1b fa ff ff       	call   b5d3 <put_fs_long>
    bbb8:	83 c4 10             	add    $0x10,%esp
	put_fs_long(old_eip, tmp_esp++);
    bbbb:	8b 44 24 18          	mov    0x18(%esp),%eax
    bbbf:	8d 50 04             	lea    0x4(%eax),%edx
    bbc2:	89 54 24 18          	mov    %edx,0x18(%esp)
    bbc6:	8b 54 24 1c          	mov    0x1c(%esp),%edx
    bbca:	83 ec 08             	sub    $0x8,%esp
    bbcd:	50                   	push   %eax
    bbce:	52                   	push   %edx
    bbcf:	e8 ff f9 ff ff       	call   b5d3 <put_fs_long>
    bbd4:	83 c4 10             	add    $0x10,%esp
	current->blocked |= sa->sa_mask;                // 进程阻塞码（屏蔽码）添上as_mask中的码。
    bbd7:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    bbdc:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    bbe2:	8b 92 10 02 00 00    	mov    0x210(%edx),%edx
    bbe8:	89 d1                	mov    %edx,%ecx
    bbea:	8b 54 24 14          	mov    0x14(%esp),%edx
    bbee:	8b 52 04             	mov    0x4(%edx),%edx
    bbf1:	09 ca                	or     %ecx,%edx
    bbf3:	89 90 10 02 00 00    	mov    %edx,0x210(%eax)
	return(0);										/* Continue, execute handler */
    bbf9:	b8 00 00 00 00       	mov    $0x0,%eax
}
    bbfe:	83 c4 2c             	add    $0x2c,%esp
    bc01:	c3                   	ret    

0000bc02 <kernel_mktime>:
};

// 该函数计算从1970年1月1日0时起到开机当日经过的秒数,作为开机时间.
// 参数tm中各字段已经在init/main.c中被赋值,信息取自CMOS.
long kernel_mktime(struct tm * tm)
{
    bc02:	83 ec 10             	sub    $0x10,%esp
	// if(tm->tm_year<70) tm->tm_year += 100;由于UNIX计年份y是从1970年算起.到1972年就是一个闰年,因此过3年(71,72,73)
	// 就是第1个闰年,这样从1970年开始的闰年数计算方法就应该是1+(y-3)/4,即为(y+1)/4.res=这些年经过的秒数时间+每个闰年时多1天
	// 的秒数时间+当年到当月时的秒数.另外,month[]数组中已经在2月份的天数中包含进了闰年时的天数,即2月份天数多算了1天.因此,若
	// 当年不是闰年并且当前月份大于2月份的话,我们就要减去这天.因为人70开始算起,所以当年是闰年的判断方法是(y+2)能被4除尽.若不能
	// 除尽(有余数)就不是闰年.
	if(tm->tm_year < 70) tm->tm_year += 100;				//处理2000年问题
    bc05:	8b 44 24 14          	mov    0x14(%esp),%eax
    bc09:	8b 40 14             	mov    0x14(%eax),%eax
    bc0c:	83 f8 45             	cmp    $0x45,%eax
    bc0f:	7f 11                	jg     bc22 <kernel_mktime+0x20>
    bc11:	8b 44 24 14          	mov    0x14(%esp),%eax
    bc15:	8b 40 14             	mov    0x14(%eax),%eax
    bc18:	8d 50 64             	lea    0x64(%eax),%edx
    bc1b:	8b 44 24 14          	mov    0x14(%esp),%eax
    bc1f:	89 50 14             	mov    %edx,0x14(%eax)
	year = tm->tm_year - 70;
    bc22:	8b 44 24 14          	mov    0x14(%esp),%eax
    bc26:	8b 40 14             	mov    0x14(%eax),%eax
    bc29:	83 e8 46             	sub    $0x46,%eax
    bc2c:	89 44 24 08          	mov    %eax,0x8(%esp)
	/* magic offsets (y+1) needed to get leapyears right.*/
	/* 为了获得正确的闰年数,这里需要这样一个魔幻值(y+1) */
	res = YEAR * year + DAY * ((year + 1) / 4);
    bc30:	8b 44 24 08          	mov    0x8(%esp),%eax
    bc34:	69 d0 80 33 e1 01    	imul   $0x1e13380,%eax,%edx
    bc3a:	8b 44 24 08          	mov    0x8(%esp),%eax
    bc3e:	83 c0 01             	add    $0x1,%eax
    bc41:	8d 48 03             	lea    0x3(%eax),%ecx
    bc44:	85 c0                	test   %eax,%eax
    bc46:	0f 48 c1             	cmovs  %ecx,%eax
    bc49:	c1 f8 02             	sar    $0x2,%eax
    bc4c:	69 c0 80 51 01 00    	imul   $0x15180,%eax,%eax
    bc52:	01 d0                	add    %edx,%eax
    bc54:	89 44 24 0c          	mov    %eax,0xc(%esp)
	res += month[tm->tm_mon];
    bc58:	8b 44 24 14          	mov    0x14(%esp),%eax
    bc5c:	8b 40 10             	mov    0x10(%eax),%eax
    bc5f:	8b 04 85 20 e3 02 00 	mov    0x2e320(,%eax,4),%eax
    bc66:	01 44 24 0c          	add    %eax,0xc(%esp)
	/* and (y+2) here. If it wasn't a leap-year, we have to adjust */
	/* 以及(y+2).如果(y+2)不是闰年,那么我们就必须进行调整(减去一天的秒数时间). */
	if (tm->tm_mon > 1 && ((year + 2) % 4))
    bc6a:	8b 44 24 14          	mov    0x14(%esp),%eax
    bc6e:	8b 40 10             	mov    0x10(%eax),%eax
    bc71:	83 f8 01             	cmp    $0x1,%eax
    bc74:	7e 16                	jle    bc8c <kernel_mktime+0x8a>
    bc76:	8b 44 24 08          	mov    0x8(%esp),%eax
    bc7a:	83 c0 02             	add    $0x2,%eax
    bc7d:	83 e0 03             	and    $0x3,%eax
    bc80:	85 c0                	test   %eax,%eax
    bc82:	74 08                	je     bc8c <kernel_mktime+0x8a>
		res -= DAY;
    bc84:	81 6c 24 0c 80 51 01 	subl   $0x15180,0xc(%esp)
    bc8b:	00 
	res += DAY * (tm->tm_mday - 1);							// 再加上本月过去的天数的秒数时间.
    bc8c:	8b 44 24 14          	mov    0x14(%esp),%eax
    bc90:	8b 40 0c             	mov    0xc(%eax),%eax
    bc93:	83 e8 01             	sub    $0x1,%eax
    bc96:	69 c0 80 51 01 00    	imul   $0x15180,%eax,%eax
    bc9c:	01 44 24 0c          	add    %eax,0xc(%esp)
	res += HOUR * tm->tm_hour;								// 再加上当天过去的小时数的秒数时间.
    bca0:	8b 44 24 14          	mov    0x14(%esp),%eax
    bca4:	8b 40 08             	mov    0x8(%eax),%eax
    bca7:	69 c0 10 0e 00 00    	imul   $0xe10,%eax,%eax
    bcad:	01 44 24 0c          	add    %eax,0xc(%esp)
	res += MINUTE * tm->tm_min;								// 再加上1小时内过去的分钟数的秒数时间.
    bcb1:	8b 44 24 14          	mov    0x14(%esp),%eax
    bcb5:	8b 40 04             	mov    0x4(%eax),%eax
    bcb8:	c1 e0 02             	shl    $0x2,%eax
    bcbb:	89 c2                	mov    %eax,%edx
    bcbd:	c1 e2 04             	shl    $0x4,%edx
    bcc0:	29 c2                	sub    %eax,%edx
    bcc2:	89 d0                	mov    %edx,%eax
    bcc4:	01 44 24 0c          	add    %eax,0xc(%esp)
	res += tm->tm_sec;										// 再加上1分钟内已过的秒数.
    bcc8:	8b 44 24 14          	mov    0x14(%esp),%eax
    bccc:	8b 00                	mov    (%eax),%eax
    bcce:	01 44 24 0c          	add    %eax,0xc(%esp)
	return res;												// 即等于从1970年以来经过的秒数时间.
    bcd2:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    bcd6:	83 c4 10             	add    $0x10,%esp
    bcd9:	c3                   	ret    

0000bcda <oom>:
void swap_in(unsigned long *table_ptr);                                             // 把页表项是table_ptr的一页物理内存换出到交换空间

// 下面函数名前关键字volatile用于告诉编译器gcc该函数不会返回.这样可让gcc产生更好的代码,更重要的是使用这个关键字可以避免产生某些(未
//　初始化变量的)假警告信息.
static inline void oom(void)
{
    bcda:	83 ec 0c             	sub    $0xc,%esp
	printk("out of memory\n\r");
    bcdd:	83 ec 0c             	sub    $0xc,%esp
    bce0:	68 64 34 02 00       	push   $0x23464
    bce5:	e8 5d cf ff ff       	call   8c47 <printk>
    bcea:	83 c4 10             	add    $0x10,%esp
    //　do_exit()应该使用退出代码,这里用了信息值SIGSEGV(11).相同值的出错码含义是"资源暂不可用",正好同义.
	do_exit(SIGSEGV);
    bced:	83 ec 0c             	sub    $0xc,%esp
    bcf0:	6a 0b                	push   $0xb
    bcf2:	e8 f3 f0 ff ff       	call   adea <do_exit>
    bcf7:	83 c4 10             	add    $0x10,%esp
}
    bcfa:	90                   	nop
    bcfb:	83 c4 0c             	add    $0xc,%esp
    bcfe:	c3                   	ret    

0000bcff <free_page>:
 * 释放物理地址"addr"处的一页内存.用于函数free_page_tables().
 */
// 释放物理地址addr开始的1页面内存.
// 物理地址1MB以下的内存空间用于内核程序和缓冲,不作为分配页面的内存空间.因此参数addr需要大于1MB
void free_page(unsigned long addr)
{
    bcff:	83 ec 0c             	sub    $0xc,%esp
	// 首先判断参数给定的物理地址addr的合理性.如果物理地址addr小于内存低端(1MB),则表示在内核程序或高速缓冲中,对此不予处理.如果物理地址
	// addr >=系统所含物理内存最高端,则显示出错信息并且内核停止工作.
	if (addr < LOW_MEM) return;
    bd02:	81 7c 24 10 ff ff 0f 	cmpl   $0xfffff,0x10(%esp)
    bd09:	00 
    bd0a:	76 65                	jbe    bd71 <free_page+0x72>
	if (addr >= HIGH_MEMORY)
    bd0c:	a1 80 f2 02 00       	mov    0x2f280,%eax
    bd11:	39 44 24 10          	cmp    %eax,0x10(%esp)
    bd15:	72 10                	jb     bd27 <free_page+0x28>
		panic("trying to free nonexistent page");
    bd17:	83 ec 0c             	sub    $0xc,%esp
    bd1a:	68 74 34 02 00       	push   $0x23474
    bd1f:	e8 e4 ce ff ff       	call   8c08 <panic>
    bd24:	83 c4 10             	add    $0x10,%esp
	// 如果对参数addr验证通过,那么就根据这个物理地址换算出内存低端开始计起的内存页面号.页面号 = (addr - LOW_MEME)/4096.可见页面号从0号
	// 开始计起.此时addr中存放着页面号.如果该页面号对应的页面映射字节不等于0,则减1返回.此时该映射字节值应该为0,表示页面已释放.如果对应页面原本就
	// 是0,表示该物理页面本来就是空闲的,说明内核代码出问题.于是显示出错信息并停机.
	addr -= LOW_MEM;
    bd27:	81 6c 24 10 00 00 10 	subl   $0x100000,0x10(%esp)
    bd2e:	00 
	addr >>= 12;
    bd2f:	c1 6c 24 10 0c       	shrl   $0xc,0x10(%esp)
	if (mem_map[addr]--) return;
    bd34:	8b 44 24 10          	mov    0x10(%esp),%eax
    bd38:	05 a0 f2 02 00       	add    $0x2f2a0,%eax
    bd3d:	0f b6 00             	movzbl (%eax),%eax
    bd40:	8d 50 ff             	lea    -0x1(%eax),%edx
    bd43:	8b 4c 24 10          	mov    0x10(%esp),%ecx
    bd47:	81 c1 a0 f2 02 00    	add    $0x2f2a0,%ecx
    bd4d:	88 11                	mov    %dl,(%ecx)
    bd4f:	84 c0                	test   %al,%al
    bd51:	75 21                	jne    bd74 <free_page+0x75>
	// 执行到此处表示要释放空闲的页面，则将该页面的引用次数重置为0
	mem_map[addr] = 0;
    bd53:	8b 44 24 10          	mov    0x10(%esp),%eax
    bd57:	05 a0 f2 02 00       	add    $0x2f2a0,%eax
    bd5c:	c6 00 00             	movb   $0x0,(%eax)
	panic("trying to free free page");
    bd5f:	83 ec 0c             	sub    $0xc,%esp
    bd62:	68 94 34 02 00       	push   $0x23494
    bd67:	e8 9c ce ff ff       	call   8c08 <panic>
    bd6c:	83 c4 10             	add    $0x10,%esp
    bd6f:	eb 04                	jmp    bd75 <free_page+0x76>
// 物理地址1MB以下的内存空间用于内核程序和缓冲,不作为分配页面的内存空间.因此参数addr需要大于1MB
void free_page(unsigned long addr)
{
	// 首先判断参数给定的物理地址addr的合理性.如果物理地址addr小于内存低端(1MB),则表示在内核程序或高速缓冲中,对此不予处理.如果物理地址
	// addr >=系统所含物理内存最高端,则显示出错信息并且内核停止工作.
	if (addr < LOW_MEM) return;
    bd71:	90                   	nop
    bd72:	eb 01                	jmp    bd75 <free_page+0x76>
	// 如果对参数addr验证通过,那么就根据这个物理地址换算出内存低端开始计起的内存页面号.页面号 = (addr - LOW_MEME)/4096.可见页面号从0号
	// 开始计起.此时addr中存放着页面号.如果该页面号对应的页面映射字节不等于0,则减1返回.此时该映射字节值应该为0,表示页面已释放.如果对应页面原本就
	// 是0,表示该物理页面本来就是空闲的,说明内核代码出问题.于是显示出错信息并停机.
	addr -= LOW_MEM;
	addr >>= 12;
	if (mem_map[addr]--) return;
    bd74:	90                   	nop
	// 执行到此处表示要释放空闲的页面，则将该页面的引用次数重置为0
	mem_map[addr] = 0;
	panic("trying to free free page");
}
    bd75:	83 c4 0c             	add    $0xc,%esp
    bd78:	c3                   	ret    

0000bd79 <free_page_tables>:
// 页目录位于物理地址0开始处,共1024项,每项4字节,共占4KB.每个目录项指定一个页表.内核页表物理地址0x1000处开始(紧接着目录空间),
// 共4个页表.每个页表有1024项,每项4B.因此也占4KB(1页)内存.各进程(除了在内核代码中的进程0和1)的页表所占据的页面在进程被创建时由
// 内核为其在主内存区申请得到.每个页表项对应1页物理内存,因此一个页表最多可映射4MB的物理内存.
// 参数:from - 起始线性基地址;size - 释放的字节长度.
int free_page_tables(unsigned long from, unsigned long size)
{
    bd79:	83 ec 1c             	sub    $0x1c,%esp
	unsigned long *pg_table;
	unsigned long * dir, nr;

	// 首先检测参数from给出的线性基地址是否在4MB的边界处.因为该函数只能处理这种情况.若from = 0,则出错.说明试图释放内核和缓冲所占空间.
	if (from & 0x3fffff)
    bd7c:	8b 44 24 20          	mov    0x20(%esp),%eax
    bd80:	25 ff ff 3f 00       	and    $0x3fffff,%eax
    bd85:	85 c0                	test   %eax,%eax
    bd87:	74 10                	je     bd99 <free_page_tables+0x20>
		panic("free_page_tables called with wrong alignment");
    bd89:	83 ec 0c             	sub    $0xc,%esp
    bd8c:	68 b0 34 02 00       	push   $0x234b0
    bd91:	e8 72 ce ff ff       	call   8c08 <panic>
    bd96:	83 c4 10             	add    $0x10,%esp
	if (!from)
    bd99:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    bd9e:	75 10                	jne    bdb0 <free_page_tables+0x37>
		panic("Trying to free up swapper memory space");
    bda0:	83 ec 0c             	sub    $0xc,%esp
    bda3:	68 e0 34 02 00       	push   $0x234e0
    bda8:	e8 5b ce ff ff       	call   8c08 <panic>
    bdad:	83 c4 10             	add    $0x10,%esp
	// 然后计算参数size给出的长度所占的页目录数(4MB的进位整数倍),也即所占页表数.
	// 因为1个页表可管理4MB物理内存,所以这里用右移22位的方式把需要复制的内存长度值除以4MB.其中加上0x3fffff(即4MB-1)用于得到进位整数倍
	// 结果,即除操作若有余数则进1.例如,如果原size = 4.01MB,那么可得到结果size = 2.
	size = (size + 0x3fffff) >> 22;
    bdb0:	8b 44 24 24          	mov    0x24(%esp),%eax
    bdb4:	05 ff ff 3f 00       	add    $0x3fffff,%eax
    bdb9:	c1 e8 16             	shr    $0x16,%eax
    bdbc:	89 44 24 24          	mov    %eax,0x24(%esp)
	// 接着计算给出的线性基地址对应的起始目录项, 对应的目录项号 = from >>22.因为每项点4字节,并且由于页目录表从物理地址0开始存放,
	// 因此实际目录项指针 = 目录项号<<2,也即(from >> 20),"与"上0xffc确保目录项指针范围有效.
	// dir表示起始的页目录项物理地址
	dir = (unsigned long *) ((from >> 20) & 0xffc); 			/* _pg_dir = 0 */
    bdc0:	8b 44 24 20          	mov    0x20(%esp),%eax
    bdc4:	c1 e8 14             	shr    $0x14,%eax
    bdc7:	25 fc 0f 00 00       	and    $0xffc,%eax
    bdcc:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 此时size是释放的页表个数,即页目录项数,而dir是起始目录项指针.现在开始循环操作页目录项,依次释放每个页表中的页表项.如果当前目录项无效(
	// P位=0),表示该目录项没有使用(对应的页表不存在),则继续处理下一个页表项.否则从目录项中取出页表地址pg_table,并对该页表中的1024个表项
	// 进行处理,释放有效页表(P位=1)对应的物理内存页面,或者从交换设备中释放无效页表项(P位=0)对应的页面,即释放交换设备中对应的内存页面(因为
	// 页面可能已经交换出去).然后把该页表项清零,并继续处理下一页表项.当一个页表所有表项都处理完毕就释放该页表自身占据的内存页面,并继续处理下
	// 一页目录项.最后刷新页变换高速缓冲,并返回0.
	for ( ; size-- > 0 ; dir++) {
    bdd0:	e9 b5 00 00 00       	jmp    be8a <free_page_tables+0x111>
		// 如果该目录项不存在页表项，则直接跳过该页表项
		if (!(1 & *dir))
    bdd5:	8b 44 24 08          	mov    0x8(%esp),%eax
    bdd9:	8b 00                	mov    (%eax),%eax
    bddb:	83 e0 01             	and    $0x1,%eax
    bdde:	85 c0                	test   %eax,%eax
    bde0:	0f 84 9e 00 00 00    	je     be84 <free_page_tables+0x10b>
			continue;
		pg_table = (unsigned long *) (0xfffff000 & *dir);		// 取页表地址.
    bde6:	8b 44 24 08          	mov    0x8(%esp),%eax
    bdea:	8b 00                	mov    (%eax),%eax
    bdec:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    bdf1:	89 44 24 0c          	mov    %eax,0xc(%esp)
		for (nr = 0 ; nr < 1024 ; nr++) {
    bdf5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
    bdfc:	00 
    bdfd:	eb 58                	jmp    be57 <free_page_tables+0xde>
			if (*pg_table) {									// 若所指页表项内容不为0,则若该项有效,则释放对应面.
    bdff:	8b 44 24 0c          	mov    0xc(%esp),%eax
    be03:	8b 00                	mov    (%eax),%eax
    be05:	85 c0                	test   %eax,%eax
    be07:	74 44                	je     be4d <free_page_tables+0xd4>
				if (1 & *pg_table)
    be09:	8b 44 24 0c          	mov    0xc(%esp),%eax
    be0d:	8b 00                	mov    (%eax),%eax
    be0f:	83 e0 01             	and    $0x1,%eax
    be12:	85 c0                	test   %eax,%eax
    be14:	74 19                	je     be2f <free_page_tables+0xb6>
					free_page(0xfffff000 & *pg_table);
    be16:	8b 44 24 0c          	mov    0xc(%esp),%eax
    be1a:	8b 00                	mov    (%eax),%eax
    be1c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    be21:	83 ec 0c             	sub    $0xc,%esp
    be24:	50                   	push   %eax
    be25:	e8 d5 fe ff ff       	call   bcff <free_page>
    be2a:	83 c4 10             	add    $0x10,%esp
    be2d:	eb 14                	jmp    be43 <free_page_tables+0xca>
				else											// 否则释放交换设备中对应页.
					swap_free(*pg_table >> 1);
    be2f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    be33:	8b 00                	mov    (%eax),%eax
    be35:	d1 e8                	shr    %eax
    be37:	83 ec 0c             	sub    $0xc,%esp
    be3a:	50                   	push   %eax
    be3b:	e8 f6 0e 00 00       	call   cd36 <swap_free>
    be40:	83 c4 10             	add    $0x10,%esp
				*pg_table = 0;									// 该页表项内容清零.
    be43:	8b 44 24 0c          	mov    0xc(%esp),%eax
    be47:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			}
			pg_table++;											//指向页表中下一项.
    be4d:	83 44 24 0c 04       	addl   $0x4,0xc(%esp)
	for ( ; size-- > 0 ; dir++) {
		// 如果该目录项不存在页表项，则直接跳过该页表项
		if (!(1 & *dir))
			continue;
		pg_table = (unsigned long *) (0xfffff000 & *dir);		// 取页表地址.
		for (nr = 0 ; nr < 1024 ; nr++) {
    be52:	83 44 24 04 01       	addl   $0x1,0x4(%esp)
    be57:	81 7c 24 04 ff 03 00 	cmpl   $0x3ff,0x4(%esp)
    be5e:	00 
    be5f:	76 9e                	jbe    bdff <free_page_tables+0x86>
					swap_free(*pg_table >> 1);
				*pg_table = 0;									// 该页表项内容清零.
			}
			pg_table++;											//指向页表中下一项.
		}
		free_page(0xfffff000 & *dir);							// 释放该页表所占内存页面.
    be61:	8b 44 24 08          	mov    0x8(%esp),%eax
    be65:	8b 00                	mov    (%eax),%eax
    be67:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    be6c:	83 ec 0c             	sub    $0xc,%esp
    be6f:	50                   	push   %eax
    be70:	e8 8a fe ff ff       	call   bcff <free_page>
    be75:	83 c4 10             	add    $0x10,%esp
		*dir = 0;												// 对应页表的目录项清零.
    be78:	8b 44 24 08          	mov    0x8(%esp),%eax
    be7c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    be82:	eb 01                	jmp    be85 <free_page_tables+0x10c>
	// 页面可能已经交换出去).然后把该页表项清零,并继续处理下一页表项.当一个页表所有表项都处理完毕就释放该页表自身占据的内存页面,并继续处理下
	// 一页目录项.最后刷新页变换高速缓冲,并返回0.
	for ( ; size-- > 0 ; dir++) {
		// 如果该目录项不存在页表项，则直接跳过该页表项
		if (!(1 & *dir))
			continue;
    be84:	90                   	nop
	// 此时size是释放的页表个数,即页目录项数,而dir是起始目录项指针.现在开始循环操作页目录项,依次释放每个页表中的页表项.如果当前目录项无效(
	// P位=0),表示该目录项没有使用(对应的页表不存在),则继续处理下一个页表项.否则从目录项中取出页表地址pg_table,并对该页表中的1024个表项
	// 进行处理,释放有效页表(P位=1)对应的物理内存页面,或者从交换设备中释放无效页表项(P位=0)对应的页面,即释放交换设备中对应的内存页面(因为
	// 页面可能已经交换出去).然后把该页表项清零,并继续处理下一页表项.当一个页表所有表项都处理完毕就释放该页表自身占据的内存页面,并继续处理下
	// 一页目录项.最后刷新页变换高速缓冲,并返回0.
	for ( ; size-- > 0 ; dir++) {
    be85:	83 44 24 08 04       	addl   $0x4,0x8(%esp)
    be8a:	8b 44 24 24          	mov    0x24(%esp),%eax
    be8e:	8d 50 ff             	lea    -0x1(%eax),%edx
    be91:	89 54 24 24          	mov    %edx,0x24(%esp)
    be95:	85 c0                	test   %eax,%eax
    be97:	0f 85 38 ff ff ff    	jne    bdd5 <free_page_tables+0x5c>
			pg_table++;											//指向页表中下一项.
		}
		free_page(0xfffff000 & *dir);							// 释放该页表所占内存页面.
		*dir = 0;												// 对应页表的目录项清零.
	}
	invalidate();												// 刷新CPU页变换高速缓冲.
    be9d:	b8 00 00 00 00       	mov    $0x0,%eax
    bea2:	0f 22 d8             	mov    %eax,%cr3
	return 0;
    bea5:	b8 00 00 00 00       	mov    $0x0,%eax
}
    beaa:	83 c4 1c             	add    $0x1c,%esp
    bead:	c3                   	ret    

0000beae <copy_page_tables>:
// 复制指定线性地址和长度内存对应的页目录项和页表项,从而被复制的页目录和页表对应的原物理内存页面区被两套页表映射而共享使用.复制时,需申请
// 新页面来存放新页表,原物理内存区将被共享.此后两个进程(父进程和其子进程)将共享内存区,直到有一个进程执行写操作时,内核才会为写操作进程分配
// 新的内存页(写时复制机制).
// 参数from,to是线性地址,size是需要复制(共享)的内存长度,单位是字节.
int copy_page_tables(unsigned long from, unsigned long to, long size)
{
    beae:	83 ec 2c             	sub    $0x2c,%esp
	unsigned long nr;

	// 首先检测参数给出的源地址from和目的地址to的有效性.源地址和目的地址都需要在4MB内存边界地址上.否则出错死机.作这样的要求是因为一个页表的
	// 1024项可管理4MB内存.源地址from和目的地址to只有满足这个要求才能保证从一个页表的第1项开始复制页表项,并且新页表最初所有项都是有效的.然后
	// 取得源地址和目的地址的起始目录项指针(from_dir和do_dir).再根据参数给出的长度size计算要复制的内存块占用的页表数(即目录项数)
	if ((from & 0x3fffff) || (to & 0x3fffff))
    beb1:	8b 44 24 30          	mov    0x30(%esp),%eax
    beb5:	25 ff ff 3f 00       	and    $0x3fffff,%eax
    beba:	85 c0                	test   %eax,%eax
    bebc:	75 0d                	jne    becb <copy_page_tables+0x1d>
    bebe:	8b 44 24 34          	mov    0x34(%esp),%eax
    bec2:	25 ff ff 3f 00       	and    $0x3fffff,%eax
    bec7:	85 c0                	test   %eax,%eax
    bec9:	74 10                	je     bedb <copy_page_tables+0x2d>
		panic("copy_page_tables called with wrong alignment");
    becb:	83 ec 0c             	sub    $0xc,%esp
    bece:	68 08 35 02 00       	push   $0x23508
    bed3:	e8 30 cd ff ff       	call   8c08 <panic>
    bed8:	83 c4 10             	add    $0x10,%esp
	from_dir = (unsigned long *) ((from >> 20) & 0xffc); 				/* _pg_dir = 0 */
    bedb:	8b 44 24 30          	mov    0x30(%esp),%eax
    bedf:	c1 e8 14             	shr    $0x14,%eax
    bee2:	25 fc 0f 00 00       	and    $0xffc,%eax
    bee7:	89 44 24 14          	mov    %eax,0x14(%esp)
	to_dir = (unsigned long *) ((to >> 20) & 0xffc);
    beeb:	8b 44 24 34          	mov    0x34(%esp),%eax
    beef:	c1 e8 14             	shr    $0x14,%eax
    bef2:	25 fc 0f 00 00       	and    $0xffc,%eax
    bef7:	89 44 24 10          	mov    %eax,0x10(%esp)
	size = ((unsigned) (size + 0x3fffff)) >> 22;
    befb:	8b 44 24 38          	mov    0x38(%esp),%eax
    beff:	05 ff ff 3f 00       	add    $0x3fffff,%eax
    bf04:	c1 e8 16             	shr    $0x16,%eax
    bf07:	89 44 24 38          	mov    %eax,0x38(%esp)
	// 在得到了源起始目录项指针from_dir和目的起始目录项指针to_dir以及需要复制的页表个数size后,下面开始对每个页目录项依次申请1页内存来保存对应的面表,
	// 并且开始页表项复制操作.如果目的目录项指定的页表已经存在(P=1),则出错死机.如果源目录项无效,即指定的页表不存在(P=0),则继续循环处理下一个页目录项.
	for( ; size-- > 0 ; from_dir++, to_dir++) {
    bf0b:	e9 6c 01 00 00       	jmp    c07c <copy_page_tables+0x1ce>
		if (1 & *to_dir)
    bf10:	8b 44 24 10          	mov    0x10(%esp),%eax
    bf14:	8b 00                	mov    (%eax),%eax
    bf16:	83 e0 01             	and    $0x1,%eax
    bf19:	85 c0                	test   %eax,%eax
    bf1b:	74 10                	je     bf2d <copy_page_tables+0x7f>
			panic("copy_page_tables: already exist");
    bf1d:	83 ec 0c             	sub    $0xc,%esp
    bf20:	68 38 35 02 00       	push   $0x23538
    bf25:	e8 de cc ff ff       	call   8c08 <panic>
    bf2a:	83 c4 10             	add    $0x10,%esp
		if (!(1 & *from_dir))
    bf2d:	8b 44 24 14          	mov    0x14(%esp),%eax
    bf31:	8b 00                	mov    (%eax),%eax
    bf33:	83 e0 01             	and    $0x1,%eax
    bf36:	85 c0                	test   %eax,%eax
    bf38:	0f 84 33 01 00 00    	je     c071 <copy_page_tables+0x1c3>
			continue;
		// 在验证了当前源目录项和目的项正常之后,取源目录项中页表地址from_page_table.为了保存目的目录项对应的页表,需要在主内存区中申请1页空闲内存页.如果取
		// 空闲页面函数get_free_page()返回0,则说明没有申请到空闲内存页面,可能是内存不够.于是返回-1值退出.
		from_page_table = (unsigned long *) (0xfffff000 & *from_dir);
    bf3e:	8b 44 24 14          	mov    0x14(%esp),%eax
    bf42:	8b 00                	mov    (%eax),%eax
    bf44:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    bf49:	89 44 24 1c          	mov    %eax,0x1c(%esp)
		if (!(to_page_table = (unsigned long *) get_free_page()))
    bf4d:	e8 3c 11 00 00       	call   d08e <get_free_page>
    bf52:	89 44 24 18          	mov    %eax,0x18(%esp)
    bf56:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    bf5b:	75 0a                	jne    bf67 <copy_page_tables+0xb9>
			return -1;													/* Out of memory, see freeing */
    bf5d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    bf62:	e9 35 01 00 00       	jmp    c09c <copy_page_tables+0x1ee>
		// 否则我们设置目的目录项信息,把最后3位置位,即当前目的目录项"或"上7,表示对应页表映射的内存页面是用户级的,并且可读写,存在(User,R/W,Present).(如果
		// U/S位是0,则R/W就没有作用.如果U/S是1,而R/W是0,那么运行在用户层的代码就只能读页面.如果U/S和R/W都置位,则就有读写的权限).
		*to_dir = ((unsigned long) to_page_table) | 7;
    bf67:	8b 44 24 18          	mov    0x18(%esp),%eax
    bf6b:	83 c8 07             	or     $0x7,%eax
    bf6e:	89 c2                	mov    %eax,%edx
    bf70:	8b 44 24 10          	mov    0x10(%esp),%eax
    bf74:	89 10                	mov    %edx,(%eax)
		// 然后针对当前处理的页目录项对应的页表,设置需要复制的页面项数.如果是在内核空间,则仅需复制头160页对应的页表项(nr = 160),
		// 对应于开始640KB物理内存.否则需要复制一个页表中的所有1024个页表项(nr= 1024),可映射4MB物理内存.
		nr = (from == 0) ? 0xA0 : 1024;
    bf76:	83 7c 24 30 00       	cmpl   $0x0,0x30(%esp)
    bf7b:	75 07                	jne    bf84 <copy_page_tables+0xd6>
    bf7d:	b8 a0 00 00 00       	mov    $0xa0,%eax
    bf82:	eb 05                	jmp    bf89 <copy_page_tables+0xdb>
    bf84:	b8 00 04 00 00       	mov    $0x400,%eax
    bf89:	89 44 24 0c          	mov    %eax,0xc(%esp)
		// 此时对于当前页表,开始循环复制指定的nr个内存页面表项.先取出源页表项内容,如果当前源页面没有使用(项内容为0),则不用复制该表项,继续处理下一项.
		for ( ; nr-- > 0 ; from_page_table++, to_page_table++) {
    bf8d:	e9 ca 00 00 00       	jmp    c05c <copy_page_tables+0x1ae>
			this_page = *from_page_table;
    bf92:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    bf96:	8b 00                	mov    (%eax),%eax
    bf98:	89 44 24 08          	mov    %eax,0x8(%esp)
			// 如果源页表不存在，则直接拷贝下一页表
			if (!this_page)
    bf9c:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    bfa1:	0f 84 aa 00 00 00    	je     c051 <copy_page_tables+0x1a3>
				continue;
			// 如果该表项有内容,但是其存在位P=0,则该表项对应的页面可能在交换设备中.于是先申请1页内存,并从交换设备中读入该页面(若交换设备中有的话).然后将该页表项复制到
			// 目的页表项中.并修改源页表项内容指向该新申请的内存页.
			if (!(1 & this_page)) {
    bfa7:	8b 44 24 08          	mov    0x8(%esp),%eax
    bfab:	83 e0 01             	and    $0x1,%eax
    bfae:	85 c0                	test   %eax,%eax
    bfb0:	75 53                	jne    c005 <copy_page_tables+0x157>
				// 申请一页新的内存然后将交换设备中的数据读取到该页面中
				if (!(new_page = get_free_page()))
    bfb2:	e8 d7 10 00 00       	call   d08e <get_free_page>
    bfb7:	89 44 24 04          	mov    %eax,0x4(%esp)
    bfbb:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    bfc0:	75 0a                	jne    bfcc <copy_page_tables+0x11e>
					return -1;
    bfc2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    bfc7:	e9 d0 00 00 00       	jmp    c09c <copy_page_tables+0x1ee>
				// 从交换设备中将页面读取出来
				read_swap_page(this_page >> 1, (char *) new_page);
    bfcc:	8b 54 24 04          	mov    0x4(%esp),%edx
    bfd0:	8b 44 24 08          	mov    0x8(%esp),%eax
    bfd4:	d1 e8                	shr    %eax
    bfd6:	89 c1                	mov    %eax,%ecx
    bfd8:	a1 a0 01 03 00       	mov    0x301a0,%eax
    bfdd:	52                   	push   %edx
    bfde:	51                   	push   %ecx
    bfdf:	50                   	push   %eax
    bfe0:	6a 00                	push   $0x0
    bfe2:	e8 d5 a8 00 00       	call   168bc <ll_rw_page>
    bfe7:	83 c4 10             	add    $0x10,%esp
				// 目的页表项指向源页表项值
				*to_page_table = this_page;
    bfea:	8b 44 24 18          	mov    0x18(%esp),%eax
    bfee:	8b 54 24 08          	mov    0x8(%esp),%edx
    bff2:	89 10                	mov    %edx,(%eax)
				// 并修改源页表项内容指向该新申请的内存页,并设置表项标志为"页面脏"加上7
				*from_page_table = new_page | (PAGE_DIRTY | 7);
    bff4:	8b 44 24 04          	mov    0x4(%esp),%eax
    bff8:	83 c8 47             	or     $0x47,%eax
    bffb:	89 c2                	mov    %eax,%edx
    bffd:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c001:	89 10                	mov    %edx,(%eax)
				// 继续处理下一页表项
				continue;
    c003:	eb 4d                	jmp    c052 <copy_page_tables+0x1a4>
			}
			// 复位页表项中R/W标志(位1置0),即让页表项对应的内存页面只读,然后将该页表项复制到目的页表中
			this_page &= ~2;
    c005:	83 64 24 08 fd       	andl   $0xfffffffd,0x8(%esp)
			*to_page_table = this_page;
    c00a:	8b 44 24 18          	mov    0x18(%esp),%eax
    c00e:	8b 54 24 08          	mov    0x8(%esp),%edx
    c012:	89 10                	mov    %edx,(%eax)
			// 的页面,说明是内核页面,因此不需要对mem_map[]进行设置.因为mem_map[]仅用于管理主内存区中的页面使用请问.因此对于内核移动到任务0中并且调用fork()创建任务1时
			// (用于运行init()),由于此时复制的页面还仍然都在内核代码区域,因此以下判断中的语句不会执行,任务0的页面仍然可以随时读写.只有当调用fork()的父进程代码处于主内存
			// (页面位置大于1MB)时才会执行.这种情况需要在进程调用execve(),并装载执行了新程序代码时才会出现.
			// 157行语句含义是令源页表项所指内存页也为只读.因为现在开始已有两个进程共用内存区了.若其中1个进程需要进行操作,则可以通过页异常写保护处理为执行写操作的进程分配
			// 1页新空闲页面,也即进行写时复制(copy_on_write)操作.
			if (this_page > LOW_MEM) {
    c014:	81 7c 24 08 00 00 10 	cmpl   $0x100000,0x8(%esp)
    c01b:	00 
    c01c:	76 34                	jbe    c052 <copy_page_tables+0x1a4>
				*from_page_table = this_page;		// 令源页表项也只读.
    c01e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c022:	8b 54 24 08          	mov    0x8(%esp),%edx
    c026:	89 10                	mov    %edx,(%eax)
				this_page -= LOW_MEM;
    c028:	81 6c 24 08 00 00 10 	subl   $0x100000,0x8(%esp)
    c02f:	00 
				this_page >>= 12;
    c030:	c1 6c 24 08 0c       	shrl   $0xc,0x8(%esp)
				mem_map[this_page]++;
    c035:	8b 44 24 08          	mov    0x8(%esp),%eax
    c039:	05 a0 f2 02 00       	add    $0x2f2a0,%eax
    c03e:	0f b6 00             	movzbl (%eax),%eax
    c041:	8d 50 01             	lea    0x1(%eax),%edx
    c044:	8b 44 24 08          	mov    0x8(%esp),%eax
    c048:	05 a0 f2 02 00       	add    $0x2f2a0,%eax
    c04d:	88 10                	mov    %dl,(%eax)
    c04f:	eb 01                	jmp    c052 <copy_page_tables+0x1a4>
		// 此时对于当前页表,开始循环复制指定的nr个内存页面表项.先取出源页表项内容,如果当前源页面没有使用(项内容为0),则不用复制该表项,继续处理下一项.
		for ( ; nr-- > 0 ; from_page_table++, to_page_table++) {
			this_page = *from_page_table;
			// 如果源页表不存在，则直接拷贝下一页表
			if (!this_page)
				continue;
    c051:	90                   	nop
		*to_dir = ((unsigned long) to_page_table) | 7;
		// 然后针对当前处理的页目录项对应的页表,设置需要复制的页面项数.如果是在内核空间,则仅需复制头160页对应的页表项(nr = 160),
		// 对应于开始640KB物理内存.否则需要复制一个页表中的所有1024个页表项(nr= 1024),可映射4MB物理内存.
		nr = (from == 0) ? 0xA0 : 1024;
		// 此时对于当前页表,开始循环复制指定的nr个内存页面表项.先取出源页表项内容,如果当前源页面没有使用(项内容为0),则不用复制该表项,继续处理下一项.
		for ( ; nr-- > 0 ; from_page_table++, to_page_table++) {
    c052:	83 44 24 1c 04       	addl   $0x4,0x1c(%esp)
    c057:	83 44 24 18 04       	addl   $0x4,0x18(%esp)
    c05c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c060:	8d 50 ff             	lea    -0x1(%eax),%edx
    c063:	89 54 24 0c          	mov    %edx,0xc(%esp)
    c067:	85 c0                	test   %eax,%eax
    c069:	0f 85 23 ff ff ff    	jne    bf92 <copy_page_tables+0xe4>
    c06f:	eb 01                	jmp    c072 <copy_page_tables+0x1c4>
	// 并且开始页表项复制操作.如果目的目录项指定的页表已经存在(P=1),则出错死机.如果源目录项无效,即指定的页表不存在(P=0),则继续循环处理下一个页目录项.
	for( ; size-- > 0 ; from_dir++, to_dir++) {
		if (1 & *to_dir)
			panic("copy_page_tables: already exist");
		if (!(1 & *from_dir))
			continue;
    c071:	90                   	nop
	from_dir = (unsigned long *) ((from >> 20) & 0xffc); 				/* _pg_dir = 0 */
	to_dir = (unsigned long *) ((to >> 20) & 0xffc);
	size = ((unsigned) (size + 0x3fffff)) >> 22;
	// 在得到了源起始目录项指针from_dir和目的起始目录项指针to_dir以及需要复制的页表个数size后,下面开始对每个页目录项依次申请1页内存来保存对应的面表,
	// 并且开始页表项复制操作.如果目的目录项指定的页表已经存在(P=1),则出错死机.如果源目录项无效,即指定的页表不存在(P=0),则继续循环处理下一个页目录项.
	for( ; size-- > 0 ; from_dir++, to_dir++) {
    c072:	83 44 24 14 04       	addl   $0x4,0x14(%esp)
    c077:	83 44 24 10 04       	addl   $0x4,0x10(%esp)
    c07c:	8b 44 24 38          	mov    0x38(%esp),%eax
    c080:	8d 50 ff             	lea    -0x1(%eax),%edx
    c083:	89 54 24 38          	mov    %edx,0x38(%esp)
    c087:	85 c0                	test   %eax,%eax
    c089:	0f 8f 81 fe ff ff    	jg     bf10 <copy_page_tables+0x62>
				this_page >>= 12;
				mem_map[this_page]++;
			}
        }
    }
	invalidate();									// 刷新页变换高速缓冲.
    c08f:	b8 00 00 00 00       	mov    $0x0,%eax
    c094:	0f 22 d8             	mov    %eax,%cr3
	return 0;
    c097:	b8 00 00 00 00       	mov    $0x0,%eax
}
    c09c:	83 c4 2c             	add    $0x2c,%esp
    c09f:	c3                   	ret    

0000c0a0 <put_page>:
// 或者说是把线性地址空间中指定地址address处的页面映射到主内存区页面page上.主要工作是在相关页目录项和页表项中设置指定页面的信息.若成功则返回物理页面地址.
// 在处理缺页异常的C函数do_no_page()中会调用此函数.对于缺页引起的异常,由于任何缺页缘故而对页表作修改时,并不需要刷新CPU的页变换缓冲(或称Translation Lookaside
// Buffer,TLB),即使页表项中标志P被从0修改成1.因为无效页项不会被缓冲,因此当修改了一个无效的页表项时不需要刷新.在此就表现为不用调用Invalidate()函数.
// 参数page是分配的主内存区中某一页面(页帧,页框)的指针;address是线性地址.
static unsigned long put_page(unsigned long page, unsigned long address)
{
    c0a0:	83 ec 1c             	sub    $0x1c,%esp
	/* 注意!!!这里使用了页目录表基地址pg_dir=0的条件 */

	// 首先判断参数给定物理内存页面page的有效性.如果该页面位置低于LOW_MEM(1MB)或超出系统实际含有内存高端HIGH_MEMORY,则发出警告.LOW_MEM是主内存区可能有的
	// 最小起始位置.当系统后果内存小于或等于6MB时,主内存区始于LOW_MEM处.再查看一下该page页面是不已经申请的页面,即判断其在内存页面映射字节图mem_map[]中相应
	// 字节是否以置位.若没有则需发出警告.
	if (page < LOW_MEM || page >= HIGH_MEMORY)
    c0a3:	81 7c 24 20 ff ff 0f 	cmpl   $0xfffff,0x20(%esp)
    c0aa:	00 
    c0ab:	76 0b                	jbe    c0b8 <put_page+0x18>
    c0ad:	a1 80 f2 02 00       	mov    0x2f280,%eax
    c0b2:	39 44 24 20          	cmp    %eax,0x20(%esp)
    c0b6:	72 18                	jb     c0d0 <put_page+0x30>
		printk("Trying to put page %p at %p\n", page, address);
    c0b8:	83 ec 04             	sub    $0x4,%esp
    c0bb:	ff 74 24 28          	pushl  0x28(%esp)
    c0bf:	ff 74 24 28          	pushl  0x28(%esp)
    c0c3:	68 58 35 02 00       	push   $0x23558
    c0c8:	e8 7a cb ff ff       	call   8c47 <printk>
    c0cd:	83 c4 10             	add    $0x10,%esp
	if (mem_map[(page - LOW_MEM) >> 12] != 1)
    c0d0:	8b 44 24 20          	mov    0x20(%esp),%eax
    c0d4:	2d 00 00 10 00       	sub    $0x100000,%eax
    c0d9:	c1 e8 0c             	shr    $0xc,%eax
    c0dc:	0f b6 80 a0 f2 02 00 	movzbl 0x2f2a0(%eax),%eax
    c0e3:	3c 01                	cmp    $0x1,%al
    c0e5:	74 18                	je     c0ff <put_page+0x5f>
		printk("mem_map disagrees with %p at %p\n", page, address);
    c0e7:	83 ec 04             	sub    $0x4,%esp
    c0ea:	ff 74 24 28          	pushl  0x28(%esp)
    c0ee:	ff 74 24 28          	pushl  0x28(%esp)
    c0f2:	68 78 35 02 00       	push   $0x23578
    c0f7:	e8 4b cb ff ff       	call   8c47 <printk>
    c0fc:	83 c4 10             	add    $0x10,%esp
	// 然后根据参数指定的线性地址address计算其在页目录表中对应的目录项指针,并从中取得一级页表地址.如果该目录项有效(P=1),即指定的页表在内存中,则从中取得指定页表
	// 地址放到page_table变量中.否则申请一空闲页面给页表使用,并在对应目录项中置相应标志(7 - User,U/S,R/W).然后将该页表地址放到page_table变量中.
	page_table = (unsigned long *) ((address >> 20) & 0xffc);
    c0ff:	8b 44 24 24          	mov    0x24(%esp),%eax
    c103:	c1 e8 14             	shr    $0x14,%eax
    c106:	25 fc 0f 00 00       	and    $0xffc,%eax
    c10b:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if ((*page_table) & 1)
    c10f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c113:	8b 00                	mov    (%eax),%eax
    c115:	83 e0 01             	and    $0x1,%eax
    c118:	85 c0                	test   %eax,%eax
    c11a:	74 11                	je     c12d <put_page+0x8d>
		page_table = (unsigned long *) (0xfffff000 & *page_table);
    c11c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c120:	8b 00                	mov    (%eax),%eax
    c122:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    c127:	89 44 24 0c          	mov    %eax,0xc(%esp)
    c12b:	eb 2e                	jmp    c15b <put_page+0xbb>
	else {
		if (!(tmp = get_free_page()))
    c12d:	e8 5c 0f 00 00       	call   d08e <get_free_page>
    c132:	89 44 24 08          	mov    %eax,0x8(%esp)
    c136:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    c13b:	75 07                	jne    c144 <put_page+0xa4>
			return 0;
    c13d:	b8 00 00 00 00       	mov    $0x0,%eax
    c142:	eb 3d                	jmp    c181 <put_page+0xe1>
		*page_table = tmp | 7;
    c144:	8b 44 24 08          	mov    0x8(%esp),%eax
    c148:	83 c8 07             	or     $0x7,%eax
    c14b:	89 c2                	mov    %eax,%edx
    c14d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c151:	89 10                	mov    %edx,(%eax)
		page_table = (unsigned long *) tmp;
    c153:	8b 44 24 08          	mov    0x8(%esp),%eax
    c157:	89 44 24 0c          	mov    %eax,0xc(%esp)
	}
	// 最后在找到的页表page_table中设置相关页表项内容,即把物理页面page的地址填入表项同时置位3个标志(U/S,W/R,P).该页表项在页表中的索引值等于线性地址位21~位12
	// 组成的10位的值.每个页表共可有1024项(0~0x3ff).
	page_table[(address >> 12) & 0x3ff] = page | 7;
    c15b:	8b 44 24 24          	mov    0x24(%esp),%eax
    c15f:	c1 e8 0c             	shr    $0xc,%eax
    c162:	25 ff 03 00 00       	and    $0x3ff,%eax
    c167:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    c16e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c172:	01 d0                	add    %edx,%eax
    c174:	8b 54 24 20          	mov    0x20(%esp),%edx
    c178:	83 ca 07             	or     $0x7,%edx
    c17b:	89 10                	mov    %edx,(%eax)
	/* no need for invalidate */
	/* 不需要刷新页变换高速缓冲 */
	return page;					// 返回物理页面地址.
    c17d:	8b 44 24 20          	mov    0x20(%esp),%eax
}
    c181:	83 c4 1c             	add    $0x1c,%esp
    c184:	c3                   	ret    

0000c185 <put_dirty_page>:
 * 已修改状态标志.因而下面就有了与上面相同的函数,但是该函数在放置页面时会把页面标志为已修改状态.
 */
// 把一内容已修改过的物理内存页面映射到线性地址空间指定处.
// 该函数与一个函数put_page()几乎完全一样,除了本函数在第223行设置页表项内容时,同时还设置了页面已修改标志(位6,PAGE_DIRTY).
unsigned long put_dirty_page(unsigned long page, unsigned long address)
{
    c185:	83 ec 1c             	sub    $0x1c,%esp
	/* NOTE !!! This uses the fact that _pg_dir=0 */

	// 首先判断参数给定物理内存页面page的有效性.如果该页面位置低于LOW_MEM(1MB)或超出系统实际含有内存高端HIGH_MEMORY,则发出警告.LOW_MEM是主内存区可能有的
	// 最小起始位置.当系统后果内存小于或等于6MB时,主内存区始于LOW_MEM处.再查看一下该page页面是不已经申请的页面,即判断其在内存页面映射字节图mem_map[]中相应
	// 字节是否以置位.若没有则需发出警告.
	if (page < LOW_MEM || page >= HIGH_MEMORY)
    c188:	81 7c 24 20 ff ff 0f 	cmpl   $0xfffff,0x20(%esp)
    c18f:	00 
    c190:	76 0b                	jbe    c19d <put_dirty_page+0x18>
    c192:	a1 80 f2 02 00       	mov    0x2f280,%eax
    c197:	39 44 24 20          	cmp    %eax,0x20(%esp)
    c19b:	72 18                	jb     c1b5 <put_dirty_page+0x30>
		printk("Trying to put page %p at %p\n", page, address);
    c19d:	83 ec 04             	sub    $0x4,%esp
    c1a0:	ff 74 24 28          	pushl  0x28(%esp)
    c1a4:	ff 74 24 28          	pushl  0x28(%esp)
    c1a8:	68 58 35 02 00       	push   $0x23558
    c1ad:	e8 95 ca ff ff       	call   8c47 <printk>
    c1b2:	83 c4 10             	add    $0x10,%esp
	if (mem_map[(page-LOW_MEM)>>12] != 1)
    c1b5:	8b 44 24 20          	mov    0x20(%esp),%eax
    c1b9:	2d 00 00 10 00       	sub    $0x100000,%eax
    c1be:	c1 e8 0c             	shr    $0xc,%eax
    c1c1:	0f b6 80 a0 f2 02 00 	movzbl 0x2f2a0(%eax),%eax
    c1c8:	3c 01                	cmp    $0x1,%al
    c1ca:	74 18                	je     c1e4 <put_dirty_page+0x5f>
		printk("mem_map disagrees with %p at %p\n", page, address);
    c1cc:	83 ec 04             	sub    $0x4,%esp
    c1cf:	ff 74 24 28          	pushl  0x28(%esp)
    c1d3:	ff 74 24 28          	pushl  0x28(%esp)
    c1d7:	68 78 35 02 00       	push   $0x23578
    c1dc:	e8 66 ca ff ff       	call   8c47 <printk>
    c1e1:	83 c4 10             	add    $0x10,%esp
	// 然后根据参数指定的线性地址address计算其在页目录表中对应的目录项指针,并从中取得一级页表地址.如果该目录项有效(P=1),即指定的页表在内存中,则从中取得指定页表
	// 地址放到page_table变量中.否则申请一空闲页面给页表使用,并在对应目录项中置相应标志(7 - User,U/S,R/W).然后将该页表地址放到page_table变量中.
	page_table = (unsigned long *) ((address >> 20) & 0xffc);
    c1e4:	8b 44 24 24          	mov    0x24(%esp),%eax
    c1e8:	c1 e8 14             	shr    $0x14,%eax
    c1eb:	25 fc 0f 00 00       	and    $0xffc,%eax
    c1f0:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if ((*page_table) & 1)
    c1f4:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c1f8:	8b 00                	mov    (%eax),%eax
    c1fa:	83 e0 01             	and    $0x1,%eax
    c1fd:	85 c0                	test   %eax,%eax
    c1ff:	74 11                	je     c212 <put_dirty_page+0x8d>
		page_table = (unsigned long *) (0xfffff000 & *page_table);
    c201:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c205:	8b 00                	mov    (%eax),%eax
    c207:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    c20c:	89 44 24 0c          	mov    %eax,0xc(%esp)
    c210:	eb 2e                	jmp    c240 <put_dirty_page+0xbb>
	else {
		if (!(tmp = get_free_page()))
    c212:	e8 77 0e 00 00       	call   d08e <get_free_page>
    c217:	89 44 24 08          	mov    %eax,0x8(%esp)
    c21b:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    c220:	75 07                	jne    c229 <put_dirty_page+0xa4>
			return 0;
    c222:	b8 00 00 00 00       	mov    $0x0,%eax
    c227:	eb 3d                	jmp    c266 <put_dirty_page+0xe1>
		*page_table = tmp | 7;
    c229:	8b 44 24 08          	mov    0x8(%esp),%eax
    c22d:	83 c8 07             	or     $0x7,%eax
    c230:	89 c2                	mov    %eax,%edx
    c232:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c236:	89 10                	mov    %edx,(%eax)
		page_table = (unsigned long *) tmp;
    c238:	8b 44 24 08          	mov    0x8(%esp),%eax
    c23c:	89 44 24 0c          	mov    %eax,0xc(%esp)
	}
	// 最后在找到的页表page_table中设置相关页表项内容,即把物理页面page的地址填入表项同时置位3个标志(U/S,W/R,P).该页表项在页表中的索引值等于线性地址位21~位12
	// 组成的10位的值.每个页表共可有1024项(0~0x3ff).
	page_table[(address >> 12) & 0x3ff] = page | (PAGE_DIRTY | 7);
    c240:	8b 44 24 24          	mov    0x24(%esp),%eax
    c244:	c1 e8 0c             	shr    $0xc,%eax
    c247:	25 ff 03 00 00       	and    $0x3ff,%eax
    c24c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    c253:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c257:	01 d0                	add    %edx,%eax
    c259:	8b 54 24 20          	mov    0x20(%esp),%edx
    c25d:	83 ca 47             	or     $0x47,%edx
    c260:	89 10                	mov    %edx,(%eax)
	/* no need for invalidate */
	/* 不需要刷新页变换高速缓冲 */
	return page;
    c262:	8b 44 24 20          	mov    0x20(%esp),%eax
}
    c266:	83 c4 1c             	add    $0x1c,%esp
    c269:	c3                   	ret    

0000c26a <un_wp_page>:
// 用于页异常中断过程中写保护异常的处理(写时复制).在内核创建进程时,新进程与父进程被设置成共享代码和数据内存页面,并且所有这些页面均被设置成只读页面.而当新进程或原
// 进程需要向内存页面写数据时,CPU就会检测到这个情况并产生页面写保护异常.于是在这个函数中内核就会首先判断要写的页面是否被共享.若没有则把页面设置成可写然后退出.若页面
// 处于共享状态,则要重新申请一新页面并复制被写页面内容,以供写进程单独使用.共享被取消.
// 输入参数为页面表项指针,是物理地址.[un_wp_page -- Un-Write Protect Page]
void un_wp_page(unsigned long * table_entry)
{
    c26a:	57                   	push   %edi
    c26b:	56                   	push   %esi
    c26c:	83 ec 14             	sub    $0x14,%esp
	unsigned long old_page, new_page;

	// 首先取参数指定的页表项中物理页面位置(地址)并判断该页面是不是共享页面.如果原页面地址大于内存低端LOW_MEM(表示在主内存区中),并且其在页面映射字节图数组中值为1(表示
	// 页面仅被引用1次,页面没有被共享),则在该页面的页表项中 R/W标志(可写),并刷新页变换高速缓冲,然后返回.即如果该内存页面此时只被一个进程使用,并且不是内核中的进程,就直接
	// 把属性改为可写即可,不必重新申请一个新页面.
	old_page = 0xfffff000 & *table_entry;				// 取指定页表项中物理页面地址.
    c26f:	8b 44 24 20          	mov    0x20(%esp),%eax
    c273:	8b 00                	mov    (%eax),%eax
    c275:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    c27a:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (old_page >= LOW_MEM && mem_map[MAP_NR(old_page)] == 1) {
    c27e:	81 7c 24 0c ff ff 0f 	cmpl   $0xfffff,0xc(%esp)
    c285:	00 
    c286:	76 32                	jbe    c2ba <un_wp_page+0x50>
    c288:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c28c:	2d 00 00 10 00       	sub    $0x100000,%eax
    c291:	c1 e8 0c             	shr    $0xc,%eax
    c294:	0f b6 80 a0 f2 02 00 	movzbl 0x2f2a0(%eax),%eax
    c29b:	3c 01                	cmp    $0x1,%al
    c29d:	75 1b                	jne    c2ba <un_wp_page+0x50>
		*table_entry |= 2;
    c29f:	8b 44 24 20          	mov    0x20(%esp),%eax
    c2a3:	8b 00                	mov    (%eax),%eax
    c2a5:	83 c8 02             	or     $0x2,%eax
    c2a8:	89 c2                	mov    %eax,%edx
    c2aa:	8b 44 24 20          	mov    0x20(%esp),%eax
    c2ae:	89 10                	mov    %edx,(%eax)
		invalidate();
    c2b0:	b8 00 00 00 00       	mov    $0x0,%eax
    c2b5:	0f 22 d8             	mov    %eax,%cr3
		return;
    c2b8:	eb 6a                	jmp    c324 <un_wp_page+0xba>
	}
	// 否则就需要在主内存区内申请一页空闲页面给执行写操作的进程单独使用,取消页面共享.如果原页面大于内存低端(则意味着mem_map[]>1,页面是共享的),则将原页面的页面映射字节数组
	// 值递减1.然后将指定页表项内容更新为新页面地址,并置可读写标志(U/S,R/W,P).在刷新页变换高速缓冲之后,最后将原页面内容复制到新页面.
	if (!(new_page = get_free_page()))
    c2ba:	e8 cf 0d 00 00       	call   d08e <get_free_page>
    c2bf:	89 44 24 08          	mov    %eax,0x8(%esp)
    c2c3:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    c2c8:	75 05                	jne    c2cf <un_wp_page+0x65>
		oom();											// 内存不够处理.
    c2ca:	e8 0b fa ff ff       	call   bcda <oom>
	if (old_page >= LOW_MEM)
    c2cf:	81 7c 24 0c ff ff 0f 	cmpl   $0xfffff,0xc(%esp)
    c2d6:	00 
    c2d7:	76 1c                	jbe    c2f5 <un_wp_page+0x8b>
		mem_map[MAP_NR(old_page)]--;
    c2d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c2dd:	2d 00 00 10 00       	sub    $0x100000,%eax
    c2e2:	c1 e8 0c             	shr    $0xc,%eax
    c2e5:	0f b6 90 a0 f2 02 00 	movzbl 0x2f2a0(%eax),%edx
    c2ec:	83 ea 01             	sub    $0x1,%edx
    c2ef:	88 90 a0 f2 02 00    	mov    %dl,0x2f2a0(%eax)
	copy_page(old_page, new_page);
    c2f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c2f9:	8b 54 24 08          	mov    0x8(%esp),%edx
    c2fd:	b9 00 04 00 00       	mov    $0x400,%ecx
    c302:	89 c6                	mov    %eax,%esi
    c304:	89 d7                	mov    %edx,%edi
    c306:	57                   	push   %edi
    c307:	56                   	push   %esi
    c308:	fc                   	cld    
    c309:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
    c30b:	5e                   	pop    %esi
    c30c:	5f                   	pop    %edi
	// 将新的页面设置为可读可写且存在
	*table_entry = new_page | 7;
    c30d:	8b 44 24 08          	mov    0x8(%esp),%eax
    c311:	83 c8 07             	or     $0x7,%eax
    c314:	89 c2                	mov    %eax,%edx
    c316:	8b 44 24 20          	mov    0x20(%esp),%eax
    c31a:	89 10                	mov    %edx,(%eax)
	// 刷新高速缓冲
	invalidate();
    c31c:	b8 00 00 00 00       	mov    $0x0,%eax
    c321:	0f 22 d8             	mov    %eax,%cr3
}
    c324:	83 c4 14             	add    $0x14,%esp
    c327:	5e                   	pop    %esi
    c328:	5f                   	pop    %edi
    c329:	c3                   	ret    

0000c32a <do_wp_page>:
// 执行写保护页面处理.
// 是写共享页面处理函数.是页异常中断处理过程中调用的C函数.在page.s程序中被调用.
// 函数参数error_code和address是进程在写写保护页面时由CPU产生异常而自动生成的.error_code指出出错类型;address是产生异常的页面
// 线性地址.写共享页面时需复制页面(写时复制).
void do_wp_page(unsigned long error_code, unsigned long address)
{
    c32a:	83 ec 0c             	sub    $0xc,%esp
	// 首先判断CPU控制寄存器CR2给出的引起页面异常的线性地址在什么范围中.如果address小于TASK_SIZE(0x4000000,即64MB),表示异常页面位置
	// 在内核或任务0和任务1所处的线性地址范围内,于是发出警告信息"内核范围内存被写保护";如果(address - 当前进程代码起始地址)大于一个进程的
	// 长度(64MB),表示address所指的线性地址不在引起异常的进程线性地址空间范围内,则在发出出错信息后退出.
	if (address < TASK_SIZE)
    c32d:	81 7c 24 14 ff ff ff 	cmpl   $0x3ffffff,0x14(%esp)
    c334:	03 
    c335:	77 10                	ja     c347 <do_wp_page+0x1d>
		printk("\n\rBAD! KERNEL MEMORY WP-ERR!\n\r");
    c337:	83 ec 0c             	sub    $0xc,%esp
    c33a:	68 9c 35 02 00       	push   $0x2359c
    c33f:	e8 03 c9 ff ff       	call   8c47 <printk>
    c344:	83 c4 10             	add    $0x10,%esp
	if (address - current->start_code > TASK_SIZE) {
    c347:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    c34c:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
    c352:	8b 54 24 14          	mov    0x14(%esp),%edx
    c356:	29 c2                	sub    %eax,%edx
    c358:	89 d0                	mov    %edx,%eax
    c35a:	3d 00 00 00 04       	cmp    $0x4000000,%eax
    c35f:	76 1d                	jbe    c37e <do_wp_page+0x54>
		printk("Bad things happen: page error in do_wp_page\n\r");
    c361:	83 ec 0c             	sub    $0xc,%esp
    c364:	68 bc 35 02 00       	push   $0x235bc
    c369:	e8 d9 c8 ff ff       	call   8c47 <printk>
    c36e:	83 c4 10             	add    $0x10,%esp
		do_exit(SIGSEGV);
    c371:	83 ec 0c             	sub    $0xc,%esp
    c374:	6a 0b                	push   $0xb
    c376:	e8 6f ea ff ff       	call   adea <do_exit>
    c37b:	83 c4 10             	add    $0x10,%esp
	// 目录项索引值中最后2位.因为只移动了20位,因此最后2位是页表索引的内容,应该屏蔽掉.而*((address>>20)&0xffc)则是取指定目录表项内容中对应页表
	// 的物理地址.最后与上0xffffff000用于屏蔽掉页目录项内容中的一些标志位(目录项低12位).直观表示为(0xffffff000 & *((unsigned long *) (((
	// address>>22) & 0x3ff)<<2))).3:由1中页表项在页表中偏移地址加上2中目录表项内容中对应页表的物理地址即可得到页表项的指针(物理地址).这里对
	// 共享的页面进行复制.
	un_wp_page((unsigned long *)
		(((address >> 10) & 0xffc) + (0xfffff000 &
    c37e:	8b 44 24 14          	mov    0x14(%esp),%eax
    c382:	c1 e8 0a             	shr    $0xa,%eax
    c385:	25 fc 0f 00 00       	and    $0xffc,%eax
    c38a:	89 c2                	mov    %eax,%edx
		*((unsigned long *) ((address >> 20) & 0xffc)))));
    c38c:	8b 44 24 14          	mov    0x14(%esp),%eax
    c390:	c1 e8 14             	shr    $0x14,%eax
    c393:	25 fc 0f 00 00       	and    $0xffc,%eax
    c398:	8b 00                	mov    (%eax),%eax
	// 目录项索引值中最后2位.因为只移动了20位,因此最后2位是页表索引的内容,应该屏蔽掉.而*((address>>20)&0xffc)则是取指定目录表项内容中对应页表
	// 的物理地址.最后与上0xffffff000用于屏蔽掉页目录项内容中的一些标志位(目录项低12位).直观表示为(0xffffff000 & *((unsigned long *) (((
	// address>>22) & 0x3ff)<<2))).3:由1中页表项在页表中偏移地址加上2中目录表项内容中对应页表的物理地址即可得到页表项的指针(物理地址).这里对
	// 共享的页面进行复制.
	un_wp_page((unsigned long *)
		(((address >> 10) & 0xffc) + (0xfffff000 &
    c39a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    c39f:	01 d0                	add    %edx,%eax
	// 位置.因为address>>22是目录项索引值,但每项4个字节,因此乘以4后:(address>>22)<<2=(address>>20)就是指定项在目录表中的偏移地址.&0xffc用于屏蔽
	// 目录项索引值中最后2位.因为只移动了20位,因此最后2位是页表索引的内容,应该屏蔽掉.而*((address>>20)&0xffc)则是取指定目录表项内容中对应页表
	// 的物理地址.最后与上0xffffff000用于屏蔽掉页目录项内容中的一些标志位(目录项低12位).直观表示为(0xffffff000 & *((unsigned long *) (((
	// address>>22) & 0x3ff)<<2))).3:由1中页表项在页表中偏移地址加上2中目录表项内容中对应页表的物理地址即可得到页表项的指针(物理地址).这里对
	// 共享的页面进行复制.
	un_wp_page((unsigned long *)
    c3a1:	83 ec 0c             	sub    $0xc,%esp
    c3a4:	50                   	push   %eax
    c3a5:	e8 c0 fe ff ff       	call   c26a <un_wp_page>
    c3aa:	83 c4 10             	add    $0x10,%esp
		(((address >> 10) & 0xffc) + (0xfffff000 &
		*((unsigned long *) ((address >> 20) & 0xffc)))));

}
    c3ad:	90                   	nop
    c3ae:	83 c4 0c             	add    $0xc,%esp
    c3b1:	c3                   	ret    

0000c3b2 <write_verify>:

// 写页面验证.
// 若页面不可写,则复制页面.在fork.c中被内存验证通用函数verify_area()调用.
// 参数address是指定页面在4GB空间中的线性地址.
void write_verify(unsigned long address)
{
    c3b2:	83 ec 1c             	sub    $0x1c,%esp

	// 首先取指定线性地址对应的页目录项,根据目录项中的存在位(P)判断目录项对应的页表是否存在(存在位P=1?),若不存在(P=0)则返回.这样处理
	// 是因为对于不存在的页面没有共享和写时复制可言,并且若程序对此不存在的页面执行写操作时,系统就会因为缺页异常而去执行do_no_page(),
	// 并为这个地方使用put_page()函数映射一个物理页面.接着程序从目录项中取页表地址,加上指定页面在页表中的页表项偏移值,得对应地址的页表
	// 项指针.在该表项中包含着给定线性地址对应的物理页面.
	if (!( (page = *((unsigned long *) ((address >> 20) & 0xffc)) ) & 1))
    c3b5:	8b 44 24 20          	mov    0x20(%esp),%eax
    c3b9:	c1 e8 14             	shr    $0x14,%eax
    c3bc:	25 fc 0f 00 00       	and    $0xffc,%eax
    c3c1:	8b 00                	mov    (%eax),%eax
    c3c3:	89 44 24 0c          	mov    %eax,0xc(%esp)
    c3c7:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c3cb:	83 e0 01             	and    $0x1,%eax
    c3ce:	85 c0                	test   %eax,%eax
    c3d0:	74 39                	je     c40b <write_verify+0x59>
		return;
	page &= 0xfffff000;
    c3d2:	81 64 24 0c 00 f0 ff 	andl   $0xfffff000,0xc(%esp)
    c3d9:	ff 
	// 得到页表项的物理地址
	page += ((address >> 10) & 0xffc);
    c3da:	8b 44 24 20          	mov    0x20(%esp),%eax
    c3de:	c1 e8 0a             	shr    $0xa,%eax
    c3e1:	25 fc 0f 00 00       	and    $0xffc,%eax
    c3e6:	01 44 24 0c          	add    %eax,0xc(%esp)
	// 然后判断该页表项中位1(P/W),位0(P)标志.如果该页面不可写(R/W=0)且存在,那么就执行共享检验和复制页面操作(写时复制).否则什么也不做,
	// 直接退出.
	if ((3 & *(unsigned long *) page) == 1)  /* non-writeable, present */
    c3ea:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c3ee:	8b 00                	mov    (%eax),%eax
    c3f0:	83 e0 03             	and    $0x3,%eax
    c3f3:	83 f8 01             	cmp    $0x1,%eax
    c3f6:	75 16                	jne    c40e <write_verify+0x5c>
		un_wp_page((unsigned long *) page);
    c3f8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c3fc:	83 ec 0c             	sub    $0xc,%esp
    c3ff:	50                   	push   %eax
    c400:	e8 65 fe ff ff       	call   c26a <un_wp_page>
    c405:	83 c4 10             	add    $0x10,%esp
	return;
    c408:	90                   	nop
    c409:	eb 03                	jmp    c40e <write_verify+0x5c>
	// 首先取指定线性地址对应的页目录项,根据目录项中的存在位(P)判断目录项对应的页表是否存在(存在位P=1?),若不存在(P=0)则返回.这样处理
	// 是因为对于不存在的页面没有共享和写时复制可言,并且若程序对此不存在的页面执行写操作时,系统就会因为缺页异常而去执行do_no_page(),
	// 并为这个地方使用put_page()函数映射一个物理页面.接着程序从目录项中取页表地址,加上指定页面在页表中的页表项偏移值,得对应地址的页表
	// 项指针.在该表项中包含着给定线性地址对应的物理页面.
	if (!( (page = *((unsigned long *) ((address >> 20) & 0xffc)) ) & 1))
		return;
    c40b:	90                   	nop
    c40c:	eb 01                	jmp    c40f <write_verify+0x5d>
	page += ((address >> 10) & 0xffc);
	// 然后判断该页表项中位1(P/W),位0(P)标志.如果该页面不可写(R/W=0)且存在,那么就执行共享检验和复制页面操作(写时复制).否则什么也不做,
	// 直接退出.
	if ((3 & *(unsigned long *) page) == 1)  /* non-writeable, present */
		un_wp_page((unsigned long *) page);
	return;
    c40e:	90                   	nop
}
    c40f:	83 c4 1c             	add    $0x1c,%esp
    c412:	c3                   	ret    

0000c413 <get_empty_page>:

// 取得一页空闲内存并映射到指定线性地址处.
// get_free_page()仅是申请取得了主内存区的一页物理内存.而本函数则不仅是获取到一页物理内存页面,还进一步调用put_page(),将物理页面映射到指定的线性地址处.
// 参数address是指定页面的线性地址.
void get_empty_page(unsigned long address)
{
    c413:	83 ec 1c             	sub    $0x1c,%esp
	unsigned long tmp;

	// 若不能取得一空闲页面,或者不能将所取页面放置到指定地址处,则显示内存不够的信息.292行上英文注释的含义是:free_page()函数的参数tmp是0也没有关系,该函数会忽略它
	// 并能正常返回.
	if (!(tmp = get_free_page()) || !put_page(tmp, address)) {
    c416:	e8 73 0c 00 00       	call   d08e <get_free_page>
    c41b:	89 44 24 0c          	mov    %eax,0xc(%esp)
    c41f:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    c424:	74 17                	je     c43d <get_empty_page+0x2a>
    c426:	83 ec 08             	sub    $0x8,%esp
    c429:	ff 74 24 28          	pushl  0x28(%esp)
    c42d:	ff 74 24 18          	pushl  0x18(%esp)
    c431:	e8 6a fc ff ff       	call   c0a0 <put_page>
    c436:	83 c4 10             	add    $0x10,%esp
    c439:	85 c0                	test   %eax,%eax
    c43b:	75 14                	jne    c451 <get_empty_page+0x3e>
		free_page(tmp);		/* 0 is ok - ignored */
    c43d:	83 ec 0c             	sub    $0xc,%esp
    c440:	ff 74 24 18          	pushl  0x18(%esp)
    c444:	e8 b6 f8 ff ff       	call   bcff <free_page>
    c449:	83 c4 10             	add    $0x10,%esp
		oom();
    c44c:	e8 89 f8 ff ff       	call   bcda <oom>
	}
}
    c451:	90                   	nop
    c452:	83 c4 1c             	add    $0x1c,%esp
    c455:	c3                   	ret    

0000c456 <try_to_share>:
// 段内容作过修改那么数据段内容也应一样。参数address是进程中的逻辑地址，即是当前进程欲与p进程共享页面的逻辑页面地址。进程
// p是将被共享页面的进程。如果p进程address处的页面存在并且没有被修改过的话，就让当前进程与p进程共享之。同时还需要验证指定
// 的地址处是否已经申请了页面，若是则出错，死机。
// 返回：1 - 页面共享处理成功；0 - 失败。
static int try_to_share(unsigned long address, struct task_struct * p)
{
    c456:	83 ec 2c             	sub    $0x2c,%esp

	// 首先分别求得指定进程p中和当前进程中逻辑地址address对应的页目录项。为了计算方便先求出指定逻辑地址address处的“逻辑”页
	// 目录号，即以进程空间（0 - 64MB）算出的页目录项号。该“逻辑”页目录项号加上进程p在CPU 4GB线性空间中起始地址对应的页目录
	// 项，即得到进程p中地址address处页面所对应的4GB线性空间中实际页目录项from_page。而“逻辑”页目录项号加上当前进程CPU 4GB
	// 线性空间中的实际页目录项to_page。
	from_page = to_page = ((address >> 20) & 0xffc);
    c459:	8b 44 24 30          	mov    0x30(%esp),%eax
    c45d:	c1 e8 14             	shr    $0x14,%eax
    c460:	25 fc 0f 00 00       	and    $0xffc,%eax
    c465:	89 44 24 18          	mov    %eax,0x18(%esp)
    c469:	8b 44 24 18          	mov    0x18(%esp),%eax
    c46d:	89 44 24 14          	mov    %eax,0x14(%esp)
	from_page += ((p->start_code >> 20) & 0xffc);             		// p进程目录项。
    c471:	8b 44 24 34          	mov    0x34(%esp),%eax
    c475:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
    c47b:	c1 e8 14             	shr    $0x14,%eax
    c47e:	25 fc 0f 00 00       	and    $0xffc,%eax
    c483:	01 44 24 14          	add    %eax,0x14(%esp)
	to_page += ((current->start_code >> 20) & 0xffc);         		// 当前进程目录项。
    c487:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    c48c:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
    c492:	c1 e8 14             	shr    $0x14,%eax
    c495:	25 fc 0f 00 00       	and    $0xffc,%eax
    c49a:	01 44 24 18          	add    %eax,0x18(%esp)
	// address对应的物理内在页面地址，并且该物理页面存在，而且干净（没有被修改过，不脏）。
	// 方法是先取目录项内容。如果该目录项元效（P=0），表示目录项对应的二级页表不存在，于是返回。否则取该目录项对应页表地址from，
	// 从而计算出逻辑地址address对应的页表项指针，并取出该面表项内容临时保存在phys_addr中。
	/* is there a page-directory at from? */
	/* 在from处是否存在页目录项？ */
	from = *(unsigned long *) from_page;                    		// p进程目录项内容。
    c49e:	8b 44 24 14          	mov    0x14(%esp),%eax
    c4a2:	8b 00                	mov    (%eax),%eax
    c4a4:	89 44 24 10          	mov    %eax,0x10(%esp)
	if (!(from & 1))
    c4a8:	8b 44 24 10          	mov    0x10(%esp),%eax
    c4ac:	83 e0 01             	and    $0x1,%eax
    c4af:	85 c0                	test   %eax,%eax
    c4b1:	75 0a                	jne    c4bd <try_to_share+0x67>
		return 0;
    c4b3:	b8 00 00 00 00       	mov    $0x0,%eax
    c4b8:	e9 2c 01 00 00       	jmp    c5e9 <try_to_share+0x193>
	from &= 0xfffff000;                                     		// 页表地址。
    c4bd:	81 64 24 10 00 f0 ff 	andl   $0xfffff000,0x10(%esp)
    c4c4:	ff 
	from_page = from + ((address >> 10) & 0xffc);             		// 页表项指针。
    c4c5:	8b 44 24 30          	mov    0x30(%esp),%eax
    c4c9:	c1 e8 0a             	shr    $0xa,%eax
    c4cc:	25 fc 0f 00 00       	and    $0xffc,%eax
    c4d1:	89 c2                	mov    %eax,%edx
    c4d3:	8b 44 24 10          	mov    0x10(%esp),%eax
    c4d7:	01 d0                	add    %edx,%eax
    c4d9:	89 44 24 14          	mov    %eax,0x14(%esp)
	phys_addr = *(unsigned long *) from_page;               		// 页表项内容。
    c4dd:	8b 44 24 14          	mov    0x14(%esp),%eax
    c4e1:	8b 00                	mov    (%eax),%eax
    c4e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
	// 接着看看页表项映射的物理页面是否存在并且干净。0x41对应页表项中的D（Dirty）和P（present）标志。如果页面不干净或无效则返回。
	// 然后我们从该表项中取出物理页面地址再保存在phys_addr中。最后我们再检查一下这个物理页面地址的有效性，即它不应该超过机器最大
	// 物理地址值，也不应该小于内在低端（1MB）。
	/* is the page clean and present? */
	/* 物理页面干净并且存在吗？ */
	if ((phys_addr & 0x41) != 0x01)
    c4e7:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c4eb:	83 e0 41             	and    $0x41,%eax
    c4ee:	83 f8 01             	cmp    $0x1,%eax
    c4f1:	74 0a                	je     c4fd <try_to_share+0xa7>
		return 0;
    c4f3:	b8 00 00 00 00       	mov    $0x0,%eax
    c4f8:	e9 ec 00 00 00       	jmp    c5e9 <try_to_share+0x193>
	phys_addr &= 0xfffff000;                                		// 物理页面地址。
    c4fd:	81 64 24 0c 00 f0 ff 	andl   $0xfffff000,0xc(%esp)
    c504:	ff 
	if (phys_addr >= HIGH_MEMORY || phys_addr < LOW_MEM)
    c505:	a1 80 f2 02 00       	mov    0x2f280,%eax
    c50a:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    c50e:	73 0a                	jae    c51a <try_to_share+0xc4>
    c510:	81 7c 24 0c ff ff 0f 	cmpl   $0xfffff,0xc(%esp)
    c517:	00 
    c518:	77 0a                	ja     c524 <try_to_share+0xce>
		return 0;
    c51a:	b8 00 00 00 00       	mov    $0x0,%eax
    c51f:	e9 c5 00 00 00       	jmp    c5e9 <try_to_share+0x193>
	// 下面首先对当前进程的表项进行操作。目标是取得当前进程中address对应的页表项地址，并且该页表项还没有映射物理页面，即其P=0。
	// 首先取当前进程页目录项内容->to。如果该目录项元效（P=0），即目录项对应的二级页表不存在，则申请一空闲页面来存放页表，并更新
	// 目录项to_page内容，让其指向该内存页面。
	to = *(unsigned long *) to_page;                        		// 当前进程目录项内容。
    c524:	8b 44 24 18          	mov    0x18(%esp),%eax
    c528:	8b 00                	mov    (%eax),%eax
    c52a:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!(to & 1))
    c52e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c532:	83 e0 01             	and    $0x1,%eax
    c535:	85 c0                	test   %eax,%eax
    c537:	75 24                	jne    c55d <try_to_share+0x107>
		if (to = get_free_page())
    c539:	e8 50 0b 00 00       	call   d08e <get_free_page>
    c53e:	89 44 24 1c          	mov    %eax,0x1c(%esp)
    c542:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
    c547:	74 0f                	je     c558 <try_to_share+0x102>
			*(unsigned long *) to_page = to | 7;
    c549:	8b 44 24 18          	mov    0x18(%esp),%eax
    c54d:	8b 54 24 1c          	mov    0x1c(%esp),%edx
    c551:	83 ca 07             	or     $0x7,%edx
    c554:	89 10                	mov    %edx,(%eax)
    c556:	eb 05                	jmp    c55d <try_to_share+0x107>
		else
			oom();
    c558:	e8 7d f7 ff ff       	call   bcda <oom>
	// 否则取目录项中的页表地址->to，加上页表索引值<<2，即页表项在表中偏移地址，得到页表项地址->to_page。针对该页表项，如果
	// 此时我们检查出其对应的物理页面已经存在，即页表项的存在位P=1,则说明原本我们想共享进程p中对应的物理页面，但现在我们自己已经
	// 占有了（映射有）物理页面。于是说明内核出错，死机。
	to &= 0xfffff000;                                       		// 当前进程的页表地址。
    c55d:	81 64 24 1c 00 f0 ff 	andl   $0xfffff000,0x1c(%esp)
    c564:	ff 
	to_page = to + ((address >> 10) & 0xffc);                 		// 当前进程的页表项地址。
    c565:	8b 44 24 30          	mov    0x30(%esp),%eax
    c569:	c1 e8 0a             	shr    $0xa,%eax
    c56c:	25 fc 0f 00 00       	and    $0xffc,%eax
    c571:	89 c2                	mov    %eax,%edx
    c573:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c577:	01 d0                	add    %edx,%eax
    c579:	89 44 24 18          	mov    %eax,0x18(%esp)
	if (1 & *(unsigned long *) to_page)
    c57d:	8b 44 24 18          	mov    0x18(%esp),%eax
    c581:	8b 00                	mov    (%eax),%eax
    c583:	83 e0 01             	and    $0x1,%eax
    c586:	85 c0                	test   %eax,%eax
    c588:	74 10                	je     c59a <try_to_share+0x144>
		panic("try_to_share: to_page already exists");
    c58a:	83 ec 0c             	sub    $0xc,%esp
    c58d:	68 ec 35 02 00       	push   $0x235ec
    c592:	e8 71 c6 ff ff       	call   8c08 <panic>
    c597:	83 c4 10             	add    $0x10,%esp
	/* share them: write-protect */
	/* 对它们进行共享处理：写保护区*/
	*(unsigned long *) from_page &= ~2;
    c59a:	8b 44 24 14          	mov    0x14(%esp),%eax
    c59e:	8b 54 24 14          	mov    0x14(%esp),%edx
    c5a2:	8b 12                	mov    (%edx),%edx
    c5a4:	83 e2 fd             	and    $0xfffffffd,%edx
    c5a7:	89 10                	mov    %edx,(%eax)
	*(unsigned long *) to_page = *(unsigned long *) from_page;
    c5a9:	8b 44 24 18          	mov    0x18(%esp),%eax
    c5ad:	8b 54 24 14          	mov    0x14(%esp),%edx
    c5b1:	8b 12                	mov    (%edx),%edx
    c5b3:	89 10                	mov    %edx,(%eax)
	// 随后刷新页变换高速缓冲。计算所操作物理页面的页面号，并将对应页面映射字节数组项中的引用递增1.最后返回1,表示共享处理成功。
	invalidate();
    c5b5:	b8 00 00 00 00       	mov    $0x0,%eax
    c5ba:	0f 22 d8             	mov    %eax,%cr3
	phys_addr -= LOW_MEM;
    c5bd:	81 6c 24 0c 00 00 10 	subl   $0x100000,0xc(%esp)
    c5c4:	00 
	phys_addr >>= 12;                       						// 得页面号。
    c5c5:	c1 6c 24 0c 0c       	shrl   $0xc,0xc(%esp)
	mem_map[phys_addr]++;
    c5ca:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c5ce:	05 a0 f2 02 00       	add    $0x2f2a0,%eax
    c5d3:	0f b6 00             	movzbl (%eax),%eax
    c5d6:	8d 50 01             	lea    0x1(%eax),%edx
    c5d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c5dd:	05 a0 f2 02 00       	add    $0x2f2a0,%eax
    c5e2:	88 10                	mov    %dl,(%eax)
	return 1;
    c5e4:	b8 01 00 00 00       	mov    $0x1,%eax
}
    c5e9:	83 c4 2c             	add    $0x2c,%esp
    c5ec:	c3                   	ret    

0000c5ed <share_page>:
// 点.根据该i节点的引用次数i_count我们可以进行这种判断.若节点的i_count值大于1,则表明系统中有两个进程正在运行同一个执行文件(或库
// 文件),于是可以再对任务结构数组中所有任务比较是否有相同的executable字段(或library字段)来最后确定多个进程运行着相同执行文件的
// 情况.参数inode是欲进行共享页面进程执行文件的内存i节点.address是进程中的逻辑地址,即当前进程欲与p进程共享页面的逻辑页面地址.返
// 回1 - 共享操作成功,0 - 失败.
static int share_page(struct m_inode * inode, unsigned long address)
{
    c5ed:	83 ec 1c             	sub    $0x1c,%esp
	struct task_struct ** p;

	// 首先检查一下参数指定的内存i节点引用计数值.如果该内存i节点的引用计数值等于1(executalbe->i_count=1)或者i节点指针空,表示当前系
	// 统中只有1个进程在运行该执行文件或者提供的i节点无效.因此无共享可言,直接退出函数.
	if (inode->i_count < 2 || !inode)
    c5f0:	8b 44 24 20          	mov    0x20(%esp),%eax
    c5f4:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    c5f8:	66 83 f8 01          	cmp    $0x1,%ax
    c5fc:	76 07                	jbe    c605 <share_page+0x18>
    c5fe:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    c603:	75 0a                	jne    c60f <share_page+0x22>
		return 0;
    c605:	b8 00 00 00 00       	mov    $0x0,%eax
    c60a:	e9 8f 00 00 00       	jmp    c69e <share_page+0xb1>
	// 辑地址address小于进程库文件在逻辑地址空间的起始地址LIBRARY_OFFSET,则表明共享的页面在进程执行文件对应的逻辑地址空间范围内,于是
	// 检查一下指定i节点是否与进程的执行文件i节点(即进程executable相同,若不相同则继续寻找.若进程逻辑地址address大于等于进程库文件在
	// 逻辑地址空间的起始地址LIBRARY_OFFSET,则表明想要共享的页面在进程使用的库文件中,于是检查指定节点inode是否与进程的库文件i节点相同,
	// 若不相同则继续寻找.如果找到某个进程p,其executable或library与指定的节点inode相同,则调用页面试探函数try_to_share()尝试页面共
	// 享.若共享操作成功,则函数返回1.否则返回0,表示共享页面操作失败.
	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
    c60f:	c7 44 24 0c bc e2 02 	movl   $0x2e2bc,0xc(%esp)
    c616:	00 
    c617:	eb 76                	jmp    c68f <share_page+0xa2>
		if (!*p)								// 如果该任务项空闲,则继续寻找.
    c619:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c61d:	8b 00                	mov    (%eax),%eax
    c61f:	85 c0                	test   %eax,%eax
    c621:	74 60                	je     c683 <share_page+0x96>
			continue;
		if (current == *p)						// 如果是当前任务,也继续寻找.
    c623:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c627:	8b 10                	mov    (%eax),%edx
    c629:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    c62e:	39 c2                	cmp    %eax,%edx
    c630:	74 54                	je     c686 <share_page+0x99>
			continue;
		if (address < LIBRARY_OFFSET) {
    c632:	81 7c 24 24 ff ff bf 	cmpl   $0x3bfffff,0x24(%esp)
    c639:	03 
    c63a:	77 14                	ja     c650 <share_page+0x63>
			if (inode != (*p)->executable)		// 进程执行文件i节点.
    c63c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c640:	8b 00                	mov    (%eax),%eax
    c642:	8b 80 3c 03 00 00    	mov    0x33c(%eax),%eax
    c648:	3b 44 24 20          	cmp    0x20(%esp),%eax
    c64c:	74 14                	je     c662 <share_page+0x75>
				continue;
    c64e:	eb 3a                	jmp    c68a <share_page+0x9d>
		} else {
			if (inode != (*p)->library)			// 进程使用库文件i节点.
    c650:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c654:	8b 00                	mov    (%eax),%eax
    c656:	8b 80 40 03 00 00    	mov    0x340(%eax),%eax
    c65c:	3b 44 24 20          	cmp    0x20(%esp),%eax
    c660:	75 27                	jne    c689 <share_page+0x9c>
				continue;
		}
		if (try_to_share(address, *p))			// 尝试共享页面.
    c662:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c666:	8b 00                	mov    (%eax),%eax
    c668:	83 ec 08             	sub    $0x8,%esp
    c66b:	50                   	push   %eax
    c66c:	ff 74 24 30          	pushl  0x30(%esp)
    c670:	e8 e1 fd ff ff       	call   c456 <try_to_share>
    c675:	83 c4 10             	add    $0x10,%esp
    c678:	85 c0                	test   %eax,%eax
    c67a:	74 0e                	je     c68a <share_page+0x9d>
			return 1;
    c67c:	b8 01 00 00 00       	mov    $0x1,%eax
    c681:	eb 1b                	jmp    c69e <share_page+0xb1>
	// 逻辑地址空间的起始地址LIBRARY_OFFSET,则表明想要共享的页面在进程使用的库文件中,于是检查指定节点inode是否与进程的库文件i节点相同,
	// 若不相同则继续寻找.如果找到某个进程p,其executable或library与指定的节点inode相同,则调用页面试探函数try_to_share()尝试页面共
	// 享.若共享操作成功,则函数返回1.否则返回0,表示共享页面操作失败.
	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
		if (!*p)								// 如果该任务项空闲,则继续寻找.
			continue;
    c683:	90                   	nop
    c684:	eb 04                	jmp    c68a <share_page+0x9d>
		if (current == *p)						// 如果是当前任务,也继续寻找.
			continue;
    c686:	90                   	nop
    c687:	eb 01                	jmp    c68a <share_page+0x9d>
		if (address < LIBRARY_OFFSET) {
			if (inode != (*p)->executable)		// 进程执行文件i节点.
				continue;
		} else {
			if (inode != (*p)->library)			// 进程使用库文件i节点.
				continue;
    c689:	90                   	nop
	// 辑地址address小于进程库文件在逻辑地址空间的起始地址LIBRARY_OFFSET,则表明共享的页面在进程执行文件对应的逻辑地址空间范围内,于是
	// 检查一下指定i节点是否与进程的执行文件i节点(即进程executable相同,若不相同则继续寻找.若进程逻辑地址address大于等于进程库文件在
	// 逻辑地址空间的起始地址LIBRARY_OFFSET,则表明想要共享的页面在进程使用的库文件中,于是检查指定节点inode是否与进程的库文件i节点相同,
	// 若不相同则继续寻找.如果找到某个进程p,其executable或library与指定的节点inode相同,则调用页面试探函数try_to_share()尝试页面共
	// 享.若共享操作成功,则函数返回1.否则返回0,表示共享页面操作失败.
	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
    c68a:	83 6c 24 0c 04       	subl   $0x4,0xc(%esp)
    c68f:	81 7c 24 0c c0 e1 02 	cmpl   $0x2e1c0,0xc(%esp)
    c696:	00 
    c697:	77 80                	ja     c619 <share_page+0x2c>
				continue;
		}
		if (try_to_share(address, *p))			// 尝试共享页面.
			return 1;
	}
	return 0;
    c699:	b8 00 00 00 00       	mov    $0x0,%eax
}
    c69e:	83 c4 1c             	add    $0x1c,%esp
    c6a1:	c3                   	ret    

0000c6a2 <do_no_page>:
// 是访问不存在页面处理函数.页异常中断处理过程中调用的函数.在page.s程序中被调用.函数参数error_code和address是进程在访问页面时由CPU因
// 缺页产生异常而自动生成.error_code指出出错类型;address产生异常的页面线性地址.
// 该函数首先查看所缺页是否在交换设备中,若是则交换进来.否则尝试与已加载的相同文件进行页面共享,或者只是由于进程动态申请内存页面而只需映射一页
// 物理内存页即可.若共享操作不成功,那么只能从相应文件中读入所缺的数据页面到指定线性地址处.
void do_no_page(unsigned long error_code, unsigned long address)
{
    c6a2:	83 ec 3c             	sub    $0x3c,%esp
	struct m_inode * inode;

	// 首先判断CPU控制寄存器CR2给出的引起页面异常的线性地址在什么范围中.如果address小于TASK_SIZE(0x4000000,即64MB),表示异常页面位置在内核
	// 或任务0和任务1所处的线性地址范围内,于是发出警告信息"内核范围内存被写保护";如果(address-当前进程代码起始地址)大于一个进程的长度(64MB),表示
	// address所指的线性地址不在引起异常的进程线性地址空间范围内,则在发出出错信息后退出
	if (address < TASK_SIZE)
    c6a5:	81 7c 24 44 ff ff ff 	cmpl   $0x3ffffff,0x44(%esp)
    c6ac:	03 
    c6ad:	77 10                	ja     c6bf <do_no_page+0x1d>
		printk("\n\rBAD!! KERNEL PAGE MISSING\n\r");
    c6af:	83 ec 0c             	sub    $0xc,%esp
    c6b2:	68 11 36 02 00       	push   $0x23611
    c6b7:	e8 8b c5 ff ff       	call   8c47 <printk>
    c6bc:	83 c4 10             	add    $0x10,%esp
	if (address - current->start_code > TASK_SIZE) {
    c6bf:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    c6c4:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
    c6ca:	8b 54 24 44          	mov    0x44(%esp),%edx
    c6ce:	29 c2                	sub    %eax,%edx
    c6d0:	89 d0                	mov    %edx,%eax
    c6d2:	3d 00 00 00 04       	cmp    $0x4000000,%eax
    c6d7:	76 1d                	jbe    c6f6 <do_no_page+0x54>
		printk("Bad things happen: nonexistent page error in do_no_page\n\r");
    c6d9:	83 ec 0c             	sub    $0xc,%esp
    c6dc:	68 30 36 02 00       	push   $0x23630
    c6e1:	e8 61 c5 ff ff       	call   8c47 <printk>
    c6e6:	83 c4 10             	add    $0x10,%esp
		do_exit(SIGSEGV);
    c6e9:	83 ec 0c             	sub    $0xc,%esp
    c6ec:	6a 0b                	push   $0xb
    c6ee:	e8 f7 e6 ff ff       	call   adea <do_exit>
    c6f3:	83 c4 10             	add    $0x10,%esp
	}
	// 然后根据指定的线性地址address求出其对应的二级页表项指针,并根据该页表项内容判断address处的页面是否在交换设备中.若是则调入页面并退出.方法是首先
	// 取指定线性地址address对应的目录项内容.如果对应的二级页表存在,则取出该目录项中二级页表的地址,加上页表项偏移值即得到线性地址address处页面对应的
	// 页表项指针,从而获得页表项内容.若页表内容不为0并且页表项存在位P=0,则说明该页表项指定的物理页面应该在交换设备中.于是从交换设备中调入指定页面后退出函数.
	page = *(unsigned long *) ((address >> 20) & 0xffc);				// 取目录项内容.
    c6f6:	8b 44 24 44          	mov    0x44(%esp),%eax
    c6fa:	c1 e8 14             	shr    $0x14,%eax
    c6fd:	25 fc 0f 00 00       	and    $0xffc,%eax
    c702:	8b 00                	mov    (%eax),%eax
    c704:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (page & 1) {
    c708:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c70c:	83 e0 01             	and    $0x1,%eax
    c70f:	85 c0                	test   %eax,%eax
    c711:	74 49                	je     c75c <do_no_page+0xba>
		page &= 0xfffff000;												// 二级页表地址.
    c713:	81 64 24 1c 00 f0 ff 	andl   $0xfffff000,0x1c(%esp)
    c71a:	ff 
		page += (address >> 10) & 0xffc;								// 页表项指针.
    c71b:	8b 44 24 44          	mov    0x44(%esp),%eax
    c71f:	c1 e8 0a             	shr    $0xa,%eax
    c722:	25 fc 0f 00 00       	and    $0xffc,%eax
    c727:	01 44 24 1c          	add    %eax,0x1c(%esp)
		tmp = *(unsigned long *) page;									// 页表项内容.
    c72b:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c72f:	8b 00                	mov    (%eax),%eax
    c731:	89 44 24 2c          	mov    %eax,0x2c(%esp)
		if (tmp && !(1 & tmp)) {
    c735:	83 7c 24 2c 00       	cmpl   $0x0,0x2c(%esp)
    c73a:	74 20                	je     c75c <do_no_page+0xba>
    c73c:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    c740:	83 e0 01             	and    $0x1,%eax
    c743:	85 c0                	test   %eax,%eax
    c745:	75 15                	jne    c75c <do_no_page+0xba>
			swap_in((unsigned long *) page);							// 从交换设备读页面.
    c747:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c74b:	83 ec 0c             	sub    $0xc,%esp
    c74e:	50                   	push   %eax
    c74f:	e8 31 06 00 00       	call   cd85 <swap_in>
    c754:	83 c4 10             	add    $0x10,%esp
			return;
    c757:	e9 b9 01 00 00       	jmp    c915 <do_no_page+0x273>
		}
	}
	// 否则取线性空间中指定地址address处页面地址,并算出指定线性地址在进程空间中相对于进程基址的偏移长度值tmp,即对应的逻辑地址.从而可以算出缺页页面在执行文件映像
	// 中或在库文件中的具体起始数据块号.
	address &= 0xfffff000;												// address处缺页页面地址.
    c75c:	81 64 24 44 00 f0 ff 	andl   $0xfffff000,0x44(%esp)
    c763:	ff 
	tmp = address - current->start_code;								// 缺页页面对应逻辑地址.
    c764:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    c769:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
    c76f:	8b 54 24 44          	mov    0x44(%esp),%edx
    c773:	29 c2                	sub    %eax,%edx
    c775:	89 d0                	mov    %edx,%eax
    c777:	89 44 24 2c          	mov    %eax,0x2c(%esp)
	// 如果缺页对应的逻辑地址tmp大于库映像文件在进程逻辑空间中的起始位置,说明缺少的页面在库映像文件中.于是从当前进程任务数据结构中可以取得库映像文件的i节点library,
	// 并计算出该缺页在库文件中的起始数据块号block.
	// 因为设置上存放的执行文件映像第1块数据是程序头结构,因此在读取该文件时需要跳过第1块数据.所以需要首先计算缺页所在数据块号.因为每块数据长度为BLOCK_SIZE = 1KB,因此
	// 一页内存可存放4个数据块.进程逻辑地址tmp除以数据块大小再加1即可得出缺少的页面在执行映像文件中的起始块号block.
	if (tmp >= LIBRARY_OFFSET ) {
    c77b:	81 7c 24 2c ff ff bf 	cmpl   $0x3bfffff,0x2c(%esp)
    c782:	03 
    c783:	76 24                	jbe    c7a9 <do_no_page+0x107>
		inode = current->library;										// 库文件i节点和缺页起始块号.
    c785:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    c78a:	8b 80 40 03 00 00    	mov    0x340(%eax),%eax
    c790:	89 44 24 20          	mov    %eax,0x20(%esp)
		block = 1 + (tmp - LIBRARY_OFFSET) / BLOCK_SIZE;
    c794:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    c798:	2d 00 00 c0 03       	sub    $0x3c00000,%eax
    c79d:	c1 e8 0a             	shr    $0xa,%eax
    c7a0:	83 c0 01             	add    $0x1,%eax
    c7a3:	89 44 24 28          	mov    %eax,0x28(%esp)
    c7a7:	eb 40                	jmp    c7e9 <do_no_page+0x147>
	// 如果缺页对应的逻辑地址tmp小于进程的执行映像文件在逻辑地址空间的末端位置,则说明缺少的页面在进程执行文件映像中,于是可
	// 以从当前进程任务数据机构中取得执行文件的i节点号executable,并计算出该缺页在执行文件映像中的起始数据块号block.若逻辑地址tmp既不在执行文件映像的地址范围内,
	} else if (tmp < current->end_data) {
    c7a9:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    c7ae:	8b 80 20 02 00 00    	mov    0x220(%eax),%eax
    c7b4:	3b 44 24 2c          	cmp    0x2c(%esp),%eax
    c7b8:	76 1f                	jbe    c7d9 <do_no_page+0x137>
		inode = current->executable;									// 执行文件i节点和缺页起始块号.
    c7ba:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    c7bf:	8b 80 3c 03 00 00    	mov    0x33c(%eax),%eax
    c7c5:	89 44 24 20          	mov    %eax,0x20(%esp)
		block = 1 + tmp / BLOCK_SIZE;
    c7c9:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    c7cd:	c1 e8 0a             	shr    $0xa,%eax
    c7d0:	83 c0 01             	add    $0x1,%eax
    c7d3:	89 44 24 28          	mov    %eax,0x28(%esp)
    c7d7:	eb 10                	jmp    c7e9 <do_no_page+0x147>
	// 也不在库文件空间范围内,则说明缺页是进程访问动态申请的内存页面数据所致,因此没有对应i节点和数据块号(都置空).
	} else {
		inode = NULL;													// 是动态申请的数据或栈内存页面.
    c7d9:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%esp)
    c7e0:	00 
		block = 0;
    c7e1:	c7 44 24 28 00 00 00 	movl   $0x0,0x28(%esp)
    c7e8:	00 
	}
	// 若是进程访问其动态申请的页面或为了存放栈信息而引起的缺页异常,则直接申请一页物理内存页面并映射到线性地址address处即可.
	if (!inode) {														// 是动态申请的数据内存页面.
    c7e9:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    c7ee:	75 14                	jne    c804 <do_no_page+0x162>
		get_empty_page(address);
    c7f0:	83 ec 0c             	sub    $0xc,%esp
    c7f3:	ff 74 24 50          	pushl  0x50(%esp)
    c7f7:	e8 17 fc ff ff       	call   c413 <get_empty_page>
    c7fc:	83 c4 10             	add    $0x10,%esp
		return;
    c7ff:	e9 11 01 00 00       	jmp    c915 <do_no_page+0x273>
	}
	// 否则说明所缺页面进程执行文件或库文件范围内,于是就尝试共享页面操作,若成功则退出.
	if (share_page(inode, tmp))											// 尝试逻辑地址tmp处页面的共享.
    c804:	83 ec 08             	sub    $0x8,%esp
    c807:	ff 74 24 34          	pushl  0x34(%esp)
    c80b:	ff 74 24 2c          	pushl  0x2c(%esp)
    c80f:	e8 d9 fd ff ff       	call   c5ed <share_page>
    c814:	83 c4 10             	add    $0x10,%esp
    c817:	85 c0                	test   %eax,%eax
    c819:	0f 85 f2 00 00 00    	jne    c911 <do_no_page+0x26f>
		return;
	// 如果共享不成功就只能申请一页物理内存页面page,然后从设备上读取执行文件中的相应页面并放置(映射)到进程页面逻辑地址tmp处.
	if (!(page = get_free_page()))										// 申请一页物理内存.
    c81f:	e8 6a 08 00 00       	call   d08e <get_free_page>
    c824:	89 44 24 1c          	mov    %eax,0x1c(%esp)
    c828:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
    c82d:	75 05                	jne    c834 <do_no_page+0x192>
		oom();
    c82f:	e8 a6 f4 ff ff       	call   bcda <oom>
	/* remember that 1 block is used for header */
	/* 记住,(程序)头要使用1个数据块 */
	// 根据这个块号和执行文件的i节点,我们就可以从映射位图中找到对应块设备中对应的设备逻辑块号(保存在nr[]数组中).利用break_page()
	// 即可把这4个逻辑块读入到物理页面page中.
	for (i = 0 ; i < 4 ; block++, i++)
    c834:	c7 44 24 24 00 00 00 	movl   $0x0,0x24(%esp)
    c83b:	00 
    c83c:	eb 27                	jmp    c865 <do_no_page+0x1c3>
		nr[i] = bmap(inode, block);
    c83e:	83 ec 08             	sub    $0x8,%esp
    c841:	ff 74 24 30          	pushl  0x30(%esp)
    c845:	ff 74 24 2c          	pushl  0x2c(%esp)
    c849:	e8 69 1e 00 00       	call   e6b7 <bmap>
    c84e:	83 c4 10             	add    $0x10,%esp
    c851:	89 c2                	mov    %eax,%edx
    c853:	8b 44 24 24          	mov    0x24(%esp),%eax
    c857:	89 54 84 0c          	mov    %edx,0xc(%esp,%eax,4)
		oom();
	/* remember that 1 block is used for header */
	/* 记住,(程序)头要使用1个数据块 */
	// 根据这个块号和执行文件的i节点,我们就可以从映射位图中找到对应块设备中对应的设备逻辑块号(保存在nr[]数组中).利用break_page()
	// 即可把这4个逻辑块读入到物理页面page中.
	for (i = 0 ; i < 4 ; block++, i++)
    c85b:	83 44 24 28 01       	addl   $0x1,0x28(%esp)
    c860:	83 44 24 24 01       	addl   $0x1,0x24(%esp)
    c865:	83 7c 24 24 03       	cmpl   $0x3,0x24(%esp)
    c86a:	7e d2                	jle    c83e <do_no_page+0x19c>
		nr[i] = bmap(inode, block);
	bread_page(page, inode->i_dev, nr);
    c86c:	8b 44 24 20          	mov    0x20(%esp),%eax
    c870:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    c874:	0f b7 c0             	movzwl %ax,%eax
    c877:	83 ec 04             	sub    $0x4,%esp
    c87a:	8d 54 24 10          	lea    0x10(%esp),%edx
    c87e:	52                   	push   %edx
    c87f:	50                   	push   %eax
    c880:	ff 74 24 28          	pushl  0x28(%esp)
    c884:	e8 ea 2e 00 00       	call   f773 <bread_page>
    c889:	83 c4 10             	add    $0x10,%esp
	// 在读设备逻辑块操作时,可能会出现这样一种情况,即在执行文件中的读取页面位置可能离文件尾不到1个页面的长度.因此就可能读入一些无用
	// 的信息.下面的操作就是把这部分超出执行文件end_data以后的部分进行清零处理.当然,若该页面离末端超过1页,说明不是从执行文件映像中
	// 读取的页面,而是从库文件中读取的,因此不用执行清零操作.
	i = tmp + 4096 - current->end_data;									// 超出的字节长度值.
    c88c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    c891:	8b 80 20 02 00 00    	mov    0x220(%eax),%eax
    c897:	8b 54 24 2c          	mov    0x2c(%esp),%edx
    c89b:	29 c2                	sub    %eax,%edx
    c89d:	89 d0                	mov    %edx,%eax
    c89f:	05 00 10 00 00       	add    $0x1000,%eax
    c8a4:	89 44 24 24          	mov    %eax,0x24(%esp)
	if (i > 4095)														// 离末端超过1页则不用清零.
    c8a8:	81 7c 24 24 ff 0f 00 	cmpl   $0xfff,0x24(%esp)
    c8af:	00 
    c8b0:	7e 08                	jle    c8ba <do_no_page+0x218>
		i = 0;
    c8b2:	c7 44 24 24 00 00 00 	movl   $0x0,0x24(%esp)
    c8b9:	00 
	tmp = page + 4096;
    c8ba:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c8be:	05 00 10 00 00       	add    $0x1000,%eax
    c8c3:	89 44 24 2c          	mov    %eax,0x2c(%esp)
	while (i-- > 0) {
    c8c7:	eb 0c                	jmp    c8d5 <do_no_page+0x233>
		tmp--;															// tmp指向页面末端.
    c8c9:	83 6c 24 2c 01       	subl   $0x1,0x2c(%esp)
		*(char *)tmp = 0;       										// 页面末端i字节清零.
    c8ce:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    c8d2:	c6 00 00             	movb   $0x0,(%eax)
	// 读取的页面,而是从库文件中读取的,因此不用执行清零操作.
	i = tmp + 4096 - current->end_data;									// 超出的字节长度值.
	if (i > 4095)														// 离末端超过1页则不用清零.
		i = 0;
	tmp = page + 4096;
	while (i-- > 0) {
    c8d5:	8b 44 24 24          	mov    0x24(%esp),%eax
    c8d9:	8d 50 ff             	lea    -0x1(%eax),%edx
    c8dc:	89 54 24 24          	mov    %edx,0x24(%esp)
    c8e0:	85 c0                	test   %eax,%eax
    c8e2:	7f e5                	jg     c8c9 <do_no_page+0x227>
		tmp--;															// tmp指向页面末端.
		*(char *)tmp = 0;       										// 页面末端i字节清零.
	}
	// 最后把引起缺页异常的一页物理页面映射到指定线性地址address处.若操作成功就返回.否则就释放内存页,显示内存不够.
	if (put_page(page, address))
    c8e4:	83 ec 08             	sub    $0x8,%esp
    c8e7:	ff 74 24 4c          	pushl  0x4c(%esp)
    c8eb:	ff 74 24 28          	pushl  0x28(%esp)
    c8ef:	e8 ac f7 ff ff       	call   c0a0 <put_page>
    c8f4:	83 c4 10             	add    $0x10,%esp
    c8f7:	85 c0                	test   %eax,%eax
    c8f9:	75 19                	jne    c914 <do_no_page+0x272>
		return;
	free_page(page);
    c8fb:	83 ec 0c             	sub    $0xc,%esp
    c8fe:	ff 74 24 28          	pushl  0x28(%esp)
    c902:	e8 f8 f3 ff ff       	call   bcff <free_page>
    c907:	83 c4 10             	add    $0x10,%esp
	oom();
    c90a:	e8 cb f3 ff ff       	call   bcda <oom>
    c90f:	eb 04                	jmp    c915 <do_no_page+0x273>
		get_empty_page(address);
		return;
	}
	// 否则说明所缺页面进程执行文件或库文件范围内,于是就尝试共享页面操作,若成功则退出.
	if (share_page(inode, tmp))											// 尝试逻辑地址tmp处页面的共享.
		return;
    c911:	90                   	nop
    c912:	eb 01                	jmp    c915 <do_no_page+0x273>
		tmp--;															// tmp指向页面末端.
		*(char *)tmp = 0;       										// 页面末端i字节清零.
	}
	// 最后把引起缺页异常的一页物理页面映射到指定线性地址address处.若操作成功就返回.否则就释放内存页,显示内存不够.
	if (put_page(page, address))
		return;
    c914:	90                   	nop
	free_page(page);
	oom();
}
    c915:	83 c4 3c             	add    $0x3c,%esp
    c918:	c3                   	ret    

0000c919 <mem_init>:
// 不用.对于具有16MB内存的PC系统,在没有设置虚拟盘RAMDISK的情况下,共有3072个物理页面可供分配.而范围0~1MB内存空间用于内核系统(其实内核
// 只使用0~640KB,剩下的部分被部分高速缓冲和设备内存占用).
// 参数start_mem是可用作页面分配的主内存区起始地址(已去除RAMDISK所占内存空间).end_mem是实际物理内存最大地址.而地址范围start_mem到
// end_mem是主内存区.
void mem_init(long start_mem, long end_mem)
{
    c919:	83 ec 10             	sub    $0x10,%esp
	int i;

	// 首先将1MB到16MB范围内所有内存页面对应的内存映射字节数组项置为已占用状态,即各项字节值全部设置成USED(100).PAGING_PAGES被定义为(
	// PAGING_MEMORY>>12),即1MB以上所有物理内存分页后的内存页面数(15MB/4KB = 3840).
	HIGH_MEMORY = end_mem;									// 设置内存最高端(16MB).
    c91c:	8b 44 24 18          	mov    0x18(%esp),%eax
    c920:	a3 80 f2 02 00       	mov    %eax,0x2f280
	for (i = 0; i < PAGING_PAGES; i++)
    c925:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    c92c:	00 
    c92d:	eb 11                	jmp    c940 <mem_init+0x27>
		mem_map[i] = USED;
    c92f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c933:	05 a0 f2 02 00       	add    $0x2f2a0,%eax
    c938:	c6 00 64             	movb   $0x64,(%eax)
	int i;

	// 首先将1MB到16MB范围内所有内存页面对应的内存映射字节数组项置为已占用状态,即各项字节值全部设置成USED(100).PAGING_PAGES被定义为(
	// PAGING_MEMORY>>12),即1MB以上所有物理内存分页后的内存页面数(15MB/4KB = 3840).
	HIGH_MEMORY = end_mem;									// 设置内存最高端(16MB).
	for (i = 0; i < PAGING_PAGES; i++)
    c93b:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    c940:	81 7c 24 0c ff 0e 00 	cmpl   $0xeff,0xc(%esp)
    c947:	00 
    c948:	7e e5                	jle    c92f <mem_init+0x16>
		mem_map[i] = USED;
	// 然后计算主内存区起始内存start_mem处页面对应内存映射字节数组中项号i和主内存区页面数.此时mem_map[]数组的第i项正对应主内存区中第1个页面.
	// 最后将主内存区中页面对应的数组项清零(表示空闲).对于具有16MB物理内存的系统,mem_map[]中对应4MB~16MB主内存区的项被清零.
	i = MAP_NR(start_mem);									// 主内存区起始位置处页面号.
    c94a:	8b 44 24 14          	mov    0x14(%esp),%eax
    c94e:	2d 00 00 10 00       	sub    $0x100000,%eax
    c953:	c1 f8 0c             	sar    $0xc,%eax
    c956:	89 44 24 0c          	mov    %eax,0xc(%esp)
	end_mem -= start_mem;
    c95a:	8b 44 24 14          	mov    0x14(%esp),%eax
    c95e:	29 44 24 18          	sub    %eax,0x18(%esp)
	// 得到主内存区的页面的数量
	end_mem >>= 12;											// 主内存区中的总页面数.
    c962:	c1 7c 24 18 0c       	sarl   $0xc,0x18(%esp)
	// 将主内存区对应的页面数的应用数置零
	while (end_mem-- > 0)
    c967:	eb 12                	jmp    c97b <mem_init+0x62>
		mem_map[i++] = 0;									// 主内存区页面对应字节值清零.
    c969:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c96d:	8d 50 01             	lea    0x1(%eax),%edx
    c970:	89 54 24 0c          	mov    %edx,0xc(%esp)
    c974:	c6 80 a0 f2 02 00 00 	movb   $0x0,0x2f2a0(%eax)
	i = MAP_NR(start_mem);									// 主内存区起始位置处页面号.
	end_mem -= start_mem;
	// 得到主内存区的页面的数量
	end_mem >>= 12;											// 主内存区中的总页面数.
	// 将主内存区对应的页面数的应用数置零
	while (end_mem-- > 0)
    c97b:	8b 44 24 18          	mov    0x18(%esp),%eax
    c97f:	8d 50 ff             	lea    -0x1(%eax),%edx
    c982:	89 54 24 18          	mov    %edx,0x18(%esp)
    c986:	85 c0                	test   %eax,%eax
    c988:	7f df                	jg     c969 <mem_init+0x50>
		mem_map[i++] = 0;									// 主内存区页面对应字节值清零.
}
    c98a:	90                   	nop
    c98b:	83 c4 10             	add    $0x10,%esp
    c98e:	c3                   	ret    

0000c98f <show_mem>:
// 显示系统内存信息.
// 根据内存映射字节数组mem_map[]中的信息以及页目录和页表内容统计系统中使用的内存页面数和主内存区中总物理内存页面数.该函数在chr_drv/keyboard.S程序
// 被调用.
// 即当按下"Shift + Scroll Lock"组合键时会显示系统内存统计信息.
void show_mem(void)
{
    c98f:	83 ec 2c             	sub    $0x2c,%esp
	int i, j, k, free = 0, total = 0;
    c992:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
    c999:	00 
    c99a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    c9a1:	00 
	int shared = 0;
    c9a2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    c9a9:	00 
	unsigned long * pg_tbl;

	// 根据内存映射字节数组mem_map[],统计系统主内存区页面总数total,以及其中空闲页面数free和被共享的页面数shared.并显示这些信息.
	printk("Mem-info:\n\r");
    c9aa:	83 ec 0c             	sub    $0xc,%esp
    c9ad:	68 6a 36 02 00       	push   $0x2366a
    c9b2:	e8 90 c2 ff ff       	call   8c47 <printk>
    c9b7:	83 c4 10             	add    $0x10,%esp
	for(i = 0 ; i < PAGING_PAGES ; i++) {
    c9ba:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
    c9c1:	00 
    c9c2:	eb 4a                	jmp    ca0e <show_mem+0x7f>
		if (mem_map[i] == USED)								// 1MB以上内存系统占用的页面.
    c9c4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c9c8:	05 a0 f2 02 00       	add    $0x2f2a0,%eax
    c9cd:	0f b6 00             	movzbl (%eax),%eax
    c9d0:	3c 64                	cmp    $0x64,%al
    c9d2:	74 34                	je     ca08 <show_mem+0x79>
			continue;
		// 统计主内存中的页面数
		total++;
    c9d4:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
		if (!mem_map[i])
    c9d9:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c9dd:	05 a0 f2 02 00       	add    $0x2f2a0,%eax
    c9e2:	0f b6 00             	movzbl (%eax),%eax
    c9e5:	84 c0                	test   %al,%al
    c9e7:	75 07                	jne    c9f0 <show_mem+0x61>
			// 统计未使用的主内存页面数
			free++;											// 主内存区空闲页面统计.
    c9e9:	83 44 24 10 01       	addl   $0x1,0x10(%esp)
    c9ee:	eb 19                	jmp    ca09 <show_mem+0x7a>
		else
			// 统计共享页面数
			shared += mem_map[i] - 1;						// 共享的页面数(字节值>1)
    c9f0:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c9f4:	05 a0 f2 02 00       	add    $0x2f2a0,%eax
    c9f9:	0f b6 00             	movzbl (%eax),%eax
    c9fc:	0f b6 c0             	movzbl %al,%eax
    c9ff:	83 e8 01             	sub    $0x1,%eax
    ca02:	01 44 24 08          	add    %eax,0x8(%esp)
    ca06:	eb 01                	jmp    ca09 <show_mem+0x7a>

	// 根据内存映射字节数组mem_map[],统计系统主内存区页面总数total,以及其中空闲页面数free和被共享的页面数shared.并显示这些信息.
	printk("Mem-info:\n\r");
	for(i = 0 ; i < PAGING_PAGES ; i++) {
		if (mem_map[i] == USED)								// 1MB以上内存系统占用的页面.
			continue;
    ca08:	90                   	nop
	int shared = 0;
	unsigned long * pg_tbl;

	// 根据内存映射字节数组mem_map[],统计系统主内存区页面总数total,以及其中空闲页面数free和被共享的页面数shared.并显示这些信息.
	printk("Mem-info:\n\r");
	for(i = 0 ; i < PAGING_PAGES ; i++) {
    ca09:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
    ca0e:	81 7c 24 1c ff 0e 00 	cmpl   $0xeff,0x1c(%esp)
    ca15:	00 
    ca16:	7e ac                	jle    c9c4 <show_mem+0x35>
			free++;											// 主内存区空闲页面统计.
		else
			// 统计共享页面数
			shared += mem_map[i] - 1;						// 共享的页面数(字节值>1)
	}
	printk("%d free pages of %d\n\r", free, total);
    ca18:	83 ec 04             	sub    $0x4,%esp
    ca1b:	ff 74 24 10          	pushl  0x10(%esp)
    ca1f:	ff 74 24 18          	pushl  0x18(%esp)
    ca23:	68 76 36 02 00       	push   $0x23676
    ca28:	e8 1a c2 ff ff       	call   8c47 <printk>
    ca2d:	83 c4 10             	add    $0x10,%esp
	printk("%d pages shared\n\r", shared);
    ca30:	83 ec 08             	sub    $0x8,%esp
    ca33:	ff 74 24 10          	pushl  0x10(%esp)
    ca37:	68 8c 36 02 00       	push   $0x2368c
    ca3c:	e8 06 c2 ff ff       	call   8c47 <printk>
    ca41:	83 c4 10             	add    $0x10,%esp
	// 统计处理器分页管理逻辑页面数.页目录表前4项供内核代码使用,不列为统计范围,因此扫描处理的页目录项从第5项开始.方法是循环处理所有页目录项
	// (除前4个项),若对应的二级页表存在,那么先统计二级页表本身占用的内存页面,然后对该页表中所有页表项对应页面情况进行统计.
	k = 0;													// 一个进程占用页面统计值.
    ca44:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
    ca4b:	00 
	for(i = 4 ; i < 1024 ;) {
    ca4c:	c7 44 24 1c 04 00 00 	movl   $0x4,0x1c(%esp)
    ca53:	00 
    ca54:	e9 6c 01 00 00       	jmp    cbc5 <show_mem+0x236>
		if (1 & pg_dir[i]) {
    ca59:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    ca5d:	8b 04 85 00 00 00 00 	mov    0x0(,%eax,4),%eax
    ca64:	83 e0 01             	and    $0x1,%eax
    ca67:	85 c0                	test   %eax,%eax
    ca69:	0f 84 0e 01 00 00    	je     cb7d <show_mem+0x1ee>
			// (如果页目录项对应二级页表地址大于机器最高物理内存地址HIGH_MEMORY,说明该目录项有问题.于是显示该目录项信息并继续处理下一个目录项.
			if (pg_dir[i] > HIGH_MEMORY) {					// 目录项内容不正常.
    ca6f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    ca73:	8b 14 85 00 00 00 00 	mov    0x0(,%eax,4),%edx
    ca7a:	a1 80 f2 02 00       	mov    0x2f280,%eax
    ca7f:	39 c2                	cmp    %eax,%edx
    ca81:	76 25                	jbe    caa8 <show_mem+0x119>
				printk("page directory[%d]: %08X\n\r",
    ca83:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    ca87:	8b 04 85 00 00 00 00 	mov    0x0(,%eax,4),%eax
    ca8e:	83 ec 04             	sub    $0x4,%esp
    ca91:	50                   	push   %eax
    ca92:	ff 74 24 24          	pushl  0x24(%esp)
    ca96:	68 9e 36 02 00       	push   $0x2369e
    ca9b:	e8 a7 c1 ff ff       	call   8c47 <printk>
    caa0:	83 c4 10             	add    $0x10,%esp
					i, pg_dir[i]);
				continue;
    caa3:	e9 1d 01 00 00       	jmp    cbc5 <show_mem+0x236>
			}
			// 如果页目录项对应二级页表的"地址"大于LOW_MEM(即1MB),则把一个进程占用的物理内存页统计值k增1,把系统占用的所有物理内存页统计值free增1.
			// 然后邓对应页表地址pg_tb1,并对该页表中所有页表项进行统计.如果当前页表项所指物理页面存在并且该物理页面"地址"大于LOW_MEME,那么就将页表项对应页面
			// 纳入统计值.
			if (pg_dir[i] > LOW_MEM)
    caa8:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    caac:	8b 04 85 00 00 00 00 	mov    0x0(,%eax,4),%eax
    cab3:	3d 00 00 10 00       	cmp    $0x100000,%eax
    cab8:	76 0a                	jbe    cac4 <show_mem+0x135>
				free++, k++;								// 统计页表占用页面.
    caba:	83 44 24 10 01       	addl   $0x1,0x10(%esp)
    cabf:	83 44 24 14 01       	addl   $0x1,0x14(%esp)
			pg_tbl = (unsigned long *) (0xfffff000 & pg_dir[i]);
    cac4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    cac8:	8b 04 85 00 00 00 00 	mov    0x0(,%eax,4),%eax
    cacf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    cad4:	89 44 24 04          	mov    %eax,0x4(%esp)
			for(j = 0 ; j < 1024 ; j++)
    cad8:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
    cadf:	00 
    cae0:	e9 8a 00 00 00       	jmp    cb6f <show_mem+0x1e0>
				if ((pg_tbl[j]&1) && pg_tbl[j] > LOW_MEM)
    cae5:	8b 44 24 18          	mov    0x18(%esp),%eax
    cae9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    caf0:	8b 44 24 04          	mov    0x4(%esp),%eax
    caf4:	01 d0                	add    %edx,%eax
    caf6:	8b 00                	mov    (%eax),%eax
    caf8:	83 e0 01             	and    $0x1,%eax
    cafb:	85 c0                	test   %eax,%eax
    cafd:	74 6b                	je     cb6a <show_mem+0x1db>
    caff:	8b 44 24 18          	mov    0x18(%esp),%eax
    cb03:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    cb0a:	8b 44 24 04          	mov    0x4(%esp),%eax
    cb0e:	01 d0                	add    %edx,%eax
    cb10:	8b 00                	mov    (%eax),%eax
    cb12:	3d 00 00 10 00       	cmp    $0x100000,%eax
    cb17:	76 51                	jbe    cb6a <show_mem+0x1db>
					// (若该物理页面地址大于机器最高物理内存地址HIGH_MEMORY,则说明该页表项内容有问题,于是显示该页表项内容.否则将页表项对应页面纳入统计值.)
					if (pg_tbl[j] > HIGH_MEMORY)
    cb19:	8b 44 24 18          	mov    0x18(%esp),%eax
    cb1d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    cb24:	8b 44 24 04          	mov    0x4(%esp),%eax
    cb28:	01 d0                	add    %edx,%eax
    cb2a:	8b 10                	mov    (%eax),%edx
    cb2c:	a1 80 f2 02 00       	mov    0x2f280,%eax
    cb31:	39 c2                	cmp    %eax,%edx
    cb33:	76 2b                	jbe    cb60 <show_mem+0x1d1>
						printk("page_dir[%d][%d]: %08X\n\r",
							i, j, pg_tbl[j]);
    cb35:	8b 44 24 18          	mov    0x18(%esp),%eax
    cb39:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    cb40:	8b 44 24 04          	mov    0x4(%esp),%eax
    cb44:	01 d0                	add    %edx,%eax
			pg_tbl = (unsigned long *) (0xfffff000 & pg_dir[i]);
			for(j = 0 ; j < 1024 ; j++)
				if ((pg_tbl[j]&1) && pg_tbl[j] > LOW_MEM)
					// (若该物理页面地址大于机器最高物理内存地址HIGH_MEMORY,则说明该页表项内容有问题,于是显示该页表项内容.否则将页表项对应页面纳入统计值.)
					if (pg_tbl[j] > HIGH_MEMORY)
						printk("page_dir[%d][%d]: %08X\n\r",
    cb46:	8b 00                	mov    (%eax),%eax
    cb48:	50                   	push   %eax
    cb49:	ff 74 24 1c          	pushl  0x1c(%esp)
    cb4d:	ff 74 24 24          	pushl  0x24(%esp)
    cb51:	68 b9 36 02 00       	push   $0x236b9
    cb56:	e8 ec c0 ff ff       	call   8c47 <printk>
    cb5b:	83 c4 10             	add    $0x10,%esp
    cb5e:	eb 0a                	jmp    cb6a <show_mem+0x1db>
							i, j, pg_tbl[j]);
					else
						k++, free++;						// 统计责表项对应页面.
    cb60:	83 44 24 14 01       	addl   $0x1,0x14(%esp)
    cb65:	83 44 24 10 01       	addl   $0x1,0x10(%esp)
			// 然后邓对应页表地址pg_tb1,并对该页表中所有页表项进行统计.如果当前页表项所指物理页面存在并且该物理页面"地址"大于LOW_MEME,那么就将页表项对应页面
			// 纳入统计值.
			if (pg_dir[i] > LOW_MEM)
				free++, k++;								// 统计页表占用页面.
			pg_tbl = (unsigned long *) (0xfffff000 & pg_dir[i]);
			for(j = 0 ; j < 1024 ; j++)
    cb6a:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
    cb6f:	81 7c 24 18 ff 03 00 	cmpl   $0x3ff,0x18(%esp)
    cb76:	00 
    cb77:	0f 8e 68 ff ff ff    	jle    cae5 <show_mem+0x156>
					else
						k++, free++;						// 统计责表项对应页面.
		}
		// 因每个任务线性空间长度是64MB,所以一个任务占用16个目录项.因此这每统计了16个目录项就把进程的任务结构占用的页表统计进来.若此时k=0则表示当前的16个页
		// 目录所对应的进程在系统中不存在(没有创建或者已经终止).在显示了对应进程号和其占用的物理内存页统计值k后,将k清零,以用于统计下一个进程占用的内存页面数.
		i++;
    cb7d:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
		if (!(i & 15) && k) {
    cb82:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    cb86:	83 e0 0f             	and    $0xf,%eax
    cb89:	85 c0                	test   %eax,%eax
    cb8b:	75 38                	jne    cbc5 <show_mem+0x236>
    cb8d:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    cb92:	74 31                	je     cbc5 <show_mem+0x236>
			k++, free++;									/* one page/process for task_struct */
    cb94:	83 44 24 14 01       	addl   $0x1,0x14(%esp)
    cb99:	83 44 24 10 01       	addl   $0x1,0x10(%esp)
			printk("Process %d: %d pages\n\r", (i >> 4) - 1, k);
    cb9e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    cba2:	c1 f8 04             	sar    $0x4,%eax
    cba5:	83 e8 01             	sub    $0x1,%eax
    cba8:	83 ec 04             	sub    $0x4,%esp
    cbab:	ff 74 24 18          	pushl  0x18(%esp)
    cbaf:	50                   	push   %eax
    cbb0:	68 d2 36 02 00       	push   $0x236d2
    cbb5:	e8 8d c0 ff ff       	call   8c47 <printk>
    cbba:	83 c4 10             	add    $0x10,%esp
			k = 0;
    cbbd:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
    cbc4:	00 
	printk("%d free pages of %d\n\r", free, total);
	printk("%d pages shared\n\r", shared);
	// 统计处理器分页管理逻辑页面数.页目录表前4项供内核代码使用,不列为统计范围,因此扫描处理的页目录项从第5项开始.方法是循环处理所有页目录项
	// (除前4个项),若对应的二级页表存在,那么先统计二级页表本身占用的内存页面,然后对该页表中所有页表项对应页面情况进行统计.
	k = 0;													// 一个进程占用页面统计值.
	for(i = 4 ; i < 1024 ;) {
    cbc5:	81 7c 24 1c ff 03 00 	cmpl   $0x3ff,0x1c(%esp)
    cbcc:	00 
    cbcd:	0f 8e 86 fe ff ff    	jle    ca59 <show_mem+0xca>
			printk("Process %d: %d pages\n\r", (i >> 4) - 1, k);
			k = 0;
		}
	}
	// 最后显示系统中正在使用的内存页面和主内存区中总的内存页面数.
	printk("Memory found: %d (%d)\n\r\n\r", free - shared, total);
    cbd3:	8b 44 24 10          	mov    0x10(%esp),%eax
    cbd7:	2b 44 24 08          	sub    0x8(%esp),%eax
    cbdb:	83 ec 04             	sub    $0x4,%esp
    cbde:	ff 74 24 10          	pushl  0x10(%esp)
    cbe2:	50                   	push   %eax
    cbe3:	68 e9 36 02 00       	push   $0x236e9
    cbe8:	e8 5a c0 ff ff       	call   8c47 <printk>
    cbed:	83 c4 10             	add    $0x10,%esp
}
    cbf0:	90                   	nop
    cbf1:	83 c4 2c             	add    $0x2c,%esp
    cbf4:	c3                   	ret    

0000cbf5 <strncmp>:
// 字符串与字符串2的前count个字符进行比较.
// 参数:cs - 字符串1,ct - 字符串2,count - 比较的字符数.
// %0 - eax(__res)返回值,%1 - edi(cs)字符串1指针,%2 - esi(ct)字符串2指针,%3 - ecx(count).
// 返回:如果串1>串2,则返回1;串1=串2,则返回0;串1<串2,则返回-1.
static inline int strncmp(const char * cs, const char * ct, int count)
{
    cbf5:	57                   	push   %edi
    cbf6:	56                   	push   %esi
register int __res __asm__("ax");							// __res是寄存器变量(eax).
__asm__(
    cbf7:	8b 44 24 0c          	mov    0xc(%esp),%eax
    cbfb:	8b 54 24 10          	mov    0x10(%esp),%edx
    cbff:	8b 4c 24 14          	mov    0x14(%esp),%ecx
    cc03:	89 c7                	mov    %eax,%edi
    cc05:	89 d6                	mov    %edx,%esi
    cc07:	fc                   	cld    
    cc08:	49                   	dec    %ecx
    cc09:	78 08                	js     cc13 <strncmp+0x1e>
    cc0b:	ac                   	lods   %ds:(%esi),%al
    cc0c:	ae                   	scas   %es:(%edi),%al
    cc0d:	75 08                	jne    cc17 <strncmp+0x22>
    cc0f:	84 c0                	test   %al,%al
    cc11:	75 f5                	jne    cc08 <strncmp+0x13>
    cc13:	31 c0                	xor    %eax,%eax
    cc15:	eb 09                	jmp    cc20 <strncmp+0x2b>
    cc17:	b8 01 00 00 00       	mov    $0x1,%eax
    cc1c:	7c 02                	jl     cc20 <strncmp+0x2b>
    cc1e:	f7 d8                	neg    %eax
	"jl 4f\n\t"												// 如果前面比较中串2字符<串1字符,则返回1结束.
	"negl %%eax\n"											// 否则eax=-eax,返回负值,结束.
	"4:"
	:"=a" (__res):"D" (cs), "S" (ct), "c" (count):);
return __res;												// 返回比较结果.
}
    cc20:	5e                   	pop    %esi
    cc21:	5f                   	pop    %edi
    cc22:	c3                   	ret    

0000cc23 <memset>:

// 用字符填写指定长度内存块.
// 用字符c填写s指向的内存区域,共填count字节.
// %0 - eax(字符c),%1 - edi(内存地址),%2 - ecx(字节数count).
static inline void * memset(void * s, char c, int count)
{
    cc23:	57                   	push   %edi
    cc24:	83 ec 04             	sub    $0x4,%esp
    cc27:	8b 44 24 10          	mov    0x10(%esp),%eax
    cc2b:	88 04 24             	mov    %al,(%esp)
__asm__(
    cc2e:	0f b6 04 24          	movzbl (%esp),%eax
    cc32:	8b 54 24 0c          	mov    0xc(%esp),%edx
    cc36:	8b 4c 24 14          	mov    0x14(%esp),%ecx
    cc3a:	89 d7                	mov    %edx,%edi
    cc3c:	fc                   	cld    
    cc3d:	57                   	push   %edi
    cc3e:	f3 aa                	rep stos %al,%es:(%edi)
    cc40:	5f                   	pop    %edi
		"rep\n\t"											// 重复ecx指定的次数,执行.
		"stosb\n\t"											// 将al中字符存入es:[edi]中,并且edi++.
		"popl %%edi"
		::"a" (c), "D" (s), "c" (count)
		:);
return s;
    cc41:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    cc45:	83 c4 04             	add    $0x4,%esp
    cc48:	5f                   	pop    %edi
    cc49:	c3                   	ret    

0000cc4a <oom>:
void swap_in(unsigned long *table_ptr);                                             // 把页表项是table_ptr的一页物理内存换出到交换空间

// 下面函数名前关键字volatile用于告诉编译器gcc该函数不会返回.这样可让gcc产生更好的代码,更重要的是使用这个关键字可以避免产生某些(未
//　初始化变量的)假警告信息.
static inline void oom(void)
{
    cc4a:	83 ec 0c             	sub    $0xc,%esp
	printk("out of memory\n\r");
    cc4d:	83 ec 0c             	sub    $0xc,%esp
    cc50:	68 04 37 02 00       	push   $0x23704
    cc55:	e8 ed bf ff ff       	call   8c47 <printk>
    cc5a:	83 c4 10             	add    $0x10,%esp
    //　do_exit()应该使用退出代码,这里用了信息值SIGSEGV(11).相同值的出错码含义是"资源暂不可用",正好同义.
	do_exit(SIGSEGV);
    cc5d:	83 ec 0c             	sub    $0xc,%esp
    cc60:	6a 0b                	push   $0xb
    cc62:	e8 83 e1 ff ff       	call   adea <do_exit>
    cc67:	83 c4 10             	add    $0x10,%esp
}
    cc6a:	90                   	nop
    cc6b:	83 c4 0c             	add    $0xc,%esp
    cc6e:	c3                   	ret    

0000cc6f <bit>:
:"r" (nr),"m" (*(addr)),"0" (0)); \
return __res; \
}

// 这里根据不同的op字符定义3个内嵌函数.
bitop(bit, "")								// 定义内嵌函数bit(char * addr, unsigned int nr).
    cc6f:	83 ec 10             	sub    $0x10,%esp
    cc72:	8b 54 24 18          	mov    0x18(%esp),%edx
    cc76:	8b 4c 24 14          	mov    0x14(%esp),%ecx
    cc7a:	b8 00 00 00 00       	mov    $0x0,%eax
    cc7f:	b8 00 00 00 00       	mov    $0x0,%eax
    cc84:	0f a3 11             	bt     %edx,(%ecx)
    cc87:	83 d0 00             	adc    $0x0,%eax
    cc8a:	89 44 24 0c          	mov    %eax,0xc(%esp)
    cc8e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    cc92:	83 c4 10             	add    $0x10,%esp
    cc95:	c3                   	ret    

0000cc96 <setbit>:
bitop(setbit, "s")							// 定义内嵌函数setbit(char * addr, unsigned int nr).
    cc96:	83 ec 10             	sub    $0x10,%esp
    cc99:	8b 54 24 18          	mov    0x18(%esp),%edx
    cc9d:	8b 4c 24 14          	mov    0x14(%esp),%ecx
    cca1:	b8 00 00 00 00       	mov    $0x0,%eax
    cca6:	b8 00 00 00 00       	mov    $0x0,%eax
    ccab:	0f ab 11             	bts    %edx,(%ecx)
    ccae:	83 d0 00             	adc    $0x0,%eax
    ccb1:	89 44 24 0c          	mov    %eax,0xc(%esp)
    ccb5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ccb9:	83 c4 10             	add    $0x10,%esp
    ccbc:	c3                   	ret    

0000ccbd <clrbit>:
bitop(clrbit, "r")							// 定义内嵌函数clrbit(char * addr, unsigned int nr).
    ccbd:	83 ec 10             	sub    $0x10,%esp
    ccc0:	8b 54 24 18          	mov    0x18(%esp),%edx
    ccc4:	8b 4c 24 14          	mov    0x14(%esp),%ecx
    ccc8:	b8 00 00 00 00       	mov    $0x0,%eax
    cccd:	b8 00 00 00 00       	mov    $0x0,%eax
    ccd2:	0f b3 11             	btr    %edx,(%ecx)
    ccd5:	83 d0 00             	adc    $0x0,%eax
    ccd8:	89 44 24 0c          	mov    %eax,0xc(%esp)
    ccdc:	8b 44 24 0c          	mov    0xc(%esp),%eax
    cce0:	83 c4 10             	add    $0x10,%esp
    cce3:	c3                   	ret    

0000cce4 <get_swap_page>:
#define VM_PAGES (LAST_VM_PAGE - FIRST_VM_PAGE)					// = 1032192(从0开始计)(用总的页面数减去第0个任务的页面数)

// 申请1页交换页面.
// 扫描整个交换映射位图(除对应位图本身的位0以外),返回值为1的第一个比特位号,即目前空闲的交换页面号.若操作成功则返回交换页面号,否则返回0.
static int get_swap_page(void)
{
    cce4:	83 ec 10             	sub    $0x10,%esp
	int nr;

	if (!swap_bitmap)
    cce7:	a1 a4 01 03 00       	mov    0x301a4,%eax
    ccec:	85 c0                	test   %eax,%eax
    ccee:	75 07                	jne    ccf7 <get_swap_page+0x13>
		return 0;
    ccf0:	b8 00 00 00 00       	mov    $0x0,%eax
    ccf5:	eb 3b                	jmp    cd32 <get_swap_page+0x4e>
	for (nr = 1; nr < 32768 ; nr++)
    ccf7:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
    ccfe:	00 
    ccff:	eb 22                	jmp    cd23 <get_swap_page+0x3f>
		if (clrbit(swap_bitmap, nr))
    cd01:	8b 54 24 0c          	mov    0xc(%esp),%edx
    cd05:	a1 a4 01 03 00       	mov    0x301a4,%eax
    cd0a:	52                   	push   %edx
    cd0b:	50                   	push   %eax
    cd0c:	e8 ac ff ff ff       	call   ccbd <clrbit>
    cd11:	83 c4 08             	add    $0x8,%esp
    cd14:	85 c0                	test   %eax,%eax
    cd16:	74 06                	je     cd1e <get_swap_page+0x3a>
			return nr;					// 返回目前空闲的交换页面号.
    cd18:	8b 44 24 0c          	mov    0xc(%esp),%eax
    cd1c:	eb 14                	jmp    cd32 <get_swap_page+0x4e>
{
	int nr;

	if (!swap_bitmap)
		return 0;
	for (nr = 1; nr < 32768 ; nr++)
    cd1e:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    cd23:	81 7c 24 0c ff 7f 00 	cmpl   $0x7fff,0xc(%esp)
    cd2a:	00 
    cd2b:	7e d4                	jle    cd01 <get_swap_page+0x1d>
		if (clrbit(swap_bitmap, nr))
			return nr;					// 返回目前空闲的交换页面号.
	return 0;
    cd2d:	b8 00 00 00 00       	mov    $0x0,%eax
}
    cd32:	83 c4 10             	add    $0x10,%esp
    cd35:	c3                   	ret    

0000cd36 <swap_free>:

// 释放交换设备中指定的交换页面.
// 在交换位图中设置指定页面号对应的位(置1).若原来该位就等于1,则表示交换设备中原来该页面就没有被占用,或者位图出错.于是显示出错信息并返回.
// 参数指定交换页面号.
void swap_free(int swap_nr)
{
    cd36:	83 ec 0c             	sub    $0xc,%esp
	if (!swap_nr)
    cd39:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    cd3e:	74 3d                	je     cd7d <swap_free+0x47>
		return;
	if (swap_bitmap && swap_nr < SWAP_BITS)
    cd40:	a1 a4 01 03 00       	mov    0x301a4,%eax
    cd45:	85 c0                	test   %eax,%eax
    cd47:	74 21                	je     cd6a <swap_free+0x34>
    cd49:	81 7c 24 10 ff 7f 00 	cmpl   $0x7fff,0x10(%esp)
    cd50:	00 
    cd51:	7f 17                	jg     cd6a <swap_free+0x34>
		if (!setbit(swap_bitmap, swap_nr))
    cd53:	8b 54 24 10          	mov    0x10(%esp),%edx
    cd57:	a1 a4 01 03 00       	mov    0x301a4,%eax
    cd5c:	52                   	push   %edx
    cd5d:	50                   	push   %eax
    cd5e:	e8 33 ff ff ff       	call   cc96 <setbit>
    cd63:	83 c4 08             	add    $0x8,%esp
    cd66:	85 c0                	test   %eax,%eax
    cd68:	74 16                	je     cd80 <swap_free+0x4a>
			return;
	printk("Swap-space bad (swap_free())\n\r");
    cd6a:	83 ec 0c             	sub    $0xc,%esp
    cd6d:	68 14 37 02 00       	push   $0x23714
    cd72:	e8 d0 be ff ff       	call   8c47 <printk>
    cd77:	83 c4 10             	add    $0x10,%esp
	return;
    cd7a:	90                   	nop
    cd7b:	eb 04                	jmp    cd81 <swap_free+0x4b>
// 在交换位图中设置指定页面号对应的位(置1).若原来该位就等于1,则表示交换设备中原来该页面就没有被占用,或者位图出错.于是显示出错信息并返回.
// 参数指定交换页面号.
void swap_free(int swap_nr)
{
	if (!swap_nr)
		return;
    cd7d:	90                   	nop
    cd7e:	eb 01                	jmp    cd81 <swap_free+0x4b>
	if (swap_bitmap && swap_nr < SWAP_BITS)
		if (!setbit(swap_bitmap, swap_nr))
			return;
    cd80:	90                   	nop
	printk("Swap-space bad (swap_free())\n\r");
	return;
}
    cd81:	83 c4 0c             	add    $0xc,%esp
    cd84:	c3                   	ret    

0000cd85 <swap_in>:

// 把指定页面交换进内存中
// 把指定页表项的对应页面从交换设备中读入到新申请的内存页面中.修改交换位图中对应位(置位),同时修改页表项内容,让它指向该内存页面,并设置相应标志.
void swap_in(unsigned long *table_ptr)
{
    cd85:	83 ec 1c             	sub    $0x1c,%esp
	int swap_nr;
	unsigned long page;

	// 首先检查交换位图和参数有效性.如果交换位图不存在,或者指定页表项对应的页面已存在于内存中,或者交换页面号为0,则显示警告信息并退出.对于已放到交换
	// 设备中去的内存页面,相应页表项中存放的应是交换页面号*2,即(swap_nr << 1).
	if (!swap_bitmap) {
    cd88:	a1 a4 01 03 00       	mov    0x301a4,%eax
    cd8d:	85 c0                	test   %eax,%eax
    cd8f:	75 15                	jne    cda6 <swap_in+0x21>
		printk("Trying to swap in without swap bit-map");
    cd91:	83 ec 0c             	sub    $0xc,%esp
    cd94:	68 34 37 02 00       	push   $0x23734
    cd99:	e8 a9 be ff ff       	call   8c47 <printk>
    cd9e:	83 c4 10             	add    $0x10,%esp
		return;
    cda1:	e9 ae 00 00 00       	jmp    ce54 <swap_in+0xcf>
	}
	if (1 & *table_ptr) {
    cda6:	8b 44 24 20          	mov    0x20(%esp),%eax
    cdaa:	8b 00                	mov    (%eax),%eax
    cdac:	83 e0 01             	and    $0x1,%eax
    cdaf:	85 c0                	test   %eax,%eax
    cdb1:	74 15                	je     cdc8 <swap_in+0x43>
		printk("trying to swap in present page\n\r");
    cdb3:	83 ec 0c             	sub    $0xc,%esp
    cdb6:	68 5c 37 02 00       	push   $0x2375c
    cdbb:	e8 87 be ff ff       	call   8c47 <printk>
    cdc0:	83 c4 10             	add    $0x10,%esp
		return;
    cdc3:	e9 8c 00 00 00       	jmp    ce54 <swap_in+0xcf>
	}
	swap_nr = *table_ptr >> 1;
    cdc8:	8b 44 24 20          	mov    0x20(%esp),%eax
    cdcc:	8b 00                	mov    (%eax),%eax
    cdce:	d1 e8                	shr    %eax
    cdd0:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (!swap_nr) {
    cdd4:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    cdd9:	75 12                	jne    cded <swap_in+0x68>
		printk("No swap page in swap_in\n\r");
    cddb:	83 ec 0c             	sub    $0xc,%esp
    cdde:	68 7d 37 02 00       	push   $0x2377d
    cde3:	e8 5f be ff ff       	call   8c47 <printk>
    cde8:	83 c4 10             	add    $0x10,%esp
		return;
    cdeb:	eb 67                	jmp    ce54 <swap_in+0xcf>
	}
	// 然后申请一页物理内存并从交换设备中读入页面号为swap_nr的页面.在把页面交换进来后,就把交换位图中对应比特位置位.如果其原本就是置位的,说明此次是再次
	// 从交换设备中读入相同的页面,于是显示一下警告信息.最后让页表指向该物理页面,并设置页面已修改,用户可读写和存在标志(Dirty,U/S,R/W,P).
	if (!(page = get_free_page()))
    cded:	e8 9c 02 00 00       	call   d08e <get_free_page>
    cdf2:	89 44 24 08          	mov    %eax,0x8(%esp)
    cdf6:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    cdfb:	75 05                	jne    ce02 <swap_in+0x7d>
		oom();
    cdfd:	e8 48 fe ff ff       	call   cc4a <oom>
	read_swap_page(swap_nr, (char *) page);
    ce02:	8b 54 24 08          	mov    0x8(%esp),%edx
    ce06:	a1 a0 01 03 00       	mov    0x301a0,%eax
    ce0b:	52                   	push   %edx
    ce0c:	ff 74 24 10          	pushl  0x10(%esp)
    ce10:	50                   	push   %eax
    ce11:	6a 00                	push   $0x0
    ce13:	e8 a4 9a 00 00       	call   168bc <ll_rw_page>
    ce18:	83 c4 10             	add    $0x10,%esp
	if (setbit(swap_bitmap, swap_nr))
    ce1b:	8b 54 24 0c          	mov    0xc(%esp),%edx
    ce1f:	a1 a4 01 03 00       	mov    0x301a4,%eax
    ce24:	83 ec 08             	sub    $0x8,%esp
    ce27:	52                   	push   %edx
    ce28:	50                   	push   %eax
    ce29:	e8 68 fe ff ff       	call   cc96 <setbit>
    ce2e:	83 c4 10             	add    $0x10,%esp
    ce31:	85 c0                	test   %eax,%eax
    ce33:	74 10                	je     ce45 <swap_in+0xc0>
		printk("swapping in multiply from same page\n\r");
    ce35:	83 ec 0c             	sub    $0xc,%esp
    ce38:	68 98 37 02 00       	push   $0x23798
    ce3d:	e8 05 be ff ff       	call   8c47 <printk>
    ce42:	83 c4 10             	add    $0x10,%esp
	*table_ptr = page | (PAGE_DIRTY | 7);
    ce45:	8b 44 24 08          	mov    0x8(%esp),%eax
    ce49:	83 c8 47             	or     $0x47,%eax
    ce4c:	89 c2                	mov    %eax,%edx
    ce4e:	8b 44 24 20          	mov    0x20(%esp),%eax
    ce52:	89 10                	mov    %edx,(%eax)
}
    ce54:	83 c4 1c             	add    $0x1c,%esp
    ce57:	c3                   	ret    

0000ce58 <try_to_swap_out>:

// 尝试把页面交换出去.
// 若页面没有被修改过则不必保存在交换设备中,因为对应页面还可以再直接从相应映像文件中读入.于是可以直接释放掉相应物理页面了事.否则就申请一个交换页面号,然后
// 把页面交换出去.此时交换页面号要保存在对应页表项中,并且仍需要保持页表项存在位P=0.参数是页表项指针.页面换或释放成功返回1,否则返回0.
int try_to_swap_out(unsigned long * table_ptr)
{
    ce58:	83 ec 1c             	sub    $0x1c,%esp
	unsigned long page;
	unsigned long swap_nr;

	// 首先判断参数的有效性.若需要交换出去的内存页面并不存在(或称无效),则即可退出.若页表项指定的物理页面地址大于分页管理的内存高端PAGING_MEMORY(15MB),
	// 也退出.
	page = *table_ptr;
    ce5b:	8b 44 24 20          	mov    0x20(%esp),%eax
    ce5f:	8b 00                	mov    (%eax),%eax
    ce61:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (!(PAGE_PRESENT & page))
    ce65:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ce69:	83 e0 01             	and    $0x1,%eax
    ce6c:	85 c0                	test   %eax,%eax
    ce6e:	75 0a                	jne    ce7a <try_to_swap_out+0x22>
		return 0;
    ce70:	b8 00 00 00 00       	mov    $0x0,%eax
    ce75:	e9 d4 00 00 00       	jmp    cf4e <try_to_swap_out+0xf6>
	if (page - LOW_MEM > PAGING_MEMORY)
    ce7a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ce7e:	2d 00 00 10 00       	sub    $0x100000,%eax
    ce83:	3d 00 00 f0 00       	cmp    $0xf00000,%eax
    ce88:	76 0a                	jbe    ce94 <try_to_swap_out+0x3c>
		return 0;
    ce8a:	b8 00 00 00 00       	mov    $0x0,%eax
    ce8f:	e9 ba 00 00 00       	jmp    cf4e <try_to_swap_out+0xf6>
	// 若内存页面已被修改过,但是该页面是被共享的,那么为了提高运行效率,此类页面不宜被交换出去,于是直接退出,函数返回0.否则就申请一交换页面号,并把它保存在页表
	// 项中,然后把页面交换出去并释放对应物理内存页面.
	if (PAGE_DIRTY & page) {
    ce94:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ce98:	83 e0 40             	and    $0x40,%eax
    ce9b:	85 c0                	test   %eax,%eax
    ce9d:	0f 84 85 00 00 00    	je     cf28 <try_to_swap_out+0xd0>
		page &= 0xfffff000;									// 取物理页面地址.
    cea3:	81 64 24 0c 00 f0 ff 	andl   $0xfffff000,0xc(%esp)
    ceaa:	ff 
		if (mem_map[MAP_NR(page)] != 1)
    ceab:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ceaf:	2d 00 00 10 00       	sub    $0x100000,%eax
    ceb4:	c1 e8 0c             	shr    $0xc,%eax
    ceb7:	0f b6 80 a0 f2 02 00 	movzbl 0x2f2a0(%eax),%eax
    cebe:	3c 01                	cmp    $0x1,%al
    cec0:	74 0a                	je     cecc <try_to_swap_out+0x74>
			return 0;
    cec2:	b8 00 00 00 00       	mov    $0x0,%eax
    cec7:	e9 82 00 00 00       	jmp    cf4e <try_to_swap_out+0xf6>
		if (!(swap_nr = get_swap_page()))					// 申请交换页面号.
    cecc:	e8 13 fe ff ff       	call   cce4 <get_swap_page>
    ced1:	89 44 24 08          	mov    %eax,0x8(%esp)
    ced5:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    ceda:	75 07                	jne    cee3 <try_to_swap_out+0x8b>
			return 0;
    cedc:	b8 00 00 00 00       	mov    $0x0,%eax
    cee1:	eb 6b                	jmp    cf4e <try_to_swap_out+0xf6>
		// 对于要交换设备中的页面,相应页表项中将存放的是(swap_nr << 1).乘2(左移1位)是为了空出原来页表项的存在位(P).只有存在位P=0并且页表项内容不为0的页面才会在
		// 交换设备中.Intel手册中明确指出,当一个表项的存在位P=0时(无效页表项),所有其他位(位31-1)可供随意使用.下面写交换页函数write_swap_page(nr,buffer)被
		// 定义为ll_rw_page(WRITE,SWAP_DEV,(nr),(buffer)).
		*table_ptr = swap_nr << 1;
    cee3:	8b 44 24 08          	mov    0x8(%esp),%eax
    cee7:	8d 14 00             	lea    (%eax,%eax,1),%edx
    ceea:	8b 44 24 20          	mov    0x20(%esp),%eax
    ceee:	89 10                	mov    %edx,(%eax)
		invalidate();										// 刷新CPU页变换高速缓冲.
    cef0:	b8 00 00 00 00       	mov    $0x0,%eax
    cef5:	0f 22 d8             	mov    %eax,%cr3
		write_swap_page(swap_nr, (char *) page);
    cef8:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
    cefc:	8b 54 24 08          	mov    0x8(%esp),%edx
    cf00:	a1 a0 01 03 00       	mov    0x301a0,%eax
    cf05:	51                   	push   %ecx
    cf06:	52                   	push   %edx
    cf07:	50                   	push   %eax
    cf08:	6a 01                	push   $0x1
    cf0a:	e8 ad 99 00 00       	call   168bc <ll_rw_page>
    cf0f:	83 c4 10             	add    $0x10,%esp
		free_page(page);
    cf12:	83 ec 0c             	sub    $0xc,%esp
    cf15:	ff 74 24 18          	pushl  0x18(%esp)
    cf19:	e8 e1 ed ff ff       	call   bcff <free_page>
    cf1e:	83 c4 10             	add    $0x10,%esp
		return 1;
    cf21:	b8 01 00 00 00       	mov    $0x1,%eax
    cf26:	eb 26                	jmp    cf4e <try_to_swap_out+0xf6>
	}
	// 否则表明页面没有修改过.那么就不用交换出去,而直接释放即可.
	*table_ptr = 0;
    cf28:	8b 44 24 20          	mov    0x20(%esp),%eax
    cf2c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	invalidate();
    cf32:	b8 00 00 00 00       	mov    $0x0,%eax
    cf37:	0f 22 d8             	mov    %eax,%cr3
	free_page(page);
    cf3a:	83 ec 0c             	sub    $0xc,%esp
    cf3d:	ff 74 24 18          	pushl  0x18(%esp)
    cf41:	e8 b9 ed ff ff       	call   bcff <free_page>
    cf46:	83 c4 10             	add    $0x10,%esp
	return 1;
    cf49:	b8 01 00 00 00       	mov    $0x1,%eax
}
    cf4e:	83 c4 1c             	add    $0x1c,%esp
    cf51:	c3                   	ret    

0000cf52 <swap_out>:
 */
// 把内存页面放到交换设备中.
// 从线性地址64MB对应的目录项(FIRST_VM_PAGE>>10)开始,搜索整个4GB线性空间,对有效页目录二级页表指定的物理内存页面执行交换
// 到交换设备中去的尝试.一旦成功地交换出一个页面,就返回-1.否则返回0.该函数会在get_free_page()中被调用.
int swap_out(void)
{
    cf52:	83 ec 1c             	sub    $0x1c,%esp
	static int dir_entry = FIRST_VM_PAGE >> 10;	// 即任务1的第1个目录项索引.
	static int page_entry = -1;
	int counter = VM_PAGES;						// 表示除去任务0以外的其他任务的所有页数目
    cf55:	c7 44 24 0c 00 c0 0f 	movl   $0xfc000,0xc(%esp)
    cf5c:	00 
	int pg_table;

	// 首先搜索页目录表,查找二级页表存在的页目录项pg_table.找到则退出循环,否则高速页目录项数对应剩余二级页表项数counter,然后继续
	// 检测下一项目录项.若全部搜索完还没有找到适合的(存在的)页目录项,就重新搜索.
	while (counter > 0) {
    cf5d:	eb 46                	jmp    cfa5 <swap_out+0x53>
		pg_table = pg_dir[dir_entry];			// 页目录项内容.
    cf5f:	a1 50 e3 02 00       	mov    0x2e350,%eax
    cf64:	8b 04 85 00 00 00 00 	mov    0x0(,%eax,4),%eax
    cf6b:	89 44 24 08          	mov    %eax,0x8(%esp)
		if (pg_table & 1)
    cf6f:	8b 44 24 08          	mov    0x8(%esp),%eax
    cf73:	83 e0 01             	and    $0x1,%eax
    cf76:	85 c0                	test   %eax,%eax
    cf78:	75 34                	jne    cfae <swap_out+0x5c>
			break;
		counter -= 1024;						// 1个页表对应1024个页帧
    cf7a:	81 6c 24 0c 00 04 00 	subl   $0x400,0xc(%esp)
    cf81:	00 
		dir_entry++;							// 下一目录项.
    cf82:	a1 50 e3 02 00       	mov    0x2e350,%eax
    cf87:	83 c0 01             	add    $0x1,%eax
    cf8a:	a3 50 e3 02 00       	mov    %eax,0x2e350
		// 如果整个4GB的1024个页目录项检查完了则又回到第1个任务重新开始检查
		if (dir_entry >= 1024)
    cf8f:	a1 50 e3 02 00       	mov    0x2e350,%eax
    cf94:	3d ff 03 00 00       	cmp    $0x3ff,%eax
    cf99:	7e 0a                	jle    cfa5 <swap_out+0x53>
			dir_entry = FIRST_VM_PAGE >> 10;
    cf9b:	c7 05 50 e3 02 00 10 	movl   $0x10,0x2e350
    cfa2:	00 00 00 
	int counter = VM_PAGES;						// 表示除去任务0以外的其他任务的所有页数目
	int pg_table;

	// 首先搜索页目录表,查找二级页表存在的页目录项pg_table.找到则退出循环,否则高速页目录项数对应剩余二级页表项数counter,然后继续
	// 检测下一项目录项.若全部搜索完还没有找到适合的(存在的)页目录项,就重新搜索.
	while (counter > 0) {
    cfa5:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    cfaa:	7f b3                	jg     cf5f <swap_out+0xd>
    cfac:	eb 01                	jmp    cfaf <swap_out+0x5d>
		pg_table = pg_dir[dir_entry];			// 页目录项内容.
		if (pg_table & 1)
			break;
    cfae:	90                   	nop
		if (dir_entry >= 1024)
			dir_entry = FIRST_VM_PAGE >> 10;
	}
	// 在取得当前目录项的页表指针后,针对该页表中的所有1024个页面,逐一调用交换函数try_to_swap_out()尝试交换出去.一旦某个页面成功交换到交换设备
	// 中就返回1.若对所有目录项的所有页表都已尝试失败,则显示"交换内存用完"的警告,并返回0.
	pg_table &= 0xfffff000;						// 页表指针(地址)(页对齐)
    cfaf:	81 64 24 08 00 f0 ff 	andl   $0xfffff000,0x8(%esp)
    cfb6:	ff 
	while (counter-- > 0) {
    cfb7:	e9 a3 00 00 00       	jmp    d05f <swap_out+0x10d>
		page_entry++;
    cfbc:	a1 54 e3 02 00       	mov    0x2e354,%eax
    cfc1:	83 c0 01             	add    $0x1,%eax
    cfc4:	a3 54 e3 02 00       	mov    %eax,0x2e354
		// 如果已经尝试处理完当前页表所有项还没有能够成功地交换出一个页面,即此时页表项索引大于等于1024,则如同前面第135-143行执行相同的处理来选出一个
		// 二级页表存在的页目录项,并取得相应二级页表指针.
		if (page_entry >= 1024) {
    cfc9:	a1 54 e3 02 00       	mov    0x2e354,%eax
    cfce:	3d ff 03 00 00       	cmp    $0x3ff,%eax
    cfd3:	7e 61                	jle    d036 <swap_out+0xe4>
			page_entry = 0;
    cfd5:	c7 05 54 e3 02 00 00 	movl   $0x0,0x2e354
    cfdc:	00 00 00 
		repeat:
			dir_entry++;
    cfdf:	a1 50 e3 02 00       	mov    0x2e350,%eax
    cfe4:	83 c0 01             	add    $0x1,%eax
    cfe7:	a3 50 e3 02 00       	mov    %eax,0x2e350
			if (dir_entry >= 1024)
    cfec:	a1 50 e3 02 00       	mov    0x2e350,%eax
    cff1:	3d ff 03 00 00       	cmp    $0x3ff,%eax
    cff6:	7e 0a                	jle    d002 <swap_out+0xb0>
				dir_entry = FIRST_VM_PAGE >> 10;
    cff8:	c7 05 50 e3 02 00 10 	movl   $0x10,0x2e350
    cfff:	00 00 00 
			pg_table = pg_dir[dir_entry];		// 页目录项内容.
    d002:	a1 50 e3 02 00       	mov    0x2e350,%eax
    d007:	8b 04 85 00 00 00 00 	mov    0x0(,%eax,4),%eax
    d00e:	89 44 24 08          	mov    %eax,0x8(%esp)
			if (!(pg_table & 1))
    d012:	8b 44 24 08          	mov    0x8(%esp),%eax
    d016:	83 e0 01             	and    $0x1,%eax
    d019:	85 c0                	test   %eax,%eax
    d01b:	75 11                	jne    d02e <swap_out+0xdc>
				if ((counter -= 1024) > 0)
    d01d:	81 6c 24 0c 00 04 00 	subl   $0x400,0xc(%esp)
    d024:	00 
    d025:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d02a:	7e 48                	jle    d074 <swap_out+0x122>
					goto repeat;
    d02c:	eb b1                	jmp    cfdf <swap_out+0x8d>
				else
					break;
			pg_table &= 0xfffff000;				// 页表指针.
    d02e:	81 64 24 08 00 f0 ff 	andl   $0xfffff000,0x8(%esp)
    d035:	ff 
		}
		if (try_to_swap_out(page_entry + (unsigned long *) pg_table))
    d036:	a1 54 e3 02 00       	mov    0x2e354,%eax
    d03b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    d042:	8b 44 24 08          	mov    0x8(%esp),%eax
    d046:	01 d0                	add    %edx,%eax
    d048:	83 ec 0c             	sub    $0xc,%esp
    d04b:	50                   	push   %eax
    d04c:	e8 07 fe ff ff       	call   ce58 <try_to_swap_out>
    d051:	83 c4 10             	add    $0x10,%esp
    d054:	85 c0                	test   %eax,%eax
    d056:	74 07                	je     d05f <swap_out+0x10d>
			return 1;
    d058:	b8 01 00 00 00       	mov    $0x1,%eax
    d05d:	eb 2b                	jmp    d08a <swap_out+0x138>
			dir_entry = FIRST_VM_PAGE >> 10;
	}
	// 在取得当前目录项的页表指针后,针对该页表中的所有1024个页面,逐一调用交换函数try_to_swap_out()尝试交换出去.一旦某个页面成功交换到交换设备
	// 中就返回1.若对所有目录项的所有页表都已尝试失败,则显示"交换内存用完"的警告,并返回0.
	pg_table &= 0xfffff000;						// 页表指针(地址)(页对齐)
	while (counter-- > 0) {
    d05f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d063:	8d 50 ff             	lea    -0x1(%eax),%edx
    d066:	89 54 24 0c          	mov    %edx,0xc(%esp)
    d06a:	85 c0                	test   %eax,%eax
    d06c:	0f 8f 4a ff ff ff    	jg     cfbc <swap_out+0x6a>
    d072:	eb 01                	jmp    d075 <swap_out+0x123>
			pg_table = pg_dir[dir_entry];		// 页目录项内容.
			if (!(pg_table & 1))
				if ((counter -= 1024) > 0)
					goto repeat;
				else
					break;
    d074:	90                   	nop
			pg_table &= 0xfffff000;				// 页表指针.
		}
		if (try_to_swap_out(page_entry + (unsigned long *) pg_table))
			return 1;
        }
	printk("Out of swap-memory\n\r");
    d075:	83 ec 0c             	sub    $0xc,%esp
    d078:	68 be 37 02 00       	push   $0x237be
    d07d:	e8 c5 bb ff ff       	call   8c47 <printk>
    d082:	83 c4 10             	add    $0x10,%esp
	return 0;
    d085:	b8 00 00 00 00       	mov    $0x0,%eax
}
    d08a:	83 c4 1c             	add    $0x1c,%esp
    d08d:	c3                   	ret    

0000d08e <get_free_page>:
// 上面%4寄存器实际指向mem_map[]内存字节位图的最后一个字节.本函数从位图末端开始向前扫描所有页面标志(页面总数为PAGING_AGES),若有页面空闲
// (内存位图字节为0)则返回页面地址.注意!本函数只是指出在主内存区的一页空闲物理页面,但并没有映射到某个进程的地址空间中去.后面的put_page()函数
// 即用于把指定页面映射到某个进程的地址空间中.当然对于内核使用本函数并不需要再使用put_page()进行映射,因为内核代码和数据空间(16MB)已经对等
// 地映射到物理地址空间.
unsigned long get_free_page(void)
{
    d08e:	57                   	push   %edi
    d08f:	53                   	push   %ebx
    d090:	83 ec 04             	sub    $0x4,%esp
		"movl %%edx, %%eax							/* 将页面起始地址->eax(返回值). */\n\t"
		"1:\n\t"
		"cld"
		:"=a" (__res)
		:"0" (0), "i" (LOW_MEM), "c" (PAGING_PAGES),
		"D" (mem_map + PAGING_PAGES - 1)
    d093:	bb 9f 01 03 00       	mov    $0x3019f,%ebx
register unsigned long __res;

// 首先在内存映射字节位图中查找址为0的字节项,然后把对应物理内存页面清零.如果得到的页面地址大于实际物理内存容量则重新寻找.如果没有找到空闲页面则
// 去调用执行交换处理,并重新查找.最后返回空闲物理页面地址.
repeat:
	__asm__(
    d098:	b8 00 00 00 00       	mov    $0x0,%eax
    d09d:	b9 00 0f 00 00       	mov    $0xf00,%ecx
    d0a2:	89 df                	mov    %ebx,%edi
    d0a4:	fd                   	std    
    d0a5:	f2 ae                	repnz scas %es:(%edi),%al
    d0a7:	75 1e                	jne    d0c7 <get_free_page+0x39>
    d0a9:	c6 47 01 01          	movb   $0x1,0x1(%edi)
    d0ad:	c1 e1 0c             	shl    $0xc,%ecx
    d0b0:	81 c1 00 00 10 00    	add    $0x100000,%ecx
    d0b6:	89 ca                	mov    %ecx,%edx
    d0b8:	b9 00 04 00 00       	mov    $0x400,%ecx
    d0bd:	8d ba fc 0f 00 00    	lea    0xffc(%edx),%edi
    d0c3:	f3 ab                	rep stos %eax,%es:(%edi)
    d0c5:	89 d0                	mov    %edx,%eax
    d0c7:	fc                   	cld    
    d0c8:	89 c3                	mov    %eax,%ebx
		"cld"
		:"=a" (__res)
		:"0" (0), "i" (LOW_MEM), "c" (PAGING_PAGES),
		"D" (mem_map + PAGING_PAGES - 1)
		:"dx");
	if (__res >= HIGH_MEMORY)						// 页面地址大于实际内存容量则重新寻找
    d0ca:	a1 80 f2 02 00       	mov    0x2f280,%eax
    d0cf:	39 c3                	cmp    %eax,%ebx
    d0d1:	72 02                	jb     d0d5 <get_free_page+0x47>
		goto repeat;
    d0d3:	eb be                	jmp    d093 <get_free_page+0x5>
	if (!__res && swap_out())						// 若没有得到空闲页面则执行交换处理,并重新查找.
    d0d5:	85 db                	test   %ebx,%ebx
    d0d7:	75 0b                	jne    d0e4 <get_free_page+0x56>
    d0d9:	e8 74 fe ff ff       	call   cf52 <swap_out>
    d0de:	85 c0                	test   %eax,%eax
    d0e0:	74 02                	je     d0e4 <get_free_page+0x56>
		goto repeat;
    d0e2:	eb af                	jmp    d093 <get_free_page+0x5>
	return __res;									// 返回空闲物理页面地址.
    d0e4:	89 d8                	mov    %ebx,%eax
}
    d0e6:	83 c4 04             	add    $0x4,%esp
    d0e9:	5b                   	pop    %ebx
    d0ea:	5f                   	pop    %edi
    d0eb:	c3                   	ret    

0000d0ec <init_swapping>:

// 内存交换初始化.
void init_swapping(void)
{
    d0ec:	83 ec 1c             	sub    $0x1c,%esp
	// blk_size[]指向指定主设备号的块设备块数数组.该块数数组每一项对应一个设备上所拥有的数据块总数(1块大小=1KB).
	extern int *blk_size[];							// blk_drv/ll_rw_blk.c
	int swap_size, i, j;

	// 如果没有定义交换设备则返回.如果交换设备没有设置块数数组,则显示并返回.
	if (!SWAP_DEV)
    d0ef:	a1 a0 01 03 00       	mov    0x301a0,%eax
    d0f4:	85 c0                	test   %eax,%eax
    d0f6:	0f 84 2c 02 00 00    	je     d328 <init_swapping+0x23c>
		return;
	if (!blk_size[MAJOR(SWAP_DEV)]) {
    d0fc:	a1 a0 01 03 00       	mov    0x301a0,%eax
    d101:	c1 e8 08             	shr    $0x8,%eax
    d104:	8b 04 85 38 11 03 00 	mov    0x31138(,%eax,4),%eax
    d10b:	85 c0                	test   %eax,%eax
    d10d:	75 15                	jne    d124 <init_swapping+0x38>
		printk("Unable to get size of swap device\n\r");
    d10f:	83 ec 0c             	sub    $0xc,%esp
    d112:	68 d4 37 02 00       	push   $0x237d4
    d117:	e8 2b bb ff ff       	call   8c47 <printk>
    d11c:	83 c4 10             	add    $0x10,%esp
		return;
    d11f:	e9 08 02 00 00       	jmp    d32c <init_swapping+0x240>
	}
	// 取指定交换设备号的交换区数据块总数swap_size.若为0则返回,若总块数小于100块则显示信息"交换设备区太小",然后退出.
	swap_size = blk_size[MAJOR(SWAP_DEV)][MINOR(SWAP_DEV)];
    d124:	a1 a0 01 03 00       	mov    0x301a0,%eax
    d129:	c1 e8 08             	shr    $0x8,%eax
    d12c:	8b 04 85 38 11 03 00 	mov    0x31138(,%eax,4),%eax
    d133:	8b 15 a0 01 03 00    	mov    0x301a0,%edx
    d139:	0f b6 d2             	movzbl %dl,%edx
    d13c:	c1 e2 02             	shl    $0x2,%edx
    d13f:	01 d0                	add    %edx,%eax
    d141:	8b 00                	mov    (%eax),%eax
    d143:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (!swap_size)
    d147:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d14c:	0f 84 d9 01 00 00    	je     d32b <init_swapping+0x23f>
		return;
	if (swap_size < 100) {
    d152:	83 7c 24 0c 63       	cmpl   $0x63,0xc(%esp)
    d157:	7f 19                	jg     d172 <init_swapping+0x86>
		printk("Swap device too small (%d blocks)\n\r", swap_size);
    d159:	83 ec 08             	sub    $0x8,%esp
    d15c:	ff 74 24 14          	pushl  0x14(%esp)
    d160:	68 f8 37 02 00       	push   $0x237f8
    d165:	e8 dd ba ff ff       	call   8c47 <printk>
    d16a:	83 c4 10             	add    $0x10,%esp
		return;
    d16d:	e9 ba 01 00 00       	jmp    d32c <init_swapping+0x240>
	}
	// 每页4个数据块,所以swap_size >>= 2计算出交换页面总数.
	// 交换数据块总数转换成对应可交换页面总数.该值不能大于SWAP_BITS所能表示的页面数.即交换页面总数不得大于32768.
	swap_size >>= 2;
    d172:	c1 7c 24 0c 02       	sarl   $0x2,0xc(%esp)
	if (swap_size > SWAP_BITS)
    d177:	81 7c 24 0c 00 80 00 	cmpl   $0x8000,0xc(%esp)
    d17e:	00 
    d17f:	7e 08                	jle    d189 <init_swapping+0x9d>
		swap_size = SWAP_BITS;
    d181:	c7 44 24 0c 00 80 00 	movl   $0x8000,0xc(%esp)
    d188:	00 
	// 然后申请一页物理内存来存放交换页面映射数组swap_bitmap,其中每1比特代表1页交换页面
	swap_bitmap = (char *) get_free_page();
    d189:	e8 00 ff ff ff       	call   d08e <get_free_page>
    d18e:	a3 a4 01 03 00       	mov    %eax,0x301a4
	if (!swap_bitmap) {
    d193:	a1 a4 01 03 00       	mov    0x301a4,%eax
    d198:	85 c0                	test   %eax,%eax
    d19a:	75 15                	jne    d1b1 <init_swapping+0xc5>
		printk("Unable to start swapping: out of memory :-)\n\r");
    d19c:	83 ec 0c             	sub    $0xc,%esp
    d19f:	68 1c 38 02 00       	push   $0x2381c
    d1a4:	e8 9e ba ff ff       	call   8c47 <printk>
    d1a9:	83 c4 10             	add    $0x10,%esp
		return;
    d1ac:	e9 7b 01 00 00       	jmp    d32c <init_swapping+0x240>
	}
	// read_swap_page(nr,buffer)被定义为ll_rw_page(READ,SWAP_DEV,(nr),(buffer)).这里把交换设备上的页面０读到swap_bitmap页面中.该页面
	//　是交换区管理页面.其中第4086字节开始处含有１０个字符的交换设备特征字符串"SWAP-SPACE".若没有找到该特征字符串,则说明不是一个有效的交换设备.
	// 于是显示信息,释放刚申请的物理页面并退出函数.否则将特征字符串字节清零.
	read_swap_page(0, swap_bitmap);
    d1b1:	8b 15 a4 01 03 00    	mov    0x301a4,%edx
    d1b7:	a1 a0 01 03 00       	mov    0x301a0,%eax
    d1bc:	52                   	push   %edx
    d1bd:	6a 00                	push   $0x0
    d1bf:	50                   	push   %eax
    d1c0:	6a 00                	push   $0x0
    d1c2:	e8 f5 96 00 00       	call   168bc <ll_rw_page>
    d1c7:	83 c4 10             	add    $0x10,%esp
	if (strncmp("SWAP-SPACE", swap_bitmap + 4086, 10)) {
    d1ca:	a1 a4 01 03 00       	mov    0x301a4,%eax
    d1cf:	05 f6 0f 00 00       	add    $0xff6,%eax
    d1d4:	83 ec 04             	sub    $0x4,%esp
    d1d7:	6a 0a                	push   $0xa
    d1d9:	50                   	push   %eax
    d1da:	68 4a 38 02 00       	push   $0x2384a
    d1df:	e8 11 fa ff ff       	call   cbf5 <strncmp>
    d1e4:	83 c4 10             	add    $0x10,%esp
    d1e7:	85 c0                	test   %eax,%eax
    d1e9:	74 30                	je     d21b <init_swapping+0x12f>
		printk("Unable to find swap-space signature\n\r");
    d1eb:	83 ec 0c             	sub    $0xc,%esp
    d1ee:	68 58 38 02 00       	push   $0x23858
    d1f3:	e8 4f ba ff ff       	call   8c47 <printk>
    d1f8:	83 c4 10             	add    $0x10,%esp
		free_page((long) swap_bitmap);
    d1fb:	a1 a4 01 03 00       	mov    0x301a4,%eax
    d200:	83 ec 0c             	sub    $0xc,%esp
    d203:	50                   	push   %eax
    d204:	e8 f6 ea ff ff       	call   bcff <free_page>
    d209:	83 c4 10             	add    $0x10,%esp
		swap_bitmap = NULL;
    d20c:	c7 05 a4 01 03 00 00 	movl   $0x0,0x301a4
    d213:	00 00 00 
		return;
    d216:	e9 11 01 00 00       	jmp    d32c <init_swapping+0x240>
	}
	// 将交换设备的标志字符串"SWAP-SPACE"字符串清空
	memset(swap_bitmap + 4086, 0, 10);
    d21b:	a1 a4 01 03 00       	mov    0x301a4,%eax
    d220:	05 f6 0f 00 00       	add    $0xff6,%eax
    d225:	83 ec 04             	sub    $0x4,%esp
    d228:	6a 0a                	push   $0xa
    d22a:	6a 00                	push   $0x0
    d22c:	50                   	push   %eax
    d22d:	e8 f1 f9 ff ff       	call   cc23 <memset>
    d232:	83 c4 10             	add    $0x10,%esp
	// 然后检查读入的交换位映射图.应该32768个位全为0,若位图中有置位的位0,则表示位图有问题,于是显示出错信息,释放位图占用的页面并退出函数.为了加快检查速度,
	// 这里首先仅挑选查看位图0和最后一个交换页面对应的位,即swap_size交换页面对应的位,以及随后到SWAP_BITS(32768)位.
	for (i = 0 ; i < SWAP_BITS ; i++) {
    d235:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    d23c:	00 
    d23d:	eb 5e                	jmp    d29d <init_swapping+0x1b1>
		if (i == 1)
    d23f:	83 7c 24 08 01       	cmpl   $0x1,0x8(%esp)
    d244:	75 08                	jne    d24e <init_swapping+0x162>
			i = swap_size;
    d246:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d24a:	89 44 24 08          	mov    %eax,0x8(%esp)
		if (bit(swap_bitmap, i)) {
    d24e:	8b 54 24 08          	mov    0x8(%esp),%edx
    d252:	a1 a4 01 03 00       	mov    0x301a4,%eax
    d257:	83 ec 08             	sub    $0x8,%esp
    d25a:	52                   	push   %edx
    d25b:	50                   	push   %eax
    d25c:	e8 0e fa ff ff       	call   cc6f <bit>
    d261:	83 c4 10             	add    $0x10,%esp
    d264:	85 c0                	test   %eax,%eax
    d266:	74 30                	je     d298 <init_swapping+0x1ac>
			printk("Bad swap-space bit-map\n\r");
    d268:	83 ec 0c             	sub    $0xc,%esp
    d26b:	68 7e 38 02 00       	push   $0x2387e
    d270:	e8 d2 b9 ff ff       	call   8c47 <printk>
    d275:	83 c4 10             	add    $0x10,%esp
			free_page((long) swap_bitmap);
    d278:	a1 a4 01 03 00       	mov    0x301a4,%eax
    d27d:	83 ec 0c             	sub    $0xc,%esp
    d280:	50                   	push   %eax
    d281:	e8 79 ea ff ff       	call   bcff <free_page>
    d286:	83 c4 10             	add    $0x10,%esp
			swap_bitmap = NULL;
    d289:	c7 05 a4 01 03 00 00 	movl   $0x0,0x301a4
    d290:	00 00 00 
			return;
    d293:	e9 94 00 00 00       	jmp    d32c <init_swapping+0x240>
	}
	// 将交换设备的标志字符串"SWAP-SPACE"字符串清空
	memset(swap_bitmap + 4086, 0, 10);
	// 然后检查读入的交换位映射图.应该32768个位全为0,若位图中有置位的位0,则表示位图有问题,于是显示出错信息,释放位图占用的页面并退出函数.为了加快检查速度,
	// 这里首先仅挑选查看位图0和最后一个交换页面对应的位,即swap_size交换页面对应的位,以及随后到SWAP_BITS(32768)位.
	for (i = 0 ; i < SWAP_BITS ; i++) {
    d298:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    d29d:	81 7c 24 08 ff 7f 00 	cmpl   $0x7fff,0x8(%esp)
    d2a4:	00 
    d2a5:	7e 98                	jle    d23f <init_swapping+0x153>
			return;
		}
	}
	// 然后再仔细地检测位1到位swap_size所有位是否为0.若存在不是0的位,则表示位图有问题,于是释放位图占用的页面并退出函数.否则显示交换设备工作正常以及交换页面
	// 和交换空间总字节数.
	j = 0;
    d2a7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
    d2ae:	00 
	for (i = 1 ; i < swap_size ; i++)
    d2af:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
    d2b6:	00 
    d2b7:	eb 24                	jmp    d2dd <init_swapping+0x1f1>
		if (bit(swap_bitmap, i))
    d2b9:	8b 54 24 08          	mov    0x8(%esp),%edx
    d2bd:	a1 a4 01 03 00       	mov    0x301a4,%eax
    d2c2:	83 ec 08             	sub    $0x8,%esp
    d2c5:	52                   	push   %edx
    d2c6:	50                   	push   %eax
    d2c7:	e8 a3 f9 ff ff       	call   cc6f <bit>
    d2cc:	83 c4 10             	add    $0x10,%esp
    d2cf:	85 c0                	test   %eax,%eax
    d2d1:	74 05                	je     d2d8 <init_swapping+0x1ec>
			j++;
    d2d3:	83 44 24 04 01       	addl   $0x1,0x4(%esp)
		}
	}
	// 然后再仔细地检测位1到位swap_size所有位是否为0.若存在不是0的位,则表示位图有问题,于是释放位图占用的页面并退出函数.否则显示交换设备工作正常以及交换页面
	// 和交换空间总字节数.
	j = 0;
	for (i = 1 ; i < swap_size ; i++)
    d2d8:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    d2dd:	8b 44 24 08          	mov    0x8(%esp),%eax
    d2e1:	3b 44 24 0c          	cmp    0xc(%esp),%eax
    d2e5:	7c d2                	jl     d2b9 <init_swapping+0x1cd>
		if (bit(swap_bitmap, i))
			j++;
	if (!j) {
    d2e7:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    d2ec:	75 1d                	jne    d30b <init_swapping+0x21f>
		free_page((long) swap_bitmap);
    d2ee:	a1 a4 01 03 00       	mov    0x301a4,%eax
    d2f3:	83 ec 0c             	sub    $0xc,%esp
    d2f6:	50                   	push   %eax
    d2f7:	e8 03 ea ff ff       	call   bcff <free_page>
    d2fc:	83 c4 10             	add    $0x10,%esp
		swap_bitmap = NULL;
    d2ff:	c7 05 a4 01 03 00 00 	movl   $0x0,0x301a4
    d306:	00 00 00 
		return;
    d309:	eb 21                	jmp    d32c <init_swapping+0x240>
	}
	Log(LOG_INFO_TYPE, "<<<<< Swap device ok: %d pages (%d bytes) swap-space >>>>>\n\r", j, j * 4096);
    d30b:	8b 44 24 04          	mov    0x4(%esp),%eax
    d30f:	c1 e0 0c             	shl    $0xc,%eax
    d312:	50                   	push   %eax
    d313:	ff 74 24 08          	pushl  0x8(%esp)
    d317:	68 98 38 02 00       	push   $0x23898
    d31c:	6a 00                	push   $0x0
    d31e:	e8 cc 56 01 00       	call   229ef <Log>
    d323:	83 c4 10             	add    $0x10,%esp
    d326:	eb 04                	jmp    d32c <init_swapping+0x240>
	extern int *blk_size[];							// blk_drv/ll_rw_blk.c
	int swap_size, i, j;

	// 如果没有定义交换设备则返回.如果交换设备没有设置块数数组,则显示并返回.
	if (!SWAP_DEV)
		return;
    d328:	90                   	nop
    d329:	eb 01                	jmp    d32c <init_swapping+0x240>
		return;
	}
	// 取指定交换设备号的交换区数据块总数swap_size.若为0则返回,若总块数小于100块则显示信息"交换设备区太小",然后退出.
	swap_size = blk_size[MAJOR(SWAP_DEV)][MINOR(SWAP_DEV)];
	if (!swap_size)
		return;
    d32b:	90                   	nop
		free_page((long) swap_bitmap);
		swap_bitmap = NULL;
		return;
	}
	Log(LOG_INFO_TYPE, "<<<<< Swap device ok: %d pages (%d bytes) swap-space >>>>>\n\r", j, j * 4096);
}
    d32c:	83 c4 1c             	add    $0x1c,%esp
    d32f:	c3                   	ret    

0000d330 <page_fault>:
    d330:	87 04 24             	xchg   %eax,(%esp)
    d333:	51                   	push   %ecx
    d334:	52                   	push   %edx
    d335:	1e                   	push   %ds
    d336:	06                   	push   %es
    d337:	0f a0                	push   %fs
    d339:	ba 10 00 00 00       	mov    $0x10,%edx
    d33e:	8e da                	mov    %edx,%ds
    d340:	8e c2                	mov    %edx,%es
    d342:	8e e2                	mov    %edx,%fs
    d344:	0f 20 d2             	mov    %cr2,%edx
    d347:	52                   	push   %edx
    d348:	50                   	push   %eax
    d349:	a9 01 00 00 00       	test   $0x1,%eax
    d34e:	75 07                	jne    d357 <page_fault+0x27>
    d350:	e8 4d f3 ff ff       	call   c6a2 <do_no_page>
    d355:	eb 05                	jmp    d35c <page_fault+0x2c>
    d357:	e8 ce ef ff ff       	call   c32a <do_wp_page>
    d35c:	83 c4 08             	add    $0x8,%esp
    d35f:	0f a1                	pop    %fs
    d361:	07                   	pop    %es
    d362:	1f                   	pop    %ds
    d363:	5a                   	pop    %edx
    d364:	59                   	pop    %ecx
    d365:	58                   	pop    %eax
    d366:	cf                   	iret   

0000d367 <get_fs_long>:
//// 读取fs段中指定地址处的长字(4字节).
// 参数:addr - 指定的内存地址.
// %0 - (返回的长字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的长字.
static inline unsigned long get_fs_long(const unsigned long *addr)
{
    d367:	83 ec 10             	sub    $0x10,%esp
	unsigned long _v;

	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
    d36a:	8b 44 24 14          	mov    0x14(%esp),%eax
    d36e:	64 8b 00             	mov    %fs:(%eax),%eax
    d371:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
    d375:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    d379:	83 c4 10             	add    $0x10,%esp
    d37c:	c3                   	ret    

0000d37d <sys_ustat>:
// 参数dev是含有用户已安装文件系统的设备号。ubuf是一个ustat结构缓冲区指针，用于存放系统返回的文件系统信息。该系统
// 调用用于返回已安装（mounted）文件系统的统计信息。成功时返回0，并且ubuf指向的ustate结构被添入文件系统总空闲块
// 和空闲i节点数。ustat结构定义在include/sys/types.h中。
int sys_ustat(int dev, struct ustat * ubuf)
{
	return -ENOSYS;         						// 出错码：功能还未实现。
    d37d:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    d382:	c3                   	ret    

0000d383 <sys_utime>:
// 设置文件访问和修改时间。
// 参数filename是文件名，times是访问和修改时间结构指针。
// 如果times指针不为NULL，则取utimbuf结构中的时间信息来设置文件的访问和修改时间。
// 如果times指针是NULL，则取系统当前时间来设置指定文件的访问和修改时间域。
int sys_utime(char * filename, struct utimbuf * times)
{
    d383:	83 ec 1c             	sub    $0x1c,%esp
	long actime, modtime;

	// 文件的时间信息保存在其i节点中。因此我们首先根据文件名取得对应i节点。如果没有找到，则返回出错码。如果提供的访问
	// 和修改时间结构指针times不为NULL，则从结构中读取用户设置的时间值。否则就用系统当前时间来设置文件的访问和修改时
	// 间。
	if (!(inode = namei(filename)))
    d386:	83 ec 0c             	sub    $0xc,%esp
    d389:	ff 74 24 2c          	pushl  0x2c(%esp)
    d38d:	e8 b2 61 00 00       	call   13544 <namei>
    d392:	83 c4 10             	add    $0x10,%esp
    d395:	89 44 24 04          	mov    %eax,0x4(%esp)
    d399:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    d39e:	75 0a                	jne    d3aa <sys_utime+0x27>
		return -ENOENT;
    d3a0:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    d3a5:	e9 90 00 00 00       	jmp    d43a <sys_utime+0xb7>
	if (times) {
    d3aa:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
    d3af:	74 2d                	je     d3de <sys_utime+0x5b>
		actime = get_fs_long((unsigned long *) &times->actime);
    d3b1:	8b 44 24 24          	mov    0x24(%esp),%eax
    d3b5:	83 ec 0c             	sub    $0xc,%esp
    d3b8:	50                   	push   %eax
    d3b9:	e8 a9 ff ff ff       	call   d367 <get_fs_long>
    d3be:	83 c4 10             	add    $0x10,%esp
    d3c1:	89 44 24 0c          	mov    %eax,0xc(%esp)
		modtime = get_fs_long((unsigned long *) &times->modtime);
    d3c5:	8b 44 24 24          	mov    0x24(%esp),%eax
    d3c9:	83 c0 04             	add    $0x4,%eax
    d3cc:	83 ec 0c             	sub    $0xc,%esp
    d3cf:	50                   	push   %eax
    d3d0:	e8 92 ff ff ff       	call   d367 <get_fs_long>
    d3d5:	83 c4 10             	add    $0x10,%esp
    d3d8:	89 44 24 08          	mov    %eax,0x8(%esp)
    d3dc:	eb 2a                	jmp    d408 <sys_utime+0x85>
	} else
		actime = modtime = CURRENT_TIME;
    d3de:	a1 00 eb 02 00       	mov    0x2eb00,%eax
    d3e3:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
    d3e9:	01 d0                	add    %edx,%eax
    d3eb:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    d3f0:	f7 e2                	mul    %edx
    d3f2:	c1 ea 05             	shr    $0x5,%edx
    d3f5:	a1 04 eb 02 00       	mov    0x2eb04,%eax
    d3fa:	01 d0                	add    %edx,%eax
    d3fc:	89 44 24 08          	mov    %eax,0x8(%esp)
    d400:	8b 44 24 08          	mov    0x8(%esp),%eax
    d404:	89 44 24 0c          	mov    %eax,0xc(%esp)
	// 然后修改i节点中的访问时间字段和修改时间字段。再设置i节点已修改标志，放回该i节点，并返回0。
	inode->i_atime = actime;
    d408:	8b 54 24 0c          	mov    0xc(%esp),%edx
    d40c:	8b 44 24 04          	mov    0x4(%esp),%eax
    d410:	89 50 28             	mov    %edx,0x28(%eax)
	inode->i_mtime = modtime;
    d413:	8b 54 24 08          	mov    0x8(%esp),%edx
    d417:	8b 44 24 04          	mov    0x4(%esp),%eax
    d41b:	89 50 08             	mov    %edx,0x8(%eax)
	inode->i_dirt = 1;
    d41e:	8b 44 24 04          	mov    0x4(%esp),%eax
    d422:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	iput(inode);
    d426:	83 ec 0c             	sub    $0xc,%esp
    d429:	ff 74 24 10          	pushl  0x10(%esp)
    d42d:	e8 bd 12 00 00       	call   e6ef <iput>
    d432:	83 c4 10             	add    $0x10,%esp
	return 0;
    d435:	b8 00 00 00 00       	mov    $0x0,%eax
}
    d43a:	83 c4 1c             	add    $0x1c,%esp
    d43d:	c3                   	ret    

0000d43e <sys_access>:
 */
// 检查文件的访问权限。
// 参数filename是文件名，mode是检查的访问属性，它有3个有效位组成：R_OK（值4）、W_OK（2）、X_OK（1）和F_OK（0）
// 组成，分别表示检测文件是否可读、可写、可执行和文件是否存在。如果访问允许的话，则返回0,否则返回出错码。
int sys_access(const char * filename, int mode)
{
    d43e:	83 ec 1c             	sub    $0x1c,%esp
	int res, i_mode;

	// 文件的访问权限信息同样保存在文件的i节点结构中，因此我们要先取得对应文件名的i节点。检测的访问属性mode由低3位组成，
	// 因此需要与上八进制0007来清除所有高位。如果文件名对应的i节点不存在，则返回没有许可权限出错码。若i节点存在，则取i
	// 节点中文件属性码，并放回该i节点。另外，57行上语句“iput(inode);”最好放在61行之后。
	mode &= 0007;
    d441:	83 64 24 24 07       	andl   $0x7,0x24(%esp)
	if (!(inode = namei(filename)))
    d446:	83 ec 0c             	sub    $0xc,%esp
    d449:	ff 74 24 2c          	pushl  0x2c(%esp)
    d44d:	e8 f2 60 00 00       	call   13544 <namei>
    d452:	83 c4 10             	add    $0x10,%esp
    d455:	89 44 24 08          	mov    %eax,0x8(%esp)
    d459:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    d45e:	75 0a                	jne    d46a <sys_access+0x2c>
		return -EACCES;                 				// 出错码：无访问权限。
    d460:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
    d465:	e9 b6 00 00 00       	jmp    d520 <sys_access+0xe2>
	i_mode = res = inode->i_mode & 0777;
    d46a:	8b 44 24 08          	mov    0x8(%esp),%eax
    d46e:	0f b7 00             	movzwl (%eax),%eax
    d471:	0f b7 c0             	movzwl %ax,%eax
    d474:	25 ff 01 00 00       	and    $0x1ff,%eax
    d479:	89 44 24 0c          	mov    %eax,0xc(%esp)
    d47d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d481:	89 44 24 04          	mov    %eax,0x4(%esp)
	iput(inode);
    d485:	83 ec 0c             	sub    $0xc,%esp
    d488:	ff 74 24 14          	pushl  0x14(%esp)
    d48c:	e8 5e 12 00 00       	call   e6ef <iput>
    d491:	83 c4 10             	add    $0x10,%esp
	// 如果当前进程用户是该文件的宿主，则取文件宿主属性。否则如果当前进程用户与该文件宿主同属一个级，则取文件组属性。否则
	// 此时res低3位是其他人访问该文件的许可属性。
	// [??这里应res >> 3 ??]
	if (current->uid == inode->i_uid)
    d494:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d499:	0f b7 90 cc 02 00 00 	movzwl 0x2cc(%eax),%edx
    d4a0:	8b 44 24 08          	mov    0x8(%esp),%eax
    d4a4:	0f b7 40 02          	movzwl 0x2(%eax),%eax
    d4a8:	66 39 c2             	cmp    %ax,%dx
    d4ab:	75 07                	jne    d4b4 <sys_access+0x76>
		res >>= 6;
    d4ad:	c1 7c 24 0c 06       	sarl   $0x6,0xc(%esp)
    d4b2:	eb 21                	jmp    d4d5 <sys_access+0x97>
	else if (current->gid == inode->i_gid)
    d4b4:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d4b9:	0f b7 90 d2 02 00 00 	movzwl 0x2d2(%eax),%edx
    d4c0:	8b 44 24 08          	mov    0x8(%esp),%eax
    d4c4:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    d4c8:	0f b6 c0             	movzbl %al,%eax
    d4cb:	66 39 c2             	cmp    %ax,%dx
    d4ce:	75 05                	jne    d4d5 <sys_access+0x97>
		res >>= 3;
    d4d0:	c1 7c 24 0c 03       	sarl   $0x3,0xc(%esp)
	// 此时res的最低3位是根据当前进程用户与文件的关系选择出来的访问属性位。现在我们来判断这3位。如果文件属性具有参数所查询
	// 的属性位mode，则访问许可，返回0。
	if ((res & 0007 & mode) == mode)
    d4d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d4d9:	83 e0 07             	and    $0x7,%eax
    d4dc:	23 44 24 24          	and    0x24(%esp),%eax
    d4e0:	3b 44 24 24          	cmp    0x24(%esp),%eax
    d4e4:	75 07                	jne    d4ed <sys_access+0xaf>
		return 0;
    d4e6:	b8 00 00 00 00       	mov    $0x0,%eax
    d4eb:	eb 33                	jmp    d520 <sys_access+0xe2>
    /*
     * XXX我们最后才做下面的测试，因为我们实际上需要交换有效用户ID和真实用户ID（临时地），然后才调用suser()函数，
     * 如果我们确实要调用suser()函数，则需要最后才被调用。
     */
	// 如果当前用户ID为0（超级用户）并且屏蔽码执行位是0或者文件可以被任何人执行、搜索，则返回0。否则返回出错码。
	if ((!current->uid) &&
    d4ed:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d4f2:	0f b7 80 cc 02 00 00 	movzwl 0x2cc(%eax),%eax
    d4f9:	66 85 c0             	test   %ax,%ax
    d4fc:	75 1d                	jne    d51b <sys_access+0xdd>
	    (!(mode & 1) || (i_mode & 0111)))
    d4fe:	8b 44 24 24          	mov    0x24(%esp),%eax
    d502:	83 e0 01             	and    $0x1,%eax
    /*
     * XXX我们最后才做下面的测试，因为我们实际上需要交换有效用户ID和真实用户ID（临时地），然后才调用suser()函数，
     * 如果我们确实要调用suser()函数，则需要最后才被调用。
     */
	// 如果当前用户ID为0（超级用户）并且屏蔽码执行位是0或者文件可以被任何人执行、搜索，则返回0。否则返回出错码。
	if ((!current->uid) &&
    d505:	85 c0                	test   %eax,%eax
    d507:	74 0b                	je     d514 <sys_access+0xd6>
	    (!(mode & 1) || (i_mode & 0111)))
    d509:	8b 44 24 04          	mov    0x4(%esp),%eax
    d50d:	83 e0 49             	and    $0x49,%eax
    d510:	85 c0                	test   %eax,%eax
    d512:	74 07                	je     d51b <sys_access+0xdd>
		return 0;
    d514:	b8 00 00 00 00       	mov    $0x0,%eax
    d519:	eb 05                	jmp    d520 <sys_access+0xe2>
	return -EACCES;         							// 出错码：无访问权限。
    d51b:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
    d520:	83 c4 1c             	add    $0x1c,%esp
    d523:	c3                   	ret    

0000d524 <sys_chdir>:

// 改变当前工作目录系统调用。
// 参数filename是目录名。
// 操作成功则返回0,否则返回出错码。
int sys_chdir(const char * filename)
{
    d524:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 改变当前工作目录就是要求把进程任务结构的当前工作目录字段指向给定目录名的i节点。因此我们首先取目录名的i节点。如果目录名对应
	// 的i节点不存在，则返回出错码。如果该i节点不是一个目录i节点，则放回该i节点，并返回出错码。
	if (!(inode = namei(filename)))
    d527:	83 ec 0c             	sub    $0xc,%esp
    d52a:	ff 74 24 2c          	pushl  0x2c(%esp)
    d52e:	e8 11 60 00 00       	call   13544 <namei>
    d533:	83 c4 10             	add    $0x10,%esp
    d536:	89 44 24 0c          	mov    %eax,0xc(%esp)
    d53a:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d53f:	75 07                	jne    d548 <sys_chdir+0x24>
		return -ENOENT;                 				// 出错码：文件或目录不存在。
    d541:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    d546:	eb 57                	jmp    d59f <sys_chdir+0x7b>
	if (!S_ISDIR(inode->i_mode)) {
    d548:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d54c:	0f b7 00             	movzwl (%eax),%eax
    d54f:	0f b7 c0             	movzwl %ax,%eax
    d552:	25 00 f0 00 00       	and    $0xf000,%eax
    d557:	3d 00 40 00 00       	cmp    $0x4000,%eax
    d55c:	74 16                	je     d574 <sys_chdir+0x50>
		iput(inode);
    d55e:	83 ec 0c             	sub    $0xc,%esp
    d561:	ff 74 24 18          	pushl  0x18(%esp)
    d565:	e8 85 11 00 00       	call   e6ef <iput>
    d56a:	83 c4 10             	add    $0x10,%esp
		return -ENOTDIR;                				// 出错码：不是目录名。
    d56d:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
    d572:	eb 2b                	jmp    d59f <sys_chdir+0x7b>
	}
	// 然后释放进程原工作目录i节点，并使其指向新设置的工作目录i节点。返回0.
	iput(current->pwd);
    d574:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d579:	8b 80 34 03 00 00    	mov    0x334(%eax),%eax
    d57f:	83 ec 0c             	sub    $0xc,%esp
    d582:	50                   	push   %eax
    d583:	e8 67 11 00 00       	call   e6ef <iput>
    d588:	83 c4 10             	add    $0x10,%esp
	current->pwd = inode;
    d58b:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d590:	8b 54 24 0c          	mov    0xc(%esp),%edx
    d594:	89 90 34 03 00 00    	mov    %edx,0x334(%eax)
	return (0);
    d59a:	b8 00 00 00 00       	mov    $0x0,%eax
}
    d59f:	83 c4 1c             	add    $0x1c,%esp
    d5a2:	c3                   	ret    

0000d5a3 <sys_chroot>:

// 改变根目录系统调用。
// 把指定的目录名设置成为当前进程的根目录“/”。
// 如果操作成功则返回0，否则返回出错码。
int sys_chroot(const char * filename)
{
    d5a3:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 该调用用于改变当前进程任务结构中的根目录字段root，让其指向参数给定目录名的i节点。如果目录名对应i节点不存在，则返回出错码。
	// 如果该i节点不是目录i节点，则放回该i节点，也返回出错码。
	if (!(inode = namei(filename)))
    d5a6:	83 ec 0c             	sub    $0xc,%esp
    d5a9:	ff 74 24 2c          	pushl  0x2c(%esp)
    d5ad:	e8 92 5f 00 00       	call   13544 <namei>
    d5b2:	83 c4 10             	add    $0x10,%esp
    d5b5:	89 44 24 0c          	mov    %eax,0xc(%esp)
    d5b9:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d5be:	75 07                	jne    d5c7 <sys_chroot+0x24>
		return -ENOENT;
    d5c0:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    d5c5:	eb 57                	jmp    d61e <sys_chroot+0x7b>
	if (!S_ISDIR(inode->i_mode)) {
    d5c7:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d5cb:	0f b7 00             	movzwl (%eax),%eax
    d5ce:	0f b7 c0             	movzwl %ax,%eax
    d5d1:	25 00 f0 00 00       	and    $0xf000,%eax
    d5d6:	3d 00 40 00 00       	cmp    $0x4000,%eax
    d5db:	74 16                	je     d5f3 <sys_chroot+0x50>
		iput(inode);
    d5dd:	83 ec 0c             	sub    $0xc,%esp
    d5e0:	ff 74 24 18          	pushl  0x18(%esp)
    d5e4:	e8 06 11 00 00       	call   e6ef <iput>
    d5e9:	83 c4 10             	add    $0x10,%esp
		return -ENOTDIR;
    d5ec:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
    d5f1:	eb 2b                	jmp    d61e <sys_chroot+0x7b>
	}
	// 然后释放当前进程的根目录，并重新设置为指定目录名的i节点，返回0。
	iput(current->root);
    d5f3:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d5f8:	8b 80 38 03 00 00    	mov    0x338(%eax),%eax
    d5fe:	83 ec 0c             	sub    $0xc,%esp
    d601:	50                   	push   %eax
    d602:	e8 e8 10 00 00       	call   e6ef <iput>
    d607:	83 c4 10             	add    $0x10,%esp
	current->root = inode;
    d60a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d60f:	8b 54 24 0c          	mov    0xc(%esp),%edx
    d613:	89 90 38 03 00 00    	mov    %edx,0x338(%eax)
	return (0);
    d619:	b8 00 00 00 00       	mov    $0x0,%eax
}
    d61e:	83 c4 1c             	add    $0x1c,%esp
    d621:	c3                   	ret    

0000d622 <sys_chmod>:

// 修改文件属性系统调用。
// 参数filename是文件名，mode是新的文件属性。
int sys_chmod(const char * filename, int mode)
{
    d622:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 该调用为指定文件设置新的访问属性mode。文件的访问属性在文件名对应的i节点中，因此我们首先取文件名对应的i节点。如果i节点不存
	// 在，则返回出错码（文件或目录不存在）。如果当前进程的有效用户名id与文件i节点的用户id不同，并且也不是超级用户，则放回该文件
	// i节点，返回出错码（没有访问权限）。
	if (!(inode = namei(filename)))
    d625:	83 ec 0c             	sub    $0xc,%esp
    d628:	ff 74 24 2c          	pushl  0x2c(%esp)
    d62c:	e8 13 5f 00 00       	call   13544 <namei>
    d631:	83 c4 10             	add    $0x10,%esp
    d634:	89 44 24 0c          	mov    %eax,0xc(%esp)
    d638:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d63d:	75 07                	jne    d646 <sys_chmod+0x24>
		return -ENOENT;
    d63f:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    d644:	eb 7c                	jmp    d6c2 <sys_chmod+0xa0>
	if ((current->euid != inode->i_uid) && !suser()) {
    d646:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d64b:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
    d652:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d656:	0f b7 40 02          	movzwl 0x2(%eax),%eax
    d65a:	66 39 c2             	cmp    %ax,%dx
    d65d:	74 27                	je     d686 <sys_chmod+0x64>
    d65f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d664:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    d66b:	66 85 c0             	test   %ax,%ax
    d66e:	74 16                	je     d686 <sys_chmod+0x64>
		iput(inode);
    d670:	83 ec 0c             	sub    $0xc,%esp
    d673:	ff 74 24 18          	pushl  0x18(%esp)
    d677:	e8 73 10 00 00       	call   e6ef <iput>
    d67c:	83 c4 10             	add    $0x10,%esp
		return -EACCES;
    d67f:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
    d684:	eb 3c                	jmp    d6c2 <sys_chmod+0xa0>
	}
	// 否则就重新设置该i节点的文件属性，并置该i节点已修改标志。放回该i节点，返回0。
	inode->i_mode = (mode & 07777) | (inode->i_mode & ~07777);
    d686:	8b 44 24 24          	mov    0x24(%esp),%eax
    d68a:	66 25 ff 0f          	and    $0xfff,%ax
    d68e:	89 c2                	mov    %eax,%edx
    d690:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d694:	0f b7 00             	movzwl (%eax),%eax
    d697:	66 25 00 f0          	and    $0xf000,%ax
    d69b:	09 d0                	or     %edx,%eax
    d69d:	89 c2                	mov    %eax,%edx
    d69f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d6a3:	66 89 10             	mov    %dx,(%eax)
	inode->i_dirt = 1;
    d6a6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d6aa:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	iput(inode);
    d6ae:	83 ec 0c             	sub    $0xc,%esp
    d6b1:	ff 74 24 18          	pushl  0x18(%esp)
    d6b5:	e8 35 10 00 00       	call   e6ef <iput>
    d6ba:	83 c4 10             	add    $0x10,%esp
	return 0;
    d6bd:	b8 00 00 00 00       	mov    $0x0,%eax
}
    d6c2:	83 c4 1c             	add    $0x1c,%esp
    d6c5:	c3                   	ret    

0000d6c6 <sys_chown>:

// 修改文件宿主系统调用。
// 参数filename是文件名，uid是用户标识符（用户ID），gid是组ID。
// 若操作成功则返回0，否则返回出错码。
int sys_chown(const char * filename, int uid, int gid)
{
    d6c6:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 该调用用于设置文件i节点中的用户和组ID，因此首先要取得给定文件名的i节点。如果文件名的i节点不存在，则返回出错码（文件
	// 或目录不存在）。如果当前进程不是超级用户，则放回该i节点，并返回出错码（没有访问权限）。
	if (!(inode = namei(filename)))
    d6c9:	83 ec 0c             	sub    $0xc,%esp
    d6cc:	ff 74 24 2c          	pushl  0x2c(%esp)
    d6d0:	e8 6f 5e 00 00       	call   13544 <namei>
    d6d5:	83 c4 10             	add    $0x10,%esp
    d6d8:	89 44 24 0c          	mov    %eax,0xc(%esp)
    d6dc:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d6e1:	75 07                	jne    d6ea <sys_chown+0x24>
		return -ENOENT;
    d6e3:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    d6e8:	eb 5e                	jmp    d748 <sys_chown+0x82>
	if (!suser()) {
    d6ea:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d6ef:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    d6f6:	66 85 c0             	test   %ax,%ax
    d6f9:	74 16                	je     d711 <sys_chown+0x4b>
		iput(inode);
    d6fb:	83 ec 0c             	sub    $0xc,%esp
    d6fe:	ff 74 24 18          	pushl  0x18(%esp)
    d702:	e8 e8 0f 00 00       	call   e6ef <iput>
    d707:	83 c4 10             	add    $0x10,%esp
		return -EACCES;
    d70a:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
    d70f:	eb 37                	jmp    d748 <sys_chown+0x82>
	}
	// 否则我们就用参数提供的值来设置文件i节点的用户ID和组ID，并置i节点已经修改标志，放回该i节点，返回0。
	inode->i_uid = uid;
    d711:	8b 44 24 24          	mov    0x24(%esp),%eax
    d715:	89 c2                	mov    %eax,%edx
    d717:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d71b:	66 89 50 02          	mov    %dx,0x2(%eax)
	inode->i_gid = gid;
    d71f:	8b 44 24 28          	mov    0x28(%esp),%eax
    d723:	89 c2                	mov    %eax,%edx
    d725:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d729:	88 50 0c             	mov    %dl,0xc(%eax)
	inode->i_dirt = 1;
    d72c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d730:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	iput(inode);
    d734:	83 ec 0c             	sub    $0xc,%esp
    d737:	ff 74 24 18          	pushl  0x18(%esp)
    d73b:	e8 af 0f 00 00       	call   e6ef <iput>
    d740:	83 c4 10             	add    $0x10,%esp
	return 0;
    d743:	b8 00 00 00 00       	mov    $0x0,%eax
}
    d748:	83 c4 1c             	add    $0x1c,%esp
    d74b:	c3                   	ret    

0000d74c <check_char_dev>:

// 检查字符设备类型.
// 该函数仅用于下面文件打开系统调用sys_open(),用于检查若打开的文件是tty终端字符设备时,需要对当前进程的设置和对tty表的设置.
// 返回0检测处理成功,返回-1表示失败,对应字符设备不能打开.
static int check_char_dev(struct m_inode * inode, int dev, int flag)
{
    d74c:	83 ec 10             	sub    $0x10,%esp
	// 的同义名.即/dev/tty设备是一个虚拟设备,它对应到进程实际使用的/dev/ttyxx设备之一.对于一个进程来说,若其有控制终端,那么它的任务结构
	// 中的tty字段将是4号设备的某一个子设备号.
	// 如果打开操作的文件是/dev/tty(即MAJOR(dev) = 5),那么我们令min = 进程任务结构中的tty字段,即取4号设备的子设备号.否则如果打开的是
	// 某个4号设备,则直接取其子设备号.如果得到的4号设备子设备号小于0,那么说明进程没有控制终端,或者设备号错误,则返回-1,表示由于进程没有控制终端
	// 或者不能打开这个设备.
	if (MAJOR(dev) == 4 || MAJOR(dev) == 5) {
    d74f:	8b 44 24 18          	mov    0x18(%esp),%eax
    d753:	c1 e8 08             	shr    $0x8,%eax
    d756:	83 f8 04             	cmp    $0x4,%eax
    d759:	74 10                	je     d76b <check_char_dev+0x1f>
    d75b:	8b 44 24 18          	mov    0x18(%esp),%eax
    d75f:	c1 e8 08             	shr    $0x8,%eax
    d762:	83 f8 05             	cmp    $0x5,%eax
    d765:	0f 85 16 02 00 00    	jne    d981 <check_char_dev+0x235>
		if (MAJOR(dev) == 5)
    d76b:	8b 44 24 18          	mov    0x18(%esp),%eax
    d76f:	c1 e8 08             	shr    $0x8,%eax
    d772:	83 f8 05             	cmp    $0x5,%eax
    d775:	75 11                	jne    d788 <check_char_dev+0x3c>
			min = current->tty;
    d777:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d77c:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
    d782:	89 44 24 0c          	mov    %eax,0xc(%esp)
    d786:	eb 0b                	jmp    d793 <check_char_dev+0x47>
		else
			min = MINOR(dev);
    d788:	8b 44 24 18          	mov    0x18(%esp),%eax
    d78c:	0f b6 c0             	movzbl %al,%eax
    d78f:	89 44 24 0c          	mov    %eax,0xc(%esp)
		if (min < 0)
    d793:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d798:	79 0a                	jns    d7a4 <check_char_dev+0x58>
			return -1;
    d79a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    d79f:	e9 e2 01 00 00       	jmp    d986 <check_char_dev+0x23a>
		// 主伪终端设备文件只能被进程独占使用.如果子设备号表明是一个主伪终端,并且该打开文件i节点引用计数大于1,则说明该设备已被其他进程使用.因此不能再
		// 打开该字符设备文件,于是返回-1.否则,我们让tty结构指针tty指向tty表中对应结构项.若打开文件操作标志flag中不含无需控制终端标志O_NOCTTY,并且进程
		// 是进程组首领,并且当前进程没有控制终端,并且tty结构中session字段为0(表示该终端还不是任何进程组的控制终端),那么就允许为进程设置这个终端设备min
		// 为其控制终端.于是设置进程任务结构终端设备号字段tty值等于min,并且设置对应tty结构的会话号session和进程组号pgrp分别等于进程的会话号和进程组号.
		if ((IS_A_PTY_MASTER(min)) && (inode->i_count > 1))
    d7a4:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d7a8:	25 c0 00 00 00       	and    $0xc0,%eax
    d7ad:	3d 80 00 00 00       	cmp    $0x80,%eax
    d7b2:	75 18                	jne    d7cc <check_char_dev+0x80>
    d7b4:	8b 44 24 14          	mov    0x14(%esp),%eax
    d7b8:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    d7bc:	66 83 f8 01          	cmp    $0x1,%ax
    d7c0:	76 0a                	jbe    d7cc <check_char_dev+0x80>
			return -1;
    d7c2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    d7c7:	e9 ba 01 00 00       	jmp    d986 <check_char_dev+0x23a>
		tty = TTY_TABLE(min);
    d7cc:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d7d1:	74 26                	je     d7f9 <check_char_dev+0xad>
    d7d3:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    d7d8:	7f 11                	jg     d7eb <check_char_dev+0x9f>
    d7da:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d7de:	83 e8 01             	sub    $0x1,%eax
    d7e1:	c1 e0 06             	shl    $0x6,%eax
    d7e4:	05 20 18 04 00       	add    $0x41820,%eax
    d7e9:	eb 1b                	jmp    d806 <check_char_dev+0xba>
    d7eb:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d7ef:	c1 e0 06             	shl    $0x6,%eax
    d7f2:	05 20 18 04 00       	add    $0x41820,%eax
    d7f7:	eb 0d                	jmp    d806 <check_char_dev+0xba>
    d7f9:	a1 80 12 03 00       	mov    0x31280,%eax
    d7fe:	c1 e0 06             	shl    $0x6,%eax
    d801:	05 20 18 04 00       	add    $0x41820,%eax
    d806:	89 44 24 08          	mov    %eax,0x8(%esp)
		// Log(LOG_INFO_TYPE, "<<<<< tty index = %d>>>>>\n", min);
		if (!(flag & O_NOCTTY) &&
    d80a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    d80e:	25 00 01 00 00       	and    $0x100,%eax
    d813:	85 c0                	test   %eax,%eax
    d815:	75 5c                	jne    d873 <check_char_dev+0x127>
		    current->leader &&
    d817:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d81c:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
		// 为其控制终端.于是设置进程任务结构终端设备号字段tty值等于min,并且设置对应tty结构的会话号session和进程组号pgrp分别等于进程的会话号和进程组号.
		if ((IS_A_PTY_MASTER(min)) && (inode->i_count > 1))
			return -1;
		tty = TTY_TABLE(min);
		// Log(LOG_INFO_TYPE, "<<<<< tty index = %d>>>>>\n", min);
		if (!(flag & O_NOCTTY) &&
    d822:	85 c0                	test   %eax,%eax
    d824:	74 4d                	je     d873 <check_char_dev+0x127>
		    current->leader &&
		    current->tty < 0 &&
    d826:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d82b:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
		if ((IS_A_PTY_MASTER(min)) && (inode->i_count > 1))
			return -1;
		tty = TTY_TABLE(min);
		// Log(LOG_INFO_TYPE, "<<<<< tty index = %d>>>>>\n", min);
		if (!(flag & O_NOCTTY) &&
		    current->leader &&
    d831:	85 c0                	test   %eax,%eax
    d833:	79 3e                	jns    d873 <check_char_dev+0x127>
		    current->tty < 0 &&
		    tty->session == 0) {
    d835:	8b 44 24 08          	mov    0x8(%esp),%eax
    d839:	8b 40 28             	mov    0x28(%eax),%eax
			return -1;
		tty = TTY_TABLE(min);
		// Log(LOG_INFO_TYPE, "<<<<< tty index = %d>>>>>\n", min);
		if (!(flag & O_NOCTTY) &&
		    current->leader &&
		    current->tty < 0 &&
    d83c:	85 c0                	test   %eax,%eax
    d83e:	75 33                	jne    d873 <check_char_dev+0x127>
		    tty->session == 0) {
			current->tty = min;
    d840:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d845:	8b 54 24 0c          	mov    0xc(%esp),%edx
    d849:	89 90 2c 03 00 00    	mov    %edx,0x32c(%eax)
			tty->session = current->session;
    d84f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d854:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
    d85a:	8b 44 24 08          	mov    0x8(%esp),%eax
    d85e:	89 50 28             	mov    %edx,0x28(%eax)
			tty->pgrp = current->pgrp;
    d861:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d866:	8b 90 30 02 00 00    	mov    0x230(%eax),%edx
    d86c:	8b 44 24 08          	mov    0x8(%esp),%eax
    d870:	89 50 24             	mov    %edx,0x24(%eax)
		}
		// 如果打开文件操作标志flag中含有O_NONBLOCK(非阻塞)标志,则我们需要对该字符终端设备进行相关设置,设置为满足读操作需要读取的最少字符数为0,设置超时
		// 定时值为0,并把终端设备设置成非规范模式.非阻塞方式只能工作于非规范模式.在此模式下当VMIN和VTIME均设置为0时,辅助队列中有多少支进程就读取多少字符,
		// 并立刻返回.
		if (flag & O_NONBLOCK) {
    d873:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    d877:	25 00 08 00 00       	and    $0x800,%eax
    d87c:	85 c0                	test   %eax,%eax
    d87e:	0f 84 fd 00 00 00    	je     d981 <check_char_dev+0x235>
			TTY_TABLE(min)->termios.c_cc[VMIN] = 0;
    d884:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d889:	74 26                	je     d8b1 <check_char_dev+0x165>
    d88b:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    d890:	7f 11                	jg     d8a3 <check_char_dev+0x157>
    d892:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d896:	83 e8 01             	sub    $0x1,%eax
    d899:	c1 e0 06             	shl    $0x6,%eax
    d89c:	05 20 18 04 00       	add    $0x41820,%eax
    d8a1:	eb 1b                	jmp    d8be <check_char_dev+0x172>
    d8a3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d8a7:	c1 e0 06             	shl    $0x6,%eax
    d8aa:	05 20 18 04 00       	add    $0x41820,%eax
    d8af:	eb 0d                	jmp    d8be <check_char_dev+0x172>
    d8b1:	a1 80 12 03 00       	mov    0x31280,%eax
    d8b6:	c1 e0 06             	shl    $0x6,%eax
    d8b9:	05 20 18 04 00       	add    $0x41820,%eax
    d8be:	c6 40 17 00          	movb   $0x0,0x17(%eax)
			TTY_TABLE(min)->termios.c_cc[VTIME] = 0;
    d8c2:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d8c7:	74 26                	je     d8ef <check_char_dev+0x1a3>
    d8c9:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    d8ce:	7f 11                	jg     d8e1 <check_char_dev+0x195>
    d8d0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d8d4:	83 e8 01             	sub    $0x1,%eax
    d8d7:	c1 e0 06             	shl    $0x6,%eax
    d8da:	05 20 18 04 00       	add    $0x41820,%eax
    d8df:	eb 1b                	jmp    d8fc <check_char_dev+0x1b0>
    d8e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d8e5:	c1 e0 06             	shl    $0x6,%eax
    d8e8:	05 20 18 04 00       	add    $0x41820,%eax
    d8ed:	eb 0d                	jmp    d8fc <check_char_dev+0x1b0>
    d8ef:	a1 80 12 03 00       	mov    0x31280,%eax
    d8f4:	c1 e0 06             	shl    $0x6,%eax
    d8f7:	05 20 18 04 00       	add    $0x41820,%eax
    d8fc:	c6 40 16 00          	movb   $0x0,0x16(%eax)
			TTY_TABLE(min)->termios.c_lflag &= ~ICANON;
    d900:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d905:	74 26                	je     d92d <check_char_dev+0x1e1>
    d907:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    d90c:	7f 11                	jg     d91f <check_char_dev+0x1d3>
    d90e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d912:	83 e8 01             	sub    $0x1,%eax
    d915:	c1 e0 06             	shl    $0x6,%eax
    d918:	05 20 18 04 00       	add    $0x41820,%eax
    d91d:	eb 1b                	jmp    d93a <check_char_dev+0x1ee>
    d91f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d923:	c1 e0 06             	shl    $0x6,%eax
    d926:	05 20 18 04 00       	add    $0x41820,%eax
    d92b:	eb 0d                	jmp    d93a <check_char_dev+0x1ee>
    d92d:	a1 80 12 03 00       	mov    0x31280,%eax
    d932:	c1 e0 06             	shl    $0x6,%eax
    d935:	05 20 18 04 00       	add    $0x41820,%eax
    d93a:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d93f:	74 28                	je     d969 <check_char_dev+0x21d>
    d941:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    d946:	7f 12                	jg     d95a <check_char_dev+0x20e>
    d948:	8b 54 24 0c          	mov    0xc(%esp),%edx
    d94c:	83 ea 01             	sub    $0x1,%edx
    d94f:	c1 e2 06             	shl    $0x6,%edx
    d952:	81 c2 20 18 04 00    	add    $0x41820,%edx
    d958:	eb 1e                	jmp    d978 <check_char_dev+0x22c>
    d95a:	8b 54 24 0c          	mov    0xc(%esp),%edx
    d95e:	c1 e2 06             	shl    $0x6,%edx
    d961:	81 c2 20 18 04 00    	add    $0x41820,%edx
    d967:	eb 0f                	jmp    d978 <check_char_dev+0x22c>
    d969:	8b 15 80 12 03 00    	mov    0x31280,%edx
    d96f:	c1 e2 06             	shl    $0x6,%edx
    d972:	81 c2 20 18 04 00    	add    $0x41820,%edx
    d978:	8b 52 0c             	mov    0xc(%edx),%edx
    d97b:	83 e2 fd             	and    $0xfffffffd,%edx
    d97e:	89 50 0c             	mov    %edx,0xc(%eax)
		}
	}
	return 0;
    d981:	b8 00 00 00 00       	mov    $0x0,%eax
}
    d986:	83 c4 10             	add    $0x10,%esp
    d989:	c3                   	ret    

0000d98a <sys_open>:
// O_EXCL(被创建文件必须不存在),O_APPEND(在文件尾添加数据)等其他一些标志的组合,如果本调用创建了一个新文件,则mode就用于指定
// 文件的许可属性.这些属性有S_IRWXU(文件宿主具有读,写和执行权限),S_IRUSR(用户具有读文件权限),S_IRWXG(组成员有读,写
// 执行)等等.对于新创建的文件,这些属性只应用于将来对文件的访问,创建了只读文件的打开调用也将返回一个读写的文件句柄.如果调用
// 操作成功,则返回文件句柄(文件描述符),否则返回出错码.参见sys/tat.h,fcntl.h.
int sys_open(const char * filename, int flag, int mode)
{
    d98a:	56                   	push   %esi
    d98b:	53                   	push   %ebx
    d98c:	83 ec 14             	sub    $0x14,%esp
	struct file * f;
	int i, fd;

	// 首先对参数进行处理.将用户设置的文件模式和进程模式屏蔽码相与,产适配器的文件模式.为了为打开文件建立一个文件句柄,需要搜索进程
	// 结构中文件结构指针数组,以查找一个空闲项.空闲项的索引号fd即是句柄值.若已经没有空闲项,则返回出错码(参数无效).
	mode &= 0777 & ~current->umask;
    d98f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d994:	0f b7 80 30 03 00 00 	movzwl 0x330(%eax),%eax
    d99b:	0f b7 c0             	movzwl %ax,%eax
    d99e:	f7 d0                	not    %eax
    d9a0:	25 ff 01 00 00       	and    $0x1ff,%eax
    d9a5:	21 44 24 28          	and    %eax,0x28(%esp)
	for(fd = 0 ; fd < NR_OPEN ; fd++)
    d9a9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
    d9b0:	00 
    d9b1:	eb 1c                	jmp    d9cf <sys_open+0x45>
		if (!current->filp[fd])
    d9b3:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d9b8:	8b 54 24 04          	mov    0x4(%esp),%edx
    d9bc:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    d9c2:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    d9c6:	85 c0                	test   %eax,%eax
    d9c8:	74 0e                	je     d9d8 <sys_open+0x4e>
	int i, fd;

	// 首先对参数进行处理.将用户设置的文件模式和进程模式屏蔽码相与,产适配器的文件模式.为了为打开文件建立一个文件句柄,需要搜索进程
	// 结构中文件结构指针数组,以查找一个空闲项.空闲项的索引号fd即是句柄值.若已经没有空闲项,则返回出错码(参数无效).
	mode &= 0777 & ~current->umask;
	for(fd = 0 ; fd < NR_OPEN ; fd++)
    d9ca:	83 44 24 04 01       	addl   $0x1,0x4(%esp)
    d9cf:	83 7c 24 04 13       	cmpl   $0x13,0x4(%esp)
    d9d4:	7e dd                	jle    d9b3 <sys_open+0x29>
    d9d6:	eb 01                	jmp    d9d9 <sys_open+0x4f>
		if (!current->filp[fd])
			break;          						// 找到空闲项.
    d9d8:	90                   	nop
	if (fd >= NR_OPEN)
    d9d9:	83 7c 24 04 13       	cmpl   $0x13,0x4(%esp)
    d9de:	7e 0a                	jle    d9ea <sys_open+0x60>
		return -EINVAL;
    d9e0:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    d9e5:	e9 c1 01 00 00       	jmp    dbab <sys_open+0x221>
	// 该子进程中调用execve()函数加载执行另一个新程序.此时子进程中开始执行新程序.若一个文件句柄close_on_exec中的对应位被置位,那么在
	// 执行execve()时该对应文件句柄将被关闭,否则该文件句柄将始终处于打开状态.当打开一个文件时,默认情况下文件句柄在子进程中也处于打开
	// 状态.因此这里要复位对应位.然后为打开文件在文件表中寻找一个空闲结构项.我们令f指向文件表数组开始处.搜索空闲文件结构项(引用计数
	// 为0的项),若已经没有空闲文件表结构项,则返回出错码.另外,第184行上的指针赋值"0+file_table"等同于"file_table"和"&file_table[0]"
	// 不过这样写可能更能明了一些.
	current->close_on_exec &= ~(1 << fd);           // 复位对应文件打开位
    d9ea:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d9ef:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    d9f5:	8b 9a 44 03 00 00    	mov    0x344(%edx),%ebx
    d9fb:	8b 54 24 04          	mov    0x4(%esp),%edx
    d9ff:	be 01 00 00 00       	mov    $0x1,%esi
    da04:	89 d1                	mov    %edx,%ecx
    da06:	d3 e6                	shl    %cl,%esi
    da08:	89 f2                	mov    %esi,%edx
    da0a:	f7 d2                	not    %edx
    da0c:	21 da                	and    %ebx,%edx
    da0e:	89 90 44 03 00 00    	mov    %edx,0x344(%eax)
	f = 0 + file_table;
    da14:	c7 44 24 0c 80 0f 04 	movl   $0x40f80,0xc(%esp)
    da1b:	00 
	for (i = 0 ; i < NR_FILE ; i++, f++)
    da1c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    da23:	00 
    da24:	eb 17                	jmp    da3d <sys_open+0xb3>
		if (!f->f_count) break;         			// 在文件表中找到空闲结构项。
    da26:	8b 44 24 0c          	mov    0xc(%esp),%eax
    da2a:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    da2e:	66 85 c0             	test   %ax,%ax
    da31:	74 13                	je     da46 <sys_open+0xbc>
	// 状态.因此这里要复位对应位.然后为打开文件在文件表中寻找一个空闲结构项.我们令f指向文件表数组开始处.搜索空闲文件结构项(引用计数
	// 为0的项),若已经没有空闲文件表结构项,则返回出错码.另外,第184行上的指针赋值"0+file_table"等同于"file_table"和"&file_table[0]"
	// 不过这样写可能更能明了一些.
	current->close_on_exec &= ~(1 << fd);           // 复位对应文件打开位
	f = 0 + file_table;
	for (i = 0 ; i < NR_FILE ; i++, f++)
    da33:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    da38:	83 44 24 0c 10       	addl   $0x10,0xc(%esp)
    da3d:	83 7c 24 08 3f       	cmpl   $0x3f,0x8(%esp)
    da42:	7e e2                	jle    da26 <sys_open+0x9c>
    da44:	eb 01                	jmp    da47 <sys_open+0xbd>
		if (!f->f_count) break;         			// 在文件表中找到空闲结构项。
    da46:	90                   	nop
	if (i >= NR_FILE)
    da47:	83 7c 24 08 3f       	cmpl   $0x3f,0x8(%esp)
    da4c:	7e 0a                	jle    da58 <sys_open+0xce>
		return -EINVAL;
    da4e:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    da53:	e9 53 01 00 00       	jmp    dbab <sys_open+0x221>
	// 此时我们让进程对应文件句柄fd的文件结构指针指向搜索到的文件结构,并令文件引用计数递增1.然后调用函数open_namei()执行打开操作,若返回
	// 值小于0,则说明出错,于是释放刚申请到的文件结构,返回出错码i.若文件打开操作成功,则inode是已打开文件的i节点指针.
	(current->filp[fd] = f)->f_count++;
    da58:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    da5d:	8b 54 24 04          	mov    0x4(%esp),%edx
    da61:	8d 8a d0 00 00 00    	lea    0xd0(%edx),%ecx
    da67:	8b 54 24 0c          	mov    0xc(%esp),%edx
    da6b:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
    da6f:	8b 54 24 04          	mov    0x4(%esp),%edx
    da73:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    da79:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    da7d:	0f b7 50 04          	movzwl 0x4(%eax),%edx
    da81:	83 c2 01             	add    $0x1,%edx
    da84:	66 89 50 04          	mov    %dx,0x4(%eax)
	// Log(LOG_INFO_TYPE, "<<<<< sys_open : fd = %d\n", fd);
	if ((i = open_namei(filename, flag, mode, &inode)) < 0) {
    da88:	89 e0                	mov    %esp,%eax
    da8a:	50                   	push   %eax
    da8b:	ff 74 24 2c          	pushl  0x2c(%esp)
    da8f:	ff 74 24 2c          	pushl  0x2c(%esp)
    da93:	ff 74 24 2c          	pushl  0x2c(%esp)
    da97:	e8 c2 5a 00 00       	call   1355e <open_namei>
    da9c:	83 c4 10             	add    $0x10,%esp
    da9f:	89 44 24 08          	mov    %eax,0x8(%esp)
    daa3:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    daa8:	79 2a                	jns    dad4 <sys_open+0x14a>
		current->filp[fd] = NULL;
    daaa:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    daaf:	8b 54 24 04          	mov    0x4(%esp),%edx
    dab3:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    dab9:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
    dac0:	00 
		f->f_count = 0;
    dac1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dac5:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)
		return i;
    dacb:	8b 44 24 08          	mov    0x8(%esp),%eax
    dacf:	e9 d7 00 00 00       	jmp    dbab <sys_open+0x221>
	}
	// 根据已打开文件i节点的属性字段,我们可以知道文件的类型.对于不同类型的文件,我们需要作一些特别处理.如果打开的是字符设备文件,那么我们就要调用
	// check_char_dev()函数来检查当前进程是否能打开这个字符设备文件.如果允许(函数返回0),那么在check_char_dev()中会根据具体文件打开标志为进程
	// 设置控制终端.如果不允许打开使用该字符设备文件,那么我们只能释放上面申请的文件项和句柄资源.返回出错码.
	/* ttys are somewhat special (ttyxx major==4, tty major==5) */
	if (S_ISCHR(inode->i_mode))
    dad4:	8b 04 24             	mov    (%esp),%eax
    dad7:	0f b7 00             	movzwl (%eax),%eax
    dada:	0f b7 c0             	movzwl %ax,%eax
    dadd:	25 00 f0 00 00       	and    $0xf000,%eax
    dae2:	3d 00 20 00 00       	cmp    $0x2000,%eax
    dae7:	75 59                	jne    db42 <sys_open+0x1b8>
		if (check_char_dev(inode, inode->i_zone[0], flag)) {
    dae9:	8b 04 24             	mov    (%esp),%eax
    daec:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    daf0:	0f b7 d0             	movzwl %ax,%edx
    daf3:	8b 04 24             	mov    (%esp),%eax
    daf6:	83 ec 04             	sub    $0x4,%esp
    daf9:	ff 74 24 28          	pushl  0x28(%esp)
    dafd:	52                   	push   %edx
    dafe:	50                   	push   %eax
    daff:	e8 48 fc ff ff       	call   d74c <check_char_dev>
    db04:	83 c4 10             	add    $0x10,%esp
    db07:	85 c0                	test   %eax,%eax
    db09:	74 37                	je     db42 <sys_open+0x1b8>
			iput(inode);
    db0b:	8b 04 24             	mov    (%esp),%eax
    db0e:	83 ec 0c             	sub    $0xc,%esp
    db11:	50                   	push   %eax
    db12:	e8 d8 0b 00 00       	call   e6ef <iput>
    db17:	83 c4 10             	add    $0x10,%esp
			current->filp[fd] = NULL;
    db1a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    db1f:	8b 54 24 04          	mov    0x4(%esp),%edx
    db23:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    db29:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
    db30:	00 
			f->f_count = 0;
    db31:	8b 44 24 0c          	mov    0xc(%esp),%eax
    db35:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)
			return -EAGAIN;         				// 出错号:资源暂不可用.
    db3b:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
    db40:	eb 69                	jmp    dbab <sys_open+0x221>
		}
	// 如果打开的是块设备文件,则检查盘片是否更换过.若更换过则需要让高速缓冲区中该设备的所有缓冲块失效.
	/* Likewise with block-devices: check for floppy_change */
	/* 同样对于块设备文件:需要检查盘片是否被更换 */
	if (S_ISBLK(inode->i_mode))
    db42:	8b 04 24             	mov    (%esp),%eax
    db45:	0f b7 00             	movzwl (%eax),%eax
    db48:	0f b7 c0             	movzwl %ax,%eax
    db4b:	25 00 f0 00 00       	and    $0xf000,%eax
    db50:	3d 00 60 00 00       	cmp    $0x6000,%eax
    db55:	75 16                	jne    db6d <sys_open+0x1e3>
		check_disk_change(inode->i_zone[0]);
    db57:	8b 04 24             	mov    (%esp),%eax
    db5a:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    db5e:	0f b7 c0             	movzwl %ax,%eax
    db61:	83 ec 0c             	sub    $0xc,%esp
    db64:	50                   	push   %eax
    db65:	e8 d2 15 00 00       	call   f13c <check_disk_change>
    db6a:	83 c4 10             	add    $0x10,%esp
	// 现在我们初始化打开文件的文件结构.设置文件结构属性和标志,置句柄引用计数为1,并设置i节点字段为打开文件的i节点,初始化文件读写指针为0.最后返回文件句柄号.
	f->f_mode = inode->i_mode;
    db6d:	8b 04 24             	mov    (%esp),%eax
    db70:	0f b7 10             	movzwl (%eax),%edx
    db73:	8b 44 24 0c          	mov    0xc(%esp),%eax
    db77:	66 89 10             	mov    %dx,(%eax)
	f->f_flags = flag;
    db7a:	8b 44 24 24          	mov    0x24(%esp),%eax
    db7e:	89 c2                	mov    %eax,%edx
    db80:	8b 44 24 0c          	mov    0xc(%esp),%eax
    db84:	66 89 50 02          	mov    %dx,0x2(%eax)
	f->f_count = 1;
    db88:	8b 44 24 0c          	mov    0xc(%esp),%eax
    db8c:	66 c7 40 04 01 00    	movw   $0x1,0x4(%eax)
	f->f_inode = inode;
    db92:	8b 14 24             	mov    (%esp),%edx
    db95:	8b 44 24 0c          	mov    0xc(%esp),%eax
    db99:	89 50 08             	mov    %edx,0x8(%eax)
	f->f_pos = 0;
    db9c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dba0:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	return (fd);
    dba7:	8b 44 24 04          	mov    0x4(%esp),%eax
}
    dbab:	83 c4 14             	add    $0x14,%esp
    dbae:	5b                   	pop    %ebx
    dbaf:	5e                   	pop    %esi
    dbb0:	c3                   	ret    

0000dbb1 <sys_creat>:

// 创建文件系统调用。
// 参数pathname是路径名，mode与上面的sys_open()函数相同。
// 成功则返回文件句柄，否则返回出错码。
int sys_creat(const char * pathname, int mode)
{
    dbb1:	83 ec 0c             	sub    $0xc,%esp
	return sys_open(pathname, O_CREAT | O_TRUNC, mode);
    dbb4:	83 ec 04             	sub    $0x4,%esp
    dbb7:	ff 74 24 18          	pushl  0x18(%esp)
    dbbb:	68 40 02 00 00       	push   $0x240
    dbc0:	ff 74 24 1c          	pushl  0x1c(%esp)
    dbc4:	e8 c1 fd ff ff       	call   d98a <sys_open>
    dbc9:	83 c4 10             	add    $0x10,%esp
}
    dbcc:	83 c4 0c             	add    $0xc,%esp
    dbcf:	c3                   	ret    

0000dbd0 <sys_close>:

// 关闭文件系统调用.
// 参数fd是文件句柄.
// 成功则返回0,否则返回出错码.
int sys_close(unsigned int fd)
{
    dbd0:	56                   	push   %esi
    dbd1:	53                   	push   %ebx
    dbd2:	83 ec 14             	sub    $0x14,%esp
	struct file * filp;

	// 首先检查参数有效性.若给出的文件句柄值大于程序同时打开的文件数NR_OPEN,则返回出错码(参数无效).然后复位进程的执行时关闭文件句柄位图对应位.若该文件句柄对应的
	// 文件结构指针是NULL,则返回出错码.
	if (fd >= NR_OPEN)
    dbd5:	83 7c 24 20 13       	cmpl   $0x13,0x20(%esp)
    dbda:	76 0a                	jbe    dbe6 <sys_close+0x16>
		return -EINVAL;
    dbdc:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    dbe1:	e9 c2 00 00 00       	jmp    dca8 <sys_close+0xd8>
	current->close_on_exec &= ~(1 << fd);
    dbe6:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    dbeb:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    dbf1:	8b 9a 44 03 00 00    	mov    0x344(%edx),%ebx
    dbf7:	8b 54 24 20          	mov    0x20(%esp),%edx
    dbfb:	be 01 00 00 00       	mov    $0x1,%esi
    dc00:	89 d1                	mov    %edx,%ecx
    dc02:	d3 e6                	shl    %cl,%esi
    dc04:	89 f2                	mov    %esi,%edx
    dc06:	f7 d2                	not    %edx
    dc08:	21 da                	and    %ebx,%edx
    dc0a:	89 90 44 03 00 00    	mov    %edx,0x344(%eax)
	if (!(filp = current->filp[fd]))
    dc10:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    dc15:	8b 54 24 20          	mov    0x20(%esp),%edx
    dc19:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    dc1f:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    dc23:	89 44 24 0c          	mov    %eax,0xc(%esp)
    dc27:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    dc2c:	75 07                	jne    dc35 <sys_close+0x65>
		return -EINVAL;
    dc2e:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    dc33:	eb 73                	jmp    dca8 <sys_close+0xd8>
	// 现在置该文件句柄的文件结构指针为NULL.若在关闭文件之前,对应文件结构中的句柄引用计数已经为0,则说明内核出错,停机.否则将对应文件结构的引用计数减1.此时如果它还不
	// 为0,则说明有其他进程正在使用该文件,于是返回0(成功).如果引用计数已等于0,说明该文件已经没有进程引用,该文件结构已变为空闲.则释放该文件i节点,返回0.
	current->filp[fd] = NULL;
    dc35:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    dc3a:	8b 54 24 20          	mov    0x20(%esp),%edx
    dc3e:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    dc44:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
    dc4b:	00 
	if (filp->f_count == 0)
    dc4c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dc50:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    dc54:	66 85 c0             	test   %ax,%ax
    dc57:	75 10                	jne    dc69 <sys_close+0x99>
		panic("Close: file count is 0");
    dc59:	83 ec 0c             	sub    $0xc,%esp
    dc5c:	68 d8 38 02 00       	push   $0x238d8
    dc61:	e8 a2 af ff ff       	call   8c08 <panic>
    dc66:	83 c4 10             	add    $0x10,%esp
	if (--filp->f_count)
    dc69:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dc6d:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    dc71:	8d 50 ff             	lea    -0x1(%eax),%edx
    dc74:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dc78:	66 89 50 04          	mov    %dx,0x4(%eax)
    dc7c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dc80:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    dc84:	66 85 c0             	test   %ax,%ax
    dc87:	74 07                	je     dc90 <sys_close+0xc0>
		return (0);
    dc89:	b8 00 00 00 00       	mov    $0x0,%eax
    dc8e:	eb 18                	jmp    dca8 <sys_close+0xd8>
	iput(filp->f_inode);
    dc90:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dc94:	8b 40 08             	mov    0x8(%eax),%eax
    dc97:	83 ec 0c             	sub    $0xc,%esp
    dc9a:	50                   	push   %eax
    dc9b:	e8 4f 0a 00 00       	call   e6ef <iput>
    dca0:	83 c4 10             	add    $0x10,%esp
	return (0);
    dca3:	b8 00 00 00 00       	mov    $0x0,%eax
}
    dca8:	83 c4 14             	add    $0x14,%esp
    dcab:	5b                   	pop    %ebx
    dcac:	5e                   	pop    %esi
    dcad:	c3                   	ret    

0000dcae <sys_lseek>:

// 重定位文件读写指针系统调用。
// 参数fd是文件句柄，offset是新的文件读写指针偏移值，origin是偏移的起始位置，可有三种选择：SEEK_SET（0,
// 从文件开始处）、SEEK_CUR（1,从当前读写位置）、SEEK_END（2,从文件尾处）。
int sys_lseek(unsigned int fd, off_t offset, int origin)
{
    dcae:	83 ec 10             	sub    $0x10,%esp
	int tmp;

	// 首先判断函数提供的参数有效性。如果文件句柄大于程序最多打开文件数NR_OPEN（20），或者该句柄的文件结构指针为空，
	// 或者对应文件结构的i节点字段为空，或者指定设备文件指针是不可定位的，则返回出错码并退出。如果文件对应i节点是管道
	// 节点，则返回出错码退出。因为管道头尾指针不可随意移动！
	if (fd >= NR_OPEN || !(file = current->filp[fd]) || !(file->f_inode)
    dcb1:	83 7c 24 14 13       	cmpl   $0x13,0x14(%esp)
    dcb6:	77 52                	ja     dd0a <sys_lseek+0x5c>
    dcb8:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    dcbd:	8b 54 24 14          	mov    0x14(%esp),%edx
    dcc1:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    dcc7:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    dccb:	89 44 24 0c          	mov    %eax,0xc(%esp)
    dccf:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    dcd4:	74 34                	je     dd0a <sys_lseek+0x5c>
    dcd6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dcda:	8b 40 08             	mov    0x8(%eax),%eax
    dcdd:	85 c0                	test   %eax,%eax
    dcdf:	74 29                	je     dd0a <sys_lseek+0x5c>
	   || !IS_SEEKABLE(MAJOR(file->f_inode->i_dev)))
    dce1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dce5:	8b 40 08             	mov    0x8(%eax),%eax
    dce8:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    dcec:	66 c1 e8 08          	shr    $0x8,%ax
    dcf0:	66 85 c0             	test   %ax,%ax
    dcf3:	74 15                	je     dd0a <sys_lseek+0x5c>
    dcf5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dcf9:	8b 40 08             	mov    0x8(%eax),%eax
    dcfc:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    dd00:	66 c1 e8 08          	shr    $0x8,%ax
    dd04:	66 83 f8 03          	cmp    $0x3,%ax
    dd08:	76 0a                	jbe    dd14 <sys_lseek+0x66>
		return -EBADF;
    dd0a:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
    dd0f:	e9 b1 00 00 00       	jmp    ddc5 <sys_lseek+0x117>
	if (file->f_inode->i_pipe)
    dd14:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dd18:	8b 40 08             	mov    0x8(%eax),%eax
    dd1b:	0f b6 40 38          	movzbl 0x38(%eax),%eax
    dd1f:	84 c0                	test   %al,%al
    dd21:	74 0a                	je     dd2d <sys_lseek+0x7f>
		return -ESPIPE;
    dd23:	b8 e3 ff ff ff       	mov    $0xffffffe3,%eax
    dd28:	e9 98 00 00 00       	jmp    ddc5 <sys_lseek+0x117>
	// 然后根据设置的定位标志，分别重新定位文件读写指针。
	switch (origin) {
    dd2d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    dd31:	83 f8 01             	cmp    $0x1,%eax
    dd34:	74 24                	je     dd5a <sys_lseek+0xac>
    dd36:	83 f8 02             	cmp    $0x2,%eax
    dd39:	74 4d                	je     dd88 <sys_lseek+0xda>
    dd3b:	85 c0                	test   %eax,%eax
    dd3d:	75 78                	jne    ddb7 <sys_lseek+0x109>
		// origin = SEEK_SET，要求以文件起始处作为原点设置文件读写指针。若偏移值小于零，则出错返回错误码。否则设置文件
		// 读写指针等于offset。
		case 0:
			if (offset < 0) return -EINVAL;
    dd3f:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    dd44:	79 07                	jns    dd4d <sys_lseek+0x9f>
    dd46:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    dd4b:	eb 78                	jmp    ddc5 <sys_lseek+0x117>
			file->f_pos = offset;
    dd4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dd51:	8b 54 24 18          	mov    0x18(%esp),%edx
    dd55:	89 50 0c             	mov    %edx,0xc(%eax)
			break;
    dd58:	eb 64                	jmp    ddbe <sys_lseek+0x110>
		// origin = SEEK_CUR，要求以文件当前读写指针处作为原点重定位读写指针。如果文件当前指针加上偏移值小于0,则返回
		// 出错码退出。否则在当前读写指针上加上偏移值。
		case 1:
			if (file->f_pos + offset < 0) return -EINVAL;
    dd5a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dd5e:	8b 50 0c             	mov    0xc(%eax),%edx
    dd61:	8b 44 24 18          	mov    0x18(%esp),%eax
    dd65:	01 d0                	add    %edx,%eax
    dd67:	85 c0                	test   %eax,%eax
    dd69:	79 07                	jns    dd72 <sys_lseek+0xc4>
    dd6b:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    dd70:	eb 53                	jmp    ddc5 <sys_lseek+0x117>
			file->f_pos += offset;
    dd72:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dd76:	8b 50 0c             	mov    0xc(%eax),%edx
    dd79:	8b 44 24 18          	mov    0x18(%esp),%eax
    dd7d:	01 c2                	add    %eax,%edx
    dd7f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dd83:	89 50 0c             	mov    %edx,0xc(%eax)
			break;
    dd86:	eb 36                	jmp    ddbe <sys_lseek+0x110>
		// origin = SEEK_END，要求以文件末尾作为原点重定位读写指针。此时若文件大小加上偏移值小于零则返回出错码退出。否则
		// 重定位读写指针为文件长度加上偏移值。
		case 2:
			if ((tmp = file->f_inode->i_size + offset) < 0)
    dd88:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dd8c:	8b 40 08             	mov    0x8(%eax),%eax
    dd8f:	8b 50 04             	mov    0x4(%eax),%edx
    dd92:	8b 44 24 18          	mov    0x18(%esp),%eax
    dd96:	01 d0                	add    %edx,%eax
    dd98:	89 44 24 08          	mov    %eax,0x8(%esp)
    dd9c:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    dda1:	79 07                	jns    ddaa <sys_lseek+0xfc>
				return -EINVAL;
    dda3:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    dda8:	eb 1b                	jmp    ddc5 <sys_lseek+0x117>
			file->f_pos = tmp;
    ddaa:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ddae:	8b 54 24 08          	mov    0x8(%esp),%edx
    ddb2:	89 50 0c             	mov    %edx,0xc(%eax)
			break;
    ddb5:	eb 07                	jmp    ddbe <sys_lseek+0x110>
		// origin设置无效，返回出错码退出。
		default:
			return -EINVAL;
    ddb7:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    ddbc:	eb 07                	jmp    ddc5 <sys_lseek+0x117>
	}
	return file->f_pos;             					// 最后返回重定位后的文件读写指针值。
    ddbe:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ddc2:	8b 40 0c             	mov    0xc(%eax),%eax
}
    ddc5:	83 c4 10             	add    $0x10,%esp
    ddc8:	c3                   	ret    

0000ddc9 <sys_read>:

// 读文件系统调用。
// 参数fd是文件句柄，buf是缓冲区，count是欲读字节数。
int sys_read(unsigned int fd, char * buf, int count)
{
    ddc9:	83 ec 1c             	sub    $0x1c,%esp
	struct file * file;
	struct m_inode * inode;

	// 同样地,我们首先判断函数参数的有效性.如果进程文件句柄值大于程序最多打开文件数NR_OPEN,或者需要写入的字节计数小于0,或者该句柄的文件结构指针为空,
	// 则返回出错码并退出.如果需读取的字节数count等于0,则返回0退出.
	if (fd >= NR_OPEN || count < 0 || !(file = current->filp[fd]))
    ddcc:	83 7c 24 20 13       	cmpl   $0x13,0x20(%esp)
    ddd1:	77 25                	ja     ddf8 <sys_read+0x2f>
    ddd3:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    ddd8:	78 1e                	js     ddf8 <sys_read+0x2f>
    ddda:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    dddf:	8b 54 24 20          	mov    0x20(%esp),%edx
    dde3:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    dde9:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    dded:	89 44 24 0c          	mov    %eax,0xc(%esp)
    ddf1:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    ddf6:	75 0a                	jne    de02 <sys_read+0x39>
		return -EINVAL;
    ddf8:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    ddfd:	e9 99 01 00 00       	jmp    df9b <sys_read+0x1d2>
	if (!count)
    de02:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    de07:	75 0a                	jne    de13 <sys_read+0x4a>
		return 0;
    de09:	b8 00 00 00 00       	mov    $0x0,%eax
    de0e:	e9 88 01 00 00       	jmp    df9b <sys_read+0x1d2>
	// 然后验证存放数据的缓冲区内存限制。并取文件的i节点。用于根据该i节点的属性，分别调用相应的读操作函数。若是管道操作，并且是读管道文件模式，则进行读
	// 管道操作，若成功则返回读取的字节数，否则返回出错码，退出。如果是字符型文件，则进行读字符设备操作，并返回读取的字符数。如果是块设备文件，则执行
	// 块设备读操作，并返回读取的字节数。
	verify_area(buf, count);
    de13:	83 ec 08             	sub    $0x8,%esp
    de16:	ff 74 24 30          	pushl  0x30(%esp)
    de1a:	ff 74 24 30          	pushl  0x30(%esp)
    de1e:	e8 80 a5 ff ff       	call   83a3 <verify_area>
    de23:	83 c4 10             	add    $0x10,%esp
	inode = file->f_inode;
    de26:	8b 44 24 0c          	mov    0xc(%esp),%eax
    de2a:	8b 40 08             	mov    0x8(%eax),%eax
    de2d:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 管道文件的读操作
	if (inode->i_pipe)
    de31:	8b 44 24 08          	mov    0x8(%esp),%eax
    de35:	0f b6 40 38          	movzbl 0x38(%eax),%eax
    de39:	84 c0                	test   %al,%al
    de3b:	74 37                	je     de74 <sys_read+0xab>
		return (file->f_mode & 1) ? read_pipe(inode, buf, count) : -EIO;
    de3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    de41:	0f b7 00             	movzwl (%eax),%eax
    de44:	0f b7 c0             	movzwl %ax,%eax
    de47:	83 e0 01             	and    $0x1,%eax
    de4a:	85 c0                	test   %eax,%eax
    de4c:	74 1c                	je     de6a <sys_read+0xa1>
    de4e:	83 ec 04             	sub    $0x4,%esp
    de51:	ff 74 24 2c          	pushl  0x2c(%esp)
    de55:	ff 74 24 2c          	pushl  0x2c(%esp)
    de59:	ff 74 24 14          	pushl  0x14(%esp)
    de5d:	e8 4f 46 00 00       	call   124b1 <read_pipe>
    de62:	83 c4 10             	add    $0x10,%esp
    de65:	e9 31 01 00 00       	jmp    df9b <sys_read+0x1d2>
    de6a:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
    de6f:	e9 27 01 00 00       	jmp    df9b <sys_read+0x1d2>
	// 字符设备的读操作
	if (S_ISCHR(inode->i_mode))
    de74:	8b 44 24 08          	mov    0x8(%esp),%eax
    de78:	0f b7 00             	movzwl (%eax),%eax
    de7b:	0f b7 c0             	movzwl %ax,%eax
    de7e:	25 00 f0 00 00       	and    $0xf000,%eax
    de83:	3d 00 20 00 00       	cmp    $0x2000,%eax
    de88:	75 2e                	jne    deb8 <sys_read+0xef>
		return rw_char(READ, inode->i_zone[0], buf, count, &file->f_pos);
    de8a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    de8e:	8d 50 0c             	lea    0xc(%eax),%edx
    de91:	8b 44 24 08          	mov    0x8(%esp),%eax
    de95:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    de99:	0f b7 c0             	movzwl %ax,%eax
    de9c:	83 ec 0c             	sub    $0xc,%esp
    de9f:	52                   	push   %edx
    dea0:	ff 74 24 38          	pushl  0x38(%esp)
    dea4:	ff 74 24 38          	pushl  0x38(%esp)
    dea8:	50                   	push   %eax
    dea9:	6a 00                	push   $0x0
    deab:	e8 11 2c 00 00       	call   10ac1 <rw_char>
    deb0:	83 c4 20             	add    $0x20,%esp
    deb3:	e9 e3 00 00 00       	jmp    df9b <sys_read+0x1d2>
	// 块设备的读操作
	if (S_ISBLK(inode->i_mode))
    deb8:	8b 44 24 08          	mov    0x8(%esp),%eax
    debc:	0f b7 00             	movzwl (%eax),%eax
    debf:	0f b7 c0             	movzwl %ax,%eax
    dec2:	25 00 f0 00 00       	and    $0xf000,%eax
    dec7:	3d 00 60 00 00       	cmp    $0x6000,%eax
    decc:	75 29                	jne    def7 <sys_read+0x12e>
		return block_read(inode->i_zone[0], &file->f_pos, buf, count);
    dece:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ded2:	8d 50 0c             	lea    0xc(%eax),%edx
    ded5:	8b 44 24 08          	mov    0x8(%esp),%eax
    ded9:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    dedd:	0f b7 c0             	movzwl %ax,%eax
    dee0:	ff 74 24 28          	pushl  0x28(%esp)
    dee4:	ff 74 24 28          	pushl  0x28(%esp)
    dee8:	52                   	push   %edx
    dee9:	50                   	push   %eax
    deea:	e8 52 28 00 00       	call   10741 <block_read>
    deef:	83 c4 10             	add    $0x10,%esp
    def2:	e9 a4 00 00 00       	jmp    df9b <sys_read+0x1d2>
	// 如果是目录文件或者是常规文件，则首先验证读取字节数count的有效性并进行调整（若读取字节数加上文件当前读写指针值大于文件长度，则重新设置读取字节
	// 数为文件长度-当前读写指针值，若读取数等于0,则返回0退出），然后执行文件读操作，返回读取的字节数并退出。
	if (S_ISDIR(inode->i_mode) || S_ISREG(inode->i_mode)) {
    def7:	8b 44 24 08          	mov    0x8(%esp),%eax
    defb:	0f b7 00             	movzwl (%eax),%eax
    defe:	0f b7 c0             	movzwl %ax,%eax
    df01:	25 00 f0 00 00       	and    $0xf000,%eax
    df06:	3d 00 40 00 00       	cmp    $0x4000,%eax
    df0b:	74 16                	je     df23 <sys_read+0x15a>
    df0d:	8b 44 24 08          	mov    0x8(%esp),%eax
    df11:	0f b7 00             	movzwl (%eax),%eax
    df14:	0f b7 c0             	movzwl %ax,%eax
    df17:	25 00 f0 00 00       	and    $0xf000,%eax
    df1c:	3d 00 80 00 00       	cmp    $0x8000,%eax
    df21:	75 58                	jne    df7b <sys_read+0x1b2>
		if (count + file->f_pos > inode->i_size)
    df23:	8b 44 24 0c          	mov    0xc(%esp),%eax
    df27:	8b 50 0c             	mov    0xc(%eax),%edx
    df2a:	8b 44 24 28          	mov    0x28(%esp),%eax
    df2e:	01 d0                	add    %edx,%eax
    df30:	89 c2                	mov    %eax,%edx
    df32:	8b 44 24 08          	mov    0x8(%esp),%eax
    df36:	8b 40 04             	mov    0x4(%eax),%eax
    df39:	39 c2                	cmp    %eax,%edx
    df3b:	76 16                	jbe    df53 <sys_read+0x18a>
			count = inode->i_size - file->f_pos;
    df3d:	8b 44 24 08          	mov    0x8(%esp),%eax
    df41:	8b 50 04             	mov    0x4(%eax),%edx
    df44:	8b 44 24 0c          	mov    0xc(%esp),%eax
    df48:	8b 40 0c             	mov    0xc(%eax),%eax
    df4b:	29 c2                	sub    %eax,%edx
    df4d:	89 d0                	mov    %edx,%eax
    df4f:	89 44 24 28          	mov    %eax,0x28(%esp)
		if (count <= 0)
    df53:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    df58:	7f 07                	jg     df61 <sys_read+0x198>
			return 0;
    df5a:	b8 00 00 00 00       	mov    $0x0,%eax
    df5f:	eb 3a                	jmp    df9b <sys_read+0x1d2>
		return file_read(inode, file, buf, count);
    df61:	ff 74 24 28          	pushl  0x28(%esp)
    df65:	ff 74 24 28          	pushl  0x28(%esp)
    df69:	ff 74 24 14          	pushl  0x14(%esp)
    df6d:	ff 74 24 14          	pushl  0x14(%esp)
    df71:	e8 d1 2b 00 00       	call   10b47 <file_read>
    df76:	83 c4 10             	add    $0x10,%esp
    df79:	eb 20                	jmp    df9b <sys_read+0x1d2>
	}
	// 执行到这里，说明我们无法判断文件的属性。则打印节点文件的属性，并返回出错码退出。
	printk("(Read)inode->i_mode=%06o\n\r", inode->i_mode);
    df7b:	8b 44 24 08          	mov    0x8(%esp),%eax
    df7f:	0f b7 00             	movzwl (%eax),%eax
    df82:	0f b7 c0             	movzwl %ax,%eax
    df85:	83 ec 08             	sub    $0x8,%esp
    df88:	50                   	push   %eax
    df89:	68 ef 38 02 00       	push   $0x238ef
    df8e:	e8 b4 ac ff ff       	call   8c47 <printk>
    df93:	83 c4 10             	add    $0x10,%esp
	return -EINVAL;
    df96:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
}
    df9b:	83 c4 1c             	add    $0x1c,%esp
    df9e:	c3                   	ret    

0000df9f <sys_write>:

// 写文件系统调用.
// 参数fd是文件句柄,buf是用户缓冲区,count是欲写字节数.
int sys_write(unsigned int fd, char * buf, int count)
{
    df9f:	83 ec 1c             	sub    $0x1c,%esp
	struct file * file;
	struct m_inode * inode;

	// 同样地,我们首先判断函数参数的有效性.如果进程文件句柄值大于程序最多打开文件数NR_OPEN,或者需要写入的字节计数小于0,或者该句柄的文件结构指针为空,
	// 则返回出错码并退出.如果需读取的字节数count等于0,则返回0退出.
	if (fd >= NR_OPEN || count < 0 || !(file = current->filp[fd]))
    dfa2:	83 7c 24 20 13       	cmpl   $0x13,0x20(%esp)
    dfa7:	77 25                	ja     dfce <sys_write+0x2f>
    dfa9:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    dfae:	78 1e                	js     dfce <sys_write+0x2f>
    dfb0:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    dfb5:	8b 54 24 20          	mov    0x20(%esp),%edx
    dfb9:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    dfbf:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    dfc3:	89 44 24 0c          	mov    %eax,0xc(%esp)
    dfc7:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    dfcc:	75 0a                	jne    dfd8 <sys_write+0x39>
		return -EINVAL;
    dfce:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    dfd3:	e9 2f 01 00 00       	jmp    e107 <sys_write+0x168>
	// Log(LOG_INFO_TYPE, "<<<<< sys_write : fd = %d>>>>>\n", fd);
	if (!count)
    dfd8:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    dfdd:	75 0a                	jne    dfe9 <sys_write+0x4a>
		return 0;
    dfdf:	b8 00 00 00 00       	mov    $0x0,%eax
    dfe4:	e9 1e 01 00 00       	jmp    e107 <sys_write+0x168>
	// 然后验证存放数据的缓冲区内存限制.并取文件的i节点.根据该i节点的属性,分别调用相应的写操作函数.若是管道文件,并且是写管道文件模式,则进行写管道操作,若成功则
	// 返回写入的字节数,否则返回出错码退出.如果是字符设备文件,则进行写字符设备操作,返回写入的字符数退出.如果是块设备文件,则进行块设备写操作,并返回写入的字节数
	// 退出.若是常规文件,则执行文件写操作,并返回写入的字节数.退出.
	inode = file->f_inode;
    dfe9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dfed:	8b 40 08             	mov    0x8(%eax),%eax
    dff0:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 管道的写操作
	if (inode->i_pipe)
    dff4:	8b 44 24 08          	mov    0x8(%esp),%eax
    dff8:	0f b6 40 38          	movzbl 0x38(%eax),%eax
    dffc:	84 c0                	test   %al,%al
    dffe:	74 37                	je     e037 <sys_write+0x98>
		return (file->f_mode & 2) ? write_pipe(inode, buf, count) : -EIO;
    e000:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e004:	0f b7 00             	movzwl (%eax),%eax
    e007:	0f b7 c0             	movzwl %ax,%eax
    e00a:	83 e0 02             	and    $0x2,%eax
    e00d:	85 c0                	test   %eax,%eax
    e00f:	74 1c                	je     e02d <sys_write+0x8e>
    e011:	83 ec 04             	sub    $0x4,%esp
    e014:	ff 74 24 2c          	pushl  0x2c(%esp)
    e018:	ff 74 24 2c          	pushl  0x2c(%esp)
    e01c:	ff 74 24 14          	pushl  0x14(%esp)
    e020:	e8 2e 46 00 00       	call   12653 <write_pipe>
    e025:	83 c4 10             	add    $0x10,%esp
    e028:	e9 da 00 00 00       	jmp    e107 <sys_write+0x168>
    e02d:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
    e032:	e9 d0 00 00 00       	jmp    e107 <sys_write+0x168>
	// 字符设备的写操作
	if (S_ISCHR(inode->i_mode))
    e037:	8b 44 24 08          	mov    0x8(%esp),%eax
    e03b:	0f b7 00             	movzwl (%eax),%eax
    e03e:	0f b7 c0             	movzwl %ax,%eax
    e041:	25 00 f0 00 00       	and    $0xf000,%eax
    e046:	3d 00 20 00 00       	cmp    $0x2000,%eax
    e04b:	75 2e                	jne    e07b <sys_write+0xdc>
		return rw_char(WRITE, inode->i_zone[0], buf, count, &file->f_pos);
    e04d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e051:	8d 50 0c             	lea    0xc(%eax),%edx
    e054:	8b 44 24 08          	mov    0x8(%esp),%eax
    e058:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    e05c:	0f b7 c0             	movzwl %ax,%eax
    e05f:	83 ec 0c             	sub    $0xc,%esp
    e062:	52                   	push   %edx
    e063:	ff 74 24 38          	pushl  0x38(%esp)
    e067:	ff 74 24 38          	pushl  0x38(%esp)
    e06b:	50                   	push   %eax
    e06c:	6a 01                	push   $0x1
    e06e:	e8 4e 2a 00 00       	call   10ac1 <rw_char>
    e073:	83 c4 20             	add    $0x20,%esp
    e076:	e9 8c 00 00 00       	jmp    e107 <sys_write+0x168>
	// 块设备的写操作
	if (S_ISBLK(inode->i_mode))
    e07b:	8b 44 24 08          	mov    0x8(%esp),%eax
    e07f:	0f b7 00             	movzwl (%eax),%eax
    e082:	0f b7 c0             	movzwl %ax,%eax
    e085:	25 00 f0 00 00       	and    $0xf000,%eax
    e08a:	3d 00 60 00 00       	cmp    $0x6000,%eax
    e08f:	75 26                	jne    e0b7 <sys_write+0x118>
		return block_write(inode->i_zone[0], &file->f_pos, buf, count);
    e091:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e095:	8d 50 0c             	lea    0xc(%eax),%edx
    e098:	8b 44 24 08          	mov    0x8(%esp),%eax
    e09c:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    e0a0:	0f b7 c0             	movzwl %ax,%eax
    e0a3:	ff 74 24 28          	pushl  0x28(%esp)
    e0a7:	ff 74 24 28          	pushl  0x28(%esp)
    e0ab:	52                   	push   %edx
    e0ac:	50                   	push   %eax
    e0ad:	e8 db 24 00 00       	call   1058d <block_write>
    e0b2:	83 c4 10             	add    $0x10,%esp
    e0b5:	eb 50                	jmp    e107 <sys_write+0x168>
	// 文件的写操作
	if (S_ISREG(inode->i_mode))
    e0b7:	8b 44 24 08          	mov    0x8(%esp),%eax
    e0bb:	0f b7 00             	movzwl (%eax),%eax
    e0be:	0f b7 c0             	movzwl %ax,%eax
    e0c1:	25 00 f0 00 00       	and    $0xf000,%eax
    e0c6:	3d 00 80 00 00       	cmp    $0x8000,%eax
    e0cb:	75 1a                	jne    e0e7 <sys_write+0x148>
		return file_write(inode, file, buf, count);
    e0cd:	ff 74 24 28          	pushl  0x28(%esp)
    e0d1:	ff 74 24 28          	pushl  0x28(%esp)
    e0d5:	ff 74 24 14          	pushl  0x14(%esp)
    e0d9:	ff 74 24 14          	pushl  0x14(%esp)
    e0dd:	e8 0c 2c 00 00       	call   10cee <file_write>
    e0e2:	83 c4 10             	add    $0x10,%esp
    e0e5:	eb 20                	jmp    e107 <sys_write+0x168>
	// 执行到这里,说明我们无法判断文件的属性.则打印节点文件属性,并返回出错码退出.
	printk("(Write)inode->i_mode=%06o\n\r", inode->i_mode);
    e0e7:	8b 44 24 08          	mov    0x8(%esp),%eax
    e0eb:	0f b7 00             	movzwl (%eax),%eax
    e0ee:	0f b7 c0             	movzwl %ax,%eax
    e0f1:	83 ec 08             	sub    $0x8,%esp
    e0f4:	50                   	push   %eax
    e0f5:	68 0a 39 02 00       	push   $0x2390a
    e0fa:	e8 48 ab ff ff       	call   8c47 <printk>
    e0ff:	83 c4 10             	add    $0x10,%esp
	return -EINVAL;
    e102:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
}
    e107:	83 c4 1c             	add    $0x1c,%esp
    e10a:	c3                   	ret    

0000e10b <memset>:

// 用字符填写指定长度内存块.
// 用字符c填写s指向的内存区域,共填count字节.
// %0 - eax(字符c),%1 - edi(内存地址),%2 - ecx(字节数count).
static inline void * memset(void * s, char c, int count)
{
    e10b:	57                   	push   %edi
    e10c:	83 ec 04             	sub    $0x4,%esp
    e10f:	8b 44 24 10          	mov    0x10(%esp),%eax
    e113:	88 04 24             	mov    %al,(%esp)
__asm__(
    e116:	0f b6 04 24          	movzbl (%esp),%eax
    e11a:	8b 54 24 0c          	mov    0xc(%esp),%edx
    e11e:	8b 4c 24 14          	mov    0x14(%esp),%ecx
    e122:	89 d7                	mov    %edx,%edi
    e124:	fc                   	cld    
    e125:	57                   	push   %edi
    e126:	f3 aa                	rep stos %al,%es:(%edi)
    e128:	5f                   	pop    %edi
		"rep\n\t"											// 重复ecx指定的次数,执行.
		"stosb\n\t"											// 将al中字符存入es:[edi]中,并且edi++.
		"popl %%edi"
		::"a" (c), "D" (s), "c" (count)
		:);
return s;
    e129:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    e12d:	83 c4 04             	add    $0x4,%esp
    e130:	5f                   	pop    %edi
    e131:	c3                   	ret    

0000e132 <wait_on_inode>:
static void write_inode(struct m_inode * inode);					// 写i节点信息到高速缓冲中.

// 等待指定的i节点可用.
// 如果i节点已被锁定,则将当前任务置为不可中断的等待状态,并添加到该i节点的等待队列i_wait中.直到该i节点解锁并明确地唤醒本任务.
static inline void wait_on_inode(struct m_inode * inode)
{
    e132:	83 ec 0c             	sub    $0xc,%esp
	cli();
    e135:	fa                   	cli    
	while (inode->i_lock)
    e136:	eb 13                	jmp    e14b <wait_on_inode+0x19>
		sleep_on(&inode->i_wait);									// kernel/sched.c
    e138:	8b 44 24 10          	mov    0x10(%esp),%eax
    e13c:	83 c0 20             	add    $0x20,%eax
    e13f:	83 ec 0c             	sub    $0xc,%esp
    e142:	50                   	push   %eax
    e143:	e8 ee 8f ff ff       	call   7136 <sleep_on>
    e148:	83 c4 10             	add    $0x10,%esp
// 等待指定的i节点可用.
// 如果i节点已被锁定,则将当前任务置为不可中断的等待状态,并添加到该i节点的等待队列i_wait中.直到该i节点解锁并明确地唤醒本任务.
static inline void wait_on_inode(struct m_inode * inode)
{
	cli();
	while (inode->i_lock)
    e14b:	8b 44 24 10          	mov    0x10(%esp),%eax
    e14f:	0f b6 40 36          	movzbl 0x36(%eax),%eax
    e153:	84 c0                	test   %al,%al
    e155:	75 e1                	jne    e138 <wait_on_inode+0x6>
		sleep_on(&inode->i_wait);									// kernel/sched.c
	sti();
    e157:	fb                   	sti    
}
    e158:	90                   	nop
    e159:	83 c4 0c             	add    $0xc,%esp
    e15c:	c3                   	ret    

0000e15d <lock_inode>:

// 对i节点上锁(锁定指定的i节点)
// 如果i节点已被锁定,则将当前任务置为不可中断的等待状态,并添加到该i节点的等待队列i_wait中.直到该i节点解锁并明确地唤醒本任务.然后
// 对其上锁.
static inline void lock_inode(struct m_inode * inode)
{
    e15d:	83 ec 0c             	sub    $0xc,%esp
	cli();
    e160:	fa                   	cli    
	while (inode->i_lock)
    e161:	eb 13                	jmp    e176 <lock_inode+0x19>
		sleep_on(&inode->i_wait);
    e163:	8b 44 24 10          	mov    0x10(%esp),%eax
    e167:	83 c0 20             	add    $0x20,%eax
    e16a:	83 ec 0c             	sub    $0xc,%esp
    e16d:	50                   	push   %eax
    e16e:	e8 c3 8f ff ff       	call   7136 <sleep_on>
    e173:	83 c4 10             	add    $0x10,%esp
// 如果i节点已被锁定,则将当前任务置为不可中断的等待状态,并添加到该i节点的等待队列i_wait中.直到该i节点解锁并明确地唤醒本任务.然后
// 对其上锁.
static inline void lock_inode(struct m_inode * inode)
{
	cli();
	while (inode->i_lock)
    e176:	8b 44 24 10          	mov    0x10(%esp),%eax
    e17a:	0f b6 40 36          	movzbl 0x36(%eax),%eax
    e17e:	84 c0                	test   %al,%al
    e180:	75 e1                	jne    e163 <lock_inode+0x6>
		sleep_on(&inode->i_wait);
	inode->i_lock = 1;												// 置锁定标志.
    e182:	8b 44 24 10          	mov    0x10(%esp),%eax
    e186:	c6 40 36 01          	movb   $0x1,0x36(%eax)
	sti();
    e18a:	fb                   	sti    
}
    e18b:	90                   	nop
    e18c:	83 c4 0c             	add    $0xc,%esp
    e18f:	c3                   	ret    

0000e190 <unlock_inode>:

// 对指定的i节点解锁.
// 复位i节点的锁定标志,并明确地唤醒等待在此i节点等待队列i_wait上的所有进程.
static inline void unlock_inode(struct m_inode * inode)
{
    e190:	83 ec 0c             	sub    $0xc,%esp
	inode->i_lock = 0;
    e193:	8b 44 24 10          	mov    0x10(%esp),%eax
    e197:	c6 40 36 00          	movb   $0x0,0x36(%eax)
	wake_up(&inode->i_wait);										// kernel/sched.c
    e19b:	8b 44 24 10          	mov    0x10(%esp),%eax
    e19f:	83 c0 20             	add    $0x20,%eax
    e1a2:	83 ec 0c             	sub    $0xc,%esp
    e1a5:	50                   	push   %eax
    e1a6:	e8 a4 8f ff ff       	call   714f <wake_up>
    e1ab:	83 c4 10             	add    $0x10,%esp
}
    e1ae:	90                   	nop
    e1af:	83 c4 0c             	add    $0xc,%esp
    e1b2:	c3                   	ret    

0000e1b3 <invalidate_inodes>:

// 释放设备dev在内存i节点表中的所有i节点。
// 扫描内存中的i节点表数组，如果是指定设备使用的i节点就释放之。
void invalidate_inodes(int dev)
{
    e1b3:	83 ec 1c             	sub    $0x1c,%esp

	// 首先让指针指向内存i节点表数组首项。然后扫描i节点表指针数组中的所有i节点。针对其中每个i节点，先等待该i节点
	// 解锁可用（若目前正被上锁的话），再判断是否属于指定设备的i节点。如果是指定设备的i节点，则看看它是否还被使用
	// 着，即其引用计数是否不为0。若是则显示警告信息。然后释放之，即把i节点的设备号字段i_dev置。第50行上的指针
	// 赋值"0+inode_table"等同于"inode_table"、"&inode_table[0]"。不过这样写可能更明了一些。
	inode = 0 + inode_table;                  						// 指向i节点表指针数组首项。
    e1b6:	c7 44 24 08 c0 01 03 	movl   $0x301c0,0x8(%esp)
    e1bd:	00 
	for(i = 0 ; i < NR_INODE ; i++, inode++) {
    e1be:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    e1c5:	00 
    e1c6:	eb 59                	jmp    e221 <invalidate_inodes+0x6e>
		wait_on_inode(inode);           							// 等待该i节点可用（解锁）。
    e1c8:	83 ec 0c             	sub    $0xc,%esp
    e1cb:	ff 74 24 14          	pushl  0x14(%esp)
    e1cf:	e8 5e ff ff ff       	call   e132 <wait_on_inode>
    e1d4:	83 c4 10             	add    $0x10,%esp
		if (inode->i_dev == dev) {
    e1d7:	8b 44 24 08          	mov    0x8(%esp),%eax
    e1db:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e1df:	0f b7 c0             	movzwl %ax,%eax
    e1e2:	3b 44 24 20          	cmp    0x20(%esp),%eax
    e1e6:	75 2f                	jne    e217 <invalidate_inodes+0x64>
			if (inode->i_count)     								// 若其引用数不为0,则显示出错警告。
    e1e8:	8b 44 24 08          	mov    0x8(%esp),%eax
    e1ec:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e1f0:	66 85 c0             	test   %ax,%ax
    e1f3:	74 10                	je     e205 <invalidate_inodes+0x52>
				printk("inode in use on removed disk\n\r");
    e1f5:	83 ec 0c             	sub    $0xc,%esp
    e1f8:	68 28 39 02 00       	push   $0x23928
    e1fd:	e8 45 aa ff ff       	call   8c47 <printk>
    e202:	83 c4 10             	add    $0x10,%esp
			inode->i_dev = inode->i_dirt = 0;       				// 释放i节点（置设备号为0）。
    e205:	8b 44 24 08          	mov    0x8(%esp),%eax
    e209:	c6 40 37 00          	movb   $0x0,0x37(%eax)
    e20d:	8b 44 24 08          	mov    0x8(%esp),%eax
    e211:	66 c7 40 30 00 00    	movw   $0x0,0x30(%eax)
	// 首先让指针指向内存i节点表数组首项。然后扫描i节点表指针数组中的所有i节点。针对其中每个i节点，先等待该i节点
	// 解锁可用（若目前正被上锁的话），再判断是否属于指定设备的i节点。如果是指定设备的i节点，则看看它是否还被使用
	// 着，即其引用计数是否不为0。若是则显示警告信息。然后释放之，即把i节点的设备号字段i_dev置。第50行上的指针
	// 赋值"0+inode_table"等同于"inode_table"、"&inode_table[0]"。不过这样写可能更明了一些。
	inode = 0 + inode_table;                  						// 指向i节点表指针数组首项。
	for(i = 0 ; i < NR_INODE ; i++, inode++) {
    e217:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    e21c:	83 44 24 08 3c       	addl   $0x3c,0x8(%esp)
    e221:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    e226:	7e a0                	jle    e1c8 <invalidate_inodes+0x15>
			if (inode->i_count)     								// 若其引用数不为0,则显示出错警告。
				printk("inode in use on removed disk\n\r");
			inode->i_dev = inode->i_dirt = 0;       				// 释放i节点（置设备号为0）。
		}
	}
}
    e228:	90                   	nop
    e229:	83 c4 1c             	add    $0x1c,%esp
    e22c:	c3                   	ret    

0000e22d <sync_inodes>:

// 同步所有i节点。
// 把内存i节点表中所有i节点与设备上i节点作同步操作。
void sync_inodes(void)
{
    e22d:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 首先让内存i节点类型的指针指向i节点表首项，然后扫描整个i节点表中的节点。针对其中每个i节点，先等待该i节点解锁可用（若
	// 目前正被上锁的话），然后判断该i节点是否已被修改并且不是管道节点。若是这种情况则将该i节点写入高速缓冲区中，缓冲区管理
	// 程序buffer.c会在适当时机将它们写入盘中。
	inode = 0 + inode_table;                          				// 让指针首先指向i节点表指针数组首项。
    e230:	c7 44 24 08 c0 01 03 	movl   $0x301c0,0x8(%esp)
    e237:	00 
	for(i = 0 ; i < NR_INODE ; i++, inode++) {           			// 扫描i节点表指针数组。
    e238:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    e23f:	00 
    e240:	eb 40                	jmp    e282 <sync_inodes+0x55>
		wait_on_inode(inode);                   					// 等待该i节点可用（解锁）。
    e242:	83 ec 0c             	sub    $0xc,%esp
    e245:	ff 74 24 14          	pushl  0x14(%esp)
    e249:	e8 e4 fe ff ff       	call   e132 <wait_on_inode>
    e24e:	83 c4 10             	add    $0x10,%esp
		if (inode->i_dirt && !inode->i_pipe)    					// 若i节点已修改且不是管道节点，
    e251:	8b 44 24 08          	mov    0x8(%esp),%eax
    e255:	0f b6 40 37          	movzbl 0x37(%eax),%eax
    e259:	84 c0                	test   %al,%al
    e25b:	74 1b                	je     e278 <sync_inodes+0x4b>
    e25d:	8b 44 24 08          	mov    0x8(%esp),%eax
    e261:	0f b6 40 38          	movzbl 0x38(%eax),%eax
    e265:	84 c0                	test   %al,%al
    e267:	75 0f                	jne    e278 <sync_inodes+0x4b>
			write_inode(inode);             						// 则写盘（实际是写入缓冲区中）。
    e269:	83 ec 0c             	sub    $0xc,%esp
    e26c:	ff 74 24 14          	pushl  0x14(%esp)
    e270:	e8 5e 0b 00 00       	call   edd3 <write_inode>
    e275:	83 c4 10             	add    $0x10,%esp

	// 首先让内存i节点类型的指针指向i节点表首项，然后扫描整个i节点表中的节点。针对其中每个i节点，先等待该i节点解锁可用（若
	// 目前正被上锁的话），然后判断该i节点是否已被修改并且不是管道节点。若是这种情况则将该i节点写入高速缓冲区中，缓冲区管理
	// 程序buffer.c会在适当时机将它们写入盘中。
	inode = 0 + inode_table;                          				// 让指针首先指向i节点表指针数组首项。
	for(i = 0 ; i < NR_INODE ; i++, inode++) {           			// 扫描i节点表指针数组。
    e278:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    e27d:	83 44 24 08 3c       	addl   $0x3c,0x8(%esp)
    e282:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    e287:	7e b9                	jle    e242 <sync_inodes+0x15>
		wait_on_inode(inode);                   					// 等待该i节点可用（解锁）。
		if (inode->i_dirt && !inode->i_pipe)    					// 若i节点已修改且不是管道节点，
			write_inode(inode);             						// 则写盘（实际是写入缓冲区中）。
	}
}
    e289:	90                   	nop
    e28a:	83 c4 1c             	add    $0x1c,%esp
    e28d:	c3                   	ret    

0000e28e <_bmap>:

// 文件数据块映射到盘块的处理操作.(block位图处理函数,bmap - block map)
// 参数:inode - 文件的i节点指针;block - 文件中的数据块号;create - 创建块标志.该函数把指定的文件数据块block对应到设备上逻辑块上,并返回逻辑块号.
// 如果创建标志置位,则在设备上对应逻辑块不存在时就申请新磁盘块,返回文件数据块block对应在设备上的逻辑块号(盘块号).
static int _bmap(struct m_inode * inode, int block, int create)
{
    e28e:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;
	int i;

	// 首先判断参数文件数据块号block的有效性.如果块号小于0,则停机.如果块号大于直接块数 + 间接块数 + 二次间接块数,超出文件系统表示范围,则停机.
	if (block < 0)
    e291:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
    e296:	79 10                	jns    e2a8 <_bmap+0x1a>
		panic("_bmap: block<0");
    e298:	83 ec 0c             	sub    $0xc,%esp
    e29b:	68 47 39 02 00       	push   $0x23947
    e2a0:	e8 63 a9 ff ff       	call   8c08 <panic>
    e2a5:	83 c4 10             	add    $0x10,%esp
	if (block >= 7 + 512 + 512 * 512)
    e2a8:	81 7c 24 24 06 02 04 	cmpl   $0x40206,0x24(%esp)
    e2af:	00 
    e2b0:	7e 10                	jle    e2c2 <_bmap+0x34>
		panic("_bmap: block>big");
    e2b2:	83 ec 0c             	sub    $0xc,%esp
    e2b5:	68 56 39 02 00       	push   $0x23956
    e2ba:	e8 49 a9 ff ff       	call   8c08 <panic>
    e2bf:	83 c4 10             	add    $0x10,%esp
	// 然后根据文件块号的大小值和是否设置了创建标志分别进行处理.如果该块号小于7,则使用直接块表示.如果创建标志置位,并且i节点中对应该块的逻辑块(区段)字段为0,
	// 则向相应设备申请一磁盘块(逻辑块),并且将盘上逻辑块号(盘块号)填入逻辑块字段中.然后设置i节点改变时间,置i节点已修改标志.最后返回逻辑块号.函数new_block()
	// 定义在bitmap.c程序中.
	if (block < 7) {
    e2c2:	83 7c 24 24 06       	cmpl   $0x6,0x24(%esp)
    e2c7:	0f 8f 93 00 00 00    	jg     e360 <_bmap+0xd2>
		if (create && !inode->i_zone[block])
    e2cd:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    e2d2:	74 77                	je     e34b <_bmap+0xbd>
    e2d4:	8b 44 24 20          	mov    0x20(%esp),%eax
    e2d8:	8b 54 24 24          	mov    0x24(%esp),%edx
    e2dc:	0f b7 44 50 0e       	movzwl 0xe(%eax,%edx,2),%eax
    e2e1:	66 85 c0             	test   %ax,%ax
    e2e4:	75 65                	jne    e34b <_bmap+0xbd>
			if (inode->i_zone[block] = new_block(inode->i_dev)) {
    e2e6:	8b 44 24 20          	mov    0x20(%esp),%eax
    e2ea:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e2ee:	0f b7 c0             	movzwl %ax,%eax
    e2f1:	83 ec 0c             	sub    $0xc,%esp
    e2f4:	50                   	push   %eax
    e2f5:	e8 8f 6b 00 00       	call   14e89 <new_block>
    e2fa:	83 c4 10             	add    $0x10,%esp
    e2fd:	89 c1                	mov    %eax,%ecx
    e2ff:	8b 44 24 20          	mov    0x20(%esp),%eax
    e303:	8b 54 24 24          	mov    0x24(%esp),%edx
    e307:	66 89 4c 50 0e       	mov    %cx,0xe(%eax,%edx,2)
    e30c:	8b 44 24 20          	mov    0x20(%esp),%eax
    e310:	8b 54 24 24          	mov    0x24(%esp),%edx
    e314:	0f b7 44 50 0e       	movzwl 0xe(%eax,%edx,2),%eax
    e319:	66 85 c0             	test   %ax,%ax
    e31c:	74 2d                	je     e34b <_bmap+0xbd>
				inode->i_ctime = CURRENT_TIME;
    e31e:	a1 00 eb 02 00       	mov    0x2eb00,%eax
    e323:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
    e329:	01 d0                	add    %edx,%eax
    e32b:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    e330:	f7 e2                	mul    %edx
    e332:	c1 ea 05             	shr    $0x5,%edx
    e335:	a1 04 eb 02 00       	mov    0x2eb04,%eax
    e33a:	01 c2                	add    %eax,%edx
    e33c:	8b 44 24 20          	mov    0x20(%esp),%eax
    e340:	89 50 2c             	mov    %edx,0x2c(%eax)
				inode->i_dirt = 1;
    e343:	8b 44 24 20          	mov    0x20(%esp),%eax
    e347:	c6 40 37 01          	movb   $0x1,0x37(%eax)
			}
		return inode->i_zone[block];
    e34b:	8b 44 24 20          	mov    0x20(%esp),%eax
    e34f:	8b 54 24 24          	mov    0x24(%esp),%edx
    e353:	0f b7 44 50 0e       	movzwl 0xe(%eax,%edx,2),%eax
    e358:	0f b7 c0             	movzwl %ax,%eax
    e35b:	e9 53 03 00 00       	jmp    e6b3 <_bmap+0x425>
	}
	// 如果该块号>=7,且小于7+512,则说明使用的是一次间接块.下面对一次间接块进行处理.如果是创建,并且该i节点中对应间接块字段i_zone[7]是0,表明文件是首次使用间接块,
	// 则需申请一磁盘块用于存放间接块信息,并将此实际磁盘块号填入间接块字段中.然后设置i节点已修改标志和修改时间.如果创建时申请磁盘块失败,则此时i节点间接块字段i_zone[7]
	// 为0,则返回0.或者不是创建,但i_zone[7]原来就为0,表明i节点中没有间接块,于是映射磁盘块失败,返回0退出.
	block -= 7;
    e360:	83 6c 24 24 07       	subl   $0x7,0x24(%esp)
	if (block < 512) {
    e365:	81 7c 24 24 ff 01 00 	cmpl   $0x1ff,0x24(%esp)
    e36c:	00 
    e36d:	0f 8f 3b 01 00 00    	jg     e4ae <_bmap+0x220>
		// 如果创建标志置位，同时索引7这个位置没有绑定到对应的逻辑块,则申请一个逻辑块
		if (create && !inode->i_zone[7])
    e373:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    e378:	74 68                	je     e3e2 <_bmap+0x154>
    e37a:	8b 44 24 20          	mov    0x20(%esp),%eax
    e37e:	0f b7 40 1c          	movzwl 0x1c(%eax),%eax
    e382:	66 85 c0             	test   %ax,%ax
    e385:	75 5b                	jne    e3e2 <_bmap+0x154>
			if (inode->i_zone[7] = new_block(inode->i_dev)) {
    e387:	8b 44 24 20          	mov    0x20(%esp),%eax
    e38b:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e38f:	0f b7 c0             	movzwl %ax,%eax
    e392:	83 ec 0c             	sub    $0xc,%esp
    e395:	50                   	push   %eax
    e396:	e8 ee 6a 00 00       	call   14e89 <new_block>
    e39b:	83 c4 10             	add    $0x10,%esp
    e39e:	89 c2                	mov    %eax,%edx
    e3a0:	8b 44 24 20          	mov    0x20(%esp),%eax
    e3a4:	66 89 50 1c          	mov    %dx,0x1c(%eax)
    e3a8:	8b 44 24 20          	mov    0x20(%esp),%eax
    e3ac:	0f b7 40 1c          	movzwl 0x1c(%eax),%eax
    e3b0:	66 85 c0             	test   %ax,%ax
    e3b3:	74 2d                	je     e3e2 <_bmap+0x154>
				inode->i_dirt = 1;
    e3b5:	8b 44 24 20          	mov    0x20(%esp),%eax
    e3b9:	c6 40 37 01          	movb   $0x1,0x37(%eax)
				inode->i_ctime = CURRENT_TIME;
    e3bd:	a1 00 eb 02 00       	mov    0x2eb00,%eax
    e3c2:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
    e3c8:	01 d0                	add    %edx,%eax
    e3ca:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    e3cf:	f7 e2                	mul    %edx
    e3d1:	c1 ea 05             	shr    $0x5,%edx
    e3d4:	a1 04 eb 02 00       	mov    0x2eb04,%eax
    e3d9:	01 c2                	add    %eax,%edx
    e3db:	8b 44 24 20          	mov    0x20(%esp),%eax
    e3df:	89 50 2c             	mov    %edx,0x2c(%eax)
			}
		if (!inode->i_zone[7])
    e3e2:	8b 44 24 20          	mov    0x20(%esp),%eax
    e3e6:	0f b7 40 1c          	movzwl 0x1c(%eax),%eax
    e3ea:	66 85 c0             	test   %ax,%ax
    e3ed:	75 0a                	jne    e3f9 <_bmap+0x16b>
			return 0;
    e3ef:	b8 00 00 00 00       	mov    $0x0,%eax
    e3f4:	e9 ba 02 00 00       	jmp    e6b3 <_bmap+0x425>
		// 现在读取设备上该i节点的一次间接块.并取该间接块上第block项中的逻辑块号(盘块号)i.每一项占2个字节.如果是创建并且间接块的第block项中的逻辑块号为0的话,则申请一磁盘块,
		// 并让间接块中的第block项等于该新逻辑块块号.然后置位间接块的已修改标志.如果不是创建,则i就是需要映射(寻找)的逻辑块号.
		if (!(bh = bread(inode->i_dev, inode->i_zone[7])))
    e3f9:	8b 44 24 20          	mov    0x20(%esp),%eax
    e3fd:	0f b7 40 1c          	movzwl 0x1c(%eax),%eax
    e401:	0f b7 d0             	movzwl %ax,%edx
    e404:	8b 44 24 20          	mov    0x20(%esp),%eax
    e408:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e40c:	0f b7 c0             	movzwl %ax,%eax
    e40f:	83 ec 08             	sub    $0x8,%esp
    e412:	52                   	push   %edx
    e413:	50                   	push   %eax
    e414:	e8 cd 12 00 00       	call   f6e6 <bread>
    e419:	83 c4 10             	add    $0x10,%esp
    e41c:	89 44 24 08          	mov    %eax,0x8(%esp)
    e420:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    e425:	75 0a                	jne    e431 <_bmap+0x1a3>
			return 0;
    e427:	b8 00 00 00 00       	mov    $0x0,%eax
    e42c:	e9 82 02 00 00       	jmp    e6b3 <_bmap+0x425>
		i = ((unsigned short *) (bh->b_data))[block];
    e431:	8b 44 24 08          	mov    0x8(%esp),%eax
    e435:	8b 00                	mov    (%eax),%eax
    e437:	8b 54 24 24          	mov    0x24(%esp),%edx
    e43b:	01 d2                	add    %edx,%edx
    e43d:	01 d0                	add    %edx,%eax
    e43f:	0f b7 00             	movzwl (%eax),%eax
    e442:	0f b7 c0             	movzwl %ax,%eax
    e445:	89 44 24 0c          	mov    %eax,0xc(%esp)
		if (create && !i)
    e449:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    e44e:	74 46                	je     e496 <_bmap+0x208>
    e450:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e455:	75 3f                	jne    e496 <_bmap+0x208>
			if (i = new_block(inode->i_dev)) {
    e457:	8b 44 24 20          	mov    0x20(%esp),%eax
    e45b:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e45f:	0f b7 c0             	movzwl %ax,%eax
    e462:	83 ec 0c             	sub    $0xc,%esp
    e465:	50                   	push   %eax
    e466:	e8 1e 6a 00 00       	call   14e89 <new_block>
    e46b:	83 c4 10             	add    $0x10,%esp
    e46e:	89 44 24 0c          	mov    %eax,0xc(%esp)
    e472:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e477:	74 1d                	je     e496 <_bmap+0x208>
				((unsigned short *) (bh->b_data))[block] = i;
    e479:	8b 44 24 08          	mov    0x8(%esp),%eax
    e47d:	8b 00                	mov    (%eax),%eax
    e47f:	8b 54 24 24          	mov    0x24(%esp),%edx
    e483:	01 d2                	add    %edx,%edx
    e485:	01 d0                	add    %edx,%eax
    e487:	8b 54 24 0c          	mov    0xc(%esp),%edx
    e48b:	66 89 10             	mov    %dx,(%eax)
				bh->b_dirt = 1;
    e48e:	8b 44 24 08          	mov    0x8(%esp),%eax
    e492:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
			}
		// 最后释放该间接块占用的缓冲块,并返回磁盘上新申请或原有的对应block的逻辑块块号.
		brelse(bh);
    e496:	83 ec 0c             	sub    $0xc,%esp
    e499:	ff 74 24 14          	pushl  0x14(%esp)
    e49d:	e8 ee 11 00 00       	call   f690 <brelse>
    e4a2:	83 c4 10             	add    $0x10,%esp
		return i;
    e4a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e4a9:	e9 05 02 00 00       	jmp    e6b3 <_bmap+0x425>
	}
	// 若程序运行到此,则表明数据块属于二次间接块.其处理过程与一次间接块类似.下面是对二次间接块的处理.首先将block再减去间接块所容纳的块数(512).然后根据
	// 是否设置了创建标志进行创建或寻找处理.如果是新创建并且i节点的二次间接块字段为0,则需申请一磁盘块用于存放二次间接块的一级块信息,并将此实际磁盘块号填入
	// 二次间接块字段中.之后,置i节点已修改编制和修改时间.同样地,如果创建时申请磁盘块失败,则此时i节点二次间接块字段i_zone[8]为0,则返回0.或者不是创建,但
	// i_zone[8]原来变为0,表明i节点中没有间接块,于是映射磁盘块失败,返回0退出.
	block -= 512;
    e4ae:	81 6c 24 24 00 02 00 	subl   $0x200,0x24(%esp)
    e4b5:	00 
	if (create && !inode->i_zone[8])
    e4b6:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    e4bb:	74 68                	je     e525 <_bmap+0x297>
    e4bd:	8b 44 24 20          	mov    0x20(%esp),%eax
    e4c1:	0f b7 40 1e          	movzwl 0x1e(%eax),%eax
    e4c5:	66 85 c0             	test   %ax,%ax
    e4c8:	75 5b                	jne    e525 <_bmap+0x297>
		if (inode->i_zone[8] = new_block(inode->i_dev)) {
    e4ca:	8b 44 24 20          	mov    0x20(%esp),%eax
    e4ce:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e4d2:	0f b7 c0             	movzwl %ax,%eax
    e4d5:	83 ec 0c             	sub    $0xc,%esp
    e4d8:	50                   	push   %eax
    e4d9:	e8 ab 69 00 00       	call   14e89 <new_block>
    e4de:	83 c4 10             	add    $0x10,%esp
    e4e1:	89 c2                	mov    %eax,%edx
    e4e3:	8b 44 24 20          	mov    0x20(%esp),%eax
    e4e7:	66 89 50 1e          	mov    %dx,0x1e(%eax)
    e4eb:	8b 44 24 20          	mov    0x20(%esp),%eax
    e4ef:	0f b7 40 1e          	movzwl 0x1e(%eax),%eax
    e4f3:	66 85 c0             	test   %ax,%ax
    e4f6:	74 2d                	je     e525 <_bmap+0x297>
			inode->i_dirt = 1;
    e4f8:	8b 44 24 20          	mov    0x20(%esp),%eax
    e4fc:	c6 40 37 01          	movb   $0x1,0x37(%eax)
			inode->i_ctime = CURRENT_TIME;
    e500:	a1 00 eb 02 00       	mov    0x2eb00,%eax
    e505:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
    e50b:	01 d0                	add    %edx,%eax
    e50d:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    e512:	f7 e2                	mul    %edx
    e514:	c1 ea 05             	shr    $0x5,%edx
    e517:	a1 04 eb 02 00       	mov    0x2eb04,%eax
    e51c:	01 c2                	add    %eax,%edx
    e51e:	8b 44 24 20          	mov    0x20(%esp),%eax
    e522:	89 50 2c             	mov    %edx,0x2c(%eax)
		}
	if (!inode->i_zone[8])
    e525:	8b 44 24 20          	mov    0x20(%esp),%eax
    e529:	0f b7 40 1e          	movzwl 0x1e(%eax),%eax
    e52d:	66 85 c0             	test   %ax,%ax
    e530:	75 0a                	jne    e53c <_bmap+0x2ae>
		return 0;
    e532:	b8 00 00 00 00       	mov    $0x0,%eax
    e537:	e9 77 01 00 00       	jmp    e6b3 <_bmap+0x425>
	// 现在读取设备上该i节点的二次间接块.并取该二次间接块的一级块上第(block/512)项中的逻辑块号i.如果是创建并且二次间接块的一级块上第(block/512)项中的逻辑
	// 块号为0的话,则需申请一磁盘块(逻辑块)作为二次间接块的二级块i,并让二次间接块的一级块中第(block/512)项等于该二级块的块号i.然后置位二次间接块的一级块已
	// 修改标志.并释放二次间接块的一级块.如果不是创建,则i就是需要映射(寻找)的逻辑块号.
	if (!(bh = bread(inode->i_dev, inode->i_zone[8])))
    e53c:	8b 44 24 20          	mov    0x20(%esp),%eax
    e540:	0f b7 40 1e          	movzwl 0x1e(%eax),%eax
    e544:	0f b7 d0             	movzwl %ax,%edx
    e547:	8b 44 24 20          	mov    0x20(%esp),%eax
    e54b:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e54f:	0f b7 c0             	movzwl %ax,%eax
    e552:	83 ec 08             	sub    $0x8,%esp
    e555:	52                   	push   %edx
    e556:	50                   	push   %eax
    e557:	e8 8a 11 00 00       	call   f6e6 <bread>
    e55c:	83 c4 10             	add    $0x10,%esp
    e55f:	89 44 24 08          	mov    %eax,0x8(%esp)
    e563:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    e568:	75 0a                	jne    e574 <_bmap+0x2e6>
		return 0;
    e56a:	b8 00 00 00 00       	mov    $0x0,%eax
    e56f:	e9 3f 01 00 00       	jmp    e6b3 <_bmap+0x425>
	i = ((unsigned short *)bh->b_data)[block >> 9];
    e574:	8b 44 24 08          	mov    0x8(%esp),%eax
    e578:	8b 00                	mov    (%eax),%eax
    e57a:	8b 54 24 24          	mov    0x24(%esp),%edx
    e57e:	c1 fa 09             	sar    $0x9,%edx
    e581:	01 d2                	add    %edx,%edx
    e583:	01 d0                	add    %edx,%eax
    e585:	0f b7 00             	movzwl (%eax),%eax
    e588:	0f b7 c0             	movzwl %ax,%eax
    e58b:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (create && !i)
    e58f:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    e594:	74 49                	je     e5df <_bmap+0x351>
    e596:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e59b:	75 42                	jne    e5df <_bmap+0x351>
		if (i = new_block(inode->i_dev)) {
    e59d:	8b 44 24 20          	mov    0x20(%esp),%eax
    e5a1:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e5a5:	0f b7 c0             	movzwl %ax,%eax
    e5a8:	83 ec 0c             	sub    $0xc,%esp
    e5ab:	50                   	push   %eax
    e5ac:	e8 d8 68 00 00       	call   14e89 <new_block>
    e5b1:	83 c4 10             	add    $0x10,%esp
    e5b4:	89 44 24 0c          	mov    %eax,0xc(%esp)
    e5b8:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e5bd:	74 20                	je     e5df <_bmap+0x351>
			((unsigned short *) (bh->b_data))[block >> 9] = i;
    e5bf:	8b 44 24 08          	mov    0x8(%esp),%eax
    e5c3:	8b 00                	mov    (%eax),%eax
    e5c5:	8b 54 24 24          	mov    0x24(%esp),%edx
    e5c9:	c1 fa 09             	sar    $0x9,%edx
    e5cc:	01 d2                	add    %edx,%edx
    e5ce:	01 d0                	add    %edx,%eax
    e5d0:	8b 54 24 0c          	mov    0xc(%esp),%edx
    e5d4:	66 89 10             	mov    %dx,(%eax)
			bh->b_dirt=1;
    e5d7:	8b 44 24 08          	mov    0x8(%esp),%eax
    e5db:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
		}
	brelse(bh);
    e5df:	83 ec 0c             	sub    $0xc,%esp
    e5e2:	ff 74 24 14          	pushl  0x14(%esp)
    e5e6:	e8 a5 10 00 00       	call   f690 <brelse>
    e5eb:	83 c4 10             	add    $0x10,%esp
	// 如果二次间接块的二级块块号为0,表示申请磁盘失败或者原来对应块号就为0,则返回0退出.否则就从设备上读取二次间接块的二级块,并取该二级块上第block项中的逻辑块
	// 号(与上511是为了限定block值不超过511).
	if (!i)
    e5ee:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e5f3:	75 0a                	jne    e5ff <_bmap+0x371>
		return 0;
    e5f5:	b8 00 00 00 00       	mov    $0x0,%eax
    e5fa:	e9 b4 00 00 00       	jmp    e6b3 <_bmap+0x425>
	if (!(bh = bread(inode->i_dev, i)))
    e5ff:	8b 44 24 20          	mov    0x20(%esp),%eax
    e603:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e607:	0f b7 c0             	movzwl %ax,%eax
    e60a:	83 ec 08             	sub    $0x8,%esp
    e60d:	ff 74 24 14          	pushl  0x14(%esp)
    e611:	50                   	push   %eax
    e612:	e8 cf 10 00 00       	call   f6e6 <bread>
    e617:	83 c4 10             	add    $0x10,%esp
    e61a:	89 44 24 08          	mov    %eax,0x8(%esp)
    e61e:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    e623:	75 0a                	jne    e62f <_bmap+0x3a1>
		return 0;
    e625:	b8 00 00 00 00       	mov    $0x0,%eax
    e62a:	e9 84 00 00 00       	jmp    e6b3 <_bmap+0x425>
	i = ((unsigned short *)bh->b_data)[block & 511];
    e62f:	8b 44 24 08          	mov    0x8(%esp),%eax
    e633:	8b 00                	mov    (%eax),%eax
    e635:	8b 54 24 24          	mov    0x24(%esp),%edx
    e639:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
    e63f:	01 d2                	add    %edx,%edx
    e641:	01 d0                	add    %edx,%eax
    e643:	0f b7 00             	movzwl (%eax),%eax
    e646:	0f b7 c0             	movzwl %ax,%eax
    e649:	89 44 24 0c          	mov    %eax,0xc(%esp)
	// 如果是创建并且二级块的第block项中逻辑块号为0的话,则申请一磁盘块(逻辑块),作为最终存放数据信息的块.并让二级块中的第block项等于该新逻辑块块号(i).然后置位
	// 二级块的已修改标志.
	if (create && !i)
    e64d:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    e652:	74 4c                	je     e6a0 <_bmap+0x412>
    e654:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e659:	75 45                	jne    e6a0 <_bmap+0x412>
		if (i = new_block(inode->i_dev)) {
    e65b:	8b 44 24 20          	mov    0x20(%esp),%eax
    e65f:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e663:	0f b7 c0             	movzwl %ax,%eax
    e666:	83 ec 0c             	sub    $0xc,%esp
    e669:	50                   	push   %eax
    e66a:	e8 1a 68 00 00       	call   14e89 <new_block>
    e66f:	83 c4 10             	add    $0x10,%esp
    e672:	89 44 24 0c          	mov    %eax,0xc(%esp)
    e676:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e67b:	74 23                	je     e6a0 <_bmap+0x412>
			((unsigned short *) (bh->b_data))[block & 511] = i;
    e67d:	8b 44 24 08          	mov    0x8(%esp),%eax
    e681:	8b 00                	mov    (%eax),%eax
    e683:	8b 54 24 24          	mov    0x24(%esp),%edx
    e687:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
    e68d:	01 d2                	add    %edx,%edx
    e68f:	01 d0                	add    %edx,%eax
    e691:	8b 54 24 0c          	mov    0xc(%esp),%edx
    e695:	66 89 10             	mov    %dx,(%eax)
			bh->b_dirt = 1;
    e698:	8b 44 24 08          	mov    0x8(%esp),%eax
    e69c:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
		}
	// 最后释放该二次间接块的二级块,返回磁盘上新申请的或原有的对应block的逻辑块块号.
	brelse(bh);
    e6a0:	83 ec 0c             	sub    $0xc,%esp
    e6a3:	ff 74 24 14          	pushl  0x14(%esp)
    e6a7:	e8 e4 0f 00 00       	call   f690 <brelse>
    e6ac:	83 c4 10             	add    $0x10,%esp
	return i;
    e6af:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    e6b3:	83 c4 1c             	add    $0x1c,%esp
    e6b6:	c3                   	ret    

0000e6b7 <bmap>:

// 取文件数据块block在设备上对应的逻辑块号.
// 参数:inode - 文件的内存i节点指针;block - 文件中的数据块号.
// 若操作成功则返回对应的逻辑块号,否则返回0.
int bmap(struct m_inode * inode, int block)
{
    e6b7:	83 ec 0c             	sub    $0xc,%esp
	return _bmap(inode, block, 0);
    e6ba:	83 ec 04             	sub    $0x4,%esp
    e6bd:	6a 00                	push   $0x0
    e6bf:	ff 74 24 1c          	pushl  0x1c(%esp)
    e6c3:	ff 74 24 1c          	pushl  0x1c(%esp)
    e6c7:	e8 c2 fb ff ff       	call   e28e <_bmap>
    e6cc:	83 c4 10             	add    $0x10,%esp
}
    e6cf:	83 c4 0c             	add    $0xc,%esp
    e6d2:	c3                   	ret    

0000e6d3 <create_block>:

// 取文件数据块block在设备上对应的逻辑块号。如果对应的逻辑块不存在就创建一块。并返回设备上对应的逻辑块号。
// 参数：inode - 文件的内在i节点指针；block - 文件中的数据块号。
// 若操作成功则返回对应的逻辑块号，否则返回0.
int create_block(struct m_inode * inode, int block)
{
    e6d3:	83 ec 0c             	sub    $0xc,%esp
	return _bmap(inode, block, 1);
    e6d6:	83 ec 04             	sub    $0x4,%esp
    e6d9:	6a 01                	push   $0x1
    e6db:	ff 74 24 1c          	pushl  0x1c(%esp)
    e6df:	ff 74 24 1c          	pushl  0x1c(%esp)
    e6e3:	e8 a6 fb ff ff       	call   e28e <_bmap>
    e6e8:	83 c4 10             	add    $0x10,%esp
}
    e6eb:	83 c4 0c             	add    $0xc,%esp
    e6ee:	c3                   	ret    

0000e6ef <iput>:

// 放回(放置)一个i节点(加写入设备).
// 该函数主要用于把i节点引用计数值递减1,并且若是管道i节点,则唤醒等待的进程.若是块设备文件i节点则刷新设备.并且若i节点的链接计数为0,则释放该
// i节点占用的所有磁盘逻辑块,并释放该i节点.
void iput(struct m_inode * inode)
{
    e6ef:	83 ec 0c             	sub    $0xc,%esp
	// 首先判断参数给出的i节点的有效性,并等待inode节点解锁(如果已经上锁的话).如果i节点的引用计数为0,表示该i节点已经是空闲的.内核再要求对其进行
	// 放回操作,说明内核中其他代码有问题.于是显示错误信息并停机.
	if (!inode)
    e6f2:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    e6f7:	0f 84 a6 01 00 00    	je     e8a3 <iput+0x1b4>
		return;
	wait_on_inode(inode);
    e6fd:	83 ec 0c             	sub    $0xc,%esp
    e700:	ff 74 24 1c          	pushl  0x1c(%esp)
    e704:	e8 29 fa ff ff       	call   e132 <wait_on_inode>
    e709:	83 c4 10             	add    $0x10,%esp
	if (!inode->i_count)
    e70c:	8b 44 24 10          	mov    0x10(%esp),%eax
    e710:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e714:	66 85 c0             	test   %ax,%ax
    e717:	75 10                	jne    e729 <iput+0x3a>
		panic("iput: trying to free free inode");
    e719:	83 ec 0c             	sub    $0xc,%esp
    e71c:	68 68 39 02 00       	push   $0x23968
    e721:	e8 e2 a4 ff ff       	call   8c08 <panic>
    e726:	83 c4 10             	add    $0x10,%esp
	// 如果是管道i节点,则唤醒等待该管道的进程,引用次数减1,如果还有引用则返回.否则释放管道占用的内存页面,并复位该节点的引用计数值,已修改标志和管道
	// 标志,并返回.对于管道节点,inode->i_size存放着内存页地址.参见get_pipe_inode().
	if (inode->i_pipe) {
    e729:	8b 44 24 10          	mov    0x10(%esp),%eax
    e72d:	0f b6 40 38          	movzbl 0x38(%eax),%eax
    e731:	84 c0                	test   %al,%al
    e733:	74 7c                	je     e7b1 <iput+0xc2>
		wake_up(&inode->i_wait);
    e735:	8b 44 24 10          	mov    0x10(%esp),%eax
    e739:	83 c0 20             	add    $0x20,%eax
    e73c:	83 ec 0c             	sub    $0xc,%esp
    e73f:	50                   	push   %eax
    e740:	e8 0a 8a ff ff       	call   714f <wake_up>
    e745:	83 c4 10             	add    $0x10,%esp
		wake_up(&inode->i_wait2);
    e748:	8b 44 24 10          	mov    0x10(%esp),%eax
    e74c:	83 c0 24             	add    $0x24,%eax
    e74f:	83 ec 0c             	sub    $0xc,%esp
    e752:	50                   	push   %eax
    e753:	e8 f7 89 ff ff       	call   714f <wake_up>
    e758:	83 c4 10             	add    $0x10,%esp
		if (--inode->i_count)
    e75b:	8b 44 24 10          	mov    0x10(%esp),%eax
    e75f:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e763:	8d 50 ff             	lea    -0x1(%eax),%edx
    e766:	8b 44 24 10          	mov    0x10(%esp),%eax
    e76a:	66 89 50 34          	mov    %dx,0x34(%eax)
    e76e:	8b 44 24 10          	mov    0x10(%esp),%eax
    e772:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e776:	66 85 c0             	test   %ax,%ax
    e779:	0f 85 27 01 00 00    	jne    e8a6 <iput+0x1b7>
			return;
		free_page(inode->i_size);
    e77f:	8b 44 24 10          	mov    0x10(%esp),%eax
    e783:	8b 40 04             	mov    0x4(%eax),%eax
    e786:	83 ec 0c             	sub    $0xc,%esp
    e789:	50                   	push   %eax
    e78a:	e8 70 d5 ff ff       	call   bcff <free_page>
    e78f:	83 c4 10             	add    $0x10,%esp
		inode->i_count = 0;
    e792:	8b 44 24 10          	mov    0x10(%esp),%eax
    e796:	66 c7 40 34 00 00    	movw   $0x0,0x34(%eax)
		inode->i_dirt = 0;
    e79c:	8b 44 24 10          	mov    0x10(%esp),%eax
    e7a0:	c6 40 37 00          	movb   $0x0,0x37(%eax)
		inode->i_pipe = 0;
    e7a4:	8b 44 24 10          	mov    0x10(%esp),%eax
    e7a8:	c6 40 38 00          	movb   $0x0,0x38(%eax)
		return;
    e7ac:	e9 f6 00 00 00       	jmp    e8a7 <iput+0x1b8>
	}
	// 如果i节点对应的设备号 =0,则将此节点的引用计数递减1,返回.例如用于管道操作的i节点,其i节点的设备号为0.
	if (!inode->i_dev) {
    e7b1:	8b 44 24 10          	mov    0x10(%esp),%eax
    e7b5:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e7b9:	66 85 c0             	test   %ax,%ax
    e7bc:	75 18                	jne    e7d6 <iput+0xe7>
		inode->i_count--;
    e7be:	8b 44 24 10          	mov    0x10(%esp),%eax
    e7c2:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e7c6:	8d 50 ff             	lea    -0x1(%eax),%edx
    e7c9:	8b 44 24 10          	mov    0x10(%esp),%eax
    e7cd:	66 89 50 34          	mov    %dx,0x34(%eax)
		return;
    e7d1:	e9 d1 00 00 00       	jmp    e8a7 <iput+0x1b8>
	}
	// 如果是块设备文件的i节点,此时逻辑块字段0(i_zone[0])中是设备号,则刷新该设备.并等待i节点解锁.
	if (S_ISBLK(inode->i_mode)) {
    e7d6:	8b 44 24 10          	mov    0x10(%esp),%eax
    e7da:	0f b7 00             	movzwl (%eax),%eax
    e7dd:	0f b7 c0             	movzwl %ax,%eax
    e7e0:	25 00 f0 00 00       	and    $0xf000,%eax
    e7e5:	3d 00 60 00 00       	cmp    $0x6000,%eax
    e7ea:	75 26                	jne    e812 <iput+0x123>
		sync_dev(inode->i_zone[0]);
    e7ec:	8b 44 24 10          	mov    0x10(%esp),%eax
    e7f0:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    e7f4:	0f b7 c0             	movzwl %ax,%eax
    e7f7:	83 ec 0c             	sub    $0xc,%esp
    e7fa:	50                   	push   %eax
    e7fb:	e8 be 07 00 00       	call   efbe <sync_dev>
    e800:	83 c4 10             	add    $0x10,%esp
		wait_on_inode(inode);
    e803:	83 ec 0c             	sub    $0xc,%esp
    e806:	ff 74 24 1c          	pushl  0x1c(%esp)
    e80a:	e8 23 f9 ff ff       	call   e132 <wait_on_inode>
    e80f:	83 c4 10             	add    $0x10,%esp
	}
	// 如果i节点引用计数大于1,则计数递减1后就直接返回(因为该i节点还有人在用,不能释放),否则就说明i节点的引用计数值为1(因为第157行已经判断过计数是否为零).
	// 如果i节点的链接数为0,则说明i节点对应文件被删除.于是释放该i节点的所有逻辑块,并释放该i节点.函数free_inode()用于实际释放i节点操作,即复位i节点
	// 对应的i节点位图,清空i节点结构内容.
repeat:
	if (inode->i_count > 1) {
    e812:	8b 44 24 10          	mov    0x10(%esp),%eax
    e816:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e81a:	66 83 f8 01          	cmp    $0x1,%ax
    e81e:	76 15                	jbe    e835 <iput+0x146>
		inode->i_count--;
    e820:	8b 44 24 10          	mov    0x10(%esp),%eax
    e824:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e828:	8d 50 ff             	lea    -0x1(%eax),%edx
    e82b:	8b 44 24 10          	mov    0x10(%esp),%eax
    e82f:	66 89 50 34          	mov    %dx,0x34(%eax)
		return;
    e833:	eb 72                	jmp    e8a7 <iput+0x1b8>
	}
	if (!inode->i_nlinks) {
    e835:	8b 44 24 10          	mov    0x10(%esp),%eax
    e839:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
    e83d:	84 c0                	test   %al,%al
    e83f:	75 20                	jne    e861 <iput+0x172>
		// 释放该i节点对应的所有逻辑块
		truncate(inode);
    e841:	83 ec 0c             	sub    $0xc,%esp
    e844:	ff 74 24 1c          	pushl  0x1c(%esp)
    e848:	e8 7b 70 00 00       	call   158c8 <truncate>
    e84d:	83 c4 10             	add    $0x10,%esp
		// 从该设备的超级块中删除该i节点
		free_inode(inode);      								// bitmap.c
    e850:	83 ec 0c             	sub    $0xc,%esp
    e853:	ff 74 24 1c          	pushl  0x1c(%esp)
    e857:	e8 eb 67 00 00       	call   15047 <free_inode>
    e85c:	83 c4 10             	add    $0x10,%esp
		return;
    e85f:	eb 46                	jmp    e8a7 <iput+0x1b8>
	}
	// 如果该i节点已作过修改,则回写更新该i节点,并等待该i节点解锁.由于这里在写i节点时需要等待睡眠,此时其他进程有可能修改该i节点,因此在进程被唤醒后需要重复
	// 进行上述判断过程(repeat).
	if (inode->i_dirt) {
    e861:	8b 44 24 10          	mov    0x10(%esp),%eax
    e865:	0f b6 40 37          	movzbl 0x37(%eax),%eax
    e869:	84 c0                	test   %al,%al
    e86b:	74 20                	je     e88d <iput+0x19e>
		write_inode(inode);										/* we can sleep - so do again */
    e86d:	83 ec 0c             	sub    $0xc,%esp
    e870:	ff 74 24 1c          	pushl  0x1c(%esp)
    e874:	e8 5a 05 00 00       	call   edd3 <write_inode>
    e879:	83 c4 10             	add    $0x10,%esp
		wait_on_inode(inode);									/* 因为我们睡眠了,所以要重复判断 */
    e87c:	83 ec 0c             	sub    $0xc,%esp
    e87f:	ff 74 24 1c          	pushl  0x1c(%esp)
    e883:	e8 aa f8 ff ff       	call   e132 <wait_on_inode>
    e888:	83 c4 10             	add    $0x10,%esp
		goto repeat;
    e88b:	eb 85                	jmp    e812 <iput+0x123>
	}
	// 程序若能执行到此,说明该i节点的引用计数值i_count是1,链接数不为零,并且内容没有被修改过.因此此时只要把i节点引用计数递减1,返回.此时该i节点的i_count=0,
	// 表示已释放.
	inode->i_count--;
    e88d:	8b 44 24 10          	mov    0x10(%esp),%eax
    e891:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e895:	8d 50 ff             	lea    -0x1(%eax),%edx
    e898:	8b 44 24 10          	mov    0x10(%esp),%eax
    e89c:	66 89 50 34          	mov    %dx,0x34(%eax)
	return;
    e8a0:	90                   	nop
    e8a1:	eb 04                	jmp    e8a7 <iput+0x1b8>
void iput(struct m_inode * inode)
{
	// 首先判断参数给出的i节点的有效性,并等待inode节点解锁(如果已经上锁的话).如果i节点的引用计数为0,表示该i节点已经是空闲的.内核再要求对其进行
	// 放回操作,说明内核中其他代码有问题.于是显示错误信息并停机.
	if (!inode)
		return;
    e8a3:	90                   	nop
    e8a4:	eb 01                	jmp    e8a7 <iput+0x1b8>
	// 标志,并返回.对于管道节点,inode->i_size存放着内存页地址.参见get_pipe_inode().
	if (inode->i_pipe) {
		wake_up(&inode->i_wait);
		wake_up(&inode->i_wait2);
		if (--inode->i_count)
			return;
    e8a6:	90                   	nop
	}
	// 程序若能执行到此,说明该i节点的引用计数值i_count是1,链接数不为零,并且内容没有被修改过.因此此时只要把i节点引用计数递减1,返回.此时该i节点的i_count=0,
	// 表示已释放.
	inode->i_count--;
	return;
}
    e8a7:	83 c4 0c             	add    $0xc,%esp
    e8aa:	c3                   	ret    

0000e8ab <get_empty_inode>:

// 从i节点表(inode_table)中获取一个空闲i节点项.
// 寻找引用计数count为0的i节点,并将其写盘后清零,返回其指针.引用计数被置1.
struct m_inode * get_empty_inode(void)
{
    e8ab:	83 ec 1c             	sub    $0x1c,%esp

	// 在初始化last_inode指针指向i节点表头一项后循环扫描整个i节点表,如果last_inode已经指向i节点表的最后1项之后,则让其重新指向i节点表开始处,
	// 以继续循环寻找空闲i节点项.如果last_inode所指向的i节点计数值为0,则说明可能找到空闲i节点项.让inode指向该i节点.如果该i节点的已修改标志和
	// 和锁定标志均为0,则我们可以使用该i节点,于是退出for循环.
	do {
		inode = NULL;
    e8ae:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    e8b5:	00 
		for (i = NR_INODE; i ; i--) {							// NR_INODE = 64.
    e8b6:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
    e8bd:	00 
    e8be:	eb 59                	jmp    e919 <get_empty_inode+0x6e>
			if (++last_inode >= inode_table + NR_INODE)
    e8c0:	a1 60 e3 02 00       	mov    0x2e360,%eax
    e8c5:	83 c0 3c             	add    $0x3c,%eax
    e8c8:	a3 60 e3 02 00       	mov    %eax,0x2e360
    e8cd:	a1 60 e3 02 00       	mov    0x2e360,%eax
    e8d2:	ba c0 10 03 00       	mov    $0x310c0,%edx
    e8d7:	39 d0                	cmp    %edx,%eax
    e8d9:	72 0a                	jb     e8e5 <get_empty_inode+0x3a>
				last_inode = inode_table;
    e8db:	c7 05 60 e3 02 00 c0 	movl   $0x301c0,0x2e360
    e8e2:	01 03 00 
			if (!last_inode->i_count) {
    e8e5:	a1 60 e3 02 00       	mov    0x2e360,%eax
    e8ea:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e8ee:	66 85 c0             	test   %ax,%ax
    e8f1:	75 21                	jne    e914 <get_empty_inode+0x69>
				inode = last_inode;
    e8f3:	a1 60 e3 02 00       	mov    0x2e360,%eax
    e8f8:	89 44 24 0c          	mov    %eax,0xc(%esp)
				if (!inode->i_dirt && !inode->i_lock)
    e8fc:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e900:	0f b6 40 37          	movzbl 0x37(%eax),%eax
    e904:	84 c0                	test   %al,%al
    e906:	75 0c                	jne    e914 <get_empty_inode+0x69>
    e908:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e90c:	0f b6 40 36          	movzbl 0x36(%eax),%eax
    e910:	84 c0                	test   %al,%al
    e912:	74 0e                	je     e922 <get_empty_inode+0x77>
	// 在初始化last_inode指针指向i节点表头一项后循环扫描整个i节点表,如果last_inode已经指向i节点表的最后1项之后,则让其重新指向i节点表开始处,
	// 以继续循环寻找空闲i节点项.如果last_inode所指向的i节点计数值为0,则说明可能找到空闲i节点项.让inode指向该i节点.如果该i节点的已修改标志和
	// 和锁定标志均为0,则我们可以使用该i节点,于是退出for循环.
	do {
		inode = NULL;
		for (i = NR_INODE; i ; i--) {							// NR_INODE = 64.
    e914:	83 6c 24 08 01       	subl   $0x1,0x8(%esp)
    e919:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    e91e:	75 a0                	jne    e8c0 <get_empty_inode+0x15>
    e920:	eb 01                	jmp    e923 <get_empty_inode+0x78>
			if (++last_inode >= inode_table + NR_INODE)
				last_inode = inode_table;
			if (!last_inode->i_count) {
				inode = last_inode;
				if (!inode->i_dirt && !inode->i_lock)
					break;
    e922:	90                   	nop
			}
		}
		// 如果没有找到空闲i节点(inode=NULL),则将i节点表打印出来供调试使用,并停机.
		if (!inode) {
    e923:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e928:	75 6e                	jne    e998 <get_empty_inode+0xed>
			for (i = 0 ; i < NR_INODE ; i++)
    e92a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    e931:	00 
    e932:	eb 4d                	jmp    e981 <get_empty_inode+0xd6>
				printk("%04x: %6d\t", inode_table[i].i_dev,
					inode_table[i].i_num);
    e934:	8b 44 24 08          	mov    0x8(%esp),%eax
    e938:	c1 e0 02             	shl    $0x2,%eax
    e93b:	89 c2                	mov    %eax,%edx
    e93d:	c1 e2 04             	shl    $0x4,%edx
    e940:	29 c2                	sub    %eax,%edx
    e942:	89 d0                	mov    %edx,%eax
    e944:	05 f2 01 03 00       	add    $0x301f2,%eax
    e949:	0f b7 00             	movzwl (%eax),%eax
			}
		}
		// 如果没有找到空闲i节点(inode=NULL),则将i节点表打印出来供调试使用,并停机.
		if (!inode) {
			for (i = 0 ; i < NR_INODE ; i++)
				printk("%04x: %6d\t", inode_table[i].i_dev,
    e94c:	0f b7 d0             	movzwl %ax,%edx
    e94f:	8b 44 24 08          	mov    0x8(%esp),%eax
    e953:	c1 e0 02             	shl    $0x2,%eax
    e956:	89 c1                	mov    %eax,%ecx
    e958:	c1 e1 04             	shl    $0x4,%ecx
    e95b:	29 c1                	sub    %eax,%ecx
    e95d:	89 c8                	mov    %ecx,%eax
    e95f:	05 f0 01 03 00       	add    $0x301f0,%eax
    e964:	0f b7 00             	movzwl (%eax),%eax
    e967:	0f b7 c0             	movzwl %ax,%eax
    e96a:	83 ec 04             	sub    $0x4,%esp
    e96d:	52                   	push   %edx
    e96e:	50                   	push   %eax
    e96f:	68 88 39 02 00       	push   $0x23988
    e974:	e8 ce a2 ff ff       	call   8c47 <printk>
    e979:	83 c4 10             	add    $0x10,%esp
					break;
			}
		}
		// 如果没有找到空闲i节点(inode=NULL),则将i节点表打印出来供调试使用,并停机.
		if (!inode) {
			for (i = 0 ; i < NR_INODE ; i++)
    e97c:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    e981:	83 7c 24 08 3f       	cmpl   $0x3f,0x8(%esp)
    e986:	7e ac                	jle    e934 <get_empty_inode+0x89>
				printk("%04x: %6d\t", inode_table[i].i_dev,
					inode_table[i].i_num);
			panic("No free inodes in mem");
    e988:	83 ec 0c             	sub    $0xc,%esp
    e98b:	68 93 39 02 00       	push   $0x23993
    e990:	e8 73 a2 ff ff       	call   8c08 <panic>
    e995:	83 c4 10             	add    $0x10,%esp
		}
		// 等待该i节点解锁(如果又被上锁的话).如果该i节点已修改标志被置位的话,则将该i节点刷新(同步).因为刷新时可能会睡眠,因此需要再次循环等待i节点解锁.
		wait_on_inode(inode);
    e998:	83 ec 0c             	sub    $0xc,%esp
    e99b:	ff 74 24 18          	pushl  0x18(%esp)
    e99f:	e8 8e f7 ff ff       	call   e132 <wait_on_inode>
    e9a4:	83 c4 10             	add    $0x10,%esp
		while (inode->i_dirt) {
    e9a7:	eb 1e                	jmp    e9c7 <get_empty_inode+0x11c>
			write_inode(inode);
    e9a9:	83 ec 0c             	sub    $0xc,%esp
    e9ac:	ff 74 24 18          	pushl  0x18(%esp)
    e9b0:	e8 1e 04 00 00       	call   edd3 <write_inode>
    e9b5:	83 c4 10             	add    $0x10,%esp
			wait_on_inode(inode);
    e9b8:	83 ec 0c             	sub    $0xc,%esp
    e9bb:	ff 74 24 18          	pushl  0x18(%esp)
    e9bf:	e8 6e f7 ff ff       	call   e132 <wait_on_inode>
    e9c4:	83 c4 10             	add    $0x10,%esp
					inode_table[i].i_num);
			panic("No free inodes in mem");
		}
		// 等待该i节点解锁(如果又被上锁的话).如果该i节点已修改标志被置位的话,则将该i节点刷新(同步).因为刷新时可能会睡眠,因此需要再次循环等待i节点解锁.
		wait_on_inode(inode);
		while (inode->i_dirt) {
    e9c7:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e9cb:	0f b6 40 37          	movzbl 0x37(%eax),%eax
    e9cf:	84 c0                	test   %al,%al
    e9d1:	75 d6                	jne    e9a9 <get_empty_inode+0xfe>
			write_inode(inode);
			wait_on_inode(inode);
		}
	} while (inode->i_count);
    e9d3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e9d7:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e9db:	66 85 c0             	test   %ax,%ax
    e9de:	0f 85 ca fe ff ff    	jne    e8ae <get_empty_inode+0x3>
	// 如果i节点又被其他占用的话(i节点的计数值不为0了),则重新寻找空闲i节点.否则说明已找到符合要求的空闲i节点项.则将该i节点项内容清零,并置引用计数为1,返回该
	// i节点指针.
	memset(inode, 0, sizeof(*inode));
    e9e4:	83 ec 04             	sub    $0x4,%esp
    e9e7:	6a 3c                	push   $0x3c
    e9e9:	6a 00                	push   $0x0
    e9eb:	ff 74 24 18          	pushl  0x18(%esp)
    e9ef:	e8 17 f7 ff ff       	call   e10b <memset>
    e9f4:	83 c4 10             	add    $0x10,%esp
	inode->i_count = 1;
    e9f7:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e9fb:	66 c7 40 34 01 00    	movw   $0x1,0x34(%eax)
	return inode;
    ea01:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    ea05:	83 c4 1c             	add    $0x1c,%esp
    ea08:	c3                   	ret    

0000ea09 <get_pipe_inode>:

// 获取管道节点。
// 首先扫描i节点表，寻找一个空闲i节点项，然后取得一页空闲内存供管道使用。然后将得到的i节点的引用计数置为2（读者
// 和写者），初始化管道头和尾，置i节点的管道类型标志。返回i节点指针，如果失败则返回NULL。
struct m_inode * get_pipe_inode(void)
{
    ea09:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 首先从内存i节点表中取得一个空闲i节点。如果找不到空闲i节点则返回NULL。然后为该i节点申请一页内存，并让节点的
	// i_size字段指向该页面。如果已没有空闲内存，则释放该i节点，并返回NULL。
	if (!(inode = get_empty_inode()))
    ea0c:	e8 9a fe ff ff       	call   e8ab <get_empty_inode>
    ea11:	89 44 24 0c          	mov    %eax,0xc(%esp)
    ea15:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    ea1a:	75 07                	jne    ea23 <get_pipe_inode+0x1a>
		return NULL;
    ea1c:	b8 00 00 00 00       	mov    $0x0,%eax
    ea21:	eb 5a                	jmp    ea7d <get_pipe_inode+0x74>
	if (!(inode->i_size = get_free_page())) {         			// 节点的i_size字段指向缓冲区。
    ea23:	e8 66 e6 ff ff       	call   d08e <get_free_page>
    ea28:	89 c2                	mov    %eax,%edx
    ea2a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ea2e:	89 50 04             	mov    %edx,0x4(%eax)
    ea31:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ea35:	8b 40 04             	mov    0x4(%eax),%eax
    ea38:	85 c0                	test   %eax,%eax
    ea3a:	75 11                	jne    ea4d <get_pipe_inode+0x44>
		inode->i_count = 0;
    ea3c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ea40:	66 c7 40 34 00 00    	movw   $0x0,0x34(%eax)
		return NULL;
    ea46:	b8 00 00 00 00       	mov    $0x0,%eax
    ea4b:	eb 30                	jmp    ea7d <get_pipe_inode+0x74>
	}
	// 然后设置该i节点的引用计数为2,并复位管道头尾指针。i节点逻辑块号数组i_zone[]的i_zone[0]和i_zone[1]中分别用
	// 来存放管道头和管道尾指针。最后设置i节点是管道i节点标志并返回该i节点号。
	inode->i_count = 2;											/* sum of readers/writers */    /* 读/写两者总计 */
    ea4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ea51:	66 c7 40 34 02 00    	movw   $0x2,0x34(%eax)
	PIPE_HEAD(*inode) = PIPE_TAIL(*inode) = 0;      			// 复位管道头尾指针。
    ea57:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ea5b:	66 c7 40 10 00 00    	movw   $0x0,0x10(%eax)
    ea61:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ea65:	0f b7 50 10          	movzwl 0x10(%eax),%edx
    ea69:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ea6d:	66 89 50 0e          	mov    %dx,0xe(%eax)
	inode->i_pipe = 1;                              			// 置节点为管道使用标志。
    ea71:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ea75:	c6 40 38 01          	movb   $0x1,0x38(%eax)
	return inode;
    ea79:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    ea7d:	83 c4 1c             	add    $0x1c,%esp
    ea80:	c3                   	ret    

0000ea81 <iget>:
// 取得一个i节点.
// 参数:dev - 设备号;nr - i节点号.
// 从设备上读取指定节点号的i节点结构内容到内存i节点表中,并且返回该i节点指针.首先在位于高速缓冲区中的i节点表中搜寻,若找到指定节点号的i节点则在经过一些
// 判断处理后返回该i节点指针.否则从设备dev上读取指定i节点号的i节点信息放入i节点表中,并返回该i节点指针.
struct m_inode * iget(int dev, int nr)
{
    ea81:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode, * empty;

	// 首先判断参数有效性.若设备号是0,则表明内核代码问题,显示出错信息并停机.然后预先从i节点表中取一个空闲i节点备用.
	if (!dev)
    ea84:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    ea89:	75 10                	jne    ea9b <iget+0x1a>
		panic("iget with dev==0");
    ea8b:	83 ec 0c             	sub    $0xc,%esp
    ea8e:	68 a9 39 02 00       	push   $0x239a9
    ea93:	e8 70 a1 ff ff       	call   8c08 <panic>
    ea98:	83 c4 10             	add    $0x10,%esp
	empty = get_empty_inode();
    ea9b:	e8 0b fe ff ff       	call   e8ab <get_empty_inode>
    eaa0:	89 44 24 04          	mov    %eax,0x4(%esp)
	// 接着扫描i节点表.寻找参数指定节点号nr的i节点.并递增该节点的引用次数.如果当前扫描i节点的设备号不等于指定的设备号或者节点号不等于指定的节点号,则继续扫描.
	inode = inode_table;
    eaa4:	c7 44 24 0c c0 01 03 	movl   $0x301c0,0xc(%esp)
    eaab:	00 
	while (inode < NR_INODE + inode_table) {
    eaac:	e9 43 01 00 00       	jmp    ebf4 <iget+0x173>
		if (inode->i_dev != dev || inode->i_num != nr) {
    eab1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    eab5:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    eab9:	0f b7 c0             	movzwl %ax,%eax
    eabc:	3b 44 24 20          	cmp    0x20(%esp),%eax
    eac0:	75 11                	jne    ead3 <iget+0x52>
    eac2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    eac6:	0f b7 40 32          	movzwl 0x32(%eax),%eax
    eaca:	0f b7 c0             	movzwl %ax,%eax
    eacd:	3b 44 24 24          	cmp    0x24(%esp),%eax
    ead1:	74 0a                	je     eadd <iget+0x5c>
			inode++;
    ead3:	83 44 24 0c 3c       	addl   $0x3c,0xc(%esp)
			continue;
    ead8:	e9 17 01 00 00       	jmp    ebf4 <iget+0x173>
		}
		// 如果找到指定设备号dev和节点号nr的i节点,则等待该节点解锁(如果已上锁的话).在等待该节点解锁过程中,i节点可能会发生变化.所以再次进行上述相同判断.如果发生
		// 了变化,则重新扫描整个i节点表.
		wait_on_inode(inode);
    eadd:	83 ec 0c             	sub    $0xc,%esp
    eae0:	ff 74 24 18          	pushl  0x18(%esp)
    eae4:	e8 49 f6 ff ff       	call   e132 <wait_on_inode>
    eae9:	83 c4 10             	add    $0x10,%esp
		if (inode->i_dev != dev || inode->i_num != nr) {
    eaec:	8b 44 24 0c          	mov    0xc(%esp),%eax
    eaf0:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    eaf4:	0f b7 c0             	movzwl %ax,%eax
    eaf7:	3b 44 24 20          	cmp    0x20(%esp),%eax
    eafb:	75 11                	jne    eb0e <iget+0x8d>
    eafd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    eb01:	0f b7 40 32          	movzwl 0x32(%eax),%eax
    eb05:	0f b7 c0             	movzwl %ax,%eax
    eb08:	3b 44 24 24          	cmp    0x24(%esp),%eax
    eb0c:	74 0d                	je     eb1b <iget+0x9a>
			inode = inode_table;
    eb0e:	c7 44 24 0c c0 01 03 	movl   $0x301c0,0xc(%esp)
    eb15:	00 
			continue;
    eb16:	e9 d9 00 00 00       	jmp    ebf4 <iget+0x173>
		}
		// 到这里表示找到相应的i节点.于是将该i节点引用计数增1.然后再作进一步检查,看它是否是另一个文件系统的安装点.若是则寻找被安装文件系统根节点并返回.如果该i节点
		// 的确是其他文件系统的安装点,则在超级块表中搜寻安装在此i节点的超级块.如果没有找到,则显示出错信息,并放回本函数开始时获取的空闲节点empty,返回该i节点指针.
		inode->i_count++;
    eb1b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    eb1f:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    eb23:	8d 50 01             	lea    0x1(%eax),%edx
    eb26:	8b 44 24 0c          	mov    0xc(%esp),%eax
    eb2a:	66 89 50 34          	mov    %dx,0x34(%eax)
		if (inode->i_mount) {
    eb2e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    eb32:	0f b6 40 39          	movzbl 0x39(%eax),%eax
    eb36:	84 c0                	test   %al,%al
    eb38:	0f 84 9a 00 00 00    	je     ebd8 <iget+0x157>
			int i;

			for (i = 0 ; i < NR_SUPER ; i++)
    eb3e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    eb45:	00 
    eb46:	eb 19                	jmp    eb61 <iget+0xe0>
				if (super_block[i].s_imount == inode)
    eb48:	8b 44 24 08          	mov    0x8(%esp),%eax
    eb4c:	6b c0 6c             	imul   $0x6c,%eax,%eax
    eb4f:	05 7c 0c 04 00       	add    $0x40c7c,%eax
    eb54:	8b 00                	mov    (%eax),%eax
    eb56:	3b 44 24 0c          	cmp    0xc(%esp),%eax
    eb5a:	74 0e                	je     eb6a <iget+0xe9>
		// 的确是其他文件系统的安装点,则在超级块表中搜寻安装在此i节点的超级块.如果没有找到,则显示出错信息,并放回本函数开始时获取的空闲节点empty,返回该i节点指针.
		inode->i_count++;
		if (inode->i_mount) {
			int i;

			for (i = 0 ; i < NR_SUPER ; i++)
    eb5c:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    eb61:	83 7c 24 08 07       	cmpl   $0x7,0x8(%esp)
    eb66:	7e e0                	jle    eb48 <iget+0xc7>
    eb68:	eb 01                	jmp    eb6b <iget+0xea>
				if (super_block[i].s_imount == inode)
					break;
    eb6a:	90                   	nop
			if (i >= NR_SUPER) {
    eb6b:	83 7c 24 08 07       	cmpl   $0x7,0x8(%esp)
    eb70:	7e 2f                	jle    eba1 <iget+0x120>
				printk("Mounted inode hasn't got sb\n");
    eb72:	83 ec 0c             	sub    $0xc,%esp
    eb75:	68 ba 39 02 00       	push   $0x239ba
    eb7a:	e8 c8 a0 ff ff       	call   8c47 <printk>
    eb7f:	83 c4 10             	add    $0x10,%esp
				if (empty)
    eb82:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    eb87:	74 0f                	je     eb98 <iget+0x117>
					iput(empty);
    eb89:	83 ec 0c             	sub    $0xc,%esp
    eb8c:	ff 74 24 10          	pushl  0x10(%esp)
    eb90:	e8 5a fb ff ff       	call   e6ef <iput>
    eb95:	83 c4 10             	add    $0x10,%esp
				return inode;
    eb98:	8b 44 24 0c          	mov    0xc(%esp),%eax
    eb9c:	e9 a7 00 00 00       	jmp    ec48 <iget+0x1c7>
			}
			// 执行到这里表示已经找到安装到inode节点的文件系统超级块.于是将该i节点写盘放回,并从安装在此i节点上的文件系统超级块中取设备号,并令i节点号为ROOT_INO.然后
			// 重新扫描整个i节点表,以获取该被安装文件系统的根i节点信息.
			iput(inode);
    eba1:	83 ec 0c             	sub    $0xc,%esp
    eba4:	ff 74 24 18          	pushl  0x18(%esp)
    eba8:	e8 42 fb ff ff       	call   e6ef <iput>
    ebad:	83 c4 10             	add    $0x10,%esp
			dev = super_block[i].s_dev;
    ebb0:	8b 44 24 08          	mov    0x8(%esp),%eax
    ebb4:	6b c0 6c             	imul   $0x6c,%eax,%eax
    ebb7:	05 74 0c 04 00       	add    $0x40c74,%eax
    ebbc:	0f b7 00             	movzwl (%eax),%eax
    ebbf:	0f b7 c0             	movzwl %ax,%eax
    ebc2:	89 44 24 20          	mov    %eax,0x20(%esp)
			nr = ROOT_INO;
    ebc6:	c7 44 24 24 01 00 00 	movl   $0x1,0x24(%esp)
    ebcd:	00 
			inode = inode_table;
    ebce:	c7 44 24 0c c0 01 03 	movl   $0x301c0,0xc(%esp)
    ebd5:	00 
			continue;
    ebd6:	eb 1c                	jmp    ebf4 <iget+0x173>
		}
		// 最终我们找到了相应的i节点.因此可以放弃本函数开始处临时 的空闲i节点,返回找到的i节点指针.
		if (empty)
    ebd8:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    ebdd:	74 0f                	je     ebee <iget+0x16d>
			iput(empty);
    ebdf:	83 ec 0c             	sub    $0xc,%esp
    ebe2:	ff 74 24 10          	pushl  0x10(%esp)
    ebe6:	e8 04 fb ff ff       	call   e6ef <iput>
    ebeb:	83 c4 10             	add    $0x10,%esp
		return inode;
    ebee:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ebf2:	eb 54                	jmp    ec48 <iget+0x1c7>
	if (!dev)
		panic("iget with dev==0");
	empty = get_empty_inode();
	// 接着扫描i节点表.寻找参数指定节点号nr的i节点.并递增该节点的引用次数.如果当前扫描i节点的设备号不等于指定的设备号或者节点号不等于指定的节点号,则继续扫描.
	inode = inode_table;
	while (inode < NR_INODE + inode_table) {
    ebf4:	b8 c0 10 03 00       	mov    $0x310c0,%eax
    ebf9:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    ebfd:	0f 82 ae fe ff ff    	jb     eab1 <iget+0x30>
		if (empty)
			iput(empty);
		return inode;
    }
	// 如果我们在i节点表中没有找到指定的i节点,则利用前面申请的空闲i节点empty在i节点表中建立该i节点.并从相应设备上读取该i节点信息,返回该i节点指针.
	if (!empty)
    ec03:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    ec08:	75 07                	jne    ec11 <iget+0x190>
		return (NULL);
    ec0a:	b8 00 00 00 00       	mov    $0x0,%eax
    ec0f:	eb 37                	jmp    ec48 <iget+0x1c7>
	inode = empty;
    ec11:	8b 44 24 04          	mov    0x4(%esp),%eax
    ec15:	89 44 24 0c          	mov    %eax,0xc(%esp)
	inode->i_dev = dev;									// 设置i节点的设备.
    ec19:	8b 44 24 20          	mov    0x20(%esp),%eax
    ec1d:	89 c2                	mov    %eax,%edx
    ec1f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ec23:	66 89 50 30          	mov    %dx,0x30(%eax)
	inode->i_num = nr;									// 设置i节点号.
    ec27:	8b 44 24 24          	mov    0x24(%esp),%eax
    ec2b:	89 c2                	mov    %eax,%edx
    ec2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ec31:	66 89 50 32          	mov    %dx,0x32(%eax)
	read_inode(inode);      							// 读取i节点信息
    ec35:	83 ec 0c             	sub    $0xc,%esp
    ec38:	ff 74 24 18          	pushl  0x18(%esp)
    ec3c:	e8 0b 00 00 00       	call   ec4c <read_inode>
    ec41:	83 c4 10             	add    $0x10,%esp
	return inode;
    ec44:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    ec48:	83 c4 1c             	add    $0x1c,%esp
    ec4b:	c3                   	ret    

0000ec4c <read_inode>:
// 读取指定i节点信息.
// 从设备上读取含有指定i节点信息的i节点盘块,然后复制到指定的i节点结构中.为了确定i节点所在设备逻辑块号(或缓冲块),必须首先读取相应设备上的超级块,以
// 获取用于计算逻辑块号的每块i节点数信息INODES_PER_BLOCK.在计算出i节点所在的逻辑块号后,就把该逻辑块读入一缓冲块中.然后把缓冲块中相应位置处的i节点
// 内容复制到指定的位置处.
static void read_inode(struct m_inode * inode)
{
    ec4c:	83 ec 1c             	sub    $0x1c,%esp
	struct super_block * sb;
	struct buffer_head * bh;
	int block;

	// 首先锁定该i节点,并取该节点所在设备的超级块.
	lock_inode(inode);
    ec4f:	83 ec 0c             	sub    $0xc,%esp
    ec52:	ff 74 24 2c          	pushl  0x2c(%esp)
    ec56:	e8 02 f5 ff ff       	call   e15d <lock_inode>
    ec5b:	83 c4 10             	add    $0x10,%esp
	if (!(sb = get_super(inode->i_dev)))
    ec5e:	8b 44 24 20          	mov    0x20(%esp),%eax
    ec62:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    ec66:	0f b7 c0             	movzwl %ax,%eax
    ec69:	83 ec 0c             	sub    $0xc,%esp
    ec6c:	50                   	push   %eax
    ec6d:	e8 e5 0e 00 00       	call   fb57 <get_super>
    ec72:	83 c4 10             	add    $0x10,%esp
    ec75:	89 44 24 0c          	mov    %eax,0xc(%esp)
    ec79:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    ec7e:	75 10                	jne    ec90 <read_inode+0x44>
		panic("trying to read inode without dev");
    ec80:	83 ec 0c             	sub    $0xc,%esp
    ec83:	68 d8 39 02 00       	push   $0x239d8
    ec88:	e8 7b 9f ff ff       	call   8c08 <panic>
    ec8d:	83 c4 10             	add    $0x10,%esp
	// 该i节点所在设备逻辑块号 = (启动块 + 超级块) + i节点位图占用的块数 + 逻辑块位图的块数 + (i节点号-1)/每块含有的i节点数.虽然i节点号从0开始编号,
	// 但第1个0号i节点不用,并且磁盘上也不保存对应的0号i节点结构.因此存放i节点的盘块的第1块上保存的是i节点号是1--16的i节点结构而不是0--15的.因此在上面计算
	// i节点号对应的i节点结构所在盘块时需要减1,即:B = (i节点号-1)/每块含有i节点结构数.例如,节点号16的i节点结构应该在B=(16-1)/16 = 0的块上.这里我们从
	// 设备上读取该i节点所在逻辑块,并复制指定i节点内容到inode指针所指位置处.
	block = 2 + sb->s_imap_blocks + sb->s_zmap_blocks +
    ec90:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ec94:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    ec98:	0f b7 c0             	movzwl %ax,%eax
    ec9b:	8d 50 02             	lea    0x2(%eax),%edx
    ec9e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    eca2:	0f b7 40 06          	movzwl 0x6(%eax),%eax
    eca6:	0f b7 c0             	movzwl %ax,%eax
    eca9:	01 d0                	add    %edx,%eax
    ecab:	89 c2                	mov    %eax,%edx
		(inode->i_num - 1) / INODES_PER_BLOCK;
    ecad:	8b 44 24 20          	mov    0x20(%esp),%eax
    ecb1:	0f b7 40 32          	movzwl 0x32(%eax),%eax
    ecb5:	0f b7 c0             	movzwl %ax,%eax
    ecb8:	83 e8 01             	sub    $0x1,%eax
    ecbb:	c1 e8 05             	shr    $0x5,%eax
		panic("trying to read inode without dev");
	// 该i节点所在设备逻辑块号 = (启动块 + 超级块) + i节点位图占用的块数 + 逻辑块位图的块数 + (i节点号-1)/每块含有的i节点数.虽然i节点号从0开始编号,
	// 但第1个0号i节点不用,并且磁盘上也不保存对应的0号i节点结构.因此存放i节点的盘块的第1块上保存的是i节点号是1--16的i节点结构而不是0--15的.因此在上面计算
	// i节点号对应的i节点结构所在盘块时需要减1,即:B = (i节点号-1)/每块含有i节点结构数.例如,节点号16的i节点结构应该在B=(16-1)/16 = 0的块上.这里我们从
	// 设备上读取该i节点所在逻辑块,并复制指定i节点内容到inode指针所指位置处.
	block = 2 + sb->s_imap_blocks + sb->s_zmap_blocks +
    ecbe:	01 d0                	add    %edx,%eax
    ecc0:	89 44 24 08          	mov    %eax,0x8(%esp)
		(inode->i_num - 1) / INODES_PER_BLOCK;
	// 将i节点信息的那个逻辑块读取到高速缓存中
	if (!(bh = bread(inode->i_dev, block)))
    ecc4:	8b 44 24 20          	mov    0x20(%esp),%eax
    ecc8:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    eccc:	0f b7 c0             	movzwl %ax,%eax
    eccf:	83 ec 08             	sub    $0x8,%esp
    ecd2:	ff 74 24 10          	pushl  0x10(%esp)
    ecd6:	50                   	push   %eax
    ecd7:	e8 0a 0a 00 00       	call   f6e6 <bread>
    ecdc:	83 c4 10             	add    $0x10,%esp
    ecdf:	89 44 24 04          	mov    %eax,0x4(%esp)
    ece3:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    ece8:	75 10                	jne    ecfa <read_inode+0xae>
		panic("unable to read i-node block");
    ecea:	83 ec 0c             	sub    $0xc,%esp
    eced:	68 f9 39 02 00       	push   $0x239f9
    ecf2:	e8 11 9f ff ff       	call   8c08 <panic>
    ecf7:	83 c4 10             	add    $0x10,%esp
	*(struct d_inode *)inode =
		((struct d_inode *)bh->b_data)
    ecfa:	8b 44 24 04          	mov    0x4(%esp),%eax
    ecfe:	8b 10                	mov    (%eax),%edx
			[(inode->i_num - 1) % INODES_PER_BLOCK];
    ed00:	8b 44 24 20          	mov    0x20(%esp),%eax
    ed04:	0f b7 40 32          	movzwl 0x32(%eax),%eax
    ed08:	0f b7 c0             	movzwl %ax,%eax
    ed0b:	83 e8 01             	sub    $0x1,%eax
    ed0e:	83 e0 1f             	and    $0x1f,%eax
    ed11:	c1 e0 05             	shl    $0x5,%eax
    ed14:	01 c2                	add    %eax,%edx
	block = 2 + sb->s_imap_blocks + sb->s_zmap_blocks +
		(inode->i_num - 1) / INODES_PER_BLOCK;
	// 将i节点信息的那个逻辑块读取到高速缓存中
	if (!(bh = bread(inode->i_dev, block)))
		panic("unable to read i-node block");
	*(struct d_inode *)inode =
    ed16:	8b 44 24 20          	mov    0x20(%esp),%eax
    ed1a:	8b 0a                	mov    (%edx),%ecx
    ed1c:	89 08                	mov    %ecx,(%eax)
    ed1e:	8b 4a 04             	mov    0x4(%edx),%ecx
    ed21:	89 48 04             	mov    %ecx,0x4(%eax)
    ed24:	8b 4a 08             	mov    0x8(%edx),%ecx
    ed27:	89 48 08             	mov    %ecx,0x8(%eax)
    ed2a:	8b 4a 0c             	mov    0xc(%edx),%ecx
    ed2d:	89 48 0c             	mov    %ecx,0xc(%eax)
    ed30:	8b 4a 10             	mov    0x10(%edx),%ecx
    ed33:	89 48 10             	mov    %ecx,0x10(%eax)
    ed36:	8b 4a 14             	mov    0x14(%edx),%ecx
    ed39:	89 48 14             	mov    %ecx,0x14(%eax)
    ed3c:	8b 4a 18             	mov    0x18(%edx),%ecx
    ed3f:	89 48 18             	mov    %ecx,0x18(%eax)
    ed42:	8b 52 1c             	mov    0x1c(%edx),%edx
    ed45:	89 50 1c             	mov    %edx,0x1c(%eax)
		((struct d_inode *)bh->b_data)
			[(inode->i_num - 1) % INODES_PER_BLOCK];
	// 最后释放读入的缓冲块,并解锁该i节点.对于块设备文件,还需要设置i节点的文件最大长度值.
	brelse(bh);
    ed48:	83 ec 0c             	sub    $0xc,%esp
    ed4b:	ff 74 24 10          	pushl  0x10(%esp)
    ed4f:	e8 3c 09 00 00       	call   f690 <brelse>
    ed54:	83 c4 10             	add    $0x10,%esp
	if (S_ISBLK(inode->i_mode)) {
    ed57:	8b 44 24 20          	mov    0x20(%esp),%eax
    ed5b:	0f b7 00             	movzwl (%eax),%eax
    ed5e:	0f b7 c0             	movzwl %ax,%eax
    ed61:	25 00 f0 00 00       	and    $0xf000,%eax
    ed66:	3d 00 60 00 00       	cmp    $0x6000,%eax
    ed6b:	75 52                	jne    edbf <read_inode+0x173>
		int i = inode->i_zone[0];							// 对于块设备文件,i_zone[0]中是设备号.
    ed6d:	8b 44 24 20          	mov    0x20(%esp),%eax
    ed71:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    ed75:	0f b7 c0             	movzwl %ax,%eax
    ed78:	89 04 24             	mov    %eax,(%esp)
		if (blk_size[MAJOR(i)])
    ed7b:	8b 04 24             	mov    (%esp),%eax
    ed7e:	c1 e8 08             	shr    $0x8,%eax
    ed81:	8b 04 85 38 11 03 00 	mov    0x31138(,%eax,4),%eax
    ed88:	85 c0                	test   %eax,%eax
    ed8a:	74 28                	je     edb4 <read_inode+0x168>
			inode->i_size = 1024 * blk_size[MAJOR(i)][MINOR(i)];
    ed8c:	8b 04 24             	mov    (%esp),%eax
    ed8f:	c1 e8 08             	shr    $0x8,%eax
    ed92:	8b 04 85 38 11 03 00 	mov    0x31138(,%eax,4),%eax
    ed99:	8b 14 24             	mov    (%esp),%edx
    ed9c:	0f b6 d2             	movzbl %dl,%edx
    ed9f:	c1 e2 02             	shl    $0x2,%edx
    eda2:	01 d0                	add    %edx,%eax
    eda4:	8b 00                	mov    (%eax),%eax
    eda6:	c1 e0 0a             	shl    $0xa,%eax
    eda9:	89 c2                	mov    %eax,%edx
    edab:	8b 44 24 20          	mov    0x20(%esp),%eax
    edaf:	89 50 04             	mov    %edx,0x4(%eax)
    edb2:	eb 0b                	jmp    edbf <read_inode+0x173>
		else
			inode->i_size = 0x7fffffff;
    edb4:	8b 44 24 20          	mov    0x20(%esp),%eax
    edb8:	c7 40 04 ff ff ff 7f 	movl   $0x7fffffff,0x4(%eax)
	}
	unlock_inode(inode);
    edbf:	83 ec 0c             	sub    $0xc,%esp
    edc2:	ff 74 24 2c          	pushl  0x2c(%esp)
    edc6:	e8 c5 f3 ff ff       	call   e190 <unlock_inode>
    edcb:	83 c4 10             	add    $0x10,%esp
}
    edce:	90                   	nop
    edcf:	83 c4 1c             	add    $0x1c,%esp
    edd2:	c3                   	ret    

0000edd3 <write_inode>:
// 将i节点信息写入缓冲区中.
// 该函数把参数指定的i节点写入缓冲区相应的缓冲块中,待缓冲区刷新时会写入盘中.为了确定i节点所在的设备逻辑块号(或缓冲块),必须首先读取相应设备上的超级块,
// 以获取用于计算逻辑块号的每块i节点数信息INODES_PER_BLOCK.在计算出i节点所在的逻辑块号后,就把该逻辑块读入一缓冲块中.然后把i节点内容复制到缓冲块的
// 相应位置处.
static void write_inode(struct m_inode * inode)
{
    edd3:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;
	int block;

	// 首先锁定该i节点,如果该i节点没有被修改过或者该i节点的设备号等于零,则解锁该i节点,并退出.对于没有被修改过的i节点,其内容与缓冲区中或设备中的相同.然后获取
	// 该i节点的超级块.
	lock_inode(inode);
    edd6:	83 ec 0c             	sub    $0xc,%esp
    edd9:	ff 74 24 2c          	pushl  0x2c(%esp)
    eddd:	e8 7b f3 ff ff       	call   e15d <lock_inode>
    ede2:	83 c4 10             	add    $0x10,%esp
	if (!inode->i_dirt || !inode->i_dev) {
    ede5:	8b 44 24 20          	mov    0x20(%esp),%eax
    ede9:	0f b6 40 37          	movzbl 0x37(%eax),%eax
    eded:	84 c0                	test   %al,%al
    edef:	74 0d                	je     edfe <write_inode+0x2b>
    edf1:	8b 44 24 20          	mov    0x20(%esp),%eax
    edf5:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    edf9:	66 85 c0             	test   %ax,%ax
    edfc:	75 14                	jne    ee12 <write_inode+0x3f>
		unlock_inode(inode);
    edfe:	83 ec 0c             	sub    $0xc,%esp
    ee01:	ff 74 24 2c          	pushl  0x2c(%esp)
    ee05:	e8 86 f3 ff ff       	call   e190 <unlock_inode>
    ee0a:	83 c4 10             	add    $0x10,%esp
		return;
    ee0d:	e9 18 01 00 00       	jmp    ef2a <write_inode+0x157>
	}
	if (!(sb = get_super(inode->i_dev)))
    ee12:	8b 44 24 20          	mov    0x20(%esp),%eax
    ee16:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    ee1a:	0f b7 c0             	movzwl %ax,%eax
    ee1d:	83 ec 0c             	sub    $0xc,%esp
    ee20:	50                   	push   %eax
    ee21:	e8 31 0d 00 00       	call   fb57 <get_super>
    ee26:	83 c4 10             	add    $0x10,%esp
    ee29:	89 44 24 0c          	mov    %eax,0xc(%esp)
    ee2d:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    ee32:	75 10                	jne    ee44 <write_inode+0x71>
		panic("trying to write inode without device");
    ee34:	83 ec 0c             	sub    $0xc,%esp
    ee37:	68 18 3a 02 00       	push   $0x23a18
    ee3c:	e8 c7 9d ff ff       	call   8c08 <panic>
    ee41:	83 c4 10             	add    $0x10,%esp
	// 该i节点所在的设备逻辑号 = (启动块 + 超级块) + i节点位图占用的块数 + 逻辑块位图占用的块数 + (i节点号-1)/每块含有的i节点数.我们从设备上读取该i节点所
	// 在的逻辑块,并将该i节点信息复制到逻辑块对应该i节点的项位置处.
	block = 2 + sb->s_imap_blocks + sb->s_zmap_blocks +
    ee44:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ee48:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    ee4c:	0f b7 c0             	movzwl %ax,%eax
    ee4f:	8d 50 02             	lea    0x2(%eax),%edx
    ee52:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ee56:	0f b7 40 06          	movzwl 0x6(%eax),%eax
    ee5a:	0f b7 c0             	movzwl %ax,%eax
    ee5d:	01 d0                	add    %edx,%eax
    ee5f:	89 c2                	mov    %eax,%edx
		(inode->i_num - 1) / INODES_PER_BLOCK;
    ee61:	8b 44 24 20          	mov    0x20(%esp),%eax
    ee65:	0f b7 40 32          	movzwl 0x32(%eax),%eax
    ee69:	0f b7 c0             	movzwl %ax,%eax
    ee6c:	83 e8 01             	sub    $0x1,%eax
    ee6f:	c1 e8 05             	shr    $0x5,%eax
	}
	if (!(sb = get_super(inode->i_dev)))
		panic("trying to write inode without device");
	// 该i节点所在的设备逻辑号 = (启动块 + 超级块) + i节点位图占用的块数 + 逻辑块位图占用的块数 + (i节点号-1)/每块含有的i节点数.我们从设备上读取该i节点所
	// 在的逻辑块,并将该i节点信息复制到逻辑块对应该i节点的项位置处.
	block = 2 + sb->s_imap_blocks + sb->s_zmap_blocks +
    ee72:	01 d0                	add    %edx,%eax
    ee74:	89 44 24 08          	mov    %eax,0x8(%esp)
		(inode->i_num - 1) / INODES_PER_BLOCK;
	if (!(bh = bread(inode->i_dev, block)))
    ee78:	8b 44 24 20          	mov    0x20(%esp),%eax
    ee7c:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    ee80:	0f b7 c0             	movzwl %ax,%eax
    ee83:	83 ec 08             	sub    $0x8,%esp
    ee86:	ff 74 24 10          	pushl  0x10(%esp)
    ee8a:	50                   	push   %eax
    ee8b:	e8 56 08 00 00       	call   f6e6 <bread>
    ee90:	83 c4 10             	add    $0x10,%esp
    ee93:	89 44 24 04          	mov    %eax,0x4(%esp)
    ee97:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    ee9c:	75 10                	jne    eeae <write_inode+0xdb>
		panic("unable to read i-node block");
    ee9e:	83 ec 0c             	sub    $0xc,%esp
    eea1:	68 f9 39 02 00       	push   $0x239f9
    eea6:	e8 5d 9d ff ff       	call   8c08 <panic>
    eeab:	83 c4 10             	add    $0x10,%esp
	((struct d_inode *)bh->b_data)
    eeae:	8b 44 24 04          	mov    0x4(%esp),%eax
    eeb2:	8b 10                	mov    (%eax),%edx
		[(inode->i_num - 1) % INODES_PER_BLOCK] =
    eeb4:	8b 44 24 20          	mov    0x20(%esp),%eax
    eeb8:	0f b7 40 32          	movzwl 0x32(%eax),%eax
    eebc:	0f b7 c0             	movzwl %ax,%eax
    eebf:	83 e8 01             	sub    $0x1,%eax
    eec2:	83 e0 1f             	and    $0x1f,%eax
    eec5:	c1 e0 05             	shl    $0x5,%eax
    eec8:	01 c2                	add    %eax,%edx
    eeca:	8b 44 24 20          	mov    0x20(%esp),%eax
    eece:	8b 08                	mov    (%eax),%ecx
    eed0:	89 0a                	mov    %ecx,(%edx)
    eed2:	8b 48 04             	mov    0x4(%eax),%ecx
    eed5:	89 4a 04             	mov    %ecx,0x4(%edx)
    eed8:	8b 48 08             	mov    0x8(%eax),%ecx
    eedb:	89 4a 08             	mov    %ecx,0x8(%edx)
    eede:	8b 48 0c             	mov    0xc(%eax),%ecx
    eee1:	89 4a 0c             	mov    %ecx,0xc(%edx)
    eee4:	8b 48 10             	mov    0x10(%eax),%ecx
    eee7:	89 4a 10             	mov    %ecx,0x10(%edx)
    eeea:	8b 48 14             	mov    0x14(%eax),%ecx
    eeed:	89 4a 14             	mov    %ecx,0x14(%edx)
    eef0:	8b 48 18             	mov    0x18(%eax),%ecx
    eef3:	89 4a 18             	mov    %ecx,0x18(%edx)
    eef6:	8b 40 1c             	mov    0x1c(%eax),%eax
    eef9:	89 42 1c             	mov    %eax,0x1c(%edx)
			*(struct d_inode *)inode;
	// 然后置缓冲区已修改标志,而i节点内容已经与缓冲区中的一致,因此修改标志置零.然后释放该含有i节点的缓冲区,并解锁该i节点.
	bh->b_dirt = 1;
    eefc:	8b 44 24 04          	mov    0x4(%esp),%eax
    ef00:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	inode->i_dirt = 0;
    ef04:	8b 44 24 20          	mov    0x20(%esp),%eax
    ef08:	c6 40 37 00          	movb   $0x0,0x37(%eax)
	brelse(bh);
    ef0c:	83 ec 0c             	sub    $0xc,%esp
    ef0f:	ff 74 24 10          	pushl  0x10(%esp)
    ef13:	e8 78 07 00 00       	call   f690 <brelse>
    ef18:	83 c4 10             	add    $0x10,%esp
	unlock_inode(inode);
    ef1b:	83 ec 0c             	sub    $0xc,%esp
    ef1e:	ff 74 24 2c          	pushl  0x2c(%esp)
    ef22:	e8 69 f2 ff ff       	call   e190 <unlock_inode>
    ef27:	83 c4 10             	add    $0x10,%esp
}
    ef2a:	83 c4 1c             	add    $0x1c,%esp
    ef2d:	c3                   	ret    

0000ef2e <wait_on_buffer>:
// 等待指定缓冲块解锁.
// 如果指定的缓冲块bh已经上锁就让进程不可中断地睡眠在该缓冲块的等待队列b_wait中.在缓冲块解锁时,其等待队列上的所有进程将被唤醒.虽然是在关闭
// 中断(cli)之后去睡眠的,但这样做并不会影响在其他进程上下文中响应中断.因为每个进程都在自己的TSS段中保存了标志寄存器EFLAGS的值,所在在进程
// 切换时CPU中当前EFLAGS的值也随之改变.使用sleep_on()进入睡眠状态的进程需要用wake_up()明确地唤醒.
static inline void wait_on_buffer(struct buffer_head * bh)
{
    ef2e:	83 ec 0c             	sub    $0xc,%esp
	cli();							// 关中断
    ef31:	fa                   	cli    
	while (bh->b_lock)				// 如果已被上锁则进程进入睡眠,等待其解锁.
    ef32:	eb 13                	jmp    ef47 <wait_on_buffer+0x19>
		sleep_on(&bh->b_wait);
    ef34:	8b 44 24 10          	mov    0x10(%esp),%eax
    ef38:	83 c0 10             	add    $0x10,%eax
    ef3b:	83 ec 0c             	sub    $0xc,%esp
    ef3e:	50                   	push   %eax
    ef3f:	e8 f2 81 ff ff       	call   7136 <sleep_on>
    ef44:	83 c4 10             	add    $0x10,%esp
// 中断(cli)之后去睡眠的,但这样做并不会影响在其他进程上下文中响应中断.因为每个进程都在自己的TSS段中保存了标志寄存器EFLAGS的值,所在在进程
// 切换时CPU中当前EFLAGS的值也随之改变.使用sleep_on()进入睡眠状态的进程需要用wake_up()明确地唤醒.
static inline void wait_on_buffer(struct buffer_head * bh)
{
	cli();							// 关中断
	while (bh->b_lock)				// 如果已被上锁则进程进入睡眠,等待其解锁.
    ef47:	8b 44 24 10          	mov    0x10(%esp),%eax
    ef4b:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
    ef4f:	84 c0                	test   %al,%al
    ef51:	75 e1                	jne    ef34 <wait_on_buffer+0x6>
		sleep_on(&bh->b_wait);
	sti();							// 开中断.
    ef53:	fb                   	sti    
}
    ef54:	90                   	nop
    ef55:	83 c4 0c             	add    $0xc,%esp
    ef58:	c3                   	ret    

0000ef59 <sys_sync>:

// 设备数据同步。
// 同步设备和内存高速缓冲中数据。其中，sync_inodes()定义在inode.c。
int sys_sync(void)
{
    ef59:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	struct buffer_head * bh;

	// 首先调用i节点同步函数，把内在i节点表中所有修改过的i节点写入高速缓冲中。然后扫描所有高速缓冲区，对已被修改的缓冲块
	// 产生写盘请求，将缓冲中数据写入盘中，做到高速缓冲中的数据与设备中的同步。
	sync_inodes();							/* write out inodes into buffers */
    ef5c:	e8 cc f2 ff ff       	call   e22d <sync_inodes>
	bh = start_buffer;      				// bh指向缓冲开始处。
    ef61:	a1 64 e3 02 00       	mov    0x2e364,%eax
    ef66:	89 44 24 08          	mov    %eax,0x8(%esp)
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    ef6a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    ef71:	00 
    ef72:	eb 36                	jmp    efaa <sys_sync+0x51>
		wait_on_buffer(bh);             	// 等待缓冲区解锁（如果已上锁的话）。
    ef74:	83 ec 0c             	sub    $0xc,%esp
    ef77:	ff 74 24 14          	pushl  0x14(%esp)
    ef7b:	e8 ae ff ff ff       	call   ef2e <wait_on_buffer>
    ef80:	83 c4 10             	add    $0x10,%esp
		if (bh->b_dirt)
    ef83:	8b 44 24 08          	mov    0x8(%esp),%eax
    ef87:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
    ef8b:	84 c0                	test   %al,%al
    ef8d:	74 11                	je     efa0 <sys_sync+0x47>
			ll_rw_block(WRITE, bh);  		// 产生写设备块请求。
    ef8f:	83 ec 08             	sub    $0x8,%esp
    ef92:	ff 74 24 10          	pushl  0x10(%esp)
    ef96:	6a 01                	push   $0x1
    ef98:	e8 51 7a 00 00       	call   169ee <ll_rw_block>
    ef9d:	83 c4 10             	add    $0x10,%esp

	// 首先调用i节点同步函数，把内在i节点表中所有修改过的i节点写入高速缓冲中。然后扫描所有高速缓冲区，对已被修改的缓冲块
	// 产生写盘请求，将缓冲中数据写入盘中，做到高速缓冲中的数据与设备中的同步。
	sync_inodes();							/* write out inodes into buffers */
	bh = start_buffer;      				// bh指向缓冲开始处。
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    efa0:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    efa5:	83 44 24 08 24       	addl   $0x24,0x8(%esp)
    efaa:	a1 c0 10 03 00       	mov    0x310c0,%eax
    efaf:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    efb3:	7c bf                	jl     ef74 <sys_sync+0x1b>
		wait_on_buffer(bh);             	// 等待缓冲区解锁（如果已上锁的话）。
		if (bh->b_dirt)
			ll_rw_block(WRITE, bh);  		// 产生写设备块请求。
	}
	return 0;
    efb5:	b8 00 00 00 00       	mov    $0x0,%eax
}
    efba:	83 c4 1c             	add    $0x1c,%esp
    efbd:	c3                   	ret    

0000efbe <sync_dev>:

// 对指定设备进行高速缓冲数据与设备上数据的同步操作。
// 该函数首先搜索高速缓冲区中所有缓冲块。对于指定设备dev的缓冲块，若其数据已被修改过就写入盘中（同步操作）。然后
// 把内存中i节点数据写入高速缓冲中。之后再指定设备dev执行一次与上述相同的写盘操作。
int sync_dev(int dev)
{
    efbe:	83 ec 1c             	sub    $0x1c,%esp

	// 首先对参数指定的设备执行数据同步操作，让设备上的数据与高速缓冲区中的数据同步。方法是扫描高速缓冲区中所有缓冲块，
	// 对指定设备dev的缓冲块，先检测其是否已被上锁，若已被锁就睡眠等待其解锁。然后再判断一次该缓冲块是否还是指定设备的
	// 缓冲块并且已修改过（b_dirt标志置位），若是就对其执行写盘操作。因为在我们睡眠期间该缓冲块有可能已被释放或者被挪
	// 作它用，所以在继续执行前需要再次判断一下该缓冲块是否还是指定设备的缓冲块。
	bh = start_buffer;                      		// bf指向缓冲区开始处。
    efc1:	a1 64 e3 02 00       	mov    0x2e364,%eax
    efc6:	89 44 24 08          	mov    %eax,0x8(%esp)
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    efca:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    efd1:	00 
    efd2:	eb 5b                	jmp    f02f <sync_dev+0x71>
		if (bh->b_dev != dev)           			// 不是设备dev的缓冲块则继续。
    efd4:	8b 44 24 08          	mov    0x8(%esp),%eax
    efd8:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    efdc:	0f b7 c0             	movzwl %ax,%eax
    efdf:	3b 44 24 20          	cmp    0x20(%esp),%eax
    efe3:	75 3f                	jne    f024 <sync_dev+0x66>
			continue;
		wait_on_buffer(bh);             			// 等待缓冲区解锁（如果已上锁的话）。
    efe5:	83 ec 0c             	sub    $0xc,%esp
    efe8:	ff 74 24 14          	pushl  0x14(%esp)
    efec:	e8 3d ff ff ff       	call   ef2e <wait_on_buffer>
    eff1:	83 c4 10             	add    $0x10,%esp
		if (bh->b_dev == dev && bh->b_dirt)
    eff4:	8b 44 24 08          	mov    0x8(%esp),%eax
    eff8:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    effc:	0f b7 c0             	movzwl %ax,%eax
    efff:	3b 44 24 20          	cmp    0x20(%esp),%eax
    f003:	75 20                	jne    f025 <sync_dev+0x67>
    f005:	8b 44 24 08          	mov    0x8(%esp),%eax
    f009:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
    f00d:	84 c0                	test   %al,%al
    f00f:	74 14                	je     f025 <sync_dev+0x67>
			ll_rw_block(WRITE, bh);
    f011:	83 ec 08             	sub    $0x8,%esp
    f014:	ff 74 24 10          	pushl  0x10(%esp)
    f018:	6a 01                	push   $0x1
    f01a:	e8 cf 79 00 00       	call   169ee <ll_rw_block>
    f01f:	83 c4 10             	add    $0x10,%esp
    f022:	eb 01                	jmp    f025 <sync_dev+0x67>
	// 缓冲块并且已修改过（b_dirt标志置位），若是就对其执行写盘操作。因为在我们睡眠期间该缓冲块有可能已被释放或者被挪
	// 作它用，所以在继续执行前需要再次判断一下该缓冲块是否还是指定设备的缓冲块。
	bh = start_buffer;                      		// bf指向缓冲区开始处。
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
		if (bh->b_dev != dev)           			// 不是设备dev的缓冲块则继续。
			continue;
    f024:	90                   	nop
	// 首先对参数指定的设备执行数据同步操作，让设备上的数据与高速缓冲区中的数据同步。方法是扫描高速缓冲区中所有缓冲块，
	// 对指定设备dev的缓冲块，先检测其是否已被上锁，若已被锁就睡眠等待其解锁。然后再判断一次该缓冲块是否还是指定设备的
	// 缓冲块并且已修改过（b_dirt标志置位），若是就对其执行写盘操作。因为在我们睡眠期间该缓冲块有可能已被释放或者被挪
	// 作它用，所以在继续执行前需要再次判断一下该缓冲块是否还是指定设备的缓冲块。
	bh = start_buffer;                      		// bf指向缓冲区开始处。
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    f025:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    f02a:	83 44 24 08 24       	addl   $0x24,0x8(%esp)
    f02f:	a1 c0 10 03 00       	mov    0x310c0,%eax
    f034:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    f038:	7c 9a                	jl     efd4 <sync_dev+0x16>
		wait_on_buffer(bh);             			// 等待缓冲区解锁（如果已上锁的话）。
		if (bh->b_dev == dev && bh->b_dirt)
			ll_rw_block(WRITE, bh);
	}
	// 再将i节点数据写入高速缓冲。让i节点表inode_table中的inode与缓冲中的信息同步。
	sync_inodes();
    f03a:	e8 ee f1 ff ff       	call   e22d <sync_inodes>
	// 然后在高速缓冲中的数据更新之后，再把它们与设备中的数据同步。这里采用两遍同步操作是为了提高内核执行效率。第一遍缓
	// 冲区同步操作可以让内核中许多“脏块”变干净，使得i节点的同步操作能够高效执行。本次缓冲区同步操作则把那些由于i节点
	// 同步操作而又变脏的缓冲块与设备中数据同步。
	bh = start_buffer;
    f03f:	a1 64 e3 02 00       	mov    0x2e364,%eax
    f044:	89 44 24 08          	mov    %eax,0x8(%esp)
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    f048:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    f04f:	00 
    f050:	eb 5b                	jmp    f0ad <sync_dev+0xef>
		if (bh->b_dev != dev)
    f052:	8b 44 24 08          	mov    0x8(%esp),%eax
    f056:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f05a:	0f b7 c0             	movzwl %ax,%eax
    f05d:	3b 44 24 20          	cmp    0x20(%esp),%eax
    f061:	75 3f                	jne    f0a2 <sync_dev+0xe4>
			continue;
		wait_on_buffer(bh);
    f063:	83 ec 0c             	sub    $0xc,%esp
    f066:	ff 74 24 14          	pushl  0x14(%esp)
    f06a:	e8 bf fe ff ff       	call   ef2e <wait_on_buffer>
    f06f:	83 c4 10             	add    $0x10,%esp
		if (bh->b_dev == dev && bh->b_dirt)
    f072:	8b 44 24 08          	mov    0x8(%esp),%eax
    f076:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f07a:	0f b7 c0             	movzwl %ax,%eax
    f07d:	3b 44 24 20          	cmp    0x20(%esp),%eax
    f081:	75 20                	jne    f0a3 <sync_dev+0xe5>
    f083:	8b 44 24 08          	mov    0x8(%esp),%eax
    f087:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
    f08b:	84 c0                	test   %al,%al
    f08d:	74 14                	je     f0a3 <sync_dev+0xe5>
			ll_rw_block(WRITE, bh);
    f08f:	83 ec 08             	sub    $0x8,%esp
    f092:	ff 74 24 10          	pushl  0x10(%esp)
    f096:	6a 01                	push   $0x1
    f098:	e8 51 79 00 00       	call   169ee <ll_rw_block>
    f09d:	83 c4 10             	add    $0x10,%esp
    f0a0:	eb 01                	jmp    f0a3 <sync_dev+0xe5>
	// 冲区同步操作可以让内核中许多“脏块”变干净，使得i节点的同步操作能够高效执行。本次缓冲区同步操作则把那些由于i节点
	// 同步操作而又变脏的缓冲块与设备中数据同步。
	bh = start_buffer;
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
		if (bh->b_dev != dev)
			continue;
    f0a2:	90                   	nop
	sync_inodes();
	// 然后在高速缓冲中的数据更新之后，再把它们与设备中的数据同步。这里采用两遍同步操作是为了提高内核执行效率。第一遍缓
	// 冲区同步操作可以让内核中许多“脏块”变干净，使得i节点的同步操作能够高效执行。本次缓冲区同步操作则把那些由于i节点
	// 同步操作而又变脏的缓冲块与设备中数据同步。
	bh = start_buffer;
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    f0a3:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    f0a8:	83 44 24 08 24       	addl   $0x24,0x8(%esp)
    f0ad:	a1 c0 10 03 00       	mov    0x310c0,%eax
    f0b2:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    f0b6:	7c 9a                	jl     f052 <sync_dev+0x94>
			continue;
		wait_on_buffer(bh);
		if (bh->b_dev == dev && bh->b_dirt)
			ll_rw_block(WRITE, bh);
	}
	return 0;
    f0b8:	b8 00 00 00 00       	mov    $0x0,%eax
}
    f0bd:	83 c4 1c             	add    $0x1c,%esp
    f0c0:	c3                   	ret    

0000f0c1 <invalidate_buffers>:

// 使指定设备在高速缓冲区中的数据无效。
// 扫描高速缓冲中所有的缓冲块。对指定设备的缓冲块复位其有效（更新）标志和修改标志。
void invalidate_buffers(int dev)
{
    f0c1:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	struct buffer_head * bh;

	bh = start_buffer;
    f0c4:	a1 64 e3 02 00       	mov    0x2e364,%eax
    f0c9:	89 44 24 08          	mov    %eax,0x8(%esp)
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    f0cd:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    f0d4:	00 
    f0d5:	eb 55                	jmp    f12c <invalidate_buffers+0x6b>
		if (bh->b_dev != dev)           // 如果不是指定设备的缓冲块，则继续扫描下一块。
    f0d7:	8b 44 24 08          	mov    0x8(%esp),%eax
    f0db:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f0df:	0f b7 c0             	movzwl %ax,%eax
    f0e2:	3b 44 24 20          	cmp    0x20(%esp),%eax
    f0e6:	75 39                	jne    f121 <invalidate_buffers+0x60>
			continue;
		wait_on_buffer(bh);             // 等待该缓冲区解锁（如果已被上锁）。
    f0e8:	83 ec 0c             	sub    $0xc,%esp
    f0eb:	ff 74 24 14          	pushl  0x14(%esp)
    f0ef:	e8 3a fe ff ff       	call   ef2e <wait_on_buffer>
    f0f4:	83 c4 10             	add    $0x10,%esp
		// 由于进程执行过睡眠等待，所以需要再判断一下缓冲区是否是指定设备的。
		if (bh->b_dev == dev)
    f0f7:	8b 44 24 08          	mov    0x8(%esp),%eax
    f0fb:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f0ff:	0f b7 c0             	movzwl %ax,%eax
    f102:	3b 44 24 20          	cmp    0x20(%esp),%eax
    f106:	75 1a                	jne    f122 <invalidate_buffers+0x61>
			bh->b_uptodate = bh->b_dirt = 0;
    f108:	8b 44 24 08          	mov    0x8(%esp),%eax
    f10c:	c6 40 0b 00          	movb   $0x0,0xb(%eax)
    f110:	8b 44 24 08          	mov    0x8(%esp),%eax
    f114:	0f b6 50 0b          	movzbl 0xb(%eax),%edx
    f118:	8b 44 24 08          	mov    0x8(%esp),%eax
    f11c:	88 50 0a             	mov    %dl,0xa(%eax)
    f11f:	eb 01                	jmp    f122 <invalidate_buffers+0x61>
	struct buffer_head * bh;

	bh = start_buffer;
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
		if (bh->b_dev != dev)           // 如果不是指定设备的缓冲块，则继续扫描下一块。
			continue;
    f121:	90                   	nop
{
	int i;
	struct buffer_head * bh;

	bh = start_buffer;
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    f122:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    f127:	83 44 24 08 24       	addl   $0x24,0x8(%esp)
    f12c:	a1 c0 10 03 00       	mov    0x310c0,%eax
    f131:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    f135:	7c a0                	jl     f0d7 <invalidate_buffers+0x16>
		wait_on_buffer(bh);             // 等待该缓冲区解锁（如果已被上锁）。
		// 由于进程执行过睡眠等待，所以需要再判断一下缓冲区是否是指定设备的。
		if (bh->b_dev == dev)
			bh->b_uptodate = bh->b_dirt = 0;
	}
}
    f137:	90                   	nop
    f138:	83 c4 1c             	add    $0x1c,%esp
    f13b:	c3                   	ret    

0000f13c <check_disk_change>:
 * 注意！尽管目前该子程序仅用于软盘，以后任何可移动介质的块设备都有将使用该程序，mount/open操作不需要知道
 * 是软盘还是其他什么特殊介质。
 */
// 检查磁盘是否更换，如果已更换就使用对应调整缓冲区无效。
void check_disk_change(int dev)
{
    f13c:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	// 首先检测一下是不是软盘设备。因为现在仅支持软盘可移动介质。如果不是则退出。然后测试软盘是否已更换，如果没有
	// 则退出。floppy_chang()在blk_drv/floppy.c。
	if (MAJOR(dev) != 2)
    f13f:	8b 44 24 20          	mov    0x20(%esp),%eax
    f143:	c1 e8 08             	shr    $0x8,%eax
    f146:	83 f8 02             	cmp    $0x2,%eax
    f149:	0f 85 83 00 00 00    	jne    f1d2 <check_disk_change+0x96>
		return;
	if (!floppy_change(dev & 0x03))
    f14f:	8b 44 24 20          	mov    0x20(%esp),%eax
    f153:	83 e0 03             	and    $0x3,%eax
    f156:	83 ec 0c             	sub    $0xc,%esp
    f159:	50                   	push   %eax
    f15a:	e8 7e 7a 00 00       	call   16bdd <floppy_change>
    f15f:	83 c4 10             	add    $0x10,%esp
    f162:	85 c0                	test   %eax,%eax
    f164:	74 6f                	je     f1d5 <check_disk_change+0x99>
		return;
	// 软盘已更换，所以释放对应设备的i节点位图和逻辑位图所占的高速缓冲区；并使该设备的i节点和数据块信息所占据的高速缓冲
	// 块无效。
	for (i = 0 ; i < NR_SUPER ; i++)
    f166:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    f16d:	00 
    f16e:	eb 3b                	jmp    f1ab <check_disk_change+0x6f>
		if (super_block[i].s_dev == dev)
    f170:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f174:	6b c0 6c             	imul   $0x6c,%eax,%eax
    f177:	05 74 0c 04 00       	add    $0x40c74,%eax
    f17c:	0f b7 00             	movzwl (%eax),%eax
    f17f:	0f b7 c0             	movzwl %ax,%eax
    f182:	3b 44 24 20          	cmp    0x20(%esp),%eax
    f186:	75 1e                	jne    f1a6 <check_disk_change+0x6a>
			put_super(super_block[i].s_dev);
    f188:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f18c:	6b c0 6c             	imul   $0x6c,%eax,%eax
    f18f:	05 74 0c 04 00       	add    $0x40c74,%eax
    f194:	0f b7 00             	movzwl (%eax),%eax
    f197:	0f b7 c0             	movzwl %ax,%eax
    f19a:	83 ec 0c             	sub    $0xc,%esp
    f19d:	50                   	push   %eax
    f19e:	e8 29 0a 00 00       	call   fbcc <put_super>
    f1a3:	83 c4 10             	add    $0x10,%esp
		return;
	if (!floppy_change(dev & 0x03))
		return;
	// 软盘已更换，所以释放对应设备的i节点位图和逻辑位图所占的高速缓冲区；并使该设备的i节点和数据块信息所占据的高速缓冲
	// 块无效。
	for (i = 0 ; i < NR_SUPER ; i++)
    f1a6:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    f1ab:	83 7c 24 0c 07       	cmpl   $0x7,0xc(%esp)
    f1b0:	7e be                	jle    f170 <check_disk_change+0x34>
		if (super_block[i].s_dev == dev)
			put_super(super_block[i].s_dev);
	invalidate_inodes(dev);         // 释放设备dev在内存i节点表中的所有i节点
    f1b2:	83 ec 0c             	sub    $0xc,%esp
    f1b5:	ff 74 24 2c          	pushl  0x2c(%esp)
    f1b9:	e8 f5 ef ff ff       	call   e1b3 <invalidate_inodes>
    f1be:	83 c4 10             	add    $0x10,%esp
	invalidate_buffers(dev);        //
    f1c1:	83 ec 0c             	sub    $0xc,%esp
    f1c4:	ff 74 24 2c          	pushl  0x2c(%esp)
    f1c8:	e8 f4 fe ff ff       	call   f0c1 <invalidate_buffers>
    f1cd:	83 c4 10             	add    $0x10,%esp
    f1d0:	eb 04                	jmp    f1d6 <check_disk_change+0x9a>
	int i;

	// 首先检测一下是不是软盘设备。因为现在仅支持软盘可移动介质。如果不是则退出。然后测试软盘是否已更换，如果没有
	// 则退出。floppy_chang()在blk_drv/floppy.c。
	if (MAJOR(dev) != 2)
		return;
    f1d2:	90                   	nop
    f1d3:	eb 01                	jmp    f1d6 <check_disk_change+0x9a>
	if (!floppy_change(dev & 0x03))
		return;
    f1d5:	90                   	nop
	for (i = 0 ; i < NR_SUPER ; i++)
		if (super_block[i].s_dev == dev)
			put_super(super_block[i].s_dev);
	invalidate_inodes(dev);         // 释放设备dev在内存i节点表中的所有i节点
	invalidate_buffers(dev);        //
}
    f1d6:	83 c4 1c             	add    $0x1c,%esp
    f1d9:	c3                   	ret    

0000f1da <remove_from_queues>:
#define hash(dev, block) hash_table[_hashfn(dev, block)]

// 从hash队列和空闲缓冲队列中移走缓冲块.
// hash队列是双向链表结构,空闲缓冲块队列是双向循环链表结构.
static inline void remove_from_queues(struct buffer_head * bh)
{
    f1da:	83 ec 0c             	sub    $0xc,%esp
	/* remove from hash-queue */
	/* 从hash队列中移除缓冲块 */
	if (bh->b_next)
    f1dd:	8b 44 24 10          	mov    0x10(%esp),%eax
    f1e1:	8b 40 18             	mov    0x18(%eax),%eax
    f1e4:	85 c0                	test   %eax,%eax
    f1e6:	74 11                	je     f1f9 <remove_from_queues+0x1f>
		bh->b_next->b_prev = bh->b_prev;
    f1e8:	8b 44 24 10          	mov    0x10(%esp),%eax
    f1ec:	8b 40 18             	mov    0x18(%eax),%eax
    f1ef:	8b 54 24 10          	mov    0x10(%esp),%edx
    f1f3:	8b 52 14             	mov    0x14(%edx),%edx
    f1f6:	89 50 14             	mov    %edx,0x14(%eax)
	if (bh->b_prev)
    f1f9:	8b 44 24 10          	mov    0x10(%esp),%eax
    f1fd:	8b 40 14             	mov    0x14(%eax),%eax
    f200:	85 c0                	test   %eax,%eax
    f202:	74 11                	je     f215 <remove_from_queues+0x3b>
		bh->b_prev->b_next = bh->b_next;
    f204:	8b 44 24 10          	mov    0x10(%esp),%eax
    f208:	8b 40 14             	mov    0x14(%eax),%eax
    f20b:	8b 54 24 10          	mov    0x10(%esp),%edx
    f20f:	8b 52 18             	mov    0x18(%edx),%edx
    f212:	89 50 18             	mov    %edx,0x18(%eax)
	// 如果该缓冲我是该队列的头一个块,则让hash表的对应项指向本队列中的下一个缓冲区.
	if (hash(bh->b_dev, bh->b_blocknr) == bh)
    f215:	8b 44 24 10          	mov    0x10(%esp),%eax
    f219:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f21d:	0f b7 d0             	movzwl %ax,%edx
    f220:	8b 44 24 10          	mov    0x10(%esp),%eax
    f224:	8b 40 04             	mov    0x4(%eax),%eax
    f227:	89 d1                	mov    %edx,%ecx
    f229:	31 c1                	xor    %eax,%ecx
    f22b:	ba 7d e9 78 d5       	mov    $0xd578e97d,%edx
    f230:	89 c8                	mov    %ecx,%eax
    f232:	f7 e2                	mul    %edx
    f234:	89 d0                	mov    %edx,%eax
    f236:	c1 e8 08             	shr    $0x8,%eax
    f239:	69 c0 33 01 00 00    	imul   $0x133,%eax,%eax
    f23f:	29 c1                	sub    %eax,%ecx
    f241:	89 c8                	mov    %ecx,%eax
    f243:	8b 04 85 40 07 04 00 	mov    0x40740(,%eax,4),%eax
    f24a:	3b 44 24 10          	cmp    0x10(%esp),%eax
    f24e:	75 3c                	jne    f28c <remove_from_queues+0xb2>
		hash(bh->b_dev, bh->b_blocknr) = bh->b_next;
    f250:	8b 44 24 10          	mov    0x10(%esp),%eax
    f254:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f258:	0f b7 d0             	movzwl %ax,%edx
    f25b:	8b 44 24 10          	mov    0x10(%esp),%eax
    f25f:	8b 40 04             	mov    0x4(%eax),%eax
    f262:	89 d1                	mov    %edx,%ecx
    f264:	31 c1                	xor    %eax,%ecx
    f266:	ba 7d e9 78 d5       	mov    $0xd578e97d,%edx
    f26b:	89 c8                	mov    %ecx,%eax
    f26d:	f7 e2                	mul    %edx
    f26f:	89 d0                	mov    %edx,%eax
    f271:	c1 e8 08             	shr    $0x8,%eax
    f274:	69 c0 33 01 00 00    	imul   $0x133,%eax,%eax
    f27a:	29 c1                	sub    %eax,%ecx
    f27c:	89 c8                	mov    %ecx,%eax
    f27e:	8b 54 24 10          	mov    0x10(%esp),%edx
    f282:	8b 52 18             	mov    0x18(%edx),%edx
    f285:	89 14 85 40 07 04 00 	mov    %edx,0x40740(,%eax,4)
	/* remove from free list */
	/* 从空闲缓冲块表中移除缓冲块 */
	if (!(bh->b_prev_free) || !(bh->b_next_free))
    f28c:	8b 44 24 10          	mov    0x10(%esp),%eax
    f290:	8b 40 1c             	mov    0x1c(%eax),%eax
    f293:	85 c0                	test   %eax,%eax
    f295:	74 0b                	je     f2a2 <remove_from_queues+0xc8>
    f297:	8b 44 24 10          	mov    0x10(%esp),%eax
    f29b:	8b 40 20             	mov    0x20(%eax),%eax
    f29e:	85 c0                	test   %eax,%eax
    f2a0:	75 10                	jne    f2b2 <remove_from_queues+0xd8>
		panic("Free block list corrupted");
    f2a2:	83 ec 0c             	sub    $0xc,%esp
    f2a5:	68 3d 3a 02 00       	push   $0x23a3d
    f2aa:	e8 59 99 ff ff       	call   8c08 <panic>
    f2af:	83 c4 10             	add    $0x10,%esp
	bh->b_prev_free->b_next_free = bh->b_next_free;
    f2b2:	8b 44 24 10          	mov    0x10(%esp),%eax
    f2b6:	8b 40 1c             	mov    0x1c(%eax),%eax
    f2b9:	8b 54 24 10          	mov    0x10(%esp),%edx
    f2bd:	8b 52 20             	mov    0x20(%edx),%edx
    f2c0:	89 50 20             	mov    %edx,0x20(%eax)
	bh->b_next_free->b_prev_free = bh->b_prev_free;
    f2c3:	8b 44 24 10          	mov    0x10(%esp),%eax
    f2c7:	8b 40 20             	mov    0x20(%eax),%eax
    f2ca:	8b 54 24 10          	mov    0x10(%esp),%edx
    f2ce:	8b 52 1c             	mov    0x1c(%edx),%edx
    f2d1:	89 50 1c             	mov    %edx,0x1c(%eax)
	// 如果空闲链表头指向本缓冲区,则让其指向下一缓冲区.
	if (free_list == bh)
    f2d4:	a1 c4 10 03 00       	mov    0x310c4,%eax
    f2d9:	3b 44 24 10          	cmp    0x10(%esp),%eax
    f2dd:	75 0c                	jne    f2eb <remove_from_queues+0x111>
		free_list = bh->b_next_free;
    f2df:	8b 44 24 10          	mov    0x10(%esp),%eax
    f2e3:	8b 40 20             	mov    0x20(%eax),%eax
    f2e6:	a3 c4 10 03 00       	mov    %eax,0x310c4
}
    f2eb:	90                   	nop
    f2ec:	83 c4 0c             	add    $0xc,%esp
    f2ef:	c3                   	ret    

0000f2f0 <insert_into_queues>:
// 将缓冲块插入空闲链表尾部,同时放入hash队列中.
static inline void insert_into_queues(struct buffer_head * bh)
{
	/* put at end of free list */
	/* 放在空闲链表末尾处 */
	bh->b_next_free = free_list;
    f2f0:	8b 15 c4 10 03 00    	mov    0x310c4,%edx
    f2f6:	8b 44 24 04          	mov    0x4(%esp),%eax
    f2fa:	89 50 20             	mov    %edx,0x20(%eax)
	bh->b_prev_free = free_list->b_prev_free;
    f2fd:	a1 c4 10 03 00       	mov    0x310c4,%eax
    f302:	8b 50 1c             	mov    0x1c(%eax),%edx
    f305:	8b 44 24 04          	mov    0x4(%esp),%eax
    f309:	89 50 1c             	mov    %edx,0x1c(%eax)
	free_list->b_prev_free->b_next_free = bh;
    f30c:	a1 c4 10 03 00       	mov    0x310c4,%eax
    f311:	8b 40 1c             	mov    0x1c(%eax),%eax
    f314:	8b 54 24 04          	mov    0x4(%esp),%edx
    f318:	89 50 20             	mov    %edx,0x20(%eax)
	free_list->b_prev_free = bh;
    f31b:	a1 c4 10 03 00       	mov    0x310c4,%eax
    f320:	8b 54 24 04          	mov    0x4(%esp),%edx
    f324:	89 50 1c             	mov    %edx,0x1c(%eax)
	/* put the buffer in new hash-queue if it has a device */
	/* 如果该缓冲块对应一个设备,则将其插入新hash队列中 */
	bh->b_prev = NULL;
    f327:	8b 44 24 04          	mov    0x4(%esp),%eax
    f32b:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
	bh->b_next = NULL;
    f332:	8b 44 24 04          	mov    0x4(%esp),%eax
    f336:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
	if (!bh->b_dev)
    f33d:	8b 44 24 04          	mov    0x4(%esp),%eax
    f341:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f345:	66 85 c0             	test   %ax,%ax
    f348:	0f 84 90 00 00 00    	je     f3de <insert_into_queues+0xee>
		return;
	bh->b_next = hash(bh->b_dev, bh->b_blocknr);
    f34e:	8b 44 24 04          	mov    0x4(%esp),%eax
    f352:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f356:	0f b7 d0             	movzwl %ax,%edx
    f359:	8b 44 24 04          	mov    0x4(%esp),%eax
    f35d:	8b 40 04             	mov    0x4(%eax),%eax
    f360:	89 d1                	mov    %edx,%ecx
    f362:	31 c1                	xor    %eax,%ecx
    f364:	ba 7d e9 78 d5       	mov    $0xd578e97d,%edx
    f369:	89 c8                	mov    %ecx,%eax
    f36b:	f7 e2                	mul    %edx
    f36d:	89 d0                	mov    %edx,%eax
    f36f:	c1 e8 08             	shr    $0x8,%eax
    f372:	69 c0 33 01 00 00    	imul   $0x133,%eax,%eax
    f378:	29 c1                	sub    %eax,%ecx
    f37a:	89 c8                	mov    %ecx,%eax
    f37c:	8b 14 85 40 07 04 00 	mov    0x40740(,%eax,4),%edx
    f383:	8b 44 24 04          	mov    0x4(%esp),%eax
    f387:	89 50 18             	mov    %edx,0x18(%eax)
	hash(bh->b_dev, bh->b_blocknr) = bh;
    f38a:	8b 44 24 04          	mov    0x4(%esp),%eax
    f38e:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f392:	0f b7 d0             	movzwl %ax,%edx
    f395:	8b 44 24 04          	mov    0x4(%esp),%eax
    f399:	8b 40 04             	mov    0x4(%eax),%eax
    f39c:	89 d1                	mov    %edx,%ecx
    f39e:	31 c1                	xor    %eax,%ecx
    f3a0:	ba 7d e9 78 d5       	mov    $0xd578e97d,%edx
    f3a5:	89 c8                	mov    %ecx,%eax
    f3a7:	f7 e2                	mul    %edx
    f3a9:	89 d0                	mov    %edx,%eax
    f3ab:	c1 e8 08             	shr    $0x8,%eax
    f3ae:	69 c0 33 01 00 00    	imul   $0x133,%eax,%eax
    f3b4:	29 c1                	sub    %eax,%ecx
    f3b6:	89 c8                	mov    %ecx,%eax
    f3b8:	8b 54 24 04          	mov    0x4(%esp),%edx
    f3bc:	89 14 85 40 07 04 00 	mov    %edx,0x40740(,%eax,4)
	// 请注意当hash表某项第1次插入项时,hash()计算值肯定为NULL,因此此时hash(bh->b_dev,bh->b_blocknr)得到的bh->b_next肯定是NULL,
	// 所以bh->b_next->b_prev = bh应该在bh->b_next不为NULL时才能给b_pev赋bh值.即bh->b_next->b_prev = bh前应该增加判断"
	// if(bh->b_next)".该错误到0.96版后才被纠正.
	if(bh->b_next)
    f3c3:	8b 44 24 04          	mov    0x4(%esp),%eax
    f3c7:	8b 40 18             	mov    0x18(%eax),%eax
    f3ca:	85 c0                	test   %eax,%eax
    f3cc:	74 11                	je     f3df <insert_into_queues+0xef>
		bh->b_next->b_prev = bh;			// 此句前应添加"if(bh->b_next)"判断.
    f3ce:	8b 44 24 04          	mov    0x4(%esp),%eax
    f3d2:	8b 40 18             	mov    0x18(%eax),%eax
    f3d5:	8b 54 24 04          	mov    0x4(%esp),%edx
    f3d9:	89 50 14             	mov    %edx,0x14(%eax)
    f3dc:	eb 01                	jmp    f3df <insert_into_queues+0xef>
	/* put the buffer in new hash-queue if it has a device */
	/* 如果该缓冲块对应一个设备,则将其插入新hash队列中 */
	bh->b_prev = NULL;
	bh->b_next = NULL;
	if (!bh->b_dev)
		return;
    f3de:	90                   	nop
	// 请注意当hash表某项第1次插入项时,hash()计算值肯定为NULL,因此此时hash(bh->b_dev,bh->b_blocknr)得到的bh->b_next肯定是NULL,
	// 所以bh->b_next->b_prev = bh应该在bh->b_next不为NULL时才能给b_pev赋bh值.即bh->b_next->b_prev = bh前应该增加判断"
	// if(bh->b_next)".该错误到0.96版后才被纠正.
	if(bh->b_next)
		bh->b_next->b_prev = bh;			// 此句前应添加"if(bh->b_next)"判断.
}
    f3df:	c3                   	ret    

0000f3e0 <find_buffer>:

// 利用hash表在高速缓冲中寻找给定设备和指定块号的缓冲区块.
// 如果找到则返回缓冲区块的指针,否则返回NULL.
static struct buffer_head * find_buffer(int dev, int block)
{
    f3e0:	83 ec 10             	sub    $0x10,%esp
	struct buffer_head * tmp;

	// 搜索hash表,寻找指定设备与和块号的缓冲块.
	for (tmp = hash(dev, block) ; tmp != NULL ; tmp = tmp->b_next)
    f3e3:	8b 44 24 14          	mov    0x14(%esp),%eax
    f3e7:	33 44 24 18          	xor    0x18(%esp),%eax
    f3eb:	89 c1                	mov    %eax,%ecx
    f3ed:	ba 7d e9 78 d5       	mov    $0xd578e97d,%edx
    f3f2:	89 c8                	mov    %ecx,%eax
    f3f4:	f7 e2                	mul    %edx
    f3f6:	89 d0                	mov    %edx,%eax
    f3f8:	c1 e8 08             	shr    $0x8,%eax
    f3fb:	69 c0 33 01 00 00    	imul   $0x133,%eax,%eax
    f401:	29 c1                	sub    %eax,%ecx
    f403:	89 c8                	mov    %ecx,%eax
    f405:	8b 04 85 40 07 04 00 	mov    0x40740(,%eax,4),%eax
    f40c:	89 44 24 0c          	mov    %eax,0xc(%esp)
    f410:	eb 31                	jmp    f443 <find_buffer+0x63>
		if (tmp->b_dev == dev && tmp->b_blocknr == block)
    f412:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f416:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f41a:	0f b7 c0             	movzwl %ax,%eax
    f41d:	3b 44 24 14          	cmp    0x14(%esp),%eax
    f421:	75 15                	jne    f438 <find_buffer+0x58>
    f423:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f427:	8b 50 04             	mov    0x4(%eax),%edx
    f42a:	8b 44 24 18          	mov    0x18(%esp),%eax
    f42e:	39 c2                	cmp    %eax,%edx
    f430:	75 06                	jne    f438 <find_buffer+0x58>
			return tmp;
    f432:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f436:	eb 17                	jmp    f44f <find_buffer+0x6f>
static struct buffer_head * find_buffer(int dev, int block)
{
	struct buffer_head * tmp;

	// 搜索hash表,寻找指定设备与和块号的缓冲块.
	for (tmp = hash(dev, block) ; tmp != NULL ; tmp = tmp->b_next)
    f438:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f43c:	8b 40 18             	mov    0x18(%eax),%eax
    f43f:	89 44 24 0c          	mov    %eax,0xc(%esp)
    f443:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    f448:	75 c8                	jne    f412 <find_buffer+0x32>
		if (tmp->b_dev == dev && tmp->b_blocknr == block)
			return tmp;
	return NULL;
    f44a:	b8 00 00 00 00       	mov    $0x0,%eax
}
    f44f:	83 c4 10             	add    $0x10,%esp
    f452:	c3                   	ret    

0000f453 <get_hash_table>:
 * 代码为什么会是这样子的?我听见你问......原因是竞争条件.由于我们没有对缓冲块上锁(除非我们正在读取它们的数据),那么当我们(进程)睡眠时缓冲块可能
 * 发生一些问题(例如一个读错误将导致该缓冲块出错).目前这种情况实际上是不会发生的,但处理的代码已经准备好了.
 */
// 利用hash表在高速缓冲区中寻找指定的缓冲块.若找到则对该缓冲块上锁并返回块头指针.
struct buffer_head * get_hash_table(int dev, int block)
{
    f453:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;

	for (;;) {
		// 在高速缓冲中寻找给定设备和指定块的缓冲区块,如果没有找到则返回NULL,退出.
		if (!(bh = find_buffer(dev, block)))
    f456:	ff 74 24 24          	pushl  0x24(%esp)
    f45a:	ff 74 24 24          	pushl  0x24(%esp)
    f45e:	e8 7d ff ff ff       	call   f3e0 <find_buffer>
    f463:	83 c4 08             	add    $0x8,%esp
    f466:	89 44 24 0c          	mov    %eax,0xc(%esp)
    f46a:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    f46f:	75 07                	jne    f478 <get_hash_table+0x25>
			return NULL;
    f471:	b8 00 00 00 00       	mov    $0x0,%eax
    f476:	eb 5b                	jmp    f4d3 <get_hash_table+0x80>
		// 对该缓冲块增加引用计数,并等待该缓冲块解锁(如果已被上锁).由于经过了睡眠状态,因此有必要再验证该缓冲块的正确性,并返回缓冲块头指针.
		bh->b_count++;
    f478:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f47c:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    f480:	8d 50 01             	lea    0x1(%eax),%edx
    f483:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f487:	88 50 0c             	mov    %dl,0xc(%eax)
		wait_on_buffer(bh);
    f48a:	83 ec 0c             	sub    $0xc,%esp
    f48d:	ff 74 24 18          	pushl  0x18(%esp)
    f491:	e8 98 fa ff ff       	call   ef2e <wait_on_buffer>
    f496:	83 c4 10             	add    $0x10,%esp
		if (bh->b_dev == dev && bh->b_blocknr == block)
    f499:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f49d:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f4a1:	0f b7 c0             	movzwl %ax,%eax
    f4a4:	3b 44 24 20          	cmp    0x20(%esp),%eax
    f4a8:	75 15                	jne    f4bf <get_hash_table+0x6c>
    f4aa:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f4ae:	8b 50 04             	mov    0x4(%eax),%edx
    f4b1:	8b 44 24 24          	mov    0x24(%esp),%eax
    f4b5:	39 c2                	cmp    %eax,%edx
    f4b7:	75 06                	jne    f4bf <get_hash_table+0x6c>
			return bh;
    f4b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f4bd:	eb 14                	jmp    f4d3 <get_hash_table+0x80>
		// 如果在睡眠时该缓冲块所属的设备号或块号发生的改变,则撤消对它的用计数.重新寻找.
		bh->b_count--;
    f4bf:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f4c3:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    f4c7:	8d 50 ff             	lea    -0x1(%eax),%edx
    f4ca:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f4ce:	88 50 0c             	mov    %dl,0xc(%eax)
	}
    f4d1:	eb 83                	jmp    f456 <get_hash_table+0x3>
}
    f4d3:	83 c4 1c             	add    $0x1c,%esp
    f4d6:	c3                   	ret    

0000f4d7 <getblk>:
#define BADNESS(bh) (((bh)->b_dirt << 1) + (bh)->b_lock)
// 取高速缓冲中指定的缓冲块.
// 检查指定(设备号和块号)的缓冲区是否已经在高速缓冲中.如果指定块已经在高速缓冲中,则返回对应缓冲区头指针退出;如果不在,就需要在高速中
// 中设置一个对应设备号和块号的新项.返回相应缓冲区头指针.
struct buffer_head * getblk(int dev, int block)
{
    f4d7:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * tmp, * bh;

repeat:
	if (bh = get_hash_table(dev, block))
    f4da:	83 ec 08             	sub    $0x8,%esp
    f4dd:	ff 74 24 2c          	pushl  0x2c(%esp)
    f4e1:	ff 74 24 2c          	pushl  0x2c(%esp)
    f4e5:	e8 69 ff ff ff       	call   f453 <get_hash_table>
    f4ea:	83 c4 10             	add    $0x10,%esp
    f4ed:	89 44 24 08          	mov    %eax,0x8(%esp)
    f4f1:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    f4f6:	74 09                	je     f501 <getblk+0x2a>
		return bh;
    f4f8:	8b 44 24 08          	mov    0x8(%esp),%eax
    f4fc:	e9 8b 01 00 00       	jmp    f68c <getblk+0x1b5>
	// 扫描空闲数据块链表,寻找空闲缓冲区.
	// 首先让tmp指向空闲链表的第一个空闲缓冲区头.
	tmp = free_list;
    f501:	a1 c4 10 03 00       	mov    0x310c4,%eax
    f506:	89 44 24 0c          	mov    %eax,0xc(%esp)
	do {
		// 如果该缓冲区正在被使用(引用计数不等于0),则继续扫描下一项.对于b_count=0的块,即高速缓冲中当前没有引用的块不一定就是干净的(b_dirt=0)
		// 或没有锁定的(b_lock=0).因此,我们还是需要继续下面的判断和选择.例如当一个任务改写过一块内容后就释放了,于是该块b_count=0,但b_lock不等于0;
		// 当一个任务执行breada()预读几个块时,只要ll_rw_block()命令发出后,它就会递减b_count;但此时实际上硬盘访问操作可能还在进行,因此此时
		// b_lock=1,但b_count=0.
		if (tmp->b_count)
    f50a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f50e:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    f512:	84 c0                	test   %al,%al
    f514:	75 6a                	jne    f580 <getblk+0xa9>
			continue;
		// 如果缓冲头指针bh为空,或者tmp所指缓冲头的标志(修改,锁定)权重小于bh头标志的权重,则让bh指向tmp缓冲块头.如果该tmp缓冲块头表明缓冲
		// 块既没有修改也没有锁定标志置位,则说明已为指定设备上的块取得对应的高速缓冲块,则退出循环.否则我们就继续执行本循环,看看能否找到一个BADNESS()
		// 最小的缓冲块.
		if (!bh || BADNESS(tmp) < BADNESS(bh)) {
    f516:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    f51b:	74 3a                	je     f557 <getblk+0x80>
    f51d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f521:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
    f525:	0f b6 c0             	movzbl %al,%eax
    f528:	8d 14 00             	lea    (%eax,%eax,1),%edx
    f52b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f52f:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
    f533:	0f b6 c0             	movzbl %al,%eax
    f536:	01 c2                	add    %eax,%edx
    f538:	8b 44 24 08          	mov    0x8(%esp),%eax
    f53c:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
    f540:	0f b6 c0             	movzbl %al,%eax
    f543:	8d 0c 00             	lea    (%eax,%eax,1),%ecx
    f546:	8b 44 24 08          	mov    0x8(%esp),%eax
    f54a:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
    f54e:	0f b6 c0             	movzbl %al,%eax
    f551:	01 c8                	add    %ecx,%eax
    f553:	39 c2                	cmp    %eax,%edx
    f555:	7d 2a                	jge    f581 <getblk+0xaa>
			bh = tmp;
    f557:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f55b:	89 44 24 08          	mov    %eax,0x8(%esp)
			if (!BADNESS(tmp))
    f55f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f563:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
    f567:	0f b6 c0             	movzbl %al,%eax
    f56a:	8d 14 00             	lea    (%eax,%eax,1),%edx
    f56d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f571:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
    f575:	0f b6 c0             	movzbl %al,%eax
    f578:	01 d0                	add    %edx,%eax
    f57a:	85 c0                	test   %eax,%eax
    f57c:	74 1f                	je     f59d <getblk+0xc6>
    f57e:	eb 01                	jmp    f581 <getblk+0xaa>
		// 如果该缓冲区正在被使用(引用计数不等于0),则继续扫描下一项.对于b_count=0的块,即高速缓冲中当前没有引用的块不一定就是干净的(b_dirt=0)
		// 或没有锁定的(b_lock=0).因此,我们还是需要继续下面的判断和选择.例如当一个任务改写过一块内容后就释放了,于是该块b_count=0,但b_lock不等于0;
		// 当一个任务执行breada()预读几个块时,只要ll_rw_block()命令发出后,它就会递减b_count;但此时实际上硬盘访问操作可能还在进行,因此此时
		// b_lock=1,但b_count=0.
		if (tmp->b_count)
			continue;
    f580:	90                   	nop
			bh = tmp;
			if (!BADNESS(tmp))
				break;
		}
	/* and repeat until we find something good */	/* 重复操作直到找到适合的缓冲块 */
	} while ((tmp = tmp->b_next_free) != free_list);
    f581:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f585:	8b 40 20             	mov    0x20(%eax),%eax
    f588:	89 44 24 0c          	mov    %eax,0xc(%esp)
    f58c:	a1 c4 10 03 00       	mov    0x310c4,%eax
    f591:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    f595:	0f 85 6f ff ff ff    	jne    f50a <getblk+0x33>
    f59b:	eb 01                	jmp    f59e <getblk+0xc7>
		// 块既没有修改也没有锁定标志置位,则说明已为指定设备上的块取得对应的高速缓冲块,则退出循环.否则我们就继续执行本循环,看看能否找到一个BADNESS()
		// 最小的缓冲块.
		if (!bh || BADNESS(tmp) < BADNESS(bh)) {
			bh = tmp;
			if (!BADNESS(tmp))
				break;
    f59d:	90                   	nop
		}
	/* and repeat until we find something good */	/* 重复操作直到找到适合的缓冲块 */
	} while ((tmp = tmp->b_next_free) != free_list);
	// 如果循环检查发现所有缓冲块都正在被使用(所有缓冲块的状况引用计数者>0)中,则睡眠等待有空闲缓冲区可用.当有空闲缓冲块可用时本各会被明确地唤醒.然后
	// 我们就跳转到函数开始处重新查找空闲缓冲块.
	if (!bh) {
    f59e:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    f5a3:	75 15                	jne    f5ba <getblk+0xe3>
		sleep_on(&buffer_wait);
    f5a5:	83 ec 0c             	sub    $0xc,%esp
    f5a8:	68 c8 10 03 00       	push   $0x310c8
    f5ad:	e8 84 7b ff ff       	call   7136 <sleep_on>
    f5b2:	83 c4 10             	add    $0x10,%esp
		goto repeat;
    f5b5:	e9 20 ff ff ff       	jmp    f4da <getblk+0x3>
	}
	// 执行到这里,说明我们已经找到了一个比较适合的空闲缓冲块了.于是先等待该缓冲区解锁(如果已被上锁的话).如果在我们睡眠阶段该缓冲区又被其他任务使用的话,
	// 只好重复上述寻找过程.
	wait_on_buffer(bh);
    f5ba:	83 ec 0c             	sub    $0xc,%esp
    f5bd:	ff 74 24 14          	pushl  0x14(%esp)
    f5c1:	e8 68 f9 ff ff       	call   ef2e <wait_on_buffer>
    f5c6:	83 c4 10             	add    $0x10,%esp
	if (bh->b_count)	// 又被占用??
    f5c9:	8b 44 24 08          	mov    0x8(%esp),%eax
    f5cd:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    f5d1:	84 c0                	test   %al,%al
    f5d3:	74 3c                	je     f611 <getblk+0x13a>
		goto repeat;
    f5d5:	e9 00 ff ff ff       	jmp    f4da <getblk+0x3>
	// 如果该缓冲区已被修改,则将数据写盘,并再次等待缓冲区解锁.同样地,若该缓冲区又被其他任务使用的话,只好再重复上述寻找过程.
	while (bh->b_dirt) {
		sync_dev(bh->b_dev);
    f5da:	8b 44 24 08          	mov    0x8(%esp),%eax
    f5de:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f5e2:	0f b7 c0             	movzwl %ax,%eax
    f5e5:	83 ec 0c             	sub    $0xc,%esp
    f5e8:	50                   	push   %eax
    f5e9:	e8 d0 f9 ff ff       	call   efbe <sync_dev>
    f5ee:	83 c4 10             	add    $0x10,%esp
		wait_on_buffer(bh);
    f5f1:	83 ec 0c             	sub    $0xc,%esp
    f5f4:	ff 74 24 14          	pushl  0x14(%esp)
    f5f8:	e8 31 f9 ff ff       	call   ef2e <wait_on_buffer>
    f5fd:	83 c4 10             	add    $0x10,%esp
		if (bh->b_count)	// 又被占用??
    f600:	8b 44 24 08          	mov    0x8(%esp),%eax
    f604:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    f608:	84 c0                	test   %al,%al
    f60a:	74 05                	je     f611 <getblk+0x13a>
			goto repeat;
    f60c:	e9 c9 fe ff ff       	jmp    f4da <getblk+0x3>
	// 只好重复上述寻找过程.
	wait_on_buffer(bh);
	if (bh->b_count)	// 又被占用??
		goto repeat;
	// 如果该缓冲区已被修改,则将数据写盘,并再次等待缓冲区解锁.同样地,若该缓冲区又被其他任务使用的话,只好再重复上述寻找过程.
	while (bh->b_dirt) {
    f611:	8b 44 24 08          	mov    0x8(%esp),%eax
    f615:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
    f619:	84 c0                	test   %al,%al
    f61b:	75 bd                	jne    f5da <getblk+0x103>
	}
	/* NOTE!! While we slept waiting for this block, somebody else might */
	/* already have added "this" block to the cache. check it */
	/* 注意!!当进程为了等待该缓冲块而睡眠时,其他进程可能已经将该缓冲块加入进高速缓冲中,所以我们也要对此进行检查. */
	// 在高速缓冲hash表中检查指定设备和块的缓冲块是否乘我们睡眠之即已经被加入进去.如果是的话就再次重复上述寻找过程.
	if (find_buffer(dev, block))
    f61d:	83 ec 08             	sub    $0x8,%esp
    f620:	ff 74 24 2c          	pushl  0x2c(%esp)
    f624:	ff 74 24 2c          	pushl  0x2c(%esp)
    f628:	e8 b3 fd ff ff       	call   f3e0 <find_buffer>
    f62d:	83 c4 10             	add    $0x10,%esp
    f630:	85 c0                	test   %eax,%eax
    f632:	74 05                	je     f639 <getblk+0x162>
		goto repeat;
    f634:	e9 a1 fe ff ff       	jmp    f4da <getblk+0x3>
	/* OK, FINALLY we know that this buffer is the only one of it's kind, */
	/* and that it's unused (b_count=0), unlocked (b_lock=0), and clean */
	/* OK,最终我们知道该缓冲块是指定参数的唯一一块,而且目前还没有被占用 */
	/* (b_count=0),也未被上锁(b_lock=0),并且是干净的(未被修改的) */
	// 于是让我们占用此缓冲块.置引用计数为1,复位修改标志和有效(更新)标志.
	bh->b_count = 1;
    f639:	8b 44 24 08          	mov    0x8(%esp),%eax
    f63d:	c6 40 0c 01          	movb   $0x1,0xc(%eax)
	bh->b_dirt = 0;
    f641:	8b 44 24 08          	mov    0x8(%esp),%eax
    f645:	c6 40 0b 00          	movb   $0x0,0xb(%eax)
	bh->b_uptodate = 0;
    f649:	8b 44 24 08          	mov    0x8(%esp),%eax
    f64d:	c6 40 0a 00          	movb   $0x0,0xa(%eax)
	// 从hash队列和空闲块链表中移出该缓冲头,让该缓冲区用于指定设备和其上的指定块.然后根据此新设备号和块号重新插入空闲链表和hash队列新位置处.并最终返回缓冲
	// 头指针.
	remove_from_queues(bh);
    f651:	83 ec 0c             	sub    $0xc,%esp
    f654:	ff 74 24 14          	pushl  0x14(%esp)
    f658:	e8 7d fb ff ff       	call   f1da <remove_from_queues>
    f65d:	83 c4 10             	add    $0x10,%esp
	bh->b_dev = dev;
    f660:	8b 44 24 20          	mov    0x20(%esp),%eax
    f664:	89 c2                	mov    %eax,%edx
    f666:	8b 44 24 08          	mov    0x8(%esp),%eax
    f66a:	66 89 50 08          	mov    %dx,0x8(%eax)
	bh->b_blocknr = block;
    f66e:	8b 54 24 24          	mov    0x24(%esp),%edx
    f672:	8b 44 24 08          	mov    0x8(%esp),%eax
    f676:	89 50 04             	mov    %edx,0x4(%eax)
	insert_into_queues(bh);
    f679:	83 ec 0c             	sub    $0xc,%esp
    f67c:	ff 74 24 14          	pushl  0x14(%esp)
    f680:	e8 6b fc ff ff       	call   f2f0 <insert_into_queues>
    f685:	83 c4 10             	add    $0x10,%esp
	return bh;
    f688:	8b 44 24 08          	mov    0x8(%esp),%eax
}
    f68c:	83 c4 1c             	add    $0x1c,%esp
    f68f:	c3                   	ret    

0000f690 <brelse>:

// 释放指定缓冲块.
// 等待该缓冲块解锁.然后引用计数递减1,并明确地唤醒等待空闲缓冲块的进程.
void brelse(struct buffer_head * buf)
{
    f690:	83 ec 0c             	sub    $0xc,%esp
	if (!buf)						// 如果缓冲头指针无效则返回.
    f693:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    f698:	74 47                	je     f6e1 <brelse+0x51>
		return;
	wait_on_buffer(buf);
    f69a:	83 ec 0c             	sub    $0xc,%esp
    f69d:	ff 74 24 1c          	pushl  0x1c(%esp)
    f6a1:	e8 88 f8 ff ff       	call   ef2e <wait_on_buffer>
    f6a6:	83 c4 10             	add    $0x10,%esp
	if (!(buf->b_count--))
    f6a9:	8b 44 24 10          	mov    0x10(%esp),%eax
    f6ad:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    f6b1:	8d 50 ff             	lea    -0x1(%eax),%edx
    f6b4:	8b 4c 24 10          	mov    0x10(%esp),%ecx
    f6b8:	88 51 0c             	mov    %dl,0xc(%ecx)
    f6bb:	84 c0                	test   %al,%al
    f6bd:	75 10                	jne    f6cf <brelse+0x3f>
		panic("Trying to free free buffer");
    f6bf:	83 ec 0c             	sub    $0xc,%esp
    f6c2:	68 57 3a 02 00       	push   $0x23a57
    f6c7:	e8 3c 95 ff ff       	call   8c08 <panic>
    f6cc:	83 c4 10             	add    $0x10,%esp
	wake_up(&buffer_wait);
    f6cf:	83 ec 0c             	sub    $0xc,%esp
    f6d2:	68 c8 10 03 00       	push   $0x310c8
    f6d7:	e8 73 7a ff ff       	call   714f <wake_up>
    f6dc:	83 c4 10             	add    $0x10,%esp
    f6df:	eb 01                	jmp    f6e2 <brelse+0x52>
// 释放指定缓冲块.
// 等待该缓冲块解锁.然后引用计数递减1,并明确地唤醒等待空闲缓冲块的进程.
void brelse(struct buffer_head * buf)
{
	if (!buf)						// 如果缓冲头指针无效则返回.
		return;
    f6e1:	90                   	nop
	wait_on_buffer(buf);
	if (!(buf->b_count--))
		panic("Trying to free free buffer");
	wake_up(&buffer_wait);
}
    f6e2:	83 c4 0c             	add    $0xc,%esp
    f6e5:	c3                   	ret    

0000f6e6 <bread>:
 */
// 从设备上读取数据块.
// 该函数根据指定的设备号dev和数据块号block,首先在高速缓冲区中申请一块缓冲块.如果该缓冲块中经包含有有效的数据就直接返回该缓冲块指针,否则就从设备中
// 读取指定的数据块到该缓冲块中并返回缓冲块指针.
struct buffer_head * bread(int dev, int block)
{
    f6e6:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;

	// 从高速缓冲区中申请一块缓冲块.如果返回值是NULL,则表示内核出错,停机.否则我们判断其中是否已有可用数据.
	if (!(bh = getblk(dev, block)))
    f6e9:	83 ec 08             	sub    $0x8,%esp
    f6ec:	ff 74 24 2c          	pushl  0x2c(%esp)
    f6f0:	ff 74 24 2c          	pushl  0x2c(%esp)
    f6f4:	e8 de fd ff ff       	call   f4d7 <getblk>
    f6f9:	83 c4 10             	add    $0x10,%esp
    f6fc:	89 44 24 0c          	mov    %eax,0xc(%esp)
    f700:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    f705:	75 10                	jne    f717 <bread+0x31>
		panic("bread: getblk returned NULL\n");
    f707:	83 ec 0c             	sub    $0xc,%esp
    f70a:	68 72 3a 02 00       	push   $0x23a72
    f70f:	e8 f4 94 ff ff       	call   8c08 <panic>
    f714:	83 c4 10             	add    $0x10,%esp
	// 如果该缓冲块中数据是有效的(已更新的)可以直接使用,则返回.
	if (bh->b_uptodate)
    f717:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f71b:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
    f71f:	84 c0                	test   %al,%al
    f721:	74 06                	je     f729 <bread+0x43>
		return bh;
    f723:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f727:	eb 46                	jmp    f76f <bread+0x89>
	// 否则我们就调用底层块设备读写ll_rw_block()函数,产生读设备块请求.然后等待指定数据块被读入,并等待缓冲区解锁.在睡眠醒来之后,如果该缓冲区已更新,则返回
	// 缓冲区头指针,退出.否则表明读设备操作失败,于是释放该缓冲区,返回NULL,退出.
	ll_rw_block(READ, bh);
    f729:	83 ec 08             	sub    $0x8,%esp
    f72c:	ff 74 24 14          	pushl  0x14(%esp)
    f730:	6a 00                	push   $0x0
    f732:	e8 b7 72 00 00       	call   169ee <ll_rw_block>
    f737:	83 c4 10             	add    $0x10,%esp
	wait_on_buffer(bh);
    f73a:	83 ec 0c             	sub    $0xc,%esp
    f73d:	ff 74 24 18          	pushl  0x18(%esp)
    f741:	e8 e8 f7 ff ff       	call   ef2e <wait_on_buffer>
    f746:	83 c4 10             	add    $0x10,%esp
	if (bh->b_uptodate)
    f749:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f74d:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
    f751:	84 c0                	test   %al,%al
    f753:	74 06                	je     f75b <bread+0x75>
		return bh;
    f755:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f759:	eb 14                	jmp    f76f <bread+0x89>
	brelse(bh);
    f75b:	83 ec 0c             	sub    $0xc,%esp
    f75e:	ff 74 24 18          	pushl  0x18(%esp)
    f762:	e8 29 ff ff ff       	call   f690 <brelse>
    f767:	83 c4 10             	add    $0x10,%esp
	return NULL;
    f76a:	b8 00 00 00 00       	mov    $0x0,%eax
}
    f76f:	83 c4 1c             	add    $0x1c,%esp
    f772:	c3                   	ret    

0000f773 <bread_page>:
 */
// 读设备上一个页面(4个缓冲块)的内容到指定内存地址处.
// 参数address是保存页面数据的地址;dev是指定的设备号;b[4]是含有4个设备数据块号的数组.
// 该函数仅用于mm/memory.c文件的do_no_page()函数中.
void bread_page(unsigned long address, int dev, int b[4])
{
    f773:	57                   	push   %edi
    f774:	56                   	push   %esi
    f775:	53                   	push   %ebx
    f776:	83 ec 20             	sub    $0x20,%esp
	int i;

	// 该函数循环执行4次,根据放在数组b[]中的4个块号从设备dev中读取一页内容放到指定内存位置address处.对于参数b[i]给出的
	// 有效块号,函数首先从高速缓冲中取指定设备和块号的的缓冲块.如果缓冲块中数据无效(未更新)则产生读设备请求从设备上读取相
	// 应数据块.对于b[i]无效的块号则不用处理它了.因此本函数其实可以根据指定的b[]中的块号随意读取1-4个数据块.
	for (i = 0 ; i < 4 ; i++)
    f779:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
    f780:	00 
    f781:	e9 89 00 00 00       	jmp    f80f <bread_page+0x9c>
		if (b[i]) {
    f786:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f78a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    f791:	8b 44 24 38          	mov    0x38(%esp),%eax
    f795:	01 d0                	add    %edx,%eax
    f797:	8b 00                	mov    (%eax),%eax
    f799:	85 c0                	test   %eax,%eax
    f79b:	74 61                	je     f7fe <bread_page+0x8b>
			// 先给该逻辑块号申请一个缓存块
			if (bh[i] = getblk(dev, b[i]))
    f79d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f7a1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    f7a8:	8b 44 24 38          	mov    0x38(%esp),%eax
    f7ac:	01 d0                	add    %edx,%eax
    f7ae:	8b 00                	mov    (%eax),%eax
    f7b0:	83 ec 08             	sub    $0x8,%esp
    f7b3:	50                   	push   %eax
    f7b4:	ff 74 24 40          	pushl  0x40(%esp)
    f7b8:	e8 1a fd ff ff       	call   f4d7 <getblk>
    f7bd:	83 c4 10             	add    $0x10,%esp
    f7c0:	89 c2                	mov    %eax,%edx
    f7c2:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f7c6:	89 54 84 0c          	mov    %edx,0xc(%esp,%eax,4)
    f7ca:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f7ce:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f7d2:	85 c0                	test   %eax,%eax
    f7d4:	74 34                	je     f80a <bread_page+0x97>
				// 如果该缓冲块没有更新,则从块设备中读取出来
				if (!bh[i]->b_uptodate)
    f7d6:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f7da:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f7de:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
    f7e2:	84 c0                	test   %al,%al
    f7e4:	75 24                	jne    f80a <bread_page+0x97>
					ll_rw_block(READ, bh[i]);
    f7e6:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f7ea:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f7ee:	83 ec 08             	sub    $0x8,%esp
    f7f1:	50                   	push   %eax
    f7f2:	6a 00                	push   $0x0
    f7f4:	e8 f5 71 00 00       	call   169ee <ll_rw_block>
    f7f9:	83 c4 10             	add    $0x10,%esp
    f7fc:	eb 0c                	jmp    f80a <bread_page+0x97>
		} else
			bh[i] = NULL;
    f7fe:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f802:	c7 44 84 0c 00 00 00 	movl   $0x0,0xc(%esp,%eax,4)
    f809:	00 
	int i;

	// 该函数循环执行4次,根据放在数组b[]中的4个块号从设备dev中读取一页内容放到指定内存位置address处.对于参数b[i]给出的
	// 有效块号,函数首先从高速缓冲中取指定设备和块号的的缓冲块.如果缓冲块中数据无效(未更新)则产生读设备请求从设备上读取相
	// 应数据块.对于b[i]无效的块号则不用处理它了.因此本函数其实可以根据指定的b[]中的块号随意读取1-4个数据块.
	for (i = 0 ; i < 4 ; i++)
    f80a:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
    f80f:	83 7c 24 1c 03       	cmpl   $0x3,0x1c(%esp)
    f814:	0f 8e 6c ff ff ff    	jle    f786 <bread_page+0x13>
					ll_rw_block(READ, bh[i]);
		} else
			bh[i] = NULL;
	// 随后将4个缓冲块上的内容顺序复制到指定地址处.在进行复制(使用)缓冲块之前我们先要睡眠等待缓冲块解锁(若被上锁的话).另外,
	// 因为可能睡眠过了,所以我们还需要在复制之前再检查一下缓冲块中的数据是否是有效的.复制完后我们还需要释放缓冲块.
	for (i = 0 ; i < 4 ; i++, address += BLOCK_SIZE)
    f81a:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
    f821:	00 
    f822:	eb 73                	jmp    f897 <bread_page+0x124>
		if (bh[i]) {
    f824:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f828:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f82c:	85 c0                	test   %eax,%eax
    f82e:	74 5a                	je     f88a <bread_page+0x117>
			wait_on_buffer(bh[i]);						// 等待缓冲块解锁(若被上锁的话).
    f830:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f834:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f838:	83 ec 0c             	sub    $0xc,%esp
    f83b:	50                   	push   %eax
    f83c:	e8 ed f6 ff ff       	call   ef2e <wait_on_buffer>
    f841:	83 c4 10             	add    $0x10,%esp
			if (bh[i]->b_uptodate)						// 若缓冲块中数据有效的话则复制.
    f844:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f848:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f84c:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
    f850:	84 c0                	test   %al,%al
    f852:	74 22                	je     f876 <bread_page+0x103>
				COPYBLK((unsigned long) bh[i]->b_data, address);
    f854:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f858:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f85c:	8b 00                	mov    (%eax),%eax
    f85e:	89 c3                	mov    %eax,%ebx
    f860:	ba 00 01 00 00       	mov    $0x100,%edx
    f865:	8b 44 24 30          	mov    0x30(%esp),%eax
    f869:	89 d1                	mov    %edx,%ecx
    f86b:	89 de                	mov    %ebx,%esi
    f86d:	89 c7                	mov    %eax,%edi
    f86f:	fc                   	cld    
    f870:	57                   	push   %edi
    f871:	56                   	push   %esi
    f872:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
    f874:	5e                   	pop    %esi
    f875:	5f                   	pop    %edi
			brelse(bh[i]);								// 释放该缓冲区.
    f876:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f87a:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f87e:	83 ec 0c             	sub    $0xc,%esp
    f881:	50                   	push   %eax
    f882:	e8 09 fe ff ff       	call   f690 <brelse>
    f887:	83 c4 10             	add    $0x10,%esp
					ll_rw_block(READ, bh[i]);
		} else
			bh[i] = NULL;
	// 随后将4个缓冲块上的内容顺序复制到指定地址处.在进行复制(使用)缓冲块之前我们先要睡眠等待缓冲块解锁(若被上锁的话).另外,
	// 因为可能睡眠过了,所以我们还需要在复制之前再检查一下缓冲块中的数据是否是有效的.复制完后我们还需要释放缓冲块.
	for (i = 0 ; i < 4 ; i++, address += BLOCK_SIZE)
    f88a:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
    f88f:	81 44 24 30 00 04 00 	addl   $0x400,0x30(%esp)
    f896:	00 
    f897:	83 7c 24 1c 03       	cmpl   $0x3,0x1c(%esp)
    f89c:	7e 86                	jle    f824 <bread_page+0xb1>
			wait_on_buffer(bh[i]);						// 等待缓冲块解锁(若被上锁的话).
			if (bh[i]->b_uptodate)						// 若缓冲块中数据有效的话则复制.
				COPYBLK((unsigned long) bh[i]->b_data, address);
			brelse(bh[i]);								// 释放该缓冲区.
		}
}
    f89e:	90                   	nop
    f89f:	83 c4 20             	add    $0x20,%esp
    f8a2:	5b                   	pop    %ebx
    f8a3:	5e                   	pop    %esi
    f8a4:	5f                   	pop    %edi
    f8a5:	c3                   	ret    

0000f8a6 <breada>:
 * OK,breada可以象bread一样使用,但会另外预读一些块.该函数参数列表需要使用一个负数来表明参数列表的结束.
 */
// 从指定设备读取指定的一些块.
// 函数参数个数可变,是一系列指定的块号.成功时返回第1块的缓冲块头指针,否则返回NULL.
struct buffer_head * breada(int dev, int first, ...)
{
    f8a6:	83 ec 1c             	sub    $0x1c,%esp
	va_list args;
	struct buffer_head * bh, *tmp;

	// 首先取可变参数表中第1个参数(块号).接着从调整缓冲区中取指定设备和块号的缓冲块.如果该缓冲块数据无效(更新标志未置位),则
	// 发出读设备数据块请求.
	va_start(args, first);
    f8a9:	8d 44 24 24          	lea    0x24(%esp),%eax
    f8ad:	83 c0 04             	add    $0x4,%eax
    f8b0:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (!(bh = getblk(dev, first)))
    f8b4:	8b 44 24 24          	mov    0x24(%esp),%eax
    f8b8:	83 ec 08             	sub    $0x8,%esp
    f8bb:	50                   	push   %eax
    f8bc:	ff 74 24 2c          	pushl  0x2c(%esp)
    f8c0:	e8 12 fc ff ff       	call   f4d7 <getblk>
    f8c5:	83 c4 10             	add    $0x10,%esp
    f8c8:	89 44 24 08          	mov    %eax,0x8(%esp)
    f8cc:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    f8d1:	75 10                	jne    f8e3 <breada+0x3d>
		panic("bread: getblk returned NULL\n");
    f8d3:	83 ec 0c             	sub    $0xc,%esp
    f8d6:	68 72 3a 02 00       	push   $0x23a72
    f8db:	e8 28 93 ff ff       	call   8c08 <panic>
    f8e0:	83 c4 10             	add    $0x10,%esp
	if (!bh->b_uptodate)
    f8e3:	8b 44 24 08          	mov    0x8(%esp),%eax
    f8e7:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
    f8eb:	84 c0                	test   %al,%al
    f8ed:	75 61                	jne    f950 <breada+0xaa>
		ll_rw_block(READ, bh);
    f8ef:	83 ec 08             	sub    $0x8,%esp
    f8f2:	ff 74 24 10          	pushl  0x10(%esp)
    f8f6:	6a 00                	push   $0x0
    f8f8:	e8 f1 70 00 00       	call   169ee <ll_rw_block>
    f8fd:	83 c4 10             	add    $0x10,%esp
	// 然后顺序取可变参数表中其他预读块号,并作与上面同样处理,但不引用.注意,336行上有一个bug.其中的bh应该是tmp.这个bug直到在0.96
	// 版的内核代码中才被纠正过来.另外,因为这里是预读随后的数据块,只需读进调整缓冲区但并不马上就使用,所以第337行语句需要将其引用计数
	// 递减释放掉该块(因为getblk()函数会增加缓冲块引用计数值).
	while ((first = va_arg(args, int)) >= 0) {
    f900:	eb 4e                	jmp    f950 <breada+0xaa>
		tmp = getblk(dev, first);
    f902:	8b 44 24 24          	mov    0x24(%esp),%eax
    f906:	83 ec 08             	sub    $0x8,%esp
    f909:	50                   	push   %eax
    f90a:	ff 74 24 2c          	pushl  0x2c(%esp)
    f90e:	e8 c4 fb ff ff       	call   f4d7 <getblk>
    f913:	83 c4 10             	add    $0x10,%esp
    f916:	89 44 24 04          	mov    %eax,0x4(%esp)
		if (tmp) {
    f91a:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    f91f:	74 2f                	je     f950 <breada+0xaa>
			if (!tmp->b_uptodate)
    f921:	8b 44 24 04          	mov    0x4(%esp),%eax
    f925:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
    f929:	84 c0                	test   %al,%al
    f92b:	75 11                	jne    f93e <breada+0x98>
				ll_rw_block(READA, tmp);
    f92d:	83 ec 08             	sub    $0x8,%esp
    f930:	ff 74 24 0c          	pushl  0xc(%esp)
    f934:	6a 02                	push   $0x2
    f936:	e8 b3 70 00 00       	call   169ee <ll_rw_block>
    f93b:	83 c4 10             	add    $0x10,%esp
			tmp->b_count--;					// 暂时释放掉该预读块.
    f93e:	8b 44 24 04          	mov    0x4(%esp),%eax
    f942:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    f946:	8d 50 ff             	lea    -0x1(%eax),%edx
    f949:	8b 44 24 04          	mov    0x4(%esp),%eax
    f94d:	88 50 0c             	mov    %dl,0xc(%eax)
	if (!bh->b_uptodate)
		ll_rw_block(READ, bh);
	// 然后顺序取可变参数表中其他预读块号,并作与上面同样处理,但不引用.注意,336行上有一个bug.其中的bh应该是tmp.这个bug直到在0.96
	// 版的内核代码中才被纠正过来.另外,因为这里是预读随后的数据块,只需读进调整缓冲区但并不马上就使用,所以第337行语句需要将其引用计数
	// 递减释放掉该块(因为getblk()函数会增加缓冲块引用计数值).
	while ((first = va_arg(args, int)) >= 0) {
    f950:	83 44 24 0c 04       	addl   $0x4,0xc(%esp)
    f955:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f959:	8b 40 fc             	mov    -0x4(%eax),%eax
    f95c:	89 44 24 24          	mov    %eax,0x24(%esp)
    f960:	8b 44 24 24          	mov    0x24(%esp),%eax
    f964:	85 c0                	test   %eax,%eax
    f966:	79 9a                	jns    f902 <breada+0x5c>
		}
	}
	// 此时可变参数表中所有参数处理完毕.于是等待第1个缓冲区解锁(如果已被上锁).在等待退出之后如果缓冲区中数据仍然有效,则返回缓冲区头指针
	// 退出.否则释放该缓冲区返回NULL,退出.
	va_end(args);
	wait_on_buffer(bh);
    f968:	83 ec 0c             	sub    $0xc,%esp
    f96b:	ff 74 24 14          	pushl  0x14(%esp)
    f96f:	e8 ba f5 ff ff       	call   ef2e <wait_on_buffer>
    f974:	83 c4 10             	add    $0x10,%esp
	if (bh->b_uptodate)
    f977:	8b 44 24 08          	mov    0x8(%esp),%eax
    f97b:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
    f97f:	84 c0                	test   %al,%al
    f981:	74 06                	je     f989 <breada+0xe3>
		return bh;
    f983:	8b 44 24 08          	mov    0x8(%esp),%eax
    f987:	eb 14                	jmp    f99d <breada+0xf7>
	brelse(bh);
    f989:	83 ec 0c             	sub    $0xc,%esp
    f98c:	ff 74 24 14          	pushl  0x14(%esp)
    f990:	e8 fb fc ff ff       	call   f690 <brelse>
    f995:	83 c4 10             	add    $0x10,%esp
	return (NULL);
    f998:	b8 00 00 00 00       	mov    $0x0,%eax
}
    f99d:	83 c4 1c             	add    $0x1c,%esp
    f9a0:	c3                   	ret    

0000f9a1 <buffer_init>:

// 缓冲区初始化函数
// 参数buffer_end是缓冲区内存末端.对于具有16M内存的系统,缓冲区末端被设置为4MB.对于有8MB内存的系统,缓冲区末端被设置2MB.该函数从缓冲区开始位置
// start_buffer处和缓冲区末端buffer_end处分别同时设置(初始化)缓冲块头结构和对应的数据块.直到缓冲区中所有内存被分配完毕.
void buffer_init(long buffer_end)
{
    f9a1:	83 ec 10             	sub    $0x10,%esp
	struct buffer_head * h = start_buffer;
    f9a4:	a1 64 e3 02 00       	mov    0x2e364,%eax
    f9a9:	89 44 24 0c          	mov    %eax,0xc(%esp)
	void * b;
	int i;

	// 首先根据参数提供的缓冲区高端位置确定实际缓冲区高端位置b.如果缓冲区高端等于1MB,则因为从640KB-1MB被显示内存和BIOS占用,所以实际可用缓冲区内存
	// 高端位置应该是640KB.否则缓冲区内存高端一定大于1MB.
	if (buffer_end == 1 << 20)
    f9ad:	81 7c 24 14 00 00 10 	cmpl   $0x100000,0x14(%esp)
    f9b4:	00 
    f9b5:	75 0d                	jne    f9c4 <buffer_init+0x23>
		b = (void *) (640 * 1024);
    f9b7:	c7 44 24 08 00 00 0a 	movl   $0xa0000,0x8(%esp)
    f9be:	00 
    f9bf:	e9 a2 00 00 00       	jmp    fa66 <buffer_init+0xc5>
	else
		b = (void *) buffer_end;
    f9c4:	8b 44 24 14          	mov    0x14(%esp),%eax
    f9c8:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 这段代码用于初始化缓冲区,建立空闲缓冲块循环链表,并获取系统中缓冲块数目.操作的过程是从缓冲区高端开始划分1KB大小的缓冲块,与此同时在缓冲区低端建立
	// 描述该缓冲块的结构buffer_head,并将这些buffer_head组成双向链表.
	// h是指向缓冲头结构的指针,而h+1是指向内存地址连续的下一个缓冲头地址,也可以说是指向h缓冲有头的末端外.为了保证有足够长度的内存来存储一个缓冲头结构,
	// 需要b所指向的内存块地址>=h缓冲头的末端,即要求>=h+1.
	while ( (b -= BLOCK_SIZE) >= ((void *) (h + 1)) ) {
    f9cc:	e9 95 00 00 00       	jmp    fa66 <buffer_init+0xc5>
		h->b_dev = 0;								// 使用该缓冲块的设备号.
    f9d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f9d5:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		h->b_dirt = 0;								// 脏标志,即缓冲块修改标志.
    f9db:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f9df:	c6 40 0b 00          	movb   $0x0,0xb(%eax)
		h->b_count = 0;								// 缓冲块引用计数.
    f9e3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f9e7:	c6 40 0c 00          	movb   $0x0,0xc(%eax)
		h->b_lock = 0;								// 缓冲块锁定标志.
    f9eb:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f9ef:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
		h->b_uptodate = 0;							// 缓冲块更新标志(或称数据有效标志).
    f9f3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f9f7:	c6 40 0a 00          	movb   $0x0,0xa(%eax)
		h->b_wait = NULL;							// 指向等待该缓冲块解锁的进程.
    f9fb:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f9ff:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
		h->b_next = NULL;							// 指向具有相同hash值的下一个缓冲头.
    fa06:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fa0a:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
		h->b_prev = NULL;							// 指向具有相同hash值的前一个缓冲头.
    fa11:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fa15:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
		h->b_data = (char *) b;						// 指向对应缓冲块数据块(1024字节).
    fa1c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fa20:	8b 54 24 08          	mov    0x8(%esp),%edx
    fa24:	89 10                	mov    %edx,(%eax)
		h->b_prev_free = h - 1;						// 指向链表中前一项.
    fa26:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fa2a:	8d 50 dc             	lea    -0x24(%eax),%edx
    fa2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fa31:	89 50 1c             	mov    %edx,0x1c(%eax)
		h->b_next_free = h + 1;						// 指向链表中下一项.
    fa34:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fa38:	8d 50 24             	lea    0x24(%eax),%edx
    fa3b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fa3f:	89 50 20             	mov    %edx,0x20(%eax)
		h++;										// h指向下一新缓冲头位置.
    fa42:	83 44 24 0c 24       	addl   $0x24,0xc(%esp)
		NR_BUFFERS++;								// 缓冲区块数累加.
    fa47:	a1 c0 10 03 00       	mov    0x310c0,%eax
    fa4c:	83 c0 01             	add    $0x1,%eax
    fa4f:	a3 c0 10 03 00       	mov    %eax,0x310c0
		if (b == (void *) 0x100000)					// 若b递减到等于1MB,则跳过384KB
    fa54:	81 7c 24 08 00 00 10 	cmpl   $0x100000,0x8(%esp)
    fa5b:	00 
    fa5c:	75 08                	jne    fa66 <buffer_init+0xc5>
			b = (void *) 0xA0000;					// 让b指向地址0xA0000(640KB)处.
    fa5e:	c7 44 24 08 00 00 0a 	movl   $0xa0000,0x8(%esp)
    fa65:	00 
		b = (void *) buffer_end;
	// 这段代码用于初始化缓冲区,建立空闲缓冲块循环链表,并获取系统中缓冲块数目.操作的过程是从缓冲区高端开始划分1KB大小的缓冲块,与此同时在缓冲区低端建立
	// 描述该缓冲块的结构buffer_head,并将这些buffer_head组成双向链表.
	// h是指向缓冲头结构的指针,而h+1是指向内存地址连续的下一个缓冲头地址,也可以说是指向h缓冲有头的末端外.为了保证有足够长度的内存来存储一个缓冲头结构,
	// 需要b所指向的内存块地址>=h缓冲头的末端,即要求>=h+1.
	while ( (b -= BLOCK_SIZE) >= ((void *) (h + 1)) ) {
    fa66:	81 6c 24 08 00 04 00 	subl   $0x400,0x8(%esp)
    fa6d:	00 
    fa6e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fa72:	83 c0 24             	add    $0x24,%eax
    fa75:	39 44 24 08          	cmp    %eax,0x8(%esp)
    fa79:	0f 83 52 ff ff ff    	jae    f9d1 <buffer_init+0x30>
		h++;										// h指向下一新缓冲头位置.
		NR_BUFFERS++;								// 缓冲区块数累加.
		if (b == (void *) 0x100000)					// 若b递减到等于1MB,则跳过384KB
			b = (void *) 0xA0000;					// 让b指向地址0xA0000(640KB)处.
	}
	h--;											// 让h指向最后一个有效缓冲块头.
    fa7f:	83 6c 24 0c 24       	subl   $0x24,0xc(%esp)
	free_list = start_buffer;						// 让空闲链表头指向头一个缓冲块.
    fa84:	a1 64 e3 02 00       	mov    0x2e364,%eax
    fa89:	a3 c4 10 03 00       	mov    %eax,0x310c4
	free_list->b_prev_free = h;     				// 链表头的b_prev_free指向前一项（即最后一项）。
    fa8e:	a1 c4 10 03 00       	mov    0x310c4,%eax
    fa93:	8b 54 24 0c          	mov    0xc(%esp),%edx
    fa97:	89 50 1c             	mov    %edx,0x1c(%eax)
	h->b_next_free = free_list;     				// h的下一项指针指向第一项，形成一个环链。
    fa9a:	8b 15 c4 10 03 00    	mov    0x310c4,%edx
    faa0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    faa4:	89 50 20             	mov    %edx,0x20(%eax)
	// 最后初始化hash表(哈希表、散列表),置表中所有指针为NULL。
	for (i = 0; i < NR_HASH; i++)
    faa7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
    faae:	00 
    faaf:	eb 14                	jmp    fac5 <buffer_init+0x124>
		hash_table[i] = NULL;
    fab1:	8b 44 24 04          	mov    0x4(%esp),%eax
    fab5:	c7 04 85 40 07 04 00 	movl   $0x0,0x40740(,%eax,4)
    fabc:	00 00 00 00 
	h--;											// 让h指向最后一个有效缓冲块头.
	free_list = start_buffer;						// 让空闲链表头指向头一个缓冲块.
	free_list->b_prev_free = h;     				// 链表头的b_prev_free指向前一项（即最后一项）。
	h->b_next_free = free_list;     				// h的下一项指针指向第一项，形成一个环链。
	// 最后初始化hash表(哈希表、散列表),置表中所有指针为NULL。
	for (i = 0; i < NR_HASH; i++)
    fac0:	83 44 24 04 01       	addl   $0x1,0x4(%esp)
    fac5:	81 7c 24 04 32 01 00 	cmpl   $0x132,0x4(%esp)
    facc:	00 
    facd:	7e e2                	jle    fab1 <buffer_init+0x110>
		hash_table[i] = NULL;
}
    facf:	90                   	nop
    fad0:	83 c4 10             	add    $0x10,%esp
    fad3:	c3                   	ret    

0000fad4 <lock_super>:
//　以下３个函数(lock_super(),free_super()和wait_on_super())的作用与inode.c文件中头３个函数的作用相同,只是这里操作的对象
//　换成了超级块.
//　锁定超级块.
//　如果超级块已被锁定,则将当前任务置为不可中断的等待状态,并添加到该超级块等待队列s_wait中.直到该超级块解锁并明确地唤醒本任务.然后对其上锁.
static void lock_super(struct super_block * sb)
{
    fad4:	83 ec 0c             	sub    $0xc,%esp
	cli();													//　关中断
    fad7:	fa                   	cli    
	while (sb->s_lock)										//　如果该超级块已经上锁,则睡眠等待.
    fad8:	eb 13                	jmp    faed <lock_super+0x19>
		sleep_on(&(sb->s_wait));
    fada:	8b 44 24 10          	mov    0x10(%esp),%eax
    fade:	83 c0 64             	add    $0x64,%eax
    fae1:	83 ec 0c             	sub    $0xc,%esp
    fae4:	50                   	push   %eax
    fae5:	e8 4c 76 ff ff       	call   7136 <sleep_on>
    faea:	83 c4 10             	add    $0x10,%esp
//　锁定超级块.
//　如果超级块已被锁定,则将当前任务置为不可中断的等待状态,并添加到该超级块等待队列s_wait中.直到该超级块解锁并明确地唤醒本任务.然后对其上锁.
static void lock_super(struct super_block * sb)
{
	cli();													//　关中断
	while (sb->s_lock)										//　如果该超级块已经上锁,则睡眠等待.
    faed:	8b 44 24 10          	mov    0x10(%esp),%eax
    faf1:	0f b6 40 68          	movzbl 0x68(%eax),%eax
    faf5:	84 c0                	test   %al,%al
    faf7:	75 e1                	jne    fada <lock_super+0x6>
		sleep_on(&(sb->s_wait));
	sb->s_lock = 1;											//　给该超级块加锁(置锁定标志)
    faf9:	8b 44 24 10          	mov    0x10(%esp),%eax
    fafd:	c6 40 68 01          	movb   $0x1,0x68(%eax)
	sti();													//　开中断.
    fb01:	fb                   	sti    
}
    fb02:	90                   	nop
    fb03:	83 c4 0c             	add    $0xc,%esp
    fb06:	c3                   	ret    

0000fb07 <free_super>:

//　对指定超级块解锁
//　复位超级块的锁定标志,并明确地唤醒等待此超级块等待队列s_wait上的所有进程.
//　如果使用unlock_super这个名称则可能更妥帖.
static void free_super(struct super_block * sb)
{
    fb07:	83 ec 0c             	sub    $0xc,%esp
	cli();
    fb0a:	fa                   	cli    
	sb->s_lock = 0;											// 复位锁定标志.
    fb0b:	8b 44 24 10          	mov    0x10(%esp),%eax
    fb0f:	c6 40 68 00          	movb   $0x0,0x68(%eax)
	wake_up(&(sb->s_wait));									// 唤醒等待该超级块的进程.
    fb13:	8b 44 24 10          	mov    0x10(%esp),%eax
    fb17:	83 c0 64             	add    $0x64,%eax
    fb1a:	83 ec 0c             	sub    $0xc,%esp
    fb1d:	50                   	push   %eax
    fb1e:	e8 2c 76 ff ff       	call   714f <wake_up>
    fb23:	83 c4 10             	add    $0x10,%esp
	sti();													// wake_up()在kernel/sched.c
    fb26:	fb                   	sti    
}
    fb27:	90                   	nop
    fb28:	83 c4 0c             	add    $0xc,%esp
    fb2b:	c3                   	ret    

0000fb2c <wait_on_super>:

// 睡眠等待超级块解锁.
// 如果超级块已被锁定,则将当前任务置为不可中断的等待状态,并添加到该超级块的等待队列s_wait中.直到该超级块解锁并明确地唤醒本任务.
static void wait_on_super(struct super_block * sb)
{
    fb2c:	83 ec 0c             	sub    $0xc,%esp
	cli();
    fb2f:	fa                   	cli    
	while (sb->s_lock)										// 如果超级块已经上锁,则睡眠等待.
    fb30:	eb 13                	jmp    fb45 <wait_on_super+0x19>
		sleep_on(&(sb->s_wait));
    fb32:	8b 44 24 10          	mov    0x10(%esp),%eax
    fb36:	83 c0 64             	add    $0x64,%eax
    fb39:	83 ec 0c             	sub    $0xc,%esp
    fb3c:	50                   	push   %eax
    fb3d:	e8 f4 75 ff ff       	call   7136 <sleep_on>
    fb42:	83 c4 10             	add    $0x10,%esp
// 睡眠等待超级块解锁.
// 如果超级块已被锁定,则将当前任务置为不可中断的等待状态,并添加到该超级块的等待队列s_wait中.直到该超级块解锁并明确地唤醒本任务.
static void wait_on_super(struct super_block * sb)
{
	cli();
	while (sb->s_lock)										// 如果超级块已经上锁,则睡眠等待.
    fb45:	8b 44 24 10          	mov    0x10(%esp),%eax
    fb49:	0f b6 40 68          	movzbl 0x68(%eax),%eax
    fb4d:	84 c0                	test   %al,%al
    fb4f:	75 e1                	jne    fb32 <wait_on_super+0x6>
		sleep_on(&(sb->s_wait));
	sti();
    fb51:	fb                   	sti    
}
    fb52:	90                   	nop
    fb53:	83 c4 0c             	add    $0xc,%esp
    fb56:	c3                   	ret    

0000fb57 <get_super>:

// 取指定设备的超级块.
// 在超级块表(数组)中搜索指定设备dev的超级块结构信息.若找到则返回超级块的指针,否则返回空指针.
struct super_block * get_super(int dev)
{
    fb57:	83 ec 1c             	sub    $0x1c,%esp
	struct super_block * s;									// s是超级块数据结构指针.

	// 首先判断参数给出设备的有效性.若设备号为0则返回空指针.然后让s指向超级块数组起始处,开始搜索整个超级块数组,以寻找指定设备dev的超级块.
	// 第62行上的指针赋值语句"s = 0+super_block"等同于"s = super_block","s = &super_block[0]".
	if (!dev)
    fb5a:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    fb5f:	75 07                	jne    fb68 <get_super+0x11>
		return NULL;
    fb61:	b8 00 00 00 00       	mov    $0x0,%eax
    fb66:	eb 60                	jmp    fbc8 <get_super+0x71>
	s = 0 + super_block;
    fb68:	c7 44 24 0c 20 0c 04 	movl   $0x40c20,0xc(%esp)
    fb6f:	00 
	while (s < NR_SUPER + super_block)
    fb70:	eb 46                	jmp    fbb8 <get_super+0x61>
		// 如果当前搜索项是指定设备的超级块,即该超级块的设备号字段值与函数参数指定的相同,则先等待该超级块解锁(若已被其他进程上锁的话).在等待期间,
		// 该超级块项有可能被其他设备使用,因此等待返回之后需再判断一次是否是指定设备的超级块,如果是则返回该超级块的指针.否则就重新对超级块数组再
		// 搜索一遍,因此此时s需重又指向超级块数组开始处.
		if (s->s_dev == dev) {
    fb72:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fb76:	0f b7 40 54          	movzwl 0x54(%eax),%eax
    fb7a:	0f b7 c0             	movzwl %ax,%eax
    fb7d:	3b 44 24 20          	cmp    0x20(%esp),%eax
    fb81:	75 30                	jne    fbb3 <get_super+0x5c>
			wait_on_super(s);
    fb83:	83 ec 0c             	sub    $0xc,%esp
    fb86:	ff 74 24 18          	pushl  0x18(%esp)
    fb8a:	e8 9d ff ff ff       	call   fb2c <wait_on_super>
    fb8f:	83 c4 10             	add    $0x10,%esp
			if (s->s_dev == dev)
    fb92:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fb96:	0f b7 40 54          	movzwl 0x54(%eax),%eax
    fb9a:	0f b7 c0             	movzwl %ax,%eax
    fb9d:	3b 44 24 20          	cmp    0x20(%esp),%eax
    fba1:	75 06                	jne    fba9 <get_super+0x52>
				return s;
    fba3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fba7:	eb 1f                	jmp    fbc8 <get_super+0x71>
			s = 0 + super_block;
    fba9:	c7 44 24 0c 20 0c 04 	movl   $0x40c20,0xc(%esp)
    fbb0:	00 
    fbb1:	eb 05                	jmp    fbb8 <get_super+0x61>
		// 如果当前搜索项不是,则检查下一项.如果没有找到指定的超级块,则返回空指针.
		} else
			s++;
    fbb3:	83 44 24 0c 6c       	addl   $0x6c,0xc(%esp)
	// 首先判断参数给出设备的有效性.若设备号为0则返回空指针.然后让s指向超级块数组起始处,开始搜索整个超级块数组,以寻找指定设备dev的超级块.
	// 第62行上的指针赋值语句"s = 0+super_block"等同于"s = super_block","s = &super_block[0]".
	if (!dev)
		return NULL;
	s = 0 + super_block;
	while (s < NR_SUPER + super_block)
    fbb8:	b8 80 0f 04 00       	mov    $0x40f80,%eax
    fbbd:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    fbc1:	72 af                	jb     fb72 <get_super+0x1b>
				return s;
			s = 0 + super_block;
		// 如果当前搜索项不是,则检查下一项.如果没有找到指定的超级块,则返回空指针.
		} else
			s++;
	return NULL;
    fbc3:	b8 00 00 00 00       	mov    $0x0,%eax
}
    fbc8:	83 c4 1c             	add    $0x1c,%esp
    fbcb:	c3                   	ret    

0000fbcc <put_super>:

// 释放（放回）指定设备的超级块。
// 释放设备所使用的超级块数组项（置s_dev = 0），并释放该设备i节点位图和逻辑块位图所占用的高速缓冲块。如果超级块对应的
// 文件系统是根文件系统，或者其某个i节点上已经安装了其他的文件系统，则不能释放该超级块。
void put_super(int dev)
{
    fbcc:	83 ec 1c             	sub    $0x1c,%esp

	// 首先判断参数的有效性和合法性。如果指定设备是根文件系统设备，则显示警告信息“根系统盘改变了，准备生死决战吧”，并返回。
	// 然后在超级块表中寻找指定设备号的文件系统超级块。如果找不到指定设备超级块，则返回。另外，如果该超级块指明该文件系统
	// 所安装到的i节点还没有被处理过，则显示警告信息并返回。在文件系统卸载（umount）操作中，s_imount会先被置成NULL以后
	// 才会调用本函数。
	if (dev == ROOT_DEV) {
    fbcf:	a1 cc 10 03 00       	mov    0x310cc,%eax
    fbd4:	39 44 24 20          	cmp    %eax,0x20(%esp)
    fbd8:	75 15                	jne    fbef <put_super+0x23>
		printk("root diskette changed: prepare for armageddon\n\r");
    fbda:	83 ec 0c             	sub    $0xc,%esp
    fbdd:	68 90 3a 02 00       	push   $0x23a90
    fbe2:	e8 60 90 ff ff       	call   8c47 <printk>
    fbe7:	83 c4 10             	add    $0x10,%esp
		return;
    fbea:	e9 cc 00 00 00       	jmp    fcbb <put_super+0xef>
	}
	if (!(sb = get_super(dev)))
    fbef:	83 ec 0c             	sub    $0xc,%esp
    fbf2:	ff 74 24 2c          	pushl  0x2c(%esp)
    fbf6:	e8 5c ff ff ff       	call   fb57 <get_super>
    fbfb:	83 c4 10             	add    $0x10,%esp
    fbfe:	89 44 24 08          	mov    %eax,0x8(%esp)
    fc02:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    fc07:	0f 84 ad 00 00 00    	je     fcba <put_super+0xee>
		return;
	if (sb->s_imount) {
    fc0d:	8b 44 24 08          	mov    0x8(%esp),%eax
    fc11:	8b 40 5c             	mov    0x5c(%eax),%eax
    fc14:	85 c0                	test   %eax,%eax
    fc16:	74 15                	je     fc2d <put_super+0x61>
		printk("Mounted disk changed - tssk, tssk\n\r");
    fc18:	83 ec 0c             	sub    $0xc,%esp
    fc1b:	68 c0 3a 02 00       	push   $0x23ac0
    fc20:	e8 22 90 ff ff       	call   8c47 <printk>
    fc25:	83 c4 10             	add    $0x10,%esp
		return;
    fc28:	e9 8e 00 00 00       	jmp    fcbb <put_super+0xef>
	}
	// 然后在找到指定设备的超级块之后，我们先锁定该超级块，再置该超级块对应的设备号字段s_dev为0，也即释放该设备上的文件系统
	// 超级块。然后释放该超级块占用的其他内核资源，即释放该设备上文件系统i节点位图和逻辑位图在缓冲区中所占用的缓冲块。下面
	// 常数符号I_MAP_SLOTS和Z_MAP_SLOTS均等于8，用于分别指明i节点位图和逻辑块位图占用的磁盘逻辑块数。注意，若这些缓冲块
	// 内容被修改过，则需要作同步操作才能把缓冲块中的数据写入设备中。函数最后对该超级块，并返回。
	lock_super(sb);
    fc2d:	83 ec 0c             	sub    $0xc,%esp
    fc30:	ff 74 24 14          	pushl  0x14(%esp)
    fc34:	e8 9b fe ff ff       	call   fad4 <lock_super>
    fc39:	83 c4 10             	add    $0x10,%esp
	sb->s_dev = 0;                          		// 置超级块空闲。
    fc3c:	8b 44 24 08          	mov    0x8(%esp),%eax
    fc40:	66 c7 40 54 00 00    	movw   $0x0,0x54(%eax)
	for(i = 0; i < I_MAP_SLOTS; i++)
    fc46:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    fc4d:	00 
    fc4e:	eb 20                	jmp    fc70 <put_super+0xa4>
		brelse(sb->s_imap[i]);
    fc50:	8b 44 24 08          	mov    0x8(%esp),%eax
    fc54:	8b 54 24 0c          	mov    0xc(%esp),%edx
    fc58:	83 c2 04             	add    $0x4,%edx
    fc5b:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
    fc5f:	83 ec 0c             	sub    $0xc,%esp
    fc62:	50                   	push   %eax
    fc63:	e8 28 fa ff ff       	call   f690 <brelse>
    fc68:	83 c4 10             	add    $0x10,%esp
	// 超级块。然后释放该超级块占用的其他内核资源，即释放该设备上文件系统i节点位图和逻辑位图在缓冲区中所占用的缓冲块。下面
	// 常数符号I_MAP_SLOTS和Z_MAP_SLOTS均等于8，用于分别指明i节点位图和逻辑块位图占用的磁盘逻辑块数。注意，若这些缓冲块
	// 内容被修改过，则需要作同步操作才能把缓冲块中的数据写入设备中。函数最后对该超级块，并返回。
	lock_super(sb);
	sb->s_dev = 0;                          		// 置超级块空闲。
	for(i = 0; i < I_MAP_SLOTS; i++)
    fc6b:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    fc70:	83 7c 24 0c 07       	cmpl   $0x7,0xc(%esp)
    fc75:	7e d9                	jle    fc50 <put_super+0x84>
		brelse(sb->s_imap[i]);
	for(i = 0; i < Z_MAP_SLOTS; i++)
    fc77:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    fc7e:	00 
    fc7f:	eb 20                	jmp    fca1 <put_super+0xd5>
		brelse(sb->s_zmap[i]);
    fc81:	8b 44 24 08          	mov    0x8(%esp),%eax
    fc85:	8b 54 24 0c          	mov    0xc(%esp),%edx
    fc89:	83 c2 0c             	add    $0xc,%edx
    fc8c:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
    fc90:	83 ec 0c             	sub    $0xc,%esp
    fc93:	50                   	push   %eax
    fc94:	e8 f7 f9 ff ff       	call   f690 <brelse>
    fc99:	83 c4 10             	add    $0x10,%esp
	// 内容被修改过，则需要作同步操作才能把缓冲块中的数据写入设备中。函数最后对该超级块，并返回。
	lock_super(sb);
	sb->s_dev = 0;                          		// 置超级块空闲。
	for(i = 0; i < I_MAP_SLOTS; i++)
		brelse(sb->s_imap[i]);
	for(i = 0; i < Z_MAP_SLOTS; i++)
    fc9c:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    fca1:	83 7c 24 0c 07       	cmpl   $0x7,0xc(%esp)
    fca6:	7e d9                	jle    fc81 <put_super+0xb5>
		brelse(sb->s_zmap[i]);
	free_super(sb);
    fca8:	83 ec 0c             	sub    $0xc,%esp
    fcab:	ff 74 24 14          	pushl  0x14(%esp)
    fcaf:	e8 53 fe ff ff       	call   fb07 <free_super>
    fcb4:	83 c4 10             	add    $0x10,%esp
	return;
    fcb7:	90                   	nop
    fcb8:	eb 01                	jmp    fcbb <put_super+0xef>
	if (dev == ROOT_DEV) {
		printk("root diskette changed: prepare for armageddon\n\r");
		return;
	}
	if (!(sb = get_super(dev)))
		return;
    fcba:	90                   	nop
		brelse(sb->s_imap[i]);
	for(i = 0; i < Z_MAP_SLOTS; i++)
		brelse(sb->s_zmap[i]);
	free_super(sb);
	return;
}
    fcbb:	83 c4 1c             	add    $0x1c,%esp
    fcbe:	c3                   	ret    

0000fcbf <read_super>:

// 读取指定设备的超级块.
// 如果指定设备dev上的文件系统超级块已经在超级块表中,则直接返回该超级块项的指针.否则就从设备dev上读取超级块到缓冲块中,并复制到超级块表中.并
// 返回超级块指针.
static struct super_block * read_super(int dev)
{
    fcbf:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;
	int i, block;

	// 首先判断参数的有效性.如果没有指明设备,则返回空指针.然后检查该设备是否可更换过盘片(也即是否是软盘设备).如果更换过盘,则高速缓冲区有关该设备的所有
	// 缓冲块均失效,需要进行失效处理,即释放原来加载的文件系统.
	if (!dev)
    fcc2:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    fcc7:	75 0a                	jne    fcd3 <read_super+0x14>
		return NULL;
    fcc9:	b8 00 00 00 00       	mov    $0x0,%eax
    fcce:	e9 5a 03 00 00       	jmp    1002d <read_super+0x36e>
	check_disk_change(dev);
    fcd3:	83 ec 0c             	sub    $0xc,%esp
    fcd6:	ff 74 24 2c          	pushl  0x2c(%esp)
    fcda:	e8 5d f4 ff ff       	call   f13c <check_disk_change>
    fcdf:	83 c4 10             	add    $0x10,%esp
	// 如果设备的超级块已经在超级块表中,则直接返回该超级块的指针.否则,首先在超级块数组中找出一个空项(也即字段s_dev=0的项).如果数组已经占满则返回空指针.
	if (s = get_super(dev))
    fce2:	83 ec 0c             	sub    $0xc,%esp
    fce5:	ff 74 24 2c          	pushl  0x2c(%esp)
    fce9:	e8 69 fe ff ff       	call   fb57 <get_super>
    fcee:	83 c4 10             	add    $0x10,%esp
    fcf1:	89 44 24 0c          	mov    %eax,0xc(%esp)
    fcf5:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    fcfa:	74 09                	je     fd05 <read_super+0x46>
		return s;
    fcfc:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fd00:	e9 28 03 00 00       	jmp    1002d <read_super+0x36e>
	for (s = 0 + super_block ;; s++) {
    fd05:	c7 44 24 0c 20 0c 04 	movl   $0x40c20,0xc(%esp)
    fd0c:	00 
		if (s >= NR_SUPER + super_block)
    fd0d:	b8 80 0f 04 00       	mov    $0x40f80,%eax
    fd12:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    fd16:	72 0a                	jb     fd22 <read_super+0x63>
			return NULL;
    fd18:	b8 00 00 00 00       	mov    $0x0,%eax
    fd1d:	e9 0b 03 00 00       	jmp    1002d <read_super+0x36e>
		if (!s->s_dev)
    fd22:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fd26:	0f b7 40 54          	movzwl 0x54(%eax),%eax
    fd2a:	66 85 c0             	test   %ax,%ax
    fd2d:	74 07                	je     fd36 <read_super+0x77>
		return NULL;
	check_disk_change(dev);
	// 如果设备的超级块已经在超级块表中,则直接返回该超级块的指针.否则,首先在超级块数组中找出一个空项(也即字段s_dev=0的项).如果数组已经占满则返回空指针.
	if (s = get_super(dev))
		return s;
	for (s = 0 + super_block ;; s++) {
    fd2f:	83 44 24 0c 6c       	addl   $0x6c,0xc(%esp)
		if (s >= NR_SUPER + super_block)
			return NULL;
		if (!s->s_dev)
			break;
	}
    fd34:	eb d7                	jmp    fd0d <read_super+0x4e>
		return s;
	for (s = 0 + super_block ;; s++) {
		if (s >= NR_SUPER + super_block)
			return NULL;
		if (!s->s_dev)
			break;
    fd36:	90                   	nop
	}
	// 在超级块数组中找到空项之后,就将该超级块项用于指定设备dev上的文件系统.于是对该超级块结构中的内存字段进行部分初始化处理.
	s->s_dev = dev;										// 用于dev设备上的文件系统.
    fd37:	8b 44 24 20          	mov    0x20(%esp),%eax
    fd3b:	89 c2                	mov    %eax,%edx
    fd3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fd41:	66 89 50 54          	mov    %dx,0x54(%eax)
	s->s_isup = NULL;
    fd45:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fd49:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)
	s->s_imount = NULL;
    fd50:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fd54:	c7 40 5c 00 00 00 00 	movl   $0x0,0x5c(%eax)
	s->s_time = 0;
    fd5b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fd5f:	c7 40 60 00 00 00 00 	movl   $0x0,0x60(%eax)
	s->s_rd_only = 0;
    fd66:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fd6a:	c6 40 69 00          	movb   $0x0,0x69(%eax)
	s->s_dirt = 0;
    fd6e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fd72:	c6 40 6a 00          	movb   $0x0,0x6a(%eax)
	//　然后锁定该超级块,并从设备上读取超级块信息到bh指向的缓冲块中.超级块位于块设备的第２个逻辑块(１号块)中,(第１个是引导盘块).如果读超级块操作失败,则释放
	//　上面选定的超级块数组中的项(即置s_dev=0),并解锁该项,返回空指针退出.否则就将设备上读取的超级块信息从缓冲块数据区复制到超级块数组相应项结构中.并释放存放
	//　读取信息的高速缓冲块.
	lock_super(s);
    fd76:	83 ec 0c             	sub    $0xc,%esp
    fd79:	ff 74 24 18          	pushl  0x18(%esp)
    fd7d:	e8 52 fd ff ff       	call   fad4 <lock_super>
    fd82:	83 c4 10             	add    $0x10,%esp
	if (!(bh = bread(dev, 1))) {
    fd85:	83 ec 08             	sub    $0x8,%esp
    fd88:	6a 01                	push   $0x1
    fd8a:	ff 74 24 2c          	pushl  0x2c(%esp)
    fd8e:	e8 53 f9 ff ff       	call   f6e6 <bread>
    fd93:	83 c4 10             	add    $0x10,%esp
    fd96:	89 04 24             	mov    %eax,(%esp)
    fd99:	83 3c 24 00          	cmpl   $0x0,(%esp)
    fd9d:	75 23                	jne    fdc2 <read_super+0x103>
		s->s_dev = 0;
    fd9f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fda3:	66 c7 40 54 00 00    	movw   $0x0,0x54(%eax)
		free_super(s);
    fda9:	83 ec 0c             	sub    $0xc,%esp
    fdac:	ff 74 24 18          	pushl  0x18(%esp)
    fdb0:	e8 52 fd ff ff       	call   fb07 <free_super>
    fdb5:	83 c4 10             	add    $0x10,%esp
		return NULL;
    fdb8:	b8 00 00 00 00       	mov    $0x0,%eax
    fdbd:	e9 6b 02 00 00       	jmp    1002d <read_super+0x36e>
	}
	*((struct d_super_block *) s) =
		*((struct d_super_block *) bh->b_data);
    fdc2:	8b 04 24             	mov    (%esp),%eax
    fdc5:	8b 10                	mov    (%eax),%edx
	if (!(bh = bread(dev, 1))) {
		s->s_dev = 0;
		free_super(s);
		return NULL;
	}
	*((struct d_super_block *) s) =
    fdc7:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fdcb:	8b 0a                	mov    (%edx),%ecx
    fdcd:	89 08                	mov    %ecx,(%eax)
    fdcf:	8b 4a 04             	mov    0x4(%edx),%ecx
    fdd2:	89 48 04             	mov    %ecx,0x4(%eax)
    fdd5:	8b 4a 08             	mov    0x8(%edx),%ecx
    fdd8:	89 48 08             	mov    %ecx,0x8(%eax)
    fddb:	8b 4a 0c             	mov    0xc(%edx),%ecx
    fdde:	89 48 0c             	mov    %ecx,0xc(%eax)
    fde1:	8b 52 10             	mov    0x10(%edx),%edx
    fde4:	89 50 10             	mov    %edx,0x10(%eax)
		*((struct d_super_block *) bh->b_data);
	brelse(bh);
    fde7:	83 ec 0c             	sub    $0xc,%esp
    fdea:	ff 74 24 0c          	pushl  0xc(%esp)
    fdee:	e8 9d f8 ff ff       	call   f690 <brelse>
    fdf3:	83 c4 10             	add    $0x10,%esp
	// 现在我们从设备dev上得到了文件系统的超级块,于是开始检查这个超级块的有效性并从设备上读取i节点位图和逻辑块位图等信息.如果所读取的超级块的文件系统魔数字段不对,
	// 说明设备上不是正确的文件系统,因此向上面一样,释放上面选定的超级块数组中的项,并解锁该项,返回空指针退出.
	// 对于该版Linux内核,只支持MINIX文件系统1.0版本,其魔数是0x137f.
	if (s->s_magic != SUPER_MAGIC) {
    fdf6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fdfa:	0f b7 40 10          	movzwl 0x10(%eax),%eax
    fdfe:	66 3d 7f 13          	cmp    $0x137f,%ax
    fe02:	74 23                	je     fe27 <read_super+0x168>
		s->s_dev = 0;
    fe04:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fe08:	66 c7 40 54 00 00    	movw   $0x0,0x54(%eax)
		free_super(s);
    fe0e:	83 ec 0c             	sub    $0xc,%esp
    fe11:	ff 74 24 18          	pushl  0x18(%esp)
    fe15:	e8 ed fc ff ff       	call   fb07 <free_super>
    fe1a:	83 c4 10             	add    $0x10,%esp
		return NULL;
    fe1d:	b8 00 00 00 00       	mov    $0x0,%eax
    fe22:	e9 06 02 00 00       	jmp    1002d <read_super+0x36e>
	}
	// 下面开始读取设备上i节点位图和逻辑块位图数据.首先初始化内存超级块结构中位图空间.然后从设备上读取i节点位图和逻辑块位图信息,并存放在超级块对应字段中.i节点位图
	// 保存在设备上2号块开始的逻辑块中,共占用s_imap_blocks个块.逻辑块位图在i节点位图所在块的后续块中,共占用s_zmap_blocks个块.
	for (i = 0; i < I_MAP_SLOTS; i++)					// 初始化操作.
    fe27:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    fe2e:	00 
    fe2f:	eb 18                	jmp    fe49 <read_super+0x18a>
		s->s_imap[i] = NULL;
    fe31:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fe35:	8b 54 24 08          	mov    0x8(%esp),%edx
    fe39:	83 c2 04             	add    $0x4,%edx
    fe3c:	c7 44 90 04 00 00 00 	movl   $0x0,0x4(%eax,%edx,4)
    fe43:	00 
		free_super(s);
		return NULL;
	}
	// 下面开始读取设备上i节点位图和逻辑块位图数据.首先初始化内存超级块结构中位图空间.然后从设备上读取i节点位图和逻辑块位图信息,并存放在超级块对应字段中.i节点位图
	// 保存在设备上2号块开始的逻辑块中,共占用s_imap_blocks个块.逻辑块位图在i节点位图所在块的后续块中,共占用s_zmap_blocks个块.
	for (i = 0; i < I_MAP_SLOTS; i++)					// 初始化操作.
    fe44:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    fe49:	83 7c 24 08 07       	cmpl   $0x7,0x8(%esp)
    fe4e:	7e e1                	jle    fe31 <read_super+0x172>
		s->s_imap[i] = NULL;
	for (i = 0; i < Z_MAP_SLOTS; i++)
    fe50:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    fe57:	00 
    fe58:	eb 18                	jmp    fe72 <read_super+0x1b3>
		s->s_zmap[i] = NULL;
    fe5a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fe5e:	8b 54 24 08          	mov    0x8(%esp),%edx
    fe62:	83 c2 0c             	add    $0xc,%edx
    fe65:	c7 44 90 04 00 00 00 	movl   $0x0,0x4(%eax,%edx,4)
    fe6c:	00 
	}
	// 下面开始读取设备上i节点位图和逻辑块位图数据.首先初始化内存超级块结构中位图空间.然后从设备上读取i节点位图和逻辑块位图信息,并存放在超级块对应字段中.i节点位图
	// 保存在设备上2号块开始的逻辑块中,共占用s_imap_blocks个块.逻辑块位图在i节点位图所在块的后续块中,共占用s_zmap_blocks个块.
	for (i = 0; i < I_MAP_SLOTS; i++)					// 初始化操作.
		s->s_imap[i] = NULL;
	for (i = 0; i < Z_MAP_SLOTS; i++)
    fe6d:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    fe72:	83 7c 24 08 07       	cmpl   $0x7,0x8(%esp)
    fe77:	7e e1                	jle    fe5a <read_super+0x19b>
		s->s_zmap[i] = NULL;
	block = 2;
    fe79:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
    fe80:	00 
	// 从第二逻辑块号开始读取i节点位图
	for (i = 0 ; i < s->s_imap_blocks ; i++)			// 读取设备中i节点位图.
    fe81:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    fe88:	00 
    fe89:	eb 41                	jmp    fecc <read_super+0x20d>
		if (s->s_imap[i] = bread(dev, block))
    fe8b:	83 ec 08             	sub    $0x8,%esp
    fe8e:	ff 74 24 0c          	pushl  0xc(%esp)
    fe92:	ff 74 24 2c          	pushl  0x2c(%esp)
    fe96:	e8 4b f8 ff ff       	call   f6e6 <bread>
    fe9b:	83 c4 10             	add    $0x10,%esp
    fe9e:	89 c1                	mov    %eax,%ecx
    fea0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fea4:	8b 54 24 08          	mov    0x8(%esp),%edx
    fea8:	83 c2 04             	add    $0x4,%edx
    feab:	89 4c 90 04          	mov    %ecx,0x4(%eax,%edx,4)
    feaf:	8b 44 24 0c          	mov    0xc(%esp),%eax
    feb3:	8b 54 24 08          	mov    0x8(%esp),%edx
    feb7:	83 c2 04             	add    $0x4,%edx
    feba:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
    febe:	85 c0                	test   %eax,%eax
    fec0:	74 1d                	je     fedf <read_super+0x220>
			block++;
    fec2:	83 44 24 04 01       	addl   $0x1,0x4(%esp)
		s->s_imap[i] = NULL;
	for (i = 0; i < Z_MAP_SLOTS; i++)
		s->s_zmap[i] = NULL;
	block = 2;
	// 从第二逻辑块号开始读取i节点位图
	for (i = 0 ; i < s->s_imap_blocks ; i++)			// 读取设备中i节点位图.
    fec7:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    fecc:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fed0:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    fed4:	0f b7 c0             	movzwl %ax,%eax
    fed7:	3b 44 24 08          	cmp    0x8(%esp),%eax
    fedb:	7f ae                	jg     fe8b <read_super+0x1cc>
    fedd:	eb 01                	jmp    fee0 <read_super+0x221>
		if (s->s_imap[i] = bread(dev, block))
			block++;
		else
			break;
    fedf:	90                   	nop
	// 从i节点位图之后开始读取逻辑块位图
	for (i = 0 ; i < s->s_zmap_blocks ; i++)			// 读取设备中逻辑块位图.
    fee0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    fee7:	00 
    fee8:	eb 41                	jmp    ff2b <read_super+0x26c>
		if (s->s_zmap[i] = bread(dev, block))
    feea:	83 ec 08             	sub    $0x8,%esp
    feed:	ff 74 24 0c          	pushl  0xc(%esp)
    fef1:	ff 74 24 2c          	pushl  0x2c(%esp)
    fef5:	e8 ec f7 ff ff       	call   f6e6 <bread>
    fefa:	83 c4 10             	add    $0x10,%esp
    fefd:	89 c1                	mov    %eax,%ecx
    feff:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ff03:	8b 54 24 08          	mov    0x8(%esp),%edx
    ff07:	83 c2 0c             	add    $0xc,%edx
    ff0a:	89 4c 90 04          	mov    %ecx,0x4(%eax,%edx,4)
    ff0e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ff12:	8b 54 24 08          	mov    0x8(%esp),%edx
    ff16:	83 c2 0c             	add    $0xc,%edx
    ff19:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
    ff1d:	85 c0                	test   %eax,%eax
    ff1f:	74 1d                	je     ff3e <read_super+0x27f>
			block++;
    ff21:	83 44 24 04 01       	addl   $0x1,0x4(%esp)
		if (s->s_imap[i] = bread(dev, block))
			block++;
		else
			break;
	// 从i节点位图之后开始读取逻辑块位图
	for (i = 0 ; i < s->s_zmap_blocks ; i++)			// 读取设备中逻辑块位图.
    ff26:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    ff2b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ff2f:	0f b7 40 06          	movzwl 0x6(%eax),%eax
    ff33:	0f b7 c0             	movzwl %ax,%eax
    ff36:	3b 44 24 08          	cmp    0x8(%esp),%eax
    ff3a:	7f ae                	jg     feea <read_super+0x22b>
    ff3c:	eb 01                	jmp    ff3f <read_super+0x280>
		if (s->s_zmap[i] = bread(dev, block))
			block++;
		else
			break;
    ff3e:	90                   	nop
	// 如果读出的位图个数不等于位图应该占有的逻辑块数,说明文件系统位图信息有问题,超级块初始化失败.因此只能释放前面申请并占用的所有资源,即释放i节点位图和逻辑块位图占用
	// 的高速缓冲块,释放上面选定的超级块数组项,解锁该超级块项,并返回空指针退出.
	if (block != 2 + s->s_imap_blocks + s->s_zmap_blocks) {
    ff3f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ff43:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    ff47:	0f b7 c0             	movzwl %ax,%eax
    ff4a:	8d 50 02             	lea    0x2(%eax),%edx
    ff4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ff51:	0f b7 40 06          	movzwl 0x6(%eax),%eax
    ff55:	0f b7 c0             	movzwl %ax,%eax
    ff58:	01 d0                	add    %edx,%eax
    ff5a:	3b 44 24 04          	cmp    0x4(%esp),%eax
    ff5e:	0f 84 82 00 00 00    	je     ffe6 <read_super+0x327>
		for(i = 0; i < I_MAP_SLOTS; i++)				// 释放位图占用的高速缓冲块.
    ff64:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    ff6b:	00 
    ff6c:	eb 20                	jmp    ff8e <read_super+0x2cf>
			brelse(s->s_imap[i]);
    ff6e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ff72:	8b 54 24 08          	mov    0x8(%esp),%edx
    ff76:	83 c2 04             	add    $0x4,%edx
    ff79:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
    ff7d:	83 ec 0c             	sub    $0xc,%esp
    ff80:	50                   	push   %eax
    ff81:	e8 0a f7 ff ff       	call   f690 <brelse>
    ff86:	83 c4 10             	add    $0x10,%esp
		else
			break;
	// 如果读出的位图个数不等于位图应该占有的逻辑块数,说明文件系统位图信息有问题,超级块初始化失败.因此只能释放前面申请并占用的所有资源,即释放i节点位图和逻辑块位图占用
	// 的高速缓冲块,释放上面选定的超级块数组项,解锁该超级块项,并返回空指针退出.
	if (block != 2 + s->s_imap_blocks + s->s_zmap_blocks) {
		for(i = 0; i < I_MAP_SLOTS; i++)				// 释放位图占用的高速缓冲块.
    ff89:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    ff8e:	83 7c 24 08 07       	cmpl   $0x7,0x8(%esp)
    ff93:	7e d9                	jle    ff6e <read_super+0x2af>
			brelse(s->s_imap[i]);
		for(i = 0; i < Z_MAP_SLOTS; i++)
    ff95:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    ff9c:	00 
    ff9d:	eb 20                	jmp    ffbf <read_super+0x300>
			brelse(s->s_zmap[i]);
    ff9f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ffa3:	8b 54 24 08          	mov    0x8(%esp),%edx
    ffa7:	83 c2 0c             	add    $0xc,%edx
    ffaa:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
    ffae:	83 ec 0c             	sub    $0xc,%esp
    ffb1:	50                   	push   %eax
    ffb2:	e8 d9 f6 ff ff       	call   f690 <brelse>
    ffb7:	83 c4 10             	add    $0x10,%esp
	// 如果读出的位图个数不等于位图应该占有的逻辑块数,说明文件系统位图信息有问题,超级块初始化失败.因此只能释放前面申请并占用的所有资源,即释放i节点位图和逻辑块位图占用
	// 的高速缓冲块,释放上面选定的超级块数组项,解锁该超级块项,并返回空指针退出.
	if (block != 2 + s->s_imap_blocks + s->s_zmap_blocks) {
		for(i = 0; i < I_MAP_SLOTS; i++)				// 释放位图占用的高速缓冲块.
			brelse(s->s_imap[i]);
		for(i = 0; i < Z_MAP_SLOTS; i++)
    ffba:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    ffbf:	83 7c 24 08 07       	cmpl   $0x7,0x8(%esp)
    ffc4:	7e d9                	jle    ff9f <read_super+0x2e0>
			brelse(s->s_zmap[i]);
		s->s_dev = 0;									// 释放选定的超级块数组项.
    ffc6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ffca:	66 c7 40 54 00 00    	movw   $0x0,0x54(%eax)
		free_super(s);									// 解锁该超级块项.
    ffd0:	83 ec 0c             	sub    $0xc,%esp
    ffd3:	ff 74 24 18          	pushl  0x18(%esp)
    ffd7:	e8 2b fb ff ff       	call   fb07 <free_super>
    ffdc:	83 c4 10             	add    $0x10,%esp
		return NULL;
    ffdf:	b8 00 00 00 00       	mov    $0x0,%eax
    ffe4:	eb 47                	jmp    1002d <read_super+0x36e>
	}
	// 否则一切成功.另外,由于对于申请空闲i节点的函数来讲,如果设备所有的i节点已经全被使用,则查找函数会返回0值.因此0号i节点是不能用的,所以这里将位图中第1块的最低位设置为
	// 1,以防止文件系统分配0号i节点.同样的道理,也将逻辑块位图的最低位设置为1.最后函数解锁该超级块,并返回超级块指针.
	s->s_imap[0]->b_data[0] |= 1;
    ffe6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ffea:	8b 40 14             	mov    0x14(%eax),%eax
    ffed:	8b 00                	mov    (%eax),%eax
    ffef:	8b 54 24 0c          	mov    0xc(%esp),%edx
    fff3:	8b 52 14             	mov    0x14(%edx),%edx
    fff6:	8b 12                	mov    (%edx),%edx
    fff8:	0f b6 12             	movzbl (%edx),%edx
    fffb:	83 ca 01             	or     $0x1,%edx
    fffe:	88 10                	mov    %dl,(%eax)
	s->s_zmap[0]->b_data[0] |= 1;
   10000:	8b 44 24 0c          	mov    0xc(%esp),%eax
   10004:	8b 40 34             	mov    0x34(%eax),%eax
   10007:	8b 00                	mov    (%eax),%eax
   10009:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1000d:	8b 52 34             	mov    0x34(%edx),%edx
   10010:	8b 12                	mov    (%edx),%edx
   10012:	0f b6 12             	movzbl (%edx),%edx
   10015:	83 ca 01             	or     $0x1,%edx
   10018:	88 10                	mov    %dl,(%eax)
	free_super(s);
   1001a:	83 ec 0c             	sub    $0xc,%esp
   1001d:	ff 74 24 18          	pushl  0x18(%esp)
   10021:	e8 e1 fa ff ff       	call   fb07 <free_super>
   10026:	83 c4 10             	add    $0x10,%esp
	return s;
   10029:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   1002d:	83 c4 1c             	add    $0x1c,%esp
   10030:	c3                   	ret    

00010031 <sys_umount>:
// 卸载文件系统（系统调用）。
// 参数dev_name是文件系统所在设备的设备文件名。
// 该函数首先根据参数给出的块设备文件名获得设备号，然后复位文件系统超级块中的相应字段，释放超级块和位图占用的缓冲块，最后对该
// 设备执行高速缓冲与设备上数据的同步操作。若卸载操作成功则返回0，否则返回出错码。
int sys_umount(char * dev_name)
{
   10031:	83 ec 1c             	sub    $0x1c,%esp
	int dev;

	// 首先根据设备文件名找到对应的i节点，并取其中的设备号。设备文件所定义设备号是保存在其i节点的i_zone[0]中的。参见后面namei.c
	// 程序中系统调用sys_mknod()的代码第445行。另外，由于文件系统需要存放在块设备上，因此如果不是块设备文件，则放回刚申请的i节点
	// dev_i，返回出错码。
	if (!(inode = namei(dev_name)))
   10034:	83 ec 0c             	sub    $0xc,%esp
   10037:	ff 74 24 2c          	pushl  0x2c(%esp)
   1003b:	e8 04 35 00 00       	call   13544 <namei>
   10040:	83 c4 10             	add    $0x10,%esp
   10043:	89 44 24 0c          	mov    %eax,0xc(%esp)
   10047:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   1004c:	75 0a                	jne    10058 <sys_umount+0x27>
		return -ENOENT;
   1004e:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   10053:	e9 59 01 00 00       	jmp    101b1 <sys_umount+0x180>
	dev = inode->i_zone[0];
   10058:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1005c:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   10060:	0f b7 c0             	movzwl %ax,%eax
   10063:	89 44 24 08          	mov    %eax,0x8(%esp)
	if (!S_ISBLK(inode->i_mode)) {
   10067:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1006b:	0f b7 00             	movzwl (%eax),%eax
   1006e:	0f b7 c0             	movzwl %ax,%eax
   10071:	25 00 f0 00 00       	and    $0xf000,%eax
   10076:	3d 00 60 00 00       	cmp    $0x6000,%eax
   1007b:	74 19                	je     10096 <sys_umount+0x65>
		iput(inode);                    				// fs/inode.c。
   1007d:	83 ec 0c             	sub    $0xc,%esp
   10080:	ff 74 24 18          	pushl  0x18(%esp)
   10084:	e8 66 e6 ff ff       	call   e6ef <iput>
   10089:	83 c4 10             	add    $0x10,%esp
		return -ENOTBLK;
   1008c:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
   10091:	e9 1b 01 00 00       	jmp    101b1 <sys_umount+0x180>
	}
	// OK，现在上面为了得到设备号而取得的i节点已完成了它的使命，因此这里放回该设备文件的i节点。接着我们来检查一下卸载该文件系统的
	// 条件是否满足。如果设备上是根文件系统，则不能卸载，返回忙出错号。
	iput(inode);
   10096:	83 ec 0c             	sub    $0xc,%esp
   10099:	ff 74 24 18          	pushl  0x18(%esp)
   1009d:	e8 4d e6 ff ff       	call   e6ef <iput>
   100a2:	83 c4 10             	add    $0x10,%esp
	if (dev == ROOT_DEV)
   100a5:	a1 cc 10 03 00       	mov    0x310cc,%eax
   100aa:	39 44 24 08          	cmp    %eax,0x8(%esp)
   100ae:	75 0a                	jne    100ba <sys_umount+0x89>
		return -EBUSY;
   100b0:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
   100b5:	e9 f7 00 00 00       	jmp    101b1 <sys_umount+0x180>
	// 如果在超级块表中没有找到该设备上文件系统的超级块，或者已找到但是该设备上文件系统没有安装过，则返回出错码。如果超级块所指明
	// 被安装到的i节点并没有置位其安装标志i_mount，则显示警告信息。然后查找一下i节点表，看看是否有进程在使用该设备上的文件，如果
	// 有则返回忙出错码。
	if (!(sb = get_super(dev)) || !(sb->s_imount))
   100ba:	83 ec 0c             	sub    $0xc,%esp
   100bd:	ff 74 24 14          	pushl  0x14(%esp)
   100c1:	e8 91 fa ff ff       	call   fb57 <get_super>
   100c6:	83 c4 10             	add    $0x10,%esp
   100c9:	89 44 24 04          	mov    %eax,0x4(%esp)
   100cd:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   100d2:	74 0b                	je     100df <sys_umount+0xae>
   100d4:	8b 44 24 04          	mov    0x4(%esp),%eax
   100d8:	8b 40 5c             	mov    0x5c(%eax),%eax
   100db:	85 c0                	test   %eax,%eax
   100dd:	75 0a                	jne    100e9 <sys_umount+0xb8>
		return -ENOENT;
   100df:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   100e4:	e9 c8 00 00 00       	jmp    101b1 <sys_umount+0x180>
	if (!sb->s_imount->i_mount)
   100e9:	8b 44 24 04          	mov    0x4(%esp),%eax
   100ed:	8b 40 5c             	mov    0x5c(%eax),%eax
   100f0:	0f b6 40 39          	movzbl 0x39(%eax),%eax
   100f4:	84 c0                	test   %al,%al
   100f6:	75 10                	jne    10108 <sys_umount+0xd7>
		printk("Mounted inode has i_mount=0\n");
   100f8:	83 ec 0c             	sub    $0xc,%esp
   100fb:	68 e4 3a 02 00       	push   $0x23ae4
   10100:	e8 42 8b ff ff       	call   8c47 <printk>
   10105:	83 c4 10             	add    $0x10,%esp
	for (inode = inode_table + 0 ; inode < inode_table + NR_INODE ; inode++)
   10108:	c7 44 24 0c c0 01 03 	movl   $0x301c0,0xc(%esp)
   1010f:	00 
   10110:	eb 2a                	jmp    1013c <sys_umount+0x10b>
		if (inode->i_dev == dev && inode->i_count)
   10112:	8b 44 24 0c          	mov    0xc(%esp),%eax
   10116:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   1011a:	0f b7 c0             	movzwl %ax,%eax
   1011d:	3b 44 24 08          	cmp    0x8(%esp),%eax
   10121:	75 14                	jne    10137 <sys_umount+0x106>
   10123:	8b 44 24 0c          	mov    0xc(%esp),%eax
   10127:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   1012b:	66 85 c0             	test   %ax,%ax
   1012e:	74 07                	je     10137 <sys_umount+0x106>
				return -EBUSY;
   10130:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
   10135:	eb 7a                	jmp    101b1 <sys_umount+0x180>
	// 有则返回忙出错码。
	if (!(sb = get_super(dev)) || !(sb->s_imount))
		return -ENOENT;
	if (!sb->s_imount->i_mount)
		printk("Mounted inode has i_mount=0\n");
	for (inode = inode_table + 0 ; inode < inode_table + NR_INODE ; inode++)
   10137:	83 44 24 0c 3c       	addl   $0x3c,0xc(%esp)
   1013c:	b8 c0 10 03 00       	mov    $0x310c0,%eax
   10141:	39 44 24 0c          	cmp    %eax,0xc(%esp)
   10145:	72 cb                	jb     10112 <sys_umount+0xe1>
		if (inode->i_dev == dev && inode->i_count)
				return -EBUSY;
	// 现在该设备上文件系统的卸载条件均得到满足，因此我们可以开始实施真正的卸载操作了。首先复位被安装到的i节点的安装标志，释放该
	// i节点。然后置超级块中被安装i节点字段为空，并放回设备文件系统的根i节点，接着置超级块中被安装系统根i节点指针为空。
	sb->s_imount->i_mount = 0;
   10147:	8b 44 24 04          	mov    0x4(%esp),%eax
   1014b:	8b 40 5c             	mov    0x5c(%eax),%eax
   1014e:	c6 40 39 00          	movb   $0x0,0x39(%eax)
	iput(sb->s_imount);
   10152:	8b 44 24 04          	mov    0x4(%esp),%eax
   10156:	8b 40 5c             	mov    0x5c(%eax),%eax
   10159:	83 ec 0c             	sub    $0xc,%esp
   1015c:	50                   	push   %eax
   1015d:	e8 8d e5 ff ff       	call   e6ef <iput>
   10162:	83 c4 10             	add    $0x10,%esp
	sb->s_imount = NULL;
   10165:	8b 44 24 04          	mov    0x4(%esp),%eax
   10169:	c7 40 5c 00 00 00 00 	movl   $0x0,0x5c(%eax)
	iput(sb->s_isup);
   10170:	8b 44 24 04          	mov    0x4(%esp),%eax
   10174:	8b 40 58             	mov    0x58(%eax),%eax
   10177:	83 ec 0c             	sub    $0xc,%esp
   1017a:	50                   	push   %eax
   1017b:	e8 6f e5 ff ff       	call   e6ef <iput>
   10180:	83 c4 10             	add    $0x10,%esp
	sb->s_isup = NULL;
   10183:	8b 44 24 04          	mov    0x4(%esp),%eax
   10187:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)
	// 最后我们释放该设备上的超级块以及位图占用的高速缓冲块，并对该设备执行高速缓冲与设备上数据的同步操作。然后返回0（卸载成功）。
	put_super(dev);
   1018e:	83 ec 0c             	sub    $0xc,%esp
   10191:	ff 74 24 14          	pushl  0x14(%esp)
   10195:	e8 32 fa ff ff       	call   fbcc <put_super>
   1019a:	83 c4 10             	add    $0x10,%esp
	sync_dev(dev);
   1019d:	83 ec 0c             	sub    $0xc,%esp
   101a0:	ff 74 24 14          	pushl  0x14(%esp)
   101a4:	e8 15 ee ff ff       	call   efbe <sync_dev>
   101a9:	83 c4 10             	add    $0x10,%esp
	return 0;
   101ac:	b8 00 00 00 00       	mov    $0x0,%eax
}
   101b1:	83 c4 1c             	add    $0x1c,%esp
   101b4:	c3                   	ret    

000101b5 <sys_mount>:

// 安装文件系统（系统调用）。
// 参数dev_name是设备文件名，dir_name是安装到的目录名，rw_flag被安装文件系统的可读写标志。将被加载的地方必须是一
// 个目录名，并且对应的i节点没有被其他程序占用。若操作成功则返回0,否则返回出错号。
int sys_mount(char * dev_name, char * dir_name, int rw_flag)
{
   101b5:	83 ec 1c             	sub    $0x1c,%esp
	struct super_block * sb;
	int dev;

	// 首先根据设备文件名找到对应的i节点，以取得其中的设备号。对于块特殊设备文件，设备号在其i节点的i_zone[0]中。另外，
	// 由于文件系统必须在块设备中，因此如果不是块设备文件，则放回刚得的i节点dev_i，返回出错码。
	if (!(dev_i = namei(dev_name)))
   101b8:	83 ec 0c             	sub    $0xc,%esp
   101bb:	ff 74 24 2c          	pushl  0x2c(%esp)
   101bf:	e8 80 33 00 00       	call   13544 <namei>
   101c4:	83 c4 10             	add    $0x10,%esp
   101c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
   101cb:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   101d0:	75 0a                	jne    101dc <sys_mount+0x27>
		return -ENOENT;
   101d2:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   101d7:	e9 64 01 00 00       	jmp    10340 <sys_mount+0x18b>
	dev = dev_i->i_zone[0];
   101dc:	8b 44 24 0c          	mov    0xc(%esp),%eax
   101e0:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   101e4:	0f b7 c0             	movzwl %ax,%eax
   101e7:	89 44 24 08          	mov    %eax,0x8(%esp)
	if (!S_ISBLK(dev_i->i_mode)) {
   101eb:	8b 44 24 0c          	mov    0xc(%esp),%eax
   101ef:	0f b7 00             	movzwl (%eax),%eax
   101f2:	0f b7 c0             	movzwl %ax,%eax
   101f5:	25 00 f0 00 00       	and    $0xf000,%eax
   101fa:	3d 00 60 00 00       	cmp    $0x6000,%eax
   101ff:	74 19                	je     1021a <sys_mount+0x65>
		iput(dev_i);
   10201:	83 ec 0c             	sub    $0xc,%esp
   10204:	ff 74 24 18          	pushl  0x18(%esp)
   10208:	e8 e2 e4 ff ff       	call   e6ef <iput>
   1020d:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   10210:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10215:	e9 26 01 00 00       	jmp    10340 <sys_mount+0x18b>
	}
	// OK，现在上面为了得到设备号而取得的i节点dev_i已经完成了它的使命，因此这里放回该设备文件的i节点。接着我们来检查一
	// 下文件系统安装到的目录名是否有效。于是根据给定的目录文件名找到对应的i节点dir_i。如果该i节点的引用计数不为1（仅在
	// 这里引用），或者该i节点的节点号是根文件系统的节点号1,则放回该i节点返回出错码。另外，如果该节点不是一个目录文件节点，
	// 则也放回该i节点，返回出错码。因为文件系统只能安装在一个目录名上。
	iput(dev_i);
   1021a:	83 ec 0c             	sub    $0xc,%esp
   1021d:	ff 74 24 18          	pushl  0x18(%esp)
   10221:	e8 c9 e4 ff ff       	call   e6ef <iput>
   10226:	83 c4 10             	add    $0x10,%esp
	if (!(dir_i = namei(dir_name)))
   10229:	83 ec 0c             	sub    $0xc,%esp
   1022c:	ff 74 24 30          	pushl  0x30(%esp)
   10230:	e8 0f 33 00 00       	call   13544 <namei>
   10235:	83 c4 10             	add    $0x10,%esp
   10238:	89 44 24 04          	mov    %eax,0x4(%esp)
   1023c:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   10241:	75 0a                	jne    1024d <sys_mount+0x98>
		return -ENOENT;
   10243:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   10248:	e9 f3 00 00 00       	jmp    10340 <sys_mount+0x18b>
	if (dir_i->i_count != 1 || dir_i->i_num == ROOT_INO) {
   1024d:	8b 44 24 04          	mov    0x4(%esp),%eax
   10251:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   10255:	66 83 f8 01          	cmp    $0x1,%ax
   10259:	75 0e                	jne    10269 <sys_mount+0xb4>
   1025b:	8b 44 24 04          	mov    0x4(%esp),%eax
   1025f:	0f b7 40 32          	movzwl 0x32(%eax),%eax
   10263:	66 83 f8 01          	cmp    $0x1,%ax
   10267:	75 19                	jne    10282 <sys_mount+0xcd>
		iput(dir_i);
   10269:	83 ec 0c             	sub    $0xc,%esp
   1026c:	ff 74 24 10          	pushl  0x10(%esp)
   10270:	e8 7a e4 ff ff       	call   e6ef <iput>
   10275:	83 c4 10             	add    $0x10,%esp
		return -EBUSY;
   10278:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
   1027d:	e9 be 00 00 00       	jmp    10340 <sys_mount+0x18b>
	}
	if (!S_ISDIR(dir_i->i_mode)) {          			// 安装点需要是一个目录名。
   10282:	8b 44 24 04          	mov    0x4(%esp),%eax
   10286:	0f b7 00             	movzwl (%eax),%eax
   10289:	0f b7 c0             	movzwl %ax,%eax
   1028c:	25 00 f0 00 00       	and    $0xf000,%eax
   10291:	3d 00 40 00 00       	cmp    $0x4000,%eax
   10296:	74 19                	je     102b1 <sys_mount+0xfc>
		iput(dir_i);
   10298:	83 ec 0c             	sub    $0xc,%esp
   1029b:	ff 74 24 10          	pushl  0x10(%esp)
   1029f:	e8 4b e4 ff ff       	call   e6ef <iput>
   102a4:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   102a7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   102ac:	e9 8f 00 00 00       	jmp    10340 <sys_mount+0x18b>
	}
	// 现在安装点也检查完毕，我们开始读取要安装文件系统的超级块信息。如果读超级块操作失败，则放回该安装点i节点dir_i并返回
	// 出错码。一个文件系统的超级块会首先从超级块表中进行搜索，如果不在超级块表中就从设备上读取。
	if (!(sb = read_super(dev))) {
   102b1:	83 ec 0c             	sub    $0xc,%esp
   102b4:	ff 74 24 14          	pushl  0x14(%esp)
   102b8:	e8 02 fa ff ff       	call   fcbf <read_super>
   102bd:	83 c4 10             	add    $0x10,%esp
   102c0:	89 04 24             	mov    %eax,(%esp)
   102c3:	83 3c 24 00          	cmpl   $0x0,(%esp)
   102c7:	75 16                	jne    102df <sys_mount+0x12a>
		iput(dir_i);
   102c9:	83 ec 0c             	sub    $0xc,%esp
   102cc:	ff 74 24 10          	pushl  0x10(%esp)
   102d0:	e8 1a e4 ff ff       	call   e6ef <iput>
   102d5:	83 c4 10             	add    $0x10,%esp
		return -EBUSY;
   102d8:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
   102dd:	eb 61                	jmp    10340 <sys_mount+0x18b>
	}
	// 在等到了文件系统超级块之后，我们对它先进行检测一番。如果将要被安装的文件系统已经安装在其他地方，则放回该i节点，返回
	// 出错码。如果将要安装到的i节点已经安装了文件系统（安装标志已经置位），则放回该i节点，也返回出错码。
	if (sb->s_imount) {
   102df:	8b 04 24             	mov    (%esp),%eax
   102e2:	8b 40 5c             	mov    0x5c(%eax),%eax
   102e5:	85 c0                	test   %eax,%eax
   102e7:	74 16                	je     102ff <sys_mount+0x14a>
		iput(dir_i);
   102e9:	83 ec 0c             	sub    $0xc,%esp
   102ec:	ff 74 24 10          	pushl  0x10(%esp)
   102f0:	e8 fa e3 ff ff       	call   e6ef <iput>
   102f5:	83 c4 10             	add    $0x10,%esp
		return -EBUSY;
   102f8:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
   102fd:	eb 41                	jmp    10340 <sys_mount+0x18b>
	}
	if (dir_i->i_mount) {
   102ff:	8b 44 24 04          	mov    0x4(%esp),%eax
   10303:	0f b6 40 39          	movzbl 0x39(%eax),%eax
   10307:	84 c0                	test   %al,%al
   10309:	74 16                	je     10321 <sys_mount+0x16c>
		iput(dir_i);
   1030b:	83 ec 0c             	sub    $0xc,%esp
   1030e:	ff 74 24 10          	pushl  0x10(%esp)
   10312:	e8 d8 e3 ff ff       	call   e6ef <iput>
   10317:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   1031a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1031f:	eb 1f                	jmp    10340 <sys_mount+0x18b>
	}
	// 最后设置被安装文件系统超级块的“被安装到i节点”字段指向安装到的目录名的i节点。并设置安装位置i节点的安装标志和节点已修改
	// 标志。然后返回0（安装成功）。
	sb->s_imount = dir_i;
   10321:	8b 04 24             	mov    (%esp),%eax
   10324:	8b 54 24 04          	mov    0x4(%esp),%edx
   10328:	89 50 5c             	mov    %edx,0x5c(%eax)
	dir_i->i_mount = 1;
   1032b:	8b 44 24 04          	mov    0x4(%esp),%eax
   1032f:	c6 40 39 01          	movb   $0x1,0x39(%eax)
	dir_i->i_dirt = 1;									/* NOTE! we don't iput(dir_i) */        /* 注意！这里没有用iput(dir_i) */
   10333:	8b 44 24 04          	mov    0x4(%esp),%eax
   10337:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	return 0;											/* we do that in umount */      /* 这将在umount内操作 */
   1033b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10340:	83 c4 1c             	add    $0x1c,%esp
   10343:	c3                   	ret    

00010344 <mount_root>:

// 安装根文件系统.
// 该函数属于系统初始化操作的一部分.函数首先初始化文件表数组file_table[]和超级块表(数组),然后读取根文件系统超级块,并取得文件系统根i
// 节点.最后统计并显示出根文件系统上的可用资源(空闲块数和空闲i节点数0.该函数会在系统开机进行初始化设置时(sys_setup())调用(blk_drv/hd.c)>
void mount_root(void)
{
   10344:	53                   	push   %ebx
   10345:	83 ec 18             	sub    $0x18,%esp
	// 若磁盘i节点结构不是32字节,则出错停机.该判断用于防止修改代码时出现不一致情况.
	if (32 != sizeof (struct d_inode))
		panic("bad i-node size");
	// 首先初始化文件表数组(共64项,即系统同时只能打开64个文件)和超级块表.这里将所有文件结构中的引用计数设置为0(表示空闲),并把超级块表中各项结构
	// 的设备字段初始化为0(也表示空闲).如果根文件系统所在设备是软盘的话,就提示"插入根文件系统盘,并按回车键",并等待按键.
	for(i = 0; i < NR_FILE; i++)									// 初始化文件表.
   10348:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   1034f:	00 
   10350:	eb 16                	jmp    10368 <mount_root+0x24>
		file_table[i].f_count = 0;
   10352:	8b 44 24 0c          	mov    0xc(%esp),%eax
   10356:	c1 e0 04             	shl    $0x4,%eax
   10359:	05 84 0f 04 00       	add    $0x40f84,%eax
   1035e:	66 c7 00 00 00       	movw   $0x0,(%eax)
	// 若磁盘i节点结构不是32字节,则出错停机.该判断用于防止修改代码时出现不一致情况.
	if (32 != sizeof (struct d_inode))
		panic("bad i-node size");
	// 首先初始化文件表数组(共64项,即系统同时只能打开64个文件)和超级块表.这里将所有文件结构中的引用计数设置为0(表示空闲),并把超级块表中各项结构
	// 的设备字段初始化为0(也表示空闲).如果根文件系统所在设备是软盘的话,就提示"插入根文件系统盘,并按回车键",并等待按键.
	for(i = 0; i < NR_FILE; i++)									// 初始化文件表.
   10363:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   10368:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
   1036d:	7e e3                	jle    10352 <mount_root+0xe>
		file_table[i].f_count = 0;
	if (MAJOR(ROOT_DEV) == 2) {										// 提示插入根文件系统盘.
   1036f:	a1 cc 10 03 00       	mov    0x310cc,%eax
   10374:	c1 e8 08             	shr    $0x8,%eax
   10377:	83 f8 02             	cmp    $0x2,%eax
   1037a:	75 15                	jne    10391 <mount_root+0x4d>
		printk("Insert root floppy and press ENTER\r\n");
   1037c:	83 ec 0c             	sub    $0xc,%esp
   1037f:	68 04 3b 02 00       	push   $0x23b04
   10384:	e8 be 88 ff ff       	call   8c47 <printk>
   10389:	83 c4 10             	add    $0x10,%esp
		wait_for_keypress();
   1038c:	e8 5f 88 00 00       	call   18bf0 <wait_for_keypress>
	}
	for(p = &super_block[0] ; p < &super_block[NR_SUPER] ; p++) {
   10391:	c7 44 24 04 20 0c 04 	movl   $0x40c20,0x4(%esp)
   10398:	00 
   10399:	eb 22                	jmp    103bd <mount_root+0x79>
		p->s_dev = 0;												// 初始化超级块表
   1039b:	8b 44 24 04          	mov    0x4(%esp),%eax
   1039f:	66 c7 40 54 00 00    	movw   $0x0,0x54(%eax)
		p->s_lock = 0;
   103a5:	8b 44 24 04          	mov    0x4(%esp),%eax
   103a9:	c6 40 68 00          	movb   $0x0,0x68(%eax)
		p->s_wait = NULL;
   103ad:	8b 44 24 04          	mov    0x4(%esp),%eax
   103b1:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
		file_table[i].f_count = 0;
	if (MAJOR(ROOT_DEV) == 2) {										// 提示插入根文件系统盘.
		printk("Insert root floppy and press ENTER\r\n");
		wait_for_keypress();
	}
	for(p = &super_block[0] ; p < &super_block[NR_SUPER] ; p++) {
   103b8:	83 44 24 04 6c       	addl   $0x6c,0x4(%esp)
   103bd:	81 7c 24 04 80 0f 04 	cmpl   $0x40f80,0x4(%esp)
   103c4:	00 
   103c5:	72 d4                	jb     1039b <mount_root+0x57>
		p->s_lock = 0;
		p->s_wait = NULL;
	}
	// 做好以上"份外"的初始化工作之后,我们开始安装根文件系统.于是从根设备上读取文件系统超级块,并取得文件系统的根i节点(1号节点)在内存i节点表中的指针.
	// 如果读根设备上超级块失败或取根节点失败,则都显示信息并停机.
	if (!(p = read_super(ROOT_DEV)))
   103c7:	a1 cc 10 03 00       	mov    0x310cc,%eax
   103cc:	83 ec 0c             	sub    $0xc,%esp
   103cf:	50                   	push   %eax
   103d0:	e8 ea f8 ff ff       	call   fcbf <read_super>
   103d5:	83 c4 10             	add    $0x10,%esp
   103d8:	89 44 24 04          	mov    %eax,0x4(%esp)
   103dc:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   103e1:	75 10                	jne    103f3 <mount_root+0xaf>
		panic("Unable to mount root");
   103e3:	83 ec 0c             	sub    $0xc,%esp
   103e6:	68 29 3b 02 00       	push   $0x23b29
   103eb:	e8 18 88 ff ff       	call   8c08 <panic>
   103f0:	83 c4 10             	add    $0x10,%esp
	if (!(mi = iget(ROOT_DEV, ROOT_INO)))							// 在fs.h中ROOT_INO定义为1.
   103f3:	a1 cc 10 03 00       	mov    0x310cc,%eax
   103f8:	83 ec 08             	sub    $0x8,%esp
   103fb:	6a 01                	push   $0x1
   103fd:	50                   	push   %eax
   103fe:	e8 7e e6 ff ff       	call   ea81 <iget>
   10403:	83 c4 10             	add    $0x10,%esp
   10406:	89 04 24             	mov    %eax,(%esp)
   10409:	83 3c 24 00          	cmpl   $0x0,(%esp)
   1040d:	75 10                	jne    1041f <mount_root+0xdb>
		panic("Unable to read root i-node");
   1040f:	83 ec 0c             	sub    $0xc,%esp
   10412:	68 3e 3b 02 00       	push   $0x23b3e
   10417:	e8 ec 87 ff ff       	call   8c08 <panic>
   1041c:	83 c4 10             	add    $0x10,%esp
	// 现在我们对超级块和根i节点进行设置.把根i节点引用次数递增3次.因为下面266行上也引用了该i节点.另外,iget()函数中i节点引用计数已被设置为1.然后置该
	// 超级块的被安装文件系统i节点和被安装到i节点字段为该i节点.再设置当前进程的当前工作目录和根目录i节点.此时当前进程是1号进程(init进程).
	mi->i_count += 3 ;												/* NOTE! it is logically used 4 times, not 1 */
   1041f:	8b 04 24             	mov    (%esp),%eax
   10422:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   10426:	8d 50 03             	lea    0x3(%eax),%edx
   10429:	8b 04 24             	mov    (%esp),%eax
   1042c:	66 89 50 34          	mov    %dx,0x34(%eax)
                                									/* 注意!从逻辑上讲,它已被引用了4次,而不是1次 */
	p->s_isup = p->s_imount = mi;
   10430:	8b 44 24 04          	mov    0x4(%esp),%eax
   10434:	8b 14 24             	mov    (%esp),%edx
   10437:	89 50 5c             	mov    %edx,0x5c(%eax)
   1043a:	8b 44 24 04          	mov    0x4(%esp),%eax
   1043e:	8b 50 5c             	mov    0x5c(%eax),%edx
   10441:	8b 44 24 04          	mov    0x4(%esp),%eax
   10445:	89 50 58             	mov    %edx,0x58(%eax)
	current->pwd = mi;
   10448:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1044d:	8b 14 24             	mov    (%esp),%edx
   10450:	89 90 34 03 00 00    	mov    %edx,0x334(%eax)
	current->root = mi;
   10456:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1045b:	8b 14 24             	mov    (%esp),%edx
   1045e:	89 90 38 03 00 00    	mov    %edx,0x338(%eax)
	// 然后我们对根文件系统上的资源作统计工作.统计该设备上空闲块数和空闲i节点数.首先令i等于超级块中表明的设备逻辑块总数.然后根据逻辑块位图中相应位的占用情况统计出空闲块数.
	// 这里宏函数set_bit()只是在测试位,而非设置位."i&8191"用于取得i节点号在当前位图块中对应的位偏移值."i>>13"是将i除以8192,也即除一个磁盘块包含的位数.
	free = 0;
   10464:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   1046b:	00 
	i = p->s_nzones;
   1046c:	8b 44 24 04          	mov    0x4(%esp),%eax
   10470:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   10474:	0f b7 c0             	movzwl %ax,%eax
   10477:	89 44 24 0c          	mov    %eax,0xc(%esp)
	while (-- i >= 0)
   1047b:	eb 39                	jmp    104b6 <mount_root+0x172>
		if (!set_bit(i & 8191, p->s_zmap[i >> 13]->b_data))
   1047d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   10481:	25 ff 1f 00 00       	and    $0x1fff,%eax
   10486:	89 c1                	mov    %eax,%ecx
   10488:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1048c:	c1 f8 0d             	sar    $0xd,%eax
   1048f:	89 c2                	mov    %eax,%edx
   10491:	8b 44 24 04          	mov    0x4(%esp),%eax
   10495:	83 c2 0c             	add    $0xc,%edx
   10498:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   1049c:	8b 10                	mov    (%eax),%edx
   1049e:	b8 00 00 00 00       	mov    $0x0,%eax
   104a3:	0f a3 0a             	bt     %ecx,(%edx)
   104a6:	0f 92 c0             	setb   %al
   104a9:	89 c3                	mov    %eax,%ebx
   104ab:	89 d8                	mov    %ebx,%eax
   104ad:	85 c0                	test   %eax,%eax
   104af:	75 05                	jne    104b6 <mount_root+0x172>
			free++;
   104b1:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
	current->root = mi;
	// 然后我们对根文件系统上的资源作统计工作.统计该设备上空闲块数和空闲i节点数.首先令i等于超级块中表明的设备逻辑块总数.然后根据逻辑块位图中相应位的占用情况统计出空闲块数.
	// 这里宏函数set_bit()只是在测试位,而非设置位."i&8191"用于取得i节点号在当前位图块中对应的位偏移值."i>>13"是将i除以8192,也即除一个磁盘块包含的位数.
	free = 0;
	i = p->s_nzones;
	while (-- i >= 0)
   104b6:	83 6c 24 0c 01       	subl   $0x1,0xc(%esp)
   104bb:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   104c0:	79 bb                	jns    1047d <mount_root+0x139>
		if (!set_bit(i & 8191, p->s_zmap[i >> 13]->b_data))
			free++;
	// 打印当前主设备上空闲和总的逻辑块数
	Log(LOG_INFO_TYPE, "<<<<< %d/%d free blocks >>>>>\n\r", free, p->s_nzones);
   104c2:	8b 44 24 04          	mov    0x4(%esp),%eax
   104c6:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   104ca:	0f b7 c0             	movzwl %ax,%eax
   104cd:	50                   	push   %eax
   104ce:	ff 74 24 0c          	pushl  0xc(%esp)
   104d2:	68 5c 3b 02 00       	push   $0x23b5c
   104d7:	6a 00                	push   $0x0
   104d9:	e8 11 25 01 00       	call   229ef <Log>
   104de:	83 c4 10             	add    $0x10,%esp
	// 在显示过设备上空闲逻辑块数/逻辑块总数之后.我们再统计设备上空闲i节点数.首先令i等于超级块中表明的设备上i中总数+1.加1是将0节点也统计进去.然后根据i节点位图中相应位的
	// 占用情况计算出空闲i节点数.最后再显示设备上可用空闲i节点数和i节点总数.
	free = 0;
   104e1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   104e8:	00 
	i = p->s_ninodes + 1;
   104e9:	8b 44 24 04          	mov    0x4(%esp),%eax
   104ed:	0f b7 00             	movzwl (%eax),%eax
   104f0:	0f b7 c0             	movzwl %ax,%eax
   104f3:	83 c0 01             	add    $0x1,%eax
   104f6:	89 44 24 0c          	mov    %eax,0xc(%esp)
	while (-- i >= 0)
   104fa:	eb 39                	jmp    10535 <mount_root+0x1f1>
		if (!set_bit(i & 8191, p->s_imap[i >> 13]->b_data))
   104fc:	8b 44 24 0c          	mov    0xc(%esp),%eax
   10500:	25 ff 1f 00 00       	and    $0x1fff,%eax
   10505:	89 c1                	mov    %eax,%ecx
   10507:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1050b:	c1 f8 0d             	sar    $0xd,%eax
   1050e:	89 c2                	mov    %eax,%edx
   10510:	8b 44 24 04          	mov    0x4(%esp),%eax
   10514:	83 c2 04             	add    $0x4,%edx
   10517:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   1051b:	8b 10                	mov    (%eax),%edx
   1051d:	b8 00 00 00 00       	mov    $0x0,%eax
   10522:	0f a3 0a             	bt     %ecx,(%edx)
   10525:	0f 92 c0             	setb   %al
   10528:	89 c3                	mov    %eax,%ebx
   1052a:	89 d8                	mov    %ebx,%eax
   1052c:	85 c0                	test   %eax,%eax
   1052e:	75 05                	jne    10535 <mount_root+0x1f1>
			free++;
   10530:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
	Log(LOG_INFO_TYPE, "<<<<< %d/%d free blocks >>>>>\n\r", free, p->s_nzones);
	// 在显示过设备上空闲逻辑块数/逻辑块总数之后.我们再统计设备上空闲i节点数.首先令i等于超级块中表明的设备上i中总数+1.加1是将0节点也统计进去.然后根据i节点位图中相应位的
	// 占用情况计算出空闲i节点数.最后再显示设备上可用空闲i节点数和i节点总数.
	free = 0;
	i = p->s_ninodes + 1;
	while (-- i >= 0)
   10535:	83 6c 24 0c 01       	subl   $0x1,0xc(%esp)
   1053a:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   1053f:	79 bb                	jns    104fc <mount_root+0x1b8>
		if (!set_bit(i & 8191, p->s_imap[i >> 13]->b_data))
			free++;
	// 打印当前主设备上i节点空闲和总的数量
	Log(LOG_INFO_TYPE, "<<<<< %d/%d free inodes >>>>>\n\r", free, p->s_ninodes);
   10541:	8b 44 24 04          	mov    0x4(%esp),%eax
   10545:	0f b7 00             	movzwl (%eax),%eax
   10548:	0f b7 c0             	movzwl %ax,%eax
   1054b:	50                   	push   %eax
   1054c:	ff 74 24 0c          	pushl  0xc(%esp)
   10550:	68 7c 3b 02 00       	push   $0x23b7c
   10555:	6a 00                	push   $0x0
   10557:	e8 93 24 01 00       	call   229ef <Log>
   1055c:	83 c4 10             	add    $0x10,%esp
}
   1055f:	90                   	nop
   10560:	83 c4 18             	add    $0x18,%esp
   10563:	5b                   	pop    %ebx
   10564:	c3                   	ret    

00010565 <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
   10565:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   10566:	8b 44 24 08          	mov    0x8(%esp),%eax
   1056a:	64 8a 00             	mov    %fs:(%eax),%al
   1056d:	89 c3                	mov    %eax,%ebx
	return _v;
   1056f:	89 d8                	mov    %ebx,%eax
}
   10571:	5b                   	pop    %ebx
   10572:	c3                   	ret    

00010573 <put_fs_byte>:

//// 将一字节存放在fs段中指定内存地址处.
// 参数:val - 字节值;addr - 内存地址.
// %0 - 寄存器(字节值val);%1 - (内存地址addr).
static inline void put_fs_byte(char val,char *addr)
{
   10573:	83 ec 04             	sub    $0x4,%esp
   10576:	8b 44 24 08          	mov    0x8(%esp),%eax
   1057a:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   1057d:	0f b6 04 24          	movzbl (%esp),%eax
   10581:	8b 54 24 0c          	mov    0xc(%esp),%edx
   10585:	64 88 02             	mov    %al,%fs:(%edx)
}
   10588:	90                   	nop
   10589:	83 c4 04             	add    $0x4,%esp
   1058c:	c3                   	ret    

0001058d <block_write>:
// 返回已写入字节数。若没有写入任何字节或出错，则返回出错号。
// 对于内核来说，写操作是向高速缓冲区中写入数据。什么时候数据最终写入设备是高速缓冲管理程序决定并处理的。另外，因为
// 块设备是以块为单位进行读写，因此对于写开始位置不处于块起始处时，需要先将开始字节所在整个块读出，然后将需要写的数据
// 从开始处填写满该块，再将完整的一块数据写盘（即交由高速缓冲程序去处理）。
int block_write(int dev, long * pos, char * buf, int count)
{
   1058d:	56                   	push   %esi
   1058e:	53                   	push   %ebx
   1058f:	83 ec 24             	sub    $0x24,%esp
	// 首先由文件中位置pos换算成开始写盘块的块序号block，并求出需写第1字节在该块中的偏移位置offset。
	int block = *pos >> BLOCK_SIZE_BITS;            			// pos所在文件数据块号。
   10592:	8b 44 24 34          	mov    0x34(%esp),%eax
   10596:	8b 00                	mov    (%eax),%eax
   10598:	c1 f8 0a             	sar    $0xa,%eax
   1059b:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	int offset = *pos & (BLOCK_SIZE - 1);             			// pos在数据块中偏移值。
   1059f:	8b 44 24 34          	mov    0x34(%esp),%eax
   105a3:	8b 00                	mov    (%eax),%eax
   105a5:	25 ff 03 00 00       	and    $0x3ff,%eax
   105aa:	89 44 24 18          	mov    %eax,0x18(%esp)
	int chars;
	int written = 0;
   105ae:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   105b5:	00 
	register char * p;               	       					// 局部寄存器变量，被存放在寄存器中。

	// 在写一个块设备文件时，要求写的总数据块数当然不能超过指定设备上容许的最大数据块总数。因此这里首先取出指定
	// 设备的块总数size来比较和限制函数参数给定的读入数据长度。如果系统中没有对设备指定长度，就使用默认长度
	// 0x7fffffff（2GB个块）。
	if (blk_size[MAJOR(dev)])
   105b6:	8b 44 24 30          	mov    0x30(%esp),%eax
   105ba:	c1 e8 08             	shr    $0x8,%eax
   105bd:	8b 04 85 38 11 03 00 	mov    0x31138(,%eax,4),%eax
   105c4:	85 c0                	test   %eax,%eax
   105c6:	74 25                	je     105ed <block_write+0x60>
		size = blk_size[MAJOR(dev)][MINOR(dev)];
   105c8:	8b 44 24 30          	mov    0x30(%esp),%eax
   105cc:	c1 e8 08             	shr    $0x8,%eax
   105cf:	8b 04 85 38 11 03 00 	mov    0x31138(,%eax,4),%eax
   105d6:	8b 54 24 30          	mov    0x30(%esp),%edx
   105da:	0f b6 d2             	movzbl %dl,%edx
   105dd:	c1 e2 02             	shl    $0x2,%edx
   105e0:	01 d0                	add    %edx,%eax
   105e2:	8b 00                	mov    (%eax),%eax
   105e4:	89 44 24 0c          	mov    %eax,0xc(%esp)
   105e8:	e9 3f 01 00 00       	jmp    1072c <block_write+0x19f>
	else
		size = 0x7fffffff;
   105ed:	c7 44 24 0c ff ff ff 	movl   $0x7fffffff,0xc(%esp)
   105f4:	7f 
	// 然后针对要写入的字节数count，循环执行以下操作，直到数据全部写入。在循环执行过程中，若当前写入数据的块号
	// 已经大于或等于指定设备的总块数，则返回已写字节数并退出。然后再计算在当前处理的数据块中可写入的字节数。如果
	// 需要写入的字节数填不满一块，那么就只需写count字节。如果正好写1块数据内容，则直接申请1块高速缓冲块，并把
	// 用户数据放入即可。否则就需要读入将被写入部分数据的数据块，并预读下两块数据。然后将块号递增1,为下次操作做好
	// 准备。如果缓冲块操作失败，则返回已写字节数，如果没有写入任何字节，则返回出错号（负数）。
	while (count > 0) {
   105f5:	e9 32 01 00 00       	jmp    1072c <block_write+0x19f>
		if (block >= size)
   105fa:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   105fe:	3b 44 24 0c          	cmp    0xc(%esp),%eax
   10602:	7c 1a                	jl     1061e <block_write+0x91>
			return written ? written : -EIO;
   10604:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   10609:	74 09                	je     10614 <block_write+0x87>
   1060b:	8b 44 24 10          	mov    0x10(%esp),%eax
   1060f:	e9 27 01 00 00       	jmp    1073b <block_write+0x1ae>
   10614:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   10619:	e9 1d 01 00 00       	jmp    1073b <block_write+0x1ae>
		chars = BLOCK_SIZE - offset;
   1061e:	b8 00 04 00 00       	mov    $0x400,%eax
   10623:	2b 44 24 18          	sub    0x18(%esp),%eax
   10627:	89 44 24 14          	mov    %eax,0x14(%esp)
		if (chars > count)
   1062b:	8b 44 24 14          	mov    0x14(%esp),%eax
   1062f:	3b 44 24 3c          	cmp    0x3c(%esp),%eax
   10633:	7e 08                	jle    1063d <block_write+0xb0>
			chars = count;
   10635:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   10639:	89 44 24 14          	mov    %eax,0x14(%esp)
		if (chars == BLOCK_SIZE)
   1063d:	81 7c 24 14 00 04 00 	cmpl   $0x400,0x14(%esp)
   10644:	00 
   10645:	75 19                	jne    10660 <block_write+0xd3>
			bh = getblk(dev, block);
   10647:	83 ec 08             	sub    $0x8,%esp
   1064a:	ff 74 24 24          	pushl  0x24(%esp)
   1064e:	ff 74 24 3c          	pushl  0x3c(%esp)
   10652:	e8 80 ee ff ff       	call   f4d7 <getblk>
   10657:	83 c4 10             	add    $0x10,%esp
   1065a:	89 44 24 08          	mov    %eax,0x8(%esp)
   1065e:	eb 29                	jmp    10689 <block_write+0xfc>
		else
			bh = breada(dev, block, block + 1, block + 2, -1);
   10660:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   10664:	8d 50 02             	lea    0x2(%eax),%edx
   10667:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1066b:	83 c0 01             	add    $0x1,%eax
   1066e:	83 ec 0c             	sub    $0xc,%esp
   10671:	6a ff                	push   $0xffffffff
   10673:	52                   	push   %edx
   10674:	50                   	push   %eax
   10675:	ff 74 24 34          	pushl  0x34(%esp)
   10679:	ff 74 24 4c          	pushl  0x4c(%esp)
   1067d:	e8 24 f2 ff ff       	call   f8a6 <breada>
   10682:	83 c4 20             	add    $0x20,%esp
   10685:	89 44 24 08          	mov    %eax,0x8(%esp)
		block++;
   10689:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
		if (!bh)
   1068e:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   10693:	75 1a                	jne    106af <block_write+0x122>
			return written ? written : -EIO;
   10695:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   1069a:	74 09                	je     106a5 <block_write+0x118>
   1069c:	8b 44 24 10          	mov    0x10(%esp),%eax
   106a0:	e9 96 00 00 00       	jmp    1073b <block_write+0x1ae>
   106a5:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   106aa:	e9 8c 00 00 00       	jmp    1073b <block_write+0x1ae>
		// 接着先把指针p指向读出数据的缓冲块中开始写入数据的位置处。若最后一次循环写入的数据不足一块，则需要从块开始
		// 处填写（修改）所需的字节，因此这里需预先设置offset为零。此后将文件中偏移指针pos前移此次将要写的字节数chars
		// 并累加这些要写的字节数到统计值written中。再把还需要写的计数值count减去此次要写的字节数chars。然后我们从
		// 用户缓冲区复制chars个字节到p指向的高速缓冲块中开始写入的位置处。复制完后就设置该缓冲区块已修改标志，并释放
		// 该缓冲区（即该缓冲区引用计数递减1）。
		p = offset + bh->b_data;
   106af:	8b 44 24 08          	mov    0x8(%esp),%eax
   106b3:	8b 10                	mov    (%eax),%edx
   106b5:	8b 44 24 18          	mov    0x18(%esp),%eax
   106b9:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
		offset = 0;
   106bc:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   106c3:	00 
		*pos += chars;
   106c4:	8b 44 24 34          	mov    0x34(%esp),%eax
   106c8:	8b 10                	mov    (%eax),%edx
   106ca:	8b 44 24 14          	mov    0x14(%esp),%eax
   106ce:	01 c2                	add    %eax,%edx
   106d0:	8b 44 24 34          	mov    0x34(%esp),%eax
   106d4:	89 10                	mov    %edx,(%eax)
		written += chars;               						// 累计写入字节数。
   106d6:	8b 44 24 14          	mov    0x14(%esp),%eax
   106da:	01 44 24 10          	add    %eax,0x10(%esp)
		count -= chars;
   106de:	8b 44 24 14          	mov    0x14(%esp),%eax
   106e2:	29 44 24 3c          	sub    %eax,0x3c(%esp)
		while (chars-- > 0)
   106e6:	eb 1e                	jmp    10706 <block_write+0x179>
			*(p++) = get_fs_byte(buf++);
   106e8:	89 de                	mov    %ebx,%esi
   106ea:	8d 5e 01             	lea    0x1(%esi),%ebx
   106ed:	8b 44 24 38          	mov    0x38(%esp),%eax
   106f1:	8d 50 01             	lea    0x1(%eax),%edx
   106f4:	89 54 24 38          	mov    %edx,0x38(%esp)
   106f8:	83 ec 0c             	sub    $0xc,%esp
   106fb:	50                   	push   %eax
   106fc:	e8 64 fe ff ff       	call   10565 <get_fs_byte>
   10701:	83 c4 10             	add    $0x10,%esp
   10704:	88 06                	mov    %al,(%esi)
		p = offset + bh->b_data;
		offset = 0;
		*pos += chars;
		written += chars;               						// 累计写入字节数。
		count -= chars;
		while (chars-- > 0)
   10706:	8b 44 24 14          	mov    0x14(%esp),%eax
   1070a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1070d:	89 54 24 14          	mov    %edx,0x14(%esp)
   10711:	85 c0                	test   %eax,%eax
   10713:	7f d3                	jg     106e8 <block_write+0x15b>
			*(p++) = get_fs_byte(buf++);
		bh->b_dirt = 1;
   10715:	8b 44 24 08          	mov    0x8(%esp),%eax
   10719:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
		brelse(bh);
   1071d:	83 ec 0c             	sub    $0xc,%esp
   10720:	ff 74 24 14          	pushl  0x14(%esp)
   10724:	e8 67 ef ff ff       	call   f690 <brelse>
   10729:	83 c4 10             	add    $0x10,%esp
	// 然后针对要写入的字节数count，循环执行以下操作，直到数据全部写入。在循环执行过程中，若当前写入数据的块号
	// 已经大于或等于指定设备的总块数，则返回已写字节数并退出。然后再计算在当前处理的数据块中可写入的字节数。如果
	// 需要写入的字节数填不满一块，那么就只需写count字节。如果正好写1块数据内容，则直接申请1块高速缓冲块，并把
	// 用户数据放入即可。否则就需要读入将被写入部分数据的数据块，并预读下两块数据。然后将块号递增1,为下次操作做好
	// 准备。如果缓冲块操作失败，则返回已写字节数，如果没有写入任何字节，则返回出错号（负数）。
	while (count > 0) {
   1072c:	83 7c 24 3c 00       	cmpl   $0x0,0x3c(%esp)
   10731:	0f 8f c3 fe ff ff    	jg     105fa <block_write+0x6d>
		while (chars-- > 0)
			*(p++) = get_fs_byte(buf++);
		bh->b_dirt = 1;
		brelse(bh);
	}
	return written;                         					// 返回已写入的字节数，正常退出。
   10737:	8b 44 24 10          	mov    0x10(%esp),%eax
}
   1073b:	83 c4 24             	add    $0x24,%esp
   1073e:	5b                   	pop    %ebx
   1073f:	5e                   	pop    %esi
   10740:	c3                   	ret    

00010741 <block_read>:

// 数据块读函数 - 从指定设备和位置处读入指定长度数据到用户缓冲区中。
// 参数：dev - 设备号；pos - 设备文件中领衔量指针；buf - 用户空间中缓冲区地址；count - 要传送的字节数。
// 返回已读入字节数。若没有读入任何字节或出错，则返回出错号。
int block_read(int dev, unsigned long * pos, char * buf, int count)
{
   10741:	53                   	push   %ebx
   10742:	83 ec 28             	sub    $0x28,%esp
	int block = *pos >> BLOCK_SIZE_BITS;
   10745:	8b 44 24 34          	mov    0x34(%esp),%eax
   10749:	8b 00                	mov    (%eax),%eax
   1074b:	c1 e8 0a             	shr    $0xa,%eax
   1074e:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	int offset = *pos & (BLOCK_SIZE - 1);
   10752:	8b 44 24 34          	mov    0x34(%esp),%eax
   10756:	8b 00                	mov    (%eax),%eax
   10758:	25 ff 03 00 00       	and    $0x3ff,%eax
   1075d:	89 44 24 18          	mov    %eax,0x18(%esp)
	int chars;
	int size;
	int read = 0;
   10761:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   10768:	00 
	register char * p;              							// 局部寄存器变量，被存放在寄存器中。

	// 在读一个块设备文件时，要求读的总数据块数当然不能超过指定设备上容许的最大数据块总数。因此这里首先取出指定
	// 设备的块总数size来比较和限制函数参数给定的读入数据长度。如果系统中没有对设备指定长度，就使用默认长度
	// 0x7fffffff（2GB个块）。
	if (blk_size[MAJOR(dev)])
   10769:	8b 44 24 30          	mov    0x30(%esp),%eax
   1076d:	c1 e8 08             	shr    $0x8,%eax
   10770:	8b 04 85 38 11 03 00 	mov    0x31138(,%eax,4),%eax
   10777:	85 c0                	test   %eax,%eax
   10779:	74 25                	je     107a0 <block_read+0x5f>
		size = blk_size[MAJOR(dev)][MINOR(dev)];
   1077b:	8b 44 24 30          	mov    0x30(%esp),%eax
   1077f:	c1 e8 08             	shr    $0x8,%eax
   10782:	8b 04 85 38 11 03 00 	mov    0x31138(,%eax,4),%eax
   10789:	8b 54 24 30          	mov    0x30(%esp),%edx
   1078d:	0f b6 d2             	movzbl %dl,%edx
   10790:	c1 e2 02             	shl    $0x2,%edx
   10793:	01 d0                	add    %edx,%eax
   10795:	8b 00                	mov    (%eax),%eax
   10797:	89 44 24 10          	mov    %eax,0x10(%esp)
   1079b:	e9 19 01 00 00       	jmp    108b9 <block_read+0x178>
	else
		size = 0x7fffffff;
   107a0:	c7 44 24 10 ff ff ff 	movl   $0x7fffffff,0x10(%esp)
   107a7:	7f 
	// 然后针对要读入的字节数count，循环执行以下操作，直到数据全部读入。在循环执行过程中，若当前读入数据的块号已经
	// 大于或等于指定设备的总块数，则返回已读字节数并退出。然后再计算在当前处理的数据块中需读入的字节数。如果需要读
	// 入的字节数还不满一块，那么就只需读count字节。然后调用读块函数breada()读入需要的数据块，并预读下两块数据，
	// 如果读操作出错，则返回已读字节数，如果没有读入任何字节，则返回出错号。然后将块号递增1。为下次操作做好准备。如
	// 果缓冲块担操失败，则返回已写字节数，如果没有读入任何字节，则返回出错号（负数）。
	while (count > 0) {
   107a8:	e9 0c 01 00 00       	jmp    108b9 <block_read+0x178>
		if (block >= size)
   107ad:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   107b1:	3b 44 24 10          	cmp    0x10(%esp),%eax
   107b5:	7c 1a                	jl     107d1 <block_read+0x90>
			return read ? read : -EIO;
   107b7:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   107bc:	74 09                	je     107c7 <block_read+0x86>
   107be:	8b 44 24 0c          	mov    0xc(%esp),%eax
   107c2:	e9 01 01 00 00       	jmp    108c8 <block_read+0x187>
   107c7:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   107cc:	e9 f7 00 00 00       	jmp    108c8 <block_read+0x187>
		chars = BLOCK_SIZE - offset;
   107d1:	b8 00 04 00 00       	mov    $0x400,%eax
   107d6:	2b 44 24 18          	sub    0x18(%esp),%eax
   107da:	89 44 24 14          	mov    %eax,0x14(%esp)
		if (chars > count)
   107de:	8b 44 24 14          	mov    0x14(%esp),%eax
   107e2:	3b 44 24 3c          	cmp    0x3c(%esp),%eax
   107e6:	7e 08                	jle    107f0 <block_read+0xaf>
			chars = count;
   107e8:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   107ec:	89 44 24 14          	mov    %eax,0x14(%esp)
		if (!(bh = breada(dev, block, block + 1, block + 2, -1)))
   107f0:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   107f4:	8d 50 02             	lea    0x2(%eax),%edx
   107f7:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   107fb:	83 c0 01             	add    $0x1,%eax
   107fe:	83 ec 0c             	sub    $0xc,%esp
   10801:	6a ff                	push   $0xffffffff
   10803:	52                   	push   %edx
   10804:	50                   	push   %eax
   10805:	ff 74 24 34          	pushl  0x34(%esp)
   10809:	ff 74 24 4c          	pushl  0x4c(%esp)
   1080d:	e8 94 f0 ff ff       	call   f8a6 <breada>
   10812:	83 c4 20             	add    $0x20,%esp
   10815:	89 44 24 08          	mov    %eax,0x8(%esp)
   10819:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1081e:	75 1a                	jne    1083a <block_read+0xf9>
			return read ? read : -EIO;
   10820:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   10825:	74 09                	je     10830 <block_read+0xef>
   10827:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1082b:	e9 98 00 00 00       	jmp    108c8 <block_read+0x187>
   10830:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   10835:	e9 8e 00 00 00       	jmp    108c8 <block_read+0x187>
		block++;
   1083a:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
		// 接着先把指针p指向读出盘块中开始读入数据的位置处。若最后一次循环读操作的数据不足一块，则需从块起始处读取所需字
		// 节，因此这里需预先设置offset为零。此后将文件中偏移指针pos前移此次将要读的字节数chars，并且累加这些要读的字节
		// 数到统计值read中。再把还需要读的计数值count减去此次要读的字节数chars。然后我们从高速缓冲块中p指向的开始读的
		// 位置处复制chars个字节到用户缓冲区中，同时把用户缓冲区指针前移。本次复制完后就释放该缓冲块。
		p = offset + bh->b_data;
   1083f:	8b 44 24 08          	mov    0x8(%esp),%eax
   10843:	8b 10                	mov    (%eax),%edx
   10845:	8b 44 24 18          	mov    0x18(%esp),%eax
   10849:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
		offset = 0;
   1084c:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   10853:	00 
		*pos += chars;
   10854:	8b 44 24 34          	mov    0x34(%esp),%eax
   10858:	8b 10                	mov    (%eax),%edx
   1085a:	8b 44 24 14          	mov    0x14(%esp),%eax
   1085e:	01 c2                	add    %eax,%edx
   10860:	8b 44 24 34          	mov    0x34(%esp),%eax
   10864:	89 10                	mov    %edx,(%eax)
		read += chars;                  						// 累计读入字节数。
   10866:	8b 44 24 14          	mov    0x14(%esp),%eax
   1086a:	01 44 24 0c          	add    %eax,0xc(%esp)
		count -= chars;
   1086e:	8b 44 24 14          	mov    0x14(%esp),%eax
   10872:	29 44 24 3c          	sub    %eax,0x3c(%esp)
		while (chars-- > 0)
   10876:	eb 23                	jmp    1089b <block_read+0x15a>
			put_fs_byte(*(p++), buf++);
   10878:	8b 44 24 38          	mov    0x38(%esp),%eax
   1087c:	8d 50 01             	lea    0x1(%eax),%edx
   1087f:	89 54 24 38          	mov    %edx,0x38(%esp)
   10883:	89 da                	mov    %ebx,%edx
   10885:	8d 5a 01             	lea    0x1(%edx),%ebx
   10888:	0f b6 12             	movzbl (%edx),%edx
   1088b:	0f be d2             	movsbl %dl,%edx
   1088e:	83 ec 08             	sub    $0x8,%esp
   10891:	50                   	push   %eax
   10892:	52                   	push   %edx
   10893:	e8 db fc ff ff       	call   10573 <put_fs_byte>
   10898:	83 c4 10             	add    $0x10,%esp
		p = offset + bh->b_data;
		offset = 0;
		*pos += chars;
		read += chars;                  						// 累计读入字节数。
		count -= chars;
		while (chars-- > 0)
   1089b:	8b 44 24 14          	mov    0x14(%esp),%eax
   1089f:	8d 50 ff             	lea    -0x1(%eax),%edx
   108a2:	89 54 24 14          	mov    %edx,0x14(%esp)
   108a6:	85 c0                	test   %eax,%eax
   108a8:	7f ce                	jg     10878 <block_read+0x137>
			put_fs_byte(*(p++), buf++);
		brelse(bh);
   108aa:	83 ec 0c             	sub    $0xc,%esp
   108ad:	ff 74 24 14          	pushl  0x14(%esp)
   108b1:	e8 da ed ff ff       	call   f690 <brelse>
   108b6:	83 c4 10             	add    $0x10,%esp
	// 然后针对要读入的字节数count，循环执行以下操作，直到数据全部读入。在循环执行过程中，若当前读入数据的块号已经
	// 大于或等于指定设备的总块数，则返回已读字节数并退出。然后再计算在当前处理的数据块中需读入的字节数。如果需要读
	// 入的字节数还不满一块，那么就只需读count字节。然后调用读块函数breada()读入需要的数据块，并预读下两块数据，
	// 如果读操作出错，则返回已读字节数，如果没有读入任何字节，则返回出错号。然后将块号递增1。为下次操作做好准备。如
	// 果缓冲块担操失败，则返回已写字节数，如果没有读入任何字节，则返回出错号（负数）。
	while (count > 0) {
   108b9:	83 7c 24 3c 00       	cmpl   $0x0,0x3c(%esp)
   108be:	0f 8f e9 fe ff ff    	jg     107ad <block_read+0x6c>
		count -= chars;
		while (chars-- > 0)
			put_fs_byte(*(p++), buf++);
		brelse(bh);
	}
	return read;                            					// 返回已读取的字节数，正常退出。
   108c4:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   108c8:	83 c4 28             	add    $0x28,%esp
   108cb:	5b                   	pop    %ebx
   108cc:	c3                   	ret    

000108cd <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
   108cd:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   108ce:	8b 44 24 08          	mov    0x8(%esp),%eax
   108d2:	64 8a 00             	mov    %fs:(%eax),%al
   108d5:	89 c3                	mov    %eax,%ebx
	return _v;
   108d7:	89 d8                	mov    %ebx,%eax
}
   108d9:	5b                   	pop    %ebx
   108da:	c3                   	ret    

000108db <put_fs_byte>:

//// 将一字节存放在fs段中指定内存地址处.
// 参数:val - 字节值;addr - 内存地址.
// %0 - 寄存器(字节值val);%1 - (内存地址addr).
static inline void put_fs_byte(char val,char *addr)
{
   108db:	83 ec 04             	sub    $0x4,%esp
   108de:	8b 44 24 08          	mov    0x8(%esp),%eax
   108e2:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   108e5:	0f b6 04 24          	movzbl (%esp),%eax
   108e9:	8b 54 24 0c          	mov    0xc(%esp),%edx
   108ed:	64 88 02             	mov    %al,%fs:(%edx)
}
   108f0:	90                   	nop
   108f1:	83 c4 04             	add    $0x4,%esp
   108f4:	c3                   	ret    

000108f5 <rw_ttyx>:

// 串口终端读写操作函数.
// 参数:rw - 读写命令;minor - 终端子设备号;buf - 缓冲区;count - 读写字节数;pos - 读写操作当前指针,对于终端操作,该指针无用.
// 返回:实际读写的字节数.若失败则返回出错码.
static int rw_ttyx(int rw, unsigned minor, char * buf, int count, off_t * pos)
{
   108f5:	83 ec 0c             	sub    $0xc,%esp
	return ((rw == READ) ? tty_read(minor, buf, count): tty_write(minor, buf, count));
   108f8:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   108fd:	75 19                	jne    10918 <rw_ttyx+0x23>
   108ff:	83 ec 04             	sub    $0x4,%esp
   10902:	ff 74 24 20          	pushl  0x20(%esp)
   10906:	ff 74 24 20          	pushl  0x20(%esp)
   1090a:	ff 74 24 20          	pushl  0x20(%esp)
   1090e:	e8 29 8b 00 00       	call   1943c <tty_read>
   10913:	83 c4 10             	add    $0x10,%esp
   10916:	eb 17                	jmp    1092f <rw_ttyx+0x3a>
   10918:	83 ec 04             	sub    $0x4,%esp
   1091b:	ff 74 24 20          	pushl  0x20(%esp)
   1091f:	ff 74 24 20          	pushl  0x20(%esp)
   10923:	ff 74 24 20          	pushl  0x20(%esp)
   10927:	e8 4b 8f 00 00       	call   19877 <tty_write>
   1092c:	83 c4 10             	add    $0x10,%esp
}
   1092f:	83 c4 0c             	add    $0xc,%esp
   10932:	c3                   	ret    

00010933 <rw_tty>:

// 终端读写操作函数。
// 同rw_ttyx()类似，只是增加了对进程是否有控制终端的检测。
static int rw_tty(int rw, unsigned minor, char * buf, int count, off_t * pos)
{
   10933:	83 ec 0c             	sub    $0xc,%esp
	// 若进程没有对应的控制终端，则返回出错号。否则调用终端读写函数rw_ttyx()，并返回实际读写字节数。
	if (current->tty < 0)
   10936:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1093b:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   10941:	85 c0                	test   %eax,%eax
   10943:	79 07                	jns    1094c <rw_tty+0x19>
		return -EPERM;
   10945:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1094a:	eb 27                	jmp    10973 <rw_tty+0x40>
	return rw_ttyx(rw, current->tty, buf, count, pos);
   1094c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   10951:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   10957:	83 ec 0c             	sub    $0xc,%esp
   1095a:	ff 74 24 2c          	pushl  0x2c(%esp)
   1095e:	ff 74 24 2c          	pushl  0x2c(%esp)
   10962:	ff 74 24 2c          	pushl  0x2c(%esp)
   10966:	50                   	push   %eax
   10967:	ff 74 24 2c          	pushl  0x2c(%esp)
   1096b:	e8 85 ff ff ff       	call   108f5 <rw_ttyx>
   10970:	83 c4 20             	add    $0x20,%esp
}
   10973:	83 c4 0c             	add    $0xc,%esp
   10976:	c3                   	ret    

00010977 <rw_ram>:

// 内在数据读写。未实现。
static int rw_ram(int rw,char * buf, int count, off_t *pos)
{
	return -EIO;
   10977:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
}
   1097c:	c3                   	ret    

0001097d <rw_mem>:

// 物理内存数据读写操作函数。未实现。
static int rw_mem(int rw,char * buf, int count, off_t * pos)
{
	return -EIO;
   1097d:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
}
   10982:	c3                   	ret    

00010983 <rw_kmem>:

// 内核虚拟内存数据读写函数。未实现。
static int rw_kmem(int rw,char * buf, int count, off_t * pos)
{
	return -EIO;
   10983:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
}
   10988:	c3                   	ret    

00010989 <rw_port>:

// 端口读写操作函数。
// 参数：rw - 读写命令；buf - 缓冲区；count - 读写字节数；post - 端口地址。
// 返回：实际读写的字节数。
static int rw_port(int rw,char * buf, int count, off_t * pos)
{
   10989:	83 ec 10             	sub    $0x10,%esp
	int i = *pos;
   1098c:	8b 44 24 20          	mov    0x20(%esp),%eax
   10990:	8b 00                	mov    (%eax),%eax
   10992:	89 44 24 0c          	mov    %eax,0xc(%esp)

	// 对于所要求读写的字节数，并且端口地址小于64k时，循环执行单个字节的读写操作。
	// 若是读命令，则从端口i中读取一字节内容并放到用户缓冲区中。若是写命令，则从用户数据缓冲区中取一字节输出到端口i。
	while (count-- > 0 && i < 65536) {
   10996:	eb 4f                	jmp    109e7 <rw_port+0x5e>
		if (rw == READ)
   10998:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   1099d:	75 2a                	jne    109c9 <rw_port+0x40>
			put_fs_byte(inb(i), buf++);
   1099f:	8b 4c 24 18          	mov    0x18(%esp),%ecx
   109a3:	8d 41 01             	lea    0x1(%ecx),%eax
   109a6:	89 44 24 18          	mov    %eax,0x18(%esp)
   109aa:	8b 44 24 0c          	mov    0xc(%esp),%eax
   109ae:	89 c2                	mov    %eax,%edx
   109b0:	ec                   	in     (%dx),%al
   109b1:	88 44 24 0b          	mov    %al,0xb(%esp)
   109b5:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
   109ba:	0f be c0             	movsbl %al,%eax
   109bd:	51                   	push   %ecx
   109be:	50                   	push   %eax
   109bf:	e8 17 ff ff ff       	call   108db <put_fs_byte>
   109c4:	83 c4 08             	add    $0x8,%esp
   109c7:	eb 19                	jmp    109e2 <rw_port+0x59>
		else
			outb(get_fs_byte(buf++), i);
   109c9:	8b 44 24 18          	mov    0x18(%esp),%eax
   109cd:	8d 50 01             	lea    0x1(%eax),%edx
   109d0:	89 54 24 18          	mov    %edx,0x18(%esp)
   109d4:	50                   	push   %eax
   109d5:	e8 f3 fe ff ff       	call   108cd <get_fs_byte>
   109da:	83 c4 04             	add    $0x4,%esp
   109dd:	8b 54 24 0c          	mov    0xc(%esp),%edx
   109e1:	ee                   	out    %al,(%dx)
		i++;            						// 前移一个端口。[好奇怪，端口地址为什么会变化？]
   109e2:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
{
	int i = *pos;

	// 对于所要求读写的字节数，并且端口地址小于64k时，循环执行单个字节的读写操作。
	// 若是读命令，则从端口i中读取一字节内容并放到用户缓冲区中。若是写命令，则从用户数据缓冲区中取一字节输出到端口i。
	while (count-- > 0 && i < 65536) {
   109e7:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   109eb:	8d 50 ff             	lea    -0x1(%eax),%edx
   109ee:	89 54 24 1c          	mov    %edx,0x1c(%esp)
   109f2:	85 c0                	test   %eax,%eax
   109f4:	7e 0a                	jle    10a00 <rw_port+0x77>
   109f6:	81 7c 24 0c ff ff 00 	cmpl   $0xffff,0xc(%esp)
   109fd:	00 
   109fe:	7e 98                	jle    10998 <rw_port+0xf>
		else
			outb(get_fs_byte(buf++), i);
		i++;            						// 前移一个端口。[好奇怪，端口地址为什么会变化？]
	}
	// 然后计算读/写的字节数，调整相应读写指针，并返回读/写的字节数。
	i -= *pos;
   10a00:	8b 44 24 20          	mov    0x20(%esp),%eax
   10a04:	8b 00                	mov    (%eax),%eax
   10a06:	29 44 24 0c          	sub    %eax,0xc(%esp)
	*pos += i;
   10a0a:	8b 44 24 20          	mov    0x20(%esp),%eax
   10a0e:	8b 10                	mov    (%eax),%edx
   10a10:	8b 44 24 0c          	mov    0xc(%esp),%eax
   10a14:	01 c2                	add    %eax,%edx
   10a16:	8b 44 24 20          	mov    0x20(%esp),%eax
   10a1a:	89 10                	mov    %edx,(%eax)
	return i;
   10a1c:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   10a20:	83 c4 10             	add    $0x10,%esp
   10a23:	c3                   	ret    

00010a24 <rw_memory>:

// 内存读写操作函数。
static int rw_memory(int rw, unsigned minor, char * buf, int count, off_t * pos)
{
	// 根据内存设备子设备号，分别调用不同的内存读写函数。
	switch(minor) {
   10a24:	83 7c 24 08 04       	cmpl   $0x4,0x8(%esp)
   10a29:	0f 87 8c 00 00 00    	ja     10abb <rw_memory+0x97>
   10a2f:	8b 44 24 08          	mov    0x8(%esp),%eax
   10a33:	c1 e0 02             	shl    $0x2,%eax
   10a36:	05 9c 3b 02 00       	add    $0x23b9c,%eax
   10a3b:	8b 00                	mov    (%eax),%eax
   10a3d:	ff e0                	jmp    *%eax
		case 0:
			return rw_ram(rw, buf, count, pos);
   10a3f:	ff 74 24 14          	pushl  0x14(%esp)
   10a43:	ff 74 24 14          	pushl  0x14(%esp)
   10a47:	ff 74 24 14          	pushl  0x14(%esp)
   10a4b:	ff 74 24 10          	pushl  0x10(%esp)
   10a4f:	e8 23 ff ff ff       	call   10977 <rw_ram>
   10a54:	83 c4 10             	add    $0x10,%esp
   10a57:	eb 67                	jmp    10ac0 <rw_memory+0x9c>
		case 1:
			return rw_mem(rw, buf, count, pos);
   10a59:	ff 74 24 14          	pushl  0x14(%esp)
   10a5d:	ff 74 24 14          	pushl  0x14(%esp)
   10a61:	ff 74 24 14          	pushl  0x14(%esp)
   10a65:	ff 74 24 10          	pushl  0x10(%esp)
   10a69:	e8 0f ff ff ff       	call   1097d <rw_mem>
   10a6e:	83 c4 10             	add    $0x10,%esp
   10a71:	eb 4d                	jmp    10ac0 <rw_memory+0x9c>
		case 2:
			return rw_kmem(rw, buf, count, pos);
   10a73:	ff 74 24 14          	pushl  0x14(%esp)
   10a77:	ff 74 24 14          	pushl  0x14(%esp)
   10a7b:	ff 74 24 14          	pushl  0x14(%esp)
   10a7f:	ff 74 24 10          	pushl  0x10(%esp)
   10a83:	e8 fb fe ff ff       	call   10983 <rw_kmem>
   10a88:	83 c4 10             	add    $0x10,%esp
   10a8b:	eb 33                	jmp    10ac0 <rw_memory+0x9c>
		case 3:
			return (rw == READ) ? 0 : count;					/* rw_null */
   10a8d:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   10a92:	74 06                	je     10a9a <rw_memory+0x76>
   10a94:	8b 44 24 10          	mov    0x10(%esp),%eax
   10a98:	eb 26                	jmp    10ac0 <rw_memory+0x9c>
   10a9a:	b8 00 00 00 00       	mov    $0x0,%eax
   10a9f:	eb 1f                	jmp    10ac0 <rw_memory+0x9c>
		case 4:
			return rw_port(rw, buf, count, pos);
   10aa1:	ff 74 24 14          	pushl  0x14(%esp)
   10aa5:	ff 74 24 14          	pushl  0x14(%esp)
   10aa9:	ff 74 24 14          	pushl  0x14(%esp)
   10aad:	ff 74 24 10          	pushl  0x10(%esp)
   10ab1:	e8 d3 fe ff ff       	call   10989 <rw_port>
   10ab6:	83 c4 10             	add    $0x10,%esp
   10ab9:	eb 05                	jmp    10ac0 <rw_memory+0x9c>
		default:
			return -EIO;
   10abb:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
	}
}
   10ac0:	c3                   	ret    

00010ac1 <rw_char>:

// 字符设备读写操作函数
// 参数:rw - 读写命令;dev - 设备号;buf - 缓冲区;count - 读写字节数;pos - 读写指针.
// 返回:实际读/写字节数.
int rw_char(int rw, int dev, char * buf, int count, off_t * pos)
{
   10ac1:	83 ec 1c             	sub    $0x1c,%esp
	crw_ptr call_addr;

	// 如果设备号超出系统设备数,则返回出错码.如果该设备没有对应的读/写函数,也返回出错码.否则调用对应设备的读写操作函数,并返回实际读/写的字节数.
	if (MAJOR(dev) >= NRDEVS)
   10ac4:	8b 44 24 24          	mov    0x24(%esp),%eax
   10ac8:	c1 e8 08             	shr    $0x8,%eax
   10acb:	83 f8 07             	cmp    $0x7,%eax
   10ace:	76 07                	jbe    10ad7 <rw_char+0x16>
		return -ENODEV;
   10ad0:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
   10ad5:	eb 44                	jmp    10b1b <rw_char+0x5a>
	if (!(call_addr = crw_table[MAJOR(dev)]))
   10ad7:	8b 44 24 24          	mov    0x24(%esp),%eax
   10adb:	c1 e8 08             	shr    $0x8,%eax
   10ade:	8b 04 85 80 e3 02 00 	mov    0x2e380(,%eax,4),%eax
   10ae5:	89 44 24 0c          	mov    %eax,0xc(%esp)
   10ae9:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   10aee:	75 07                	jne    10af7 <rw_char+0x36>
		return -ENODEV;
   10af0:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
   10af5:	eb 24                	jmp    10b1b <rw_char+0x5a>
	return call_addr(rw, MINOR(dev), buf, count, pos);
   10af7:	8b 44 24 24          	mov    0x24(%esp),%eax
   10afb:	0f b6 c0             	movzbl %al,%eax
   10afe:	83 ec 0c             	sub    $0xc,%esp
   10b01:	ff 74 24 3c          	pushl  0x3c(%esp)
   10b05:	ff 74 24 3c          	pushl  0x3c(%esp)
   10b09:	ff 74 24 3c          	pushl  0x3c(%esp)
   10b0d:	50                   	push   %eax
   10b0e:	ff 74 24 3c          	pushl  0x3c(%esp)
   10b12:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   10b16:	ff d0                	call   *%eax
   10b18:	83 c4 20             	add    $0x20,%esp
}
   10b1b:	83 c4 1c             	add    $0x1c,%esp
   10b1e:	c3                   	ret    

00010b1f <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
   10b1f:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   10b20:	8b 44 24 08          	mov    0x8(%esp),%eax
   10b24:	64 8a 00             	mov    %fs:(%eax),%al
   10b27:	89 c3                	mov    %eax,%ebx
	return _v;
   10b29:	89 d8                	mov    %ebx,%eax
}
   10b2b:	5b                   	pop    %ebx
   10b2c:	c3                   	ret    

00010b2d <put_fs_byte>:

//// 将一字节存放在fs段中指定内存地址处.
// 参数:val - 字节值;addr - 内存地址.
// %0 - 寄存器(字节值val);%1 - (内存地址addr).
static inline void put_fs_byte(char val,char *addr)
{
   10b2d:	83 ec 04             	sub    $0x4,%esp
   10b30:	8b 44 24 08          	mov    0x8(%esp),%eax
   10b34:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   10b37:	0f b6 04 24          	movzbl (%esp),%eax
   10b3b:	8b 54 24 0c          	mov    0xc(%esp),%edx
   10b3f:	64 88 02             	mov    %al,%fs:(%edx)
}
   10b42:	90                   	nop
   10b43:	83 c4 04             	add    $0x4,%esp
   10b46:	c3                   	ret    

00010b47 <file_read>:

// 文件读函数 - 根据i节点和文件结构，读取文件中数据。
// 由i节点我们可以知道设备号，由filp结构可以知道文件中当前读写指针位置。buf指定用户空间中缓冲区的位置，count是需要读取的字节数。
// 返回值是实际读取的字节数，或出错号（小于0）。
int file_read(struct m_inode * inode, struct file * filp, char * buf, int count)
{
   10b47:	83 ec 2c             	sub    $0x2c,%esp

	// 首先判断参数的有效性。若需要读取的字节计数count小于等于零，则返回0.若还需要读取的字节数不等于0,就循环执行下面操作，直到数据全
	// 部读出或遇到问题。在读循环操作过程中，我们根据i节点和文件表结构信息，并利用bmap()得到包含文件当前读写位置的数据块在设备上对应
	// 的逻辑块号nr。若nr不为0,则从i节点指定的设备上读取该逻辑块。如果读操作失败则退出循环。若nr为0,表示指定的数据块不存在，置缓冲
	// 块指针为NULL。
	if ((left = count) <= 0)
   10b4a:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   10b4e:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   10b52:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   10b57:	0f 8f 43 01 00 00    	jg     10ca0 <file_read+0x159>
		return 0;
   10b5d:	b8 00 00 00 00       	mov    $0x0,%eax
   10b62:	e9 83 01 00 00       	jmp    10cea <file_read+0x1a3>
	while (left) {
		// 根据文件的读写偏移位置得到当前写位置对应的逻辑块号
		if (nr = bmap(inode, (filp->f_pos) / BLOCK_SIZE)) {
   10b67:	8b 44 24 34          	mov    0x34(%esp),%eax
   10b6b:	8b 40 0c             	mov    0xc(%eax),%eax
   10b6e:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
   10b74:	85 c0                	test   %eax,%eax
   10b76:	0f 48 c2             	cmovs  %edx,%eax
   10b79:	c1 f8 0a             	sar    $0xa,%eax
   10b7c:	83 ec 08             	sub    $0x8,%esp
   10b7f:	50                   	push   %eax
   10b80:	ff 74 24 3c          	pushl  0x3c(%esp)
   10b84:	e8 2e db ff ff       	call   e6b7 <bmap>
   10b89:	83 c4 10             	add    $0x10,%esp
   10b8c:	89 44 24 0c          	mov    %eax,0xc(%esp)
   10b90:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   10b95:	74 2b                	je     10bc2 <file_read+0x7b>
			// 得到该逻辑块号对应的高速缓冲区
			if (!(bh = bread(inode->i_dev, nr)))
   10b97:	8b 44 24 30          	mov    0x30(%esp),%eax
   10b9b:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   10b9f:	0f b7 c0             	movzwl %ax,%eax
   10ba2:	83 ec 08             	sub    $0x8,%esp
   10ba5:	ff 74 24 14          	pushl  0x14(%esp)
   10ba9:	50                   	push   %eax
   10baa:	e8 37 eb ff ff       	call   f6e6 <bread>
   10baf:	83 c4 10             	add    $0x10,%esp
   10bb2:	89 44 24 14          	mov    %eax,0x14(%esp)
   10bb6:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   10bbb:	75 0d                	jne    10bca <file_read+0x83>
				break;
   10bbd:	e9 e9 00 00 00       	jmp    10cab <file_read+0x164>
		} else
			bh = NULL;
   10bc2:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
   10bc9:	00 
		// 接着我们计算文件读写指针在数据块中的偏移值nr，则在该数据块中我们希望读取的字节数为（BLOCK_SIZE - nr）。然后和现在还需读取的
		// 字节数left作比较，其中小值即为本次操作需读取的字节数chars。如果（BLOCK_SIZE - nr）> left，则说明该块是需要读取的最后一块
		// 数据，反之还需要读取下一块数据。之后调整读写文件指针。指针前移此次将读取的字节数chars。剩余字节数left相应减去chars。
		nr = filp->f_pos % BLOCK_SIZE;
   10bca:	8b 44 24 34          	mov    0x34(%esp),%eax
   10bce:	8b 40 0c             	mov    0xc(%eax),%eax
   10bd1:	99                   	cltd   
   10bd2:	c1 ea 16             	shr    $0x16,%edx
   10bd5:	01 d0                	add    %edx,%eax
   10bd7:	25 ff 03 00 00       	and    $0x3ff,%eax
   10bdc:	29 d0                	sub    %edx,%eax
   10bde:	89 44 24 0c          	mov    %eax,0xc(%esp)
		chars = MIN( BLOCK_SIZE - nr , left );
   10be2:	b8 00 04 00 00       	mov    $0x400,%eax
   10be7:	2b 44 24 0c          	sub    0xc(%esp),%eax
   10beb:	89 c2                	mov    %eax,%edx
   10bed:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   10bf1:	39 c2                	cmp    %eax,%edx
   10bf3:	0f 4e c2             	cmovle %edx,%eax
   10bf6:	89 44 24 18          	mov    %eax,0x18(%esp)
		filp->f_pos += chars;
   10bfa:	8b 44 24 34          	mov    0x34(%esp),%eax
   10bfe:	8b 50 0c             	mov    0xc(%eax),%edx
   10c01:	8b 44 24 18          	mov    0x18(%esp),%eax
   10c05:	01 c2                	add    %eax,%edx
   10c07:	8b 44 24 34          	mov    0x34(%esp),%eax
   10c0b:	89 50 0c             	mov    %edx,0xc(%eax)
		left -= chars;
   10c0e:	8b 44 24 18          	mov    0x18(%esp),%eax
   10c12:	29 44 24 1c          	sub    %eax,0x1c(%esp)
		// 若上面从设备上读到了数据，则将p指向缓冲块中开始读取数据的位置，并且复制chars字节到用户缓冲区buf中。否则往用户缓冲区中填入chars
		// 个值字节。
		if (bh) {
   10c16:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   10c1b:	74 74                	je     10c91 <file_read+0x14a>
			char * p = nr + bh->b_data;
   10c1d:	8b 44 24 14          	mov    0x14(%esp),%eax
   10c21:	8b 10                	mov    (%eax),%edx
   10c23:	8b 44 24 0c          	mov    0xc(%esp),%eax
   10c27:	01 d0                	add    %edx,%eax
   10c29:	89 44 24 10          	mov    %eax,0x10(%esp)
			while (chars-- > 0)
   10c2d:	eb 29                	jmp    10c58 <file_read+0x111>
				put_fs_byte(*(p++), buf++);
   10c2f:	8b 44 24 38          	mov    0x38(%esp),%eax
   10c33:	8d 50 01             	lea    0x1(%eax),%edx
   10c36:	89 54 24 38          	mov    %edx,0x38(%esp)
   10c3a:	8b 54 24 10          	mov    0x10(%esp),%edx
   10c3e:	8d 4a 01             	lea    0x1(%edx),%ecx
   10c41:	89 4c 24 10          	mov    %ecx,0x10(%esp)
   10c45:	0f b6 12             	movzbl (%edx),%edx
   10c48:	0f be d2             	movsbl %dl,%edx
   10c4b:	83 ec 08             	sub    $0x8,%esp
   10c4e:	50                   	push   %eax
   10c4f:	52                   	push   %edx
   10c50:	e8 d8 fe ff ff       	call   10b2d <put_fs_byte>
   10c55:	83 c4 10             	add    $0x10,%esp
		left -= chars;
		// 若上面从设备上读到了数据，则将p指向缓冲块中开始读取数据的位置，并且复制chars字节到用户缓冲区buf中。否则往用户缓冲区中填入chars
		// 个值字节。
		if (bh) {
			char * p = nr + bh->b_data;
			while (chars-- > 0)
   10c58:	8b 44 24 18          	mov    0x18(%esp),%eax
   10c5c:	8d 50 ff             	lea    -0x1(%eax),%edx
   10c5f:	89 54 24 18          	mov    %edx,0x18(%esp)
   10c63:	85 c0                	test   %eax,%eax
   10c65:	7f c8                	jg     10c2f <file_read+0xe8>
				put_fs_byte(*(p++), buf++);
			brelse(bh);
   10c67:	83 ec 0c             	sub    $0xc,%esp
   10c6a:	ff 74 24 20          	pushl  0x20(%esp)
   10c6e:	e8 1d ea ff ff       	call   f690 <brelse>
   10c73:	83 c4 10             	add    $0x10,%esp
   10c76:	eb 28                	jmp    10ca0 <file_read+0x159>
		} else {
			while (chars-- > 0)
				put_fs_byte(0, buf++);
   10c78:	8b 44 24 38          	mov    0x38(%esp),%eax
   10c7c:	8d 50 01             	lea    0x1(%eax),%edx
   10c7f:	89 54 24 38          	mov    %edx,0x38(%esp)
   10c83:	83 ec 08             	sub    $0x8,%esp
   10c86:	50                   	push   %eax
   10c87:	6a 00                	push   $0x0
   10c89:	e8 9f fe ff ff       	call   10b2d <put_fs_byte>
   10c8e:	83 c4 10             	add    $0x10,%esp
			char * p = nr + bh->b_data;
			while (chars-- > 0)
				put_fs_byte(*(p++), buf++);
			brelse(bh);
		} else {
			while (chars-- > 0)
   10c91:	8b 44 24 18          	mov    0x18(%esp),%eax
   10c95:	8d 50 ff             	lea    -0x1(%eax),%edx
   10c98:	89 54 24 18          	mov    %edx,0x18(%esp)
   10c9c:	85 c0                	test   %eax,%eax
   10c9e:	7f d8                	jg     10c78 <file_read+0x131>
	// 部读出或遇到问题。在读循环操作过程中，我们根据i节点和文件表结构信息，并利用bmap()得到包含文件当前读写位置的数据块在设备上对应
	// 的逻辑块号nr。若nr不为0,则从i节点指定的设备上读取该逻辑块。如果读操作失败则退出循环。若nr为0,表示指定的数据块不存在，置缓冲
	// 块指针为NULL。
	if ((left = count) <= 0)
		return 0;
	while (left) {
   10ca0:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   10ca5:	0f 85 bc fe ff ff    	jne    10b67 <file_read+0x20>
				put_fs_byte(0, buf++);
		}
	}
	// 修改该i节点的访问时间为当前时间。返回读取的字节数，若读取字节数为0,则返回出错号。
	// CURRENT_TIME是定义在include/linux/sched.h上的宏，用于计算UNIX时间。即从1970年1月1日0时0秒开始，到当前时间。单位是秒。
	inode->i_atime = CURRENT_TIME;
   10cab:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   10cb0:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
   10cb6:	01 d0                	add    %edx,%eax
   10cb8:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   10cbd:	f7 e2                	mul    %edx
   10cbf:	c1 ea 05             	shr    $0x5,%edx
   10cc2:	a1 04 eb 02 00       	mov    0x2eb04,%eax
   10cc7:	01 c2                	add    %eax,%edx
   10cc9:	8b 44 24 30          	mov    0x30(%esp),%eax
   10ccd:	89 50 28             	mov    %edx,0x28(%eax)
	return (count - left) ? (count-left) : -ERROR;
   10cd0:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   10cd4:	3b 44 24 1c          	cmp    0x1c(%esp),%eax
   10cd8:	74 0a                	je     10ce4 <file_read+0x19d>
   10cda:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   10cde:	2b 44 24 1c          	sub    0x1c(%esp),%eax
   10ce2:	eb 05                	jmp    10ce9 <file_read+0x1a2>
   10ce4:	b8 9d ff ff ff       	mov    $0xffffff9d,%eax
   10ce9:	90                   	nop
}
   10cea:	83 c4 2c             	add    $0x2c,%esp
   10ced:	c3                   	ret    

00010cee <file_write>:

// 文件写函数 - 根据i节点和文件结构信息，将用户数据写入文件中。
// 由i节点我们可以知道设备号，而由file结构可以知道文件中当前读写指针位置。buf指定用户态中缓冲区的位置，count为需要写入的字节数。
// 返回值是实际写入的字节数，或出错号（小于0).
int file_write(struct m_inode * inode, struct file * filp, char * buf, int count)
{
   10cee:	53                   	push   %ebx
   10cef:	83 ec 28             	sub    $0x28,%esp
	off_t pos;
	int block, c;
	struct buffer_head * bh;
	char * p;
	int i = 0;
   10cf2:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   10cf9:	00 
	 */
	/*
	 * OK，当许多进程同时写时，append操作可能不行，但那又怎样。不管怎样那样做会导致混乱一团。
	 */
	// 首先确定数据写入文件的位置。如果是要向文件后添加数据，则将文件读写指针移到文件尾部。否则就将在文件当前读写指针处写入。
	if (filp->f_flags & O_APPEND)
   10cfa:	8b 44 24 34          	mov    0x34(%esp),%eax
   10cfe:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   10d02:	0f b7 c0             	movzwl %ax,%eax
   10d05:	25 00 04 00 00       	and    $0x400,%eax
   10d0a:	85 c0                	test   %eax,%eax
   10d0c:	74 10                	je     10d1e <file_write+0x30>
		pos = inode->i_size;
   10d0e:	8b 44 24 30          	mov    0x30(%esp),%eax
   10d12:	8b 40 04             	mov    0x4(%eax),%eax
   10d15:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   10d19:	e9 35 01 00 00       	jmp    10e53 <file_write+0x165>
	else
		pos = filp->f_pos;
   10d1e:	8b 44 24 34          	mov    0x34(%esp),%eax
   10d22:	8b 40 0c             	mov    0xc(%eax),%eax
   10d25:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	// 然后在已写入字节数i（刚开始时为0）小于指定写入字节数count时，循环执行以下操作。在循环操作过程中，我们先取文件数据块
	// 号（pos/BLOCK_SIZE）在设备上对应的逻辑块号block。如果对应的逻辑块不存在就创建一块。如果得到的逻辑块号 = 0,则表示
	// 创建失败，于是退出循环。否则我们根据该逻辑块号读取设备上的相应逻辑块，若出错也退出循环。
	while (i < count) {
   10d29:	e9 25 01 00 00       	jmp    10e53 <file_write+0x165>
		if (!(block = create_block(inode, pos / BLOCK_SIZE)))
   10d2e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   10d32:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
   10d38:	85 c0                	test   %eax,%eax
   10d3a:	0f 48 c2             	cmovs  %edx,%eax
   10d3d:	c1 f8 0a             	sar    $0xa,%eax
   10d40:	83 ec 08             	sub    $0x8,%esp
   10d43:	50                   	push   %eax
   10d44:	ff 74 24 3c          	pushl  0x3c(%esp)
   10d48:	e8 86 d9 ff ff       	call   e6d3 <create_block>
   10d4d:	83 c4 10             	add    $0x10,%esp
   10d50:	89 44 24 0c          	mov    %eax,0xc(%esp)
   10d54:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   10d59:	0f 84 04 01 00 00    	je     10e63 <file_write+0x175>
			break;
		if (!(bh = bread(inode->i_dev, block)))
   10d5f:	8b 44 24 30          	mov    0x30(%esp),%eax
   10d63:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   10d67:	0f b7 c0             	movzwl %ax,%eax
   10d6a:	83 ec 08             	sub    $0x8,%esp
   10d6d:	ff 74 24 14          	pushl  0x14(%esp)
   10d71:	50                   	push   %eax
   10d72:	e8 6f e9 ff ff       	call   f6e6 <bread>
   10d77:	83 c4 10             	add    $0x10,%esp
   10d7a:	89 44 24 08          	mov    %eax,0x8(%esp)
   10d7e:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   10d83:	0f 84 dd 00 00 00    	je     10e66 <file_write+0x178>
			break;
		// 此时缓冲块指针bh正指向刚读入的文件数据块。现在再求出文件当前读写指针在该数据块中的偏移值c，并将指针p指向缓冲块中开始写入
		// 数据的位置，并置该缓冲块已修改标志。对于块中当前指针，从开始读写位置到块末共可写入c = (BLOCK_SIZE - c)个字节。若c大
		// 于剩余还需写入的字节数（count - i），则此次只需再定稿c = (count-i)个字节即可。
		c = pos % BLOCK_SIZE;
   10d89:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   10d8d:	99                   	cltd   
   10d8e:	c1 ea 16             	shr    $0x16,%edx
   10d91:	01 d0                	add    %edx,%eax
   10d93:	25 ff 03 00 00       	and    $0x3ff,%eax
   10d98:	29 d0                	sub    %edx,%eax
   10d9a:	89 44 24 18          	mov    %eax,0x18(%esp)
		p = c + bh->b_data;
   10d9e:	8b 44 24 08          	mov    0x8(%esp),%eax
   10da2:	8b 10                	mov    (%eax),%edx
   10da4:	8b 44 24 18          	mov    0x18(%esp),%eax
   10da8:	01 d0                	add    %edx,%eax
   10daa:	89 44 24 14          	mov    %eax,0x14(%esp)
		bh->b_dirt = 1;
   10dae:	8b 44 24 08          	mov    0x8(%esp),%eax
   10db2:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
		c = BLOCK_SIZE - c;
   10db6:	b8 00 04 00 00       	mov    $0x400,%eax
   10dbb:	2b 44 24 18          	sub    0x18(%esp),%eax
   10dbf:	89 44 24 18          	mov    %eax,0x18(%esp)
		if (c > count - i) c = count - i;
   10dc3:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   10dc7:	2b 44 24 10          	sub    0x10(%esp),%eax
   10dcb:	3b 44 24 18          	cmp    0x18(%esp),%eax
   10dcf:	7d 0c                	jge    10ddd <file_write+0xef>
   10dd1:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   10dd5:	2b 44 24 10          	sub    0x10(%esp),%eax
   10dd9:	89 44 24 18          	mov    %eax,0x18(%esp)
		// 在写入数据之前，我们先预先设置好下一次循环操作要读写文件中的位置。因此我们把pos指针前移此次需要写入的字节数。如果此时pos
		// 位置值超过了文件当前长度，则修改i节点文件长度字段，并置i节点已修改标志。然后把此次要写入的字节数c累加到已写入字节计数值i中，
		// 供循环判断。使用接着双用户缓冲区buf中复制c个字节到调整缓冲块中p指向的开始位置处。复制完后就释放该缓冲块。
		pos += c;
   10ddd:	8b 44 24 18          	mov    0x18(%esp),%eax
   10de1:	01 44 24 1c          	add    %eax,0x1c(%esp)
		if (pos > inode->i_size) {
   10de5:	8b 44 24 30          	mov    0x30(%esp),%eax
   10de9:	8b 50 04             	mov    0x4(%eax),%edx
   10dec:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   10df0:	39 c2                	cmp    %eax,%edx
   10df2:	73 13                	jae    10e07 <file_write+0x119>
			inode->i_size = pos;
   10df4:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   10df8:	8b 44 24 30          	mov    0x30(%esp),%eax
   10dfc:	89 50 04             	mov    %edx,0x4(%eax)
			inode->i_dirt = 1;
   10dff:	8b 44 24 30          	mov    0x30(%esp),%eax
   10e03:	c6 40 37 01          	movb   $0x1,0x37(%eax)
		}
		i += c;
   10e07:	8b 44 24 18          	mov    0x18(%esp),%eax
   10e0b:	01 44 24 10          	add    %eax,0x10(%esp)
		while (c-- > 0)
   10e0f:	eb 24                	jmp    10e35 <file_write+0x147>
			*(p++) = get_fs_byte(buf++);
   10e11:	8b 5c 24 14          	mov    0x14(%esp),%ebx
   10e15:	8d 43 01             	lea    0x1(%ebx),%eax
   10e18:	89 44 24 14          	mov    %eax,0x14(%esp)
   10e1c:	8b 44 24 38          	mov    0x38(%esp),%eax
   10e20:	8d 50 01             	lea    0x1(%eax),%edx
   10e23:	89 54 24 38          	mov    %edx,0x38(%esp)
   10e27:	83 ec 0c             	sub    $0xc,%esp
   10e2a:	50                   	push   %eax
   10e2b:	e8 ef fc ff ff       	call   10b1f <get_fs_byte>
   10e30:	83 c4 10             	add    $0x10,%esp
   10e33:	88 03                	mov    %al,(%ebx)
		if (pos > inode->i_size) {
			inode->i_size = pos;
			inode->i_dirt = 1;
		}
		i += c;
		while (c-- > 0)
   10e35:	8b 44 24 18          	mov    0x18(%esp),%eax
   10e39:	8d 50 ff             	lea    -0x1(%eax),%edx
   10e3c:	89 54 24 18          	mov    %edx,0x18(%esp)
   10e40:	85 c0                	test   %eax,%eax
   10e42:	7f cd                	jg     10e11 <file_write+0x123>
			*(p++) = get_fs_byte(buf++);
		brelse(bh);
   10e44:	83 ec 0c             	sub    $0xc,%esp
   10e47:	ff 74 24 14          	pushl  0x14(%esp)
   10e4b:	e8 40 e8 ff ff       	call   f690 <brelse>
   10e50:	83 c4 10             	add    $0x10,%esp
	else
		pos = filp->f_pos;
	// 然后在已写入字节数i（刚开始时为0）小于指定写入字节数count时，循环执行以下操作。在循环操作过程中，我们先取文件数据块
	// 号（pos/BLOCK_SIZE）在设备上对应的逻辑块号block。如果对应的逻辑块不存在就创建一块。如果得到的逻辑块号 = 0,则表示
	// 创建失败，于是退出循环。否则我们根据该逻辑块号读取设备上的相应逻辑块，若出错也退出循环。
	while (i < count) {
   10e53:	8b 44 24 10          	mov    0x10(%esp),%eax
   10e57:	3b 44 24 3c          	cmp    0x3c(%esp),%eax
   10e5b:	0f 8c cd fe ff ff    	jl     10d2e <file_write+0x40>
   10e61:	eb 04                	jmp    10e67 <file_write+0x179>
		if (!(block = create_block(inode, pos / BLOCK_SIZE)))
			break;
   10e63:	90                   	nop
   10e64:	eb 01                	jmp    10e67 <file_write+0x179>
		if (!(bh = bread(inode->i_dev, block)))
			break;
   10e66:	90                   	nop
		brelse(bh);
    }
	// 当数据已经全部写入文件或者在写操作过程中发生问题时就会退出循环。此时我们更改文件修改时间为当前时间，并调整文件读写指针。如果
	// 此次操作不是在文件尾添加数据，则把文件读写指针调整到当前读写位置pos处，并更改文件i节点的修改时间为当前时间。最后返回写入的
	// 字节数，若写入字节数为0,则返回出错号-1。
	inode->i_mtime = CURRENT_TIME;
   10e67:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   10e6c:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
   10e72:	01 d0                	add    %edx,%eax
   10e74:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   10e79:	f7 e2                	mul    %edx
   10e7b:	c1 ea 05             	shr    $0x5,%edx
   10e7e:	a1 04 eb 02 00       	mov    0x2eb04,%eax
   10e83:	01 c2                	add    %eax,%edx
   10e85:	8b 44 24 30          	mov    0x30(%esp),%eax
   10e89:	89 50 08             	mov    %edx,0x8(%eax)
	if (!(filp->f_flags & O_APPEND)) {
   10e8c:	8b 44 24 34          	mov    0x34(%esp),%eax
   10e90:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   10e94:	0f b7 c0             	movzwl %ax,%eax
   10e97:	25 00 04 00 00       	and    $0x400,%eax
   10e9c:	85 c0                	test   %eax,%eax
   10e9e:	75 30                	jne    10ed0 <file_write+0x1e2>
		filp->f_pos = pos;
   10ea0:	8b 44 24 34          	mov    0x34(%esp),%eax
   10ea4:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   10ea8:	89 50 0c             	mov    %edx,0xc(%eax)
		inode->i_ctime = CURRENT_TIME;
   10eab:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   10eb0:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
   10eb6:	01 d0                	add    %edx,%eax
   10eb8:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   10ebd:	f7 e2                	mul    %edx
   10ebf:	c1 ea 05             	shr    $0x5,%edx
   10ec2:	a1 04 eb 02 00       	mov    0x2eb04,%eax
   10ec7:	01 c2                	add    %eax,%edx
   10ec9:	8b 44 24 30          	mov    0x30(%esp),%eax
   10ecd:	89 50 2c             	mov    %edx,0x2c(%eax)
	}
	return (i ? i : -1);
   10ed0:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   10ed5:	74 06                	je     10edd <file_write+0x1ef>
   10ed7:	8b 44 24 10          	mov    0x10(%esp),%eax
   10edb:	eb 05                	jmp    10ee2 <file_write+0x1f4>
   10edd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10ee2:	83 c4 28             	add    $0x28,%esp
   10ee5:	5b                   	pop    %ebx
   10ee6:	c3                   	ret    

00010ee7 <put_fs_byte>:

//// 将一字节存放在fs段中指定内存地址处.
// 参数:val - 字节值;addr - 内存地址.
// %0 - 寄存器(字节值val);%1 - (内存地址addr).
static inline void put_fs_byte(char val,char *addr)
{
   10ee7:	83 ec 04             	sub    $0x4,%esp
   10eea:	8b 44 24 08          	mov    0x8(%esp),%eax
   10eee:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   10ef1:	0f b6 04 24          	movzbl (%esp),%eax
   10ef5:	8b 54 24 0c          	mov    0xc(%esp),%edx
   10ef9:	64 88 02             	mov    %al,%fs:(%edx)
}
   10efc:	90                   	nop
   10efd:	83 c4 04             	add    $0x4,%esp
   10f00:	c3                   	ret    

00010f01 <cp_stat>:
#include <asm/segment.h>

// 复制文件状态信息。
// 参数inode是文件i节点，statbuf是用户数据空间中stat文件状态结构指针，用于存放取得的状态信息。
static void cp_stat(struct m_inode * inode, struct stat * statbuf)
{
   10f01:	83 ec 3c             	sub    $0x3c,%esp
	struct stat tmp;
	int i;

	// 首先验证（或分配）存放数据的内存空间。然后临时复制相应节点上的信息。
	verify_area(statbuf, sizeof (struct stat));
   10f04:	83 ec 08             	sub    $0x8,%esp
   10f07:	6a 20                	push   $0x20
   10f09:	ff 74 24 50          	pushl  0x50(%esp)
   10f0d:	e8 91 74 ff ff       	call   83a3 <verify_area>
   10f12:	83 c4 10             	add    $0x10,%esp
	tmp.st_dev = inode->i_dev;              						// 文件所在设备号。
   10f15:	8b 44 24 40          	mov    0x40(%esp),%eax
   10f19:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   10f1d:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	tmp.st_ino = inode->i_num;              						// 文件i节点号。
   10f22:	8b 44 24 40          	mov    0x40(%esp),%eax
   10f26:	0f b7 40 32          	movzwl 0x32(%eax),%eax
   10f2a:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	tmp.st_mode = inode->i_mode;            						// 文件属性。
   10f2f:	8b 44 24 40          	mov    0x40(%esp),%eax
   10f33:	0f b7 00             	movzwl (%eax),%eax
   10f36:	66 89 44 24 10       	mov    %ax,0x10(%esp)
	tmp.st_nlink = inode->i_nlinks;         						// 文件连接数。
   10f3b:	8b 44 24 40          	mov    0x40(%esp),%eax
   10f3f:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   10f43:	88 44 24 12          	mov    %al,0x12(%esp)
	tmp.st_uid = inode->i_uid;              						// 文件的用户ID。
   10f47:	8b 44 24 40          	mov    0x40(%esp),%eax
   10f4b:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   10f4f:	66 89 44 24 14       	mov    %ax,0x14(%esp)
	tmp.st_gid = inode->i_gid;              						// 文件的组ID。
   10f54:	8b 44 24 40          	mov    0x40(%esp),%eax
   10f58:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
   10f5c:	0f b6 c0             	movzbl %al,%eax
   10f5f:	66 89 44 24 16       	mov    %ax,0x16(%esp)
	tmp.st_rdev = inode->i_zone[0];         						// 设备号（若是特殊字符文件或块设备文件)。
   10f64:	8b 44 24 40          	mov    0x40(%esp),%eax
   10f68:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   10f6c:	66 89 44 24 18       	mov    %ax,0x18(%esp)
	tmp.st_size = inode->i_size;            						// 文件字节长度（如果文件是常规文件）。
   10f71:	8b 44 24 40          	mov    0x40(%esp),%eax
   10f75:	8b 40 04             	mov    0x4(%eax),%eax
   10f78:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	tmp.st_atime = inode->i_atime;          						// 最后访问时间。
   10f7c:	8b 44 24 40          	mov    0x40(%esp),%eax
   10f80:	8b 40 28             	mov    0x28(%eax),%eax
   10f83:	89 44 24 20          	mov    %eax,0x20(%esp)
	tmp.st_mtime = inode->i_mtime;          						// 最后修改时间。
   10f87:	8b 44 24 40          	mov    0x40(%esp),%eax
   10f8b:	8b 40 08             	mov    0x8(%eax),%eax
   10f8e:	89 44 24 24          	mov    %eax,0x24(%esp)
	tmp.st_ctime = inode->i_ctime;          						// 最后i节点修改时间。
   10f92:	8b 44 24 40          	mov    0x40(%esp),%eax
   10f96:	8b 40 2c             	mov    0x2c(%eax),%eax
   10f99:	89 44 24 28          	mov    %eax,0x28(%esp)
	// 最后将这些状态信息复制到用户缓冲区中。
	for (i = 0 ; i<sizeof (tmp) ; i++)
   10f9d:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%esp)
   10fa4:	00 
   10fa5:	eb 2c                	jmp    10fd3 <cp_stat+0xd2>
		put_fs_byte(((char *) &tmp)[i], i + (char *) statbuf);
   10fa7:	8b 54 24 2c          	mov    0x2c(%esp),%edx
   10fab:	8b 44 24 44          	mov    0x44(%esp),%eax
   10faf:	01 c2                	add    %eax,%edx
   10fb1:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   10fb5:	8d 4c 24 0c          	lea    0xc(%esp),%ecx
   10fb9:	01 c8                	add    %ecx,%eax
   10fbb:	0f b6 00             	movzbl (%eax),%eax
   10fbe:	0f be c0             	movsbl %al,%eax
   10fc1:	83 ec 08             	sub    $0x8,%esp
   10fc4:	52                   	push   %edx
   10fc5:	50                   	push   %eax
   10fc6:	e8 1c ff ff ff       	call   10ee7 <put_fs_byte>
   10fcb:	83 c4 10             	add    $0x10,%esp
	tmp.st_size = inode->i_size;            						// 文件字节长度（如果文件是常规文件）。
	tmp.st_atime = inode->i_atime;          						// 最后访问时间。
	tmp.st_mtime = inode->i_mtime;          						// 最后修改时间。
	tmp.st_ctime = inode->i_ctime;          						// 最后i节点修改时间。
	// 最后将这些状态信息复制到用户缓冲区中。
	for (i = 0 ; i<sizeof (tmp) ; i++)
   10fce:	83 44 24 2c 01       	addl   $0x1,0x2c(%esp)
   10fd3:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   10fd7:	83 f8 1f             	cmp    $0x1f,%eax
   10fda:	76 cb                	jbe    10fa7 <cp_stat+0xa6>
		put_fs_byte(((char *) &tmp)[i], i + (char *) statbuf);
}
   10fdc:	90                   	nop
   10fdd:	83 c4 3c             	add    $0x3c,%esp
   10fe0:	c3                   	ret    

00010fe1 <sys_stat>:
// 文件状态系统调用。
// 根据给定的文件名获取相关文件状态信息。
// 参数filename是指定的文件名，statbuf是存放状态信息的缓冲区指针。
// 返回：成功返回0,若出错则返回出错码。
int sys_stat(char * filename, struct stat * statbuf)
{
   10fe1:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 首先根据文件名找出对应的i节点。然后将i节点上的文件状态信息复制到用户缓冲区中，并放回i节点。
	if (!(inode = namei(filename)))
   10fe4:	83 ec 0c             	sub    $0xc,%esp
   10fe7:	ff 74 24 2c          	pushl  0x2c(%esp)
   10feb:	e8 54 25 00 00       	call   13544 <namei>
   10ff0:	83 c4 10             	add    $0x10,%esp
   10ff3:	89 44 24 0c          	mov    %eax,0xc(%esp)
   10ff7:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   10ffc:	75 07                	jne    11005 <sys_stat+0x24>
		return -ENOENT;
   10ffe:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   11003:	eb 27                	jmp    1102c <sys_stat+0x4b>
	cp_stat(inode, statbuf);
   11005:	83 ec 08             	sub    $0x8,%esp
   11008:	ff 74 24 2c          	pushl  0x2c(%esp)
   1100c:	ff 74 24 18          	pushl  0x18(%esp)
   11010:	e8 ec fe ff ff       	call   10f01 <cp_stat>
   11015:	83 c4 10             	add    $0x10,%esp
	iput(inode);
   11018:	83 ec 0c             	sub    $0xc,%esp
   1101b:	ff 74 24 18          	pushl  0x18(%esp)
   1101f:	e8 cb d6 ff ff       	call   e6ef <iput>
   11024:	83 c4 10             	add    $0x10,%esp
	return 0;
   11027:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1102c:	83 c4 1c             	add    $0x1c,%esp
   1102f:	c3                   	ret    

00011030 <sys_lstat>:

// 文件状态系统调用。
// 根据给定的文件名获取相关文件状态信息。文件路径名中有符号链接文件名，则取符号文件的状态。
// 参数：filename是指定的文件名，statbuf是存放状态信息的缓冲区指针。
int sys_lstat(char * filename, struct stat * statbuf)
{
   11030:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 首先根据文件名找出对应的i节点。然后将i节点上的文件状态信息复制到用户缓冲区中，并放回该i节点。
	if (!(inode = lnamei(filename)))        					// 取指定路径名i节点，不跟随符号链接。
   11033:	83 ec 0c             	sub    $0xc,%esp
   11036:	ff 74 24 2c          	pushl  0x2c(%esp)
   1103a:	e8 eb 24 00 00       	call   1352a <lnamei>
   1103f:	83 c4 10             	add    $0x10,%esp
   11042:	89 44 24 0c          	mov    %eax,0xc(%esp)
   11046:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   1104b:	75 07                	jne    11054 <sys_lstat+0x24>
		return -ENOENT;
   1104d:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   11052:	eb 27                	jmp    1107b <sys_lstat+0x4b>
	cp_stat(inode, statbuf);
   11054:	83 ec 08             	sub    $0x8,%esp
   11057:	ff 74 24 2c          	pushl  0x2c(%esp)
   1105b:	ff 74 24 18          	pushl  0x18(%esp)
   1105f:	e8 9d fe ff ff       	call   10f01 <cp_stat>
   11064:	83 c4 10             	add    $0x10,%esp
	iput(inode);
   11067:	83 ec 0c             	sub    $0xc,%esp
   1106a:	ff 74 24 18          	pushl  0x18(%esp)
   1106e:	e8 7c d6 ff ff       	call   e6ef <iput>
   11073:	83 c4 10             	add    $0x10,%esp
	return 0;
   11076:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1107b:	83 c4 1c             	add    $0x1c,%esp
   1107e:	c3                   	ret    

0001107f <sys_fstat>:
// 文件状态系统调用。
// 根据给定的文件句柄获取相关文件状态信息。
// 参数fd是指定文件的句柄（描述符），statbuf是存放状态信息的缓冲区指针。
// 返回：成功返回0,若出错则返回出错码。
int sys_fstat(unsigned int fd, struct stat * statbuf)
{
   1107f:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 首先取文件句柄对应的文件结构，然后从中得到文件的i节点。然后将i节点上的文件状态信息复制到用户缓冲区中。如果
	// 文件句柄值大于一个程序最多打开文件数NR_OPEN，或者该句柄的文件结构指针为空，或者对应文件结构的i节点字段为空，
	// 则出错，返回出错码并退出。
	if (fd >= NR_OPEN || !(f = current->filp[fd]) || !(inode = f->f_inode))
   11082:	83 7c 24 20 13       	cmpl   $0x13,0x20(%esp)
   11087:	77 30                	ja     110b9 <sys_fstat+0x3a>
   11089:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1108e:	8b 54 24 20          	mov    0x20(%esp),%edx
   11092:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   11098:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   1109c:	89 44 24 0c          	mov    %eax,0xc(%esp)
   110a0:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   110a5:	74 12                	je     110b9 <sys_fstat+0x3a>
   110a7:	8b 44 24 0c          	mov    0xc(%esp),%eax
   110ab:	8b 40 08             	mov    0x8(%eax),%eax
   110ae:	89 44 24 08          	mov    %eax,0x8(%esp)
   110b2:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   110b7:	75 07                	jne    110c0 <sys_fstat+0x41>
		return -EBADF;
   110b9:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   110be:	eb 18                	jmp    110d8 <sys_fstat+0x59>
	cp_stat(inode, statbuf);
   110c0:	83 ec 08             	sub    $0x8,%esp
   110c3:	ff 74 24 2c          	pushl  0x2c(%esp)
   110c7:	ff 74 24 14          	pushl  0x14(%esp)
   110cb:	e8 31 fe ff ff       	call   10f01 <cp_stat>
   110d0:	83 c4 10             	add    $0x10,%esp
	return 0;
   110d3:	b8 00 00 00 00       	mov    $0x0,%eax
}
   110d8:	83 c4 1c             	add    $0x1c,%esp
   110db:	c3                   	ret    

000110dc <sys_readlink>:
// 该调用读取符号链接文件的内容（即该符号链接所指向文件的路径名字符串），并放到指定长度的用户缓冲区中。若缓冲区
// 太小，就会截断符号链接的内容。
// 参数：path -- 符号链接文件路径名；buf -- 用户缓冲区；bufsiz -- 缓冲区长度。
// 返回：成功则返回放入缓冲区中的字符数；若失败则返回出错码。
int sys_readlink(const char * path, char * buf, int bufsiz)
{
   110dc:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	char c;

	// 首先检查和验证函数参数的有效性，并对其进行调整。用户缓冲区字节长度bufsiz必须在1--1023之间。然后取得符号链接
	// 文件名的i节点，并读取该文件的第1块数据内容。之后放回i节点。
	if (bufsiz <= 0)
   110df:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   110e4:	7f 0a                	jg     110f0 <sys_readlink+0x14>
		return -EBADF;
   110e6:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   110eb:	e9 07 01 00 00       	jmp    111f7 <sys_readlink+0x11b>
	if (bufsiz > 1023)
   110f0:	81 7c 24 28 ff 03 00 	cmpl   $0x3ff,0x28(%esp)
   110f7:	00 
   110f8:	7e 08                	jle    11102 <sys_readlink+0x26>
		bufsiz = 1023;
   110fa:	c7 44 24 28 ff 03 00 	movl   $0x3ff,0x28(%esp)
   11101:	00 
	verify_area(buf, bufsiz);
   11102:	83 ec 08             	sub    $0x8,%esp
   11105:	ff 74 24 30          	pushl  0x30(%esp)
   11109:	ff 74 24 30          	pushl  0x30(%esp)
   1110d:	e8 91 72 ff ff       	call   83a3 <verify_area>
   11112:	83 c4 10             	add    $0x10,%esp
	if (!(inode = lnamei(path)))
   11115:	83 ec 0c             	sub    $0xc,%esp
   11118:	ff 74 24 2c          	pushl  0x2c(%esp)
   1111c:	e8 09 24 00 00       	call   1352a <lnamei>
   11121:	83 c4 10             	add    $0x10,%esp
   11124:	89 44 24 04          	mov    %eax,0x4(%esp)
   11128:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   1112d:	75 0a                	jne    11139 <sys_readlink+0x5d>
		return -ENOENT;
   1112f:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   11134:	e9 be 00 00 00       	jmp    111f7 <sys_readlink+0x11b>
	if (inode->i_zone[0])
   11139:	8b 44 24 04          	mov    0x4(%esp),%eax
   1113d:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   11141:	66 85 c0             	test   %ax,%ax
   11144:	74 29                	je     1116f <sys_readlink+0x93>
		bh = bread(inode->i_dev, inode->i_zone[0]);
   11146:	8b 44 24 04          	mov    0x4(%esp),%eax
   1114a:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   1114e:	0f b7 d0             	movzwl %ax,%edx
   11151:	8b 44 24 04          	mov    0x4(%esp),%eax
   11155:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   11159:	0f b7 c0             	movzwl %ax,%eax
   1115c:	83 ec 08             	sub    $0x8,%esp
   1115f:	52                   	push   %edx
   11160:	50                   	push   %eax
   11161:	e8 80 e5 ff ff       	call   f6e6 <bread>
   11166:	83 c4 10             	add    $0x10,%esp
   11169:	89 44 24 0c          	mov    %eax,0xc(%esp)
   1116d:	eb 08                	jmp    11177 <sys_readlink+0x9b>
	else
		bh = NULL;
   1116f:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   11176:	00 
	iput(inode);
   11177:	83 ec 0c             	sub    $0xc,%esp
   1117a:	ff 74 24 10          	pushl  0x10(%esp)
   1117e:	e8 6c d5 ff ff       	call   e6ef <iput>
   11183:	83 c4 10             	add    $0x10,%esp
	// 如果读取文件数据内容成功，则从内容中复制最多bufsiz个字符到用户缓冲区中，不复制NULL字符。最后释放缓冲块，并返回
	// 复制的字节数。
	if (!bh)
   11186:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   1118b:	75 07                	jne    11194 <sys_readlink+0xb8>
		return 0;
   1118d:	b8 00 00 00 00       	mov    $0x0,%eax
   11192:	eb 63                	jmp    111f7 <sys_readlink+0x11b>
	i = 0;
   11194:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   1119b:	00 
	while (i < bufsiz && (c = bh->b_data[i])) {
   1119c:	eb 22                	jmp    111c0 <sys_readlink+0xe4>
		i++;
   1119e:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
		put_fs_byte(c, buf++);
   111a3:	8b 44 24 24          	mov    0x24(%esp),%eax
   111a7:	8d 50 01             	lea    0x1(%eax),%edx
   111aa:	89 54 24 24          	mov    %edx,0x24(%esp)
   111ae:	0f be 54 24 03       	movsbl 0x3(%esp),%edx
   111b3:	83 ec 08             	sub    $0x8,%esp
   111b6:	50                   	push   %eax
   111b7:	52                   	push   %edx
   111b8:	e8 2a fd ff ff       	call   10ee7 <put_fs_byte>
   111bd:	83 c4 10             	add    $0x10,%esp
	// 如果读取文件数据内容成功，则从内容中复制最多bufsiz个字符到用户缓冲区中，不复制NULL字符。最后释放缓冲块，并返回
	// 复制的字节数。
	if (!bh)
		return 0;
	i = 0;
	while (i < bufsiz && (c = bh->b_data[i])) {
   111c0:	8b 44 24 08          	mov    0x8(%esp),%eax
   111c4:	3b 44 24 28          	cmp    0x28(%esp),%eax
   111c8:	7d 1a                	jge    111e4 <sys_readlink+0x108>
   111ca:	8b 44 24 0c          	mov    0xc(%esp),%eax
   111ce:	8b 10                	mov    (%eax),%edx
   111d0:	8b 44 24 08          	mov    0x8(%esp),%eax
   111d4:	01 d0                	add    %edx,%eax
   111d6:	0f b6 00             	movzbl (%eax),%eax
   111d9:	88 44 24 03          	mov    %al,0x3(%esp)
   111dd:	80 7c 24 03 00       	cmpb   $0x0,0x3(%esp)
   111e2:	75 ba                	jne    1119e <sys_readlink+0xc2>
		i++;
		put_fs_byte(c, buf++);
	}
	brelse(bh);
   111e4:	83 ec 0c             	sub    $0xc,%esp
   111e7:	ff 74 24 18          	pushl  0x18(%esp)
   111eb:	e8 a0 e4 ff ff       	call   f690 <brelse>
   111f0:	83 c4 10             	add    $0x10,%esp
	return i;
   111f3:	8b 44 24 08          	mov    0x8(%esp),%eax
}
   111f7:	83 c4 1c             	add    $0x1c,%esp
   111fa:	c3                   	ret    

000111fb <strncpy>:
// 复制源字符串count个字节到目的字符串.
// 如果源串长度小于count个字节,就附加空字符(NULL)到目的字符串.
// 参数: dest - 目的字符串指针, src - 源字符串指针, count - 复制字节数.
// %0 - esi(src), %1 - edi(dest), %2 - ecx(count).
static inline char * strncpy(char * dest, const char *src, int count)
{
   111fb:	57                   	push   %edi
   111fc:	56                   	push   %esi
   111fd:	53                   	push   %ebx
__asm__(
   111fe:	8b 54 24 14          	mov    0x14(%esp),%edx
   11202:	8b 5c 24 10          	mov    0x10(%esp),%ebx
   11206:	8b 4c 24 18          	mov    0x18(%esp),%ecx
   1120a:	89 d6                	mov    %edx,%esi
   1120c:	89 df                	mov    %ebx,%edi
   1120e:	fc                   	cld    
   1120f:	49                   	dec    %ecx
   11210:	78 08                	js     1121a <strncpy+0x1f>
   11212:	ac                   	lods   %ds:(%esi),%al
   11213:	aa                   	stos   %al,%es:(%edi)
   11214:	84 c0                	test   %al,%al
   11216:	75 f7                	jne    1120f <strncpy+0x14>
   11218:	f3 aa                	rep stos %al,%es:(%edi)
	"jne 1b\n\t"											// 不是,则向前跳转到标号1处继续复制.
	"rep\n\t"												// 否则,在目的串中存放剩余个数的空字符.
	"stosb\n"
	"2:"
	::"S" (src), "D" (dest), "c" (count):"ax");
return dest;												// 返回目的字符串指针.
   1121a:	8b 44 24 10          	mov    0x10(%esp),%eax
}
   1121e:	5b                   	pop    %ebx
   1121f:	5e                   	pop    %esi
   11220:	5f                   	pop    %edi
   11221:	c3                   	ret    

00011222 <strchr>:
// 在字符串中寻找第一个匹配的字符。
// 参数：s - 字符串，c - 欲寻找的字符。
// %0 - eax（__res），%1 - esi（字符串指针s），%2 - eax（字符c）。
// 返回：返回字符串中第一次出现匹配字符的指针。若没有找到匹配的字符，则返回空指针。
static inline char * strchr(const char * s, char c)
{
   11222:	56                   	push   %esi
   11223:	83 ec 04             	sub    $0x4,%esp
   11226:	8b 44 24 10          	mov    0x10(%esp),%eax
   1122a:	88 04 24             	mov    %al,(%esp)
register char * __res __asm__("ax");    					// __res是寄存器变量(eax).
__asm__(
   1122d:	8b 54 24 0c          	mov    0xc(%esp),%edx
   11231:	0f b6 04 24          	movzbl (%esp),%eax
   11235:	89 d6                	mov    %edx,%esi
   11237:	fc                   	cld    
   11238:	88 c4                	mov    %al,%ah
   1123a:	ac                   	lods   %ds:(%esi),%al
   1123b:	38 e0                	cmp    %ah,%al
   1123d:	74 09                	je     11248 <strchr+0x26>
   1123f:	84 c0                	test   %al,%al
   11241:	75 f7                	jne    1123a <strchr+0x18>
   11243:	be 01 00 00 00       	mov    $0x1,%esi
   11248:	89 f0                	mov    %esi,%eax
   1124a:	48                   	dec    %eax
	"movl $1, %1\n"                  						// 是，则说明没有找到匹配字符，esi置1。
	"2:\tmovl %1, %0\n\t"            						// 将指向匹配字符后一个字节处的指针值放入eax
	"decl %0"                       						// 将指针调整为指向匹配的字符。
	:"=a" (__res):"S" (s), "0" (c):);
return __res;                           					// 返回指针。
}
   1124b:	83 c4 04             	add    $0x4,%esp
   1124e:	5e                   	pop    %esi
   1124f:	c3                   	ret    

00011250 <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
   11250:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   11251:	8b 44 24 08          	mov    0x8(%esp),%eax
   11255:	64 8a 00             	mov    %fs:(%eax),%al
   11258:	89 c3                	mov    %eax,%ebx
	return _v;
   1125a:	89 d8                	mov    %ebx,%eax
}
   1125c:	5b                   	pop    %ebx
   1125d:	c3                   	ret    

0001125e <get_fs_long>:
//// 读取fs段中指定地址处的长字(4字节).
// 参数:addr - 指定的内存地址.
// %0 - (返回的长字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的长字.
static inline unsigned long get_fs_long(const unsigned long *addr)
{
   1125e:	83 ec 10             	sub    $0x10,%esp
	unsigned long _v;

	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
   11261:	8b 44 24 14          	mov    0x14(%esp),%eax
   11265:	64 8b 00             	mov    %fs:(%eax),%eax
   11268:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
   1126c:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   11270:	83 c4 10             	add    $0x10,%esp
   11273:	c3                   	ret    

00011274 <put_fs_long>:
//// 将一长字存放在fs段中指定内存地址处.
// 参数:val - 长字值;addr - 内存地址.
// %0 - 寄存器(长字值val);%1 - (内存地址addr).
static inline void put_fs_long(unsigned long val,unsigned long * addr)
{
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
   11274:	8b 44 24 04          	mov    0x4(%esp),%eax
   11278:	8b 54 24 08          	mov    0x8(%esp),%edx
   1127c:	64 89 02             	mov    %eax,%fs:(%edx)
}
   1127f:	90                   	nop
   11280:	c3                   	ret    

00011281 <get_fs>:
 */

//// 取fs段寄存器值(选择符).
// 返回:fs段寄存器值.
static inline unsigned long get_fs()
{
   11281:	83 ec 10             	sub    $0x10,%esp
	unsigned short _v;
	__asm__("mov %%fs,%%ax":"=a" (_v):);
   11284:	66 8c e0             	mov    %fs,%ax
   11287:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	return _v;
   1128c:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
}
   11291:	83 c4 10             	add    $0x10,%esp
   11294:	c3                   	ret    

00011295 <get_ds>:

//// 取ds面寄存器值.
// 返回:ds段寄存器值.
static inline unsigned long get_ds()
{
   11295:	83 ec 10             	sub    $0x10,%esp
	unsigned short _v;
	__asm__("mov %%ds,%%ax":"=a" (_v):);
   11298:	66 8c d8             	mov    %ds,%ax
   1129b:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	return _v;
   112a0:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
}
   112a5:	83 c4 10             	add    $0x10,%esp
   112a8:	c3                   	ret    

000112a9 <set_fs>:

//// 设置fs段寄存器.
// 参数:val - 段值(选择符).
static inline void set_fs(unsigned long val)
{
	__asm__("mov %0,%%fs"::"a" ((unsigned short) val));
   112a9:	8b 44 24 04          	mov    0x4(%esp),%eax
   112ad:	8e e0                	mov    %eax,%fs
}
   112af:	90                   	nop
   112b0:	c3                   	ret    

000112b1 <sys_uselib>:
// 参数：library - 库文件名。
// 为进程选择一个库文件，并替换进程当前库文件i节点字段值为这里指定库文件名的i节点指针。如果library指针为空，则把进程
// 当前的库文件释放掉。
// 返回：成功返回0，否则返回出错码。
int sys_uselib(const char * library)
{
   112b1:	53                   	push   %ebx
   112b2:	83 ec 18             	sub    $0x18,%esp
	unsigned long base;

	// 首先判断当前进程是否普通进程。这是通过查看当前进程的空间长度来做到的。因为普通进程的空间长度被设置为TASK_SIZE（64
	// MB）。因此若进程逻辑地址空间长度不等于TASK_SIZE则返回出错码（无效参数）。否则取库文件i节点inode。若库文件名指针
	// 空，则设置inode等于NULL。
	if (get_limit(0x17) != TASK_SIZE)
   112b5:	b8 17 00 00 00       	mov    $0x17,%eax
   112ba:	0f 03 c0             	lsl    %ax,%eax
   112bd:	40                   	inc    %eax
   112be:	89 44 24 08          	mov    %eax,0x8(%esp)
   112c2:	8b 44 24 08          	mov    0x8(%esp),%eax
   112c6:	3d 00 00 00 04       	cmp    $0x4000000,%eax
   112cb:	74 0a                	je     112d7 <sys_uselib+0x26>
		return -EINVAL;
   112cd:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   112d2:	e9 ca 00 00 00       	jmp    113a1 <sys_uselib+0xf0>
	if (library) {
   112d7:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   112dc:	74 24                	je     11302 <sys_uselib+0x51>
		if (!(inode = namei(library)))							/* get library inode */
   112de:	83 ec 0c             	sub    $0xc,%esp
   112e1:	ff 74 24 2c          	pushl  0x2c(%esp)
   112e5:	e8 5a 22 00 00       	call   13544 <namei>
   112ea:	83 c4 10             	add    $0x10,%esp
   112ed:	89 44 24 0c          	mov    %eax,0xc(%esp)
   112f1:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   112f6:	75 12                	jne    1130a <sys_uselib+0x59>
			return -ENOENT;                 					/* 取库文件i节点 */
   112f8:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   112fd:	e9 9f 00 00 00       	jmp    113a1 <sys_uselib+0xf0>
	} else
		inode = NULL;
   11302:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   11309:	00 
	/* we should check filetypes (headers etc), but we don't */
	/* 我们应该检查一下文件类型（如头部信息等），但是我们还没有这样做。*/
	// 然后放回进程原库文件i节点，并预置进程库i节点字段为空。接着取得进程的库代码所在位置，并释放原库代码的页表所占用的内存
	// 页面。最后让进程库i节点字段指向新库i节点，并返回0（成功）。
	iput(current->library);
   1130a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1130f:	8b 80 40 03 00 00    	mov    0x340(%eax),%eax
   11315:	83 ec 0c             	sub    $0xc,%esp
   11318:	50                   	push   %eax
   11319:	e8 d1 d3 ff ff       	call   e6ef <iput>
   1131e:	83 c4 10             	add    $0x10,%esp
	current->library = NULL;
   11321:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   11326:	c7 80 40 03 00 00 00 	movl   $0x0,0x340(%eax)
   1132d:	00 00 00 
	base = get_base(current->ldt[2]);
   11330:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   11335:	05 a8 03 00 00       	add    $0x3a8,%eax
   1133a:	83 c0 02             	add    $0x2,%eax
   1133d:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   11343:	81 c2 a8 03 00 00    	add    $0x3a8,%edx
   11349:	8d 5a 04             	lea    0x4(%edx),%ebx
   1134c:	8b 0d a0 e1 02 00    	mov    0x2e1a0,%ecx
   11352:	81 c1 a8 03 00 00    	add    $0x3a8,%ecx
   11358:	83 c1 07             	add    $0x7,%ecx
   1135b:	8a 31                	mov    (%ecx),%dh
   1135d:	8a 13                	mov    (%ebx),%dl
   1135f:	c1 e2 10             	shl    $0x10,%edx
   11362:	66 8b 10             	mov    (%eax),%dx
   11365:	89 d0                	mov    %edx,%eax
   11367:	89 44 24 04          	mov    %eax,0x4(%esp)
   1136b:	8b 44 24 04          	mov    0x4(%esp),%eax
   1136f:	89 04 24             	mov    %eax,(%esp)
	base += LIBRARY_OFFSET;
   11372:	81 04 24 00 00 c0 03 	addl   $0x3c00000,(%esp)
	free_page_tables(base, LIBRARY_SIZE);
   11379:	83 ec 08             	sub    $0x8,%esp
   1137c:	68 00 00 40 00       	push   $0x400000
   11381:	ff 74 24 0c          	pushl  0xc(%esp)
   11385:	e8 ef a9 ff ff       	call   bd79 <free_page_tables>
   1138a:	83 c4 10             	add    $0x10,%esp
	current->library = inode;
   1138d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   11392:	8b 54 24 0c          	mov    0xc(%esp),%edx
   11396:	89 90 40 03 00 00    	mov    %edx,0x340(%eax)
	return 0;
   1139c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   113a1:	83 c4 18             	add    $0x18,%esp
   113a4:	5b                   	pop    %ebx
   113a5:	c3                   	ret    

000113a6 <create_tables>:
 */
// 在新任务中创建参数和环境变量指针表.
// 参数:p - 数据段中参数和环境信息偏移指针;argc - 参数个数;envc - 环境变量个数.
// 返回:栈指针值.
static unsigned long * create_tables(char * p, int argc, int envc)
{
   113a6:	83 ec 10             	sub    $0x10,%esp
	// 栈指针是以4字节(1节)为边界进行寻址的,因此这里需让sp为4的整数倍值.此时sp位于参数环境表的末端.然后我们先把sp向下
	// (低地址方向)移动,在栈中空出环境变量指针占用的空间,并让环境变量指针envp指向该处.多空出的一个位置用于在最后存放一
	// 个NULL值.下面指针加1,sp将递增指针宽度字节值(4字节).再把sp向下移动,空出命令行参数指针占用的空间,并让argv指针
	// 指向该处.同样,多空处的一个位置用于存放一个NULL值.此时sp指向参数指针块的起始处,我们将环境参数块指针envp和命令行
	// 参数块指针以及命令行参数个数值分别压入栈中.
	sp = (unsigned long *) (0xfffffffc & (unsigned long) p);
   113a9:	8b 44 24 14          	mov    0x14(%esp),%eax
   113ad:	83 e0 fc             	and    $0xfffffffc,%eax
   113b0:	89 44 24 04          	mov    %eax,0x4(%esp)
	sp -= envc + 1;
   113b4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   113b8:	8d 50 01             	lea    0x1(%eax),%edx
   113bb:	b8 00 00 00 00       	mov    $0x0,%eax
   113c0:	29 d0                	sub    %edx,%eax
   113c2:	c1 e0 02             	shl    $0x2,%eax
   113c5:	01 44 24 04          	add    %eax,0x4(%esp)
	envp = sp;
   113c9:	8b 44 24 04          	mov    0x4(%esp),%eax
   113cd:	89 44 24 08          	mov    %eax,0x8(%esp)
	sp -= argc + 1;
   113d1:	8b 44 24 18          	mov    0x18(%esp),%eax
   113d5:	8d 50 01             	lea    0x1(%eax),%edx
   113d8:	b8 00 00 00 00       	mov    $0x0,%eax
   113dd:	29 d0                	sub    %edx,%eax
   113df:	c1 e0 02             	shl    $0x2,%eax
   113e2:	01 44 24 04          	add    %eax,0x4(%esp)
	argv = sp;
   113e6:	8b 44 24 04          	mov    0x4(%esp),%eax
   113ea:	89 44 24 0c          	mov    %eax,0xc(%esp)
	put_fs_long((unsigned long)envp, --sp);
   113ee:	83 6c 24 04 04       	subl   $0x4,0x4(%esp)
   113f3:	8b 44 24 08          	mov    0x8(%esp),%eax
   113f7:	ff 74 24 04          	pushl  0x4(%esp)
   113fb:	50                   	push   %eax
   113fc:	e8 73 fe ff ff       	call   11274 <put_fs_long>
   11401:	83 c4 08             	add    $0x8,%esp
	put_fs_long((unsigned long)argv, --sp);
   11404:	83 6c 24 04 04       	subl   $0x4,0x4(%esp)
   11409:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1140d:	ff 74 24 04          	pushl  0x4(%esp)
   11411:	50                   	push   %eax
   11412:	e8 5d fe ff ff       	call   11274 <put_fs_long>
   11417:	83 c4 08             	add    $0x8,%esp
	put_fs_long((unsigned long)argc, --sp);
   1141a:	83 6c 24 04 04       	subl   $0x4,0x4(%esp)
   1141f:	8b 44 24 18          	mov    0x18(%esp),%eax
   11423:	ff 74 24 04          	pushl  0x4(%esp)
   11427:	50                   	push   %eax
   11428:	e8 47 fe ff ff       	call   11274 <put_fs_long>
   1142d:	83 c4 08             	add    $0x8,%esp
	// 再将命令行各参数指针和环境变量各指针分别放入前面空出来的相应地方,最后分别放置一个NULL指针.
	while (argc-- > 0) {
   11430:	eb 32                	jmp    11464 <create_tables+0xbe>
		put_fs_long((unsigned long) p, argv++);
   11432:	8b 44 24 0c          	mov    0xc(%esp),%eax
   11436:	8d 50 04             	lea    0x4(%eax),%edx
   11439:	89 54 24 0c          	mov    %edx,0xc(%esp)
   1143d:	8b 54 24 14          	mov    0x14(%esp),%edx
   11441:	50                   	push   %eax
   11442:	52                   	push   %edx
   11443:	e8 2c fe ff ff       	call   11274 <put_fs_long>
   11448:	83 c4 08             	add    $0x8,%esp
		while (get_fs_byte(p++)) /* nothing */ ;	// p指针指向下一个参数串.
   1144b:	90                   	nop
   1144c:	8b 44 24 14          	mov    0x14(%esp),%eax
   11450:	8d 50 01             	lea    0x1(%eax),%edx
   11453:	89 54 24 14          	mov    %edx,0x14(%esp)
   11457:	50                   	push   %eax
   11458:	e8 f3 fd ff ff       	call   11250 <get_fs_byte>
   1145d:	83 c4 04             	add    $0x4,%esp
   11460:	84 c0                	test   %al,%al
   11462:	75 e8                	jne    1144c <create_tables+0xa6>
	argv = sp;
	put_fs_long((unsigned long)envp, --sp);
	put_fs_long((unsigned long)argv, --sp);
	put_fs_long((unsigned long)argc, --sp);
	// 再将命令行各参数指针和环境变量各指针分别放入前面空出来的相应地方,最后分别放置一个NULL指针.
	while (argc-- > 0) {
   11464:	8b 44 24 18          	mov    0x18(%esp),%eax
   11468:	8d 50 ff             	lea    -0x1(%eax),%edx
   1146b:	89 54 24 18          	mov    %edx,0x18(%esp)
   1146f:	85 c0                	test   %eax,%eax
   11471:	7f bf                	jg     11432 <create_tables+0x8c>
		put_fs_long((unsigned long) p, argv++);
		while (get_fs_byte(p++)) /* nothing */ ;	// p指针指向下一个参数串.
	}
	put_fs_long(0, argv);
   11473:	ff 74 24 0c          	pushl  0xc(%esp)
   11477:	6a 00                	push   $0x0
   11479:	e8 f6 fd ff ff       	call   11274 <put_fs_long>
   1147e:	83 c4 08             	add    $0x8,%esp
	while (envc-- > 0) {
   11481:	eb 32                	jmp    114b5 <create_tables+0x10f>
		put_fs_long((unsigned long) p, envp++);
   11483:	8b 44 24 08          	mov    0x8(%esp),%eax
   11487:	8d 50 04             	lea    0x4(%eax),%edx
   1148a:	89 54 24 08          	mov    %edx,0x8(%esp)
   1148e:	8b 54 24 14          	mov    0x14(%esp),%edx
   11492:	50                   	push   %eax
   11493:	52                   	push   %edx
   11494:	e8 db fd ff ff       	call   11274 <put_fs_long>
   11499:	83 c4 08             	add    $0x8,%esp
		while (get_fs_byte(p++)) /* nothing */ ;	// p指针指向下一个参数串.
   1149c:	90                   	nop
   1149d:	8b 44 24 14          	mov    0x14(%esp),%eax
   114a1:	8d 50 01             	lea    0x1(%eax),%edx
   114a4:	89 54 24 14          	mov    %edx,0x14(%esp)
   114a8:	50                   	push   %eax
   114a9:	e8 a2 fd ff ff       	call   11250 <get_fs_byte>
   114ae:	83 c4 04             	add    $0x4,%esp
   114b1:	84 c0                	test   %al,%al
   114b3:	75 e8                	jne    1149d <create_tables+0xf7>
	while (argc-- > 0) {
		put_fs_long((unsigned long) p, argv++);
		while (get_fs_byte(p++)) /* nothing */ ;	// p指针指向下一个参数串.
	}
	put_fs_long(0, argv);
	while (envc-- > 0) {
   114b5:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   114b9:	8d 50 ff             	lea    -0x1(%eax),%edx
   114bc:	89 54 24 1c          	mov    %edx,0x1c(%esp)
   114c0:	85 c0                	test   %eax,%eax
   114c2:	7f bf                	jg     11483 <create_tables+0xdd>
		put_fs_long((unsigned long) p, envp++);
		while (get_fs_byte(p++)) /* nothing */ ;	// p指针指向下一个参数串.
	}
	put_fs_long(0, envp);
   114c4:	ff 74 24 08          	pushl  0x8(%esp)
   114c8:	6a 00                	push   $0x0
   114ca:	e8 a5 fd ff ff       	call   11274 <put_fs_long>
   114cf:	83 c4 08             	add    $0x8,%esp
	return sp;										// 返回构造的当前新栈指针.
   114d2:	8b 44 24 04          	mov    0x4(%esp),%eax
}
   114d6:	83 c4 10             	add    $0x10,%esp
   114d9:	c3                   	ret    

000114da <count>:
// 计算参数个数.
// 参数:argv - 参数指针数组,最后一个指针项是NULL.
// 统计参数指针数组中指针的个数.
// 返回:参数个数.
static int count(char ** argv)
{
   114da:	83 ec 10             	sub    $0x10,%esp
	int i = 0;
   114dd:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   114e4:	00 
	char ** tmp;

	if (tmp = argv)
   114e5:	8b 44 24 14          	mov    0x14(%esp),%eax
   114e9:	89 44 24 08          	mov    %eax,0x8(%esp)
   114ed:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   114f2:	74 1f                	je     11513 <count+0x39>
		while (get_fs_long((unsigned long *) (tmp++)))
   114f4:	eb 05                	jmp    114fb <count+0x21>
			i++;
   114f6:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
{
	int i = 0;
	char ** tmp;

	if (tmp = argv)
		while (get_fs_long((unsigned long *) (tmp++)))
   114fb:	8b 44 24 08          	mov    0x8(%esp),%eax
   114ff:	8d 50 04             	lea    0x4(%eax),%edx
   11502:	89 54 24 08          	mov    %edx,0x8(%esp)
   11506:	50                   	push   %eax
   11507:	e8 52 fd ff ff       	call   1125e <get_fs_long>
   1150c:	83 c4 04             	add    $0x4,%esp
   1150f:	85 c0                	test   %eax,%eax
   11511:	75 e3                	jne    114f6 <count+0x1c>
			i++;

	return i;
   11513:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   11517:	83 c4 10             	add    $0x10,%esp
   1151a:	c3                   	ret    

0001151b <copy_strings>:
// 并始终指向参数字符串的头部.字符串来源标志from_kmem应该是TYT为了给execve()增添执行脚本文件的功能而新加的参数.当没有运行
// 脚本文件的功能时,所有参数字符串都在用户数据空间中。
// 返回:参数和环境空间当前头部指针.若出错则返回0.
static unsigned long copy_strings(int argc, char ** argv, unsigned long *page,
		unsigned long p, int from_kmem)
{
   1151b:	53                   	push   %ebx
   1151c:	83 ec 28             	sub    $0x28,%esp
	char *tmp, *pag;
	int len, offset = 0;
   1151f:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   11526:	00 
	unsigned long old_fs, new_fs;

	if (!p)
   11527:	83 7c 24 3c 00       	cmpl   $0x0,0x3c(%esp)
   1152c:	75 0a                	jne    11538 <copy_strings+0x1d>
		return 0;												/* bullet-proofing */	/* 偏移指针验证 */
   1152e:	b8 00 00 00 00       	mov    $0x0,%eax
   11533:	e9 b6 01 00 00       	jmp    116ee <copy_strings+0x1d3>
	// 首先取当前段寄存器ds(指向内核数据段)和fs值,分别保存到变量new_fs和old_fs中.如果字符串和字符串数组(指针)来自内核空间,则设置fs段寄存器指向内核数据段.
	new_fs = get_ds();
   11538:	e8 58 fd ff ff       	call   11295 <get_ds>
   1153d:	89 44 24 0c          	mov    %eax,0xc(%esp)
	old_fs = get_fs();
   11541:	e8 3b fd ff ff       	call   11281 <get_fs>
   11546:	89 44 24 08          	mov    %eax,0x8(%esp)
	if (from_kmem == 2)											// 若串指针在内核空间则设置fs指向内核空间.
   1154a:	83 7c 24 40 02       	cmpl   $0x2,0x40(%esp)
   1154f:	0f 85 6c 01 00 00    	jne    116c1 <copy_strings+0x1a6>
		set_fs(new_fs);
   11555:	ff 74 24 0c          	pushl  0xc(%esp)
   11559:	e8 4b fd ff ff       	call   112a9 <set_fs>
   1155e:	83 c4 04             	add    $0x4,%esp
	// 然后循环处理各个参数,从最后一个参数逆向开始复制,复制到指定偏移地址处.在循环中,首先取需要复制的当前字符串指针.如果字符串
	// 在用户空间而字符串数组(字符串指针)在内核空间,则设置fs段寄存器指向内核数据段(ds).并在内核数据空间中取了字符串指针tmp之
	// 后就立刻恢复fs段寄存器原值(fs再指回用户空间).否则不用修改fs值而直接从用户空间取字符串指针到tmp.
	while (argc-- > 0) {
   11561:	e9 5b 01 00 00       	jmp    116c1 <copy_strings+0x1a6>
		if (from_kmem == 1)										// 若串指针在内核空间,则fs指向内核空间.
   11566:	83 7c 24 40 01       	cmpl   $0x1,0x40(%esp)
   1156b:	75 0c                	jne    11579 <copy_strings+0x5e>
			set_fs(new_fs);
   1156d:	ff 74 24 0c          	pushl  0xc(%esp)
   11571:	e8 33 fd ff ff       	call   112a9 <set_fs>
   11576:	83 c4 04             	add    $0x4,%esp
		if (!(tmp = (char *)get_fs_long(((unsigned long *)argv) + argc)))
   11579:	8b 44 24 30          	mov    0x30(%esp),%eax
   1157d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11584:	8b 44 24 34          	mov    0x34(%esp),%eax
   11588:	01 d0                	add    %edx,%eax
   1158a:	50                   	push   %eax
   1158b:	e8 ce fc ff ff       	call   1125e <get_fs_long>
   11590:	83 c4 04             	add    $0x4,%esp
   11593:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   11597:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   1159c:	75 10                	jne    115ae <copy_strings+0x93>
			panic("argc is wrong");
   1159e:	83 ec 0c             	sub    $0xc,%esp
   115a1:	68 b0 3b 02 00       	push   $0x23bb0
   115a6:	e8 5d 76 ff ff       	call   8c08 <panic>
   115ab:	83 c4 10             	add    $0x10,%esp
		if (from_kmem == 1)										// 若串指针在内核空间,则fs指回用户空间.
   115ae:	83 7c 24 40 01       	cmpl   $0x1,0x40(%esp)
   115b3:	75 0f                	jne    115c4 <copy_strings+0xa9>
			set_fs(old_fs);
   115b5:	83 ec 0c             	sub    $0xc,%esp
   115b8:	ff 74 24 14          	pushl  0x14(%esp)
   115bc:	e8 e8 fc ff ff       	call   112a9 <set_fs>
   115c1:	83 c4 10             	add    $0x10,%esp
		// 然后从用户空间取该字符串,并计算参数字符串长度len.此后tmp指向该字符串末端.如果该字符串长度超过此时参数和环境空间中还剩余
		// 的空闲长度,则空间不够了.于是恢复fs段寄存器值(如果被改变的话)并返回0.不过因为参数和环境空间留128KB,所以通常不可能发生这
		// 种情况.
		len = 0;												/* remember zero-padding */
   115c4:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
   115cb:	00 
		do {													/* 我们知道串是以NULL字节结尾的 */
			len++;
   115cc:	83 44 24 14 01       	addl   $0x1,0x14(%esp)
		} while (get_fs_byte(tmp++));
   115d1:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   115d5:	8d 50 01             	lea    0x1(%eax),%edx
   115d8:	89 54 24 1c          	mov    %edx,0x1c(%esp)
   115dc:	83 ec 0c             	sub    $0xc,%esp
   115df:	50                   	push   %eax
   115e0:	e8 6b fc ff ff       	call   11250 <get_fs_byte>
   115e5:	83 c4 10             	add    $0x10,%esp
   115e8:	84 c0                	test   %al,%al
   115ea:	75 e0                	jne    115cc <copy_strings+0xb1>
			return 0;
		}
		// 接着我们逆向逐个字符地把字符串复制到参数和环境空间末端处.在循环复制字符串的字符过程中,我们首先要判断参数和环境空间中相应位
		// 置处是否已经有内存页面.如果还没有就先为其申请1页内存页面.偏移量offset被用途为在一个页面中的当前指针偏移值.因为刚开始执行
		// 本函数时,偏移变量offset被初始化为0,所以(offset-1 < 0)肯定成立而使得offset重新被设置为当前p指针在页面范围内的偏移值.
		while (len) {
   115ec:	e9 c5 00 00 00       	jmp    116b6 <copy_strings+0x19b>
			--p; --tmp; --len;
   115f1:	83 6c 24 3c 01       	subl   $0x1,0x3c(%esp)
   115f6:	83 6c 24 1c 01       	subl   $0x1,0x1c(%esp)
   115fb:	83 6c 24 14 01       	subl   $0x1,0x14(%esp)
			if (--offset < 0) {
   11600:	83 6c 24 10 01       	subl   $0x1,0x10(%esp)
   11605:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   1160a:	0f 89 8a 00 00 00    	jns    1169a <copy_strings+0x17f>
				offset = p % PAGE_SIZE;
   11610:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   11614:	25 ff 0f 00 00       	and    $0xfff,%eax
   11619:	89 44 24 10          	mov    %eax,0x10(%esp)
				if (from_kmem == 2)								// 若串在内核空间则fs指回用户空间.
   1161d:	83 7c 24 40 02       	cmpl   $0x2,0x40(%esp)
   11622:	75 0f                	jne    11633 <copy_strings+0x118>
					set_fs(old_fs);
   11624:	83 ec 0c             	sub    $0xc,%esp
   11627:	ff 74 24 14          	pushl  0x14(%esp)
   1162b:	e8 79 fc ff ff       	call   112a9 <set_fs>
   11630:	83 c4 10             	add    $0x10,%esp
				// 如果当前偏移值p所在的串空间页面指针数组项page[p/PAGE_SIZE] == 0,表示此时p指针所处的空间内存页面还不存在,则需申请一空闲
				// 内存页,并将该页面指针填入指针数组,同时也使页面指针pag指向该新页面.若申请不到空闲页面则返回0.
				if (!(pag = (char *) page[p / PAGE_SIZE]) &&
   11633:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   11637:	c1 e8 0c             	shr    $0xc,%eax
   1163a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11641:	8b 44 24 38          	mov    0x38(%esp),%eax
   11645:	01 d0                	add    %edx,%eax
   11647:	8b 00                	mov    (%eax),%eax
   11649:	89 44 24 18          	mov    %eax,0x18(%esp)
   1164d:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   11652:	75 30                	jne    11684 <copy_strings+0x169>
				    !(pag = (char *) (page[p / PAGE_SIZE] =
   11654:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   11658:	c1 e8 0c             	shr    $0xc,%eax
   1165b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11662:	8b 44 24 38          	mov    0x38(%esp),%eax
   11666:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
				      get_free_page())))
   11669:	e8 20 ba ff ff       	call   d08e <get_free_page>
				if (from_kmem == 2)								// 若串在内核空间则fs指回用户空间.
					set_fs(old_fs);
				// 如果当前偏移值p所在的串空间页面指针数组项page[p/PAGE_SIZE] == 0,表示此时p指针所处的空间内存页面还不存在,则需申请一空闲
				// 内存页,并将该页面指针填入指针数组,同时也使页面指针pag指向该新页面.若申请不到空闲页面则返回0.
				if (!(pag = (char *) page[p / PAGE_SIZE]) &&
				    !(pag = (char *) (page[p / PAGE_SIZE] =
   1166e:	89 03                	mov    %eax,(%ebx)
   11670:	8b 03                	mov    (%ebx),%eax
   11672:	89 44 24 18          	mov    %eax,0x18(%esp)
				offset = p % PAGE_SIZE;
				if (from_kmem == 2)								// 若串在内核空间则fs指回用户空间.
					set_fs(old_fs);
				// 如果当前偏移值p所在的串空间页面指针数组项page[p/PAGE_SIZE] == 0,表示此时p指针所处的空间内存页面还不存在,则需申请一空闲
				// 内存页,并将该页面指针填入指针数组,同时也使页面指针pag指向该新页面.若申请不到空闲页面则返回0.
				if (!(pag = (char *) page[p / PAGE_SIZE]) &&
   11676:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   1167b:	75 07                	jne    11684 <copy_strings+0x169>
				    !(pag = (char *) (page[p / PAGE_SIZE] =
				      get_free_page())))
					return 0;
   1167d:	b8 00 00 00 00       	mov    $0x0,%eax
   11682:	eb 6a                	jmp    116ee <copy_strings+0x1d3>
				if (from_kmem == 2)								// 若串在内核空间则fs指向内核空间.
   11684:	83 7c 24 40 02       	cmpl   $0x2,0x40(%esp)
   11689:	75 0f                	jne    1169a <copy_strings+0x17f>
					set_fs(new_fs);
   1168b:	83 ec 0c             	sub    $0xc,%esp
   1168e:	ff 74 24 18          	pushl  0x18(%esp)
   11692:	e8 12 fc ff ff       	call   112a9 <set_fs>
   11697:	83 c4 10             	add    $0x10,%esp

			}
			// 然后从fs段中复制字符串的1字节到参数和环境空间内存页面pag的offset处.
			*(pag + offset) = get_fs_byte(tmp);
   1169a:	8b 54 24 10          	mov    0x10(%esp),%edx
   1169e:	8b 44 24 18          	mov    0x18(%esp),%eax
   116a2:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
   116a5:	83 ec 0c             	sub    $0xc,%esp
   116a8:	ff 74 24 28          	pushl  0x28(%esp)
   116ac:	e8 9f fb ff ff       	call   11250 <get_fs_byte>
   116b1:	83 c4 10             	add    $0x10,%esp
   116b4:	88 03                	mov    %al,(%ebx)
			return 0;
		}
		// 接着我们逆向逐个字符地把字符串复制到参数和环境空间末端处.在循环复制字符串的字符过程中,我们首先要判断参数和环境空间中相应位
		// 置处是否已经有内存页面.如果还没有就先为其申请1页内存页面.偏移量offset被用途为在一个页面中的当前指针偏移值.因为刚开始执行
		// 本函数时,偏移变量offset被初始化为0,所以(offset-1 < 0)肯定成立而使得offset重新被设置为当前p指针在页面范围内的偏移值.
		while (len) {
   116b6:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   116bb:	0f 85 30 ff ff ff    	jne    115f1 <copy_strings+0xd6>
	if (from_kmem == 2)											// 若串指针在内核空间则设置fs指向内核空间.
		set_fs(new_fs);
	// 然后循环处理各个参数,从最后一个参数逆向开始复制,复制到指定偏移地址处.在循环中,首先取需要复制的当前字符串指针.如果字符串
	// 在用户空间而字符串数组(字符串指针)在内核空间,则设置fs段寄存器指向内核数据段(ds).并在内核数据空间中取了字符串指针tmp之
	// 后就立刻恢复fs段寄存器原值(fs再指回用户空间).否则不用修改fs值而直接从用户空间取字符串指针到tmp.
	while (argc-- > 0) {
   116c1:	8b 44 24 30          	mov    0x30(%esp),%eax
   116c5:	8d 50 ff             	lea    -0x1(%eax),%edx
   116c8:	89 54 24 30          	mov    %edx,0x30(%esp)
   116cc:	85 c0                	test   %eax,%eax
   116ce:	0f 8f 92 fe ff ff    	jg     11566 <copy_strings+0x4b>
			// 然后从fs段中复制字符串的1字节到参数和环境空间内存页面pag的offset处.
			*(pag + offset) = get_fs_byte(tmp);
		}
	}
	// 如果字符串和字符串数组在内核空间,则恢复fs段寄存器原值.最后,返回参数和环境空间中已复制参数的头部偏移值.
	if (from_kmem == 2)
   116d4:	83 7c 24 40 02       	cmpl   $0x2,0x40(%esp)
   116d9:	75 0f                	jne    116ea <copy_strings+0x1cf>
		set_fs(old_fs);
   116db:	83 ec 0c             	sub    $0xc,%esp
   116de:	ff 74 24 14          	pushl  0x14(%esp)
   116e2:	e8 c2 fb ff ff       	call   112a9 <set_fs>
   116e7:	83 c4 10             	add    $0x10,%esp
	return p;
   116ea:	8b 44 24 3c          	mov    0x3c(%esp),%eax
}
   116ee:	83 c4 28             	add    $0x28,%esp
   116f1:	5b                   	pop    %ebx
   116f2:	c3                   	ret    

000116f3 <change_ldt>:
// 修改任务的局部描述符表内容.
// 修改局部描述符表LDT中描述符的段基址和段限长,并将参数和环境空间页面放置在数据段末端.
// 参数:text_size - 执行文件头部中a_text字段给出的代码段长度值;page - 参数和环境空间页面指针数组.
// 返回:数据段限长值(64MB)
static unsigned long change_ldt(unsigned long text_size, unsigned long * page)
{
   116f3:	56                   	push   %esi
   116f4:	53                   	push   %ebx
   116f5:	83 ec 24             	sub    $0x24,%esp
	int i;

	// 首先把代码和数据段长度均设置为64MB.然后取当前进程局部描述符表代码段描述符中代码段基址.代码段基址与数据段基址相同.
	// 再使用这些新值重新设置局部表中代码段和数据段描述符中的基址和段限长.这里请注意,由于被加载的新程序的代码和数据段基址
	// 与原程序的相同,因此没有必要再重复设置它们,即186和188行上的两条设置段基址的语句多余,可省略.
	code_limit = TASK_SIZE;
   116f8:	c7 44 24 14 00 00 00 	movl   $0x4000000,0x14(%esp)
   116ff:	04 
	data_limit = TASK_SIZE;
   11700:	c7 44 24 10 00 00 00 	movl   $0x4000000,0x10(%esp)
   11707:	04 
	code_base = get_base(current->ldt[1]);
   11708:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1170d:	05 a0 03 00 00       	add    $0x3a0,%eax
   11712:	83 c0 02             	add    $0x2,%eax
   11715:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   1171b:	81 c2 a0 03 00 00    	add    $0x3a0,%edx
   11721:	8d 5a 04             	lea    0x4(%edx),%ebx
   11724:	8b 0d a0 e1 02 00    	mov    0x2e1a0,%ecx
   1172a:	81 c1 a0 03 00 00    	add    $0x3a0,%ecx
   11730:	83 c1 07             	add    $0x7,%ecx
   11733:	8a 31                	mov    (%ecx),%dh
   11735:	8a 13                	mov    (%ebx),%dl
   11737:	c1 e2 10             	shl    $0x10,%edx
   1173a:	66 8b 10             	mov    (%eax),%dx
   1173d:	89 d0                	mov    %edx,%eax
   1173f:	89 44 24 0c          	mov    %eax,0xc(%esp)
   11743:	8b 44 24 0c          	mov    0xc(%esp),%eax
   11747:	89 44 24 08          	mov    %eax,0x8(%esp)
	data_base = code_base;
   1174b:	8b 44 24 08          	mov    0x8(%esp),%eax
   1174f:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	set_base(current->ldt[1], code_base);
   11753:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   11758:	05 a0 03 00 00       	add    $0x3a0,%eax
   1175d:	8d 48 02             	lea    0x2(%eax),%ecx
   11760:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   11765:	05 a0 03 00 00       	add    $0x3a0,%eax
   1176a:	8d 58 04             	lea    0x4(%eax),%ebx
   1176d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   11772:	05 a0 03 00 00       	add    $0x3a0,%eax
   11777:	8d 70 07             	lea    0x7(%eax),%esi
   1177a:	8b 44 24 08          	mov    0x8(%esp),%eax
   1177e:	89 c2                	mov    %eax,%edx
   11780:	66 89 11             	mov    %dx,(%ecx)
   11783:	c1 ca 10             	ror    $0x10,%edx
   11786:	88 13                	mov    %dl,(%ebx)
   11788:	88 36                	mov    %dh,(%esi)
   1178a:	89 d0                	mov    %edx,%eax
   1178c:	89 44 24 04          	mov    %eax,0x4(%esp)
	set_limit(current->ldt[1], code_limit);
   11790:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   11795:	05 a0 03 00 00       	add    $0x3a0,%eax
   1179a:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   117a0:	81 c2 a0 03 00 00    	add    $0x3a0,%edx
   117a6:	8d 4a 06             	lea    0x6(%edx),%ecx
   117a9:	8b 54 24 14          	mov    0x14(%esp),%edx
   117ad:	83 ea 01             	sub    $0x1,%edx
   117b0:	c1 ea 0c             	shr    $0xc,%edx
   117b3:	66 89 10             	mov    %dx,(%eax)
   117b6:	c1 ca 10             	ror    $0x10,%edx
   117b9:	8a 31                	mov    (%ecx),%dh
   117bb:	80 e6 f0             	and    $0xf0,%dh
   117be:	08 f2                	or     %dh,%dl
   117c0:	88 11                	mov    %dl,(%ecx)
	set_base(current->ldt[2], data_base);
   117c2:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   117c7:	05 a8 03 00 00       	add    $0x3a8,%eax
   117cc:	8d 48 02             	lea    0x2(%eax),%ecx
   117cf:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   117d4:	05 a8 03 00 00       	add    $0x3a8,%eax
   117d9:	8d 58 04             	lea    0x4(%eax),%ebx
   117dc:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   117e1:	05 a8 03 00 00       	add    $0x3a8,%eax
   117e6:	8d 70 07             	lea    0x7(%eax),%esi
   117e9:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   117ed:	89 c2                	mov    %eax,%edx
   117ef:	66 89 11             	mov    %dx,(%ecx)
   117f2:	c1 ca 10             	ror    $0x10,%edx
   117f5:	88 13                	mov    %dl,(%ebx)
   117f7:	88 36                	mov    %dh,(%esi)
   117f9:	89 d0                	mov    %edx,%eax
   117fb:	89 04 24             	mov    %eax,(%esp)
	set_limit(current->ldt[2], data_limit);
   117fe:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   11803:	05 a8 03 00 00       	add    $0x3a8,%eax
   11808:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   1180e:	81 c2 a8 03 00 00    	add    $0x3a8,%edx
   11814:	8d 4a 06             	lea    0x6(%edx),%ecx
   11817:	8b 54 24 10          	mov    0x10(%esp),%edx
   1181b:	83 ea 01             	sub    $0x1,%edx
   1181e:	c1 ea 0c             	shr    $0xc,%edx
   11821:	66 89 10             	mov    %dx,(%eax)
   11824:	c1 ca 10             	ror    $0x10,%edx
   11827:	8a 31                	mov    (%ecx),%dh
   11829:	80 e6 f0             	and    $0xf0,%dh
   1182c:	08 f2                	or     %dh,%dl
   1182e:	88 11                	mov    %dl,(%ecx)
	/* make sure fs points to the NEW data segment */
	/* 要确信fs段寄存器已指向新的数据段 */
	// fs段寄存器中放入局部表数据段描述符的选择符(0x17).即默认情况下fs都指向任务数据段.
	__asm__("pushl $0x17\n\tpop %%fs"::);
   11830:	6a 17                	push   $0x17
   11832:	0f a1                	pop    %fs
	// 然后将参数和环境空间已存放数据的页面(最多有MAX_ARG_PAGES页,128KB)放到数据段末端.方法是从进程空间库代码位置开始处
	// 逆向一页一页地放.库文件代码占用进程空间最后4MB.函数put_dirty_page()用于把物理页面映射到进程逻辑空间中.在mm/memory.c中.
	data_base += data_limit - LIBRARY_SIZE;
   11834:	8b 54 24 10          	mov    0x10(%esp),%edx
   11838:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1183c:	01 d0                	add    %edx,%eax
   1183e:	2d 00 00 40 00       	sub    $0x400000,%eax
   11843:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	for (i = MAX_ARG_PAGES - 1 ; i >= 0 ; i--) {
   11847:	c7 44 24 18 1f 00 00 	movl   $0x1f,0x18(%esp)
   1184e:	00 
   1184f:	eb 47                	jmp    11898 <change_ldt+0x1a5>
		data_base -= PAGE_SIZE;
   11851:	81 6c 24 1c 00 10 00 	subl   $0x1000,0x1c(%esp)
   11858:	00 
		if (page[i])									// 若该页面存在,就放置该页面.
   11859:	8b 44 24 18          	mov    0x18(%esp),%eax
   1185d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11864:	8b 44 24 34          	mov    0x34(%esp),%eax
   11868:	01 d0                	add    %edx,%eax
   1186a:	8b 00                	mov    (%eax),%eax
   1186c:	85 c0                	test   %eax,%eax
   1186e:	74 23                	je     11893 <change_ldt+0x1a0>
			put_dirty_page(page[i], data_base);
   11870:	8b 44 24 18          	mov    0x18(%esp),%eax
   11874:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1187b:	8b 44 24 34          	mov    0x34(%esp),%eax
   1187f:	01 d0                	add    %edx,%eax
   11881:	8b 00                	mov    (%eax),%eax
   11883:	83 ec 08             	sub    $0x8,%esp
   11886:	ff 74 24 24          	pushl  0x24(%esp)
   1188a:	50                   	push   %eax
   1188b:	e8 f5 a8 ff ff       	call   c185 <put_dirty_page>
   11890:	83 c4 10             	add    $0x10,%esp
	// fs段寄存器中放入局部表数据段描述符的选择符(0x17).即默认情况下fs都指向任务数据段.
	__asm__("pushl $0x17\n\tpop %%fs"::);
	// 然后将参数和环境空间已存放数据的页面(最多有MAX_ARG_PAGES页,128KB)放到数据段末端.方法是从进程空间库代码位置开始处
	// 逆向一页一页地放.库文件代码占用进程空间最后4MB.函数put_dirty_page()用于把物理页面映射到进程逻辑空间中.在mm/memory.c中.
	data_base += data_limit - LIBRARY_SIZE;
	for (i = MAX_ARG_PAGES - 1 ; i >= 0 ; i--) {
   11893:	83 6c 24 18 01       	subl   $0x1,0x18(%esp)
   11898:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   1189d:	79 b2                	jns    11851 <change_ldt+0x15e>
		data_base -= PAGE_SIZE;
		if (page[i])									// 若该页面存在,就放置该页面.
			put_dirty_page(page[i], data_base);
	}
	return data_limit;									// 最后返回数据段限长(64MB).
   1189f:	8b 44 24 10          	mov    0x10(%esp),%eax
}
   118a3:	83 c4 24             	add    $0x24,%esp
   118a6:	5b                   	pop    %ebx
   118a7:	5e                   	pop    %esi
   118a8:	c3                   	ret    

000118a9 <do_execve>:
// argv - 命令行参数指针数组的指针;
// envp - 环境变更指针数组的指针.
// 返回:如果调用成功,则不返回;否则设置出错号,并返回-1.
int do_execve(unsigned long * eip, long tmp, char * filename,
	char ** argv, char ** envp)
{
   118a9:	57                   	push   %edi
   118aa:	56                   	push   %esi
   118ab:	53                   	push   %ebx
   118ac:	81 ec 00 02 00 00    	sub    $0x200,%esp
	struct exec ex;
	unsigned long page[MAX_ARG_PAGES];							// 参数和环境串空间页面指针数组.
	int i, argc, envc;
	int e_uid, e_gid;											// 有效用户ID和有效组ID.
	int retval;
	int sh_bang = 0;											// 控制是否需要执行脚本程序.
   118b2:	c7 84 24 ec 01 00 00 	movl   $0x0,0x1ec(%esp)
   118b9:	00 00 00 00 
	unsigned long p = PAGE_SIZE * MAX_ARG_PAGES - 4;			// p指向参数和环境空间的最后部.
   118bd:	c7 84 24 e8 01 00 00 	movl   $0x1fffc,0x1e8(%esp)
   118c4:	fc ff 01 00 

	// 在内核中打印要执行的文件的文件名字
	char s, filename1[128];
	int index = 0;
   118c8:	c7 84 24 e4 01 00 00 	movl   $0x0,0x1e4(%esp)
   118cf:	00 00 00 00 
	while (1) {
		s = get_fs_byte(filename + index);
   118d3:	8b 94 24 18 02 00 00 	mov    0x218(%esp),%edx
   118da:	8b 84 24 e4 01 00 00 	mov    0x1e4(%esp),%eax
   118e1:	01 d0                	add    %edx,%eax
   118e3:	50                   	push   %eax
   118e4:	e8 67 f9 ff ff       	call   11250 <get_fs_byte>
   118e9:	83 c4 04             	add    $0x4,%esp
   118ec:	88 84 24 df 01 00 00 	mov    %al,0x1df(%esp)
		if (s) {
   118f3:	80 bc 24 df 01 00 00 	cmpb   $0x0,0x1df(%esp)
   118fa:	00 
   118fb:	74 24                	je     11921 <do_execve+0x78>
			*(filename1 + index) = s;
   118fd:	8b 84 24 e4 01 00 00 	mov    0x1e4(%esp),%eax
   11904:	8d 94 24 94 00 00 00 	lea    0x94(%esp),%edx
   1190b:	01 c2                	add    %eax,%edx
   1190d:	0f b6 84 24 df 01 00 	movzbl 0x1df(%esp),%eax
   11914:	00 
   11915:	88 02                	mov    %al,(%edx)
			index++;
   11917:	83 84 24 e4 01 00 00 	addl   $0x1,0x1e4(%esp)
   1191e:	01 
		} else {
			break;
		}
	}
   1191f:	eb b2                	jmp    118d3 <do_execve+0x2a>
		s = get_fs_byte(filename + index);
		if (s) {
			*(filename1 + index) = s;
			index++;
		} else {
			break;
   11921:	90                   	nop
		}
	}
	*(filename1 + index + 1) = '\0';
   11922:	8b 84 24 e4 01 00 00 	mov    0x1e4(%esp),%eax
   11929:	8d 50 01             	lea    0x1(%eax),%edx
   1192c:	8d 84 24 94 00 00 00 	lea    0x94(%esp),%eax
   11933:	01 d0                	add    %edx,%eax
   11935:	c6 00 00             	movb   $0x0,(%eax)
	Log(LOG_INFO_TYPE, "<<<<< process pid = %d do_execve : %s >>>>>\n", current->pid, filename1);
   11938:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1193d:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
   11943:	8d 94 24 94 00 00 00 	lea    0x94(%esp),%edx
   1194a:	52                   	push   %edx
   1194b:	50                   	push   %eax
   1194c:	68 c0 3b 02 00       	push   $0x23bc0
   11951:	6a 00                	push   $0x0
   11953:	e8 97 10 01 00       	call   229ef <Log>
   11958:	83 c4 10             	add    $0x10,%esp
	// 上行把p初始设置成位于128KB空间的最后1个长字处.在初始参数和环境空间的操作过程中,p将用来指明在128KB空间中的当前位置.
	// 另外,参数eip[1]是调用本次系统调用的原用户程序代码段寄存器CS值,其中的段选择符当然必须是当前任务的代码段选择符(0x000f).
	// 若不是该值,那么CS只能会是内核代码段的选择符0x0008.但这是绝对不允许的,因为内核代码是常驻内存而不能被替换掉的.因此下面根据
	// eip[1]的值确认是否符合正常情况.然后再初始化128KB的参数和环境串空间,把所有字节清零,并取出执行文件的i节点.再根据函数参数
	// 分别计算出命令行参数和环境字符串的个数argc和envc.另外,执行文件必须是常规文件.
	if ((0xffff & eip[1]) != 0x000f)
   1195b:	8b 84 24 10 02 00 00 	mov    0x210(%esp),%eax
   11962:	83 c0 04             	add    $0x4,%eax
   11965:	8b 00                	mov    (%eax),%eax
   11967:	0f b7 c0             	movzwl %ax,%eax
   1196a:	83 f8 0f             	cmp    $0xf,%eax
   1196d:	74 10                	je     1197f <do_execve+0xd6>
		panic("execve called from supervisor mode");
   1196f:	83 ec 0c             	sub    $0xc,%esp
   11972:	68 f0 3b 02 00       	push   $0x23bf0
   11977:	e8 8c 72 ff ff       	call   8c08 <panic>
   1197c:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i < MAX_ARG_PAGES ; i++)						/* clear page-table */
   1197f:	c7 84 24 f8 01 00 00 	movl   $0x0,0x1f8(%esp)
   11986:	00 00 00 00 
   1198a:	eb 1a                	jmp    119a6 <do_execve+0xfd>
		page[i] = 0;
   1198c:	8b 84 24 f8 01 00 00 	mov    0x1f8(%esp),%eax
   11993:	c7 84 84 14 01 00 00 	movl   $0x0,0x114(%esp,%eax,4)
   1199a:	00 00 00 00 
	// 若不是该值,那么CS只能会是内核代码段的选择符0x0008.但这是绝对不允许的,因为内核代码是常驻内存而不能被替换掉的.因此下面根据
	// eip[1]的值确认是否符合正常情况.然后再初始化128KB的参数和环境串空间,把所有字节清零,并取出执行文件的i节点.再根据函数参数
	// 分别计算出命令行参数和环境字符串的个数argc和envc.另外,执行文件必须是常规文件.
	if ((0xffff & eip[1]) != 0x000f)
		panic("execve called from supervisor mode");
	for (i = 0 ; i < MAX_ARG_PAGES ; i++)						/* clear page-table */
   1199e:	83 84 24 f8 01 00 00 	addl   $0x1,0x1f8(%esp)
   119a5:	01 
   119a6:	83 bc 24 f8 01 00 00 	cmpl   $0x1f,0x1f8(%esp)
   119ad:	1f 
   119ae:	7e dc                	jle    1198c <do_execve+0xe3>
		page[i] = 0;
	if (!(inode = namei(filename)))								/* get executables inode */
   119b0:	8b 84 24 18 02 00 00 	mov    0x218(%esp),%eax
   119b7:	83 ec 0c             	sub    $0xc,%esp
   119ba:	50                   	push   %eax
   119bb:	e8 84 1b 00 00       	call   13544 <namei>
   119c0:	83 c4 10             	add    $0x10,%esp
   119c3:	89 84 24 fc 01 00 00 	mov    %eax,0x1fc(%esp)
   119ca:	83 bc 24 fc 01 00 00 	cmpl   $0x0,0x1fc(%esp)
   119d1:	00 
   119d2:	75 0a                	jne    119de <do_execve+0x135>
		return -ENOENT;
   119d4:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   119d9:	e9 94 0a 00 00       	jmp    12472 <do_execve+0xbc9>
	argc = count(argv);											// 命令行参数个数.
   119de:	83 ec 0c             	sub    $0xc,%esp
   119e1:	ff b4 24 28 02 00 00 	pushl  0x228(%esp)
   119e8:	e8 ed fa ff ff       	call   114da <count>
   119ed:	83 c4 10             	add    $0x10,%esp
   119f0:	89 84 24 f4 01 00 00 	mov    %eax,0x1f4(%esp)
	envc = count(envp);											// 环境字符串变量个数.
   119f7:	83 ec 0c             	sub    $0xc,%esp
   119fa:	ff b4 24 2c 02 00 00 	pushl  0x22c(%esp)
   11a01:	e8 d4 fa ff ff       	call   114da <count>
   11a06:	83 c4 10             	add    $0x10,%esp
   11a09:	89 84 24 d8 01 00 00 	mov    %eax,0x1d8(%esp)

restart_interp:
	if (!S_ISREG(inode->i_mode)) {								/* must be regular file */
   11a10:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   11a17:	0f b7 00             	movzwl (%eax),%eax
   11a1a:	0f b7 c0             	movzwl %ax,%eax
   11a1d:	25 00 f0 00 00       	and    $0xf000,%eax
   11a22:	3d 00 80 00 00       	cmp    $0x8000,%eax
   11a27:	74 10                	je     11a39 <do_execve+0x190>
		retval = -EACCES;
   11a29:	c7 84 24 f0 01 00 00 	movl   $0xfffffff3,0x1f0(%esp)
   11a30:	f3 ff ff ff 
		goto exec_error2;										// 若不是常规文件则置出错码,跳转到376行.
   11a34:	e9 e7 09 00 00       	jmp    12420 <do_execve+0xb77>
	// 字段值取到i中后,我们首先查看属性中是否设置了"设置-用户-ID"(set-user-ID)标志和"设置-组-ID)(set-group-id)标志.这两
	// 个标志主要是让一般用户能够执行特权用户(如超级用户root)的程序,例如改变密码的程序passwd等.如果set-user-ID标志置位,则
	// 后面执行进程的有效用户ID(euid)就设置成执行文件的用户ID,否则设置成当前进程的euid.如果执行文件set-group-id被置位的话,
	// 则执行进程的有效组ID(egid)就设置为执行执行文件的组ID.否则设置成当前进程的egid.这里暂把这两个判断出来的值保存在变量
	// e_uid和e_gid中.
	i = inode->i_mode;
   11a39:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   11a40:	0f b7 00             	movzwl (%eax),%eax
   11a43:	0f b7 c0             	movzwl %ax,%eax
   11a46:	89 84 24 f8 01 00 00 	mov    %eax,0x1f8(%esp)
	e_uid = (i & S_ISUID) ? inode->i_uid : current->euid;
   11a4d:	8b 84 24 f8 01 00 00 	mov    0x1f8(%esp),%eax
   11a54:	25 00 08 00 00       	and    $0x800,%eax
   11a59:	85 c0                	test   %eax,%eax
   11a5b:	74 10                	je     11a6d <do_execve+0x1c4>
   11a5d:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   11a64:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   11a68:	0f b7 c0             	movzwl %ax,%eax
   11a6b:	eb 0f                	jmp    11a7c <do_execve+0x1d3>
   11a6d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   11a72:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
   11a79:	0f b7 c0             	movzwl %ax,%eax
   11a7c:	89 84 24 d4 01 00 00 	mov    %eax,0x1d4(%esp)
	e_gid = (i & S_ISGID) ? inode->i_gid : current->egid;
   11a83:	8b 84 24 f8 01 00 00 	mov    0x1f8(%esp),%eax
   11a8a:	25 00 04 00 00       	and    $0x400,%eax
   11a8f:	85 c0                	test   %eax,%eax
   11a91:	74 10                	je     11aa3 <do_execve+0x1fa>
   11a93:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   11a9a:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
   11a9e:	0f b6 c0             	movzbl %al,%eax
   11aa1:	eb 0f                	jmp    11ab2 <do_execve+0x209>
   11aa3:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   11aa8:	0f b7 80 d4 02 00 00 	movzwl 0x2d4(%eax),%eax
   11aaf:	0f b7 c0             	movzwl %ax,%eax
   11ab2:	89 84 24 d0 01 00 00 	mov    %eax,0x1d0(%esp)
	// 现在根据进程的euid和egid和执行文件的访问属性进行比较.如果执行文件属于运行进程的用户,则把文件属性值i右移6位,此时其最低3
	// 位是文件宿主的访问权限标志.否则的话如果执行文件与当前进程的用户属于同组,则使属性最低3位是执行文件组用户的访问权限标志.否则
	// 此时属性字最低3位就是其他用户访问该执行文件的权限.然后我们根据属性字i的最低3位值来判断当前进程是否有权限运行这个执行文件.
	// 如果选出的相应用户没有运行该文件的权力(位0是执行权限),并且其他用户也没有任何权限或者当前进程用户不是超级用户,则表明当前进
	// 程没有权力运行这个执行文件.于是置不可执行出错码,并跳转到exec_error2处去作退出处理.
	if (current->euid == inode->i_uid)
   11ab9:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   11abe:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
   11ac5:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   11acc:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   11ad0:	66 39 c2             	cmp    %ax,%dx
   11ad3:	75 0a                	jne    11adf <do_execve+0x236>
		i >>= 6;
   11ad5:	c1 bc 24 f8 01 00 00 	sarl   $0x6,0x1f8(%esp)
   11adc:	06 
   11add:	eb 26                	jmp    11b05 <do_execve+0x25c>
	else if (in_group_p(inode->i_gid))
   11adf:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   11ae6:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
   11aea:	0f b6 c0             	movzbl %al,%eax
   11aed:	83 ec 0c             	sub    $0xc,%esp
   11af0:	50                   	push   %eax
   11af1:	e8 40 81 ff ff       	call   9c36 <in_group_p>
   11af6:	83 c4 10             	add    $0x10,%esp
   11af9:	85 c0                	test   %eax,%eax
   11afb:	74 08                	je     11b05 <do_execve+0x25c>
		i >>= 3;
   11afd:	c1 bc 24 f8 01 00 00 	sarl   $0x3,0x1f8(%esp)
   11b04:	03 
	if (!(i & 1) &&
   11b05:	8b 84 24 f8 01 00 00 	mov    0x1f8(%esp),%eax
   11b0c:	83 e0 01             	and    $0x1,%eax
   11b0f:	85 c0                	test   %eax,%eax
   11b11:	75 35                	jne    11b48 <do_execve+0x29f>
	    !((inode->i_mode & 0111) && suser())) {
   11b13:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   11b1a:	0f b7 00             	movzwl (%eax),%eax
   11b1d:	0f b7 c0             	movzwl %ax,%eax
   11b20:	83 e0 49             	and    $0x49,%eax
	// 程没有权力运行这个执行文件.于是置不可执行出错码,并跳转到exec_error2处去作退出处理.
	if (current->euid == inode->i_uid)
		i >>= 6;
	else if (in_group_p(inode->i_gid))
		i >>= 3;
	if (!(i & 1) &&
   11b23:	85 c0                	test   %eax,%eax
   11b25:	74 11                	je     11b38 <do_execve+0x28f>
	    !((inode->i_mode & 0111) && suser())) {
   11b27:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   11b2c:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
   11b33:	66 85 c0             	test   %ax,%ax
   11b36:	74 10                	je     11b48 <do_execve+0x29f>
		retval = -ENOEXEC;
   11b38:	c7 84 24 f0 01 00 00 	movl   $0xfffffff8,0x1f0(%esp)
   11b3f:	f8 ff ff ff 
		goto exec_error2;
   11b43:	e9 d8 08 00 00       	jmp    12420 <do_execve+0xb77>
	// 的解释程序名及后面的参数(若有的话),然后将这些参数和脚本文件名放进执行文件(此时是解释程序)的命令行参数空间中.在这之前我们当然
	// 需要先把函数指定的原有命令行参数和环境字符串放到128KB空间中,而这里建立起来的命令行参数则放到它们前面位置处(因为是逆向放置).
	// 最后让内核执行脚本文件的解释程序.下面就是在设置好解释程序的脚本文件名等参数后,取出解释程序的i节点并跳转到229行支执行解释程序.
	// 由于我们需要跳转到执行过的代码229行支.因此在下面确认并处理了脚本文件之后需要设置一个禁止再次执行下面的脚本处理代码标志sh_bang.
	// 在后面的代码中该标志也用来表示我们已经设置好执行文件的命令行参数,不要重复设置.
	if (!(bh = bread(inode->i_dev, inode->i_zone[0]))) {
   11b48:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   11b4f:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   11b53:	0f b7 d0             	movzwl %ax,%edx
   11b56:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   11b5d:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   11b61:	0f b7 c0             	movzwl %ax,%eax
   11b64:	83 ec 08             	sub    $0x8,%esp
   11b67:	52                   	push   %edx
   11b68:	50                   	push   %eax
   11b69:	e8 78 db ff ff       	call   f6e6 <bread>
   11b6e:	83 c4 10             	add    $0x10,%esp
   11b71:	89 84 24 cc 01 00 00 	mov    %eax,0x1cc(%esp)
   11b78:	83 bc 24 cc 01 00 00 	cmpl   $0x0,0x1cc(%esp)
   11b7f:	00 
   11b80:	75 10                	jne    11b92 <do_execve+0x2e9>
		retval = -EACCES;
   11b82:	c7 84 24 f0 01 00 00 	movl   $0xfffffff3,0x1f0(%esp)
   11b89:	f3 ff ff ff 
		goto exec_error2;
   11b8d:	e9 8e 08 00 00       	jmp    12420 <do_execve+0xb77>
	}
	ex = *((struct exec *) bh->b_data);								/* read exec-header */
   11b92:	8b 84 24 cc 01 00 00 	mov    0x1cc(%esp),%eax
   11b99:	8b 00                	mov    (%eax),%eax
   11b9b:	8b 10                	mov    (%eax),%edx
   11b9d:	89 94 24 94 01 00 00 	mov    %edx,0x194(%esp)
   11ba4:	8b 50 04             	mov    0x4(%eax),%edx
   11ba7:	89 94 24 98 01 00 00 	mov    %edx,0x198(%esp)
   11bae:	8b 50 08             	mov    0x8(%eax),%edx
   11bb1:	89 94 24 9c 01 00 00 	mov    %edx,0x19c(%esp)
   11bb8:	8b 50 0c             	mov    0xc(%eax),%edx
   11bbb:	89 94 24 a0 01 00 00 	mov    %edx,0x1a0(%esp)
   11bc2:	8b 50 10             	mov    0x10(%eax),%edx
   11bc5:	89 94 24 a4 01 00 00 	mov    %edx,0x1a4(%esp)
   11bcc:	8b 50 14             	mov    0x14(%eax),%edx
   11bcf:	89 94 24 a8 01 00 00 	mov    %edx,0x1a8(%esp)
   11bd6:	8b 50 18             	mov    0x18(%eax),%edx
   11bd9:	89 94 24 ac 01 00 00 	mov    %edx,0x1ac(%esp)
   11be0:	8b 40 1c             	mov    0x1c(%eax),%eax
   11be3:	89 84 24 b0 01 00 00 	mov    %eax,0x1b0(%esp)
	if ((bh->b_data[0] == '#') && (bh->b_data[1] == '!') && (!sh_bang)) {
   11bea:	8b 84 24 cc 01 00 00 	mov    0x1cc(%esp),%eax
   11bf1:	8b 00                	mov    (%eax),%eax
   11bf3:	0f b6 00             	movzbl (%eax),%eax
   11bf6:	3c 23                	cmp    $0x23,%al
   11bf8:	0f 85 61 03 00 00    	jne    11f5f <do_execve+0x6b6>
   11bfe:	8b 84 24 cc 01 00 00 	mov    0x1cc(%esp),%eax
   11c05:	8b 00                	mov    (%eax),%eax
   11c07:	83 c0 01             	add    $0x1,%eax
   11c0a:	0f b6 00             	movzbl (%eax),%eax
   11c0d:	3c 21                	cmp    $0x21,%al
   11c0f:	0f 85 4a 03 00 00    	jne    11f5f <do_execve+0x6b6>
   11c15:	83 bc 24 ec 01 00 00 	cmpl   $0x0,0x1ec(%esp)
   11c1c:	00 
   11c1d:	0f 85 3c 03 00 00    	jne    11f5f <do_execve+0x6b6>
		unsigned long old_fs;

		// 从这里开始，我们从脚本文件中提取解释程序名及其参数，并把解释程序名、解释程序的参数和脚本文件名组合放入环境参数块中。首先复制脚本
		// 文件头1行字符‘#!’后面的字符串到buf中，其中含有脚本解释程序名（例如/bin/sh），也可能还包含解释程序的几个参数。然后对buf中的内容
		// 进行处理。删除开始的空格、制表符。
		strncpy(buf, bh->b_data + 2, 127);
   11c23:	8b 84 24 cc 01 00 00 	mov    0x1cc(%esp),%eax
   11c2a:	8b 00                	mov    (%eax),%eax
   11c2c:	83 c0 02             	add    $0x2,%eax
   11c2f:	83 ec 04             	sub    $0x4,%esp
   11c32:	6a 7f                	push   $0x7f
   11c34:	50                   	push   %eax
   11c35:	8d 44 24 18          	lea    0x18(%esp),%eax
   11c39:	50                   	push   %eax
   11c3a:	e8 bc f5 ff ff       	call   111fb <strncpy>
   11c3f:	83 c4 10             	add    $0x10,%esp
		brelse(bh);             									// 释放缓冲块并放回脚本文件i节点。
   11c42:	83 ec 0c             	sub    $0xc,%esp
   11c45:	ff b4 24 d8 01 00 00 	pushl  0x1d8(%esp)
   11c4c:	e8 3f da ff ff       	call   f690 <brelse>
   11c51:	83 c4 10             	add    $0x10,%esp
		iput(inode);
   11c54:	83 ec 0c             	sub    $0xc,%esp
   11c57:	ff b4 24 08 02 00 00 	pushl  0x208(%esp)
   11c5e:	e8 8c ca ff ff       	call   e6ef <iput>
   11c63:	83 c4 10             	add    $0x10,%esp
		buf[127] = '\0';
   11c66:	c6 84 24 8b 00 00 00 	movb   $0x0,0x8b(%esp)
   11c6d:	00 
		if (cp = strchr(buf, '\n')) {
   11c6e:	83 ec 08             	sub    $0x8,%esp
   11c71:	6a 0a                	push   $0xa
   11c73:	8d 44 24 18          	lea    0x18(%esp),%eax
   11c77:	50                   	push   %eax
   11c78:	e8 a5 f5 ff ff       	call   11222 <strchr>
   11c7d:	83 c4 10             	add    $0x10,%esp
   11c80:	89 84 24 e0 01 00 00 	mov    %eax,0x1e0(%esp)
   11c87:	83 bc 24 e0 01 00 00 	cmpl   $0x0,0x1e0(%esp)
   11c8e:	00 
   11c8f:	74 3b                	je     11ccc <do_execve+0x423>
			*cp = '\0';     										// 第1个换行符换成NULL并去掉行头空格制表符。
   11c91:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11c98:	c6 00 00             	movb   $0x0,(%eax)
			for (cp = buf; (*cp == ' ') || (*cp == '\t'); cp++);
   11c9b:	8d 44 24 0c          	lea    0xc(%esp),%eax
   11c9f:	89 84 24 e0 01 00 00 	mov    %eax,0x1e0(%esp)
   11ca6:	eb 08                	jmp    11cb0 <do_execve+0x407>
   11ca8:	83 84 24 e0 01 00 00 	addl   $0x1,0x1e0(%esp)
   11caf:	01 
   11cb0:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11cb7:	0f b6 00             	movzbl (%eax),%eax
   11cba:	3c 20                	cmp    $0x20,%al
   11cbc:	74 ea                	je     11ca8 <do_execve+0x3ff>
   11cbe:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11cc5:	0f b6 00             	movzbl (%eax),%eax
   11cc8:	3c 09                	cmp    $0x9,%al
   11cca:	74 dc                	je     11ca8 <do_execve+0x3ff>
		}
		if (!cp || *cp == '\0') {       							// 若该行没有其他内容，则出错。
   11ccc:	83 bc 24 e0 01 00 00 	cmpl   $0x0,0x1e0(%esp)
   11cd3:	00 
   11cd4:	74 0e                	je     11ce4 <do_execve+0x43b>
   11cd6:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11cdd:	0f b6 00             	movzbl (%eax),%eax
   11ce0:	84 c0                	test   %al,%al
   11ce2:	75 10                	jne    11cf4 <do_execve+0x44b>
			retval = -ENOEXEC; 										/* No interpreter name found */
   11ce4:	c7 84 24 f0 01 00 00 	movl   $0xfffffff8,0x1f0(%esp)
   11ceb:	f8 ff ff ff 
			goto exec_error1;       								/* 没有找到脚本解释程序名 */
   11cef:	e9 3e 07 00 00       	jmp    12432 <do_execve+0xb89>
		}
		// 此时我们得到了开头是脚本解释程序名的一行内容（字符串）。下面分析该行。首先取第一个字符串，它应该是解释程序名，此时i_name指向该
		// 名称。若解释程序名后还有字符，则它们应该是解释程序的参数串，于是令i_arg指向该串。
		interp = i_name = cp;
   11cf4:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11cfb:	89 84 24 90 00 00 00 	mov    %eax,0x90(%esp)
   11d02:	8b 84 24 90 00 00 00 	mov    0x90(%esp),%eax
   11d09:	89 84 24 c8 01 00 00 	mov    %eax,0x1c8(%esp)
		i_arg = 0;
   11d10:	c7 84 24 8c 00 00 00 	movl   $0x0,0x8c(%esp)
   11d17:	00 00 00 00 
		for ( ; *cp && (*cp != ' ') && (*cp != '\t'); cp++) {
   11d1b:	eb 27                	jmp    11d44 <do_execve+0x49b>
 			if (*cp == '/')
   11d1d:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11d24:	0f b6 00             	movzbl (%eax),%eax
   11d27:	3c 2f                	cmp    $0x2f,%al
   11d29:	75 11                	jne    11d3c <do_execve+0x493>
				i_name = cp+1;
   11d2b:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11d32:	83 c0 01             	add    $0x1,%eax
   11d35:	89 84 24 90 00 00 00 	mov    %eax,0x90(%esp)
		}
		// 此时我们得到了开头是脚本解释程序名的一行内容（字符串）。下面分析该行。首先取第一个字符串，它应该是解释程序名，此时i_name指向该
		// 名称。若解释程序名后还有字符，则它们应该是解释程序的参数串，于是令i_arg指向该串。
		interp = i_name = cp;
		i_arg = 0;
		for ( ; *cp && (*cp != ' ') && (*cp != '\t'); cp++) {
   11d3c:	83 84 24 e0 01 00 00 	addl   $0x1,0x1e0(%esp)
   11d43:	01 
   11d44:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11d4b:	0f b6 00             	movzbl (%eax),%eax
   11d4e:	84 c0                	test   %al,%al
   11d50:	74 1c                	je     11d6e <do_execve+0x4c5>
   11d52:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11d59:	0f b6 00             	movzbl (%eax),%eax
   11d5c:	3c 20                	cmp    $0x20,%al
   11d5e:	74 0e                	je     11d6e <do_execve+0x4c5>
   11d60:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11d67:	0f b6 00             	movzbl (%eax),%eax
   11d6a:	3c 09                	cmp    $0x9,%al
   11d6c:	75 af                	jne    11d1d <do_execve+0x474>
 			if (*cp == '/')
				i_name = cp+1;
		}
		if (*cp) {
   11d6e:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11d75:	0f b6 00             	movzbl (%eax),%eax
   11d78:	84 c0                	test   %al,%al
   11d7a:	74 22                	je     11d9e <do_execve+0x4f5>
			*cp++ = '\0';           								// 解释程序名尾添加NULL字符。
   11d7c:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11d83:	8d 50 01             	lea    0x1(%eax),%edx
   11d86:	89 94 24 e0 01 00 00 	mov    %edx,0x1e0(%esp)
   11d8d:	c6 00 00             	movb   $0x0,(%eax)
			i_arg = cp;             								// i_arg指向解释程序参数。
   11d90:	8b 84 24 e0 01 00 00 	mov    0x1e0(%esp),%eax
   11d97:	89 84 24 8c 00 00 00 	mov    %eax,0x8c(%esp)
		// 这里我们把sh_bang标志置上，然后把函数参数提供的原有参数和环境字符串放入到空间中。环境字符串和参数个数分别是envc和
		// argc-1个。少复制的一个原有参数是原来的执行文件名，即这里的脚本文件名。[[?? 可以看出，实际上我们不需要去另行处理脚本
		// 文件名，即这里完全可以复制argc个参数，包括原来执行文件名（即现在的脚本文件名）。因为它位于同一个位置上]]。注意！这里
		// 指针p随着复制信息增加而逐渐向小地址方向移动，因此这两个复制串函数执行完后，环境参数串信息块位于程序命令行参数串信息块
		// 的上方，并且p指向程序的第1个参数串。copy_strings()最后一个参数（0）指明参数字符串在用户空间。
		if (sh_bang++ == 0) {
   11d9e:	8b 84 24 ec 01 00 00 	mov    0x1ec(%esp),%eax
   11da5:	8d 50 01             	lea    0x1(%eax),%edx
   11da8:	89 94 24 ec 01 00 00 	mov    %edx,0x1ec(%esp)
   11daf:	85 c0                	test   %eax,%eax
   11db1:	75 6e                	jne    11e21 <do_execve+0x578>
			p = copy_strings(envc, envp, page, p, 0);
   11db3:	83 ec 0c             	sub    $0xc,%esp
   11db6:	6a 00                	push   $0x0
   11db8:	ff b4 24 f8 01 00 00 	pushl  0x1f8(%esp)
   11dbf:	8d 84 24 28 01 00 00 	lea    0x128(%esp),%eax
   11dc6:	50                   	push   %eax
   11dc7:	ff b4 24 38 02 00 00 	pushl  0x238(%esp)
   11dce:	ff b4 24 f4 01 00 00 	pushl  0x1f4(%esp)
   11dd5:	e8 41 f7 ff ff       	call   1151b <copy_strings>
   11dda:	83 c4 20             	add    $0x20,%esp
   11ddd:	89 84 24 e8 01 00 00 	mov    %eax,0x1e8(%esp)
			p = copy_strings(--argc, argv + 1, page, p, 0);
   11de4:	8b 84 24 1c 02 00 00 	mov    0x21c(%esp),%eax
   11deb:	8d 50 04             	lea    0x4(%eax),%edx
   11dee:	83 ac 24 f4 01 00 00 	subl   $0x1,0x1f4(%esp)
   11df5:	01 
   11df6:	83 ec 0c             	sub    $0xc,%esp
   11df9:	6a 00                	push   $0x0
   11dfb:	ff b4 24 f8 01 00 00 	pushl  0x1f8(%esp)
   11e02:	8d 84 24 28 01 00 00 	lea    0x128(%esp),%eax
   11e09:	50                   	push   %eax
   11e0a:	52                   	push   %edx
   11e0b:	ff b4 24 10 02 00 00 	pushl  0x210(%esp)
   11e12:	e8 04 f7 ff ff       	call   1151b <copy_strings>
   11e17:	83 c4 20             	add    $0x20,%esp
   11e1a:	89 84 24 e8 01 00 00 	mov    %eax,0x1e8(%esp)
         */
		// 接着我们逆向复制脚本文件名、解释程序的参数和解释程序文件名到参数和环境空间中。若出错，则置出错吗，跳转到exec_error1。
		// 另外，由于本函数参数提供的脚本文件名filename在用户空间，但这里赋予copy_strings()的脚本文件名的指针在内核空间，因此
		// 这个复制字符串函数的最后一个参数（字符串来源标志）需要被设置成1。若字符串在内核空间，则copy_strings()的最后一个参数
		// 要设置成功，如下面。
		p = copy_strings(1, &filename, page, p, 1);
   11e21:	83 ec 0c             	sub    $0xc,%esp
   11e24:	6a 01                	push   $0x1
   11e26:	ff b4 24 f8 01 00 00 	pushl  0x1f8(%esp)
   11e2d:	8d 84 24 28 01 00 00 	lea    0x128(%esp),%eax
   11e34:	50                   	push   %eax
   11e35:	8d 84 24 30 02 00 00 	lea    0x230(%esp),%eax
   11e3c:	50                   	push   %eax
   11e3d:	6a 01                	push   $0x1
   11e3f:	e8 d7 f6 ff ff       	call   1151b <copy_strings>
   11e44:	83 c4 20             	add    $0x20,%esp
   11e47:	89 84 24 e8 01 00 00 	mov    %eax,0x1e8(%esp)
		argc++;
   11e4e:	83 84 24 f4 01 00 00 	addl   $0x1,0x1f4(%esp)
   11e55:	01 
		if (i_arg) {            									// 复制解释程序的多个参数。
   11e56:	8b 84 24 8c 00 00 00 	mov    0x8c(%esp),%eax
   11e5d:	85 c0                	test   %eax,%eax
   11e5f:	74 35                	je     11e96 <do_execve+0x5ed>
			p = copy_strings(1, &i_arg, page, p, 2);
   11e61:	83 ec 0c             	sub    $0xc,%esp
   11e64:	6a 02                	push   $0x2
   11e66:	ff b4 24 f8 01 00 00 	pushl  0x1f8(%esp)
   11e6d:	8d 84 24 28 01 00 00 	lea    0x128(%esp),%eax
   11e74:	50                   	push   %eax
   11e75:	8d 84 24 a4 00 00 00 	lea    0xa4(%esp),%eax
   11e7c:	50                   	push   %eax
   11e7d:	6a 01                	push   $0x1
   11e7f:	e8 97 f6 ff ff       	call   1151b <copy_strings>
   11e84:	83 c4 20             	add    $0x20,%esp
   11e87:	89 84 24 e8 01 00 00 	mov    %eax,0x1e8(%esp)
			argc++;
   11e8e:	83 84 24 f4 01 00 00 	addl   $0x1,0x1f4(%esp)
   11e95:	01 
		}
		p = copy_strings(1, &i_name, page, p, 2);
   11e96:	83 ec 0c             	sub    $0xc,%esp
   11e99:	6a 02                	push   $0x2
   11e9b:	ff b4 24 f8 01 00 00 	pushl  0x1f8(%esp)
   11ea2:	8d 84 24 28 01 00 00 	lea    0x128(%esp),%eax
   11ea9:	50                   	push   %eax
   11eaa:	8d 84 24 a8 00 00 00 	lea    0xa8(%esp),%eax
   11eb1:	50                   	push   %eax
   11eb2:	6a 01                	push   $0x1
   11eb4:	e8 62 f6 ff ff       	call   1151b <copy_strings>
   11eb9:	83 c4 20             	add    $0x20,%esp
   11ebc:	89 84 24 e8 01 00 00 	mov    %eax,0x1e8(%esp)
		argc++;
   11ec3:	83 84 24 f4 01 00 00 	addl   $0x1,0x1f4(%esp)
   11eca:	01 
		if (!p) {
   11ecb:	83 bc 24 e8 01 00 00 	cmpl   $0x0,0x1e8(%esp)
   11ed2:	00 
   11ed3:	75 10                	jne    11ee5 <do_execve+0x63c>
			retval = -ENOMEM;
   11ed5:	c7 84 24 f0 01 00 00 	movl   $0xfffffff4,0x1f0(%esp)
   11edc:	f4 ff ff ff 
			goto exec_error1;
   11ee0:	e9 4d 05 00 00       	jmp    12432 <do_execve+0xb89>
		// 最后我们取得解释程序的i节点指针，然后跳转到204行去执行解释程序。为了获得解释程序的i节点，我们需要使用namei()函数，但是该函数
		// 所使用的参数（文件名）是从用户数据空间得到的，即从段寄存器fs所指空间中取得。因此在调用namei()函数之前我们需要先临时让fs指向内
		// 核数据空间，以让函数能从内核空间得到解释程序名，并在namei()返回后恢复fs的默认设置。因此这里我们先临时保存原fs段寄存器（原指向
		// 用户数据段）的值，将其设置成指向内核数据段，然后取解释程序的i节点。之后再恢复fs的原值。并跳转到restart_interp（204行）处重新
		// 处理新的执行文件 -- 脚本文件的解释程序。
		old_fs = get_fs();
   11ee5:	e8 97 f3 ff ff       	call   11281 <get_fs>
   11eea:	89 84 24 c4 01 00 00 	mov    %eax,0x1c4(%esp)
		set_fs(get_ds());
   11ef1:	e8 9f f3 ff ff       	call   11295 <get_ds>
   11ef6:	83 ec 0c             	sub    $0xc,%esp
   11ef9:	50                   	push   %eax
   11efa:	e8 aa f3 ff ff       	call   112a9 <set_fs>
   11eff:	83 c4 10             	add    $0x10,%esp
		if (!(inode = namei(interp))) { 						/* get executables inode */
   11f02:	83 ec 0c             	sub    $0xc,%esp
   11f05:	ff b4 24 d4 01 00 00 	pushl  0x1d4(%esp)
   11f0c:	e8 33 16 00 00       	call   13544 <namei>
   11f11:	83 c4 10             	add    $0x10,%esp
   11f14:	89 84 24 fc 01 00 00 	mov    %eax,0x1fc(%esp)
   11f1b:	83 bc 24 fc 01 00 00 	cmpl   $0x0,0x1fc(%esp)
   11f22:	00 
   11f23:	75 23                	jne    11f48 <do_execve+0x69f>
			set_fs(old_fs);       								/* 取得解释程序的i节点 */
   11f25:	83 ec 0c             	sub    $0xc,%esp
   11f28:	ff b4 24 d0 01 00 00 	pushl  0x1d0(%esp)
   11f2f:	e8 75 f3 ff ff       	call   112a9 <set_fs>
   11f34:	83 c4 10             	add    $0x10,%esp
			retval = -ENOENT;
   11f37:	c7 84 24 f0 01 00 00 	movl   $0xfffffffe,0x1f0(%esp)
   11f3e:	fe ff ff ff 
			goto exec_error1;
   11f42:	90                   	nop
   11f43:	e9 ea 04 00 00       	jmp    12432 <do_execve+0xb89>
		}
		set_fs(old_fs);
   11f48:	83 ec 0c             	sub    $0xc,%esp
   11f4b:	ff b4 24 d0 01 00 00 	pushl  0x1d0(%esp)
   11f52:	e8 52 f3 ff ff       	call   112a9 <set_fs>
   11f57:	83 c4 10             	add    $0x10,%esp
   11f5a:	e9 b1 fa ff ff       	jmp    11a10 <do_execve+0x167>
	// 此时缓冲块中的执行文件头结构已经复制到了ex中.于是先释放该缓冲块,并开始对ex中的执行头信息进行判断处理.对于Linux0.12内核来说,
	// 它仅支持ZMAGIC执行格式,并且执行文件代码都从逻辑地址0开始执行,因此不支持含有代码或数据重定位信息的执行文件.当然,如果执行文件
	// 实在太大或者执行文件残缺不全,那么我们也不能运行它.因此对于下列情况将不执行程序:如果执行文件不是需求页可执行文件(ZMAGIC),或者
	// 代码和数据重定位部分长度不等于0,或者(代码段+数据段+堆)长度超过50MB,或者执行文件长度小于(代码段+数据段+符号表长度+执行头部分)
	// 长度的总和.
	brelse(bh);
   11f5f:	83 ec 0c             	sub    $0xc,%esp
   11f62:	ff b4 24 d8 01 00 00 	pushl  0x1d8(%esp)
   11f69:	e8 22 d7 ff ff       	call   f690 <brelse>
   11f6e:	83 c4 10             	add    $0x10,%esp
	if (N_MAGIC(ex) != ZMAGIC || ex.a_trsize || ex.a_drsize ||
   11f71:	8b 84 24 94 01 00 00 	mov    0x194(%esp),%eax
   11f78:	3d 0b 01 00 00       	cmp    $0x10b,%eax
   11f7d:	75 7a                	jne    11ff9 <do_execve+0x750>
   11f7f:	8b 84 24 ac 01 00 00 	mov    0x1ac(%esp),%eax
   11f86:	85 c0                	test   %eax,%eax
   11f88:	75 6f                	jne    11ff9 <do_execve+0x750>
   11f8a:	8b 84 24 b0 01 00 00 	mov    0x1b0(%esp),%eax
   11f91:	85 c0                	test   %eax,%eax
   11f93:	75 64                	jne    11ff9 <do_execve+0x750>
		ex.a_text + ex.a_data + ex.a_bss > 0x3000000 ||
   11f95:	8b 94 24 98 01 00 00 	mov    0x198(%esp),%edx
   11f9c:	8b 84 24 9c 01 00 00 	mov    0x19c(%esp),%eax
   11fa3:	01 c2                	add    %eax,%edx
   11fa5:	8b 84 24 a0 01 00 00 	mov    0x1a0(%esp),%eax
   11fac:	01 d0                	add    %edx,%eax
	// 它仅支持ZMAGIC执行格式,并且执行文件代码都从逻辑地址0开始执行,因此不支持含有代码或数据重定位信息的执行文件.当然,如果执行文件
	// 实在太大或者执行文件残缺不全,那么我们也不能运行它.因此对于下列情况将不执行程序:如果执行文件不是需求页可执行文件(ZMAGIC),或者
	// 代码和数据重定位部分长度不等于0,或者(代码段+数据段+堆)长度超过50MB,或者执行文件长度小于(代码段+数据段+符号表长度+执行头部分)
	// 长度的总和.
	brelse(bh);
	if (N_MAGIC(ex) != ZMAGIC || ex.a_trsize || ex.a_drsize ||
   11fae:	3d 00 00 00 03       	cmp    $0x3000000,%eax
   11fb3:	77 44                	ja     11ff9 <do_execve+0x750>
		ex.a_text + ex.a_data + ex.a_bss > 0x3000000 ||
		inode->i_size < ex.a_text + ex.a_data + ex.a_syms + N_TXTOFF(ex)) {
   11fb5:	8b 84 24 fc 01 00 00 	mov    0x1fc(%esp),%eax
   11fbc:	8b 40 04             	mov    0x4(%eax),%eax
   11fbf:	8b 8c 24 98 01 00 00 	mov    0x198(%esp),%ecx
   11fc6:	8b 94 24 9c 01 00 00 	mov    0x19c(%esp),%edx
   11fcd:	01 d1                	add    %edx,%ecx
   11fcf:	8b 94 24 a4 01 00 00 	mov    0x1a4(%esp),%edx
   11fd6:	01 d1                	add    %edx,%ecx
   11fd8:	8b 94 24 94 01 00 00 	mov    0x194(%esp),%edx
   11fdf:	81 fa 0b 01 00 00    	cmp    $0x10b,%edx
   11fe5:	75 07                	jne    11fee <do_execve+0x745>
   11fe7:	ba 00 04 00 00       	mov    $0x400,%edx
   11fec:	eb 05                	jmp    11ff3 <do_execve+0x74a>
   11fee:	ba 20 00 00 00       	mov    $0x20,%edx
   11ff3:	01 ca                	add    %ecx,%edx
	// 实在太大或者执行文件残缺不全,那么我们也不能运行它.因此对于下列情况将不执行程序:如果执行文件不是需求页可执行文件(ZMAGIC),或者
	// 代码和数据重定位部分长度不等于0,或者(代码段+数据段+堆)长度超过50MB,或者执行文件长度小于(代码段+数据段+符号表长度+执行头部分)
	// 长度的总和.
	brelse(bh);
	if (N_MAGIC(ex) != ZMAGIC || ex.a_trsize || ex.a_drsize ||
		ex.a_text + ex.a_data + ex.a_bss > 0x3000000 ||
   11ff5:	39 d0                	cmp    %edx,%eax
   11ff7:	73 10                	jae    12009 <do_execve+0x760>
		inode->i_size < ex.a_text + ex.a_data + ex.a_syms + N_TXTOFF(ex)) {
		retval = -ENOEXEC;
   11ff9:	c7 84 24 f0 01 00 00 	movl   $0xfffffff8,0x1f0(%esp)
   12000:	f8 ff ff ff 
		goto exec_error2;
   12004:	e9 17 04 00 00       	jmp    12420 <do_execve+0xb77>
	}
	// 另外,如果执行文件中代码开始处没有位于1个页面(1024字节)边界处,则也不能执行.因为需求页(Demand paging)技术要求加载执行文件内容
	// 时以页面为单位,因此要求执行文件映像中代码和数据都从页面边界处开始.
	if (N_TXTOFF(ex) != BLOCK_SIZE) {
   12009:	8b 84 24 94 01 00 00 	mov    0x194(%esp),%eax
   12010:	3d 0b 01 00 00       	cmp    $0x10b,%eax
   12015:	74 28                	je     1203f <do_execve+0x796>
		printk("%s: N_TXTOFF != BLOCK_SIZE. See a.out.h.", filename);
   12017:	8b 84 24 18 02 00 00 	mov    0x218(%esp),%eax
   1201e:	83 ec 08             	sub    $0x8,%esp
   12021:	50                   	push   %eax
   12022:	68 14 3c 02 00       	push   $0x23c14
   12027:	e8 1b 6c ff ff       	call   8c47 <printk>
   1202c:	83 c4 10             	add    $0x10,%esp
		retval = -ENOEXEC;
   1202f:	c7 84 24 f0 01 00 00 	movl   $0xfffffff8,0x1f0(%esp)
   12036:	f8 ff ff ff 
		goto exec_error2;
   1203a:	e9 e1 03 00 00       	jmp    12420 <do_execve+0xb77>
	}
	// 如果sh_bang标志没有设置,则复制指定个数的命令行参数和环境字符串到参数和环境空间中.若sh_bang标志已经设置,则表明将运行脚本解释程序,
	// 此时一环境变量页面已经复制,无须再复制.同样,若sh_bang没有置位而需要复制的话,那么此时指针p随着复制信息增加而逐渐向小地址方向移动,
	// 因此这两个复制串函数执行完后,环境参数串信息块位于程序参数串信息块的上方,并且p指向程序的第1个参数串.事实上,p是128KB参数和环境空间
	// 中的偏移值.因此如果p=0,则表示环境变量与参数空间页面已经被占满,容纳不下了.
	if (!sh_bang) {
   1203f:	83 bc 24 ec 01 00 00 	cmpl   $0x0,0x1ec(%esp)
   12046:	00 
   12047:	75 7c                	jne    120c5 <do_execve+0x81c>
		p = copy_strings(envc, envp, page, p, 0);
   12049:	83 ec 0c             	sub    $0xc,%esp
   1204c:	6a 00                	push   $0x0
   1204e:	ff b4 24 f8 01 00 00 	pushl  0x1f8(%esp)
   12055:	8d 84 24 28 01 00 00 	lea    0x128(%esp),%eax
   1205c:	50                   	push   %eax
   1205d:	ff b4 24 38 02 00 00 	pushl  0x238(%esp)
   12064:	ff b4 24 f4 01 00 00 	pushl  0x1f4(%esp)
   1206b:	e8 ab f4 ff ff       	call   1151b <copy_strings>
   12070:	83 c4 20             	add    $0x20,%esp
   12073:	89 84 24 e8 01 00 00 	mov    %eax,0x1e8(%esp)
		p = copy_strings(argc, argv, page, p, 0);
   1207a:	83 ec 0c             	sub    $0xc,%esp
   1207d:	6a 00                	push   $0x0
   1207f:	ff b4 24 f8 01 00 00 	pushl  0x1f8(%esp)
   12086:	8d 84 24 28 01 00 00 	lea    0x128(%esp),%eax
   1208d:	50                   	push   %eax
   1208e:	ff b4 24 34 02 00 00 	pushl  0x234(%esp)
   12095:	ff b4 24 10 02 00 00 	pushl  0x210(%esp)
   1209c:	e8 7a f4 ff ff       	call   1151b <copy_strings>
   120a1:	83 c4 20             	add    $0x20,%esp
   120a4:	89 84 24 e8 01 00 00 	mov    %eax,0x1e8(%esp)
		if (!p) {
   120ab:	83 bc 24 e8 01 00 00 	cmpl   $0x0,0x1e8(%esp)
   120b2:	00 
   120b3:	75 10                	jne    120c5 <do_execve+0x81c>
			retval = -ENOMEM;
   120b5:	c7 84 24 f0 01 00 00 	movl   $0xfffffff4,0x1f0(%esp)
   120bc:	f4 ff ff ff 
			goto exec_error2;
   120c0:	e9 5b 03 00 00       	jmp    12420 <do_execve+0xb77>
	// get_free_page()分配了物理内存页来保存数据,并在chang_ldt()函数中使用put_page()到了进程逻辑空间的末端处.另外,在create_tables()
	// 中也会由于在用户栈上存放参数和环境指针表而引起缺页异常,从而内存管理程序也会就此为用户栈空间映射物理内存页.
	//
	// 这里我们首先放回进程原执行程序的i节点,并且让进程executable字段指向新执行文件的i节点.然后复位原进程的所有信号处理句柄,但对于SIG_IGN
	// 句柄无须复位.
	if (current->executable)
   120c5:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   120ca:	8b 80 3c 03 00 00    	mov    0x33c(%eax),%eax
   120d0:	85 c0                	test   %eax,%eax
   120d2:	74 17                	je     120eb <do_execve+0x842>
		iput(current->executable);
   120d4:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   120d9:	8b 80 3c 03 00 00    	mov    0x33c(%eax),%eax
   120df:	83 ec 0c             	sub    $0xc,%esp
   120e2:	50                   	push   %eax
   120e3:	e8 07 c6 ff ff       	call   e6ef <iput>
   120e8:	83 c4 10             	add    $0x10,%esp
	current->executable = inode;
   120eb:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   120f0:	8b 94 24 fc 01 00 00 	mov    0x1fc(%esp),%edx
   120f7:	89 90 3c 03 00 00    	mov    %edx,0x33c(%eax)
	current->signal = 0;
   120fd:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   12102:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	for (i = 0 ; i < 32 ; i++) {
   12109:	c7 84 24 f8 01 00 00 	movl   $0x0,0x1f8(%esp)
   12110:	00 00 00 00 
   12114:	eb 77                	jmp    1218d <do_execve+0x8e4>
		current->sigaction[i].sa_mask = 0;
   12116:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1211b:	8b 94 24 f8 01 00 00 	mov    0x1f8(%esp),%edx
   12122:	83 c2 01             	add    $0x1,%edx
   12125:	c1 e2 04             	shl    $0x4,%edx
   12128:	01 d0                	add    %edx,%eax
   1212a:	83 c0 04             	add    $0x4,%eax
   1212d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		current->sigaction[i].sa_flags = 0;
   12133:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   12138:	8b 94 24 f8 01 00 00 	mov    0x1f8(%esp),%edx
   1213f:	83 c2 01             	add    $0x1,%edx
   12142:	c1 e2 04             	shl    $0x4,%edx
   12145:	01 d0                	add    %edx,%eax
   12147:	83 c0 08             	add    $0x8,%eax
   1214a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		if (current->sigaction[i].sa_handler != SIG_IGN)
   12150:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   12155:	8b 94 24 f8 01 00 00 	mov    0x1f8(%esp),%edx
   1215c:	83 c2 01             	add    $0x1,%edx
   1215f:	c1 e2 04             	shl    $0x4,%edx
   12162:	01 d0                	add    %edx,%eax
   12164:	8b 00                	mov    (%eax),%eax
   12166:	83 f8 01             	cmp    $0x1,%eax
   12169:	74 1a                	je     12185 <do_execve+0x8dc>
			current->sigaction[i].sa_handler = NULL;
   1216b:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   12170:	8b 94 24 f8 01 00 00 	mov    0x1f8(%esp),%edx
   12177:	83 c2 01             	add    $0x1,%edx
   1217a:	c1 e2 04             	shl    $0x4,%edx
   1217d:	01 d0                	add    %edx,%eax
   1217f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	// 句柄无须复位.
	if (current->executable)
		iput(current->executable);
	current->executable = inode;
	current->signal = 0;
	for (i = 0 ; i < 32 ; i++) {
   12185:	83 84 24 f8 01 00 00 	addl   $0x1,0x1f8(%esp)
   1218c:	01 
   1218d:	83 bc 24 f8 01 00 00 	cmpl   $0x1f,0x1f8(%esp)
   12194:	1f 
   12195:	0f 8e 7b ff ff ff    	jle    12116 <do_execve+0x86d>
		current->sigaction[i].sa_flags = 0;
		if (current->sigaction[i].sa_handler != SIG_IGN)
			current->sigaction[i].sa_handler = NULL;
	}
	// 再根据设定的执行时关闭文件句柄(close_on_exec)位图标志,关闭指定的打开文件并复位该标志
	for (i = 0 ; i < NR_OPEN ; i++)
   1219b:	c7 84 24 f8 01 00 00 	movl   $0x0,0x1f8(%esp)
   121a2:	00 00 00 00 
   121a6:	eb 39                	jmp    121e1 <do_execve+0x938>
		if ((current->close_on_exec >> i) & 1)
   121a8:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   121ad:	8b 90 44 03 00 00    	mov    0x344(%eax),%edx
   121b3:	8b 84 24 f8 01 00 00 	mov    0x1f8(%esp),%eax
   121ba:	89 c1                	mov    %eax,%ecx
   121bc:	d3 ea                	shr    %cl,%edx
   121be:	89 d0                	mov    %edx,%eax
   121c0:	83 e0 01             	and    $0x1,%eax
   121c3:	85 c0                	test   %eax,%eax
   121c5:	74 12                	je     121d9 <do_execve+0x930>
			sys_close(i);
   121c7:	83 ec 0c             	sub    $0xc,%esp
   121ca:	ff b4 24 04 02 00 00 	pushl  0x204(%esp)
   121d1:	e8 fa b9 ff ff       	call   dbd0 <sys_close>
   121d6:	83 c4 10             	add    $0x10,%esp
		current->sigaction[i].sa_flags = 0;
		if (current->sigaction[i].sa_handler != SIG_IGN)
			current->sigaction[i].sa_handler = NULL;
	}
	// 再根据设定的执行时关闭文件句柄(close_on_exec)位图标志,关闭指定的打开文件并复位该标志
	for (i = 0 ; i < NR_OPEN ; i++)
   121d9:	83 84 24 f8 01 00 00 	addl   $0x1,0x1f8(%esp)
   121e0:	01 
   121e1:	83 bc 24 f8 01 00 00 	cmpl   $0x13,0x1f8(%esp)
   121e8:	13 
   121e9:	7e bd                	jle    121a8 <do_execve+0x8ff>
		if ((current->close_on_exec >> i) & 1)
			sys_close(i);
	current->close_on_exec = 0;
   121eb:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   121f0:	c7 80 44 03 00 00 00 	movl   $0x0,0x344(%eax)
   121f7:	00 00 00 
	// 然后根据当前进程指定的基地址和限长,释放原来程序的代码段和数据段所对应的内存页表指定的物理内存页面及页表本身.此时新执行文件并没有占用主
	// 内存区任何页面,因此在处理器真正运行新执行文件代码时就会引起缺页异常中断,此时内存管理程序即会执行缺页处理页为新执行文件申请内存页面和
	// 设置相关页表项,并且把相关执行文件页面读入内存中.如果"上次任务使用了协处理器"指向的是当前进程,则将其置空,并复位使用了协处理器的标志.
	free_page_tables(get_base(current->ldt[1]), get_limit(0x0f));
   121fa:	b8 0f 00 00 00       	mov    $0xf,%eax
   121ff:	0f 03 c0             	lsl    %ax,%eax
   12202:	40                   	inc    %eax
   12203:	89 84 24 c0 01 00 00 	mov    %eax,0x1c0(%esp)
   1220a:	8b 8c 24 c0 01 00 00 	mov    0x1c0(%esp),%ecx
   12211:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   12216:	05 a0 03 00 00       	add    $0x3a0,%eax
   1221b:	83 c0 02             	add    $0x2,%eax
   1221e:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   12224:	81 c2 a0 03 00 00    	add    $0x3a0,%edx
   1222a:	8d 72 04             	lea    0x4(%edx),%esi
   1222d:	8b 1d a0 e1 02 00    	mov    0x2e1a0,%ebx
   12233:	81 c3 a0 03 00 00    	add    $0x3a0,%ebx
   12239:	83 c3 07             	add    $0x7,%ebx
   1223c:	8a 33                	mov    (%ebx),%dh
   1223e:	8a 16                	mov    (%esi),%dl
   12240:	c1 e2 10             	shl    $0x10,%edx
   12243:	66 8b 10             	mov    (%eax),%dx
   12246:	89 d0                	mov    %edx,%eax
   12248:	89 84 24 bc 01 00 00 	mov    %eax,0x1bc(%esp)
   1224f:	8b 84 24 bc 01 00 00 	mov    0x1bc(%esp),%eax
   12256:	83 ec 08             	sub    $0x8,%esp
   12259:	51                   	push   %ecx
   1225a:	50                   	push   %eax
   1225b:	e8 19 9b ff ff       	call   bd79 <free_page_tables>
   12260:	83 c4 10             	add    $0x10,%esp
	free_page_tables(get_base(current->ldt[2]), get_limit(0x17));
   12263:	b8 17 00 00 00       	mov    $0x17,%eax
   12268:	0f 03 c0             	lsl    %ax,%eax
   1226b:	40                   	inc    %eax
   1226c:	89 84 24 b8 01 00 00 	mov    %eax,0x1b8(%esp)
   12273:	8b 8c 24 b8 01 00 00 	mov    0x1b8(%esp),%ecx
   1227a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1227f:	05 a8 03 00 00       	add    $0x3a8,%eax
   12284:	83 c0 02             	add    $0x2,%eax
   12287:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   1228d:	81 c2 a8 03 00 00    	add    $0x3a8,%edx
   12293:	8d 7a 04             	lea    0x4(%edx),%edi
   12296:	8b 1d a0 e1 02 00    	mov    0x2e1a0,%ebx
   1229c:	81 c3 a8 03 00 00    	add    $0x3a8,%ebx
   122a2:	83 c3 07             	add    $0x7,%ebx
   122a5:	8a 33                	mov    (%ebx),%dh
   122a7:	8a 17                	mov    (%edi),%dl
   122a9:	c1 e2 10             	shl    $0x10,%edx
   122ac:	66 8b 10             	mov    (%eax),%dx
   122af:	89 d0                	mov    %edx,%eax
   122b1:	89 84 24 b4 01 00 00 	mov    %eax,0x1b4(%esp)
   122b8:	8b 84 24 b4 01 00 00 	mov    0x1b4(%esp),%eax
   122bf:	83 ec 08             	sub    $0x8,%esp
   122c2:	51                   	push   %ecx
   122c3:	50                   	push   %eax
   122c4:	e8 b0 9a ff ff       	call   bd79 <free_page_tables>
   122c9:	83 c4 10             	add    $0x10,%esp
	if (last_task_used_math == current)
   122cc:	8b 15 0c eb 02 00    	mov    0x2eb0c,%edx
   122d2:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   122d7:	39 c2                	cmp    %eax,%edx
   122d9:	75 0a                	jne    122e5 <do_execve+0xa3c>
		last_task_used_math = NULL;
   122db:	c7 05 0c eb 02 00 00 	movl   $0x0,0x2eb0c
   122e2:	00 00 00 
	current->used_math = 0;
   122e5:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   122ea:	66 c7 80 28 03 00 00 	movw   $0x0,0x328(%eax)
   122f1:	00 00 
	// 然后我们根据新执行文件头结构中的代码长度字段a_text的值修改局部表中描述符基址和段限长,并将128KB的参数和环境空间页面放置在数据段末端.
	// 执行下面语句之后,p此时更改成以数据段起始处为原点的偏移值,但仍指向参数和环境空间数据开始处,即已转换成栈指针值.然后调用内部函数create_tables()
	// 在栈空间中创建环境和参数变量指针表,供程序的main()作为参数使用,并返回该栈指针.
	p += change_ldt(ex.a_text, page);
   122f3:	8b 84 24 98 01 00 00 	mov    0x198(%esp),%eax
   122fa:	83 ec 08             	sub    $0x8,%esp
   122fd:	8d 94 24 1c 01 00 00 	lea    0x11c(%esp),%edx
   12304:	52                   	push   %edx
   12305:	50                   	push   %eax
   12306:	e8 e8 f3 ff ff       	call   116f3 <change_ldt>
   1230b:	83 c4 10             	add    $0x10,%esp
   1230e:	01 84 24 e8 01 00 00 	add    %eax,0x1e8(%esp)
	p -= LIBRARY_SIZE + MAX_ARG_PAGES * PAGE_SIZE;
   12315:	81 ac 24 e8 01 00 00 	subl   $0x420000,0x1e8(%esp)
   1231c:	00 00 42 00 
	p = (unsigned long) create_tables((char *)p, argc, envc);
   12320:	8b 84 24 e8 01 00 00 	mov    0x1e8(%esp),%eax
   12327:	83 ec 04             	sub    $0x4,%esp
   1232a:	ff b4 24 dc 01 00 00 	pushl  0x1dc(%esp)
   12331:	ff b4 24 fc 01 00 00 	pushl  0x1fc(%esp)
   12338:	50                   	push   %eax
   12339:	e8 68 f0 ff ff       	call   113a6 <create_tables>
   1233e:	83 c4 10             	add    $0x10,%esp
   12341:	89 84 24 e8 01 00 00 	mov    %eax,0x1e8(%esp)
	// 接着再修改进程各字段值为新执行文件的信息.即令进程任务结构代码尾字段end_code等于执行文件的代码段长度a_text;数据尾字段end_data等于
	// 执行文件的代码段长度加数据段长度(a_data + a_text);并令进程堆结尾字段brk = a_text + a_data + a_bss.brk用于指明进程当前数据段
	// (包括未初始化数据部分)末端位置,供内核为进程分配内存时指定分配开始位置.然后设置进程栈开始字段为栈指针所在页面,并重新设置进程的有效用户
	// id和有效组id.
	current->brk = ex.a_bss +
   12348:	8b 0d a0 e1 02 00    	mov    0x2e1a0,%ecx
   1234e:	8b b4 24 a0 01 00 00 	mov    0x1a0(%esp),%esi
		(current->end_data = ex.a_data +
   12355:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1235a:	8b bc 24 9c 01 00 00 	mov    0x19c(%esp),%edi
		(current->end_code = ex.a_text));
   12361:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   12367:	8b 9c 24 98 01 00 00 	mov    0x198(%esp),%ebx
   1236e:	89 9a 1c 02 00 00    	mov    %ebx,0x21c(%edx)
   12374:	8b 92 1c 02 00 00    	mov    0x21c(%edx),%edx
	// 接着再修改进程各字段值为新执行文件的信息.即令进程任务结构代码尾字段end_code等于执行文件的代码段长度a_text;数据尾字段end_data等于
	// 执行文件的代码段长度加数据段长度(a_data + a_text);并令进程堆结尾字段brk = a_text + a_data + a_bss.brk用于指明进程当前数据段
	// (包括未初始化数据部分)末端位置,供内核为进程分配内存时指定分配开始位置.然后设置进程栈开始字段为栈指针所在页面,并重新设置进程的有效用户
	// id和有效组id.
	current->brk = ex.a_bss +
		(current->end_data = ex.a_data +
   1237a:	01 fa                	add    %edi,%edx
   1237c:	89 90 20 02 00 00    	mov    %edx,0x220(%eax)
   12382:	8b 80 20 02 00 00    	mov    0x220(%eax),%eax
	p = (unsigned long) create_tables((char *)p, argc, envc);
	// 接着再修改进程各字段值为新执行文件的信息.即令进程任务结构代码尾字段end_code等于执行文件的代码段长度a_text;数据尾字段end_data等于
	// 执行文件的代码段长度加数据段长度(a_data + a_text);并令进程堆结尾字段brk = a_text + a_data + a_bss.brk用于指明进程当前数据段
	// (包括未初始化数据部分)末端位置,供内核为进程分配内存时指定分配开始位置.然后设置进程栈开始字段为栈指针所在页面,并重新设置进程的有效用户
	// id和有效组id.
	current->brk = ex.a_bss +
   12388:	01 f0                	add    %esi,%eax
   1238a:	89 81 24 02 00 00    	mov    %eax,0x224(%ecx)
		(current->end_data = ex.a_data +
		(current->end_code = ex.a_text));
	current->start_stack = p & 0xfffff000;
   12390:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   12395:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   1239c:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
   123a2:	89 90 28 02 00 00    	mov    %edx,0x228(%eax)
	current->suid = current->euid = e_uid;
   123a8:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   123ae:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   123b3:	8b 8c 24 d4 01 00 00 	mov    0x1d4(%esp),%ecx
   123ba:	66 89 88 ce 02 00 00 	mov    %cx,0x2ce(%eax)
   123c1:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
   123c8:	66 89 82 d0 02 00 00 	mov    %ax,0x2d0(%edx)
	current->sgid = current->egid = e_gid;
   123cf:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   123d5:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   123da:	8b 8c 24 d0 01 00 00 	mov    0x1d0(%esp),%ecx
   123e1:	66 89 88 d4 02 00 00 	mov    %cx,0x2d4(%eax)
   123e8:	0f b7 80 d4 02 00 00 	movzwl 0x2d4(%eax),%eax
   123ef:	66 89 82 d6 02 00 00 	mov    %ax,0x2d6(%edx)
	// 最后将原调用系统中断的程序在堆栈上的代码指针替换为指向新执行程序的入口点,并将栈指针替换为新执行文件的栈指针.此后返回指令将弹出这些栈数
	// 据并使得CPU去执行新执行文件,因此不会返回到原调用系统中断的程序中去了.
	eip[0] = ex.a_entry;												/* eip, magic happens :-) */	/* eip,魔法起作用了 */
   123f6:	8b 94 24 a8 01 00 00 	mov    0x1a8(%esp),%edx
   123fd:	8b 84 24 10 02 00 00 	mov    0x210(%esp),%eax
   12404:	89 10                	mov    %edx,(%eax)
	eip[3] = p;															/* stack pointer */		/* esp,堆栈指针 */
   12406:	8b 84 24 10 02 00 00 	mov    0x210(%esp),%eax
   1240d:	8d 50 0c             	lea    0xc(%eax),%edx
   12410:	8b 84 24 e8 01 00 00 	mov    0x1e8(%esp),%eax
   12417:	89 02                	mov    %eax,(%edx)
	return 0;
   12419:	b8 00 00 00 00       	mov    $0x0,%eax
   1241e:	eb 52                	jmp    12472 <do_execve+0xbc9>
exec_error2:
	iput(inode);														// 放回i节点.
   12420:	83 ec 0c             	sub    $0xc,%esp
   12423:	ff b4 24 08 02 00 00 	pushl  0x208(%esp)
   1242a:	e8 c0 c2 ff ff       	call   e6ef <iput>
   1242f:	83 c4 10             	add    $0x10,%esp
exec_error1:
	for (i = 0 ; i < MAX_ARG_PAGES ; i++)
   12432:	c7 84 24 f8 01 00 00 	movl   $0x0,0x1f8(%esp)
   12439:	00 00 00 00 
   1243d:	eb 22                	jmp    12461 <do_execve+0xbb8>
		free_page(page[i]);												// 释放存放参数和环境串的内存页面.
   1243f:	8b 84 24 f8 01 00 00 	mov    0x1f8(%esp),%eax
   12446:	8b 84 84 14 01 00 00 	mov    0x114(%esp,%eax,4),%eax
   1244d:	83 ec 0c             	sub    $0xc,%esp
   12450:	50                   	push   %eax
   12451:	e8 a9 98 ff ff       	call   bcff <free_page>
   12456:	83 c4 10             	add    $0x10,%esp
	eip[3] = p;															/* stack pointer */		/* esp,堆栈指针 */
	return 0;
exec_error2:
	iput(inode);														// 放回i节点.
exec_error1:
	for (i = 0 ; i < MAX_ARG_PAGES ; i++)
   12459:	83 84 24 f8 01 00 00 	addl   $0x1,0x1f8(%esp)
   12460:	01 
   12461:	83 bc 24 f8 01 00 00 	cmpl   $0x1f,0x1f8(%esp)
   12468:	1f 
   12469:	7e d4                	jle    1243f <do_execve+0xb96>
		free_page(page[i]);												// 释放存放参数和环境串的内存页面.
	return(retval);														// 返回出错码.
   1246b:	8b 84 24 f0 01 00 00 	mov    0x1f0(%esp),%eax
}
   12472:	81 c4 00 02 00 00    	add    $0x200,%esp
   12478:	5b                   	pop    %ebx
   12479:	5e                   	pop    %esi
   1247a:	5f                   	pop    %edi
   1247b:	c3                   	ret    

0001247c <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
   1247c:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   1247d:	8b 44 24 08          	mov    0x8(%esp),%eax
   12481:	64 8a 00             	mov    %fs:(%eax),%al
   12484:	89 c3                	mov    %eax,%ebx
	return _v;
   12486:	89 d8                	mov    %ebx,%eax
}
   12488:	5b                   	pop    %ebx
   12489:	c3                   	ret    

0001248a <put_fs_byte>:

//// 将一字节存放在fs段中指定内存地址处.
// 参数:val - 字节值;addr - 内存地址.
// %0 - 寄存器(字节值val);%1 - (内存地址addr).
static inline void put_fs_byte(char val,char *addr)
{
   1248a:	83 ec 04             	sub    $0x4,%esp
   1248d:	8b 44 24 08          	mov    0x8(%esp),%eax
   12491:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   12494:	0f b6 04 24          	movzbl (%esp),%eax
   12498:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1249c:	64 88 02             	mov    %al,%fs:(%edx)
}
   1249f:	90                   	nop
   124a0:	83 c4 04             	add    $0x4,%esp
   124a3:	c3                   	ret    

000124a4 <put_fs_long>:
//// 将一长字存放在fs段中指定内存地址处.
// 参数:val - 长字值;addr - 内存地址.
// %0 - 寄存器(长字值val);%1 - (内存地址addr).
static inline void put_fs_long(unsigned long val,unsigned long * addr)
{
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
   124a4:	8b 44 24 04          	mov    0x4(%esp),%eax
   124a8:	8b 54 24 08          	mov    0x8(%esp),%edx
   124ac:	64 89 02             	mov    %eax,%fs:(%edx)
}
   124af:	90                   	nop
   124b0:	c3                   	ret    

000124b1 <read_pipe>:
#include <linux/kernel.h>

// 读管道操作函数。
// 参数inode是管道对应的i节点，buf是用户数据缓冲区指针，count是读取的字节数。
int read_pipe(struct m_inode * inode, char * buf, int count)
{
   124b1:	83 ec 1c             	sub    $0x1c,%esp
	int chars, size, read = 0;
   124b4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
   124bb:	00 
	// 如果需要读取的字节数count大于0,我们就循环执行以下操作。在循环读操作过程中，若当前管道中没有数据（size=0），
	// 则唤醒等待该节点的进程，这通常是写管道进程。如果已没有写管道者，即i节点引用计数小于2,则返回已读字节数退出。
	// 如果目前收到非阻塞信号，则立刻返回已读取字节数退出，若还没有收到任何数据，则返回重新启动系统调用号退出。
	// 否则就让进程在该管道上睡眠，用以等待信息的到来。宏PIPE_SIZE定义在include/linux/fs.h中。关于“重新启动
	// 系统调用号”，请参见kernel/signal.c程序。
	while (count > 0) {
   124bc:	e9 6c 01 00 00       	jmp    1262d <read_pipe+0x17c>
		while (!(size = PIPE_SIZE(*inode))) {     						// 取管道中数据长度值。
			// 唤醒等待向该管道写数据的进程
			wake_up(& PIPE_WRITE_WAIT(*inode));
   124c1:	8b 44 24 20          	mov    0x20(%esp),%eax
   124c5:	83 c0 24             	add    $0x24,%eax
   124c8:	83 ec 0c             	sub    $0xc,%esp
   124cb:	50                   	push   %eax
   124cc:	e8 7e 4c ff ff       	call   714f <wake_up>
   124d1:	83 c4 10             	add    $0x10,%esp
			if (inode->i_count != 2) 									/* are there any writers? */
   124d4:	8b 44 24 20          	mov    0x20(%esp),%eax
   124d8:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   124dc:	66 83 f8 02          	cmp    $0x2,%ax
   124e0:	74 09                	je     124eb <read_pipe+0x3a>
				return read;
   124e2:	8b 44 24 04          	mov    0x4(%esp),%eax
   124e6:	e9 64 01 00 00       	jmp    1264f <read_pipe+0x19e>
			if (current->signal & ~current->blocked)
   124eb:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   124f0:	8b 50 0c             	mov    0xc(%eax),%edx
   124f3:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   124f8:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   124fe:	f7 d0                	not    %eax
   12500:	21 d0                	and    %edx,%eax
   12502:	85 c0                	test   %eax,%eax
   12504:	74 1a                	je     12520 <read_pipe+0x6f>
				return read ? read : -ERESTARTSYS;
   12506:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   1250b:	74 09                	je     12516 <read_pipe+0x65>
   1250d:	8b 44 24 04          	mov    0x4(%esp),%eax
   12511:	e9 39 01 00 00       	jmp    1264f <read_pipe+0x19e>
   12516:	b8 00 fe ff ff       	mov    $0xfffffe00,%eax
   1251b:	e9 2f 01 00 00       	jmp    1264f <read_pipe+0x19e>
			// 当前进程没有数据可读则进入睡眠等待
			interruptible_sleep_on(& PIPE_READ_WAIT(*inode));
   12520:	8b 44 24 20          	mov    0x20(%esp),%eax
   12524:	83 c0 20             	add    $0x20,%eax
   12527:	83 ec 0c             	sub    $0xc,%esp
   1252a:	50                   	push   %eax
   1252b:	e8 ed 4b ff ff       	call   711d <interruptible_sleep_on>
   12530:	83 c4 10             	add    $0x10,%esp
	// 则唤醒等待该节点的进程，这通常是写管道进程。如果已没有写管道者，即i节点引用计数小于2,则返回已读字节数退出。
	// 如果目前收到非阻塞信号，则立刻返回已读取字节数退出，若还没有收到任何数据，则返回重新启动系统调用号退出。
	// 否则就让进程在该管道上睡眠，用以等待信息的到来。宏PIPE_SIZE定义在include/linux/fs.h中。关于“重新启动
	// 系统调用号”，请参见kernel/signal.c程序。
	while (count > 0) {
		while (!(size = PIPE_SIZE(*inode))) {     						// 取管道中数据长度值。
   12533:	8b 44 24 20          	mov    0x20(%esp),%eax
   12537:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   1253b:	0f b7 d0             	movzwl %ax,%edx
   1253e:	8b 44 24 20          	mov    0x20(%esp),%eax
   12542:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   12546:	0f b7 c0             	movzwl %ax,%eax
   12549:	29 c2                	sub    %eax,%edx
   1254b:	89 d0                	mov    %edx,%eax
   1254d:	25 ff 0f 00 00       	and    $0xfff,%eax
   12552:	89 44 24 08          	mov    %eax,0x8(%esp)
   12556:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1255b:	0f 84 60 ff ff ff    	je     124c1 <read_pipe+0x10>
			interruptible_sleep_on(& PIPE_READ_WAIT(*inode));
		}
		// 此时说明管道（缓冲区）中有数据。于是我们取管道尾指针到缓冲区末端的字节数chars。如果其大于还需要读取的字节数
		// count，则令其等于count。如果chars大于当前管道中含有数据的长度size，则令其等于size。然后把需读字节数count
		// 减去可读的字节数chars，并累加已读字节数read。
		chars = PAGE_SIZE - PIPE_TAIL(*inode);
   12561:	8b 44 24 20          	mov    0x20(%esp),%eax
   12565:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   12569:	0f b7 c0             	movzwl %ax,%eax
   1256c:	ba 00 10 00 00       	mov    $0x1000,%edx
   12571:	29 c2                	sub    %eax,%edx
   12573:	89 d0                	mov    %edx,%eax
   12575:	89 44 24 0c          	mov    %eax,0xc(%esp)
		if (chars > count)
   12579:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1257d:	3b 44 24 28          	cmp    0x28(%esp),%eax
   12581:	7e 08                	jle    1258b <read_pipe+0xda>
			chars = count;
   12583:	8b 44 24 28          	mov    0x28(%esp),%eax
   12587:	89 44 24 0c          	mov    %eax,0xc(%esp)
		if (chars > size)
   1258b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1258f:	3b 44 24 08          	cmp    0x8(%esp),%eax
   12593:	7e 08                	jle    1259d <read_pipe+0xec>
			chars = size;
   12595:	8b 44 24 08          	mov    0x8(%esp),%eax
   12599:	89 44 24 0c          	mov    %eax,0xc(%esp)
		count -= chars;
   1259d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   125a1:	29 44 24 28          	sub    %eax,0x28(%esp)
		read += chars;
   125a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   125a9:	01 44 24 04          	add    %eax,0x4(%esp)
		// 再令size指向管道尾指针处，并调整当前管道尾指针（前移chars字节）。若尾指针超过管道末端则绕回。然后将管道中的
		// 数据复制到用户缓冲区中。对于管道i节点，其i_size字段中是管道缓冲块指针。
		size = PIPE_TAIL(*inode);
   125ad:	8b 44 24 20          	mov    0x20(%esp),%eax
   125b1:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   125b5:	0f b7 c0             	movzwl %ax,%eax
   125b8:	89 44 24 08          	mov    %eax,0x8(%esp)
		PIPE_TAIL(*inode) += chars;
   125bc:	8b 44 24 20          	mov    0x20(%esp),%eax
   125c0:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   125c4:	8b 54 24 0c          	mov    0xc(%esp),%edx
   125c8:	01 c2                	add    %eax,%edx
   125ca:	8b 44 24 20          	mov    0x20(%esp),%eax
   125ce:	66 89 50 10          	mov    %dx,0x10(%eax)
		PIPE_TAIL(*inode) &= (PAGE_SIZE - 1);
   125d2:	8b 44 24 20          	mov    0x20(%esp),%eax
   125d6:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   125da:	66 25 ff 0f          	and    $0xfff,%ax
   125de:	89 c2                	mov    %eax,%edx
   125e0:	8b 44 24 20          	mov    0x20(%esp),%eax
   125e4:	66 89 50 10          	mov    %dx,0x10(%eax)
		while (chars-- > 0)
   125e8:	eb 34                	jmp    1261e <read_pipe+0x16d>
			put_fs_byte(((char *)inode->i_size)[size++], buf++);
   125ea:	8b 44 24 24          	mov    0x24(%esp),%eax
   125ee:	8d 50 01             	lea    0x1(%eax),%edx
   125f1:	89 54 24 24          	mov    %edx,0x24(%esp)
   125f5:	8b 54 24 08          	mov    0x8(%esp),%edx
   125f9:	8d 4a 01             	lea    0x1(%edx),%ecx
   125fc:	89 4c 24 08          	mov    %ecx,0x8(%esp)
   12600:	89 d1                	mov    %edx,%ecx
   12602:	8b 54 24 20          	mov    0x20(%esp),%edx
   12606:	8b 52 04             	mov    0x4(%edx),%edx
   12609:	01 ca                	add    %ecx,%edx
   1260b:	0f b6 12             	movzbl (%edx),%edx
   1260e:	0f be d2             	movsbl %dl,%edx
   12611:	83 ec 08             	sub    $0x8,%esp
   12614:	50                   	push   %eax
   12615:	52                   	push   %edx
   12616:	e8 6f fe ff ff       	call   1248a <put_fs_byte>
   1261b:	83 c4 10             	add    $0x10,%esp
		// 再令size指向管道尾指针处，并调整当前管道尾指针（前移chars字节）。若尾指针超过管道末端则绕回。然后将管道中的
		// 数据复制到用户缓冲区中。对于管道i节点，其i_size字段中是管道缓冲块指针。
		size = PIPE_TAIL(*inode);
		PIPE_TAIL(*inode) += chars;
		PIPE_TAIL(*inode) &= (PAGE_SIZE - 1);
		while (chars-- > 0)
   1261e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12622:	8d 50 ff             	lea    -0x1(%eax),%edx
   12625:	89 54 24 0c          	mov    %edx,0xc(%esp)
   12629:	85 c0                	test   %eax,%eax
   1262b:	7f bd                	jg     125ea <read_pipe+0x139>
	// 如果需要读取的字节数count大于0,我们就循环执行以下操作。在循环读操作过程中，若当前管道中没有数据（size=0），
	// 则唤醒等待该节点的进程，这通常是写管道进程。如果已没有写管道者，即i节点引用计数小于2,则返回已读字节数退出。
	// 如果目前收到非阻塞信号，则立刻返回已读取字节数退出，若还没有收到任何数据，则返回重新启动系统调用号退出。
	// 否则就让进程在该管道上睡眠，用以等待信息的到来。宏PIPE_SIZE定义在include/linux/fs.h中。关于“重新启动
	// 系统调用号”，请参见kernel/signal.c程序。
	while (count > 0) {
   1262d:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   12632:	0f 8f fb fe ff ff    	jg     12533 <read_pipe+0x82>
		PIPE_TAIL(*inode) &= (PAGE_SIZE - 1);
		while (chars-- > 0)
			put_fs_byte(((char *)inode->i_size)[size++], buf++);
	}
	// 当此次读管道操作结束，则唤醒等待该管道的进程，并返回读取的字节数。
	wake_up(& PIPE_WRITE_WAIT(*inode));
   12638:	8b 44 24 20          	mov    0x20(%esp),%eax
   1263c:	83 c0 24             	add    $0x24,%eax
   1263f:	83 ec 0c             	sub    $0xc,%esp
   12642:	50                   	push   %eax
   12643:	e8 07 4b ff ff       	call   714f <wake_up>
   12648:	83 c4 10             	add    $0x10,%esp
	return read;
   1264b:	8b 44 24 04          	mov    0x4(%esp),%eax
}
   1264f:	83 c4 1c             	add    $0x1c,%esp
   12652:	c3                   	ret    

00012653 <write_pipe>:

// 管道写操作函数。
// 参数inode是管道对应的i节点，buf是数据缓冲区指针，count是将写入管道的字节数。
int write_pipe(struct m_inode * inode, char * buf, int count)
{
   12653:	53                   	push   %ebx
   12654:	83 ec 18             	sub    $0x18,%esp
	int chars, size, written = 0;
   12657:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
   1265e:	00 

	// 如果要写入的字节数count还大于0,那么我们就循环执行以下操作。在循环操作过程中，如果当前管道中已经满了（空闲空间
	// size = 0），则唤醒等待该管道的进程，通常唤醒的是读管道进程。如果已经没有读管道者，即i节点引用计数值小于2,则向
	// 当前进程发送SIGPIPE信号，并返回已写入的字节数退出；若写入0字节，则返回-1。否则让当前进程在该管道上睡眠，以等待
	// 读管道进程来读取数据，从而让管道腾出空间。宏PIPE_SIZE()、PIPE_HEAD()等定义在文件include/linux/fs.h中。
	while (count > 0) {
   1265f:	e9 5b 01 00 00       	jmp    127bf <write_pipe+0x16c>
		while (!(size = (PAGE_SIZE - 1) - PIPE_SIZE(*inode))) {
			wake_up(& PIPE_READ_WAIT(*inode));
   12664:	8b 44 24 20          	mov    0x20(%esp),%eax
   12668:	83 c0 20             	add    $0x20,%eax
   1266b:	83 ec 0c             	sub    $0xc,%esp
   1266e:	50                   	push   %eax
   1266f:	e8 db 4a ff ff       	call   714f <wake_up>
   12674:	83 c4 10             	add    $0x10,%esp
			if (inode->i_count != 2) { 								/* no readers */
   12677:	8b 44 24 20          	mov    0x20(%esp),%eax
   1267b:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   1267f:	66 83 f8 02          	cmp    $0x2,%ax
   12683:	74 2e                	je     126b3 <write_pipe+0x60>
				current->signal |= (1 << (SIGPIPE - 1));
   12685:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1268a:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   12690:	8b 52 0c             	mov    0xc(%edx),%edx
   12693:	80 ce 10             	or     $0x10,%dh
   12696:	89 50 0c             	mov    %edx,0xc(%eax)
				return written ? written : -1;
   12699:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   1269e:	74 09                	je     126a9 <write_pipe+0x56>
   126a0:	8b 44 24 04          	mov    0x4(%esp),%eax
   126a4:	e9 38 01 00 00       	jmp    127e1 <write_pipe+0x18e>
   126a9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   126ae:	e9 2e 01 00 00       	jmp    127e1 <write_pipe+0x18e>
			}
			sleep_on(& PIPE_WRITE_WAIT(*inode));
   126b3:	8b 44 24 20          	mov    0x20(%esp),%eax
   126b7:	83 c0 24             	add    $0x24,%eax
   126ba:	83 ec 0c             	sub    $0xc,%esp
   126bd:	50                   	push   %eax
   126be:	e8 73 4a ff ff       	call   7136 <sleep_on>
   126c3:	83 c4 10             	add    $0x10,%esp
	// 如果要写入的字节数count还大于0,那么我们就循环执行以下操作。在循环操作过程中，如果当前管道中已经满了（空闲空间
	// size = 0），则唤醒等待该管道的进程，通常唤醒的是读管道进程。如果已经没有读管道者，即i节点引用计数值小于2,则向
	// 当前进程发送SIGPIPE信号，并返回已写入的字节数退出；若写入0字节，则返回-1。否则让当前进程在该管道上睡眠，以等待
	// 读管道进程来读取数据，从而让管道腾出空间。宏PIPE_SIZE()、PIPE_HEAD()等定义在文件include/linux/fs.h中。
	while (count > 0) {
		while (!(size = (PAGE_SIZE - 1) - PIPE_SIZE(*inode))) {
   126c6:	8b 44 24 20          	mov    0x20(%esp),%eax
   126ca:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   126ce:	0f b7 d0             	movzwl %ax,%edx
   126d1:	8b 44 24 20          	mov    0x20(%esp),%eax
   126d5:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   126d9:	0f b7 c0             	movzwl %ax,%eax
   126dc:	29 c2                	sub    %eax,%edx
   126de:	89 d0                	mov    %edx,%eax
   126e0:	f7 d0                	not    %eax
   126e2:	25 ff 0f 00 00       	and    $0xfff,%eax
   126e7:	89 44 24 08          	mov    %eax,0x8(%esp)
   126eb:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   126f0:	0f 84 6e ff ff ff    	je     12664 <write_pipe+0x11>
			sleep_on(& PIPE_WRITE_WAIT(*inode));
		}
		// 程序执行到这里表示管道缓冲区中有可写空间size。于是我们取管道头指针到缓冲区末端空间字节数chars。写管道操作是从管道
		// 头指针处开始写的。如果chars大于还需要写入的字节数count，则令其等于count。如果chars大于当前管道中空闲空间长度size
		// 则令其等于size。然后把需要写入字节数count减去此次可写入的字节数chars，并把写入字节数累加到written中。
		chars = PAGE_SIZE - PIPE_HEAD(*inode);
   126f6:	8b 44 24 20          	mov    0x20(%esp),%eax
   126fa:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   126fe:	0f b7 c0             	movzwl %ax,%eax
   12701:	ba 00 10 00 00       	mov    $0x1000,%edx
   12706:	29 c2                	sub    %eax,%edx
   12708:	89 d0                	mov    %edx,%eax
   1270a:	89 44 24 0c          	mov    %eax,0xc(%esp)
		if (chars > count)
   1270e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12712:	3b 44 24 28          	cmp    0x28(%esp),%eax
   12716:	7e 08                	jle    12720 <write_pipe+0xcd>
			chars = count;
   12718:	8b 44 24 28          	mov    0x28(%esp),%eax
   1271c:	89 44 24 0c          	mov    %eax,0xc(%esp)
		if (chars > size)
   12720:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12724:	3b 44 24 08          	cmp    0x8(%esp),%eax
   12728:	7e 08                	jle    12732 <write_pipe+0xdf>
			chars = size;
   1272a:	8b 44 24 08          	mov    0x8(%esp),%eax
   1272e:	89 44 24 0c          	mov    %eax,0xc(%esp)
		count -= chars;
   12732:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12736:	29 44 24 28          	sub    %eax,0x28(%esp)
		written += chars;
   1273a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1273e:	01 44 24 04          	add    %eax,0x4(%esp)
		// 再令size指向管道数据头指针处，并调整当前管道数据头部指针（前移chars字节）。若头指针超过管道末端则绕回。然后从用户缓冲
		// 区复制chars个字节到管道头指针开始处。对于管道i节点，其i_size字段中是管道缓冲块指针。
		size = PIPE_HEAD(*inode);
   12742:	8b 44 24 20          	mov    0x20(%esp),%eax
   12746:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   1274a:	0f b7 c0             	movzwl %ax,%eax
   1274d:	89 44 24 08          	mov    %eax,0x8(%esp)
		PIPE_HEAD(*inode) += chars;
   12751:	8b 44 24 20          	mov    0x20(%esp),%eax
   12755:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   12759:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1275d:	01 c2                	add    %eax,%edx
   1275f:	8b 44 24 20          	mov    0x20(%esp),%eax
   12763:	66 89 50 0e          	mov    %dx,0xe(%eax)
		PIPE_HEAD(*inode) &= (PAGE_SIZE - 1);
   12767:	8b 44 24 20          	mov    0x20(%esp),%eax
   1276b:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   1276f:	66 25 ff 0f          	and    $0xfff,%ax
   12773:	89 c2                	mov    %eax,%edx
   12775:	8b 44 24 20          	mov    0x20(%esp),%eax
   12779:	66 89 50 0e          	mov    %dx,0xe(%eax)
		while (chars-- > 0)
   1277d:	eb 31                	jmp    127b0 <write_pipe+0x15d>
			((char *)inode->i_size)[size++] = get_fs_byte(buf++);
   1277f:	8b 44 24 08          	mov    0x8(%esp),%eax
   12783:	8d 50 01             	lea    0x1(%eax),%edx
   12786:	89 54 24 08          	mov    %edx,0x8(%esp)
   1278a:	89 c2                	mov    %eax,%edx
   1278c:	8b 44 24 20          	mov    0x20(%esp),%eax
   12790:	8b 40 04             	mov    0x4(%eax),%eax
   12793:	01 d0                	add    %edx,%eax
   12795:	89 c3                	mov    %eax,%ebx
   12797:	8b 44 24 24          	mov    0x24(%esp),%eax
   1279b:	8d 50 01             	lea    0x1(%eax),%edx
   1279e:	89 54 24 24          	mov    %edx,0x24(%esp)
   127a2:	83 ec 0c             	sub    $0xc,%esp
   127a5:	50                   	push   %eax
   127a6:	e8 d1 fc ff ff       	call   1247c <get_fs_byte>
   127ab:	83 c4 10             	add    $0x10,%esp
   127ae:	88 03                	mov    %al,(%ebx)
		// 再令size指向管道数据头指针处，并调整当前管道数据头部指针（前移chars字节）。若头指针超过管道末端则绕回。然后从用户缓冲
		// 区复制chars个字节到管道头指针开始处。对于管道i节点，其i_size字段中是管道缓冲块指针。
		size = PIPE_HEAD(*inode);
		PIPE_HEAD(*inode) += chars;
		PIPE_HEAD(*inode) &= (PAGE_SIZE - 1);
		while (chars-- > 0)
   127b0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   127b4:	8d 50 ff             	lea    -0x1(%eax),%edx
   127b7:	89 54 24 0c          	mov    %edx,0xc(%esp)
   127bb:	85 c0                	test   %eax,%eax
   127bd:	7f c0                	jg     1277f <write_pipe+0x12c>

	// 如果要写入的字节数count还大于0,那么我们就循环执行以下操作。在循环操作过程中，如果当前管道中已经满了（空闲空间
	// size = 0），则唤醒等待该管道的进程，通常唤醒的是读管道进程。如果已经没有读管道者，即i节点引用计数值小于2,则向
	// 当前进程发送SIGPIPE信号，并返回已写入的字节数退出；若写入0字节，则返回-1。否则让当前进程在该管道上睡眠，以等待
	// 读管道进程来读取数据，从而让管道腾出空间。宏PIPE_SIZE()、PIPE_HEAD()等定义在文件include/linux/fs.h中。
	while (count > 0) {
   127bf:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   127c4:	0f 8f fc fe ff ff    	jg     126c6 <write_pipe+0x73>
		PIPE_HEAD(*inode) &= (PAGE_SIZE - 1);
		while (chars-- > 0)
			((char *)inode->i_size)[size++] = get_fs_byte(buf++);
	}
	// 当此次写管道操作结束，则唤醒等待管道的进程，返回已写入的字节数，退出。
	wake_up(& PIPE_READ_WAIT(*inode));
   127ca:	8b 44 24 20          	mov    0x20(%esp),%eax
   127ce:	83 c0 20             	add    $0x20,%eax
   127d1:	83 ec 0c             	sub    $0xc,%esp
   127d4:	50                   	push   %eax
   127d5:	e8 75 49 ff ff       	call   714f <wake_up>
   127da:	83 c4 10             	add    $0x10,%esp
	return written;
   127dd:	8b 44 24 04          	mov    0x4(%esp),%eax
}
   127e1:	83 c4 18             	add    $0x18,%esp
   127e4:	5b                   	pop    %ebx
   127e5:	c3                   	ret    

000127e6 <sys_pipe>:
// 创建管道系统调用。
// 在fildes所指的数组中创建一对句柄（描述符）。这对文件句柄指向一管道i节点。
// 参数：fildes - 文件句柄数组。fildes[0]用于读管道数据，fildes[1]向管道写入数据。
// 成功时返回0,出错时返回-1.
int sys_pipe(unsigned long * fildes)
{
   127e6:	56                   	push   %esi
   127e7:	53                   	push   %ebx
   127e8:	83 ec 24             	sub    $0x24,%esp
	int fd[2];                      						// 文件句柄数组。
	int i, j;

	// 首先从系统文件表中取两个空闲项（引用计数字段为0的项），并分别设置引用计数为1.
	// 若只有1个空闲项，则释放该项（引用计数复位）。若没有找到两个空闲项，则返回-1。
	j = 0;
   127eb:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   127f2:	00 
	for(i = 0; j < 2 && i < NR_FILE; i++)
   127f3:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   127fa:	00 
   127fb:	eb 44                	jmp    12841 <sys_pipe+0x5b>
		if (!file_table[i].f_count)
   127fd:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   12801:	c1 e0 04             	shl    $0x4,%eax
   12804:	05 84 0f 04 00       	add    $0x40f84,%eax
   12809:	0f b7 00             	movzwl (%eax),%eax
   1280c:	66 85 c0             	test   %ax,%ax
   1280f:	75 2b                	jne    1283c <sys_pipe+0x56>
			(f[j++] = i + file_table)->f_count++;
   12811:	8b 44 24 18          	mov    0x18(%esp),%eax
   12815:	8d 50 01             	lea    0x1(%eax),%edx
   12818:	89 54 24 18          	mov    %edx,0x18(%esp)
   1281c:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   12820:	c1 e2 04             	shl    $0x4,%edx
   12823:	81 c2 80 0f 04 00    	add    $0x40f80,%edx
   12829:	89 54 84 0c          	mov    %edx,0xc(%esp,%eax,4)
   1282d:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
   12831:	0f b7 50 04          	movzwl 0x4(%eax),%edx
   12835:	83 c2 01             	add    $0x1,%edx
   12838:	66 89 50 04          	mov    %dx,0x4(%eax)
	int i, j;

	// 首先从系统文件表中取两个空闲项（引用计数字段为0的项），并分别设置引用计数为1.
	// 若只有1个空闲项，则释放该项（引用计数复位）。若没有找到两个空闲项，则返回-1。
	j = 0;
	for(i = 0; j < 2 && i < NR_FILE; i++)
   1283c:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   12841:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   12846:	7f 07                	jg     1284f <sys_pipe+0x69>
   12848:	83 7c 24 1c 3f       	cmpl   $0x3f,0x1c(%esp)
   1284d:	7e ae                	jle    127fd <sys_pipe+0x17>
		if (!file_table[i].f_count)
			(f[j++] = i + file_table)->f_count++;
	if (j == 1)
   1284f:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   12854:	75 0a                	jne    12860 <sys_pipe+0x7a>
		f[0]->f_count = 0;
   12856:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1285a:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)
	if (j < 2)
   12860:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   12865:	7f 0a                	jg     12871 <sys_pipe+0x8b>
		return -1;
   12867:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1286c:	e9 80 01 00 00       	jmp    129f1 <sys_pipe+0x20b>
	// 针对上面取得的两个文件表结构项，分别分配一文件句柄号，并使进程文件结构指针数组的两项分别指向这两个文件
	// 结构。而文件句柄即是该数组的索引号。类似地，如果只有一个空闲文件句柄，则释放该句柄（置空相应数组项）。如
	// 果没有找到两个空闲句柄，则释放上面获取的两个文件结构项（复位引用计数值），并返回-1。
	j = 0;
   12871:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   12878:	00 
	for(i = 0; j < 2 && i < NR_OPEN; i++)
   12879:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   12880:	00 
   12881:	eb 4c                	jmp    128cf <sys_pipe+0xe9>
		if (!current->filp[i]) {
   12883:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   12888:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1288c:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   12892:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   12896:	85 c0                	test   %eax,%eax
   12898:	75 30                	jne    128ca <sys_pipe+0xe4>
			current->filp[ fd[j] = i ] = f[j];
   1289a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1289f:	8b 54 24 18          	mov    0x18(%esp),%edx
   128a3:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   128a7:	89 4c 94 04          	mov    %ecx,0x4(%esp,%edx,4)
   128ab:	8b 54 24 18          	mov    0x18(%esp),%edx
   128af:	8b 4c 94 04          	mov    0x4(%esp,%edx,4),%ecx
   128b3:	8b 54 24 18          	mov    0x18(%esp),%edx
   128b7:	8b 54 94 0c          	mov    0xc(%esp,%edx,4),%edx
   128bb:	81 c1 d0 00 00 00    	add    $0xd0,%ecx
   128c1:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
			j++;
   128c5:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
		return -1;
	// 针对上面取得的两个文件表结构项，分别分配一文件句柄号，并使进程文件结构指针数组的两项分别指向这两个文件
	// 结构。而文件句柄即是该数组的索引号。类似地，如果只有一个空闲文件句柄，则释放该句柄（置空相应数组项）。如
	// 果没有找到两个空闲句柄，则释放上面获取的两个文件结构项（复位引用计数值），并返回-1。
	j = 0;
	for(i = 0; j < 2 && i < NR_OPEN; i++)
   128ca:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   128cf:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   128d4:	7f 07                	jg     128dd <sys_pipe+0xf7>
   128d6:	83 7c 24 1c 13       	cmpl   $0x13,0x1c(%esp)
   128db:	7e a6                	jle    12883 <sys_pipe+0x9d>
		if (!current->filp[i]) {
			current->filp[ fd[j] = i ] = f[j];
			j++;
		}
	if (j == 1)
   128dd:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   128e2:	75 17                	jne    128fb <sys_pipe+0x115>
		current->filp[fd[0]] = NULL;
   128e4:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   128e9:	8b 54 24 04          	mov    0x4(%esp),%edx
   128ed:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   128f3:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
   128fa:	00 
	if (j < 2) {
   128fb:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   12900:	7f 20                	jg     12922 <sys_pipe+0x13c>
		f[0]->f_count = f[1]->f_count = 0;
   12902:	8b 54 24 0c          	mov    0xc(%esp),%edx
   12906:	8b 44 24 10          	mov    0x10(%esp),%eax
   1290a:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)
   12910:	0f b7 40 04          	movzwl 0x4(%eax),%eax
   12914:	66 89 42 04          	mov    %ax,0x4(%edx)
		return -1;
   12918:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1291d:	e9 cf 00 00 00       	jmp    129f1 <sys_pipe+0x20b>
	}
	// 然后利用函数get_pipe_inode()申请一个管道使用的i节点，并为管道分配一页内存作为缓冲区。如果不成功，则
	// 相应释放两个文件句柄和文件结构项，并返回-1.
	if (!(inode = get_pipe_inode())) {                		// fs/inode.c。
   12922:	e8 e2 c0 ff ff       	call   ea09 <get_pipe_inode>
   12927:	89 44 24 14          	mov    %eax,0x14(%esp)
   1292b:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   12930:	75 52                	jne    12984 <sys_pipe+0x19e>
		current->filp[fd[0]] =
   12932:	8b 0d a0 e1 02 00    	mov    0x2e1a0,%ecx
   12938:	8b 74 24 04          	mov    0x4(%esp),%esi
			current->filp[fd[1]] = NULL;
   1293c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   12941:	8b 54 24 08          	mov    0x8(%esp),%edx
   12945:	8d 9a d0 00 00 00    	lea    0xd0(%edx),%ebx
   1294b:	c7 44 98 08 00 00 00 	movl   $0x0,0x8(%eax,%ebx,4)
   12952:	00 
   12953:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   12959:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
		return -1;
	}
	// 然后利用函数get_pipe_inode()申请一个管道使用的i节点，并为管道分配一页内存作为缓冲区。如果不成功，则
	// 相应释放两个文件句柄和文件结构项，并返回-1.
	if (!(inode = get_pipe_inode())) {                		// fs/inode.c。
		current->filp[fd[0]] =
   1295d:	8d 96 d0 00 00 00    	lea    0xd0(%esi),%edx
   12963:	89 44 91 08          	mov    %eax,0x8(%ecx,%edx,4)
			current->filp[fd[1]] = NULL;
		f[0]->f_count = f[1]->f_count = 0;
   12967:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1296b:	8b 44 24 10          	mov    0x10(%esp),%eax
   1296f:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)
   12975:	0f b7 40 04          	movzwl 0x4(%eax),%eax
   12979:	66 89 42 04          	mov    %ax,0x4(%edx)
		return -1;
   1297d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12982:	eb 6d                	jmp    129f1 <sys_pipe+0x20b>
	}
	// 如果管道i节点申请成功，则对两个文件结构进行初始化操作，让它们都指向同一个管道i节点，并把读写指针都置零。
	// 第1个文件结构的文件模式为读，第2个文件结构的文件模式置为写。最后将文件句柄数组复制到对应的用户空间数组中，
	// 成功返回0,退出。
	f[0]->f_inode = f[1]->f_inode = inode;
   12984:	8b 54 24 0c          	mov    0xc(%esp),%edx
   12988:	8b 44 24 10          	mov    0x10(%esp),%eax
   1298c:	8b 4c 24 14          	mov    0x14(%esp),%ecx
   12990:	89 48 08             	mov    %ecx,0x8(%eax)
   12993:	8b 40 08             	mov    0x8(%eax),%eax
   12996:	89 42 08             	mov    %eax,0x8(%edx)
	f[0]->f_pos = f[1]->f_pos = 0;
   12999:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1299d:	8b 44 24 10          	mov    0x10(%esp),%eax
   129a1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
   129a8:	8b 40 0c             	mov    0xc(%eax),%eax
   129ab:	89 42 0c             	mov    %eax,0xc(%edx)
	f[0]->f_mode = 1;										/* read */
   129ae:	8b 44 24 0c          	mov    0xc(%esp),%eax
   129b2:	66 c7 00 01 00       	movw   $0x1,(%eax)
	f[1]->f_mode = 2;										/* write */
   129b7:	8b 44 24 10          	mov    0x10(%esp),%eax
   129bb:	66 c7 00 02 00       	movw   $0x2,(%eax)
	put_fs_long(fd[0], 0 + fildes);
   129c0:	8b 44 24 04          	mov    0x4(%esp),%eax
   129c4:	83 ec 08             	sub    $0x8,%esp
   129c7:	ff 74 24 38          	pushl  0x38(%esp)
   129cb:	50                   	push   %eax
   129cc:	e8 d3 fa ff ff       	call   124a4 <put_fs_long>
   129d1:	83 c4 10             	add    $0x10,%esp
	put_fs_long(fd[1], 1 + fildes);
   129d4:	8b 44 24 30          	mov    0x30(%esp),%eax
   129d8:	83 c0 04             	add    $0x4,%eax
   129db:	8b 54 24 08          	mov    0x8(%esp),%edx
   129df:	83 ec 08             	sub    $0x8,%esp
   129e2:	50                   	push   %eax
   129e3:	52                   	push   %edx
   129e4:	e8 bb fa ff ff       	call   124a4 <put_fs_long>
   129e9:	83 c4 10             	add    $0x10,%esp
	return 0;
   129ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
   129f1:	83 c4 24             	add    $0x24,%esp
   129f4:	5b                   	pop    %ebx
   129f5:	5e                   	pop    %esi
   129f6:	c3                   	ret    

000129f7 <pipe_ioctl>:

// 管道io控制函数。
// 参数：pino - 管道i节点指针；cmd - 控制命令；arg - 参数。
// 函数返回0表示执行成功，否则返回出错码。
int pipe_ioctl(struct m_inode *pino, int cmd, int arg)
{
   129f7:	83 ec 0c             	sub    $0xc,%esp
	// 如果命令是取管道中当前可读数据长度，则把管道数据长度值添入用户参数指定的位置处，并返回0。否则返回无效命令
	// 错误码。
	switch (cmd) {
   129fa:	8b 44 24 14          	mov    0x14(%esp),%eax
   129fe:	3d 1b 54 00 00       	cmp    $0x541b,%eax
   12a03:	75 4a                	jne    12a4f <pipe_ioctl+0x58>
		case FIONREAD:
			verify_area((void *) arg, 4);
   12a05:	8b 44 24 18          	mov    0x18(%esp),%eax
   12a09:	83 ec 08             	sub    $0x8,%esp
   12a0c:	6a 04                	push   $0x4
   12a0e:	50                   	push   %eax
   12a0f:	e8 8f 59 ff ff       	call   83a3 <verify_area>
   12a14:	83 c4 10             	add    $0x10,%esp
			put_fs_long(PIPE_SIZE(*pino), (unsigned long *) arg);
   12a17:	8b 44 24 18          	mov    0x18(%esp),%eax
   12a1b:	8b 54 24 10          	mov    0x10(%esp),%edx
   12a1f:	0f b7 52 0e          	movzwl 0xe(%edx),%edx
   12a23:	0f b7 ca             	movzwl %dx,%ecx
   12a26:	8b 54 24 10          	mov    0x10(%esp),%edx
   12a2a:	0f b7 52 10          	movzwl 0x10(%edx),%edx
   12a2e:	0f b7 d2             	movzwl %dx,%edx
   12a31:	29 d1                	sub    %edx,%ecx
   12a33:	89 ca                	mov    %ecx,%edx
   12a35:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
   12a3b:	83 ec 08             	sub    $0x8,%esp
   12a3e:	50                   	push   %eax
   12a3f:	52                   	push   %edx
   12a40:	e8 5f fa ff ff       	call   124a4 <put_fs_long>
   12a45:	83 c4 10             	add    $0x10,%esp
			return 0;
   12a48:	b8 00 00 00 00       	mov    $0x0,%eax
   12a4d:	eb 05                	jmp    12a54 <pipe_ioctl+0x5d>
		default:
			return -EINVAL;
   12a4f:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
	}
}
   12a54:	83 c4 0c             	add    $0xc,%esp
   12a57:	c3                   	ret    

00012a58 <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
   12a58:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   12a59:	8b 44 24 08          	mov    0x8(%esp),%eax
   12a5d:	64 8a 00             	mov    %fs:(%eax),%al
   12a60:	89 c3                	mov    %eax,%ebx
	return _v;
   12a62:	89 d8                	mov    %ebx,%eax
}
   12a64:	5b                   	pop    %ebx
   12a65:	c3                   	ret    

00012a66 <strcpy>:

// 将一个字符串(src)复制到另一个字符串(dest),直到遇到NULL字符后停止.
// 参数: desc - 目的字符串指针, src - 源字符串指针.
// %0 - esi(src), %1 - edi(dest)
static inline char * strcpy(char * dest, const char *src)
{
   12a66:	57                   	push   %edi
   12a67:	56                   	push   %esi
__asm__(
   12a68:	8b 54 24 10          	mov    0x10(%esp),%edx
   12a6c:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   12a70:	89 d6                	mov    %edx,%esi
   12a72:	89 cf                	mov    %ecx,%edi
   12a74:	fc                   	cld    
   12a75:	ac                   	lods   %ds:(%esi),%al
   12a76:	aa                   	stos   %al,%es:(%edi)
   12a77:	84 c0                	test   %al,%al
   12a79:	75 fa                	jne    12a75 <strcpy+0xf>
	"1:\tlodsb\n\t"											// 加载DS:[esi]处1字节->al, 并更新esi.
	"stosb\n\t"												// 存储字节al->ES:[edi], 并更新edi.
	"testb %%al, %%al\n\t"									// 刚存储的字节是0?
	"jne 1b"												// 不是则向后跳转到标号1处,否则结束.
	::"S" (src), "D" (dest):"ax");
return dest;												// 返回目的字符串指针.
   12a7b:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   12a7f:	5e                   	pop    %esi
   12a80:	5f                   	pop    %edi
   12a81:	c3                   	ret    

00012a82 <strcmp>:
// 将一个字符串与另一个字符串进行比较
// 参数:cs - 字符串1,ct - 字符串2.
// %0 - eax(__res)返回值,%1 - edi(cs)字符串1指针,%2 - esi(ct)字符串2指针.
// 返回:如果串1>串2,则返回1;串1=串2,则返回0;串1<串2,则返回-1.
static inline int strcmp(const char * cs, const char * ct)
{
   12a82:	57                   	push   %edi
   12a83:	56                   	push   %esi
register int __res __asm__("ax");							// __res是寄存器变量(eax).
__asm__(
   12a84:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12a88:	8b 54 24 10          	mov    0x10(%esp),%edx
   12a8c:	89 c7                	mov    %eax,%edi
   12a8e:	89 d6                	mov    %edx,%esi
   12a90:	fc                   	cld    
   12a91:	ac                   	lods   %ds:(%esi),%al
   12a92:	ae                   	scas   %es:(%edi),%al
   12a93:	75 08                	jne    12a9d <strcmp+0x1b>
   12a95:	84 c0                	test   %al,%al
   12a97:	75 f8                	jne    12a91 <strcmp+0xf>
   12a99:	31 c0                	xor    %eax,%eax
   12a9b:	eb 09                	jmp    12aa6 <strcmp+0x24>
   12a9d:	b8 01 00 00 00       	mov    $0x1,%eax
   12aa2:	7c 02                	jl     12aa6 <strcmp+0x24>
   12aa4:	f7 d8                	neg    %eax
	"jl 3f\n\t"												// 若前面比较中串2字符<串1字符,则返回正值结束.
	"negl %%eax\n"											// 否则eax=-eax,返回负值,结束.
	"3:"
	:"=a" (__res):"D" (cs), "S" (ct):);
return __res;												// 返回比较结果.
}
   12aa6:	5e                   	pop    %esi
   12aa7:	5f                   	pop    %edi
   12aa8:	c3                   	ret    

00012aa9 <permission>:
 */
// 检测文件访问许可权限.
// 参数:inode - 文件的i节点指针;mask - 访问属性屏蔽码.
// 返回:访问许可返回1,否则返回0.
static int permission(struct m_inode * inode, int mask)
{
   12aa9:	83 ec 1c             	sub    $0x1c,%esp
	int mode = inode->i_mode;								// 文件访问属性.
   12aac:	8b 44 24 20          	mov    0x20(%esp),%eax
   12ab0:	0f b7 00             	movzwl (%eax),%eax
   12ab3:	0f b7 c0             	movzwl %ax,%eax
   12ab6:	89 44 24 0c          	mov    %eax,0xc(%esp)

	/* special case: not even root can read/write a deleted file */
	/* 特殊情况:即使是超级用户(root)也不能读/写一个已被删除的文件. */
	// 如果i节点有对应的设备,但该i节点的链接计数值等于0,表示该文件已被删除,则返回.
	if (inode->i_dev && !inode->i_nlinks)
   12aba:	8b 44 24 20          	mov    0x20(%esp),%eax
   12abe:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   12ac2:	66 85 c0             	test   %ax,%ax
   12ac5:	74 13                	je     12ada <permission+0x31>
   12ac7:	8b 44 24 20          	mov    0x20(%esp),%eax
   12acb:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   12acf:	84 c0                	test   %al,%al
   12ad1:	75 07                	jne    12ada <permission+0x31>
		return 0;
   12ad3:	b8 00 00 00 00       	mov    $0x0,%eax
   12ad8:	eb 6e                	jmp    12b48 <permission+0x9f>
	// 如果进程的有效用户id(euid)与i节点的用户id相同,则取文件宿主的访问权限
	else if (current->euid == inode->i_uid)
   12ada:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   12adf:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
   12ae6:	8b 44 24 20          	mov    0x20(%esp),%eax
   12aea:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   12aee:	66 39 c2             	cmp    %ax,%dx
   12af1:	75 07                	jne    12afa <permission+0x51>
		mode >>= 6;
   12af3:	c1 7c 24 0c 06       	sarl   $0x6,0xc(%esp)
   12af8:	eb 20                	jmp    12b1a <permission+0x71>
	// 如果进程有效组id(egid)与i节点的组id相同,则取组用户的访问权限
	else if (in_group_p(inode->i_gid))
   12afa:	8b 44 24 20          	mov    0x20(%esp),%eax
   12afe:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
   12b02:	0f b6 c0             	movzbl %al,%eax
   12b05:	83 ec 0c             	sub    $0xc,%esp
   12b08:	50                   	push   %eax
   12b09:	e8 28 71 ff ff       	call   9c36 <in_group_p>
   12b0e:	83 c4 10             	add    $0x10,%esp
   12b11:	85 c0                	test   %eax,%eax
   12b13:	74 05                	je     12b1a <permission+0x71>
		mode >>= 3;
   12b15:	c1 7c 24 0c 03       	sarl   $0x3,0xc(%esp)
	// 最后判断如果所取的的访问权限与屏蔽码相同,或者是超级用户,则返回1,否则返回0.
	if (((mode & mask & 0007) == mask) || suser())
   12b1a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12b1e:	23 44 24 24          	and    0x24(%esp),%eax
   12b22:	83 e0 07             	and    $0x7,%eax
   12b25:	3b 44 24 24          	cmp    0x24(%esp),%eax
   12b29:	74 11                	je     12b3c <permission+0x93>
   12b2b:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   12b30:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
   12b37:	66 85 c0             	test   %ax,%ax
   12b3a:	75 07                	jne    12b43 <permission+0x9a>
		return 1;
   12b3c:	b8 01 00 00 00       	mov    $0x1,%eax
   12b41:	eb 05                	jmp    12b48 <permission+0x9f>
	return 0;
   12b43:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12b48:	83 c4 1c             	add    $0x1c,%esp
   12b4b:	c3                   	ret    

00012b4c <match>:
 */
// 指定长度字符串比较函数.
// 参数:len - 比较的字符串长度;name - 文件名指针;de - 目录项结构.
// 返回:相同返回1,不同返回0.
static int match(int len, const char * name, struct dir_entry * de)
{
   12b4c:	57                   	push   %edi
   12b4d:	56                   	push   %esi
   12b4e:	53                   	push   %ebx
	register int same __asm__("ax");

	// 首先判断函数参数的有效性.如果目录项指针空,或者目录项i节点等于0,或者要比较的字符串长度超过文件名长度,则返回0(不匹配).
	if (!de || !de->inode || len > NAME_LEN)
   12b4f:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   12b54:	74 13                	je     12b69 <match+0x1d>
   12b56:	8b 44 24 18          	mov    0x18(%esp),%eax
   12b5a:	0f b7 00             	movzwl (%eax),%eax
   12b5d:	66 85 c0             	test   %ax,%ax
   12b60:	74 07                	je     12b69 <match+0x1d>
   12b62:	83 7c 24 10 0e       	cmpl   $0xe,0x10(%esp)
   12b67:	7e 07                	jle    12b70 <match+0x24>
		return 0;
   12b69:	b8 00 00 00 00       	mov    $0x0,%eax
   12b6e:	eb 69                	jmp    12bd9 <match+0x8d>
	/* "" means "." ---> so paths like "/usr/lib//libc.a" work */
    /* ""当作"."来看待 ---> 这样就能处理象"/usr/lib//libc.a"那样的路径名 */
    // 如果比较的长度len等于0并且目录项中文件名的第1个字符是'.',并且只有这么一个字符,那么我们就认为是相同的,因此返回1(匹配)
	if (!len && (de->name[0] == '.') && (de->name[1] == '\0'))
   12b70:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   12b75:	75 1f                	jne    12b96 <match+0x4a>
   12b77:	8b 44 24 18          	mov    0x18(%esp),%eax
   12b7b:	0f b6 40 02          	movzbl 0x2(%eax),%eax
   12b7f:	3c 2e                	cmp    $0x2e,%al
   12b81:	75 13                	jne    12b96 <match+0x4a>
   12b83:	8b 44 24 18          	mov    0x18(%esp),%eax
   12b87:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   12b8b:	84 c0                	test   %al,%al
   12b8d:	75 07                	jne    12b96 <match+0x4a>
		return 1;
   12b8f:	b8 01 00 00 00       	mov    $0x1,%eax
   12b94:	eb 43                	jmp    12bd9 <match+0x8d>
	// 如果要比较的长度len小于NAME_LEN,但是目录项中文件名长度超过len,则也返回0(不匹配)
	// 第75行上对目录项中文件名长度是否超过len的判断方法是检测name[len]是否为NULL.若长度超过len,则name[len]处就是一个不是NULL的普通字符.而对于长度
	// 为len的字符串name,字符name[len]就应该是NULL.
	if (len < NAME_LEN && de->name[len])
   12b96:	83 7c 24 10 0d       	cmpl   $0xd,0x10(%esp)
   12b9b:	7f 1b                	jg     12bb8 <match+0x6c>
   12b9d:	8b 54 24 18          	mov    0x18(%esp),%edx
   12ba1:	8b 44 24 10          	mov    0x10(%esp),%eax
   12ba5:	01 d0                	add    %edx,%eax
   12ba7:	83 c0 02             	add    $0x2,%eax
   12baa:	0f b6 00             	movzbl (%eax),%eax
   12bad:	84 c0                	test   %al,%al
   12baf:	74 07                	je     12bb8 <match+0x6c>
		return 0;
   12bb1:	b8 00 00 00 00       	mov    $0x0,%eax
   12bb6:	eb 21                	jmp    12bd9 <match+0x8d>
	__asm__(\
		"cld\n\t"							// 清方向标志位.
		"fs ; repe ; cmpsb\n\t"				// 用户空间执行循环比较[esi++]和[edi++]操作.
		"setz %%al"							// 若比较结果一样(zf=0)则置al=1(same=eax).
		:"=a" (same)
		:"0" (0), "S" ((long) name), "D" ((long) de->name), "c" (len)
   12bb8:	8b 54 24 14          	mov    0x14(%esp),%edx
   12bbc:	8b 44 24 18          	mov    0x18(%esp),%eax
   12bc0:	83 c0 02             	add    $0x2,%eax
   12bc3:	89 c3                	mov    %eax,%ebx
	// 为len的字符串name,字符name[len]就应该是NULL.
	if (len < NAME_LEN && de->name[len])
		return 0;
	// 然后使用嵌入汇编语句进行快速比较操作.它会在用户数据空间(fs段)执行字符串的比较操作.%0 - eax(比较结果same);%1 - eax(eax初值0);%2 - esi(名字指针);
	// %3 - edi(目录项名指针);%4 - ecs(比较的字节长度值len).
	__asm__(\
   12bc5:	b8 00 00 00 00       	mov    $0x0,%eax
   12bca:	8b 4c 24 10          	mov    0x10(%esp),%ecx
   12bce:	89 d6                	mov    %edx,%esi
   12bd0:	89 df                	mov    %ebx,%edi
   12bd2:	fc                   	cld    
   12bd3:	64 f3 a6             	repz cmpsb %es:(%edi),%fs:(%esi)
   12bd6:	0f 94 c0             	sete   %al
		"setz %%al"							// 若比较结果一样(zf=0)则置al=1(same=eax).
		:"=a" (same)
		:"0" (0), "S" ((long) name), "D" ((long) de->name), "c" (len)
		:);
	return same;							// 返回比较结果.
}
   12bd9:	5b                   	pop    %ebx
   12bda:	5e                   	pop    %esi
   12bdb:	5f                   	pop    %edi
   12bdc:	c3                   	ret    

00012bdd <find_entry>:
// 参数:*dir - 指定目录i节点的指针;name - 文件名;namelen - 文件名长度;该函数在指定目录的数据(文件)中搜索指定文件名的目录项.并对指定
// 文件名是'..'的情况根据当前进行的相关设置进行特殊处理.
// 返回:成功则返回高速缓冲区指针,并在*res_dir处返回的目录项结构指针.失败则返回空指针NULL.
static struct buffer_head * find_entry(struct m_inode ** dir,
	const char * name, int namelen, struct dir_entry ** res_dir)
{
   12bdd:	83 ec 2c             	sub    $0x2c,%esp
	// 则不予处理.如果没有定义过NO_TRUNCATE,那么在文件名长度超过最大长度NAME_LEN时截短之.
#ifdef NO_TRUNCATE
	if (namelen > NAME_LEN)
		return NULL;
#else
	if (namelen > NAME_LEN)
   12be0:	83 7c 24 38 0e       	cmpl   $0xe,0x38(%esp)
   12be5:	7e 08                	jle    12bef <find_entry+0x12>
		namelen = NAME_LEN;
   12be7:	c7 44 24 38 0e 00 00 	movl   $0xe,0x38(%esp)
   12bee:	00 
#endif
	// 首先计算本目录中目录项项数entries.目录i节点i_size字段中含有本目录包含的数据长度,因此其除以一个目录项的长度(16字节)即可得到该目录中目录项数.然后
	// 置空返回目录项结构指针.
	entries = (*dir)->i_size / (sizeof (struct dir_entry));
   12bef:	8b 44 24 30          	mov    0x30(%esp),%eax
   12bf3:	8b 00                	mov    (%eax),%eax
   12bf5:	8b 40 04             	mov    0x4(%eax),%eax
   12bf8:	c1 e8 04             	shr    $0x4,%eax
   12bfb:	89 44 24 10          	mov    %eax,0x10(%esp)
	*res_dir = NULL;
   12bff:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   12c03:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	// 只能访问该目录中的项而不能退到其父目录中去.也即对于该进程本目录就如同是文件系统的根目录.因此我们需要将文件名修改为'.'.
	// 否则,如果该目录的i节点号等于ROOT_INO(1号)的话,说明确实是文件系统的根i节点.则取文件系统的超级块.如果被安装到的i节点存在,则先放回原i节点,然后对被
	// 安装到的i节点进行处理.于是我们让*dir指向该被安装到的i节点;并且该i节点的引用数加1.即针对这种情况,我们悄悄进行了"偷梁换柱"工程:)
	/* check for '..', as we might have to do some "magic" for it */
	/* 检查目录项'..',因为我们可能需要对其进行特殊处理 */
	if (namelen == 2 && get_fs_byte(name) == '.' && get_fs_byte(name + 1) == '.') {
   12c09:	83 7c 24 38 02       	cmpl   $0x2,0x38(%esp)
   12c0e:	0f 85 b3 00 00 00    	jne    12cc7 <find_entry+0xea>
   12c14:	ff 74 24 34          	pushl  0x34(%esp)
   12c18:	e8 3b fe ff ff       	call   12a58 <get_fs_byte>
   12c1d:	83 c4 04             	add    $0x4,%esp
   12c20:	3c 2e                	cmp    $0x2e,%al
   12c22:	0f 85 9f 00 00 00    	jne    12cc7 <find_entry+0xea>
   12c28:	8b 44 24 34          	mov    0x34(%esp),%eax
   12c2c:	83 c0 01             	add    $0x1,%eax
   12c2f:	50                   	push   %eax
   12c30:	e8 23 fe ff ff       	call   12a58 <get_fs_byte>
   12c35:	83 c4 04             	add    $0x4,%esp
   12c38:	3c 2e                	cmp    $0x2e,%al
   12c3a:	0f 85 87 00 00 00    	jne    12cc7 <find_entry+0xea>
		/* '..' in a pseudo-root results in a faked '.' (just change namelen) */
		/* 伪根中的'..'如同一个假'.'(只需改变名字长度) */
		if ((*dir) == current->root)
   12c40:	8b 44 24 30          	mov    0x30(%esp),%eax
   12c44:	8b 10                	mov    (%eax),%edx
   12c46:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   12c4b:	8b 80 38 03 00 00    	mov    0x338(%eax),%eax
   12c51:	39 c2                	cmp    %eax,%edx
   12c53:	75 0a                	jne    12c5f <find_entry+0x82>
			namelen = 1;
   12c55:	c7 44 24 38 01 00 00 	movl   $0x1,0x38(%esp)
   12c5c:	00 
   12c5d:	eb 68                	jmp    12cc7 <find_entry+0xea>
		else if ((*dir)->i_num == ROOT_INO) {
   12c5f:	8b 44 24 30          	mov    0x30(%esp),%eax
   12c63:	8b 00                	mov    (%eax),%eax
   12c65:	0f b7 40 32          	movzwl 0x32(%eax),%eax
   12c69:	66 83 f8 01          	cmp    $0x1,%ax
   12c6d:	75 58                	jne    12cc7 <find_entry+0xea>
			/* '..' over a mount-point results in 'dir' being exchanged for the mounted
			   directory-inode. NOTE! We set mounted, so that we can iput the new dir */
			/* 在一个安装点上的'..'将导致目录交换到被安装文件系统的目录i节点上.注意! 由于我们设置了mounted标志,因而我们能够放回该新目录 */
			sb = get_super((*dir)->i_dev);
   12c6f:	8b 44 24 30          	mov    0x30(%esp),%eax
   12c73:	8b 00                	mov    (%eax),%eax
   12c75:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   12c79:	0f b7 c0             	movzwl %ax,%eax
   12c7c:	83 ec 0c             	sub    $0xc,%esp
   12c7f:	50                   	push   %eax
   12c80:	e8 d2 ce ff ff       	call   fb57 <get_super>
   12c85:	83 c4 10             	add    $0x10,%esp
   12c88:	89 44 24 0c          	mov    %eax,0xc(%esp)
			if (sb->s_imount) {
   12c8c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12c90:	8b 40 5c             	mov    0x5c(%eax),%eax
   12c93:	85 c0                	test   %eax,%eax
   12c95:	74 30                	je     12cc7 <find_entry+0xea>
				iput(*dir);
   12c97:	8b 44 24 30          	mov    0x30(%esp),%eax
   12c9b:	8b 00                	mov    (%eax),%eax
   12c9d:	83 ec 0c             	sub    $0xc,%esp
   12ca0:	50                   	push   %eax
   12ca1:	e8 49 ba ff ff       	call   e6ef <iput>
   12ca6:	83 c4 10             	add    $0x10,%esp
				(*dir)=sb->s_imount;
   12ca9:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12cad:	8b 50 5c             	mov    0x5c(%eax),%edx
   12cb0:	8b 44 24 30          	mov    0x30(%esp),%eax
   12cb4:	89 10                	mov    %edx,(%eax)
				(*dir)->i_count++;
   12cb6:	8b 44 24 30          	mov    0x30(%esp),%eax
   12cba:	8b 00                	mov    (%eax),%eax
   12cbc:	0f b7 50 34          	movzwl 0x34(%eax),%edx
   12cc0:	83 c2 01             	add    $0x1,%edx
   12cc3:	66 89 50 34          	mov    %dx,0x34(%eax)
		}
	}
	// 现在我们开始正常操作，查找指定文件名的目录项在什么地方。因此我们需要读取目录的数据，即取出目录i节点对应块设备数据区中的数据块（逻辑块）信息。这些逻辑块的
	// 块号保存在i节点结构的i_zone[9]数组中.我们先取其中第1个块号.如果目录i节点指向的第一个直接盘块号为0,则说明该目录竟然不含数据,这不正常.于是返回NULL退出.
	// 否则我们就从节点所在设备读取指定的目录项数据块.当然,如果不成功,则也返回NULL退出.
	if (!(block = (*dir)->i_zone[0]))
   12cc7:	8b 44 24 30          	mov    0x30(%esp),%eax
   12ccb:	8b 00                	mov    (%eax),%eax
   12ccd:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   12cd1:	0f b7 c0             	movzwl %ax,%eax
   12cd4:	89 44 24 08          	mov    %eax,0x8(%esp)
   12cd8:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   12cdd:	75 0a                	jne    12ce9 <find_entry+0x10c>
		return NULL;
   12cdf:	b8 00 00 00 00       	mov    $0x0,%eax
   12ce4:	e9 2e 01 00 00       	jmp    12e17 <find_entry+0x23a>
	if (!(bh = bread((*dir)->i_dev, block)))
   12ce9:	8b 44 24 30          	mov    0x30(%esp),%eax
   12ced:	8b 00                	mov    (%eax),%eax
   12cef:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   12cf3:	0f b7 c0             	movzwl %ax,%eax
   12cf6:	83 ec 08             	sub    $0x8,%esp
   12cf9:	ff 74 24 10          	pushl  0x10(%esp)
   12cfd:	50                   	push   %eax
   12cfe:	e8 e3 c9 ff ff       	call   f6e6 <bread>
   12d03:	83 c4 10             	add    $0x10,%esp
   12d06:	89 44 24 18          	mov    %eax,0x18(%esp)
   12d0a:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   12d0f:	75 0a                	jne    12d1b <find_entry+0x13e>
		return NULL;
   12d11:	b8 00 00 00 00       	mov    $0x0,%eax
   12d16:	e9 fc 00 00 00       	jmp    12e17 <find_entry+0x23a>
	// 此时我们就在这个读取的目录i节点数据块中搜索匹配指定文件名的目录项.首先让de指向缓冲块中的数据块部分,并在不超过目录项数据的条件下,循环执行搜索.其中i是目录
	// 中的目录项索引号,在循环开始时初始化为0.
	i = 0;
   12d1b:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   12d22:	00 
	de = (struct dir_entry *) bh->b_data;
   12d23:	8b 44 24 18          	mov    0x18(%esp),%eax
   12d27:	8b 00                	mov    (%eax),%eax
   12d29:	89 44 24 14          	mov    %eax,0x14(%esp)
	while (i < entries) {
   12d2d:	e9 c3 00 00 00       	jmp    12df5 <find_entry+0x218>
		// 如果当前目录项数据块已经搜索完,还没有找到匹配的目录项,则释放当前目录项数据块.再读入目录的下一个逻辑块.若这块为空,则只要还没有搜索完目录中的所有目录项,就
		// 跳过该块,继续读目录的下一逻辑块.若该块不空,就让de指向该数据块,然后在其中继续搜索.其中141行上i/DIR_ENTRIES_PER_BLOCK可得到当前搜索的目录项所在目录文件中的
		// 块号,而bmap()函数(inode.c)则可计算出在设备上对应的逻辑块号.
		if ((char *)de >= BLOCK_SIZE + bh->b_data) {
   12d32:	8b 44 24 18          	mov    0x18(%esp),%eax
   12d36:	8b 00                	mov    (%eax),%eax
   12d38:	05 00 04 00 00       	add    $0x400,%eax
   12d3d:	3b 44 24 14          	cmp    0x14(%esp),%eax
   12d41:	77 7d                	ja     12dc0 <find_entry+0x1e3>
			brelse(bh);
   12d43:	83 ec 0c             	sub    $0xc,%esp
   12d46:	ff 74 24 24          	pushl  0x24(%esp)
   12d4a:	e8 41 c9 ff ff       	call   f690 <brelse>
   12d4f:	83 c4 10             	add    $0x10,%esp
			bh = NULL;
   12d52:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   12d59:	00 
			if (!(block = bmap(*dir, i / DIR_ENTRIES_PER_BLOCK)) ||
   12d5a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   12d5e:	c1 e8 06             	shr    $0x6,%eax
   12d61:	89 c2                	mov    %eax,%edx
   12d63:	8b 44 24 30          	mov    0x30(%esp),%eax
   12d67:	8b 00                	mov    (%eax),%eax
   12d69:	83 ec 08             	sub    $0x8,%esp
   12d6c:	52                   	push   %edx
   12d6d:	50                   	push   %eax
   12d6e:	e8 44 b9 ff ff       	call   e6b7 <bmap>
   12d73:	83 c4 10             	add    $0x10,%esp
   12d76:	89 44 24 08          	mov    %eax,0x8(%esp)
   12d7a:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   12d7f:	74 28                	je     12da9 <find_entry+0x1cc>
			    !(bh = bread((*dir)->i_dev, block))) {
   12d81:	8b 44 24 30          	mov    0x30(%esp),%eax
   12d85:	8b 00                	mov    (%eax),%eax
   12d87:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   12d8b:	0f b7 c0             	movzwl %ax,%eax
		// 跳过该块,继续读目录的下一逻辑块.若该块不空,就让de指向该数据块,然后在其中继续搜索.其中141行上i/DIR_ENTRIES_PER_BLOCK可得到当前搜索的目录项所在目录文件中的
		// 块号,而bmap()函数(inode.c)则可计算出在设备上对应的逻辑块号.
		if ((char *)de >= BLOCK_SIZE + bh->b_data) {
			brelse(bh);
			bh = NULL;
			if (!(block = bmap(*dir, i / DIR_ENTRIES_PER_BLOCK)) ||
   12d8e:	83 ec 08             	sub    $0x8,%esp
   12d91:	ff 74 24 10          	pushl  0x10(%esp)
   12d95:	50                   	push   %eax
   12d96:	e8 4b c9 ff ff       	call   f6e6 <bread>
   12d9b:	83 c4 10             	add    $0x10,%esp
   12d9e:	89 44 24 18          	mov    %eax,0x18(%esp)
   12da2:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   12da7:	75 0d                	jne    12db6 <find_entry+0x1d9>
			    !(bh = bread((*dir)->i_dev, block))) {
				i += DIR_ENTRIES_PER_BLOCK;
   12da9:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   12dad:	83 c0 40             	add    $0x40,%eax
   12db0:	89 44 24 1c          	mov    %eax,0x1c(%esp)
				continue;
   12db4:	eb 3f                	jmp    12df5 <find_entry+0x218>
			}
			de = (struct dir_entry *) bh->b_data;
   12db6:	8b 44 24 18          	mov    0x18(%esp),%eax
   12dba:	8b 00                	mov    (%eax),%eax
   12dbc:	89 44 24 14          	mov    %eax,0x14(%esp)
		}
		// 如果找到匹配的目录项的话,则返回目录项结构指针de和该目录项i节点指针*dir以及该目录项数据块指针bh,并退出函数.否则继续在目录项数据块中比较下一个目录项.
		if (match(namelen, name, de)) {
   12dc0:	83 ec 04             	sub    $0x4,%esp
   12dc3:	ff 74 24 18          	pushl  0x18(%esp)
   12dc7:	ff 74 24 3c          	pushl  0x3c(%esp)
   12dcb:	ff 74 24 44          	pushl  0x44(%esp)
   12dcf:	e8 78 fd ff ff       	call   12b4c <match>
   12dd4:	83 c4 10             	add    $0x10,%esp
   12dd7:	85 c0                	test   %eax,%eax
   12dd9:	74 10                	je     12deb <find_entry+0x20e>
			*res_dir = de;
   12ddb:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   12ddf:	8b 54 24 14          	mov    0x14(%esp),%edx
   12de3:	89 10                	mov    %edx,(%eax)
			return bh;
   12de5:	8b 44 24 18          	mov    0x18(%esp),%eax
   12de9:	eb 2c                	jmp    12e17 <find_entry+0x23a>
		}
		de++;
   12deb:	83 44 24 14 10       	addl   $0x10,0x14(%esp)
		i++;
   12df0:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
		return NULL;
	// 此时我们就在这个读取的目录i节点数据块中搜索匹配指定文件名的目录项.首先让de指向缓冲块中的数据块部分,并在不超过目录项数据的条件下,循环执行搜索.其中i是目录
	// 中的目录项索引号,在循环开始时初始化为0.
	i = 0;
	de = (struct dir_entry *) bh->b_data;
	while (i < entries) {
   12df5:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   12df9:	3b 44 24 10          	cmp    0x10(%esp),%eax
   12dfd:	0f 8c 2f ff ff ff    	jl     12d32 <find_entry+0x155>
		}
		de++;
		i++;
	}
	// 如果指定目录中的所有目录项都搜索赛后,还没有找到相应的目录项,则释放目录的数据块,最后返回NULL(失败).
	brelse(bh);
   12e03:	83 ec 0c             	sub    $0xc,%esp
   12e06:	ff 74 24 24          	pushl  0x24(%esp)
   12e0a:	e8 81 c8 ff ff       	call   f690 <brelse>
   12e0f:	83 c4 10             	add    $0x10,%esp
	return NULL;
   12e12:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12e17:	83 c4 2c             	add    $0x2c,%esp
   12e1a:	c3                   	ret    

00012e1b <add_entry>:
// 根据指定的目录和文件名添加目录项。
// 参数：dir - 指定目录的i节点；name - 文件名；namelen - 文件名长度；
// 返回：高速缓冲区指针；res_dir - 返回的目录项结构指针。
static struct buffer_head * add_entry(struct m_inode * dir,
	const char * name, int namelen, struct dir_entry ** res_dir)
{
   12e1b:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;
	struct dir_entry * de;

	// 同样，本函数一开始也需要对函数参数的有效性进行判断和验证。如果我们在前面定义了符号常数NO_TRUNCATE，那么如果文件
	// 名长度超过最大长度NAME_LEN，则不予处理。如果没有定义过NO_TRUNCATE，那么在文件长度超过最大长度NAME_LEN时截短之。
	*res_dir = NULL;                							// 用于返回目录项结构指针。
   12e1e:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   12e22:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#ifdef NO_TRUNCATE
	if (namelen > NAME_LEN)
		return NULL;
#else
	if (namelen > NAME_LEN)
   12e28:	83 7c 24 28 0e       	cmpl   $0xe,0x28(%esp)
   12e2d:	7e 08                	jle    12e37 <add_entry+0x1c>
		namelen = NAME_LEN;
   12e2f:	c7 44 24 28 0e 00 00 	movl   $0xe,0x28(%esp)
   12e36:	00 
#endif
	// 现在我们开始操作，向指定目录中添加一个指定文件名的目录项。因此我们需要先读取目录的数据，即取出目录i节点对应块设备
	// 数据区中的数据块（逻辑块）信息。这些逻辑块的块号保存在i节点结构的i_zone[9]数组中。我们先取其第1个块号。如果目录
	// i节点指向的第一个直接磁盘块号为0,则说明该目录竟然不含数据，这不正常。于是返回NULL退出。否则我们就从节点所在设备读取
	// 指定的目录项数据块。如果不成功，则也返回NULL退出。另外，如果参数提供的文件名长度等于0,则也返回NULL退出。
	if (!namelen)
   12e37:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   12e3c:	75 0a                	jne    12e48 <add_entry+0x2d>
		return NULL;
   12e3e:	b8 00 00 00 00       	mov    $0x0,%eax
   12e43:	e9 fd 01 00 00       	jmp    13045 <add_entry+0x22a>
	if (!(block = dir->i_zone[0]))
   12e48:	8b 44 24 20          	mov    0x20(%esp),%eax
   12e4c:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   12e50:	0f b7 c0             	movzwl %ax,%eax
   12e53:	89 04 24             	mov    %eax,(%esp)
   12e56:	83 3c 24 00          	cmpl   $0x0,(%esp)
   12e5a:	75 0a                	jne    12e66 <add_entry+0x4b>
		return NULL;
   12e5c:	b8 00 00 00 00       	mov    $0x0,%eax
   12e61:	e9 df 01 00 00       	jmp    13045 <add_entry+0x22a>
	if (!(bh = bread(dir->i_dev, block)))
   12e66:	8b 44 24 20          	mov    0x20(%esp),%eax
   12e6a:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   12e6e:	0f b7 c0             	movzwl %ax,%eax
   12e71:	83 ec 08             	sub    $0x8,%esp
   12e74:	ff 74 24 08          	pushl  0x8(%esp)
   12e78:	50                   	push   %eax
   12e79:	e8 68 c8 ff ff       	call   f6e6 <bread>
   12e7e:	83 c4 10             	add    $0x10,%esp
   12e81:	89 44 24 08          	mov    %eax,0x8(%esp)
   12e85:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   12e8a:	75 0a                	jne    12e96 <add_entry+0x7b>
		return NULL;
   12e8c:	b8 00 00 00 00       	mov    $0x0,%eax
   12e91:	e9 af 01 00 00       	jmp    13045 <add_entry+0x22a>
	// 此时我们就在这个目录i节点数据块中循环查找最后未使用的空目录项。首先让目录项结构指针de指向缓冲块中的数据块部分，即第
	// 一个目录项处。其中i是目录中的目录项索引号，在循环开始时初始化为0。
	i = 0;
   12e96:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   12e9d:	00 
	de = (struct dir_entry *) bh->b_data;
   12e9e:	8b 44 24 08          	mov    0x8(%esp),%eax
   12ea2:	8b 00                	mov    (%eax),%eax
   12ea4:	89 44 24 04          	mov    %eax,0x4(%esp)
		// 对应的逻辑块不存在就创建一块。若读取或创建操作失败则返回空。如果此次读取的磁盘逻辑块数据返回的缓冲块指针为空，说明这
		// 块逻辑块可能是因为不存在而新创建的空块，则把目录项索引值加上一块逻辑块所能容纳的目录项数DIR_ENTRIES_PER_BLOCK，
		// 用以跳过该块并继续搜索。否则说明新读入的块上有目录项数据，于是让目录项结构指针de指向该块的缓冲块数据部分，然后在其中
		// 继续搜索。其中i/DIR_ENTRIES_PER_BLOCK可计算得到当前搜索的目录项i所在目录文件中的块号，而create_block()函数
		// （inode.c）则可读取或创建出在设备上对应的逻辑块。
		if ((char *)de >= BLOCK_SIZE + bh->b_data) {
   12ea8:	8b 44 24 08          	mov    0x8(%esp),%eax
   12eac:	8b 00                	mov    (%eax),%eax
   12eae:	05 00 04 00 00       	add    $0x400,%eax
   12eb3:	3b 44 24 04          	cmp    0x4(%esp),%eax
   12eb7:	0f 87 81 00 00 00    	ja     12f3e <add_entry+0x123>
			brelse(bh);
   12ebd:	83 ec 0c             	sub    $0xc,%esp
   12ec0:	ff 74 24 14          	pushl  0x14(%esp)
   12ec4:	e8 c7 c7 ff ff       	call   f690 <brelse>
   12ec9:	83 c4 10             	add    $0x10,%esp
			bh = NULL;
   12ecc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   12ed3:	00 
			block = create_block(dir, i / DIR_ENTRIES_PER_BLOCK);
   12ed4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12ed8:	c1 e8 06             	shr    $0x6,%eax
   12edb:	83 ec 08             	sub    $0x8,%esp
   12ede:	50                   	push   %eax
   12edf:	ff 74 24 2c          	pushl  0x2c(%esp)
   12ee3:	e8 eb b7 ff ff       	call   e6d3 <create_block>
   12ee8:	83 c4 10             	add    $0x10,%esp
   12eeb:	89 04 24             	mov    %eax,(%esp)
			if (!block)
   12eee:	83 3c 24 00          	cmpl   $0x0,(%esp)
   12ef2:	75 0a                	jne    12efe <add_entry+0xe3>
				return NULL;
   12ef4:	b8 00 00 00 00       	mov    $0x0,%eax
   12ef9:	e9 47 01 00 00       	jmp    13045 <add_entry+0x22a>
			if (!(bh = bread(dir->i_dev, block))) {          			// 若空则跳过该块继续。
   12efe:	8b 44 24 20          	mov    0x20(%esp),%eax
   12f02:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   12f06:	0f b7 c0             	movzwl %ax,%eax
   12f09:	83 ec 08             	sub    $0x8,%esp
   12f0c:	ff 74 24 08          	pushl  0x8(%esp)
   12f10:	50                   	push   %eax
   12f11:	e8 d0 c7 ff ff       	call   f6e6 <bread>
   12f16:	83 c4 10             	add    $0x10,%esp
   12f19:	89 44 24 08          	mov    %eax,0x8(%esp)
   12f1d:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   12f22:	75 10                	jne    12f34 <add_entry+0x119>
				i += DIR_ENTRIES_PER_BLOCK;
   12f24:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12f28:	83 c0 40             	add    $0x40,%eax
   12f2b:	89 44 24 0c          	mov    %eax,0xc(%esp)
				continue;
   12f2f:	e9 0c 01 00 00       	jmp    13040 <add_entry+0x225>
			}
			de = (struct dir_entry *) bh->b_data;
   12f34:	8b 44 24 08          	mov    0x8(%esp),%eax
   12f38:	8b 00                	mov    (%eax),%eax
   12f3a:	89 44 24 04          	mov    %eax,0x4(%esp)
		}
		// 如果当前所操作的目录项序号i乘上结构大小所得长度值已经超过目录i节点信息所指出的目录数据长度值i_size，则说明整个目录
		// 文件数据中没有由于删除文件留下的空目录项，因此我们只能把需要添加的新目录项附加到目录文件数据的末端处。于是对该处目录
		// 项进行设置（置该目录项的i节点指针为空），并更新该目录文件的长度值（加上一个目录项的长度），然后设置目录的i节点已修改
		// 标志，再更新该目录的改变时间为当前时间。
		if (i * sizeof(struct dir_entry) >= dir->i_size) {
   12f3e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12f42:	c1 e0 04             	shl    $0x4,%eax
   12f45:	89 c2                	mov    %eax,%edx
   12f47:	8b 44 24 20          	mov    0x20(%esp),%eax
   12f4b:	8b 40 04             	mov    0x4(%eax),%eax
   12f4e:	39 c2                	cmp    %eax,%edx
   12f50:	72 49                	jb     12f9b <add_entry+0x180>
			de->inode = 0;
   12f52:	8b 44 24 04          	mov    0x4(%esp),%eax
   12f56:	66 c7 00 00 00       	movw   $0x0,(%eax)
			dir->i_size = (i + 1) * sizeof(struct dir_entry);
   12f5b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12f5f:	83 c0 01             	add    $0x1,%eax
   12f62:	c1 e0 04             	shl    $0x4,%eax
   12f65:	89 c2                	mov    %eax,%edx
   12f67:	8b 44 24 20          	mov    0x20(%esp),%eax
   12f6b:	89 50 04             	mov    %edx,0x4(%eax)
			dir->i_dirt = 1;
   12f6e:	8b 44 24 20          	mov    0x20(%esp),%eax
   12f72:	c6 40 37 01          	movb   $0x1,0x37(%eax)
			dir->i_ctime = CURRENT_TIME;
   12f76:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   12f7b:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
   12f81:	01 d0                	add    %edx,%eax
   12f83:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   12f88:	f7 e2                	mul    %edx
   12f8a:	c1 ea 05             	shr    $0x5,%edx
   12f8d:	a1 04 eb 02 00       	mov    0x2eb04,%eax
   12f92:	01 c2                	add    %eax,%edx
   12f94:	8b 44 24 20          	mov    0x20(%esp),%eax
   12f98:	89 50 2c             	mov    %edx,0x2c(%eax)
		}
		// 若当前搜索的目录项de的i节点为空，则表示找到一个还未使用的空闲目录项或是添加的新目录项。于是更新目录的修改时间为当前
		// 时间，并从用户数据区复制文件名到该目录项的文件名字段，置含有本目录项的相应高速缓冲块已修改标志。返回该目录项的指针以及
		// 该高速缓冲块的指针，退出。
		if (!de->inode) {
   12f9b:	8b 44 24 04          	mov    0x4(%esp),%eax
   12f9f:	0f b7 00             	movzwl (%eax),%eax
   12fa2:	66 85 c0             	test   %ax,%ax
   12fa5:	0f 85 8b 00 00 00    	jne    13036 <add_entry+0x21b>
			dir->i_mtime = CURRENT_TIME;
   12fab:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   12fb0:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
   12fb6:	01 d0                	add    %edx,%eax
   12fb8:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   12fbd:	f7 e2                	mul    %edx
   12fbf:	c1 ea 05             	shr    $0x5,%edx
   12fc2:	a1 04 eb 02 00       	mov    0x2eb04,%eax
   12fc7:	01 c2                	add    %eax,%edx
   12fc9:	8b 44 24 20          	mov    0x20(%esp),%eax
   12fcd:	89 50 08             	mov    %edx,0x8(%eax)
			for (i = 0; i < NAME_LEN ; i++)
   12fd0:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   12fd7:	00 
   12fd8:	eb 3d                	jmp    13017 <add_entry+0x1fc>
				de->name[i] = (i < namelen) ? get_fs_byte(name + i) : 0;
   12fda:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12fde:	3b 44 24 28          	cmp    0x28(%esp),%eax
   12fe2:	7d 1a                	jge    12ffe <add_entry+0x1e3>
   12fe4:	8b 54 24 0c          	mov    0xc(%esp),%edx
   12fe8:	8b 44 24 24          	mov    0x24(%esp),%eax
   12fec:	01 d0                	add    %edx,%eax
   12fee:	83 ec 0c             	sub    $0xc,%esp
   12ff1:	50                   	push   %eax
   12ff2:	e8 61 fa ff ff       	call   12a58 <get_fs_byte>
   12ff7:	83 c4 10             	add    $0x10,%esp
   12ffa:	89 c1                	mov    %eax,%ecx
   12ffc:	eb 05                	jmp    13003 <add_entry+0x1e8>
   12ffe:	b9 00 00 00 00       	mov    $0x0,%ecx
   13003:	8b 54 24 04          	mov    0x4(%esp),%edx
   13007:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1300b:	01 d0                	add    %edx,%eax
   1300d:	83 c0 02             	add    $0x2,%eax
   13010:	88 08                	mov    %cl,(%eax)
		// 若当前搜索的目录项de的i节点为空，则表示找到一个还未使用的空闲目录项或是添加的新目录项。于是更新目录的修改时间为当前
		// 时间，并从用户数据区复制文件名到该目录项的文件名字段，置含有本目录项的相应高速缓冲块已修改标志。返回该目录项的指针以及
		// 该高速缓冲块的指针，退出。
		if (!de->inode) {
			dir->i_mtime = CURRENT_TIME;
			for (i = 0; i < NAME_LEN ; i++)
   13012:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   13017:	83 7c 24 0c 0d       	cmpl   $0xd,0xc(%esp)
   1301c:	7e bc                	jle    12fda <add_entry+0x1bf>
				de->name[i] = (i < namelen) ? get_fs_byte(name + i) : 0;
			bh->b_dirt = 1;
   1301e:	8b 44 24 08          	mov    0x8(%esp),%eax
   13022:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
			*res_dir = de;
   13026:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   1302a:	8b 54 24 04          	mov    0x4(%esp),%edx
   1302e:	89 10                	mov    %edx,(%eax)
			return bh;
   13030:	8b 44 24 08          	mov    0x8(%esp),%eax
   13034:	eb 0f                	jmp    13045 <add_entry+0x22a>
		}
		de++;           												// 如果该目录项已经被使用，则继续检测下一个目录项。
   13036:	83 44 24 04 10       	addl   $0x10,0x4(%esp)
		i++;
   1303b:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
	}
   13040:	e9 63 fe ff ff       	jmp    12ea8 <add_entry+0x8d>
	// 本函数执行不到这里。这也许是Linus在写这段代码时，先复制了上面find_entry()函数的代码，而后修改成本函数的。
	brelse(bh);
	return NULL;
}
   13045:	83 c4 1c             	add    $0x1c,%esp
   13048:	c3                   	ret    

00013049 <follow_link>:

// 查找符号链接的i节点.
// 参数:dir - 目录i节点;inode - 目录项i节点.
// 返回:返回符号链接到文件的i节点指针.出错返回NULL.
static struct m_inode * follow_link(struct m_inode * dir, struct m_inode * inode)
{
   13049:	83 ec 1c             	sub    $0x1c,%esp
	unsigned short fs;													// 用于临时保存fs段寄存器值.
	struct buffer_head * bh;

	// 首先判断函数参数的有效性.如果没有给出目录i节点,我们就使用进程任务结构中设置的根i节点,并把链接数增1.如果没有给出目录
	// 项i节点,则放回目录i节点后返回NULL.如果指定目录项不是一个符号链接,就直接返回目录项对应的i节点inode.
	if (!dir) {
   1304c:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   13051:	75 22                	jne    13075 <follow_link+0x2c>
		dir = current->root;
   13053:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   13058:	8b 80 38 03 00 00    	mov    0x338(%eax),%eax
   1305e:	89 44 24 20          	mov    %eax,0x20(%esp)
		dir->i_count++;
   13062:	8b 44 24 20          	mov    0x20(%esp),%eax
   13066:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   1306a:	8d 50 01             	lea    0x1(%eax),%edx
   1306d:	8b 44 24 20          	mov    0x20(%esp),%eax
   13071:	66 89 50 34          	mov    %dx,0x34(%eax)
	}
	if (!inode) {
   13075:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   1307a:	75 19                	jne    13095 <follow_link+0x4c>
		iput(dir);
   1307c:	83 ec 0c             	sub    $0xc,%esp
   1307f:	ff 74 24 2c          	pushl  0x2c(%esp)
   13083:	e8 67 b6 ff ff       	call   e6ef <iput>
   13088:	83 c4 10             	add    $0x10,%esp
		return NULL;
   1308b:	b8 00 00 00 00       	mov    $0x0,%eax
   13090:	e9 ea 00 00 00       	jmp    1317f <follow_link+0x136>
	}
	if (!S_ISLNK(inode->i_mode)) {
   13095:	8b 44 24 24          	mov    0x24(%esp),%eax
   13099:	0f b7 00             	movzwl (%eax),%eax
   1309c:	0f b7 c0             	movzwl %ax,%eax
   1309f:	25 00 f0 00 00       	and    $0xf000,%eax
   130a4:	3d 00 a0 00 00       	cmp    $0xa000,%eax
   130a9:	74 18                	je     130c3 <follow_link+0x7a>
		iput(dir);
   130ab:	83 ec 0c             	sub    $0xc,%esp
   130ae:	ff 74 24 2c          	pushl  0x2c(%esp)
   130b2:	e8 38 b6 ff ff       	call   e6ef <iput>
   130b7:	83 c4 10             	add    $0x10,%esp
		return inode;
   130ba:	8b 44 24 24          	mov    0x24(%esp),%eax
   130be:	e9 bc 00 00 00       	jmp    1317f <follow_link+0x136>
	}
	// 然后取fs段寄存器值.fs通常保存着指向任务数据段的选择符0x17.如果fs没有指向用户数据段,或者给出的目录项i节点第1个直接块
	// 块号等于0,或者是读取第1个直接块出错,则放回dir和inode两个i节点并返回NULL退出.否则说明现在fs正指向用户数据段,并且我
	// 们已经成功地读取了符号链接目录项的文件内容,并且文件内容已经在bh指向的缓冲块数据区中.实际上,这个缓冲块数据区中仅包含一
	// 个链接指向的文件路径名字符串.
	__asm__("mov %%fs, %0":"=r" (fs));
   130c3:	66 8c e0             	mov    %fs,%ax
   130c6:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	if (fs != 0x17 || !inode->i_zone[0] ||
   130cb:	66 83 7c 24 0e 17    	cmpw   $0x17,0xe(%esp)
   130d1:	75 3b                	jne    1310e <follow_link+0xc5>
   130d3:	8b 44 24 24          	mov    0x24(%esp),%eax
   130d7:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   130db:	66 85 c0             	test   %ax,%ax
   130de:	74 2e                	je     1310e <follow_link+0xc5>
	   !(bh = bread(inode->i_dev, inode->i_zone[0]))) {
   130e0:	8b 44 24 24          	mov    0x24(%esp),%eax
   130e4:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   130e8:	0f b7 d0             	movzwl %ax,%edx
   130eb:	8b 44 24 24          	mov    0x24(%esp),%eax
   130ef:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   130f3:	0f b7 c0             	movzwl %ax,%eax
	// 然后取fs段寄存器值.fs通常保存着指向任务数据段的选择符0x17.如果fs没有指向用户数据段,或者给出的目录项i节点第1个直接块
	// 块号等于0,或者是读取第1个直接块出错,则放回dir和inode两个i节点并返回NULL退出.否则说明现在fs正指向用户数据段,并且我
	// 们已经成功地读取了符号链接目录项的文件内容,并且文件内容已经在bh指向的缓冲块数据区中.实际上,这个缓冲块数据区中仅包含一
	// 个链接指向的文件路径名字符串.
	__asm__("mov %%fs, %0":"=r" (fs));
	if (fs != 0x17 || !inode->i_zone[0] ||
   130f6:	83 ec 08             	sub    $0x8,%esp
   130f9:	52                   	push   %edx
   130fa:	50                   	push   %eax
   130fb:	e8 e6 c5 ff ff       	call   f6e6 <bread>
   13100:	83 c4 10             	add    $0x10,%esp
   13103:	89 44 24 08          	mov    %eax,0x8(%esp)
   13107:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1310c:	75 25                	jne    13133 <follow_link+0xea>
	   !(bh = bread(inode->i_dev, inode->i_zone[0]))) {
		iput(dir);
   1310e:	83 ec 0c             	sub    $0xc,%esp
   13111:	ff 74 24 2c          	pushl  0x2c(%esp)
   13115:	e8 d5 b5 ff ff       	call   e6ef <iput>
   1311a:	83 c4 10             	add    $0x10,%esp
		iput(inode);
   1311d:	83 ec 0c             	sub    $0xc,%esp
   13120:	ff 74 24 30          	pushl  0x30(%esp)
   13124:	e8 c6 b5 ff ff       	call   e6ef <iput>
   13129:	83 c4 10             	add    $0x10,%esp
		return NULL;
   1312c:	b8 00 00 00 00       	mov    $0x0,%eax
   13131:	eb 4c                	jmp    1317f <follow_link+0x136>
	}
	// 此时我们已经不需要符号链接目录项的i节点了,于是把它放回.现在遇到一个问题,那就是内核函数处理的用户数据都是存放在用户数据
	// 空间中的,并使用了fs段寄存器来从用户空间传递数据到内核空间中.而这里需要处理的数据却在内核空间中.因此为了正确地处理位于
	// 内核中的用户数据,我们需要让fs段寄存器临时指向内核空间,即让fs=0x10.并在调用函数处理完后再恢复原fs的值.最后释放相应缓冲
	// 块,并返回_namei()解析得到符号链接指向的文件i节点.
	iput(inode);
   13133:	83 ec 0c             	sub    $0xc,%esp
   13136:	ff 74 24 30          	pushl  0x30(%esp)
   1313a:	e8 b0 b5 ff ff       	call   e6ef <iput>
   1313f:	83 c4 10             	add    $0x10,%esp
	__asm__("mov %0, %%fs"::"r" ((unsigned short) 0x10));
   13142:	b8 10 00 00 00       	mov    $0x10,%eax
   13147:	8e e0                	mov    %eax,%fs
	inode = _namei(bh->b_data,dir,0);
   13149:	8b 44 24 08          	mov    0x8(%esp),%eax
   1314d:	8b 00                	mov    (%eax),%eax
   1314f:	83 ec 04             	sub    $0x4,%esp
   13152:	6a 00                	push   $0x0
   13154:	ff 74 24 28          	pushl  0x28(%esp)
   13158:	50                   	push   %eax
   13159:	e8 86 02 00 00       	call   133e4 <_namei>
   1315e:	83 c4 10             	add    $0x10,%esp
   13161:	89 44 24 24          	mov    %eax,0x24(%esp)
	__asm__("mov %0, %%fs"::"r" (fs));
   13165:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
   1316a:	8e e0                	mov    %eax,%fs
	brelse(bh);
   1316c:	83 ec 0c             	sub    $0xc,%esp
   1316f:	ff 74 24 14          	pushl  0x14(%esp)
   13173:	e8 18 c5 ff ff       	call   f690 <brelse>
   13178:	83 c4 10             	add    $0x10,%esp
	return inode;
   1317b:	8b 44 24 24          	mov    0x24(%esp),%eax
}
   1317f:	83 c4 1c             	add    $0x1c,%esp
   13182:	c3                   	ret    

00013183 <get_dir>:
 */
// 从指定目录开始搜寻指定路径名的目录(或文件名)的i节点.
// 参数:pathname - 路径名;inode - 指定起始目录的i节点.
// 返回:目录或文件的i节点指针.失败时返回NULL.
static struct m_inode * get_dir(const char * pathname, struct m_inode * inode)
{
   13183:	83 ec 2c             	sub    $0x2c,%esp
	int namelen, inr;
	struct dir_entry * de;
	struct m_inode * dir;

	// 首先判断参数有效性.如果给出的指定目录的i节点指针inode为空,则使用当前进程的工作目录i节点.
	if (!inode) {
   13186:	8b 44 24 34          	mov    0x34(%esp),%eax
   1318a:	85 c0                	test   %eax,%eax
   1318c:	75 1e                	jne    131ac <get_dir+0x29>
		inode = current->pwd;									// 进程的当前工作目录i节点.
   1318e:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   13193:	8b 80 34 03 00 00    	mov    0x334(%eax),%eax
   13199:	89 44 24 34          	mov    %eax,0x34(%esp)
		inode->i_count++;
   1319d:	8b 44 24 34          	mov    0x34(%esp),%eax
   131a1:	0f b7 50 34          	movzwl 0x34(%eax),%edx
   131a5:	83 c2 01             	add    $0x1,%edx
   131a8:	66 89 50 34          	mov    %dx,0x34(%eax)
	}
	// 如果用户指定路径名的第1个字符是'/',则说明路径名是绝对路径名.则应该从当前进程任务结构中设置的根(或伪根)i节点开始操作.
	// 于是我们需要先放回参数指定的或者设定的目录i节点,并取得进程使用的根i节点.然后把该i节点的引用计数加1,
	// 并删除路径名的第1个字符'/'.这样就可以保证进程只能以其设定的根i节点作为搜索的起点.
	if ((c = get_fs_byte(pathname)) == '/') {
   131ac:	ff 74 24 30          	pushl  0x30(%esp)
   131b0:	e8 a3 f8 ff ff       	call   12a58 <get_fs_byte>
   131b5:	83 c4 04             	add    $0x4,%esp
   131b8:	88 44 24 1b          	mov    %al,0x1b(%esp)
   131bc:	80 7c 24 1b 2f       	cmpb   $0x2f,0x1b(%esp)
   131c1:	75 33                	jne    131f6 <get_dir+0x73>
		iput(inode);											// 放回原i节点.
   131c3:	8b 44 24 34          	mov    0x34(%esp),%eax
   131c7:	83 ec 0c             	sub    $0xc,%esp
   131ca:	50                   	push   %eax
   131cb:	e8 1f b5 ff ff       	call   e6ef <iput>
   131d0:	83 c4 10             	add    $0x10,%esp
		inode = current->root;									// 为进程指定的根i节点.
   131d3:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   131d8:	8b 80 38 03 00 00    	mov    0x338(%eax),%eax
   131de:	89 44 24 34          	mov    %eax,0x34(%esp)
		pathname++;
   131e2:	83 44 24 30 01       	addl   $0x1,0x30(%esp)
		inode->i_count++;
   131e7:	8b 44 24 34          	mov    0x34(%esp),%eax
   131eb:	0f b7 50 34          	movzwl 0x34(%eax),%edx
   131ef:	83 c2 01             	add    $0x1,%edx
   131f2:	66 89 50 34          	mov    %dx,0x34(%eax)
	}
	// 然后针对路径名中的各个目录名部分和文件名进行循环处理。在循环处理过程中，我们先要对当前正在处理的目录名部分的i节点进行有效性判断，并且把
	// 变量thisname指向当前正在处理的目录名部分。如果该i节点表明当前处理的目录名部分不是目录类型，或者没有可进入该目录的访问许可，则放回该i节点
	// 并返回NULL退出。当然在刚进入循环时，当前目录的ｉ节点inode就是进程根i节点或者是当前工作目录的i节点，或者是参数指定的某个搜索起始目录的i节点。
	while (1) {
		thisname = pathname;
   131f6:	8b 44 24 30          	mov    0x30(%esp),%eax
   131fa:	89 44 24 14          	mov    %eax,0x14(%esp)
		if (!S_ISDIR(inode->i_mode) || !permission(inode, MAY_EXEC)) {
   131fe:	8b 44 24 34          	mov    0x34(%esp),%eax
   13202:	0f b7 00             	movzwl (%eax),%eax
   13205:	0f b7 c0             	movzwl %ax,%eax
   13208:	25 00 f0 00 00       	and    $0xf000,%eax
   1320d:	3d 00 40 00 00       	cmp    $0x4000,%eax
   13212:	75 16                	jne    1322a <get_dir+0xa7>
   13214:	8b 44 24 34          	mov    0x34(%esp),%eax
   13218:	83 ec 08             	sub    $0x8,%esp
   1321b:	6a 01                	push   $0x1
   1321d:	50                   	push   %eax
   1321e:	e8 86 f8 ff ff       	call   12aa9 <permission>
   13223:	83 c4 10             	add    $0x10,%esp
   13226:	85 c0                	test   %eax,%eax
   13228:	75 1a                	jne    13244 <get_dir+0xc1>
			iput(inode);
   1322a:	8b 44 24 34          	mov    0x34(%esp),%eax
   1322e:	83 ec 0c             	sub    $0xc,%esp
   13231:	50                   	push   %eax
   13232:	e8 b8 b4 ff ff       	call   e6ef <iput>
   13237:	83 c4 10             	add    $0x10,%esp
			return NULL;
   1323a:	b8 00 00 00 00       	mov    $0x0,%eax
   1323f:	e9 12 01 00 00       	jmp    13356 <get_dir+0x1d3>
		// 每次循环我们处理路径名中一个目录名(或文件名)部分.因此在每次循环中我们都要从路径名字符串中分离出一个目录名(或文件名).方法是从当前路径名指针
		// pathname开始处搜索检测字符,直到字符是一个结尾符(NULL)或者是一个'/'字符.此时变量namelen正好是当前处理目录名部分的长度,而变量thisname正指向
		// 该目录名部分的开始处.此时如果字符是结尾符NULL,则表明已经搜索到路径名末尾,并已到达最后指定目录名或文件名,则返回该i节点指针退出.
		// 注意!如果路径名中最后一个名称也是一个目录名,但其后面没有加上'/'字符,则函数不会返回该最后目录名的i节点!例如:对于路径/usr/src/linux,该函数将
		// 只返回src/目录名的i节点.
		for(namelen = 0; (c = get_fs_byte(pathname++)) && (c != '/'); namelen++)
   13244:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   1324b:	00 
   1324c:	eb 05                	jmp    13253 <get_dir+0xd0>
   1324e:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   13253:	8b 44 24 30          	mov    0x30(%esp),%eax
   13257:	8d 50 01             	lea    0x1(%eax),%edx
   1325a:	89 54 24 30          	mov    %edx,0x30(%esp)
   1325e:	83 ec 0c             	sub    $0xc,%esp
   13261:	50                   	push   %eax
   13262:	e8 f1 f7 ff ff       	call   12a58 <get_fs_byte>
   13267:	83 c4 10             	add    $0x10,%esp
   1326a:	88 44 24 1b          	mov    %al,0x1b(%esp)
   1326e:	80 7c 24 1b 00       	cmpb   $0x0,0x1b(%esp)
   13273:	74 07                	je     1327c <get_dir+0xf9>
   13275:	80 7c 24 1b 2f       	cmpb   $0x2f,0x1b(%esp)
   1327a:	75 d2                	jne    1324e <get_dir+0xcb>
			/* nothing */ ;
		if (!c)
   1327c:	80 7c 24 1b 00       	cmpb   $0x0,0x1b(%esp)
   13281:	75 09                	jne    1328c <get_dir+0x109>
			return inode;
   13283:	8b 44 24 34          	mov    0x34(%esp),%eax
   13287:	e9 ca 00 00 00       	jmp    13356 <get_dir+0x1d3>
		// 在得到当前目录名部分(或文件名)后,我们调用查找目录项函数find_entry()在当前处理的目录中寻找指定名称的目录项.如果没有找到,则放回该i节点,并返回
		// NULL退出.然后在找到的目录项中取出其i节点号inr和设备号idev,释放包含该目录项的高速缓冲块并放回该i节点.然后取节点号inr的i节点inode,并以该目录
		// 项为当前目录继续循环处理路径名中的下一目录名部分(或文件名).如果当前处理的目录项是一个符号链接名,则使用follow_link()就可以得到其指向的目录项名i节点.
		if (!(bh = find_entry(&inode, thisname, namelen, &de))) {
   1328c:	8d 44 24 04          	lea    0x4(%esp),%eax
   13290:	50                   	push   %eax
   13291:	ff 74 24 20          	pushl  0x20(%esp)
   13295:	ff 74 24 1c          	pushl  0x1c(%esp)
   13299:	8d 44 24 40          	lea    0x40(%esp),%eax
   1329d:	50                   	push   %eax
   1329e:	e8 3a f9 ff ff       	call   12bdd <find_entry>
   132a3:	83 c4 10             	add    $0x10,%esp
   132a6:	89 44 24 10          	mov    %eax,0x10(%esp)
   132aa:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   132af:	75 1a                	jne    132cb <get_dir+0x148>
			iput(inode);
   132b1:	8b 44 24 34          	mov    0x34(%esp),%eax
   132b5:	83 ec 0c             	sub    $0xc,%esp
   132b8:	50                   	push   %eax
   132b9:	e8 31 b4 ff ff       	call   e6ef <iput>
   132be:	83 c4 10             	add    $0x10,%esp
			return NULL;
   132c1:	b8 00 00 00 00       	mov    $0x0,%eax
   132c6:	e9 8b 00 00 00       	jmp    13356 <get_dir+0x1d3>
		}
		inr = de->inode;										// 当前目录名部分的i节点号.
   132cb:	8b 44 24 04          	mov    0x4(%esp),%eax
   132cf:	0f b7 00             	movzwl (%eax),%eax
   132d2:	0f b7 c0             	movzwl %ax,%eax
   132d5:	89 44 24 0c          	mov    %eax,0xc(%esp)
		brelse(bh);
   132d9:	83 ec 0c             	sub    $0xc,%esp
   132dc:	ff 74 24 1c          	pushl  0x1c(%esp)
   132e0:	e8 ab c3 ff ff       	call   f690 <brelse>
   132e5:	83 c4 10             	add    $0x10,%esp
		dir = inode;
   132e8:	8b 44 24 34          	mov    0x34(%esp),%eax
   132ec:	89 44 24 08          	mov    %eax,0x8(%esp)
		if (!(inode = iget(dir->i_dev, inr))) {					// 取i节点内容.
   132f0:	8b 44 24 08          	mov    0x8(%esp),%eax
   132f4:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   132f8:	0f b7 c0             	movzwl %ax,%eax
   132fb:	83 ec 08             	sub    $0x8,%esp
   132fe:	ff 74 24 14          	pushl  0x14(%esp)
   13302:	50                   	push   %eax
   13303:	e8 79 b7 ff ff       	call   ea81 <iget>
   13308:	83 c4 10             	add    $0x10,%esp
   1330b:	89 44 24 34          	mov    %eax,0x34(%esp)
   1330f:	8b 44 24 34          	mov    0x34(%esp),%eax
   13313:	85 c0                	test   %eax,%eax
   13315:	75 16                	jne    1332d <get_dir+0x1aa>
			iput(dir);
   13317:	83 ec 0c             	sub    $0xc,%esp
   1331a:	ff 74 24 14          	pushl  0x14(%esp)
   1331e:	e8 cc b3 ff ff       	call   e6ef <iput>
   13323:	83 c4 10             	add    $0x10,%esp
			return NULL;
   13326:	b8 00 00 00 00       	mov    $0x0,%eax
   1332b:	eb 29                	jmp    13356 <get_dir+0x1d3>
		}
		if (!(inode = follow_link(dir, inode)))
   1332d:	8b 44 24 34          	mov    0x34(%esp),%eax
   13331:	83 ec 08             	sub    $0x8,%esp
   13334:	50                   	push   %eax
   13335:	ff 74 24 14          	pushl  0x14(%esp)
   13339:	e8 0b fd ff ff       	call   13049 <follow_link>
   1333e:	83 c4 10             	add    $0x10,%esp
   13341:	89 44 24 34          	mov    %eax,0x34(%esp)
   13345:	8b 44 24 34          	mov    0x34(%esp),%eax
   13349:	85 c0                	test   %eax,%eax
   1334b:	0f 85 a5 fe ff ff    	jne    131f6 <get_dir+0x73>
			return NULL;
   13351:	b8 00 00 00 00       	mov    $0x0,%eax
        }
}
   13356:	83 c4 2c             	add    $0x2c,%esp
   13359:	c3                   	ret    

0001335a <dir_namei>:
// base - 搜索起始目录的i节点.
// 返回:指定目录名最顶层的i节点指针和最顶层目录名称及长度.出错时返回NULL.
// 注意!!这里"最顶层目录"是指路径名中最靠近末端的目录.
static struct m_inode * dir_namei(const char * pathname,
	int * namelen, const char ** name, struct m_inode * base)
{
   1335a:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * dir;

	// 首先取得指定路径名最顶层目录的i节点.然后对路径名pathname进行搜索检测,查出最后一个'/'字符后面的名字字符串,计算其长度,并且
	// 返回最顶层目录的i节点指针.注意!如果路径名最后一个字符是斜杠字符'/',那么返回的目录名为空,并且长度为0.但返回的i节点指针仍然
	// 指向最后一个'/'字符前目录名的i节点.
	if (!(dir = get_dir(pathname, base)))					// base是指定的起始目录i节点.
   1335d:	83 ec 08             	sub    $0x8,%esp
   13360:	ff 74 24 34          	pushl  0x34(%esp)
   13364:	ff 74 24 2c          	pushl  0x2c(%esp)
   13368:	e8 16 fe ff ff       	call   13183 <get_dir>
   1336d:	83 c4 10             	add    $0x10,%esp
   13370:	89 44 24 08          	mov    %eax,0x8(%esp)
   13374:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   13379:	75 07                	jne    13382 <dir_namei+0x28>
		return NULL;
   1337b:	b8 00 00 00 00       	mov    $0x0,%eax
   13380:	eb 5e                	jmp    133e0 <dir_namei+0x86>
	basename = pathname;
   13382:	8b 44 24 20          	mov    0x20(%esp),%eax
   13386:	89 44 24 0c          	mov    %eax,0xc(%esp)
	while (c = get_fs_byte(pathname++))
   1338a:	eb 0f                	jmp    1339b <dir_namei+0x41>
		if (c == '/')
   1338c:	80 7c 24 07 2f       	cmpb   $0x2f,0x7(%esp)
   13391:	75 08                	jne    1339b <dir_namei+0x41>
			basename = pathname;
   13393:	8b 44 24 20          	mov    0x20(%esp),%eax
   13397:	89 44 24 0c          	mov    %eax,0xc(%esp)
	// 返回最顶层目录的i节点指针.注意!如果路径名最后一个字符是斜杠字符'/',那么返回的目录名为空,并且长度为0.但返回的i节点指针仍然
	// 指向最后一个'/'字符前目录名的i节点.
	if (!(dir = get_dir(pathname, base)))					// base是指定的起始目录i节点.
		return NULL;
	basename = pathname;
	while (c = get_fs_byte(pathname++))
   1339b:	8b 44 24 20          	mov    0x20(%esp),%eax
   1339f:	8d 50 01             	lea    0x1(%eax),%edx
   133a2:	89 54 24 20          	mov    %edx,0x20(%esp)
   133a6:	83 ec 0c             	sub    $0xc,%esp
   133a9:	50                   	push   %eax
   133aa:	e8 a9 f6 ff ff       	call   12a58 <get_fs_byte>
   133af:	83 c4 10             	add    $0x10,%esp
   133b2:	88 44 24 07          	mov    %al,0x7(%esp)
   133b6:	80 7c 24 07 00       	cmpb   $0x0,0x7(%esp)
   133bb:	75 cf                	jne    1338c <dir_namei+0x32>
		if (c == '/')
			basename = pathname;
	*namelen = pathname - basename - 1;
   133bd:	8b 54 24 20          	mov    0x20(%esp),%edx
   133c1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   133c5:	29 c2                	sub    %eax,%edx
   133c7:	89 d0                	mov    %edx,%eax
   133c9:	8d 50 ff             	lea    -0x1(%eax),%edx
   133cc:	8b 44 24 24          	mov    0x24(%esp),%eax
   133d0:	89 10                	mov    %edx,(%eax)
	*name = basename;
   133d2:	8b 44 24 28          	mov    0x28(%esp),%eax
   133d6:	8b 54 24 0c          	mov    0xc(%esp),%edx
   133da:	89 10                	mov    %edx,(%eax)
	return dir;
   133dc:	8b 44 24 08          	mov    0x8(%esp),%eax
}
   133e0:	83 c4 1c             	add    $0x1c,%esp
   133e3:	c3                   	ret    

000133e4 <_namei>:

// 取指定路径名的i节点内部函数.
// 参数:pathname - 路径名;base - 搜索起点目录i节点;follow_links - 是否跟随符号链接的标志,1 - 需要,0 不需要.
struct m_inode * _namei(const char * pathname, struct m_inode * base,
	int follow_links)
{
   133e4:	83 ec 2c             	sub    $0x2c,%esp
	struct buffer_head * bh;
	struct dir_entry * de;

	// 首先查找指定路径名中最顶层目录的目录名并得到其i节点.若不存在,则返回NULL退出.如果返回的最顶层名字的长度是0,则表示该路径名以一个目录名为
	// 最后一项.因此说明我们已经找到对应目录的i节点,可以直接返回该i节点退出.
	if (!(base = dir_namei(pathname, &namelen, &basename, base)))
   133e7:	8b 44 24 34          	mov    0x34(%esp),%eax
   133eb:	50                   	push   %eax
   133ec:	8d 44 24 14          	lea    0x14(%esp),%eax
   133f0:	50                   	push   %eax
   133f1:	8d 44 24 14          	lea    0x14(%esp),%eax
   133f5:	50                   	push   %eax
   133f6:	ff 74 24 3c          	pushl  0x3c(%esp)
   133fa:	e8 5b ff ff ff       	call   1335a <dir_namei>
   133ff:	83 c4 10             	add    $0x10,%esp
   13402:	89 44 24 34          	mov    %eax,0x34(%esp)
   13406:	8b 44 24 34          	mov    0x34(%esp),%eax
   1340a:	85 c0                	test   %eax,%eax
   1340c:	75 0a                	jne    13418 <_namei+0x34>
		return NULL;
   1340e:	b8 00 00 00 00       	mov    $0x0,%eax
   13413:	e9 0e 01 00 00       	jmp    13526 <_namei+0x142>
	if (!namelen)										/* special case: '/usr/' etc */
   13418:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1341c:	85 c0                	test   %eax,%eax
   1341e:	75 09                	jne    13429 <_namei+0x45>
		return base;									/* 对应于'/usr/'等情况 */
   13420:	8b 44 24 34          	mov    0x34(%esp),%eax
   13424:	e9 fd 00 00 00       	jmp    13526 <_namei+0x142>
	// 然后在返回的顶层目录中寻找指定文件名目录项的i节点.注意!因为如果最后也是一个目录名,但其后没有加'/',则不会返回该最后目录的i节点!例如:/usr/src/linux,
	// 将只返回src/目录名的i节点.因为函数dir_namei()将不以'/'结束的最后一个名字当作一个文件名来看待,因此这里需要单独对这种情况使用寻找目录项i节点函数
	// find_entry()进行处理.此时de中含有寻找到的目录项指针,而base是包含该目录项的目录的i节点指针.
	bh = find_entry(&base, basename, namelen, &de);
   13429:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1342d:	8b 44 24 10          	mov    0x10(%esp),%eax
   13431:	8d 4c 24 08          	lea    0x8(%esp),%ecx
   13435:	51                   	push   %ecx
   13436:	52                   	push   %edx
   13437:	50                   	push   %eax
   13438:	8d 44 24 40          	lea    0x40(%esp),%eax
   1343c:	50                   	push   %eax
   1343d:	e8 9b f7 ff ff       	call   12bdd <find_entry>
   13442:	83 c4 10             	add    $0x10,%esp
   13445:	89 44 24 18          	mov    %eax,0x18(%esp)
	if (!bh) {
   13449:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   1344e:	75 1a                	jne    1346a <_namei+0x86>
		iput(base);
   13450:	8b 44 24 34          	mov    0x34(%esp),%eax
   13454:	83 ec 0c             	sub    $0xc,%esp
   13457:	50                   	push   %eax
   13458:	e8 92 b2 ff ff       	call   e6ef <iput>
   1345d:	83 c4 10             	add    $0x10,%esp
		return NULL;
   13460:	b8 00 00 00 00       	mov    $0x0,%eax
   13465:	e9 bc 00 00 00       	jmp    13526 <_namei+0x142>
	}
	// 接着取该目录项的i节点号,并释放包含该目录项的高速缓冲块并放回目录i节点.然后取对应节点号的i节点,修改其被访问时间为当前时间,并置已修改标志.最后返回
	// 该i节点指针inode.如果当前处理的目录项是一个符号链接名,则使用follow_link()得到其指向的目录项名的i节点.
	inr = de->inode;
   1346a:	8b 44 24 08          	mov    0x8(%esp),%eax
   1346e:	0f b7 00             	movzwl (%eax),%eax
   13471:	0f b7 c0             	movzwl %ax,%eax
   13474:	89 44 24 14          	mov    %eax,0x14(%esp)
	brelse(bh);
   13478:	83 ec 0c             	sub    $0xc,%esp
   1347b:	ff 74 24 24          	pushl  0x24(%esp)
   1347f:	e8 0c c2 ff ff       	call   f690 <brelse>
   13484:	83 c4 10             	add    $0x10,%esp
	if (!(inode = iget(base->i_dev, inr))) {
   13487:	8b 44 24 34          	mov    0x34(%esp),%eax
   1348b:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   1348f:	0f b7 c0             	movzwl %ax,%eax
   13492:	83 ec 08             	sub    $0x8,%esp
   13495:	ff 74 24 1c          	pushl  0x1c(%esp)
   13499:	50                   	push   %eax
   1349a:	e8 e2 b5 ff ff       	call   ea81 <iget>
   1349f:	83 c4 10             	add    $0x10,%esp
   134a2:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   134a6:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   134ab:	75 17                	jne    134c4 <_namei+0xe0>
		iput(base);
   134ad:	8b 44 24 34          	mov    0x34(%esp),%eax
   134b1:	83 ec 0c             	sub    $0xc,%esp
   134b4:	50                   	push   %eax
   134b5:	e8 35 b2 ff ff       	call   e6ef <iput>
   134ba:	83 c4 10             	add    $0x10,%esp
		return NULL;
   134bd:	b8 00 00 00 00       	mov    $0x0,%eax
   134c2:	eb 62                	jmp    13526 <_namei+0x142>
	}
	if (follow_links)
   134c4:	83 7c 24 38 00       	cmpl   $0x0,0x38(%esp)
   134c9:	74 1a                	je     134e5 <_namei+0x101>
		inode = follow_link(base, inode);
   134cb:	8b 44 24 34          	mov    0x34(%esp),%eax
   134cf:	83 ec 08             	sub    $0x8,%esp
   134d2:	ff 74 24 24          	pushl  0x24(%esp)
   134d6:	50                   	push   %eax
   134d7:	e8 6d fb ff ff       	call   13049 <follow_link>
   134dc:	83 c4 10             	add    $0x10,%esp
   134df:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   134e3:	eb 10                	jmp    134f5 <_namei+0x111>
	else
		iput(base);
   134e5:	8b 44 24 34          	mov    0x34(%esp),%eax
   134e9:	83 ec 0c             	sub    $0xc,%esp
   134ec:	50                   	push   %eax
   134ed:	e8 fd b1 ff ff       	call   e6ef <iput>
   134f2:	83 c4 10             	add    $0x10,%esp
	inode->i_atime = CURRENT_TIME;
   134f5:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   134fa:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
   13500:	01 d0                	add    %edx,%eax
   13502:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   13507:	f7 e2                	mul    %edx
   13509:	c1 ea 05             	shr    $0x5,%edx
   1350c:	a1 04 eb 02 00       	mov    0x2eb04,%eax
   13511:	01 c2                	add    %eax,%edx
   13513:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   13517:	89 50 28             	mov    %edx,0x28(%eax)
	inode->i_dirt = 1;
   1351a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1351e:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	return inode;
   13522:	8b 44 24 1c          	mov    0x1c(%esp),%eax
}
   13526:	83 c4 2c             	add    $0x2c,%esp
   13529:	c3                   	ret    

0001352a <lnamei>:

// 取指定路径名的i节点，不跟随符号链接。
// 参数：pathname - 路径名。
// 返回：对应的i节点。
struct m_inode * lnamei(const char * pathname)
{
   1352a:	83 ec 0c             	sub    $0xc,%esp
	return _namei(pathname, NULL, 0);
   1352d:	83 ec 04             	sub    $0x4,%esp
   13530:	6a 00                	push   $0x0
   13532:	6a 00                	push   $0x0
   13534:	ff 74 24 1c          	pushl  0x1c(%esp)
   13538:	e8 a7 fe ff ff       	call   133e4 <_namei>
   1353d:	83 c4 10             	add    $0x10,%esp
}
   13540:	83 c4 0c             	add    $0xc,%esp
   13543:	c3                   	ret    

00013544 <namei>:
 */
// 取指定路径名的i节点,跟随符号链接.
// 参数:pathname - 路径名.
// 返回:对应的i节点.
struct m_inode * namei(const char * pathname)
{
   13544:	83 ec 0c             	sub    $0xc,%esp
	return _namei(pathname, NULL, 1);
   13547:	83 ec 04             	sub    $0x4,%esp
   1354a:	6a 01                	push   $0x1
   1354c:	6a 00                	push   $0x0
   1354e:	ff 74 24 1c          	pushl  0x1c(%esp)
   13552:	e8 8d fe ff ff       	call   133e4 <_namei>
   13557:	83 c4 10             	add    $0x10,%esp
}
   1355a:	83 c4 0c             	add    $0xc,%esp
   1355d:	c3                   	ret    

0001355e <open_namei>:
// 执行)等等.对于新创建的文件,这些属性只应用于将来对文件的访问,创建了只读文件的打开调用也将返回一个读写的文件句柄.如果调用
// 操作成功,则返回文件句柄(文件描述符),否则返回出错码.参见sys/stat.h,fcntl.h.
// 返回:成功返回0,否则返回出错码;res_inode - 返回对应文件路径名的i节点指针.
int open_namei(const char * pathname, int flag, int mode,
	struct m_inode ** res_inode)
{
   1355e:	53                   	push   %ebx
   1355f:	83 ec 28             	sub    $0x28,%esp
	struct buffer_head * bh;
	struct dir_entry * de;

	// 首先对函数参数进行合理的处理.如果文件访问模式标志是只读(O),但是文件截零标志O_TRUNC却置位了,则在文件打开标志中添加只写标志
	// O_WRONLY.这样做的原因是由于截零标志O_TRUNC必须在文件可写情况下有效.
	if ((flag & O_TRUNC) && !(flag & O_ACCMODE))
   13562:	8b 44 24 34          	mov    0x34(%esp),%eax
   13566:	25 00 02 00 00       	and    $0x200,%eax
   1356b:	85 c0                	test   %eax,%eax
   1356d:	74 10                	je     1357f <open_namei+0x21>
   1356f:	8b 44 24 34          	mov    0x34(%esp),%eax
   13573:	83 e0 03             	and    $0x3,%eax
   13576:	85 c0                	test   %eax,%eax
   13578:	75 05                	jne    1357f <open_namei+0x21>
		flag |= O_WRONLY;
   1357a:	83 4c 24 34 01       	orl    $0x1,0x34(%esp)
	// 使用当前进程的文件访问许可屏蔽码,屏蔽掉给定模式中的相应位,并添上普通文件标志I_REGULAR.
	// 该标志将用于打开的文件不存在而需要创建文件时,作为新文件的默认属性
	mode &= 0777 & ~current->umask;
   1357f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   13584:	0f b7 80 30 03 00 00 	movzwl 0x330(%eax),%eax
   1358b:	0f b7 c0             	movzwl %ax,%eax
   1358e:	f7 d0                	not    %eax
   13590:	25 ff 01 00 00       	and    $0x1ff,%eax
   13595:	21 44 24 38          	and    %eax,0x38(%esp)
	mode |= I_REGULAR;													// 常规文件标志.见参见include/const.h文件.
   13599:	81 4c 24 38 00 80 00 	orl    $0x8000,0x38(%esp)
   135a0:	00 
	// 然后根据指定的路径名寻找到对应的i节点,以及最顶端目录名及其长度.此时如果最顶端目录名长度为0(例如'/usr/'这种路径名的情况),那么
	// 若操作不是读写,创建和文件长度截0,则表示是在打开一个目录名文件操作.于是直接返回该目录的i节点并返回0退出.否则说明进程操作非法,于是
	// 放回该i节点,返回出错码.
	if (!(dir = dir_namei(pathname, &namelen, &basename, NULL)))
   135a1:	6a 00                	push   $0x0
   135a3:	8d 44 24 10          	lea    0x10(%esp),%eax
   135a7:	50                   	push   %eax
   135a8:	8d 44 24 10          	lea    0x10(%esp),%eax
   135ac:	50                   	push   %eax
   135ad:	ff 74 24 3c          	pushl  0x3c(%esp)
   135b1:	e8 a4 fd ff ff       	call   1335a <dir_namei>
   135b6:	83 c4 10             	add    $0x10,%esp
   135b9:	89 44 24 04          	mov    %eax,0x4(%esp)
   135bd:	8b 44 24 04          	mov    0x4(%esp),%eax
   135c1:	85 c0                	test   %eax,%eax
   135c3:	75 0a                	jne    135cf <open_namei+0x71>
		return -ENOENT;
   135c5:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   135ca:	e9 08 03 00 00       	jmp    138d7 <open_namei+0x379>
	// 文件名字为空，则返回
	if (!namelen) {														/* special case: '/usr/' etc */
   135cf:	8b 44 24 08          	mov    0x8(%esp),%eax
   135d3:	85 c0                	test   %eax,%eax
   135d5:	75 3b                	jne    13612 <open_namei+0xb4>
		if (!(flag & (O_ACCMODE | O_CREAT | O_TRUNC))) {
   135d7:	8b 44 24 34          	mov    0x34(%esp),%eax
   135db:	25 43 02 00 00       	and    $0x243,%eax
   135e0:	85 c0                	test   %eax,%eax
   135e2:	75 14                	jne    135f8 <open_namei+0x9a>
			*res_inode = dir;
   135e4:	8b 54 24 04          	mov    0x4(%esp),%edx
   135e8:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   135ec:	89 10                	mov    %edx,(%eax)
			return 0;
   135ee:	b8 00 00 00 00       	mov    $0x0,%eax
   135f3:	e9 df 02 00 00       	jmp    138d7 <open_namei+0x379>
		}
		iput(dir);
   135f8:	8b 44 24 04          	mov    0x4(%esp),%eax
   135fc:	83 ec 0c             	sub    $0xc,%esp
   135ff:	50                   	push   %eax
   13600:	e8 ea b0 ff ff       	call   e6ef <iput>
   13605:	83 c4 10             	add    $0x10,%esp
		return -EISDIR;
   13608:	b8 eb ff ff ff       	mov    $0xffffffeb,%eax
   1360d:	e9 c5 02 00 00       	jmp    138d7 <open_namei+0x379>
	}
	// 接着根据上面得到的最顶层目录名的i节点dir,在其中查找取得路径名字符串中最后的文件名对应的目录项结构de,并同时得到该目录项所在的高速缓冲
	// 区指针.如果该高速缓冲指针为NULL,则表示没有找到对应文件名的目录项,因此只可能是创建文件操作.此时如果不是创建文件,则放回该目录的i节点,返回
	// 出错号退出.如果用户在该目录没有写的权力,则放回该目录的i节点,返回出错号退出.
	bh = find_entry(&dir, basename, namelen, &de);
   13612:	8b 54 24 08          	mov    0x8(%esp),%edx
   13616:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1361a:	89 e1                	mov    %esp,%ecx
   1361c:	51                   	push   %ecx
   1361d:	52                   	push   %edx
   1361e:	50                   	push   %eax
   1361f:	8d 44 24 10          	lea    0x10(%esp),%eax
   13623:	50                   	push   %eax
   13624:	e8 b4 f5 ff ff       	call   12bdd <find_entry>
   13629:	83 c4 10             	add    $0x10,%esp
   1362c:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!bh) {
   13630:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   13635:	0f 85 63 01 00 00    	jne    1379e <open_namei+0x240>
		if (!(flag & O_CREAT)) {                						// 不是创建文件，放回i节点
   1363b:	8b 44 24 34          	mov    0x34(%esp),%eax
   1363f:	83 e0 40             	and    $0x40,%eax
   13642:	85 c0                	test   %eax,%eax
   13644:	75 1a                	jne    13660 <open_namei+0x102>
			iput(dir);
   13646:	8b 44 24 04          	mov    0x4(%esp),%eax
   1364a:	83 ec 0c             	sub    $0xc,%esp
   1364d:	50                   	push   %eax
   1364e:	e8 9c b0 ff ff       	call   e6ef <iput>
   13653:	83 c4 10             	add    $0x10,%esp
			return -ENOENT;
   13656:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   1365b:	e9 77 02 00 00       	jmp    138d7 <open_namei+0x379>
		}
		if (!permission(dir, MAY_WRITE)) {       						// 没有写权限，放回i节点
   13660:	8b 44 24 04          	mov    0x4(%esp),%eax
   13664:	83 ec 08             	sub    $0x8,%esp
   13667:	6a 02                	push   $0x2
   13669:	50                   	push   %eax
   1366a:	e8 3a f4 ff ff       	call   12aa9 <permission>
   1366f:	83 c4 10             	add    $0x10,%esp
   13672:	85 c0                	test   %eax,%eax
   13674:	75 1a                	jne    13690 <open_namei+0x132>
			iput(dir);
   13676:	8b 44 24 04          	mov    0x4(%esp),%eax
   1367a:	83 ec 0c             	sub    $0xc,%esp
   1367d:	50                   	push   %eax
   1367e:	e8 6c b0 ff ff       	call   e6ef <iput>
   13683:	83 c4 10             	add    $0x10,%esp
			return -EACCES;
   13686:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
   1368b:	e9 47 02 00 00       	jmp    138d7 <open_namei+0x379>
		}
		// 现在我们确定了是创建操作并且有写操作许可。因此我们就在目录i节点对应设备上申请一个新的i节点给路径名上指定的文件使用。
		// 若失败则放回目录的i节点，并返回没有空间出错码。否则使用该新i节点，对其进行初始设置：置节点的用户id；对应节点访问模式；
		// 置已修改标志。然后并在指定目录dir中添加一个新目录项。
		inode = new_inode(dir->i_dev);
   13690:	8b 44 24 04          	mov    0x4(%esp),%eax
   13694:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13698:	0f b7 c0             	movzwl %ax,%eax
   1369b:	83 ec 0c             	sub    $0xc,%esp
   1369e:	50                   	push   %eax
   1369f:	e8 1a 1b 00 00       	call   151be <new_inode>
   136a4:	83 c4 10             	add    $0x10,%esp
   136a7:	89 44 24 18          	mov    %eax,0x18(%esp)
		if (!inode) {
   136ab:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   136b0:	75 1a                	jne    136cc <open_namei+0x16e>
			iput(dir);
   136b2:	8b 44 24 04          	mov    0x4(%esp),%eax
   136b6:	83 ec 0c             	sub    $0xc,%esp
   136b9:	50                   	push   %eax
   136ba:	e8 30 b0 ff ff       	call   e6ef <iput>
   136bf:	83 c4 10             	add    $0x10,%esp
			return -ENOSPC;
   136c2:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   136c7:	e9 0b 02 00 00       	jmp    138d7 <open_namei+0x379>
		}
		inode->i_uid = current->euid;
   136cc:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   136d1:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
   136d8:	8b 44 24 18          	mov    0x18(%esp),%eax
   136dc:	66 89 50 02          	mov    %dx,0x2(%eax)
		inode->i_mode = mode;
   136e0:	8b 44 24 38          	mov    0x38(%esp),%eax
   136e4:	89 c2                	mov    %eax,%edx
   136e6:	8b 44 24 18          	mov    0x18(%esp),%eax
   136ea:	66 89 10             	mov    %dx,(%eax)
		inode->i_dirt = 1;
   136ed:	8b 44 24 18          	mov    0x18(%esp),%eax
   136f1:	c6 40 37 01          	movb   $0x1,0x37(%eax)
		bh = add_entry(dir, basename, namelen, &de);
   136f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   136f9:	8b 54 24 0c          	mov    0xc(%esp),%edx
   136fd:	8b 44 24 04          	mov    0x4(%esp),%eax
   13701:	89 e3                	mov    %esp,%ebx
   13703:	53                   	push   %ebx
   13704:	51                   	push   %ecx
   13705:	52                   	push   %edx
   13706:	50                   	push   %eax
   13707:	e8 0f f7 ff ff       	call   12e1b <add_entry>
   1370c:	83 c4 10             	add    $0x10,%esp
   1370f:	89 44 24 1c          	mov    %eax,0x1c(%esp)
		// 如果返回的应该含有新目录项的调整缓冲区指针为NULL，则表示添加目录项操作失败。于是将该新i节点的引用连接计数减1,放回该
		// i节点与目录的i节点并返回出错码退出。否则说明添加目录项操作成功。于是我们来设置该新目录项的一些初始值：置i节点号为新申
		// 请到的i节点的号码；并置高速缓冲区修改标志。然后释放该高速缓冲区，放回目录的i节点。返回新目录项的i节点指针，并成功退出。
		if (!bh) {
   13713:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   13718:	75 3b                	jne    13755 <open_namei+0x1f7>
			inode->i_nlinks--;
   1371a:	8b 44 24 18          	mov    0x18(%esp),%eax
   1371e:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   13722:	8d 50 ff             	lea    -0x1(%eax),%edx
   13725:	8b 44 24 18          	mov    0x18(%esp),%eax
   13729:	88 50 0d             	mov    %dl,0xd(%eax)
			iput(inode);
   1372c:	83 ec 0c             	sub    $0xc,%esp
   1372f:	ff 74 24 24          	pushl  0x24(%esp)
   13733:	e8 b7 af ff ff       	call   e6ef <iput>
   13738:	83 c4 10             	add    $0x10,%esp
			iput(dir);
   1373b:	8b 44 24 04          	mov    0x4(%esp),%eax
   1373f:	83 ec 0c             	sub    $0xc,%esp
   13742:	50                   	push   %eax
   13743:	e8 a7 af ff ff       	call   e6ef <iput>
   13748:	83 c4 10             	add    $0x10,%esp
			return -ENOSPC;
   1374b:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   13750:	e9 82 01 00 00       	jmp    138d7 <open_namei+0x379>
		}
		de->inode = inode->i_num;
   13755:	8b 04 24             	mov    (%esp),%eax
   13758:	8b 54 24 18          	mov    0x18(%esp),%edx
   1375c:	0f b7 52 32          	movzwl 0x32(%edx),%edx
   13760:	66 89 10             	mov    %dx,(%eax)
		bh->b_dirt = 1;
   13763:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   13767:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
		brelse(bh);
   1376b:	83 ec 0c             	sub    $0xc,%esp
   1376e:	ff 74 24 28          	pushl  0x28(%esp)
   13772:	e8 19 bf ff ff       	call   f690 <brelse>
   13777:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   1377a:	8b 44 24 04          	mov    0x4(%esp),%eax
   1377e:	83 ec 0c             	sub    $0xc,%esp
   13781:	50                   	push   %eax
   13782:	e8 68 af ff ff       	call   e6ef <iput>
   13787:	83 c4 10             	add    $0x10,%esp
		*res_inode = inode;
   1378a:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   1378e:	8b 54 24 18          	mov    0x18(%esp),%edx
   13792:	89 10                	mov    %edx,(%eax)
		return 0;
   13794:	b8 00 00 00 00       	mov    $0x0,%eax
   13799:	e9 39 01 00 00       	jmp    138d7 <open_namei+0x379>
    }
	// 若上面(411行)在目录中取文件名对应目录项结构的操作成功(即bh不为NULL),则说明指定打开的文件已经存在.于是取出该目录项的i节点和其所在设备号,并释放
	// 该高速缓冲区以及放回目录的i节点.如果此时独占操作标志O_EXCL置位,但现在文件已经存在,则返回文件已存在出错码退出.
	inr = de->inode;
   1379e:	8b 04 24             	mov    (%esp),%eax
   137a1:	0f b7 00             	movzwl (%eax),%eax
   137a4:	0f b7 c0             	movzwl %ax,%eax
   137a7:	89 44 24 14          	mov    %eax,0x14(%esp)
	dev = dir->i_dev;
   137ab:	8b 44 24 04          	mov    0x4(%esp),%eax
   137af:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   137b3:	0f b7 c0             	movzwl %ax,%eax
   137b6:	89 44 24 10          	mov    %eax,0x10(%esp)
	brelse(bh);
   137ba:	83 ec 0c             	sub    $0xc,%esp
   137bd:	ff 74 24 28          	pushl  0x28(%esp)
   137c1:	e8 ca be ff ff       	call   f690 <brelse>
   137c6:	83 c4 10             	add    $0x10,%esp
	if (flag & O_EXCL) {
   137c9:	8b 44 24 34          	mov    0x34(%esp),%eax
   137cd:	25 80 00 00 00       	and    $0x80,%eax
   137d2:	85 c0                	test   %eax,%eax
   137d4:	74 1a                	je     137f0 <open_namei+0x292>
		iput(dir);
   137d6:	8b 44 24 04          	mov    0x4(%esp),%eax
   137da:	83 ec 0c             	sub    $0xc,%esp
   137dd:	50                   	push   %eax
   137de:	e8 0c af ff ff       	call   e6ef <iput>
   137e3:	83 c4 10             	add    $0x10,%esp
		return -EEXIST;
   137e6:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
   137eb:	e9 e7 00 00 00       	jmp    138d7 <open_namei+0x379>
	}
	// 然后我们读取该目录项的i节点内容.若该i节点是一个目录的i节点并且访问模式是只写或读写,或者没有访问的许可权限,则放回该i节点,返回访问权限出错码退出.
	if (!(inode = follow_link(dir, iget(dev, inr))))
   137f0:	83 ec 08             	sub    $0x8,%esp
   137f3:	ff 74 24 1c          	pushl  0x1c(%esp)
   137f7:	ff 74 24 1c          	pushl  0x1c(%esp)
   137fb:	e8 81 b2 ff ff       	call   ea81 <iget>
   13800:	83 c4 10             	add    $0x10,%esp
   13803:	89 c2                	mov    %eax,%edx
   13805:	8b 44 24 04          	mov    0x4(%esp),%eax
   13809:	83 ec 08             	sub    $0x8,%esp
   1380c:	52                   	push   %edx
   1380d:	50                   	push   %eax
   1380e:	e8 36 f8 ff ff       	call   13049 <follow_link>
   13813:	83 c4 10             	add    $0x10,%esp
   13816:	89 44 24 18          	mov    %eax,0x18(%esp)
   1381a:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   1381f:	75 0a                	jne    1382b <open_namei+0x2cd>
		return -EACCES;
   13821:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
   13826:	e9 ac 00 00 00       	jmp    138d7 <open_namei+0x379>
	if ((S_ISDIR(inode->i_mode) && (flag & O_ACCMODE)) ||
   1382b:	8b 44 24 18          	mov    0x18(%esp),%eax
   1382f:	0f b7 00             	movzwl (%eax),%eax
   13832:	0f b7 c0             	movzwl %ax,%eax
   13835:	25 00 f0 00 00       	and    $0xf000,%eax
   1383a:	3d 00 40 00 00       	cmp    $0x4000,%eax
   1383f:	75 0b                	jne    1384c <open_namei+0x2ee>
   13841:	8b 44 24 34          	mov    0x34(%esp),%eax
   13845:	83 e0 03             	and    $0x3,%eax
   13848:	85 c0                	test   %eax,%eax
   1384a:	75 25                	jne    13871 <open_namei+0x313>
	    !permission(inode, ACC_MODE(flag))) {
   1384c:	8b 44 24 34          	mov    0x34(%esp),%eax
   13850:	83 e0 03             	and    $0x3,%eax
   13853:	0f b6 80 40 3c 02 00 	movzbl 0x23c40(%eax),%eax
   1385a:	0f be c0             	movsbl %al,%eax
   1385d:	83 ec 08             	sub    $0x8,%esp
   13860:	50                   	push   %eax
   13861:	ff 74 24 24          	pushl  0x24(%esp)
   13865:	e8 3f f2 ff ff       	call   12aa9 <permission>
   1386a:	83 c4 10             	add    $0x10,%esp
		return -EEXIST;
	}
	// 然后我们读取该目录项的i节点内容.若该i节点是一个目录的i节点并且访问模式是只写或读写,或者没有访问的许可权限,则放回该i节点,返回访问权限出错码退出.
	if (!(inode = follow_link(dir, iget(dev, inr))))
		return -EACCES;
	if ((S_ISDIR(inode->i_mode) && (flag & O_ACCMODE)) ||
   1386d:	85 c0                	test   %eax,%eax
   1386f:	75 16                	jne    13887 <open_namei+0x329>
	    !permission(inode, ACC_MODE(flag))) {
		iput(inode);
   13871:	83 ec 0c             	sub    $0xc,%esp
   13874:	ff 74 24 24          	pushl  0x24(%esp)
   13878:	e8 72 ae ff ff       	call   e6ef <iput>
   1387d:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   13880:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13885:	eb 50                	jmp    138d7 <open_namei+0x379>
	}
	// 接着我们更新该i节点的访问时间字段值为当前时间.如果设立了截0标志,则将该i节点的文件长度截为0.最后返回该目录项i节点的指针.并返回0(成功).
	inode->i_atime = CURRENT_TIME;
   13887:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   1388c:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
   13892:	01 d0                	add    %edx,%eax
   13894:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   13899:	f7 e2                	mul    %edx
   1389b:	c1 ea 05             	shr    $0x5,%edx
   1389e:	a1 04 eb 02 00       	mov    0x2eb04,%eax
   138a3:	01 c2                	add    %eax,%edx
   138a5:	8b 44 24 18          	mov    0x18(%esp),%eax
   138a9:	89 50 28             	mov    %edx,0x28(%eax)
	if (flag & O_TRUNC)
   138ac:	8b 44 24 34          	mov    0x34(%esp),%eax
   138b0:	25 00 02 00 00       	and    $0x200,%eax
   138b5:	85 c0                	test   %eax,%eax
   138b7:	74 0f                	je     138c8 <open_namei+0x36a>
		truncate(inode);
   138b9:	83 ec 0c             	sub    $0xc,%esp
   138bc:	ff 74 24 24          	pushl  0x24(%esp)
   138c0:	e8 03 20 00 00       	call   158c8 <truncate>
   138c5:	83 c4 10             	add    $0x10,%esp
	*res_inode = inode;
   138c8:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   138cc:	8b 54 24 18          	mov    0x18(%esp),%edx
   138d0:	89 10                	mov    %edx,(%eax)
	return 0;
   138d2:	b8 00 00 00 00       	mov    $0x0,%eax
}
   138d7:	83 c4 28             	add    $0x28,%esp
   138da:	5b                   	pop    %ebx
   138db:	c3                   	ret    

000138dc <sys_mknod>:

// 创建一个设备特殊文件或普通文件节点（node）。
// 该函数创建名称为filename，由mode和dev指定的文件系统节点（普通文件、设备特殊文件或命名管道）。
// 参数：filename - 路径名；mode - 指定使用许可以及所创建节点的类型；dev - 设备号。
int sys_mknod(const char * filename, int mode, int dev)
{
   138dc:	53                   	push   %ebx
   138dd:	83 ec 28             	sub    $0x28,%esp
	struct buffer_head * bh;
	struct dir_entry * de;

	// 首先检查操作许可和参数的有效性并取路径名中顶层目录的i节点。如果不是超级用户，则返回访问许可出错码。
	// 如果不是超级用户，则返回访问许可出错码。
	if (!suser())
   138e0:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   138e5:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
   138ec:	66 85 c0             	test   %ax,%ax
   138ef:	74 0a                	je     138fb <sys_mknod+0x1f>
		return -EPERM;
   138f1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   138f6:	e9 21 02 00 00       	jmp    13b1c <sys_mknod+0x240>
	// 如果找不到对应路径名中顶层目录的i节点，则返回出错码。
	if (!(dir = dir_namei(filename, &namelen, &basename, NULL)))
   138fb:	6a 00                	push   $0x0
   138fd:	8d 44 24 18          	lea    0x18(%esp),%eax
   13901:	50                   	push   %eax
   13902:	8d 44 24 18          	lea    0x18(%esp),%eax
   13906:	50                   	push   %eax
   13907:	ff 74 24 3c          	pushl  0x3c(%esp)
   1390b:	e8 4a fa ff ff       	call   1335a <dir_namei>
   13910:	83 c4 10             	add    $0x10,%esp
   13913:	89 44 24 0c          	mov    %eax,0xc(%esp)
   13917:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1391b:	85 c0                	test   %eax,%eax
   1391d:	75 0a                	jne    13929 <sys_mknod+0x4d>
		return -ENOENT;
   1391f:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   13924:	e9 f3 01 00 00       	jmp    13b1c <sys_mknod+0x240>
	// 如果最顶端的文件名长度为0，则说明给出的路径名最后没有指定文件名，放回该目录i节点，返回出错码退出。
	if (!namelen) {
   13929:	8b 44 24 10          	mov    0x10(%esp),%eax
   1392d:	85 c0                	test   %eax,%eax
   1392f:	75 1a                	jne    1394b <sys_mknod+0x6f>
		iput(dir);
   13931:	8b 44 24 0c          	mov    0xc(%esp),%eax
   13935:	83 ec 0c             	sub    $0xc,%esp
   13938:	50                   	push   %eax
   13939:	e8 b1 ad ff ff       	call   e6ef <iput>
   1393e:	83 c4 10             	add    $0x10,%esp
		return -ENOENT;
   13941:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   13946:	e9 d1 01 00 00       	jmp    13b1c <sys_mknod+0x240>
	}
	// 如果在该目录中没有写的权限，则放回该目录的i节点，返回访问许可出错码退出。
	if (!permission(dir, MAY_WRITE)) {
   1394b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1394f:	83 ec 08             	sub    $0x8,%esp
   13952:	6a 02                	push   $0x2
   13954:	50                   	push   %eax
   13955:	e8 4f f1 ff ff       	call   12aa9 <permission>
   1395a:	83 c4 10             	add    $0x10,%esp
   1395d:	85 c0                	test   %eax,%eax
   1395f:	75 1a                	jne    1397b <sys_mknod+0x9f>
		iput(dir);
   13961:	8b 44 24 0c          	mov    0xc(%esp),%eax
   13965:	83 ec 0c             	sub    $0xc,%esp
   13968:	50                   	push   %eax
   13969:	e8 81 ad ff ff       	call   e6ef <iput>
   1396e:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   13971:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13976:	e9 a1 01 00 00       	jmp    13b1c <sys_mknod+0x240>
	}
	// 然后我们搜索一下路径名指定的文件是否已经存在。若已经存在则不能创建同名文件节点。如果对应路径名上最后的文件名的
	// 目录项已经存在，则释放包含该目录项的缓冲区块并放回目录的i节点，返回文件已经存在的出错退出。
	bh = find_entry(&dir, basename, namelen, &de);
   1397b:	8b 54 24 10          	mov    0x10(%esp),%edx
   1397f:	8b 44 24 14          	mov    0x14(%esp),%eax
   13983:	8d 4c 24 08          	lea    0x8(%esp),%ecx
   13987:	51                   	push   %ecx
   13988:	52                   	push   %edx
   13989:	50                   	push   %eax
   1398a:	8d 44 24 18          	lea    0x18(%esp),%eax
   1398e:	50                   	push   %eax
   1398f:	e8 49 f2 ff ff       	call   12bdd <find_entry>
   13994:	83 c4 10             	add    $0x10,%esp
   13997:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (bh) {
   1399b:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   139a0:	74 29                	je     139cb <sys_mknod+0xef>
		brelse(bh);
   139a2:	83 ec 0c             	sub    $0xc,%esp
   139a5:	ff 74 24 28          	pushl  0x28(%esp)
   139a9:	e8 e2 bc ff ff       	call   f690 <brelse>
   139ae:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   139b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   139b5:	83 ec 0c             	sub    $0xc,%esp
   139b8:	50                   	push   %eax
   139b9:	e8 31 ad ff ff       	call   e6ef <iput>
   139be:	83 c4 10             	add    $0x10,%esp
		return -EEXIST;
   139c1:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
   139c6:	e9 51 01 00 00       	jmp    13b1c <sys_mknod+0x240>
	}
	// 否则我们就申请一个新的i节点，并设置该i节点的属性模式。
	inode = new_inode(dir->i_dev);
   139cb:	8b 44 24 0c          	mov    0xc(%esp),%eax
   139cf:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   139d3:	0f b7 c0             	movzwl %ax,%eax
   139d6:	83 ec 0c             	sub    $0xc,%esp
   139d9:	50                   	push   %eax
   139da:	e8 df 17 00 00       	call   151be <new_inode>
   139df:	83 c4 10             	add    $0x10,%esp
   139e2:	89 44 24 18          	mov    %eax,0x18(%esp)
	if (!inode) {
   139e6:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   139eb:	75 1a                	jne    13a07 <sys_mknod+0x12b>
		iput(dir);
   139ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
   139f1:	83 ec 0c             	sub    $0xc,%esp
   139f4:	50                   	push   %eax
   139f5:	e8 f5 ac ff ff       	call   e6ef <iput>
   139fa:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   139fd:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   13a02:	e9 15 01 00 00       	jmp    13b1c <sys_mknod+0x240>
	}
	inode->i_mode = mode;
   13a07:	8b 44 24 34          	mov    0x34(%esp),%eax
   13a0b:	89 c2                	mov    %eax,%edx
   13a0d:	8b 44 24 18          	mov    0x18(%esp),%eax
   13a11:	66 89 10             	mov    %dx,(%eax)
	// 如果要创建的是块设备文件或者是字符设备文件，则令i节点的直接逻辑块指针0等于设备号。即对于设备文件来说，
	// 其i节点的i_zone[0]中存放的是该设备文件所定义设备的设备号。
	if (S_ISBLK(mode) || S_ISCHR(mode))
   13a14:	8b 44 24 34          	mov    0x34(%esp),%eax
   13a18:	25 00 f0 00 00       	and    $0xf000,%eax
   13a1d:	3d 00 60 00 00       	cmp    $0x6000,%eax
   13a22:	74 10                	je     13a34 <sys_mknod+0x158>
   13a24:	8b 44 24 34          	mov    0x34(%esp),%eax
   13a28:	25 00 f0 00 00       	and    $0xf000,%eax
   13a2d:	3d 00 20 00 00       	cmp    $0x2000,%eax
   13a32:	75 0e                	jne    13a42 <sys_mknod+0x166>
		inode->i_zone[0] = dev;
   13a34:	8b 44 24 38          	mov    0x38(%esp),%eax
   13a38:	89 c2                	mov    %eax,%edx
   13a3a:	8b 44 24 18          	mov    0x18(%esp),%eax
   13a3e:	66 89 50 0e          	mov    %dx,0xe(%eax)
	// 设置该i节点的修改时间、访问时间为当前时间，并设置i节点已修改标志。
	inode->i_mtime = inode->i_atime = CURRENT_TIME;
   13a42:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   13a47:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
   13a4d:	01 d0                	add    %edx,%eax
   13a4f:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   13a54:	f7 e2                	mul    %edx
   13a56:	c1 ea 05             	shr    $0x5,%edx
   13a59:	a1 04 eb 02 00       	mov    0x2eb04,%eax
   13a5e:	01 c2                	add    %eax,%edx
   13a60:	8b 44 24 18          	mov    0x18(%esp),%eax
   13a64:	89 50 28             	mov    %edx,0x28(%eax)
   13a67:	8b 44 24 18          	mov    0x18(%esp),%eax
   13a6b:	8b 50 28             	mov    0x28(%eax),%edx
   13a6e:	8b 44 24 18          	mov    0x18(%esp),%eax
   13a72:	89 50 08             	mov    %edx,0x8(%eax)
	inode->i_dirt = 1;
   13a75:	8b 44 24 18          	mov    0x18(%esp),%eax
   13a79:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	// 接着为这个新的i节点在目录中新添加一个目录项。如果失败（包含该目录项的高速缓冲块指针为NULL），则放回目录的i节点；
	// 把所申请的i节点引用连接计数复位，并放回该i节点，返回出错码退出。
	bh = add_entry(dir, basename, namelen, &de);
   13a7d:	8b 4c 24 10          	mov    0x10(%esp),%ecx
   13a81:	8b 54 24 14          	mov    0x14(%esp),%edx
   13a85:	8b 44 24 0c          	mov    0xc(%esp),%eax
   13a89:	8d 5c 24 08          	lea    0x8(%esp),%ebx
   13a8d:	53                   	push   %ebx
   13a8e:	51                   	push   %ecx
   13a8f:	52                   	push   %edx
   13a90:	50                   	push   %eax
   13a91:	e8 85 f3 ff ff       	call   12e1b <add_entry>
   13a96:	83 c4 10             	add    $0x10,%esp
   13a99:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!bh) {
   13a9d:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   13aa2:	75 2e                	jne    13ad2 <sys_mknod+0x1f6>
		iput(dir);
   13aa4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   13aa8:	83 ec 0c             	sub    $0xc,%esp
   13aab:	50                   	push   %eax
   13aac:	e8 3e ac ff ff       	call   e6ef <iput>
   13ab1:	83 c4 10             	add    $0x10,%esp
		inode->i_nlinks = 0;
   13ab4:	8b 44 24 18          	mov    0x18(%esp),%eax
   13ab8:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
		iput(inode);
   13abc:	83 ec 0c             	sub    $0xc,%esp
   13abf:	ff 74 24 24          	pushl  0x24(%esp)
   13ac3:	e8 27 ac ff ff       	call   e6ef <iput>
   13ac8:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   13acb:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   13ad0:	eb 4a                	jmp    13b1c <sys_mknod+0x240>
	}
	// 现在添加目录项操作也成功了，于是我们来设置这个目录项内容。令该目录项的i节点字段等于新i节点号，并置高速缓冲区已修
	// 改标志，放回目录和新的i节点，释放高速缓冲区，最后返回0（成功）。
	de->inode = inode->i_num;
   13ad2:	8b 44 24 08          	mov    0x8(%esp),%eax
   13ad6:	8b 54 24 18          	mov    0x18(%esp),%edx
   13ada:	0f b7 52 32          	movzwl 0x32(%edx),%edx
   13ade:	66 89 10             	mov    %dx,(%eax)
	bh->b_dirt = 1;
   13ae1:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   13ae5:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	iput(dir);
   13ae9:	8b 44 24 0c          	mov    0xc(%esp),%eax
   13aed:	83 ec 0c             	sub    $0xc,%esp
   13af0:	50                   	push   %eax
   13af1:	e8 f9 ab ff ff       	call   e6ef <iput>
   13af6:	83 c4 10             	add    $0x10,%esp
	iput(inode);
   13af9:	83 ec 0c             	sub    $0xc,%esp
   13afc:	ff 74 24 24          	pushl  0x24(%esp)
   13b00:	e8 ea ab ff ff       	call   e6ef <iput>
   13b05:	83 c4 10             	add    $0x10,%esp
	brelse(bh);
   13b08:	83 ec 0c             	sub    $0xc,%esp
   13b0b:	ff 74 24 28          	pushl  0x28(%esp)
   13b0f:	e8 7c bb ff ff       	call   f690 <brelse>
   13b14:	83 c4 10             	add    $0x10,%esp
	return 0;
   13b17:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13b1c:	83 c4 28             	add    $0x28,%esp
   13b1f:	5b                   	pop    %ebx
   13b20:	c3                   	ret    

00013b21 <sys_mkdir>:

// 创建一个目录。
// 参数：pathname - 路径名；mode - 目录使用的权限属性。
// 返回：成功则返回0,否则返回出错码。
int sys_mkdir(const char * pathname, int mode)
{
   13b21:	53                   	push   %ebx
   13b22:	83 ec 28             	sub    $0x28,%esp
	struct m_inode * dir, * inode;
	struct buffer_head * bh, *dir_block;
	struct dir_entry * de;

	// 首先检查参数的有效性并取路径名中顶层目录的i节点。如果找不到对应路径名中顶层目录的i节点，则返回出错码。
	if (!(dir = dir_namei(pathname,&namelen,&basename, NULL)))
   13b25:	6a 00                	push   $0x0
   13b27:	8d 44 24 14          	lea    0x14(%esp),%eax
   13b2b:	50                   	push   %eax
   13b2c:	8d 44 24 14          	lea    0x14(%esp),%eax
   13b30:	50                   	push   %eax
   13b31:	ff 74 24 3c          	pushl  0x3c(%esp)
   13b35:	e8 20 f8 ff ff       	call   1335a <dir_namei>
   13b3a:	83 c4 10             	add    $0x10,%esp
   13b3d:	89 44 24 08          	mov    %eax,0x8(%esp)
   13b41:	8b 44 24 08          	mov    0x8(%esp),%eax
   13b45:	85 c0                	test   %eax,%eax
   13b47:	75 0a                	jne    13b53 <sys_mkdir+0x32>
		return -ENOENT;
   13b49:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   13b4e:	e9 63 03 00 00       	jmp    13eb6 <sys_mkdir+0x395>
	// 如果最顶端文件名长度为0,则说明给出的路径名最后没有指定文件名，放回该目录i节点，返回出错码退出。
	if (!namelen) {
   13b53:	8b 44 24 0c          	mov    0xc(%esp),%eax
   13b57:	85 c0                	test   %eax,%eax
   13b59:	75 1a                	jne    13b75 <sys_mkdir+0x54>
		iput(dir);
   13b5b:	8b 44 24 08          	mov    0x8(%esp),%eax
   13b5f:	83 ec 0c             	sub    $0xc,%esp
   13b62:	50                   	push   %eax
   13b63:	e8 87 ab ff ff       	call   e6ef <iput>
   13b68:	83 c4 10             	add    $0x10,%esp
		return -ENOENT;
   13b6b:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   13b70:	e9 41 03 00 00       	jmp    13eb6 <sys_mkdir+0x395>
	}
	// 如果在该目录中没有写的权限，则放回该目录i节点，返回访问许可出错码退出。
	// 如果不是超级用户，则返回访问许可出错码。
	if (!permission(dir, MAY_WRITE)) {
   13b75:	8b 44 24 08          	mov    0x8(%esp),%eax
   13b79:	83 ec 08             	sub    $0x8,%esp
   13b7c:	6a 02                	push   $0x2
   13b7e:	50                   	push   %eax
   13b7f:	e8 25 ef ff ff       	call   12aa9 <permission>
   13b84:	83 c4 10             	add    $0x10,%esp
   13b87:	85 c0                	test   %eax,%eax
   13b89:	75 1a                	jne    13ba5 <sys_mkdir+0x84>
		iput(dir);
   13b8b:	8b 44 24 08          	mov    0x8(%esp),%eax
   13b8f:	83 ec 0c             	sub    $0xc,%esp
   13b92:	50                   	push   %eax
   13b93:	e8 57 ab ff ff       	call   e6ef <iput>
   13b98:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   13b9b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13ba0:	e9 11 03 00 00       	jmp    13eb6 <sys_mkdir+0x395>
	}
	// 然后我们搜索一下路径名指定的目录名是否已经存在。若已经存在则不能创建同名目录节点。如果对应路径名上最后的目录名的目录
	// 项已经存在，则释放包含该目录项的缓冲区块并放回目录的i节点，返回文件已经存在 的出错码退出。否则我们就申请一个新的i节
	// 点，并设置该i节点的属性模式：置该新i节点对应的文件长度为32字节（2个目录项的大小）、置节点已修改标志，以及节点的修改
	// 时间和访问时间。2个目录项分别用于'.'和'..'目录。
	bh = find_entry(&dir, basename, namelen, &de);
   13ba5:	8b 54 24 0c          	mov    0xc(%esp),%edx
   13ba9:	8b 44 24 10          	mov    0x10(%esp),%eax
   13bad:	8d 4c 24 04          	lea    0x4(%esp),%ecx
   13bb1:	51                   	push   %ecx
   13bb2:	52                   	push   %edx
   13bb3:	50                   	push   %eax
   13bb4:	8d 44 24 14          	lea    0x14(%esp),%eax
   13bb8:	50                   	push   %eax
   13bb9:	e8 1f f0 ff ff       	call   12bdd <find_entry>
   13bbe:	83 c4 10             	add    $0x10,%esp
   13bc1:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (bh) {
   13bc5:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   13bca:	74 29                	je     13bf5 <sys_mkdir+0xd4>
		brelse(bh);
   13bcc:	83 ec 0c             	sub    $0xc,%esp
   13bcf:	ff 74 24 28          	pushl  0x28(%esp)
   13bd3:	e8 b8 ba ff ff       	call   f690 <brelse>
   13bd8:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   13bdb:	8b 44 24 08          	mov    0x8(%esp),%eax
   13bdf:	83 ec 0c             	sub    $0xc,%esp
   13be2:	50                   	push   %eax
   13be3:	e8 07 ab ff ff       	call   e6ef <iput>
   13be8:	83 c4 10             	add    $0x10,%esp
		return -EEXIST;
   13beb:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
   13bf0:	e9 c1 02 00 00       	jmp    13eb6 <sys_mkdir+0x395>
	}
	inode = new_inode(dir->i_dev);
   13bf5:	8b 44 24 08          	mov    0x8(%esp),%eax
   13bf9:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13bfd:	0f b7 c0             	movzwl %ax,%eax
   13c00:	83 ec 0c             	sub    $0xc,%esp
   13c03:	50                   	push   %eax
   13c04:	e8 b5 15 00 00       	call   151be <new_inode>
   13c09:	83 c4 10             	add    $0x10,%esp
   13c0c:	89 44 24 18          	mov    %eax,0x18(%esp)
	if (!inode) {           						// 若不成功则放回目录的i节点，返回无空间出错码。
   13c10:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   13c15:	75 1a                	jne    13c31 <sys_mkdir+0x110>
		iput(dir);
   13c17:	8b 44 24 08          	mov    0x8(%esp),%eax
   13c1b:	83 ec 0c             	sub    $0xc,%esp
   13c1e:	50                   	push   %eax
   13c1f:	e8 cb aa ff ff       	call   e6ef <iput>
   13c24:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   13c27:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   13c2c:	e9 85 02 00 00       	jmp    13eb6 <sys_mkdir+0x395>
	}
	inode->i_size = 32;
   13c31:	8b 44 24 18          	mov    0x18(%esp),%eax
   13c35:	c7 40 04 20 00 00 00 	movl   $0x20,0x4(%eax)
	inode->i_dirt = 1;
   13c3c:	8b 44 24 18          	mov    0x18(%esp),%eax
   13c40:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	inode->i_mtime = inode->i_atime = CURRENT_TIME;
   13c44:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   13c49:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
   13c4f:	01 d0                	add    %edx,%eax
   13c51:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   13c56:	f7 e2                	mul    %edx
   13c58:	c1 ea 05             	shr    $0x5,%edx
   13c5b:	a1 04 eb 02 00       	mov    0x2eb04,%eax
   13c60:	01 c2                	add    %eax,%edx
   13c62:	8b 44 24 18          	mov    0x18(%esp),%eax
   13c66:	89 50 28             	mov    %edx,0x28(%eax)
   13c69:	8b 44 24 18          	mov    0x18(%esp),%eax
   13c6d:	8b 50 28             	mov    0x28(%eax),%edx
   13c70:	8b 44 24 18          	mov    0x18(%esp),%eax
   13c74:	89 50 08             	mov    %edx,0x8(%eax)
	// 接着为该新i节点申请一用于保存目录项数据的磁盘块，并令i节点的第一个直接块指针等于该块号。如果申请失败则放回对应目录
	// 的i节点；复位新申请的i节点连接计数；放回该新的i节点，返回没有空间出错码退出。否则置该新的i节点已修改标志。
	if (!(inode->i_zone[0] = new_block(inode->i_dev))) {
   13c77:	8b 44 24 18          	mov    0x18(%esp),%eax
   13c7b:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13c7f:	0f b7 c0             	movzwl %ax,%eax
   13c82:	83 ec 0c             	sub    $0xc,%esp
   13c85:	50                   	push   %eax
   13c86:	e8 fe 11 00 00       	call   14e89 <new_block>
   13c8b:	83 c4 10             	add    $0x10,%esp
   13c8e:	89 c2                	mov    %eax,%edx
   13c90:	8b 44 24 18          	mov    0x18(%esp),%eax
   13c94:	66 89 50 0e          	mov    %dx,0xe(%eax)
   13c98:	8b 44 24 18          	mov    0x18(%esp),%eax
   13c9c:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   13ca0:	66 85 c0             	test   %ax,%ax
   13ca3:	75 3b                	jne    13ce0 <sys_mkdir+0x1bf>
		iput(dir);
   13ca5:	8b 44 24 08          	mov    0x8(%esp),%eax
   13ca9:	83 ec 0c             	sub    $0xc,%esp
   13cac:	50                   	push   %eax
   13cad:	e8 3d aa ff ff       	call   e6ef <iput>
   13cb2:	83 c4 10             	add    $0x10,%esp
		inode->i_nlinks--;
   13cb5:	8b 44 24 18          	mov    0x18(%esp),%eax
   13cb9:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   13cbd:	8d 50 ff             	lea    -0x1(%eax),%edx
   13cc0:	8b 44 24 18          	mov    0x18(%esp),%eax
   13cc4:	88 50 0d             	mov    %dl,0xd(%eax)
		iput(inode);
   13cc7:	83 ec 0c             	sub    $0xc,%esp
   13cca:	ff 74 24 24          	pushl  0x24(%esp)
   13cce:	e8 1c aa ff ff       	call   e6ef <iput>
   13cd3:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   13cd6:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   13cdb:	e9 d6 01 00 00       	jmp    13eb6 <sys_mkdir+0x395>
	}
	inode->i_dirt = 1;
   13ce0:	8b 44 24 18          	mov    0x18(%esp),%eax
   13ce4:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	// 从设备上读取新申请的磁盘块（目的是把对应块放到高速缓冲区中）。若出错，则放回对应目录的i节点；释放申请的磁盘块；复位新
	// 申请的i节点连接计数；放回该新的i节点，返回没有空间出错码退出。
	if (!(dir_block = bread(inode->i_dev, inode->i_zone[0]))) {
   13ce8:	8b 44 24 18          	mov    0x18(%esp),%eax
   13cec:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   13cf0:	0f b7 d0             	movzwl %ax,%edx
   13cf3:	8b 44 24 18          	mov    0x18(%esp),%eax
   13cf7:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13cfb:	0f b7 c0             	movzwl %ax,%eax
   13cfe:	83 ec 08             	sub    $0x8,%esp
   13d01:	52                   	push   %edx
   13d02:	50                   	push   %eax
   13d03:	e8 de b9 ff ff       	call   f6e6 <bread>
   13d08:	83 c4 10             	add    $0x10,%esp
   13d0b:	89 44 24 14          	mov    %eax,0x14(%esp)
   13d0f:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   13d14:	75 3b                	jne    13d51 <sys_mkdir+0x230>
		iput(dir);
   13d16:	8b 44 24 08          	mov    0x8(%esp),%eax
   13d1a:	83 ec 0c             	sub    $0xc,%esp
   13d1d:	50                   	push   %eax
   13d1e:	e8 cc a9 ff ff       	call   e6ef <iput>
   13d23:	83 c4 10             	add    $0x10,%esp
		inode->i_nlinks--;
   13d26:	8b 44 24 18          	mov    0x18(%esp),%eax
   13d2a:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   13d2e:	8d 50 ff             	lea    -0x1(%eax),%edx
   13d31:	8b 44 24 18          	mov    0x18(%esp),%eax
   13d35:	88 50 0d             	mov    %dl,0xd(%eax)
		iput(inode);
   13d38:	83 ec 0c             	sub    $0xc,%esp
   13d3b:	ff 74 24 24          	pushl  0x24(%esp)
   13d3f:	e8 ab a9 ff ff       	call   e6ef <iput>
   13d44:	83 c4 10             	add    $0x10,%esp
		return -ERROR;
   13d47:	b8 9d ff ff ff       	mov    $0xffffff9d,%eax
   13d4c:	e9 65 01 00 00       	jmp    13eb6 <sys_mkdir+0x395>
	}
	// 然后我们在缓冲块中建立起所创建目录文件中的2个默认的新目录项（'.'和'..'）结构数据。首先令de指向存放目录项的数据块，然
	// 后置该目录项的i节点号字段等于新申请的i节点号，名字字段等于“.”。然后de指向下一个目录项结构，并在该结构中存放上级目录的
	// i节点号和名字“..”。然后设置该高速缓冲块已修改标志，并释放该缓冲区块。再初始化设置新i节点的模式字段，并置该i节点已修改
	// 标志。
	de = (struct dir_entry *) dir_block->b_data;
   13d51:	8b 44 24 14          	mov    0x14(%esp),%eax
   13d55:	8b 00                	mov    (%eax),%eax
   13d57:	89 44 24 04          	mov    %eax,0x4(%esp)
	de->inode = inode->i_num;         				// 设置'.'目录项。
   13d5b:	8b 44 24 04          	mov    0x4(%esp),%eax
   13d5f:	8b 54 24 18          	mov    0x18(%esp),%edx
   13d63:	0f b7 52 32          	movzwl 0x32(%edx),%edx
   13d67:	66 89 10             	mov    %dx,(%eax)
	strcpy(de->name, ".");
   13d6a:	8b 44 24 04          	mov    0x4(%esp),%eax
   13d6e:	83 c0 02             	add    $0x2,%eax
   13d71:	83 ec 08             	sub    $0x8,%esp
   13d74:	68 45 3c 02 00       	push   $0x23c45
   13d79:	50                   	push   %eax
   13d7a:	e8 e7 ec ff ff       	call   12a66 <strcpy>
   13d7f:	83 c4 10             	add    $0x10,%esp
	de++;
   13d82:	8b 44 24 04          	mov    0x4(%esp),%eax
   13d86:	83 c0 10             	add    $0x10,%eax
   13d89:	89 44 24 04          	mov    %eax,0x4(%esp)
	de->inode = dir->i_num;         				// 设置'..'目录项。
   13d8d:	8b 44 24 04          	mov    0x4(%esp),%eax
   13d91:	8b 54 24 08          	mov    0x8(%esp),%edx
   13d95:	0f b7 52 32          	movzwl 0x32(%edx),%edx
   13d99:	66 89 10             	mov    %dx,(%eax)
	strcpy(de->name, "..");
   13d9c:	8b 44 24 04          	mov    0x4(%esp),%eax
   13da0:	83 c0 02             	add    $0x2,%eax
   13da3:	83 ec 08             	sub    $0x8,%esp
   13da6:	68 47 3c 02 00       	push   $0x23c47
   13dab:	50                   	push   %eax
   13dac:	e8 b5 ec ff ff       	call   12a66 <strcpy>
   13db1:	83 c4 10             	add    $0x10,%esp
	inode->i_nlinks = 2;
   13db4:	8b 44 24 18          	mov    0x18(%esp),%eax
   13db8:	c6 40 0d 02          	movb   $0x2,0xd(%eax)
	dir_block->b_dirt = 1;
   13dbc:	8b 44 24 14          	mov    0x14(%esp),%eax
   13dc0:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	brelse(dir_block);
   13dc4:	83 ec 0c             	sub    $0xc,%esp
   13dc7:	ff 74 24 20          	pushl  0x20(%esp)
   13dcb:	e8 c0 b8 ff ff       	call   f690 <brelse>
   13dd0:	83 c4 10             	add    $0x10,%esp
	inode->i_mode = I_DIRECTORY | (mode & 0777 & ~current->umask);
   13dd3:	8b 44 24 34          	mov    0x34(%esp),%eax
   13dd7:	66 25 ff 01          	and    $0x1ff,%ax
   13ddb:	89 c2                	mov    %eax,%edx
   13ddd:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   13de2:	0f b7 80 30 03 00 00 	movzwl 0x330(%eax),%eax
   13de9:	f7 d0                	not    %eax
   13deb:	21 d0                	and    %edx,%eax
   13ded:	80 cc 40             	or     $0x40,%ah
   13df0:	89 c2                	mov    %eax,%edx
   13df2:	8b 44 24 18          	mov    0x18(%esp),%eax
   13df6:	66 89 10             	mov    %dx,(%eax)
	inode->i_dirt = 1;
   13df9:	8b 44 24 18          	mov    0x18(%esp),%eax
   13dfd:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	// 现在我们在指定目录中新添加一个目录项，用于存放新建目录的i节点和目录名。如果失败（包含该目录项的高速缓冲区指针为NULL），
	// 则放回目录的i节点；所申请的i节点引用连接计数复位，并放回该i节点。返回出错码退出。
	bh = add_entry(dir, basename, namelen, &de);
   13e01:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   13e05:	8b 54 24 10          	mov    0x10(%esp),%edx
   13e09:	8b 44 24 08          	mov    0x8(%esp),%eax
   13e0d:	8d 5c 24 04          	lea    0x4(%esp),%ebx
   13e11:	53                   	push   %ebx
   13e12:	51                   	push   %ecx
   13e13:	52                   	push   %edx
   13e14:	50                   	push   %eax
   13e15:	e8 01 f0 ff ff       	call   12e1b <add_entry>
   13e1a:	83 c4 10             	add    $0x10,%esp
   13e1d:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!bh) {
   13e21:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   13e26:	75 2e                	jne    13e56 <sys_mkdir+0x335>
		iput(dir);
   13e28:	8b 44 24 08          	mov    0x8(%esp),%eax
   13e2c:	83 ec 0c             	sub    $0xc,%esp
   13e2f:	50                   	push   %eax
   13e30:	e8 ba a8 ff ff       	call   e6ef <iput>
   13e35:	83 c4 10             	add    $0x10,%esp
		inode->i_nlinks = 0;
   13e38:	8b 44 24 18          	mov    0x18(%esp),%eax
   13e3c:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
		iput(inode);
   13e40:	83 ec 0c             	sub    $0xc,%esp
   13e43:	ff 74 24 24          	pushl  0x24(%esp)
   13e47:	e8 a3 a8 ff ff       	call   e6ef <iput>
   13e4c:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   13e4f:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   13e54:	eb 60                	jmp    13eb6 <sys_mkdir+0x395>
	}
	// 最后令该新目录项的i节点字段等于新i节点号，并置高速缓冲块已修改标志，放回目录和新的i节点，释放高速缓冲区，最后返回0（成功）。
	de->inode = inode->i_num;
   13e56:	8b 44 24 04          	mov    0x4(%esp),%eax
   13e5a:	8b 54 24 18          	mov    0x18(%esp),%edx
   13e5e:	0f b7 52 32          	movzwl 0x32(%edx),%edx
   13e62:	66 89 10             	mov    %dx,(%eax)
	bh->b_dirt = 1;
   13e65:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   13e69:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	dir->i_nlinks++;
   13e6d:	8b 44 24 08          	mov    0x8(%esp),%eax
   13e71:	0f b6 50 0d          	movzbl 0xd(%eax),%edx
   13e75:	83 c2 01             	add    $0x1,%edx
   13e78:	88 50 0d             	mov    %dl,0xd(%eax)
	dir->i_dirt = 1;
   13e7b:	8b 44 24 08          	mov    0x8(%esp),%eax
   13e7f:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	iput(dir);
   13e83:	8b 44 24 08          	mov    0x8(%esp),%eax
   13e87:	83 ec 0c             	sub    $0xc,%esp
   13e8a:	50                   	push   %eax
   13e8b:	e8 5f a8 ff ff       	call   e6ef <iput>
   13e90:	83 c4 10             	add    $0x10,%esp
	iput(inode);
   13e93:	83 ec 0c             	sub    $0xc,%esp
   13e96:	ff 74 24 24          	pushl  0x24(%esp)
   13e9a:	e8 50 a8 ff ff       	call   e6ef <iput>
   13e9f:	83 c4 10             	add    $0x10,%esp
	brelse(bh);
   13ea2:	83 ec 0c             	sub    $0xc,%esp
   13ea5:	ff 74 24 28          	pushl  0x28(%esp)
   13ea9:	e8 e2 b7 ff ff       	call   f690 <brelse>
   13eae:	83 c4 10             	add    $0x10,%esp
	return 0;
   13eb1:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13eb6:	83 c4 28             	add    $0x28,%esp
   13eb9:	5b                   	pop    %ebx
   13eba:	c3                   	ret    

00013ebb <empty_dir>:
 */
// 检查指定目录是否为空。
// 参数：inode - 指定目录的i节点指针。
// 返回：1 - 目录中是空的；0 - 不空。
static int empty_dir(struct m_inode * inode)
{
   13ebb:	83 ec 2c             	sub    $0x2c,%esp
	struct dir_entry * de;

	// 首先计算指定目录中现有目录项个数并检查开始两个特定目录项中信息是否正确。一个目录中应该起码有2个目录项：即“.”和“..”。
	// 如果目录项个数少于2个或者该目录i节点的第1个直接块没有指向任何磁盘块号，或者该直接块读不出，则显示警告信息“设备dev上
	// 目录错”，返回0（失败）。
	len = inode->i_size / sizeof (struct dir_entry);        		// 目录中目录项个数。
   13ebe:	8b 44 24 30          	mov    0x30(%esp),%eax
   13ec2:	8b 40 04             	mov    0x4(%eax),%eax
   13ec5:	c1 e8 04             	shr    $0x4,%eax
   13ec8:	89 44 24 10          	mov    %eax,0x10(%esp)
	if (len < 2 || !inode->i_zone[0] ||
   13ecc:	83 7c 24 10 01       	cmpl   $0x1,0x10(%esp)
   13ed1:	7e 3b                	jle    13f0e <empty_dir+0x53>
   13ed3:	8b 44 24 30          	mov    0x30(%esp),%eax
   13ed7:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   13edb:	66 85 c0             	test   %ax,%ax
   13ede:	74 2e                	je     13f0e <empty_dir+0x53>
	    !(bh = bread(inode->i_dev, inode->i_zone[0]))) {
   13ee0:	8b 44 24 30          	mov    0x30(%esp),%eax
   13ee4:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   13ee8:	0f b7 d0             	movzwl %ax,%edx
   13eeb:	8b 44 24 30          	mov    0x30(%esp),%eax
   13eef:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13ef3:	0f b7 c0             	movzwl %ax,%eax

	// 首先计算指定目录中现有目录项个数并检查开始两个特定目录项中信息是否正确。一个目录中应该起码有2个目录项：即“.”和“..”。
	// 如果目录项个数少于2个或者该目录i节点的第1个直接块没有指向任何磁盘块号，或者该直接块读不出，则显示警告信息“设备dev上
	// 目录错”，返回0（失败）。
	len = inode->i_size / sizeof (struct dir_entry);        		// 目录中目录项个数。
	if (len < 2 || !inode->i_zone[0] ||
   13ef6:	83 ec 08             	sub    $0x8,%esp
   13ef9:	52                   	push   %edx
   13efa:	50                   	push   %eax
   13efb:	e8 e6 b7 ff ff       	call   f6e6 <bread>
   13f00:	83 c4 10             	add    $0x10,%esp
   13f03:	89 44 24 18          	mov    %eax,0x18(%esp)
   13f07:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   13f0c:	75 26                	jne    13f34 <empty_dir+0x79>
	    !(bh = bread(inode->i_dev, inode->i_zone[0]))) {
	    	printk("warning - bad directory on dev %04x\n", inode->i_dev);
   13f0e:	8b 44 24 30          	mov    0x30(%esp),%eax
   13f12:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13f16:	0f b7 c0             	movzwl %ax,%eax
   13f19:	83 ec 08             	sub    $0x8,%esp
   13f1c:	50                   	push   %eax
   13f1d:	68 4c 3c 02 00       	push   $0x23c4c
   13f22:	e8 20 4d ff ff       	call   8c47 <printk>
   13f27:	83 c4 10             	add    $0x10,%esp
		return 0;
   13f2a:	b8 00 00 00 00       	mov    $0x0,%eax
   13f2f:	e9 74 01 00 00       	jmp    140a8 <empty_dir+0x1ed>
	}
	// 此时bh所指缓冲块中含有目录项数据。我们让目录项指针de指向缓冲块中第1个目录项。对于第1个目录项（“.”），它的i节点号字段
	// inode应该等于当前目录的i节点号。对于第2个目录项（“..”），节点号字段inode应该等于上一层目录的i节点号，不会为0.因此，
	// 如果第1个目录项的i节点号字段值不等于该目录的i节点号，或者第2个目录项的i节点号字段为零，或者两个目录项的名字字段不分别
	// 等于“.”和“..”，则显示出错警告信息“设备dev上目录错”，并返回0。
	de = (struct dir_entry *) bh->b_data;
   13f34:	8b 44 24 18          	mov    0x18(%esp),%eax
   13f38:	8b 00                	mov    (%eax),%eax
   13f3a:	89 44 24 14          	mov    %eax,0x14(%esp)
	if (de[0].inode != inode->i_num || !de[1].inode ||
   13f3e:	8b 44 24 14          	mov    0x14(%esp),%eax
   13f42:	0f b7 10             	movzwl (%eax),%edx
   13f45:	8b 44 24 30          	mov    0x30(%esp),%eax
   13f49:	0f b7 40 32          	movzwl 0x32(%eax),%eax
   13f4d:	66 39 c2             	cmp    %ax,%dx
   13f50:	75 4a                	jne    13f9c <empty_dir+0xe1>
   13f52:	8b 44 24 14          	mov    0x14(%esp),%eax
   13f56:	83 c0 10             	add    $0x10,%eax
   13f59:	0f b7 00             	movzwl (%eax),%eax
   13f5c:	66 85 c0             	test   %ax,%ax
   13f5f:	74 3b                	je     13f9c <empty_dir+0xe1>
	    strcmp(".", de[0].name) || strcmp("..", de[1].name)) {
   13f61:	8b 44 24 14          	mov    0x14(%esp),%eax
   13f65:	83 c0 02             	add    $0x2,%eax
   13f68:	83 ec 08             	sub    $0x8,%esp
   13f6b:	50                   	push   %eax
   13f6c:	68 45 3c 02 00       	push   $0x23c45
   13f71:	e8 0c eb ff ff       	call   12a82 <strcmp>
   13f76:	83 c4 10             	add    $0x10,%esp
	// 此时bh所指缓冲块中含有目录项数据。我们让目录项指针de指向缓冲块中第1个目录项。对于第1个目录项（“.”），它的i节点号字段
	// inode应该等于当前目录的i节点号。对于第2个目录项（“..”），节点号字段inode应该等于上一层目录的i节点号，不会为0.因此，
	// 如果第1个目录项的i节点号字段值不等于该目录的i节点号，或者第2个目录项的i节点号字段为零，或者两个目录项的名字字段不分别
	// 等于“.”和“..”，则显示出错警告信息“设备dev上目录错”，并返回0。
	de = (struct dir_entry *) bh->b_data;
	if (de[0].inode != inode->i_num || !de[1].inode ||
   13f79:	85 c0                	test   %eax,%eax
   13f7b:	75 1f                	jne    13f9c <empty_dir+0xe1>
	    strcmp(".", de[0].name) || strcmp("..", de[1].name)) {
   13f7d:	8b 44 24 14          	mov    0x14(%esp),%eax
   13f81:	83 c0 10             	add    $0x10,%eax
   13f84:	83 c0 02             	add    $0x2,%eax
   13f87:	83 ec 08             	sub    $0x8,%esp
   13f8a:	50                   	push   %eax
   13f8b:	68 47 3c 02 00       	push   $0x23c47
   13f90:	e8 ed ea ff ff       	call   12a82 <strcmp>
   13f95:	83 c4 10             	add    $0x10,%esp
   13f98:	85 c0                	test   %eax,%eax
   13f9a:	74 26                	je     13fc2 <empty_dir+0x107>
	    	printk("warning - bad directory on dev %04x\n", inode->i_dev);
   13f9c:	8b 44 24 30          	mov    0x30(%esp),%eax
   13fa0:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13fa4:	0f b7 c0             	movzwl %ax,%eax
   13fa7:	83 ec 08             	sub    $0x8,%esp
   13faa:	50                   	push   %eax
   13fab:	68 4c 3c 02 00       	push   $0x23c4c
   13fb0:	e8 92 4c ff ff       	call   8c47 <printk>
   13fb5:	83 c4 10             	add    $0x10,%esp
		return 0;
   13fb8:	b8 00 00 00 00       	mov    $0x0,%eax
   13fbd:	e9 e6 00 00 00       	jmp    140a8 <empty_dir+0x1ed>
	}
	// 然后我们令nr等于目录项序号（从0开始计）；de指向第三个目录项。并循环检测该目录中其余所有的（len - 2）个目录项，看有没有
	// 目录项的i节点号字段不为0（被使用）。
	nr = 2;
   13fc2:	c7 44 24 1c 02 00 00 	movl   $0x2,0x1c(%esp)
   13fc9:	00 
	de += 2;
   13fca:	83 44 24 14 20       	addl   $0x20,0x14(%esp)
	while (nr < len) {
   13fcf:	e9 b2 00 00 00       	jmp    14086 <empty_dir+0x1cb>
		// 如果该块磁盘块中的目录项已经全部检测完毕，则释放该磁盘块的缓冲块，并读取目录数据文件中下一块含有目录项的磁盘块。读取的方
		// 法是根据当前检测的目录项序号nr计算出对应目录项在目录数据文件中的数据块号（nr/DIR_ENTRIES_PER_BLOCK），然后使用bmap()
		// 函数取得对应的盘块号block，再使用读设备块函数bread()把相应盘块读入缓冲块中，并返回该缓冲块的指针。若所读取的相应盘块没有
		// 使用（或已经不用，如文件已经删除等），则继续读下一块，若读不出，则出错返回0.否则让de指向读出块的第1个目录项。
		if ((void *) de >= (void *) (bh->b_data + BLOCK_SIZE)) {
   13fd4:	8b 44 24 18          	mov    0x18(%esp),%eax
   13fd8:	8b 00                	mov    (%eax),%eax
   13fda:	05 00 04 00 00       	add    $0x400,%eax
   13fdf:	3b 44 24 14          	cmp    0x14(%esp),%eax
   13fe3:	77 75                	ja     1405a <empty_dir+0x19f>
			brelse(bh);
   13fe5:	83 ec 0c             	sub    $0xc,%esp
   13fe8:	ff 74 24 24          	pushl  0x24(%esp)
   13fec:	e8 9f b6 ff ff       	call   f690 <brelse>
   13ff1:	83 c4 10             	add    $0x10,%esp
			block = bmap(inode, nr / DIR_ENTRIES_PER_BLOCK);
   13ff4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   13ff8:	c1 e8 06             	shr    $0x6,%eax
   13ffb:	83 ec 08             	sub    $0x8,%esp
   13ffe:	50                   	push   %eax
   13fff:	ff 74 24 3c          	pushl  0x3c(%esp)
   14003:	e8 af a6 ff ff       	call   e6b7 <bmap>
   14008:	83 c4 10             	add    $0x10,%esp
   1400b:	89 44 24 0c          	mov    %eax,0xc(%esp)
			if (!block) {
   1400f:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   14014:	75 0d                	jne    14023 <empty_dir+0x168>
				nr += DIR_ENTRIES_PER_BLOCK;
   14016:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1401a:	83 c0 40             	add    $0x40,%eax
   1401d:	89 44 24 1c          	mov    %eax,0x1c(%esp)
				continue;
   14021:	eb 63                	jmp    14086 <empty_dir+0x1cb>
			}
			if (!(bh = bread(inode->i_dev, block)))
   14023:	8b 44 24 30          	mov    0x30(%esp),%eax
   14027:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   1402b:	0f b7 c0             	movzwl %ax,%eax
   1402e:	83 ec 08             	sub    $0x8,%esp
   14031:	ff 74 24 14          	pushl  0x14(%esp)
   14035:	50                   	push   %eax
   14036:	e8 ab b6 ff ff       	call   f6e6 <bread>
   1403b:	83 c4 10             	add    $0x10,%esp
   1403e:	89 44 24 18          	mov    %eax,0x18(%esp)
   14042:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   14047:	75 07                	jne    14050 <empty_dir+0x195>
				return 0;
   14049:	b8 00 00 00 00       	mov    $0x0,%eax
   1404e:	eb 58                	jmp    140a8 <empty_dir+0x1ed>
			de = (struct dir_entry *) bh->b_data;
   14050:	8b 44 24 18          	mov    0x18(%esp),%eax
   14054:	8b 00                	mov    (%eax),%eax
   14056:	89 44 24 14          	mov    %eax,0x14(%esp)
		}
		// 对于de指向的当前目录项，如果该目录项的i节点号字段不等于0,则表示该目录项目前正被使用，则释放该高速缓冲区，返回0退出。否则，
		// 若还没有查询完该目录中的所有目录项，则把目录项序号nr增1、de指向下一个目录项，继续检测。
		if (de->inode) {
   1405a:	8b 44 24 14          	mov    0x14(%esp),%eax
   1405e:	0f b7 00             	movzwl (%eax),%eax
   14061:	66 85 c0             	test   %ax,%ax
   14064:	74 16                	je     1407c <empty_dir+0x1c1>
			brelse(bh);
   14066:	83 ec 0c             	sub    $0xc,%esp
   14069:	ff 74 24 24          	pushl  0x24(%esp)
   1406d:	e8 1e b6 ff ff       	call   f690 <brelse>
   14072:	83 c4 10             	add    $0x10,%esp
			return 0;
   14075:	b8 00 00 00 00       	mov    $0x0,%eax
   1407a:	eb 2c                	jmp    140a8 <empty_dir+0x1ed>
		}
		de++;
   1407c:	83 44 24 14 10       	addl   $0x10,0x14(%esp)
		nr++;
   14081:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
	}
	// 然后我们令nr等于目录项序号（从0开始计）；de指向第三个目录项。并循环检测该目录中其余所有的（len - 2）个目录项，看有没有
	// 目录项的i节点号字段不为0（被使用）。
	nr = 2;
	de += 2;
	while (nr < len) {
   14086:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1408a:	3b 44 24 10          	cmp    0x10(%esp),%eax
   1408e:	0f 8c 40 ff ff ff    	jl     13fd4 <empty_dir+0x119>
		}
		de++;
		nr++;
	}
	// 执行到这里说明该目录中没有找到已用的目录项（当然除了头两个以外），则释放缓冲块返回1。
	brelse(bh);
   14094:	83 ec 0c             	sub    $0xc,%esp
   14097:	ff 74 24 24          	pushl  0x24(%esp)
   1409b:	e8 f0 b5 ff ff       	call   f690 <brelse>
   140a0:	83 c4 10             	add    $0x10,%esp
	return 1;
   140a3:	b8 01 00 00 00       	mov    $0x1,%eax
}
   140a8:	83 c4 2c             	add    $0x2c,%esp
   140ab:	c3                   	ret    

000140ac <sys_rmdir>:

// 删除目录。
// 参数：name - 目录名（路径名）。
// 返回：返回0表示成功，否则返回出错号。
int sys_rmdir(const char * name)
{
   140ac:	53                   	push   %ebx
   140ad:	83 ec 28             	sub    $0x28,%esp
	struct dir_entry * de;

	// 首先检查参数的有效性并取路径名中顶层目录的i节点。如果找不到对应路径名中顶层目录的i节点，则返回出错码。如果最顶端
	// 文件名长度为0,则说明给出的路径名最后没有指定文件名，放回该目录i节点，返回出错码退出。如果在该目录中没有写的权限，
	// 则放回该目录i节点，返回访问许可出错码退出。如果不是超级用户，则返回访问许可出错码。
	if (!(dir = dir_namei(name, &namelen, &basename, NULL)))
   140b0:	6a 00                	push   $0x0
   140b2:	8d 44 24 18          	lea    0x18(%esp),%eax
   140b6:	50                   	push   %eax
   140b7:	8d 44 24 18          	lea    0x18(%esp),%eax
   140bb:	50                   	push   %eax
   140bc:	ff 74 24 3c          	pushl  0x3c(%esp)
   140c0:	e8 95 f2 ff ff       	call   1335a <dir_namei>
   140c5:	83 c4 10             	add    $0x10,%esp
   140c8:	89 44 24 0c          	mov    %eax,0xc(%esp)
   140cc:	8b 44 24 0c          	mov    0xc(%esp),%eax
   140d0:	85 c0                	test   %eax,%eax
   140d2:	75 0a                	jne    140de <sys_rmdir+0x32>
		return -ENOENT;
   140d4:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   140d9:	e9 55 03 00 00       	jmp    14433 <sys_rmdir+0x387>
	if (!namelen) {
   140de:	8b 44 24 10          	mov    0x10(%esp),%eax
   140e2:	85 c0                	test   %eax,%eax
   140e4:	75 1a                	jne    14100 <sys_rmdir+0x54>
		iput(dir);
   140e6:	8b 44 24 0c          	mov    0xc(%esp),%eax
   140ea:	83 ec 0c             	sub    $0xc,%esp
   140ed:	50                   	push   %eax
   140ee:	e8 fc a5 ff ff       	call   e6ef <iput>
   140f3:	83 c4 10             	add    $0x10,%esp
		return -ENOENT;
   140f6:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   140fb:	e9 33 03 00 00       	jmp    14433 <sys_rmdir+0x387>
	}
	if (!permission(dir,MAY_WRITE)) {
   14100:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14104:	83 ec 08             	sub    $0x8,%esp
   14107:	6a 02                	push   $0x2
   14109:	50                   	push   %eax
   1410a:	e8 9a e9 ff ff       	call   12aa9 <permission>
   1410f:	83 c4 10             	add    $0x10,%esp
   14112:	85 c0                	test   %eax,%eax
   14114:	75 1a                	jne    14130 <sys_rmdir+0x84>
		iput(dir);
   14116:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1411a:	83 ec 0c             	sub    $0xc,%esp
   1411d:	50                   	push   %eax
   1411e:	e8 cc a5 ff ff       	call   e6ef <iput>
   14123:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   14126:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1412b:	e9 03 03 00 00       	jmp    14433 <sys_rmdir+0x387>
	}
	// 然后根据指定目录的i节点和目录名利用函数find_entry()寻找对应目录项，并返回包含该目录项的缓冲块指针bh、包含该目录
	// 项的目录的i节点指针dir和该目录项指针de。再根据该目录项de中的i节点号利用iget()函数得到对应的i节点inode。如果对应
	// 路径名上最后目录的名的目录项不存在，则释放包含该目录项的高速缓冲区，放回目录的i节点，返回文件不存在出错码，并退出。
	// 如果取目录项的i节点出错，则放回目录的i节点，并释放含有目录项的高速缓冲区，返回出错号。
	bh = find_entry(&dir, basename, namelen, &de);
   14130:	8b 54 24 10          	mov    0x10(%esp),%edx
   14134:	8b 44 24 14          	mov    0x14(%esp),%eax
   14138:	8d 4c 24 08          	lea    0x8(%esp),%ecx
   1413c:	51                   	push   %ecx
   1413d:	52                   	push   %edx
   1413e:	50                   	push   %eax
   1413f:	8d 44 24 18          	lea    0x18(%esp),%eax
   14143:	50                   	push   %eax
   14144:	e8 94 ea ff ff       	call   12bdd <find_entry>
   14149:	83 c4 10             	add    $0x10,%esp
   1414c:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!bh) {
   14150:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   14155:	75 1a                	jne    14171 <sys_rmdir+0xc5>
		iput(dir);
   14157:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1415b:	83 ec 0c             	sub    $0xc,%esp
   1415e:	50                   	push   %eax
   1415f:	e8 8b a5 ff ff       	call   e6ef <iput>
   14164:	83 c4 10             	add    $0x10,%esp
		return -ENOENT;
   14167:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   1416c:	e9 c2 02 00 00       	jmp    14433 <sys_rmdir+0x387>
	}
	if (!(inode = iget(dir->i_dev, de->inode))) {
   14171:	8b 44 24 08          	mov    0x8(%esp),%eax
   14175:	0f b7 00             	movzwl (%eax),%eax
   14178:	0f b7 d0             	movzwl %ax,%edx
   1417b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1417f:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   14183:	0f b7 c0             	movzwl %ax,%eax
   14186:	83 ec 08             	sub    $0x8,%esp
   14189:	52                   	push   %edx
   1418a:	50                   	push   %eax
   1418b:	e8 f1 a8 ff ff       	call   ea81 <iget>
   14190:	83 c4 10             	add    $0x10,%esp
   14193:	89 44 24 18          	mov    %eax,0x18(%esp)
   14197:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   1419c:	75 29                	jne    141c7 <sys_rmdir+0x11b>
		iput(dir);
   1419e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   141a2:	83 ec 0c             	sub    $0xc,%esp
   141a5:	50                   	push   %eax
   141a6:	e8 44 a5 ff ff       	call   e6ef <iput>
   141ab:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   141ae:	83 ec 0c             	sub    $0xc,%esp
   141b1:	ff 74 24 28          	pushl  0x28(%esp)
   141b5:	e8 d6 b4 ff ff       	call   f690 <brelse>
   141ba:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   141bd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   141c2:	e9 6c 02 00 00       	jmp    14433 <sys_rmdir+0x387>
	// 此时我们已有包含要被删除目录项的目录i节点dir、要被删除目录项的i节点inode和要被删除目录项指针de。下面我们通过对这3
	// 个对象中信息的检查来验证删除操作的可行性。
	// 若该目录设置了受限删除标志并且进程的有效用户id（euid）不是root，并且进程的有效用户id（euid）不等于该i节点的用户
	// id，则表示当前进程没有权限删除该目录，于是放回包含要删除目录名的目录i节点和该要删除目录的i节点，然后释放高速缓冲区，
	// 返回出错码。
	if ((dir->i_mode & S_ISVTX) && current->euid &&
   141c7:	8b 44 24 0c          	mov    0xc(%esp),%eax
   141cb:	0f b7 00             	movzwl (%eax),%eax
   141ce:	0f b7 c0             	movzwl %ax,%eax
   141d1:	25 00 02 00 00       	and    $0x200,%eax
   141d6:	85 c0                	test   %eax,%eax
   141d8:	74 62                	je     1423c <sys_rmdir+0x190>
   141da:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   141df:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
   141e6:	66 85 c0             	test   %ax,%ax
   141e9:	74 51                	je     1423c <sys_rmdir+0x190>
	    inode->i_uid != current->euid) {
   141eb:	8b 44 24 18          	mov    0x18(%esp),%eax
   141ef:	0f b7 50 02          	movzwl 0x2(%eax),%edx
   141f3:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   141f8:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
	// 此时我们已有包含要被删除目录项的目录i节点dir、要被删除目录项的i节点inode和要被删除目录项指针de。下面我们通过对这3
	// 个对象中信息的检查来验证删除操作的可行性。
	// 若该目录设置了受限删除标志并且进程的有效用户id（euid）不是root，并且进程的有效用户id（euid）不等于该i节点的用户
	// id，则表示当前进程没有权限删除该目录，于是放回包含要删除目录名的目录i节点和该要删除目录的i节点，然后释放高速缓冲区，
	// 返回出错码。
	if ((dir->i_mode & S_ISVTX) && current->euid &&
   141ff:	66 39 c2             	cmp    %ax,%dx
   14202:	74 38                	je     1423c <sys_rmdir+0x190>
	    inode->i_uid != current->euid) {
		iput(dir);
   14204:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14208:	83 ec 0c             	sub    $0xc,%esp
   1420b:	50                   	push   %eax
   1420c:	e8 de a4 ff ff       	call   e6ef <iput>
   14211:	83 c4 10             	add    $0x10,%esp
		iput(inode);
   14214:	83 ec 0c             	sub    $0xc,%esp
   14217:	ff 74 24 24          	pushl  0x24(%esp)
   1421b:	e8 cf a4 ff ff       	call   e6ef <iput>
   14220:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   14223:	83 ec 0c             	sub    $0xc,%esp
   14226:	ff 74 24 28          	pushl  0x28(%esp)
   1422a:	e8 61 b4 ff ff       	call   f690 <brelse>
   1422f:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   14232:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14237:	e9 f7 01 00 00       	jmp    14433 <sys_rmdir+0x387>
	}
	// 如果要被删除的目录项i节点的设备号不等于包含该目录项的目录的设备号，或者该被删除目录的引用连接计数大于1（表示有符号连
	// 接等），则不能删除该目录。于是释放包含要删除目录名的目录i节点和该要删除目录的i节点，释放高速缓冲块，返回出错码。
	if (inode->i_dev != dir->i_dev || inode->i_count > 1) {
   1423c:	8b 44 24 18          	mov    0x18(%esp),%eax
   14240:	0f b7 50 30          	movzwl 0x30(%eax),%edx
   14244:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14248:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   1424c:	66 39 c2             	cmp    %ax,%dx
   1424f:	75 0e                	jne    1425f <sys_rmdir+0x1b3>
   14251:	8b 44 24 18          	mov    0x18(%esp),%eax
   14255:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   14259:	66 83 f8 01          	cmp    $0x1,%ax
   1425d:	76 38                	jbe    14297 <sys_rmdir+0x1eb>
		iput(dir);
   1425f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14263:	83 ec 0c             	sub    $0xc,%esp
   14266:	50                   	push   %eax
   14267:	e8 83 a4 ff ff       	call   e6ef <iput>
   1426c:	83 c4 10             	add    $0x10,%esp
		iput(inode);
   1426f:	83 ec 0c             	sub    $0xc,%esp
   14272:	ff 74 24 24          	pushl  0x24(%esp)
   14276:	e8 74 a4 ff ff       	call   e6ef <iput>
   1427b:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   1427e:	83 ec 0c             	sub    $0xc,%esp
   14281:	ff 74 24 28          	pushl  0x28(%esp)
   14285:	e8 06 b4 ff ff       	call   f690 <brelse>
   1428a:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   1428d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14292:	e9 9c 01 00 00       	jmp    14433 <sys_rmdir+0x387>
	}
	// 如果要被删除目录的目录项i节点就等于包含该需删除目录的目录i节点，则表示试图删除“.”目录，这是不允许的。于是放回包含要删
	// 除目录名的目录i节点和要删除目录的i节点，释放高速缓冲块，返回出错码。
	if (inode == dir) {						/* we may not delete ".", but "../dir" is ok */
   14297:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1429b:	39 44 24 18          	cmp    %eax,0x18(%esp)
   1429f:	75 38                	jne    142d9 <sys_rmdir+0x22d>
		iput(inode);
   142a1:	83 ec 0c             	sub    $0xc,%esp
   142a4:	ff 74 24 24          	pushl  0x24(%esp)
   142a8:	e8 42 a4 ff ff       	call   e6ef <iput>
   142ad:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   142b0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   142b4:	83 ec 0c             	sub    $0xc,%esp
   142b7:	50                   	push   %eax
   142b8:	e8 32 a4 ff ff       	call   e6ef <iput>
   142bd:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   142c0:	83 ec 0c             	sub    $0xc,%esp
   142c3:	ff 74 24 28          	pushl  0x28(%esp)
   142c7:	e8 c4 b3 ff ff       	call   f690 <brelse>
   142cc:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   142cf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   142d4:	e9 5a 01 00 00       	jmp    14433 <sys_rmdir+0x387>
	}
	// 若要被删除目录i节点的属性表明这不是一个目录，则本删除操作的前提完全不存在。于是放回包含删除目录名的目录i节点和该要删除
	// 目录的i节点，释放高速缓冲块，返回出错码。
	if (!S_ISDIR(inode->i_mode)) {
   142d9:	8b 44 24 18          	mov    0x18(%esp),%eax
   142dd:	0f b7 00             	movzwl (%eax),%eax
   142e0:	0f b7 c0             	movzwl %ax,%eax
   142e3:	25 00 f0 00 00       	and    $0xf000,%eax
   142e8:	3d 00 40 00 00       	cmp    $0x4000,%eax
   142ed:	74 38                	je     14327 <sys_rmdir+0x27b>
		iput(inode);
   142ef:	83 ec 0c             	sub    $0xc,%esp
   142f2:	ff 74 24 24          	pushl  0x24(%esp)
   142f6:	e8 f4 a3 ff ff       	call   e6ef <iput>
   142fb:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   142fe:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14302:	83 ec 0c             	sub    $0xc,%esp
   14305:	50                   	push   %eax
   14306:	e8 e4 a3 ff ff       	call   e6ef <iput>
   1430b:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   1430e:	83 ec 0c             	sub    $0xc,%esp
   14311:	ff 74 24 28          	pushl  0x28(%esp)
   14315:	e8 76 b3 ff ff       	call   f690 <brelse>
   1431a:	83 c4 10             	add    $0x10,%esp
		return -ENOTDIR;
   1431d:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
   14322:	e9 0c 01 00 00       	jmp    14433 <sys_rmdir+0x387>
	}
	// 若该需要被删除的目录不空，则也不能删除。于是放回包含要删除目录名的目录i节点和该要删除目录的i节点，释放高速缓冲块，返回
	// 出错码。
	if (!empty_dir(inode)) {
   14327:	83 ec 0c             	sub    $0xc,%esp
   1432a:	ff 74 24 24          	pushl  0x24(%esp)
   1432e:	e8 88 fb ff ff       	call   13ebb <empty_dir>
   14333:	83 c4 10             	add    $0x10,%esp
   14336:	85 c0                	test   %eax,%eax
   14338:	75 38                	jne    14372 <sys_rmdir+0x2c6>
		iput(inode);
   1433a:	83 ec 0c             	sub    $0xc,%esp
   1433d:	ff 74 24 24          	pushl  0x24(%esp)
   14341:	e8 a9 a3 ff ff       	call   e6ef <iput>
   14346:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   14349:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1434d:	83 ec 0c             	sub    $0xc,%esp
   14350:	50                   	push   %eax
   14351:	e8 99 a3 ff ff       	call   e6ef <iput>
   14356:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   14359:	83 ec 0c             	sub    $0xc,%esp
   1435c:	ff 74 24 28          	pushl  0x28(%esp)
   14360:	e8 2b b3 ff ff       	call   f690 <brelse>
   14365:	83 c4 10             	add    $0x10,%esp
		return -ENOTEMPTY;
   14368:	b8 d9 ff ff ff       	mov    $0xffffffd9,%eax
   1436d:	e9 c1 00 00 00       	jmp    14433 <sys_rmdir+0x387>
	}
	// 对于一个空目录，其目录项链接数应该为2（链接到上层目录和本目录）。若该需被删除目录的i节点的连接数不等于2,则显示警告信息，
	// 但删除操作仍然执行。于是置该需删除目录的目录项的i节点号字段为0,表示该目录项不再使用，并置含有该目录项的调整缓冲块已修改
	// 标志，并释放该缓冲块。然后再置被删除目录i节点的链接数为0（表示空闲），并置i节点已修改标志。
	if (inode->i_nlinks != 2)
   14372:	8b 44 24 18          	mov    0x18(%esp),%eax
   14376:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   1437a:	3c 02                	cmp    $0x2,%al
   1437c:	74 1c                	je     1439a <sys_rmdir+0x2ee>
		printk("empty directory has nlink!=2 (%d)", inode->i_nlinks);
   1437e:	8b 44 24 18          	mov    0x18(%esp),%eax
   14382:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   14386:	0f b6 c0             	movzbl %al,%eax
   14389:	83 ec 08             	sub    $0x8,%esp
   1438c:	50                   	push   %eax
   1438d:	68 74 3c 02 00       	push   $0x23c74
   14392:	e8 b0 48 ff ff       	call   8c47 <printk>
   14397:	83 c4 10             	add    $0x10,%esp
	de->inode = 0;
   1439a:	8b 44 24 08          	mov    0x8(%esp),%eax
   1439e:	66 c7 00 00 00       	movw   $0x0,(%eax)
	bh->b_dirt = 1;
   143a3:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   143a7:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	brelse(bh);
   143ab:	83 ec 0c             	sub    $0xc,%esp
   143ae:	ff 74 24 28          	pushl  0x28(%esp)
   143b2:	e8 d9 b2 ff ff       	call   f690 <brelse>
   143b7:	83 c4 10             	add    $0x10,%esp
	inode->i_nlinks = 0;
   143ba:	8b 44 24 18          	mov    0x18(%esp),%eax
   143be:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
	inode->i_dirt = 1;
   143c2:	8b 44 24 18          	mov    0x18(%esp),%eax
   143c6:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	// 再将包含被删除目录名的目录的i节点链接计数减1,修改其改变时间和修改时间为当前时间，并置该节点已修改标志。最后放回包含要删除
	// 目录名的目录i节点和该要删除目录的i节点，返回0（删除操作成功）。
	dir->i_nlinks--;
   143ca:	8b 44 24 0c          	mov    0xc(%esp),%eax
   143ce:	0f b6 50 0d          	movzbl 0xd(%eax),%edx
   143d2:	83 ea 01             	sub    $0x1,%edx
   143d5:	88 50 0d             	mov    %dl,0xd(%eax)
	dir->i_ctime = dir->i_mtime = CURRENT_TIME;
   143d8:	8b 5c 24 0c          	mov    0xc(%esp),%ebx
   143dc:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   143e0:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   143e5:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
   143eb:	01 d0                	add    %edx,%eax
   143ed:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   143f2:	f7 e2                	mul    %edx
   143f4:	c1 ea 05             	shr    $0x5,%edx
   143f7:	a1 04 eb 02 00       	mov    0x2eb04,%eax
   143fc:	01 d0                	add    %edx,%eax
   143fe:	89 41 08             	mov    %eax,0x8(%ecx)
   14401:	8b 41 08             	mov    0x8(%ecx),%eax
   14404:	89 43 2c             	mov    %eax,0x2c(%ebx)
	dir->i_dirt = 1;
   14407:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1440b:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	iput(dir);
   1440f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14413:	83 ec 0c             	sub    $0xc,%esp
   14416:	50                   	push   %eax
   14417:	e8 d3 a2 ff ff       	call   e6ef <iput>
   1441c:	83 c4 10             	add    $0x10,%esp
	iput(inode);
   1441f:	83 ec 0c             	sub    $0xc,%esp
   14422:	ff 74 24 24          	pushl  0x24(%esp)
   14426:	e8 c4 a2 ff ff       	call   e6ef <iput>
   1442b:	83 c4 10             	add    $0x10,%esp
	return 0;
   1442e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14433:	83 c4 28             	add    $0x28,%esp
   14436:	5b                   	pop    %ebx
   14437:	c3                   	ret    

00014438 <sys_unlink>:
// 删除（释放）文件名对应的目录项。
// 从文件系统删除一个名字。如果是文件的最后一个链接，并且没有进程正打开该文件，则该文件也将被删除，并释放所占用的设备空间。
// 参数：name - 文件名（路径名）。
// 返回：成功则返回0,否则返回出错号。
int sys_unlink(const char * name)
{
   14438:	83 ec 2c             	sub    $0x2c,%esp
	struct dir_entry * de;

	// 首先检查参数的有效性并取路径名中顶层目录的i节点。如果找不到对应路径名中顶层目录的i节点，则返回出错码。如果最顶端
	// 文件名长度为0,则说明给出的路径名最后没有指定文件名，放回该目录i节点，返回出错码退出。如果在该目录中没有写的权限，
	// 则放回该目录i节点，返回访问许可出错码退出。如果不是超级用户，则返回访问许可出错码。
	if (!(dir = dir_namei(name, &namelen, &basename, NULL)))
   1443b:	6a 00                	push   $0x0
   1443d:	8d 44 24 18          	lea    0x18(%esp),%eax
   14441:	50                   	push   %eax
   14442:	8d 44 24 18          	lea    0x18(%esp),%eax
   14446:	50                   	push   %eax
   14447:	ff 74 24 3c          	pushl  0x3c(%esp)
   1444b:	e8 0a ef ff ff       	call   1335a <dir_namei>
   14450:	83 c4 10             	add    $0x10,%esp
   14453:	89 44 24 0c          	mov    %eax,0xc(%esp)
   14457:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1445b:	85 c0                	test   %eax,%eax
   1445d:	75 0a                	jne    14469 <sys_unlink+0x31>
		return -ENOENT;
   1445f:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   14464:	e9 8d 02 00 00       	jmp    146f6 <sys_unlink+0x2be>
	if (!namelen) {
   14469:	8b 44 24 10          	mov    0x10(%esp),%eax
   1446d:	85 c0                	test   %eax,%eax
   1446f:	75 1a                	jne    1448b <sys_unlink+0x53>
		iput(dir);
   14471:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14475:	83 ec 0c             	sub    $0xc,%esp
   14478:	50                   	push   %eax
   14479:	e8 71 a2 ff ff       	call   e6ef <iput>
   1447e:	83 c4 10             	add    $0x10,%esp
		return -ENOENT;
   14481:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   14486:	e9 6b 02 00 00       	jmp    146f6 <sys_unlink+0x2be>
	}
	if (!permission(dir, MAY_WRITE)) {
   1448b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1448f:	83 ec 08             	sub    $0x8,%esp
   14492:	6a 02                	push   $0x2
   14494:	50                   	push   %eax
   14495:	e8 0f e6 ff ff       	call   12aa9 <permission>
   1449a:	83 c4 10             	add    $0x10,%esp
   1449d:	85 c0                	test   %eax,%eax
   1449f:	75 1a                	jne    144bb <sys_unlink+0x83>
		iput(dir);
   144a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   144a5:	83 ec 0c             	sub    $0xc,%esp
   144a8:	50                   	push   %eax
   144a9:	e8 41 a2 ff ff       	call   e6ef <iput>
   144ae:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   144b1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   144b6:	e9 3b 02 00 00       	jmp    146f6 <sys_unlink+0x2be>
	}
	// 然后根据指定目录的i节点和目录名利用函数find_entry()寻找对应目录项，并返回包含该目录项的缓冲块指针bh、包含该目录
	// 项的目录的i节点指针dir和该目录项指针de。再根据该目录项de中的i节点号利用iget()函数得到对应的i节点inode。如果对应
	// 路径名上最后目录的名的目录项不存在，则释放包含该目录项的高速缓冲区，放回目录的i节点，返回文件不存在出错码，并退出。
	// 如果取目录项的i节点出错，则放回目录的i节点，并释放含有目录项的高速缓冲区，返回出错号。
	bh = find_entry(&dir, basename, namelen, &de);
   144bb:	8b 54 24 10          	mov    0x10(%esp),%edx
   144bf:	8b 44 24 14          	mov    0x14(%esp),%eax
   144c3:	8d 4c 24 08          	lea    0x8(%esp),%ecx
   144c7:	51                   	push   %ecx
   144c8:	52                   	push   %edx
   144c9:	50                   	push   %eax
   144ca:	8d 44 24 18          	lea    0x18(%esp),%eax
   144ce:	50                   	push   %eax
   144cf:	e8 09 e7 ff ff       	call   12bdd <find_entry>
   144d4:	83 c4 10             	add    $0x10,%esp
   144d7:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!bh) {
   144db:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   144e0:	75 1a                	jne    144fc <sys_unlink+0xc4>
		iput(dir);
   144e2:	8b 44 24 0c          	mov    0xc(%esp),%eax
   144e6:	83 ec 0c             	sub    $0xc,%esp
   144e9:	50                   	push   %eax
   144ea:	e8 00 a2 ff ff       	call   e6ef <iput>
   144ef:	83 c4 10             	add    $0x10,%esp
		return -ENOENT;
   144f2:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   144f7:	e9 fa 01 00 00       	jmp    146f6 <sys_unlink+0x2be>
	}
	if (!(inode = iget(dir->i_dev, de->inode))) {
   144fc:	8b 44 24 08          	mov    0x8(%esp),%eax
   14500:	0f b7 00             	movzwl (%eax),%eax
   14503:	0f b7 d0             	movzwl %ax,%edx
   14506:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1450a:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   1450e:	0f b7 c0             	movzwl %ax,%eax
   14511:	83 ec 08             	sub    $0x8,%esp
   14514:	52                   	push   %edx
   14515:	50                   	push   %eax
   14516:	e8 66 a5 ff ff       	call   ea81 <iget>
   1451b:	83 c4 10             	add    $0x10,%esp
   1451e:	89 44 24 18          	mov    %eax,0x18(%esp)
   14522:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   14527:	75 29                	jne    14552 <sys_unlink+0x11a>
		iput(dir);
   14529:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1452d:	83 ec 0c             	sub    $0xc,%esp
   14530:	50                   	push   %eax
   14531:	e8 b9 a1 ff ff       	call   e6ef <iput>
   14536:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   14539:	83 ec 0c             	sub    $0xc,%esp
   1453c:	ff 74 24 28          	pushl  0x28(%esp)
   14540:	e8 4b b1 ff ff       	call   f690 <brelse>
   14545:	83 c4 10             	add    $0x10,%esp
		return -ENOENT;
   14548:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   1454d:	e9 a4 01 00 00       	jmp    146f6 <sys_unlink+0x2be>
	// 此时我们已有包含要被删除目录项的目录i节点dir、要被删除目录项的i节点inode和要被删除目录项指针de。下面我们通过对这3
	// 个对象中信息的检查来验证删除操作的可行性。
	// 若该目录设置了受限删除标志并且进程的有效用户id（euid）不是root，并且进程的有效用户id（euid）不等于该i节点的用户
	// id，并且进程的euid也不等于目录i节点的用户id，则表示当前进程没有权限删除该目录，于是放回包含要删除目录名的目录i节点
	// 和该要删除目录的i节点，然后释放高速缓冲区，返回出错码。
	if ((dir->i_mode & S_ISVTX) && !suser() &&
   14552:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14556:	0f b7 00             	movzwl (%eax),%eax
   14559:	0f b7 c0             	movzwl %ax,%eax
   1455c:	25 00 02 00 00       	and    $0x200,%eax
   14561:	85 c0                	test   %eax,%eax
   14563:	74 7b                	je     145e0 <sys_unlink+0x1a8>
   14565:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1456a:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
   14571:	66 85 c0             	test   %ax,%ax
   14574:	74 6a                	je     145e0 <sys_unlink+0x1a8>
	    current->euid != inode->i_uid &&
   14576:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1457b:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
   14582:	8b 44 24 18          	mov    0x18(%esp),%eax
   14586:	0f b7 40 02          	movzwl 0x2(%eax),%eax
	// 此时我们已有包含要被删除目录项的目录i节点dir、要被删除目录项的i节点inode和要被删除目录项指针de。下面我们通过对这3
	// 个对象中信息的检查来验证删除操作的可行性。
	// 若该目录设置了受限删除标志并且进程的有效用户id（euid）不是root，并且进程的有效用户id（euid）不等于该i节点的用户
	// id，并且进程的euid也不等于目录i节点的用户id，则表示当前进程没有权限删除该目录，于是放回包含要删除目录名的目录i节点
	// 和该要删除目录的i节点，然后释放高速缓冲区，返回出错码。
	if ((dir->i_mode & S_ISVTX) && !suser() &&
   1458a:	66 39 c2             	cmp    %ax,%dx
   1458d:	74 51                	je     145e0 <sys_unlink+0x1a8>
	    current->euid != inode->i_uid &&
	    current->euid != dir->i_uid) {
   1458f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   14594:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
   1459b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1459f:	0f b7 40 02          	movzwl 0x2(%eax),%eax
	// 个对象中信息的检查来验证删除操作的可行性。
	// 若该目录设置了受限删除标志并且进程的有效用户id（euid）不是root，并且进程的有效用户id（euid）不等于该i节点的用户
	// id，并且进程的euid也不等于目录i节点的用户id，则表示当前进程没有权限删除该目录，于是放回包含要删除目录名的目录i节点
	// 和该要删除目录的i节点，然后释放高速缓冲区，返回出错码。
	if ((dir->i_mode & S_ISVTX) && !suser() &&
	    current->euid != inode->i_uid &&
   145a3:	66 39 c2             	cmp    %ax,%dx
   145a6:	74 38                	je     145e0 <sys_unlink+0x1a8>
	    current->euid != dir->i_uid) {
		iput(dir);
   145a8:	8b 44 24 0c          	mov    0xc(%esp),%eax
   145ac:	83 ec 0c             	sub    $0xc,%esp
   145af:	50                   	push   %eax
   145b0:	e8 3a a1 ff ff       	call   e6ef <iput>
   145b5:	83 c4 10             	add    $0x10,%esp
		iput(inode);
   145b8:	83 ec 0c             	sub    $0xc,%esp
   145bb:	ff 74 24 24          	pushl  0x24(%esp)
   145bf:	e8 2b a1 ff ff       	call   e6ef <iput>
   145c4:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   145c7:	83 ec 0c             	sub    $0xc,%esp
   145ca:	ff 74 24 28          	pushl  0x28(%esp)
   145ce:	e8 bd b0 ff ff       	call   f690 <brelse>
   145d3:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   145d6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   145db:	e9 16 01 00 00       	jmp    146f6 <sys_unlink+0x2be>
	}
	// 如果该指定文件名是一个目录，则也不能删除。放回该目录i节点和该文件名目录项的i节点，释放包含该目录项的缓冲块，返回出错号。
	if (S_ISDIR(inode->i_mode)) {
   145e0:	8b 44 24 18          	mov    0x18(%esp),%eax
   145e4:	0f b7 00             	movzwl (%eax),%eax
   145e7:	0f b7 c0             	movzwl %ax,%eax
   145ea:	25 00 f0 00 00       	and    $0xf000,%eax
   145ef:	3d 00 40 00 00       	cmp    $0x4000,%eax
   145f4:	75 38                	jne    1462e <sys_unlink+0x1f6>
		iput(inode);
   145f6:	83 ec 0c             	sub    $0xc,%esp
   145f9:	ff 74 24 24          	pushl  0x24(%esp)
   145fd:	e8 ed a0 ff ff       	call   e6ef <iput>
   14602:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   14605:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14609:	83 ec 0c             	sub    $0xc,%esp
   1460c:	50                   	push   %eax
   1460d:	e8 dd a0 ff ff       	call   e6ef <iput>
   14612:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   14615:	83 ec 0c             	sub    $0xc,%esp
   14618:	ff 74 24 28          	pushl  0x28(%esp)
   1461c:	e8 6f b0 ff ff       	call   f690 <brelse>
   14621:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   14624:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14629:	e9 c8 00 00 00       	jmp    146f6 <sys_unlink+0x2be>
	}
	// 如果该i节点的链接计数值已经为0,则显示警告信息，并修正其为1。
	if (!inode->i_nlinks) {
   1462e:	8b 44 24 18          	mov    0x18(%esp),%eax
   14632:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   14636:	84 c0                	test   %al,%al
   14638:	75 39                	jne    14673 <sys_unlink+0x23b>
		printk("Deleting nonexistent file (%04x:%d), %d\n",
			inode->i_dev, inode->i_num, inode->i_nlinks);
   1463a:	8b 44 24 18          	mov    0x18(%esp),%eax
   1463e:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
		brelse(bh);
		return -EPERM;
	}
	// 如果该i节点的链接计数值已经为0,则显示警告信息，并修正其为1。
	if (!inode->i_nlinks) {
		printk("Deleting nonexistent file (%04x:%d), %d\n",
   14642:	0f b6 c8             	movzbl %al,%ecx
			inode->i_dev, inode->i_num, inode->i_nlinks);
   14645:	8b 44 24 18          	mov    0x18(%esp),%eax
   14649:	0f b7 40 32          	movzwl 0x32(%eax),%eax
		brelse(bh);
		return -EPERM;
	}
	// 如果该i节点的链接计数值已经为0,则显示警告信息，并修正其为1。
	if (!inode->i_nlinks) {
		printk("Deleting nonexistent file (%04x:%d), %d\n",
   1464d:	0f b7 d0             	movzwl %ax,%edx
			inode->i_dev, inode->i_num, inode->i_nlinks);
   14650:	8b 44 24 18          	mov    0x18(%esp),%eax
   14654:	0f b7 40 30          	movzwl 0x30(%eax),%eax
		brelse(bh);
		return -EPERM;
	}
	// 如果该i节点的链接计数值已经为0,则显示警告信息，并修正其为1。
	if (!inode->i_nlinks) {
		printk("Deleting nonexistent file (%04x:%d), %d\n",
   14658:	0f b7 c0             	movzwl %ax,%eax
   1465b:	51                   	push   %ecx
   1465c:	52                   	push   %edx
   1465d:	50                   	push   %eax
   1465e:	68 98 3c 02 00       	push   $0x23c98
   14663:	e8 df 45 ff ff       	call   8c47 <printk>
   14668:	83 c4 10             	add    $0x10,%esp
			inode->i_dev, inode->i_num, inode->i_nlinks);
		inode->i_nlinks = 1;
   1466b:	8b 44 24 18          	mov    0x18(%esp),%eax
   1466f:	c6 40 0d 01          	movb   $0x1,0xd(%eax)
	}
	// 现在我们可以删除文件名对应的目录项了。于是将该文件名目录项中的i节点号字段置为0,表示释放该目录项，并设置包含该目录项的缓
	// 冲块已修改标志，释放该高速缓冲块。
	de->inode = 0;
   14673:	8b 44 24 08          	mov    0x8(%esp),%eax
   14677:	66 c7 00 00 00       	movw   $0x0,(%eax)
	bh->b_dirt = 1;
   1467c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14680:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	brelse(bh);
   14684:	83 ec 0c             	sub    $0xc,%esp
   14687:	ff 74 24 28          	pushl  0x28(%esp)
   1468b:	e8 00 b0 ff ff       	call   f690 <brelse>
   14690:	83 c4 10             	add    $0x10,%esp
	// 然后把文件名对应i节点的链接数减1,置已修改标志，更新改变时间为当前时间。最后放回该i节点和目录的i节点，返回0（成功）。如果
	// 是文件的最后一个链接，即i节点链接数减1后等于0,并且此时没有进程正打开该文件，那么在调用iput()放回i节点时，该文件也将被删除
	// 并释放所占用的设备空间。参见fs/inode.c。
	inode->i_nlinks--;
   14693:	8b 44 24 18          	mov    0x18(%esp),%eax
   14697:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   1469b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1469e:	8b 44 24 18          	mov    0x18(%esp),%eax
   146a2:	88 50 0d             	mov    %dl,0xd(%eax)
	inode->i_dirt = 1;
   146a5:	8b 44 24 18          	mov    0x18(%esp),%eax
   146a9:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	inode->i_ctime = CURRENT_TIME;
   146ad:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   146b2:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
   146b8:	01 d0                	add    %edx,%eax
   146ba:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   146bf:	f7 e2                	mul    %edx
   146c1:	c1 ea 05             	shr    $0x5,%edx
   146c4:	a1 04 eb 02 00       	mov    0x2eb04,%eax
   146c9:	01 c2                	add    %eax,%edx
   146cb:	8b 44 24 18          	mov    0x18(%esp),%eax
   146cf:	89 50 2c             	mov    %edx,0x2c(%eax)
	iput(inode);
   146d2:	83 ec 0c             	sub    $0xc,%esp
   146d5:	ff 74 24 24          	pushl  0x24(%esp)
   146d9:	e8 11 a0 ff ff       	call   e6ef <iput>
   146de:	83 c4 10             	add    $0x10,%esp
	iput(dir);
   146e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   146e5:	83 ec 0c             	sub    $0xc,%esp
   146e8:	50                   	push   %eax
   146e9:	e8 01 a0 ff ff       	call   e6ef <iput>
   146ee:	83 c4 10             	add    $0x10,%esp
	return 0;
   146f1:	b8 00 00 00 00       	mov    $0x0,%eax
}
   146f6:	83 c4 2c             	add    $0x2c,%esp
   146f9:	c3                   	ret    

000146fa <sys_symlink>:
// 建立符号链接。
// 为一个已存在文件创建一个符号链接（也称为软连接 - hard link）。
// 参数：oldname - 原路径名；newname - 新的路径名。
// 返回：若成功则返回0，否则返回出错号。
int sys_symlink(const char * oldname, const char * newname)
{
   146fa:	53                   	push   %ebx
   146fb:	83 ec 38             	sub    $0x38,%esp
	char c;

	// 首先查找新路径名的最顶层目录的i节点dir，并返回最后的文件名及其长度。如果目录的i节点没有找到，则返回出错号。如果新路径名
	// 中不包括文件名，则放回新路径名目录的i节点，返回出错号。另外，如果用户没有在新目录中写的权限，则也不能建立连接，于是放回
	// 新路径名目录的i节点，返回出错号。
	dir = dir_namei(newname, &namelen, &basename, NULL);
   146fe:	6a 00                	push   $0x0
   14700:	8d 44 24 14          	lea    0x14(%esp),%eax
   14704:	50                   	push   %eax
   14705:	8d 44 24 14          	lea    0x14(%esp),%eax
   14709:	50                   	push   %eax
   1470a:	ff 74 24 50          	pushl  0x50(%esp)
   1470e:	e8 47 ec ff ff       	call   1335a <dir_namei>
   14713:	83 c4 10             	add    $0x10,%esp
   14716:	89 44 24 14          	mov    %eax,0x14(%esp)
	if (!dir)
   1471a:	8b 44 24 14          	mov    0x14(%esp),%eax
   1471e:	85 c0                	test   %eax,%eax
   14720:	75 0a                	jne    1472c <sys_symlink+0x32>
		return -EACCES;
   14722:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
   14727:	e9 33 03 00 00       	jmp    14a5f <sys_symlink+0x365>
	if (!namelen) {
   1472c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14730:	85 c0                	test   %eax,%eax
   14732:	75 1a                	jne    1474e <sys_symlink+0x54>
		iput(dir);
   14734:	8b 44 24 14          	mov    0x14(%esp),%eax
   14738:	83 ec 0c             	sub    $0xc,%esp
   1473b:	50                   	push   %eax
   1473c:	e8 ae 9f ff ff       	call   e6ef <iput>
   14741:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   14744:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14749:	e9 11 03 00 00       	jmp    14a5f <sys_symlink+0x365>
	}
	if (!permission(dir, MAY_WRITE)) {
   1474e:	8b 44 24 14          	mov    0x14(%esp),%eax
   14752:	83 ec 08             	sub    $0x8,%esp
   14755:	6a 02                	push   $0x2
   14757:	50                   	push   %eax
   14758:	e8 4c e3 ff ff       	call   12aa9 <permission>
   1475d:	83 c4 10             	add    $0x10,%esp
   14760:	85 c0                	test   %eax,%eax
   14762:	75 1a                	jne    1477e <sys_symlink+0x84>
		iput(dir);
   14764:	8b 44 24 14          	mov    0x14(%esp),%eax
   14768:	83 ec 0c             	sub    $0xc,%esp
   1476b:	50                   	push   %eax
   1476c:	e8 7e 9f ff ff       	call   e6ef <iput>
   14771:	83 c4 10             	add    $0x10,%esp
		return -EACCES;
   14774:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
   14779:	e9 e1 02 00 00       	jmp    14a5f <sys_symlink+0x365>
	}
	// 现在我们在目录指定设备上申请一个新的i节点，并设置该i节点模式为符号链接类型以及进程规定的模式屏蔽码。并且设置该i节点已修
	// 改标志。
	if (!(inode = new_inode(dir->i_dev))) {
   1477e:	8b 44 24 14          	mov    0x14(%esp),%eax
   14782:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   14786:	0f b7 c0             	movzwl %ax,%eax
   14789:	83 ec 0c             	sub    $0xc,%esp
   1478c:	50                   	push   %eax
   1478d:	e8 2c 0a 00 00       	call   151be <new_inode>
   14792:	83 c4 10             	add    $0x10,%esp
   14795:	89 44 24 28          	mov    %eax,0x28(%esp)
   14799:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   1479e:	75 1a                	jne    147ba <sys_symlink+0xc0>
		iput(dir);
   147a0:	8b 44 24 14          	mov    0x14(%esp),%eax
   147a4:	83 ec 0c             	sub    $0xc,%esp
   147a7:	50                   	push   %eax
   147a8:	e8 42 9f ff ff       	call   e6ef <iput>
   147ad:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   147b0:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   147b5:	e9 a5 02 00 00       	jmp    14a5f <sys_symlink+0x365>
	}
	inode->i_mode = S_IFLNK | (0777 & ~current->umask);
   147ba:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   147bf:	0f b7 80 30 03 00 00 	movzwl 0x330(%eax),%eax
   147c6:	f7 d0                	not    %eax
   147c8:	66 25 ff 01          	and    $0x1ff,%ax
   147cc:	66 0d 00 a0          	or     $0xa000,%ax
   147d0:	89 c2                	mov    %eax,%edx
   147d2:	8b 44 24 28          	mov    0x28(%esp),%eax
   147d6:	66 89 10             	mov    %dx,(%eax)
	inode->i_dirt = 1;
   147d9:	8b 44 24 28          	mov    0x28(%esp),%eax
   147dd:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	// 为了保存符号链接路径名字符串信息，我们需要为该i节点申请一个磁盘块，并让i节点的第1个直接块号i_zone[0]等于得到的逻辑块号。
	// 然后置i节点已修改标志。如果申请失败则放回对应目录的i节点；复位新申请的i节点链接计数；放回该新的i节点，返回没有空间出错码
	// 退出。
	if (!(inode->i_zone[0] = new_block(inode->i_dev))) {
   147e1:	8b 44 24 28          	mov    0x28(%esp),%eax
   147e5:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   147e9:	0f b7 c0             	movzwl %ax,%eax
   147ec:	83 ec 0c             	sub    $0xc,%esp
   147ef:	50                   	push   %eax
   147f0:	e8 94 06 00 00       	call   14e89 <new_block>
   147f5:	83 c4 10             	add    $0x10,%esp
   147f8:	89 c2                	mov    %eax,%edx
   147fa:	8b 44 24 28          	mov    0x28(%esp),%eax
   147fe:	66 89 50 0e          	mov    %dx,0xe(%eax)
   14802:	8b 44 24 28          	mov    0x28(%esp),%eax
   14806:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   1480a:	66 85 c0             	test   %ax,%ax
   1480d:	75 3b                	jne    1484a <sys_symlink+0x150>
		iput(dir);
   1480f:	8b 44 24 14          	mov    0x14(%esp),%eax
   14813:	83 ec 0c             	sub    $0xc,%esp
   14816:	50                   	push   %eax
   14817:	e8 d3 9e ff ff       	call   e6ef <iput>
   1481c:	83 c4 10             	add    $0x10,%esp
		inode->i_nlinks--;
   1481f:	8b 44 24 28          	mov    0x28(%esp),%eax
   14823:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   14827:	8d 50 ff             	lea    -0x1(%eax),%edx
   1482a:	8b 44 24 28          	mov    0x28(%esp),%eax
   1482e:	88 50 0d             	mov    %dl,0xd(%eax)
		iput(inode);
   14831:	83 ec 0c             	sub    $0xc,%esp
   14834:	ff 74 24 34          	pushl  0x34(%esp)
   14838:	e8 b2 9e ff ff       	call   e6ef <iput>
   1483d:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   14840:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   14845:	e9 15 02 00 00       	jmp    14a5f <sys_symlink+0x365>
	}
	inode->i_dirt = 1;
   1484a:	8b 44 24 28          	mov    0x28(%esp),%eax
   1484e:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	// 然后从设备上读取新申请的磁盘块（目的是把对应块放到高速缓冲区中）。若出错，则放回对应目录的i节点；复位新申请的i节点链接计数；
	// 放回该新的i节点，返回没有空间出错码退出。
	if (!(name_block = bread(inode->i_dev, inode->i_zone[0]))) {
   14852:	8b 44 24 28          	mov    0x28(%esp),%eax
   14856:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   1485a:	0f b7 d0             	movzwl %ax,%edx
   1485d:	8b 44 24 28          	mov    0x28(%esp),%eax
   14861:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   14865:	0f b7 c0             	movzwl %ax,%eax
   14868:	83 ec 08             	sub    $0x8,%esp
   1486b:	52                   	push   %edx
   1486c:	50                   	push   %eax
   1486d:	e8 74 ae ff ff       	call   f6e6 <bread>
   14872:	83 c4 10             	add    $0x10,%esp
   14875:	89 44 24 24          	mov    %eax,0x24(%esp)
   14879:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   1487e:	75 3b                	jne    148bb <sys_symlink+0x1c1>
		iput(dir);
   14880:	8b 44 24 14          	mov    0x14(%esp),%eax
   14884:	83 ec 0c             	sub    $0xc,%esp
   14887:	50                   	push   %eax
   14888:	e8 62 9e ff ff       	call   e6ef <iput>
   1488d:	83 c4 10             	add    $0x10,%esp
		inode->i_nlinks--;
   14890:	8b 44 24 28          	mov    0x28(%esp),%eax
   14894:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   14898:	8d 50 ff             	lea    -0x1(%eax),%edx
   1489b:	8b 44 24 28          	mov    0x28(%esp),%eax
   1489f:	88 50 0d             	mov    %dl,0xd(%eax)
		iput(inode);
   148a2:	83 ec 0c             	sub    $0xc,%esp
   148a5:	ff 74 24 34          	pushl  0x34(%esp)
   148a9:	e8 41 9e ff ff       	call   e6ef <iput>
   148ae:	83 c4 10             	add    $0x10,%esp
		return -ERROR;
   148b1:	b8 9d ff ff ff       	mov    $0xffffff9d,%eax
   148b6:	e9 a4 01 00 00       	jmp    14a5f <sys_symlink+0x365>
	}
	// 现在我们可以把符号链接名字字符串放入这个盘块中了。盘块长度为1024字节，因此默认符号链接名长度最大也只能是1024字节。我们把用
	// 户空间中的符号链接名字符串复制到盘块所在的缓冲块中，并置缓冲块已修改标志。为防止用户提供的字符串没有以NULL结尾，我们在缓冲块
	// 数据区最后一个字节处放上一个NULL。然后释放该缓冲块，并设置i节点对应文件中数据长度等于符号链接名字符串长度，并置i节点已修改
	// 标志。
	i = 0;
   148bb:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%esp)
   148c2:	00 
	while (i < 1023 && (c = get_fs_byte(oldname++)))
   148c3:	eb 1b                	jmp    148e0 <sys_symlink+0x1e6>
		name_block->b_data[i++] = c;
   148c5:	8b 44 24 24          	mov    0x24(%esp),%eax
   148c9:	8b 08                	mov    (%eax),%ecx
   148cb:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   148cf:	8d 50 01             	lea    0x1(%eax),%edx
   148d2:	89 54 24 2c          	mov    %edx,0x2c(%esp)
   148d6:	8d 14 01             	lea    (%ecx,%eax,1),%edx
   148d9:	0f b6 44 24 23       	movzbl 0x23(%esp),%eax
   148de:	88 02                	mov    %al,(%edx)
	// 现在我们可以把符号链接名字字符串放入这个盘块中了。盘块长度为1024字节，因此默认符号链接名长度最大也只能是1024字节。我们把用
	// 户空间中的符号链接名字符串复制到盘块所在的缓冲块中，并置缓冲块已修改标志。为防止用户提供的字符串没有以NULL结尾，我们在缓冲块
	// 数据区最后一个字节处放上一个NULL。然后释放该缓冲块，并设置i节点对应文件中数据长度等于符号链接名字符串长度，并置i节点已修改
	// 标志。
	i = 0;
	while (i < 1023 && (c = get_fs_byte(oldname++)))
   148e0:	81 7c 24 2c fe 03 00 	cmpl   $0x3fe,0x2c(%esp)
   148e7:	00 
   148e8:	7f 22                	jg     1490c <sys_symlink+0x212>
   148ea:	8b 44 24 40          	mov    0x40(%esp),%eax
   148ee:	8d 50 01             	lea    0x1(%eax),%edx
   148f1:	89 54 24 40          	mov    %edx,0x40(%esp)
   148f5:	83 ec 0c             	sub    $0xc,%esp
   148f8:	50                   	push   %eax
   148f9:	e8 5a e1 ff ff       	call   12a58 <get_fs_byte>
   148fe:	83 c4 10             	add    $0x10,%esp
   14901:	88 44 24 23          	mov    %al,0x23(%esp)
   14905:	80 7c 24 23 00       	cmpb   $0x0,0x23(%esp)
   1490a:	75 b9                	jne    148c5 <sys_symlink+0x1cb>
		name_block->b_data[i++] = c;
	name_block->b_data[i] = 0;
   1490c:	8b 44 24 24          	mov    0x24(%esp),%eax
   14910:	8b 10                	mov    (%eax),%edx
   14912:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   14916:	01 d0                	add    %edx,%eax
   14918:	c6 00 00             	movb   $0x0,(%eax)
	name_block->b_dirt = 1;
   1491b:	8b 44 24 24          	mov    0x24(%esp),%eax
   1491f:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	brelse(name_block);
   14923:	83 ec 0c             	sub    $0xc,%esp
   14926:	ff 74 24 30          	pushl  0x30(%esp)
   1492a:	e8 61 ad ff ff       	call   f690 <brelse>
   1492f:	83 c4 10             	add    $0x10,%esp
	inode->i_size = i;
   14932:	8b 54 24 2c          	mov    0x2c(%esp),%edx
   14936:	8b 44 24 28          	mov    0x28(%esp),%eax
   1493a:	89 50 04             	mov    %edx,0x4(%eax)
	inode->i_dirt = 1;
   1493d:	8b 44 24 28          	mov    0x28(%esp),%eax
   14941:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	// 然后我们搜索一下路径名指定的符号链接名是否已经存在。若已经存在则不能创建同名目录项i节点。如果对应符号链接文件名已经存在，则
	// 释放包含该目录项的缓冲区块，复位新申请的i节点连接计数，并施加目录的i节点，返回文件已经存在的出错码退出。
	bh = find_entry(&dir, basename, namelen, &de);
   14945:	8b 54 24 0c          	mov    0xc(%esp),%edx
   14949:	8b 44 24 10          	mov    0x10(%esp),%eax
   1494d:	8d 4c 24 18          	lea    0x18(%esp),%ecx
   14951:	51                   	push   %ecx
   14952:	52                   	push   %edx
   14953:	50                   	push   %eax
   14954:	8d 44 24 20          	lea    0x20(%esp),%eax
   14958:	50                   	push   %eax
   14959:	e8 7f e2 ff ff       	call   12bdd <find_entry>
   1495e:	83 c4 10             	add    $0x10,%esp
   14961:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (bh) {
   14965:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   1496a:	74 4a                	je     149b6 <sys_symlink+0x2bc>
		inode->i_nlinks--;
   1496c:	8b 44 24 28          	mov    0x28(%esp),%eax
   14970:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   14974:	8d 50 ff             	lea    -0x1(%eax),%edx
   14977:	8b 44 24 28          	mov    0x28(%esp),%eax
   1497b:	88 50 0d             	mov    %dl,0xd(%eax)
		iput(inode);
   1497e:	83 ec 0c             	sub    $0xc,%esp
   14981:	ff 74 24 34          	pushl  0x34(%esp)
   14985:	e8 65 9d ff ff       	call   e6ef <iput>
   1498a:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   1498d:	83 ec 0c             	sub    $0xc,%esp
   14990:	ff 74 24 28          	pushl  0x28(%esp)
   14994:	e8 f7 ac ff ff       	call   f690 <brelse>
   14999:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   1499c:	8b 44 24 14          	mov    0x14(%esp),%eax
   149a0:	83 ec 0c             	sub    $0xc,%esp
   149a3:	50                   	push   %eax
   149a4:	e8 46 9d ff ff       	call   e6ef <iput>
   149a9:	83 c4 10             	add    $0x10,%esp
		return -EEXIST;
   149ac:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
   149b1:	e9 a9 00 00 00       	jmp    14a5f <sys_symlink+0x365>
	}
	// 现在我们在指定目录中新添加一个目录项，用于存放新建符号链接文件名的i节点号和目录名。如果失败（包含该目录项的高速缓冲区指针为
	// NULL），则放回目录的i节点；所申请的i节点引用链接计数复位，并放回该i节点。返回出错码退出。
	bh = add_entry(dir, basename, namelen, &de);
   149b6:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   149ba:	8b 54 24 10          	mov    0x10(%esp),%edx
   149be:	8b 44 24 14          	mov    0x14(%esp),%eax
   149c2:	8d 5c 24 18          	lea    0x18(%esp),%ebx
   149c6:	53                   	push   %ebx
   149c7:	51                   	push   %ecx
   149c8:	52                   	push   %edx
   149c9:	50                   	push   %eax
   149ca:	e8 4c e4 ff ff       	call   12e1b <add_entry>
   149cf:	83 c4 10             	add    $0x10,%esp
   149d2:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!bh) {
   149d6:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   149db:	75 38                	jne    14a15 <sys_symlink+0x31b>
		inode->i_nlinks--;
   149dd:	8b 44 24 28          	mov    0x28(%esp),%eax
   149e1:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   149e5:	8d 50 ff             	lea    -0x1(%eax),%edx
   149e8:	8b 44 24 28          	mov    0x28(%esp),%eax
   149ec:	88 50 0d             	mov    %dl,0xd(%eax)
		iput(inode);
   149ef:	83 ec 0c             	sub    $0xc,%esp
   149f2:	ff 74 24 34          	pushl  0x34(%esp)
   149f6:	e8 f4 9c ff ff       	call   e6ef <iput>
   149fb:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   149fe:	8b 44 24 14          	mov    0x14(%esp),%eax
   14a02:	83 ec 0c             	sub    $0xc,%esp
   14a05:	50                   	push   %eax
   14a06:	e8 e4 9c ff ff       	call   e6ef <iput>
   14a0b:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   14a0e:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   14a13:	eb 4a                	jmp    14a5f <sys_symlink+0x365>
	}
	// 最后令该新目录项的i节点字段等于新i节点号，并置高速缓冲块已修改标志，释放高速缓冲块，放回目录和新的i节点，最后返回0（成功）。
	de->inode = inode->i_num;
   14a15:	8b 44 24 18          	mov    0x18(%esp),%eax
   14a19:	8b 54 24 28          	mov    0x28(%esp),%edx
   14a1d:	0f b7 52 32          	movzwl 0x32(%edx),%edx
   14a21:	66 89 10             	mov    %dx,(%eax)
	bh->b_dirt = 1;
   14a24:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14a28:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	brelse(bh);
   14a2c:	83 ec 0c             	sub    $0xc,%esp
   14a2f:	ff 74 24 28          	pushl  0x28(%esp)
   14a33:	e8 58 ac ff ff       	call   f690 <brelse>
   14a38:	83 c4 10             	add    $0x10,%esp
	iput(dir);
   14a3b:	8b 44 24 14          	mov    0x14(%esp),%eax
   14a3f:	83 ec 0c             	sub    $0xc,%esp
   14a42:	50                   	push   %eax
   14a43:	e8 a7 9c ff ff       	call   e6ef <iput>
   14a48:	83 c4 10             	add    $0x10,%esp
	iput(inode);
   14a4b:	83 ec 0c             	sub    $0xc,%esp
   14a4e:	ff 74 24 34          	pushl  0x34(%esp)
   14a52:	e8 98 9c ff ff       	call   e6ef <iput>
   14a57:	83 c4 10             	add    $0x10,%esp
	return 0;
   14a5a:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14a5f:	83 c4 38             	add    $0x38,%esp
   14a62:	5b                   	pop    %ebx
   14a63:	c3                   	ret    

00014a64 <sys_link>:
// 为文件建立一个文件名目录项。
// 为一个已存在的文件创建一个新链接（也称为硬连接 - hard link）。
// 参数：oldname - 原路径名；newname - 新的路径名。
// 返回：若成功则返回0,否则返回出错号。
int sys_link(const char * oldname, const char * newname)
{
   14a64:	53                   	push   %ebx
   14a65:	83 ec 28             	sub    $0x28,%esp
	const char * basename;
	int namelen;

	// 首先对原文件名进行有效性验证，它应该存在并且不是一个目录名。所以我们先取原文件路径名对应的i节点oldinode。如果为0，则
	// 表示出错，返回出错号。如果原路径名对应的是一个目录名，则放回该i节点，也返回出错号。
	oldinode = namei(oldname);
   14a68:	83 ec 0c             	sub    $0xc,%esp
   14a6b:	ff 74 24 3c          	pushl  0x3c(%esp)
   14a6f:	e8 d0 ea ff ff       	call   13544 <namei>
   14a74:	83 c4 10             	add    $0x10,%esp
   14a77:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!oldinode)
   14a7b:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   14a80:	75 0a                	jne    14a8c <sys_link+0x28>
		return -ENOENT;
   14a82:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   14a87:	e9 52 02 00 00       	jmp    14cde <sys_link+0x27a>
	if (S_ISDIR(oldinode->i_mode)) {
   14a8c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14a90:	0f b7 00             	movzwl (%eax),%eax
   14a93:	0f b7 c0             	movzwl %ax,%eax
   14a96:	25 00 f0 00 00       	and    $0xf000,%eax
   14a9b:	3d 00 40 00 00       	cmp    $0x4000,%eax
   14aa0:	75 19                	jne    14abb <sys_link+0x57>
		iput(oldinode);
   14aa2:	83 ec 0c             	sub    $0xc,%esp
   14aa5:	ff 74 24 28          	pushl  0x28(%esp)
   14aa9:	e8 41 9c ff ff       	call   e6ef <iput>
   14aae:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   14ab1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14ab6:	e9 23 02 00 00       	jmp    14cde <sys_link+0x27a>
	}
	// 然后查找新路径名的最顶层目录的i节点dir，并返回最后的文件名及其长度。如果目录的i节点没有找到，则放回原路径名的i节点，返
	// 回出错号。如果新路径名中不包括文件名，则放回原路径名i节点和新路径名目录的i节点，返回出错号。
	dir = dir_namei(newname, &namelen, &basename, NULL);
   14abb:	6a 00                	push   $0x0
   14abd:	8d 44 24 10          	lea    0x10(%esp),%eax
   14ac1:	50                   	push   %eax
   14ac2:	8d 44 24 10          	lea    0x10(%esp),%eax
   14ac6:	50                   	push   %eax
   14ac7:	ff 74 24 40          	pushl  0x40(%esp)
   14acb:	e8 8a e8 ff ff       	call   1335a <dir_namei>
   14ad0:	83 c4 10             	add    $0x10,%esp
   14ad3:	89 44 24 10          	mov    %eax,0x10(%esp)
	if (!dir) {
   14ad7:	8b 44 24 10          	mov    0x10(%esp),%eax
   14adb:	85 c0                	test   %eax,%eax
   14add:	75 19                	jne    14af8 <sys_link+0x94>
		iput(oldinode);
   14adf:	83 ec 0c             	sub    $0xc,%esp
   14ae2:	ff 74 24 28          	pushl  0x28(%esp)
   14ae6:	e8 04 9c ff ff       	call   e6ef <iput>
   14aeb:	83 c4 10             	add    $0x10,%esp
		return -EACCES;
   14aee:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
   14af3:	e9 e6 01 00 00       	jmp    14cde <sys_link+0x27a>
	}
	if (!namelen) {
   14af8:	8b 44 24 08          	mov    0x8(%esp),%eax
   14afc:	85 c0                	test   %eax,%eax
   14afe:	75 29                	jne    14b29 <sys_link+0xc5>
		iput(oldinode);
   14b00:	83 ec 0c             	sub    $0xc,%esp
   14b03:	ff 74 24 28          	pushl  0x28(%esp)
   14b07:	e8 e3 9b ff ff       	call   e6ef <iput>
   14b0c:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   14b0f:	8b 44 24 10          	mov    0x10(%esp),%eax
   14b13:	83 ec 0c             	sub    $0xc,%esp
   14b16:	50                   	push   %eax
   14b17:	e8 d3 9b ff ff       	call   e6ef <iput>
   14b1c:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   14b1f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14b24:	e9 b5 01 00 00       	jmp    14cde <sys_link+0x27a>
	}
	// 我们不能跨设备建立硬链接。因此如果新路径名顶层目录的设备号与原路径名的设备号不一样，则放回新路径名目录的i节点和原路径名
	// 的i节点，返回出错号。另外，如果用户没有在新目录中写的权限，则也不能建立连接，于是放回新路径名目录的i节点和原路径名的i节点
	// 返回出错号。
	if (dir->i_dev != oldinode->i_dev) {
   14b29:	8b 44 24 10          	mov    0x10(%esp),%eax
   14b2d:	0f b7 50 30          	movzwl 0x30(%eax),%edx
   14b31:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14b35:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   14b39:	66 39 c2             	cmp    %ax,%dx
   14b3c:	74 29                	je     14b67 <sys_link+0x103>
		iput(dir);
   14b3e:	8b 44 24 10          	mov    0x10(%esp),%eax
   14b42:	83 ec 0c             	sub    $0xc,%esp
   14b45:	50                   	push   %eax
   14b46:	e8 a4 9b ff ff       	call   e6ef <iput>
   14b4b:	83 c4 10             	add    $0x10,%esp
		iput(oldinode);
   14b4e:	83 ec 0c             	sub    $0xc,%esp
   14b51:	ff 74 24 28          	pushl  0x28(%esp)
   14b55:	e8 95 9b ff ff       	call   e6ef <iput>
   14b5a:	83 c4 10             	add    $0x10,%esp
		return -EXDEV;
   14b5d:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
   14b62:	e9 77 01 00 00       	jmp    14cde <sys_link+0x27a>
	}
	if (!permission(dir, MAY_WRITE)) {
   14b67:	8b 44 24 10          	mov    0x10(%esp),%eax
   14b6b:	83 ec 08             	sub    $0x8,%esp
   14b6e:	6a 02                	push   $0x2
   14b70:	50                   	push   %eax
   14b71:	e8 33 df ff ff       	call   12aa9 <permission>
   14b76:	83 c4 10             	add    $0x10,%esp
   14b79:	85 c0                	test   %eax,%eax
   14b7b:	75 29                	jne    14ba6 <sys_link+0x142>
		iput(dir);
   14b7d:	8b 44 24 10          	mov    0x10(%esp),%eax
   14b81:	83 ec 0c             	sub    $0xc,%esp
   14b84:	50                   	push   %eax
   14b85:	e8 65 9b ff ff       	call   e6ef <iput>
   14b8a:	83 c4 10             	add    $0x10,%esp
		iput(oldinode);
   14b8d:	83 ec 0c             	sub    $0xc,%esp
   14b90:	ff 74 24 28          	pushl  0x28(%esp)
   14b94:	e8 56 9b ff ff       	call   e6ef <iput>
   14b99:	83 c4 10             	add    $0x10,%esp
		return -EACCES;
   14b9c:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
   14ba1:	e9 38 01 00 00       	jmp    14cde <sys_link+0x27a>
	}
	// 现在查询该新路径名是否已经存在，如果存在则也不能建立链接。于是释放包含该已存在目录项的高速缓冲块，放回新路径名目录的i节点
	// 和原路径名的i节点，返回出错号。
	bh = find_entry(&dir, basename, namelen, &de);
   14ba6:	8b 54 24 08          	mov    0x8(%esp),%edx
   14baa:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14bae:	8d 4c 24 14          	lea    0x14(%esp),%ecx
   14bb2:	51                   	push   %ecx
   14bb3:	52                   	push   %edx
   14bb4:	50                   	push   %eax
   14bb5:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   14bb9:	50                   	push   %eax
   14bba:	e8 1e e0 ff ff       	call   12bdd <find_entry>
   14bbf:	83 c4 10             	add    $0x10,%esp
   14bc2:	89 44 24 18          	mov    %eax,0x18(%esp)
	if (bh) {
   14bc6:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   14bcb:	74 38                	je     14c05 <sys_link+0x1a1>
		brelse(bh);
   14bcd:	83 ec 0c             	sub    $0xc,%esp
   14bd0:	ff 74 24 24          	pushl  0x24(%esp)
   14bd4:	e8 b7 aa ff ff       	call   f690 <brelse>
   14bd9:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   14bdc:	8b 44 24 10          	mov    0x10(%esp),%eax
   14be0:	83 ec 0c             	sub    $0xc,%esp
   14be3:	50                   	push   %eax
   14be4:	e8 06 9b ff ff       	call   e6ef <iput>
   14be9:	83 c4 10             	add    $0x10,%esp
		iput(oldinode);
   14bec:	83 ec 0c             	sub    $0xc,%esp
   14bef:	ff 74 24 28          	pushl  0x28(%esp)
   14bf3:	e8 f7 9a ff ff       	call   e6ef <iput>
   14bf8:	83 c4 10             	add    $0x10,%esp
		return -EEXIST;
   14bfb:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
   14c00:	e9 d9 00 00 00       	jmp    14cde <sys_link+0x27a>
	}
	// 现在所有条件都满足了，于是我们在新目录中添加一个目录项。若失败则放回该目录的i节点和原路径名的i节点，返回出错号。否则初始
	// 设置该目录项的i节点号等于原路径名的i节点号，并置包含该新添目录的缓冲块已修改标志，释放该缓冲块，放回目录的i节点。
	bh = add_entry(dir, basename, namelen, &de);
   14c05:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   14c09:	8b 54 24 0c          	mov    0xc(%esp),%edx
   14c0d:	8b 44 24 10          	mov    0x10(%esp),%eax
   14c11:	8d 5c 24 14          	lea    0x14(%esp),%ebx
   14c15:	53                   	push   %ebx
   14c16:	51                   	push   %ecx
   14c17:	52                   	push   %edx
   14c18:	50                   	push   %eax
   14c19:	e8 fd e1 ff ff       	call   12e1b <add_entry>
   14c1e:	83 c4 10             	add    $0x10,%esp
   14c21:	89 44 24 18          	mov    %eax,0x18(%esp)
	if (!bh) {
   14c25:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   14c2a:	75 29                	jne    14c55 <sys_link+0x1f1>
		iput(dir);
   14c2c:	8b 44 24 10          	mov    0x10(%esp),%eax
   14c30:	83 ec 0c             	sub    $0xc,%esp
   14c33:	50                   	push   %eax
   14c34:	e8 b6 9a ff ff       	call   e6ef <iput>
   14c39:	83 c4 10             	add    $0x10,%esp
		iput(oldinode);
   14c3c:	83 ec 0c             	sub    $0xc,%esp
   14c3f:	ff 74 24 28          	pushl  0x28(%esp)
   14c43:	e8 a7 9a ff ff       	call   e6ef <iput>
   14c48:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   14c4b:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   14c50:	e9 89 00 00 00       	jmp    14cde <sys_link+0x27a>
	}
	de->inode = oldinode->i_num;
   14c55:	8b 44 24 14          	mov    0x14(%esp),%eax
   14c59:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   14c5d:	0f b7 52 32          	movzwl 0x32(%edx),%edx
   14c61:	66 89 10             	mov    %dx,(%eax)
	bh->b_dirt = 1;
   14c64:	8b 44 24 18          	mov    0x18(%esp),%eax
   14c68:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	brelse(bh);
   14c6c:	83 ec 0c             	sub    $0xc,%esp
   14c6f:	ff 74 24 24          	pushl  0x24(%esp)
   14c73:	e8 18 aa ff ff       	call   f690 <brelse>
   14c78:	83 c4 10             	add    $0x10,%esp
	iput(dir);
   14c7b:	8b 44 24 10          	mov    0x10(%esp),%eax
   14c7f:	83 ec 0c             	sub    $0xc,%esp
   14c82:	50                   	push   %eax
   14c83:	e8 67 9a ff ff       	call   e6ef <iput>
   14c88:	83 c4 10             	add    $0x10,%esp
	// 再将原节点的链接计数加1,修改其改变时间为当前时间，并设置i节点已修改标志。最后放回原路径名的i节点，并返回0（成功）。
	oldinode->i_nlinks++;
   14c8b:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14c8f:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   14c93:	8d 50 01             	lea    0x1(%eax),%edx
   14c96:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14c9a:	88 50 0d             	mov    %dl,0xd(%eax)
	oldinode->i_ctime = CURRENT_TIME;
   14c9d:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   14ca2:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
   14ca8:	01 d0                	add    %edx,%eax
   14caa:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   14caf:	f7 e2                	mul    %edx
   14cb1:	c1 ea 05             	shr    $0x5,%edx
   14cb4:	a1 04 eb 02 00       	mov    0x2eb04,%eax
   14cb9:	01 c2                	add    %eax,%edx
   14cbb:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14cbf:	89 50 2c             	mov    %edx,0x2c(%eax)
	oldinode->i_dirt = 1;
   14cc2:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14cc6:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	iput(oldinode);
   14cca:	83 ec 0c             	sub    $0xc,%esp
   14ccd:	ff 74 24 28          	pushl  0x28(%esp)
   14cd1:	e8 19 9a ff ff       	call   e6ef <iput>
   14cd6:	83 c4 10             	add    $0x10,%esp
	return 0;
   14cd9:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14cde:	83 c4 28             	add    $0x28,%esp
   14ce1:	5b                   	pop    %ebx
   14ce2:	c3                   	ret    

00014ce3 <memset>:

// 用字符填写指定长度内存块.
// 用字符c填写s指向的内存区域,共填count字节.
// %0 - eax(字符c),%1 - edi(内存地址),%2 - ecx(字节数count).
static inline void * memset(void * s, char c, int count)
{
   14ce3:	57                   	push   %edi
   14ce4:	83 ec 04             	sub    $0x4,%esp
   14ce7:	8b 44 24 10          	mov    0x10(%esp),%eax
   14ceb:	88 04 24             	mov    %al,(%esp)
__asm__(
   14cee:	0f b6 04 24          	movzbl (%esp),%eax
   14cf2:	8b 54 24 0c          	mov    0xc(%esp),%edx
   14cf6:	8b 4c 24 14          	mov    0x14(%esp),%ecx
   14cfa:	89 d7                	mov    %edx,%edi
   14cfc:	fc                   	cld    
   14cfd:	57                   	push   %edi
   14cfe:	f3 aa                	rep stos %al,%es:(%edi)
   14d00:	5f                   	pop    %edi
		"rep\n\t"											// 重复ecx指定的次数,执行.
		"stosb\n\t"											// 将al中字符存入es:[edi]中,并且edi++.
		"popl %%edi"
		::"a" (c), "D" (s), "c" (count)
		:);
return s;
   14d01:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   14d05:	83 c4 04             	add    $0x4,%esp
   14d08:	5f                   	pop    %edi
   14d09:	c3                   	ret    

00014d0a <free_block>:

// 释放设备dev上数据区中的逻辑块block。
// 复位指定逻辑块block对应的逻辑块位图位。成功则返回1,否则返回0.
// 参数：dev是设备号，block是逻辑块号（盘块号）。
int free_block(int dev, int block)
{
   14d0a:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;

	// 首先取设备dev上文件系统的超级块信息，根据其中数据区开始逻辑块号和文件系统中逻辑块总数信息判断参数block的有效
	// 性。如果指定设备超级块不存在，则出错停机。若逻辑块号小于盘上数据区第1个逻辑块号或者大于设备上总逻辑块数，也出
	// 错停机。
	if (!(sb = get_super(dev)))             						// fs/super.c
   14d0d:	83 ec 0c             	sub    $0xc,%esp
   14d10:	ff 74 24 2c          	pushl  0x2c(%esp)
   14d14:	e8 3e ae ff ff       	call   fb57 <get_super>
   14d19:	83 c4 10             	add    $0x10,%esp
   14d1c:	89 44 24 0c          	mov    %eax,0xc(%esp)
   14d20:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   14d25:	75 10                	jne    14d37 <free_block+0x2d>
		panic("trying to free block on nonexistent device");
   14d27:	83 ec 0c             	sub    $0xc,%esp
   14d2a:	68 c4 3c 02 00       	push   $0x23cc4
   14d2f:	e8 d4 3e ff ff       	call   8c08 <panic>
   14d34:	83 c4 10             	add    $0x10,%esp
	if (block < sb->s_firstdatazone || block >= sb->s_nzones)
   14d37:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14d3b:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   14d3f:	0f b7 c0             	movzwl %ax,%eax
   14d42:	3b 44 24 24          	cmp    0x24(%esp),%eax
   14d46:	7f 11                	jg     14d59 <free_block+0x4f>
   14d48:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14d4c:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   14d50:	0f b7 c0             	movzwl %ax,%eax
   14d53:	3b 44 24 24          	cmp    0x24(%esp),%eax
   14d57:	7f 10                	jg     14d69 <free_block+0x5f>
		panic("trying to free block not in datazone");
   14d59:	83 ec 0c             	sub    $0xc,%esp
   14d5c:	68 f0 3c 02 00       	push   $0x23cf0
   14d61:	e8 a2 3e ff ff       	call   8c08 <panic>
   14d66:	83 c4 10             	add    $0x10,%esp
	bh = get_hash_table(dev, block);
   14d69:	83 ec 08             	sub    $0x8,%esp
   14d6c:	ff 74 24 2c          	pushl  0x2c(%esp)
   14d70:	ff 74 24 2c          	pushl  0x2c(%esp)
   14d74:	e8 da a6 ff ff       	call   f453 <get_hash_table>
   14d79:	83 c4 10             	add    $0x10,%esp
   14d7c:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 然后从hash表中寻找该块数据。若找到了则判断其有效性，并清已修改和更新标志，释放该数据块。该段代码的主要用途是如果
	// 该逻辑块目前存在于高速缓冲区中，就释放对应的缓冲块。
	if (bh) {
   14d80:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   14d85:	74 50                	je     14dd7 <free_block+0xcd>
		if (bh->b_count > 1) {          							// 如果引用次数大于1,则调用brelse()。
   14d87:	8b 44 24 08          	mov    0x8(%esp),%eax
   14d8b:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
   14d8f:	3c 01                	cmp    $0x1,%al
   14d91:	76 19                	jbe    14dac <free_block+0xa2>
			brelse(bh);             								// b_count--后退出，该块还有人用。
   14d93:	83 ec 0c             	sub    $0xc,%esp
   14d96:	ff 74 24 14          	pushl  0x14(%esp)
   14d9a:	e8 f1 a8 ff ff       	call   f690 <brelse>
   14d9f:	83 c4 10             	add    $0x10,%esp
			return 0;
   14da2:	b8 00 00 00 00       	mov    $0x0,%eax
   14da7:	e9 d9 00 00 00       	jmp    14e85 <free_block+0x17b>
		}
		bh->b_dirt = 0;                   							// 否则复位已修改和已更新标志。
   14dac:	8b 44 24 08          	mov    0x8(%esp),%eax
   14db0:	c6 40 0b 00          	movb   $0x0,0xb(%eax)
		bh->b_uptodate = 0;
   14db4:	8b 44 24 08          	mov    0x8(%esp),%eax
   14db8:	c6 40 0a 00          	movb   $0x0,0xa(%eax)
		if (bh->b_count)                							// 若此时b_count为1,则调用brelse()释放之。
   14dbc:	8b 44 24 08          	mov    0x8(%esp),%eax
   14dc0:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
   14dc4:	84 c0                	test   %al,%al
   14dc6:	74 0f                	je     14dd7 <free_block+0xcd>
			brelse(bh);
   14dc8:	83 ec 0c             	sub    $0xc,%esp
   14dcb:	ff 74 24 14          	pushl  0x14(%esp)
   14dcf:	e8 bc a8 ff ff       	call   f690 <brelse>
   14dd4:	83 c4 10             	add    $0x10,%esp
	}
	// 接着我们复位block在逻辑块位图中的位（置0）。先计算block在数据区开始算起的数据逻辑块号（从1开始计数）。然后对逻辑
	// 块（区块）位图进行操作，复位对应的位。如果对应位原来就是0,则出错停机。由于1个缓冲块有1024字节，即8192位，因此
	// block/8192即可计算出指定块block在逻辑位图中的哪个块上。而block&8191可以得到block在逻辑块位图当前块中的位偏移
	// 位置。
	block -= sb->s_firstdatazone - 1 ;
   14dd7:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14ddb:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   14ddf:	0f b7 c0             	movzwl %ax,%eax
   14de2:	83 e8 01             	sub    $0x1,%eax
   14de5:	29 44 24 24          	sub    %eax,0x24(%esp)
	if (clear_bit(block & 8191, sb->s_zmap[block / 8192]->b_data)) {
   14de9:	8b 44 24 24          	mov    0x24(%esp),%eax
   14ded:	25 ff 1f 00 00       	and    $0x1fff,%eax
   14df2:	89 c1                	mov    %eax,%ecx
   14df4:	8b 44 24 24          	mov    0x24(%esp),%eax
   14df8:	8d 90 ff 1f 00 00    	lea    0x1fff(%eax),%edx
   14dfe:	85 c0                	test   %eax,%eax
   14e00:	0f 48 c2             	cmovs  %edx,%eax
   14e03:	c1 f8 0d             	sar    $0xd,%eax
   14e06:	89 c2                	mov    %eax,%edx
   14e08:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14e0c:	83 c2 0c             	add    $0xc,%edx
   14e0f:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   14e13:	8b 10                	mov    (%eax),%edx
   14e15:	b8 00 00 00 00       	mov    $0x0,%eax
   14e1a:	0f b3 0a             	btr    %ecx,(%edx)
   14e1d:	0f 93 c0             	setae  %al
   14e20:	85 c0                	test   %eax,%eax
   14e22:	74 39                	je     14e5d <free_block+0x153>
		printk("block (%04x:%d) ", dev, block + sb->s_firstdatazone - 1);
   14e24:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14e28:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   14e2c:	0f b7 d0             	movzwl %ax,%edx
   14e2f:	8b 44 24 24          	mov    0x24(%esp),%eax
   14e33:	01 d0                	add    %edx,%eax
   14e35:	83 e8 01             	sub    $0x1,%eax
   14e38:	83 ec 04             	sub    $0x4,%esp
   14e3b:	50                   	push   %eax
   14e3c:	ff 74 24 28          	pushl  0x28(%esp)
   14e40:	68 15 3d 02 00       	push   $0x23d15
   14e45:	e8 fd 3d ff ff       	call   8c47 <printk>
   14e4a:	83 c4 10             	add    $0x10,%esp
		printk("free_block: bit already cleared\n");
   14e4d:	83 ec 0c             	sub    $0xc,%esp
   14e50:	68 28 3d 02 00       	push   $0x23d28
   14e55:	e8 ed 3d ff ff       	call   8c47 <printk>
   14e5a:	83 c4 10             	add    $0x10,%esp
	}
	// 最后置相应逻辑块位图所在缓冲区已修改标志。
	sb->s_zmap[block / 8192]->b_dirt = 1;
   14e5d:	8b 44 24 24          	mov    0x24(%esp),%eax
   14e61:	8d 90 ff 1f 00 00    	lea    0x1fff(%eax),%edx
   14e67:	85 c0                	test   %eax,%eax
   14e69:	0f 48 c2             	cmovs  %edx,%eax
   14e6c:	c1 f8 0d             	sar    $0xd,%eax
   14e6f:	89 c2                	mov    %eax,%edx
   14e71:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14e75:	83 c2 0c             	add    $0xc,%edx
   14e78:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   14e7c:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	return 1;
   14e80:	b8 01 00 00 00       	mov    $0x1,%eax
}
   14e85:	83 c4 1c             	add    $0x1c,%esp
   14e88:	c3                   	ret    

00014e89 <new_block>:
// 向设备申请一个逻辑块(盘块,区块).
// 函数首先取得设备的超级块,并在超级块中的逻辑块位图中寻找第一个0值位(代表一个空闲逻辑块).然后置位对应逻辑块在逻辑位图
// 中的位.接着为该逻辑块在缓冲区中取得一块对应缓冲块.最后将该缓冲块清零,并设置其已更新标志和已修改标志.并返回逻辑块号.
// 函数执行成功则返回逻辑块号(盘块号),否则返回0.
int new_block(int dev)
{
   14e89:	57                   	push   %edi
   14e8a:	56                   	push   %esi
   14e8b:	53                   	push   %ebx
   14e8c:	83 ec 20             	sub    $0x20,%esp
	int i,j;

	// 首先获取设备dev的超级块.如果指定设备的超级块不存在,则出错停机.然后扫描文件系统的8块逻辑块位图,寻找首个0值位,以寻找
	// 空闲逻辑块,获取设置该逻辑块的块号.如果全部扫描完8块逻辑块位图的所有位(i >=8 或 j >= 8192)还没有找到0值位或者位图
	// 所在的缓冲块指针无效(bn = NULL)则返回0退出(没有空闲逻辑块).
	if (!(sb = get_super(dev)))
   14e8f:	83 ec 0c             	sub    $0xc,%esp
   14e92:	ff 74 24 3c          	pushl  0x3c(%esp)
   14e96:	e8 bc ac ff ff       	call   fb57 <get_super>
   14e9b:	83 c4 10             	add    $0x10,%esp
   14e9e:	89 44 24 10          	mov    %eax,0x10(%esp)
   14ea2:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   14ea7:	75 10                	jne    14eb9 <new_block+0x30>
		panic("trying to get new block from nonexistant device");
   14ea9:	83 ec 0c             	sub    $0xc,%esp
   14eac:	68 4c 3d 02 00       	push   $0x23d4c
   14eb1:	e8 52 3d ff ff       	call   8c08 <panic>
   14eb6:	83 c4 10             	add    $0x10,%esp
	j = 8192;
   14eb9:	c7 44 24 14 00 20 00 	movl   $0x2000,0x14(%esp)
   14ec0:	00 
	for (i = 0 ; i < 8 ; i++)
   14ec1:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   14ec8:	00 
   14ec9:	eb 5a                	jmp    14f25 <new_block+0x9c>
		if (bh = sb->s_zmap[i])
   14ecb:	8b 44 24 10          	mov    0x10(%esp),%eax
   14ecf:	8b 54 24 18          	mov    0x18(%esp),%edx
   14ed3:	83 c2 0c             	add    $0xc,%edx
   14ed6:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   14eda:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   14ede:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   14ee3:	74 3b                	je     14f20 <new_block+0x97>
			if ((j = find_first_zero(bh->b_data)) < 8192)
   14ee5:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14ee9:	8b 18                	mov    (%eax),%ebx
   14eeb:	b9 00 00 00 00       	mov    $0x0,%ecx
   14ef0:	89 de                	mov    %ebx,%esi
   14ef2:	fc                   	cld    
   14ef3:	ad                   	lods   %ds:(%esi),%eax
   14ef4:	f7 d0                	not    %eax
   14ef6:	0f bc d0             	bsf    %eax,%edx
   14ef9:	74 04                	je     14eff <new_block+0x76>
   14efb:	01 d1                	add    %edx,%ecx
   14efd:	eb 0b                	jmp    14f0a <new_block+0x81>
   14eff:	83 c1 20             	add    $0x20,%ecx
   14f02:	81 f9 00 20 00 00    	cmp    $0x2000,%ecx
   14f08:	7c e9                	jl     14ef3 <new_block+0x6a>
   14f0a:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
   14f0e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14f12:	89 44 24 14          	mov    %eax,0x14(%esp)
   14f16:	81 7c 24 14 ff 1f 00 	cmpl   $0x1fff,0x14(%esp)
   14f1d:	00 
   14f1e:	7e 0e                	jle    14f2e <new_block+0xa5>
	// 空闲逻辑块,获取设置该逻辑块的块号.如果全部扫描完8块逻辑块位图的所有位(i >=8 或 j >= 8192)还没有找到0值位或者位图
	// 所在的缓冲块指针无效(bn = NULL)则返回0退出(没有空闲逻辑块).
	if (!(sb = get_super(dev)))
		panic("trying to get new block from nonexistant device");
	j = 8192;
	for (i = 0 ; i < 8 ; i++)
   14f20:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
   14f25:	83 7c 24 18 07       	cmpl   $0x7,0x18(%esp)
   14f2a:	7e 9f                	jle    14ecb <new_block+0x42>
   14f2c:	eb 01                	jmp    14f2f <new_block+0xa6>
		if (bh = sb->s_zmap[i])
			if ((j = find_first_zero(bh->b_data)) < 8192)
				break;
   14f2e:	90                   	nop
	if (i >= 8 || !bh || j >= 8192)
   14f2f:	83 7c 24 18 07       	cmpl   $0x7,0x18(%esp)
   14f34:	7f 11                	jg     14f47 <new_block+0xbe>
   14f36:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   14f3b:	74 0a                	je     14f47 <new_block+0xbe>
   14f3d:	81 7c 24 14 ff 1f 00 	cmpl   $0x1fff,0x14(%esp)
   14f44:	00 
   14f45:	7e 0a                	jle    14f51 <new_block+0xc8>
		return 0;
   14f47:	b8 00 00 00 00       	mov    $0x0,%eax
   14f4c:	e9 ef 00 00 00       	jmp    15040 <new_block+0x1b7>
	// 接着设置找到的新逻辑块j对应逻辑块位图中的位.若对应位已经置位,则出错停机.否则置存在位图的对应缓冲区块已修改标志.因为
	// 逻辑块位图仅表示盘上数据区中逻辑块的占用情况,即逻辑块位图中位偏移值表示从数据区开始处算起的块号,因此这里需要加上数据
	// 区第1个逻辑块的块号,把j转换成逻辑块号.此时如果新逻辑块大于该设备上的总逻辑块数,则说明指定逻辑块在对应设备上不存在.
	// 申请失败,返回0退出.
	if (set_bit(j, bh->b_data))
   14f51:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14f55:	8b 08                	mov    (%eax),%ecx
   14f57:	b8 00 00 00 00       	mov    $0x0,%eax
   14f5c:	8b 54 24 14          	mov    0x14(%esp),%edx
   14f60:	0f ab 11             	bts    %edx,(%ecx)
   14f63:	0f 92 c0             	setb   %al
   14f66:	85 c0                	test   %eax,%eax
   14f68:	74 10                	je     14f7a <new_block+0xf1>
		panic("new_block: bit already set");
   14f6a:	83 ec 0c             	sub    $0xc,%esp
   14f6d:	68 7c 3d 02 00       	push   $0x23d7c
   14f72:	e8 91 3c ff ff       	call   8c08 <panic>
   14f77:	83 c4 10             	add    $0x10,%esp
	bh->b_dirt = 1;
   14f7a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14f7e:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	j += i * 8192 + sb->s_firstdatazone - 1;
   14f82:	8b 44 24 18          	mov    0x18(%esp),%eax
   14f86:	c1 e0 0d             	shl    $0xd,%eax
   14f89:	89 c2                	mov    %eax,%edx
   14f8b:	8b 44 24 10          	mov    0x10(%esp),%eax
   14f8f:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   14f93:	0f b7 c0             	movzwl %ax,%eax
   14f96:	01 d0                	add    %edx,%eax
   14f98:	83 e8 01             	sub    $0x1,%eax
   14f9b:	01 44 24 14          	add    %eax,0x14(%esp)
	if (j >= sb->s_nzones)
   14f9f:	8b 44 24 10          	mov    0x10(%esp),%eax
   14fa3:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   14fa7:	0f b7 c0             	movzwl %ax,%eax
   14faa:	3b 44 24 14          	cmp    0x14(%esp),%eax
   14fae:	7f 0a                	jg     14fba <new_block+0x131>
		return 0;
   14fb0:	b8 00 00 00 00       	mov    $0x0,%eax
   14fb5:	e9 86 00 00 00       	jmp    15040 <new_block+0x1b7>
	// 然后在高速缓冲区中为该设备上指定的逻辑块号取得一个缓冲块,并返回缓冲块头指针.
	// 因为刚取得的逻辑块其引用次数一定为1(getblk()中会设置),因此若不为1则停机.最后将新逻辑块清零,并设置其已更新标志和已
	// 修改标志.然后释放对应缓冲块,返回逻辑块号.
	if (!(bh = getblk(dev, j)))
   14fba:	83 ec 08             	sub    $0x8,%esp
   14fbd:	ff 74 24 1c          	pushl  0x1c(%esp)
   14fc1:	ff 74 24 3c          	pushl  0x3c(%esp)
   14fc5:	e8 0d a5 ff ff       	call   f4d7 <getblk>
   14fca:	83 c4 10             	add    $0x10,%esp
   14fcd:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   14fd1:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   14fd6:	75 10                	jne    14fe8 <new_block+0x15f>
		panic("new_block: cannot get block");
   14fd8:	83 ec 0c             	sub    $0xc,%esp
   14fdb:	68 97 3d 02 00       	push   $0x23d97
   14fe0:	e8 23 3c ff ff       	call   8c08 <panic>
   14fe5:	83 c4 10             	add    $0x10,%esp
	if (bh->b_count != 1)
   14fe8:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14fec:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
   14ff0:	3c 01                	cmp    $0x1,%al
   14ff2:	74 10                	je     15004 <new_block+0x17b>
		panic("new block: count is != 1");
   14ff4:	83 ec 0c             	sub    $0xc,%esp
   14ff7:	68 b3 3d 02 00       	push   $0x23db3
   14ffc:	e8 07 3c ff ff       	call   8c08 <panic>
   15001:	83 c4 10             	add    $0x10,%esp
	clear_block(bh->b_data);
   15004:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   15008:	8b 00                	mov    (%eax),%eax
   1500a:	89 c3                	mov    %eax,%ebx
   1500c:	b8 00 00 00 00       	mov    $0x0,%eax
   15011:	ba 00 01 00 00       	mov    $0x100,%edx
   15016:	89 d1                	mov    %edx,%ecx
   15018:	89 df                	mov    %ebx,%edi
   1501a:	fc                   	cld    
   1501b:	f3 ab                	rep stos %eax,%es:(%edi)
	bh->b_uptodate = 1;
   1501d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   15021:	c6 40 0a 01          	movb   $0x1,0xa(%eax)
	bh->b_dirt = 1;
   15025:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   15029:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	brelse(bh);
   1502d:	83 ec 0c             	sub    $0xc,%esp
   15030:	ff 74 24 28          	pushl  0x28(%esp)
   15034:	e8 57 a6 ff ff       	call   f690 <brelse>
   15039:	83 c4 10             	add    $0x10,%esp
	return j;
   1503c:	8b 44 24 14          	mov    0x14(%esp),%eax
}
   15040:	83 c4 20             	add    $0x20,%esp
   15043:	5b                   	pop    %ebx
   15044:	5e                   	pop    %esi
   15045:	5f                   	pop    %edi
   15046:	c3                   	ret    

00015047 <free_inode>:

// 释放指定的i节点。
// 该函数首先判断参数给出的i节点号的有效性和可释放性。若i节点仍然在使用中则不能被释放。然后利用超级块信息对i节点位图进行
// 操作，复位i节点号对应的i节点位图中位，并清空i节点结构。
void free_inode(struct m_inode * inode)
{
   15047:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;

	// 首先判断参数给出的需要释放的i节点有效性或合法性。如果i节点指针=NULL，则退出。
	// 如果i节点上的设备号字段为0,说明该节点没有使用。于是用0清空对应i节点所占内存区并返回memset()定义在include/string.h
	// 处。这里表示用0填写inode指针指定处、长度是sizeof(*inode)的内存块。
	if (!inode)
   1504a:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   1504f:	0f 84 64 01 00 00    	je     151b9 <free_inode+0x172>
		return;
	if (!inode->i_dev) {
   15055:	8b 44 24 20          	mov    0x20(%esp),%eax
   15059:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   1505d:	66 85 c0             	test   %ax,%ax
   15060:	75 15                	jne    15077 <free_inode+0x30>
		memset(inode, 0, sizeof(*inode));
   15062:	6a 3c                	push   $0x3c
   15064:	6a 00                	push   $0x0
   15066:	ff 74 24 28          	pushl  0x28(%esp)
   1506a:	e8 74 fc ff ff       	call   14ce3 <memset>
   1506f:	83 c4 0c             	add    $0xc,%esp
		return;
   15072:	e9 43 01 00 00       	jmp    151ba <free_inode+0x173>
	}
	// 如果此i节点还有其他程序引用，则不释放，说明内核有问题，停机。如果文件连接数不为0,则表示还有其他文件目录项在使用该节点，
	// 因此也不应释放，而应该放回等。
	if (inode->i_count > 1) {
   15077:	8b 44 24 20          	mov    0x20(%esp),%eax
   1507b:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   1507f:	66 83 f8 01          	cmp    $0x1,%ax
   15083:	76 2c                	jbe    150b1 <free_inode+0x6a>
		printk("trying to free inode with count=%d\n", inode->i_count);
   15085:	8b 44 24 20          	mov    0x20(%esp),%eax
   15089:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   1508d:	0f b7 c0             	movzwl %ax,%eax
   15090:	83 ec 08             	sub    $0x8,%esp
   15093:	50                   	push   %eax
   15094:	68 cc 3d 02 00       	push   $0x23dcc
   15099:	e8 a9 3b ff ff       	call   8c47 <printk>
   1509e:	83 c4 10             	add    $0x10,%esp
		panic("free_inode");
   150a1:	83 ec 0c             	sub    $0xc,%esp
   150a4:	68 f0 3d 02 00       	push   $0x23df0
   150a9:	e8 5a 3b ff ff       	call   8c08 <panic>
   150ae:	83 c4 10             	add    $0x10,%esp
	}
	if (inode->i_nlinks)
   150b1:	8b 44 24 20          	mov    0x20(%esp),%eax
   150b5:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   150b9:	84 c0                	test   %al,%al
   150bb:	74 10                	je     150cd <free_inode+0x86>
		panic("trying to free inode with links");
   150bd:	83 ec 0c             	sub    $0xc,%esp
   150c0:	68 fc 3d 02 00       	push   $0x23dfc
   150c5:	e8 3e 3b ff ff       	call   8c08 <panic>
   150ca:	83 c4 10             	add    $0x10,%esp
	// 在判断完i节点的合理性之后，我们开始利用其超级块信息对其i节点位图进行操作。首先取i节点所在设备的超级块，测试设备是否存在。
	// 然后判断i节点号的范围是否正确，如果i节点号等于0或大于该设备上i节点总数，则出错（0号i节点保留没有使用）。如果该i节点对应
	// 的节点位图不存在，则出错。因为一个缓冲块的i节点位图有8192比特位。因此i_num>>13（即i_num/8192）可以得到当前i节点号所
	// 在的s_imap[]项，即所在盘块。
	if (!(sb = get_super(inode->i_dev)))
   150cd:	8b 44 24 20          	mov    0x20(%esp),%eax
   150d1:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   150d5:	0f b7 c0             	movzwl %ax,%eax
   150d8:	83 ec 0c             	sub    $0xc,%esp
   150db:	50                   	push   %eax
   150dc:	e8 76 aa ff ff       	call   fb57 <get_super>
   150e1:	83 c4 10             	add    $0x10,%esp
   150e4:	89 44 24 0c          	mov    %eax,0xc(%esp)
   150e8:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   150ed:	75 10                	jne    150ff <free_inode+0xb8>
		panic("trying to free inode on nonexistent device");
   150ef:	83 ec 0c             	sub    $0xc,%esp
   150f2:	68 1c 3e 02 00       	push   $0x23e1c
   150f7:	e8 0c 3b ff ff       	call   8c08 <panic>
   150fc:	83 c4 10             	add    $0x10,%esp
	if (inode->i_num < 1 || inode->i_num > sb->s_ninodes)
   150ff:	8b 44 24 20          	mov    0x20(%esp),%eax
   15103:	0f b7 40 32          	movzwl 0x32(%eax),%eax
   15107:	66 85 c0             	test   %ax,%ax
   1510a:	74 14                	je     15120 <free_inode+0xd9>
   1510c:	8b 44 24 20          	mov    0x20(%esp),%eax
   15110:	0f b7 50 32          	movzwl 0x32(%eax),%edx
   15114:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15118:	0f b7 00             	movzwl (%eax),%eax
   1511b:	66 39 c2             	cmp    %ax,%dx
   1511e:	76 10                	jbe    15130 <free_inode+0xe9>
		panic("trying to free inode 0 or nonexistant inode");
   15120:	83 ec 0c             	sub    $0xc,%esp
   15123:	68 48 3e 02 00       	push   $0x23e48
   15128:	e8 db 3a ff ff       	call   8c08 <panic>
   1512d:	83 c4 10             	add    $0x10,%esp
	if (!(bh = sb->s_imap[inode->i_num >> 13]))
   15130:	8b 44 24 20          	mov    0x20(%esp),%eax
   15134:	0f b7 40 32          	movzwl 0x32(%eax),%eax
   15138:	66 c1 e8 0d          	shr    $0xd,%ax
   1513c:	0f b7 d0             	movzwl %ax,%edx
   1513f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15143:	83 c2 04             	add    $0x4,%edx
   15146:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   1514a:	89 44 24 08          	mov    %eax,0x8(%esp)
   1514e:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   15153:	75 10                	jne    15165 <free_inode+0x11e>
		panic("nonexistent imap in superblock");
   15155:	83 ec 0c             	sub    $0xc,%esp
   15158:	68 74 3e 02 00       	push   $0x23e74
   1515d:	e8 a6 3a ff ff       	call   8c08 <panic>
   15162:	83 c4 10             	add    $0x10,%esp
	// 现在我们复位i节点对应的节点位图中的位。如果该位已经等于0,则显示出错警告信息。最后置i节点位图所在缓冲区已修改标志，并清空
	// 该i节点结构所占内存区。
	if (clear_bit(inode->i_num & 8191, bh->b_data))
   15165:	8b 44 24 20          	mov    0x20(%esp),%eax
   15169:	0f b7 40 32          	movzwl 0x32(%eax),%eax
   1516d:	0f b7 c0             	movzwl %ax,%eax
   15170:	25 ff 1f 00 00       	and    $0x1fff,%eax
   15175:	89 c1                	mov    %eax,%ecx
   15177:	8b 44 24 08          	mov    0x8(%esp),%eax
   1517b:	8b 10                	mov    (%eax),%edx
   1517d:	b8 00 00 00 00       	mov    $0x0,%eax
   15182:	0f b3 0a             	btr    %ecx,(%edx)
   15185:	0f 93 c0             	setae  %al
   15188:	85 c0                	test   %eax,%eax
   1518a:	74 10                	je     1519c <free_inode+0x155>
		printk("free_inode: bit already cleared.\n\r");
   1518c:	83 ec 0c             	sub    $0xc,%esp
   1518f:	68 94 3e 02 00       	push   $0x23e94
   15194:	e8 ae 3a ff ff       	call   8c47 <printk>
   15199:	83 c4 10             	add    $0x10,%esp
	bh->b_dirt = 1;
   1519c:	8b 44 24 08          	mov    0x8(%esp),%eax
   151a0:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	memset(inode, 0, sizeof(*inode));
   151a4:	83 ec 04             	sub    $0x4,%esp
   151a7:	6a 3c                	push   $0x3c
   151a9:	6a 00                	push   $0x0
   151ab:	ff 74 24 2c          	pushl  0x2c(%esp)
   151af:	e8 2f fb ff ff       	call   14ce3 <memset>
   151b4:	83 c4 10             	add    $0x10,%esp
   151b7:	eb 01                	jmp    151ba <free_inode+0x173>

	// 首先判断参数给出的需要释放的i节点有效性或合法性。如果i节点指针=NULL，则退出。
	// 如果i节点上的设备号字段为0,说明该节点没有使用。于是用0清空对应i节点所占内存区并返回memset()定义在include/string.h
	// 处。这里表示用0填写inode指针指定处、长度是sizeof(*inode)的内存块。
	if (!inode)
		return;
   151b9:	90                   	nop
	// 该i节点结构所占内存区。
	if (clear_bit(inode->i_num & 8191, bh->b_data))
		printk("free_inode: bit already cleared.\n\r");
	bh->b_dirt = 1;
	memset(inode, 0, sizeof(*inode));
}
   151ba:	83 c4 1c             	add    $0x1c,%esp
   151bd:	c3                   	ret    

000151be <new_inode>:

// 为设备dev建立一个新i节点。初始化并返回该新i节点的指针。
// 在内存i节点表中获取一个空闲i节点表项，并从i节点位图中找一个空闲i节点。
struct m_inode * new_inode(int dev)
{
   151be:	56                   	push   %esi
   151bf:	53                   	push   %ebx
   151c0:	83 ec 24             	sub    $0x24,%esp
	int i, j;

	// 首先从内在i节点表（inode_table）中获取一个空闲i节点项，并读取指定设备的超级块结构。然后扫描超级块中8块i节点位图，
	// 寻找第1个0位，寻找空闲节点，获取放置该i节点的节点号。如果全部扫描完还没找到，或者位图所在的缓冲块无效（bh = NULL）
	// 则放回先前申请的i节点表中的i节点，并返回空指针退出（没有空闲i节点）。
	if (!(inode = get_empty_inode()))
   151c3:	e8 e3 96 ff ff       	call   e8ab <get_empty_inode>
   151c8:	89 44 24 10          	mov    %eax,0x10(%esp)
   151cc:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   151d1:	75 0a                	jne    151dd <new_inode+0x1f>
		return NULL;
   151d3:	b8 00 00 00 00       	mov    $0x0,%eax
   151d8:	e9 c5 01 00 00       	jmp    153a2 <new_inode+0x1e4>
	if (!(sb = get_super(dev)))
   151dd:	83 ec 0c             	sub    $0xc,%esp
   151e0:	ff 74 24 3c          	pushl  0x3c(%esp)
   151e4:	e8 6e a9 ff ff       	call   fb57 <get_super>
   151e9:	83 c4 10             	add    $0x10,%esp
   151ec:	89 44 24 0c          	mov    %eax,0xc(%esp)
   151f0:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   151f5:	75 10                	jne    15207 <new_inode+0x49>
		panic("new_inode with unknown device");
   151f7:	83 ec 0c             	sub    $0xc,%esp
   151fa:	68 b7 3e 02 00       	push   $0x23eb7
   151ff:	e8 04 3a ff ff       	call   8c08 <panic>
   15204:	83 c4 10             	add    $0x10,%esp
	j = 8192;
   15207:	c7 44 24 14 00 20 00 	movl   $0x2000,0x14(%esp)
   1520e:	00 
	for (i = 0 ; i < 8 ; i++)
   1520f:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   15216:	00 
   15217:	eb 5a                	jmp    15273 <new_inode+0xb5>
		if (bh = sb->s_imap[i])
   15219:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1521d:	8b 54 24 18          	mov    0x18(%esp),%edx
   15221:	83 c2 04             	add    $0x4,%edx
   15224:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   15228:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   1522c:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   15231:	74 3b                	je     1526e <new_inode+0xb0>
			if ((j = find_first_zero(bh->b_data)) < 8192)
   15233:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   15237:	8b 18                	mov    (%eax),%ebx
   15239:	b9 00 00 00 00       	mov    $0x0,%ecx
   1523e:	89 de                	mov    %ebx,%esi
   15240:	fc                   	cld    
   15241:	ad                   	lods   %ds:(%esi),%eax
   15242:	f7 d0                	not    %eax
   15244:	0f bc d0             	bsf    %eax,%edx
   15247:	74 04                	je     1524d <new_inode+0x8f>
   15249:	01 d1                	add    %edx,%ecx
   1524b:	eb 0b                	jmp    15258 <new_inode+0x9a>
   1524d:	83 c1 20             	add    $0x20,%ecx
   15250:	81 f9 00 20 00 00    	cmp    $0x2000,%ecx
   15256:	7c e9                	jl     15241 <new_inode+0x83>
   15258:	89 4c 24 08          	mov    %ecx,0x8(%esp)
   1525c:	8b 44 24 08          	mov    0x8(%esp),%eax
   15260:	89 44 24 14          	mov    %eax,0x14(%esp)
   15264:	81 7c 24 14 ff 1f 00 	cmpl   $0x1fff,0x14(%esp)
   1526b:	00 
   1526c:	7e 0e                	jle    1527c <new_inode+0xbe>
	if (!(inode = get_empty_inode()))
		return NULL;
	if (!(sb = get_super(dev)))
		panic("new_inode with unknown device");
	j = 8192;
	for (i = 0 ; i < 8 ; i++)
   1526e:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
   15273:	83 7c 24 18 07       	cmpl   $0x7,0x18(%esp)
   15278:	7e 9f                	jle    15219 <new_inode+0x5b>
   1527a:	eb 01                	jmp    1527d <new_inode+0xbf>
		if (bh = sb->s_imap[i])
			if ((j = find_first_zero(bh->b_data)) < 8192)
				break;
   1527c:	90                   	nop
	if (!bh || j >= 8192 || j + i * 8192 > sb->s_ninodes) {
   1527d:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   15282:	74 27                	je     152ab <new_inode+0xed>
   15284:	81 7c 24 14 ff 1f 00 	cmpl   $0x1fff,0x14(%esp)
   1528b:	00 
   1528c:	7f 1d                	jg     152ab <new_inode+0xed>
   1528e:	8b 44 24 18          	mov    0x18(%esp),%eax
   15292:	c1 e0 0d             	shl    $0xd,%eax
   15295:	89 c2                	mov    %eax,%edx
   15297:	8b 44 24 14          	mov    0x14(%esp),%eax
   1529b:	01 c2                	add    %eax,%edx
   1529d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   152a1:	0f b7 00             	movzwl (%eax),%eax
   152a4:	0f b7 c0             	movzwl %ax,%eax
   152a7:	39 c2                	cmp    %eax,%edx
   152a9:	7e 19                	jle    152c4 <new_inode+0x106>
		iput(inode);
   152ab:	83 ec 0c             	sub    $0xc,%esp
   152ae:	ff 74 24 1c          	pushl  0x1c(%esp)
   152b2:	e8 38 94 ff ff       	call   e6ef <iput>
   152b7:	83 c4 10             	add    $0x10,%esp
		return NULL;
   152ba:	b8 00 00 00 00       	mov    $0x0,%eax
   152bf:	e9 de 00 00 00       	jmp    153a2 <new_inode+0x1e4>
	}
	// 现在我们已经找到了还未使用的i节点号j。于是置位i节点j对应的i节点位图相应比特位（如果已经置位，则出错）。然后置i节点
	// 位图所在缓冲块已修改标志。最后初始化该i节点结构（i_ctime是i节点内容改变时间）。
	if (set_bit(j, bh->b_data))
   152c4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   152c8:	8b 08                	mov    (%eax),%ecx
   152ca:	b8 00 00 00 00       	mov    $0x0,%eax
   152cf:	8b 54 24 14          	mov    0x14(%esp),%edx
   152d3:	0f ab 11             	bts    %edx,(%ecx)
   152d6:	0f 92 c0             	setb   %al
   152d9:	85 c0                	test   %eax,%eax
   152db:	74 10                	je     152ed <new_inode+0x12f>
		panic("new_inode: bit already set");
   152dd:	83 ec 0c             	sub    $0xc,%esp
   152e0:	68 d5 3e 02 00       	push   $0x23ed5
   152e5:	e8 1e 39 ff ff       	call   8c08 <panic>
   152ea:	83 c4 10             	add    $0x10,%esp
	bh->b_dirt = 1;
   152ed:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   152f1:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	inode->i_count = 1;               										// 引用计数。
   152f5:	8b 44 24 10          	mov    0x10(%esp),%eax
   152f9:	66 c7 40 34 01 00    	movw   $0x1,0x34(%eax)
	inode->i_nlinks = 1;              										// 文件目录项链接数。
   152ff:	8b 44 24 10          	mov    0x10(%esp),%eax
   15303:	c6 40 0d 01          	movb   $0x1,0xd(%eax)
	inode->i_dev = dev;               										// i节点所在的设备号。
   15307:	8b 44 24 30          	mov    0x30(%esp),%eax
   1530b:	89 c2                	mov    %eax,%edx
   1530d:	8b 44 24 10          	mov    0x10(%esp),%eax
   15311:	66 89 50 30          	mov    %dx,0x30(%eax)
	inode->i_uid = current->euid;     										// i节点所属用户id。
   15315:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1531a:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
   15321:	8b 44 24 10          	mov    0x10(%esp),%eax
   15325:	66 89 50 02          	mov    %dx,0x2(%eax)
	inode->i_gid = current->egid;     										// 组id。
   15329:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1532e:	0f b7 80 d4 02 00 00 	movzwl 0x2d4(%eax),%eax
   15335:	89 c2                	mov    %eax,%edx
   15337:	8b 44 24 10          	mov    0x10(%esp),%eax
   1533b:	88 50 0c             	mov    %dl,0xc(%eax)
	inode->i_dirt = 1;                										// 已修改标志置位。
   1533e:	8b 44 24 10          	mov    0x10(%esp),%eax
   15342:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	inode->i_num = j + i * 8192;      										// 对应设备中的i节点号。
   15346:	8b 44 24 18          	mov    0x18(%esp),%eax
   1534a:	c1 e0 0d             	shl    $0xd,%eax
   1534d:	89 c2                	mov    %eax,%edx
   1534f:	8b 44 24 14          	mov    0x14(%esp),%eax
   15353:	01 c2                	add    %eax,%edx
   15355:	8b 44 24 10          	mov    0x10(%esp),%eax
   15359:	66 89 50 32          	mov    %dx,0x32(%eax)
	inode->i_mtime = inode->i_atime = inode->i_ctime = CURRENT_TIME;        // 设置时间。
   1535d:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   15362:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
   15368:	01 d0                	add    %edx,%eax
   1536a:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   1536f:	f7 e2                	mul    %edx
   15371:	c1 ea 05             	shr    $0x5,%edx
   15374:	a1 04 eb 02 00       	mov    0x2eb04,%eax
   15379:	01 c2                	add    %eax,%edx
   1537b:	8b 44 24 10          	mov    0x10(%esp),%eax
   1537f:	89 50 2c             	mov    %edx,0x2c(%eax)
   15382:	8b 44 24 10          	mov    0x10(%esp),%eax
   15386:	8b 50 2c             	mov    0x2c(%eax),%edx
   15389:	8b 44 24 10          	mov    0x10(%esp),%eax
   1538d:	89 50 28             	mov    %edx,0x28(%eax)
   15390:	8b 44 24 10          	mov    0x10(%esp),%eax
   15394:	8b 50 28             	mov    0x28(%eax),%edx
   15397:	8b 44 24 10          	mov    0x10(%esp),%eax
   1539b:	89 50 08             	mov    %edx,0x8(%eax)
	return inode;                   										// 返回该i节点指针。
   1539e:	8b 44 24 10          	mov    0x10(%esp),%eax
}
   153a2:	83 c4 24             	add    $0x24,%esp
   153a5:	5b                   	pop    %ebx
   153a6:	5e                   	pop    %esi
   153a7:	c3                   	ret    

000153a8 <dupfd>:

// 复制文件句柄(文件描述符).
// 参数fd是欲复制的文件句柄,arg指定新文件句柄的最小数值.
// 返回新文件句柄或出错码.
static int dupfd(unsigned int fd, unsigned int arg)
{
   153a8:	56                   	push   %esi
   153a9:	53                   	push   %ebx
	// 首先检查函数参数的有效性.如果文件句柄值大于一个程序最多打开文件数NR_OPEN,或者该句柄的文件结构不存在,则返回出错码并退出.如果指定的新
	// 句柄值arg大于最多打开文件数,也返回出错码并退出.注意,实际上文件句柄就是进程文件结构指针数组项索引号.
	if (fd >= NR_OPEN || !current->filp[fd])
   153aa:	83 7c 24 0c 13       	cmpl   $0x13,0xc(%esp)
   153af:	77 17                	ja     153c8 <dupfd+0x20>
   153b1:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   153b6:	8b 54 24 0c          	mov    0xc(%esp),%edx
   153ba:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   153c0:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   153c4:	85 c0                	test   %eax,%eax
   153c6:	75 0a                	jne    153d2 <dupfd+0x2a>
		return -EBADF;
   153c8:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   153cd:	e9 b3 00 00 00       	jmp    15485 <dupfd+0xdd>
	if (arg >= NR_OPEN)
   153d2:	83 7c 24 10 13       	cmpl   $0x13,0x10(%esp)
   153d7:	76 26                	jbe    153ff <dupfd+0x57>
		return -EINVAL;
   153d9:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   153de:	e9 a2 00 00 00       	jmp    15485 <dupfd+0xdd>
	// 然后在当前进程的文件结构指针数组中寻找索引号等于或大于arg,但还没有使用的项.若找到的新句柄值arg大于最多打开文件数(即没有空闲项),则返回
	// 出错码并退出.
	while (arg < NR_OPEN)
		if (current->filp[arg])
   153e3:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   153e8:	8b 54 24 10          	mov    0x10(%esp),%edx
   153ec:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   153f2:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   153f6:	85 c0                	test   %eax,%eax
   153f8:	74 0e                	je     15408 <dupfd+0x60>
			arg++;
   153fa:	83 44 24 10 01       	addl   $0x1,0x10(%esp)
		return -EBADF;
	if (arg >= NR_OPEN)
		return -EINVAL;
	// 然后在当前进程的文件结构指针数组中寻找索引号等于或大于arg,但还没有使用的项.若找到的新句柄值arg大于最多打开文件数(即没有空闲项),则返回
	// 出错码并退出.
	while (arg < NR_OPEN)
   153ff:	83 7c 24 10 13       	cmpl   $0x13,0x10(%esp)
   15404:	76 dd                	jbe    153e3 <dupfd+0x3b>
   15406:	eb 01                	jmp    15409 <dupfd+0x61>
		if (current->filp[arg])
			arg++;
		else
			break;
   15408:	90                   	nop
	if (arg >= NR_OPEN)
   15409:	83 7c 24 10 13       	cmpl   $0x13,0x10(%esp)
   1540e:	76 07                	jbe    15417 <dupfd+0x6f>
		return -EMFILE;
   15410:	b8 e8 ff ff ff       	mov    $0xffffffe8,%eax
   15415:	eb 6e                	jmp    15485 <dupfd+0xdd>
	// 否则针对找到的空闲项(句柄),在执行时关闭标志位图close_on_exec中复位该句柄位.即在运行exec()类函数时,不会关闭用dup()创建的的句柄.并令该
	// 文件结构指针等于原句柄fd的指针,并且将文件引用数增1.最后返回新的文件句柄arg.
	current->close_on_exec &= ~(1 << arg);
   15417:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1541c:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   15422:	8b 9a 44 03 00 00    	mov    0x344(%edx),%ebx
   15428:	8b 54 24 10          	mov    0x10(%esp),%edx
   1542c:	be 01 00 00 00       	mov    $0x1,%esi
   15431:	89 d1                	mov    %edx,%ecx
   15433:	d3 e6                	shl    %cl,%esi
   15435:	89 f2                	mov    %esi,%edx
   15437:	f7 d2                	not    %edx
   15439:	21 da                	and    %ebx,%edx
   1543b:	89 90 44 03 00 00    	mov    %edx,0x344(%eax)
	(current->filp[arg] = current->filp[fd])->f_count++;
   15441:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15446:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   1544c:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   15450:	81 c1 d0 00 00 00    	add    $0xd0,%ecx
   15456:	8b 54 8a 08          	mov    0x8(%edx,%ecx,4),%edx
   1545a:	8b 4c 24 10          	mov    0x10(%esp),%ecx
   1545e:	81 c1 d0 00 00 00    	add    $0xd0,%ecx
   15464:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
   15468:	8b 54 24 10          	mov    0x10(%esp),%edx
   1546c:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15472:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15476:	0f b7 50 04          	movzwl 0x4(%eax),%edx
   1547a:	83 c2 01             	add    $0x1,%edx
   1547d:	66 89 50 04          	mov    %dx,0x4(%eax)
	return arg;
   15481:	8b 44 24 10          	mov    0x10(%esp),%eax
}
   15485:	5b                   	pop    %ebx
   15486:	5e                   	pop    %esi
   15487:	c3                   	ret    

00015488 <sys_dup2>:
// 复制文件句柄系统调用。
// 复制指定文件句柄oldfd，新文件句柄值等于newfd。如果newfd已打开，则首先关闭之。
// 参数：oldfd -- 原文件句柄；newfd - 新文件句柄。
// 返回新文件句柄值。
int sys_dup2(unsigned int oldfd, unsigned int newfd)
{
   15488:	83 ec 0c             	sub    $0xc,%esp
	sys_close(newfd);               						// 若句柄newfd已经打开，则首先关闭之。
   1548b:	8b 44 24 14          	mov    0x14(%esp),%eax
   1548f:	83 ec 0c             	sub    $0xc,%esp
   15492:	50                   	push   %eax
   15493:	e8 38 87 ff ff       	call   dbd0 <sys_close>
   15498:	83 c4 10             	add    $0x10,%esp
	return dupfd(oldfd, newfd);      						// 复制并返回新句柄。
   1549b:	83 ec 08             	sub    $0x8,%esp
   1549e:	ff 74 24 1c          	pushl  0x1c(%esp)
   154a2:	ff 74 24 1c          	pushl  0x1c(%esp)
   154a6:	e8 fd fe ff ff       	call   153a8 <dupfd>
   154ab:	83 c4 10             	add    $0x10,%esp
}
   154ae:	83 c4 0c             	add    $0xc,%esp
   154b1:	c3                   	ret    

000154b2 <sys_dup>:
// 复制指定文件句柄oldfd,新句柄的值是当前最小的未用句柄值.
// 参数:fildes -- 被复制的文件句柄.
// 返回新文件句柄值.
int sys_dup(unsigned int fildes)
{
	return dupfd(fildes, 0);
   154b2:	6a 00                	push   $0x0
   154b4:	ff 74 24 08          	pushl  0x8(%esp)
   154b8:	e8 eb fe ff ff       	call   153a8 <dupfd>
   154bd:	83 c4 08             	add    $0x8,%esp
}
   154c0:	c3                   	ret    

000154c1 <sys_fcntl>:
// arg是新文件句可取的最小值；对于设置文件操作和访问标志命令F_SETFL，arg是新的文件操作和访问模式。对于文件上锁命令
// F_GETLK、F_SETLK和F_SETLKW，arg是指向flock结构的指针。但本内核中没有实现文件上锁功能。
// 返回：若出错，则所有操作都返回-1.若成功，那么F_DUPFD返回新文件句柄；F_GETFD返回文件句柄的当前执行时关闭标志
// close_on_exec；F_GETFL返回文件操作和访问标志。
int sys_fcntl(unsigned int fd, unsigned int cmd, unsigned long arg)
{
   154c1:	56                   	push   %esi
   154c2:	53                   	push   %ebx
   154c3:	83 ec 10             	sub    $0x10,%esp
	struct file * filp;

	// 首先检查给出的文件句柄有效性。然后根据不同命令cmd进行分别处理。如果文件句柄值大于一个进程最多打开文件数NR_OPEN，或者
	// 该句柄的文件结构指针为空，则返回出错码并退出。
	if (fd >= NR_OPEN || !(filp = current->filp[fd]))
   154c6:	83 7c 24 1c 13       	cmpl   $0x13,0x1c(%esp)
   154cb:	77 1e                	ja     154eb <sys_fcntl+0x2a>
   154cd:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   154d2:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   154d6:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   154dc:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   154e0:	89 44 24 0c          	mov    %eax,0xc(%esp)
   154e4:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   154e9:	75 0a                	jne    154f5 <sys_fcntl+0x34>
		return -EBADF;
   154eb:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   154f0:	e9 03 01 00 00       	jmp    155f8 <sys_fcntl+0x137>
	switch (cmd) {
   154f5:	83 7c 24 20 07       	cmpl   $0x7,0x20(%esp)
   154fa:	0f 87 f3 00 00 00    	ja     155f3 <sys_fcntl+0x132>
   15500:	8b 44 24 20          	mov    0x20(%esp),%eax
   15504:	c1 e0 02             	shl    $0x2,%eax
   15507:	05 f0 3e 02 00       	add    $0x23ef0,%eax
   1550c:	8b 00                	mov    (%eax),%eax
   1550e:	ff e0                	jmp    *%eax
		case F_DUPFD:   										// 复制文件句柄。
			return dupfd(fd,arg);
   15510:	ff 74 24 24          	pushl  0x24(%esp)
   15514:	ff 74 24 20          	pushl  0x20(%esp)
   15518:	e8 8b fe ff ff       	call   153a8 <dupfd>
   1551d:	83 c4 08             	add    $0x8,%esp
   15520:	e9 d3 00 00 00       	jmp    155f8 <sys_fcntl+0x137>
		case F_GETFD:   										// 取文件句柄的执行时关闭标志。
			return (current->close_on_exec >> fd) & 1;
   15525:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1552a:	8b 90 44 03 00 00    	mov    0x344(%eax),%edx
   15530:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   15534:	89 c1                	mov    %eax,%ecx
   15536:	d3 ea                	shr    %cl,%edx
   15538:	89 d0                	mov    %edx,%eax
   1553a:	83 e0 01             	and    $0x1,%eax
   1553d:	e9 b6 00 00 00       	jmp    155f8 <sys_fcntl+0x137>
		case F_SETFD:   										// 设置执行时关闭标志。arg位0置位是设置，否则关闭。
			if (arg & 1)
   15542:	8b 44 24 24          	mov    0x24(%esp),%eax
   15546:	83 e0 01             	and    $0x1,%eax
   15549:	85 c0                	test   %eax,%eax
   1554b:	74 2a                	je     15577 <sys_fcntl+0xb6>
				current->close_on_exec |= (1 << fd);
   1554d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15552:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   15558:	8b 9a 44 03 00 00    	mov    0x344(%edx),%ebx
   1555e:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   15562:	be 01 00 00 00       	mov    $0x1,%esi
   15567:	89 d1                	mov    %edx,%ecx
   15569:	d3 e6                	shl    %cl,%esi
   1556b:	89 f2                	mov    %esi,%edx
   1556d:	09 da                	or     %ebx,%edx
   1556f:	89 90 44 03 00 00    	mov    %edx,0x344(%eax)
   15575:	eb 2a                	jmp    155a1 <sys_fcntl+0xe0>
			else
				current->close_on_exec &= ~(1 << fd);
   15577:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1557c:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   15582:	8b 9a 44 03 00 00    	mov    0x344(%edx),%ebx
   15588:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1558c:	be 01 00 00 00       	mov    $0x1,%esi
   15591:	89 d1                	mov    %edx,%ecx
   15593:	d3 e6                	shl    %cl,%esi
   15595:	89 f2                	mov    %esi,%edx
   15597:	f7 d2                	not    %edx
   15599:	21 da                	and    %ebx,%edx
   1559b:	89 90 44 03 00 00    	mov    %edx,0x344(%eax)
			return 0;
   155a1:	b8 00 00 00 00       	mov    $0x0,%eax
   155a6:	eb 50                	jmp    155f8 <sys_fcntl+0x137>
		case F_GETFL:   										// 取文件状态标志和访问模式。
			return filp->f_flags;
   155a8:	8b 44 24 0c          	mov    0xc(%esp),%eax
   155ac:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   155b0:	0f b7 c0             	movzwl %ax,%eax
   155b3:	eb 43                	jmp    155f8 <sys_fcntl+0x137>
		case F_SETFL:   										// 设置文件状态和访问模式（根据arg设置添加、非阻塞标志）。
			filp->f_flags &= ~(O_APPEND | O_NONBLOCK);
   155b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   155b9:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   155bd:	80 e4 f3             	and    $0xf3,%ah
   155c0:	89 c2                	mov    %eax,%edx
   155c2:	8b 44 24 0c          	mov    0xc(%esp),%eax
   155c6:	66 89 50 02          	mov    %dx,0x2(%eax)
			filp->f_flags |= arg & (O_APPEND | O_NONBLOCK);
   155ca:	8b 44 24 0c          	mov    0xc(%esp),%eax
   155ce:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   155d2:	8b 54 24 24          	mov    0x24(%esp),%edx
   155d6:	66 81 e2 00 0c       	and    $0xc00,%dx
   155db:	09 c2                	or     %eax,%edx
   155dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
   155e1:	66 89 50 02          	mov    %dx,0x2(%eax)
			return 0;
   155e5:	b8 00 00 00 00       	mov    $0x0,%eax
   155ea:	eb 0c                	jmp    155f8 <sys_fcntl+0x137>
		case F_GETLK:	case F_SETLK:	case F_SETLKW:  		// 未实现。
			return -1;
   155ec:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   155f1:	eb 05                	jmp    155f8 <sys_fcntl+0x137>
		default:
			return -1;
   155f3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
   155f8:	83 c4 10             	add    $0x10,%esp
   155fb:	5b                   	pop    %ebx
   155fc:	5e                   	pop    %esi
   155fd:	c3                   	ret    

000155fe <sys_ioctl>:
// 该函数首先判断参数给出的文件描述符是否有效。然后根据对应i节点中文件属性判断文件类型，并根据具体文件类型调用相关
// 的处理函数。
// 参数：fd - 文件描述符； cmd - 命令码； arg - 参数。
// 返回：成功则返回0,否则返回出错码。
int sys_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg)
{
   155fe:	83 ec 1c             	sub    $0x1c,%esp
	struct file * filp;
	int dev, mode;

	// 首先判断给出的文件描述符的有效性。如果文件描述符超出可打开的文件数，或者对应描述符的文件结构指针为空，则返回出错
	// 码退出。
	if (fd >= NR_OPEN || !(filp = current->filp[fd]))
   15601:	83 7c 24 20 13       	cmpl   $0x13,0x20(%esp)
   15606:	77 1e                	ja     15626 <sys_ioctl+0x28>
   15608:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1560d:	8b 54 24 20          	mov    0x20(%esp),%edx
   15611:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15617:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   1561b:	89 44 24 0c          	mov    %eax,0xc(%esp)
   1561f:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   15624:	75 0a                	jne    15630 <sys_ioctl+0x32>
		return -EBADF;
   15626:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   1562b:	e9 e6 00 00 00       	jmp    15716 <sys_ioctl+0x118>
	// 如果文件结构对应的是管道i节点，则根据进程是否有权操作该管道确定是否执行管道IO控制操作。若有权执行则调用pipe_ioctl()，
	// 否则返回无效文件错误码。
	if (filp->f_inode->i_pipe)
   15630:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15634:	8b 40 08             	mov    0x8(%eax),%eax
   15637:	0f b6 40 38          	movzbl 0x38(%eax),%eax
   1563b:	84 c0                	test   %al,%al
   1563d:	74 3d                	je     1567c <sys_ioctl+0x7e>
		return (filp->f_mode & 1) ? pipe_ioctl(filp->f_inode, cmd, arg) : -EBADF;
   1563f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15643:	0f b7 00             	movzwl (%eax),%eax
   15646:	0f b7 c0             	movzwl %ax,%eax
   15649:	83 e0 01             	and    $0x1,%eax
   1564c:	85 c0                	test   %eax,%eax
   1564e:	74 22                	je     15672 <sys_ioctl+0x74>
   15650:	8b 4c 24 28          	mov    0x28(%esp),%ecx
   15654:	8b 54 24 24          	mov    0x24(%esp),%edx
   15658:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1565c:	8b 40 08             	mov    0x8(%eax),%eax
   1565f:	83 ec 04             	sub    $0x4,%esp
   15662:	51                   	push   %ecx
   15663:	52                   	push   %edx
   15664:	50                   	push   %eax
   15665:	e8 8d d3 ff ff       	call   129f7 <pipe_ioctl>
   1566a:	83 c4 10             	add    $0x10,%esp
   1566d:	e9 a4 00 00 00       	jmp    15716 <sys_ioctl+0x118>
   15672:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   15677:	e9 9a 00 00 00       	jmp    15716 <sys_ioctl+0x118>
	// 对于其他类型文件，取对应文件的属性，并据此判断文件的类型。如果该文件即不是字符设备文件，也不是块设备文件，则返回
	// 出错码退出。若是字符或块设备文件，则从文件的i节点中取设备号。如果设备号大于系统现有的设备数，则返回出错号。
	mode = filp->f_inode->i_mode;
   1567c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15680:	8b 40 08             	mov    0x8(%eax),%eax
   15683:	0f b7 00             	movzwl (%eax),%eax
   15686:	0f b7 c0             	movzwl %ax,%eax
   15689:	89 44 24 08          	mov    %eax,0x8(%esp)
	if (!S_ISCHR(mode) && !S_ISBLK(mode))
   1568d:	8b 44 24 08          	mov    0x8(%esp),%eax
   15691:	25 00 f0 00 00       	and    $0xf000,%eax
   15696:	3d 00 20 00 00       	cmp    $0x2000,%eax
   1569b:	74 17                	je     156b4 <sys_ioctl+0xb6>
   1569d:	8b 44 24 08          	mov    0x8(%esp),%eax
   156a1:	25 00 f0 00 00       	and    $0xf000,%eax
   156a6:	3d 00 60 00 00       	cmp    $0x6000,%eax
   156ab:	74 07                	je     156b4 <sys_ioctl+0xb6>
		return -EINVAL;
   156ad:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   156b2:	eb 62                	jmp    15716 <sys_ioctl+0x118>
	dev = filp->f_inode->i_zone[0];
   156b4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   156b8:	8b 40 08             	mov    0x8(%eax),%eax
   156bb:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   156bf:	0f b7 c0             	movzwl %ax,%eax
   156c2:	89 44 24 04          	mov    %eax,0x4(%esp)
	if (MAJOR(dev) >= NRDEVS)
   156c6:	8b 44 24 04          	mov    0x4(%esp),%eax
   156ca:	c1 e8 08             	shr    $0x8,%eax
   156cd:	83 f8 07             	cmp    $0x7,%eax
   156d0:	76 07                	jbe    156d9 <sys_ioctl+0xdb>
		return -ENODEV;
   156d2:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
   156d7:	eb 3d                	jmp    15716 <sys_ioctl+0x118>
	// 然后根据IO控制表ioctl_table查得对应设备的ioctl函数指针，并调用该函数。如果该设备在ioctl函数指针表中没有对应函数，
	// 则返回出错码。
	if (!ioctl_table[MAJOR(dev)])
   156d9:	8b 44 24 04          	mov    0x4(%esp),%eax
   156dd:	c1 e8 08             	shr    $0x8,%eax
   156e0:	8b 04 85 a0 e3 02 00 	mov    0x2e3a0(,%eax,4),%eax
   156e7:	85 c0                	test   %eax,%eax
   156e9:	75 07                	jne    156f2 <sys_ioctl+0xf4>
		return -ENOTTY;
   156eb:	b8 e7 ff ff ff       	mov    $0xffffffe7,%eax
   156f0:	eb 24                	jmp    15716 <sys_ioctl+0x118>
	return ioctl_table[MAJOR(dev)](dev, cmd, arg);
   156f2:	8b 44 24 04          	mov    0x4(%esp),%eax
   156f6:	c1 e8 08             	shr    $0x8,%eax
   156f9:	8b 04 85 a0 e3 02 00 	mov    0x2e3a0(,%eax,4),%eax
   15700:	8b 4c 24 28          	mov    0x28(%esp),%ecx
   15704:	8b 54 24 24          	mov    0x24(%esp),%edx
   15708:	83 ec 04             	sub    $0x4,%esp
   1570b:	51                   	push   %ecx
   1570c:	52                   	push   %edx
   1570d:	ff 74 24 10          	pushl  0x10(%esp)
   15711:	ff d0                	call   *%eax
   15713:	83 c4 10             	add    $0x10,%esp
}
   15716:	83 c4 1c             	add    $0x1c,%esp
   15719:	c3                   	ret    

0001571a <free_ind>:
#include <sys/stat.h>           								// 文件状态头文件。含有文件或文件系统状态结构stat{}和常量。

// 释放所有一次间接块。（内部函数）
// 参数dev是文件系统所有设备的设备号；block是逻辑块号。成功则返回1，否则返回0。
static int free_ind(int dev, int block)
{
   1571a:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	int block_busy;

	// 首先判断参数的有效性。如果逻辑块号为0,则返回。然后读取一次间接块，并释放其上表明使用的所有逻辑块，然后
	// 释放该一次间接块的缓冲块。函数free_block()用于释放设备上指定逻辑块号的磁盘块（fs/bitmap.c）。
	if (!block)
   1571d:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   15722:	75 0a                	jne    1572e <free_ind+0x14>
		return 1;
   15724:	b8 01 00 00 00       	mov    $0x1,%eax
   15729:	e9 bf 00 00 00       	jmp    157ed <free_ind+0xd3>
	block_busy = 0;
   1572e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
   15735:	00 
	if (bh = bread(dev, block)) {
   15736:	83 ec 08             	sub    $0x8,%esp
   15739:	ff 74 24 2c          	pushl  0x2c(%esp)
   1573d:	ff 74 24 2c          	pushl  0x2c(%esp)
   15741:	e8 a0 9f ff ff       	call   f6e6 <bread>
   15746:	83 c4 10             	add    $0x10,%esp
   15749:	89 04 24             	mov    %eax,(%esp)
   1574c:	83 3c 24 00          	cmpl   $0x0,(%esp)
   15750:	74 7a                	je     157cc <free_ind+0xb2>
		p = (unsigned short *) bh->b_data;              		// 指向缓冲块数据区。
   15752:	8b 04 24             	mov    (%esp),%eax
   15755:	8b 00                	mov    (%eax),%eax
   15757:	89 44 24 0c          	mov    %eax,0xc(%esp)
		for (i = 0; i < 512; i++, p++)                         	// 每个逻辑块上可有512个块号。
   1575b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   15762:	00 
   15763:	eb 4e                	jmp    157b3 <free_ind+0x99>
			if (*p)
   15765:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15769:	0f b7 00             	movzwl (%eax),%eax
   1576c:	66 85 c0             	test   %ax,%ax
   1576f:	74 38                	je     157a9 <free_ind+0x8f>
				if (free_block(dev, *p)) {       				// 释放指定的设备逻辑块。
   15771:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15775:	0f b7 00             	movzwl (%eax),%eax
   15778:	0f b7 c0             	movzwl %ax,%eax
   1577b:	83 ec 08             	sub    $0x8,%esp
   1577e:	50                   	push   %eax
   1577f:	ff 74 24 2c          	pushl  0x2c(%esp)
   15783:	e8 82 f5 ff ff       	call   14d0a <free_block>
   15788:	83 c4 10             	add    $0x10,%esp
   1578b:	85 c0                	test   %eax,%eax
   1578d:	74 12                	je     157a1 <free_ind+0x87>
					*p = 0;                 					// 清零。
   1578f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15793:	66 c7 00 00 00       	movw   $0x0,(%eax)
					bh->b_dirt = 1;         					// 设置已修改标志。
   15798:	8b 04 24             	mov    (%esp),%eax
   1579b:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
   1579f:	eb 08                	jmp    157a9 <free_ind+0x8f>
				} else
					block_busy = 1;         					// 设置逻辑块没有释放标志。
   157a1:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
   157a8:	00 
	if (!block)
		return 1;
	block_busy = 0;
	if (bh = bread(dev, block)) {
		p = (unsigned short *) bh->b_data;              		// 指向缓冲块数据区。
		for (i = 0; i < 512; i++, p++)                         	// 每个逻辑块上可有512个块号。
   157a9:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
   157ae:	83 44 24 0c 02       	addl   $0x2,0xc(%esp)
   157b3:	81 7c 24 08 ff 01 00 	cmpl   $0x1ff,0x8(%esp)
   157ba:	00 
   157bb:	7e a8                	jle    15765 <free_ind+0x4b>
				if (free_block(dev, *p)) {       				// 释放指定的设备逻辑块。
					*p = 0;                 					// 清零。
					bh->b_dirt = 1;         					// 设置已修改标志。
				} else
					block_busy = 1;         					// 设置逻辑块没有释放标志。
		brelse(bh);                                     		// 然后释放间接块占用的缓冲块。
   157bd:	83 ec 0c             	sub    $0xc,%esp
   157c0:	ff 74 24 0c          	pushl  0xc(%esp)
   157c4:	e8 c7 9e ff ff       	call   f690 <brelse>
   157c9:	83 c4 10             	add    $0x10,%esp
	}
	// 最后释放设备上的一次间接块。但如果其中有逻辑块没有被释放，则返回0（失败）。
	if (block_busy)
   157cc:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   157d1:	74 07                	je     157da <free_ind+0xc0>
		return 0;
   157d3:	b8 00 00 00 00       	mov    $0x0,%eax
   157d8:	eb 13                	jmp    157ed <free_ind+0xd3>
	else
		return free_block(dev, block);                   		// 成功则返回1,否则返回0.
   157da:	83 ec 08             	sub    $0x8,%esp
   157dd:	ff 74 24 2c          	pushl  0x2c(%esp)
   157e1:	ff 74 24 2c          	pushl  0x2c(%esp)
   157e5:	e8 20 f5 ff ff       	call   14d0a <free_block>
   157ea:	83 c4 10             	add    $0x10,%esp
}
   157ed:	83 c4 1c             	add    $0x1c,%esp
   157f0:	c3                   	ret    

000157f1 <free_dind>:

// 释放所有二次间接块。
// 参数dev是文件系统所在设备的设备号；block是逻辑块号。
static int free_dind(int dev, int block)
{
   157f1:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	int block_busy;                                         	// 在逻辑块没有被释放的标志。

	// 首先判断参数的有效性。如果逻辑块号为0,则返回。然后读取二次间接块的一级块，并释放其上表明使用的所有逻辑块，
	// 然后释放该一级块的缓冲块。
	if (!block)
   157f4:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   157f9:	75 0a                	jne    15805 <free_dind+0x14>
		return 1;
   157fb:	b8 01 00 00 00       	mov    $0x1,%eax
   15800:	e9 bf 00 00 00       	jmp    158c4 <free_dind+0xd3>
	block_busy = 0;
   15805:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
   1580c:	00 
	if (bh = bread(dev, block)) {
   1580d:	83 ec 08             	sub    $0x8,%esp
   15810:	ff 74 24 2c          	pushl  0x2c(%esp)
   15814:	ff 74 24 2c          	pushl  0x2c(%esp)
   15818:	e8 c9 9e ff ff       	call   f6e6 <bread>
   1581d:	83 c4 10             	add    $0x10,%esp
   15820:	89 04 24             	mov    %eax,(%esp)
   15823:	83 3c 24 00          	cmpl   $0x0,(%esp)
   15827:	74 7a                	je     158a3 <free_dind+0xb2>
		p = (unsigned short *) bh->b_data;              		// 指向缓冲块数据区。
   15829:	8b 04 24             	mov    (%esp),%eax
   1582c:	8b 00                	mov    (%eax),%eax
   1582e:	89 44 24 0c          	mov    %eax,0xc(%esp)
		for (i = 0; i < 512; i++, p++)                         	// 每个逻辑块上可连接512个二级块。
   15832:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   15839:	00 
   1583a:	eb 4e                	jmp    1588a <free_dind+0x99>
			if (*p)
   1583c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15840:	0f b7 00             	movzwl (%eax),%eax
   15843:	66 85 c0             	test   %ax,%ax
   15846:	74 38                	je     15880 <free_dind+0x8f>
				if (free_ind(dev, *p)) {         				// 释放所有一次间接块。
   15848:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1584c:	0f b7 00             	movzwl (%eax),%eax
   1584f:	0f b7 c0             	movzwl %ax,%eax
   15852:	83 ec 08             	sub    $0x8,%esp
   15855:	50                   	push   %eax
   15856:	ff 74 24 2c          	pushl  0x2c(%esp)
   1585a:	e8 bb fe ff ff       	call   1571a <free_ind>
   1585f:	83 c4 10             	add    $0x10,%esp
   15862:	85 c0                	test   %eax,%eax
   15864:	74 12                	je     15878 <free_dind+0x87>
					*p = 0;                 					// 清零。
   15866:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1586a:	66 c7 00 00 00       	movw   $0x0,(%eax)
					bh->b_dirt = 1;         					// 设置已修改标志。
   1586f:	8b 04 24             	mov    (%esp),%eax
   15872:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
   15876:	eb 08                	jmp    15880 <free_dind+0x8f>
				} else
					block_busy = 1;         					// 设置逻辑块没有释放标志。
   15878:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
   1587f:	00 
	if (!block)
		return 1;
	block_busy = 0;
	if (bh = bread(dev, block)) {
		p = (unsigned short *) bh->b_data;              		// 指向缓冲块数据区。
		for (i = 0; i < 512; i++, p++)                         	// 每个逻辑块上可连接512个二级块。
   15880:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
   15885:	83 44 24 0c 02       	addl   $0x2,0xc(%esp)
   1588a:	81 7c 24 08 ff 01 00 	cmpl   $0x1ff,0x8(%esp)
   15891:	00 
   15892:	7e a8                	jle    1583c <free_dind+0x4b>
				if (free_ind(dev, *p)) {         				// 释放所有一次间接块。
					*p = 0;                 					// 清零。
					bh->b_dirt = 1;         					// 设置已修改标志。
				} else
					block_busy = 1;         					// 设置逻辑块没有释放标志。
		brelse(bh);                                     		// 释放二次间接块占用的缓冲块。
   15894:	83 ec 0c             	sub    $0xc,%esp
   15897:	ff 74 24 0c          	pushl  0xc(%esp)
   1589b:	e8 f0 9d ff ff       	call   f690 <brelse>
   158a0:	83 c4 10             	add    $0x10,%esp
	}
	// 最后释放设备上的二次间接块。但如果其中有逻辑块没有被释放，则返回0（失败）。
	if (block_busy)
   158a3:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   158a8:	74 07                	je     158b1 <free_dind+0xc0>
		return 0;
   158aa:	b8 00 00 00 00       	mov    $0x0,%eax
   158af:	eb 13                	jmp    158c4 <free_dind+0xd3>
	else
		return free_block(dev, block);							// 最后释放存放第一间接块的逻辑块
   158b1:	83 ec 08             	sub    $0x8,%esp
   158b4:	ff 74 24 2c          	pushl  0x2c(%esp)
   158b8:	ff 74 24 2c          	pushl  0x2c(%esp)
   158bc:	e8 49 f4 ff ff       	call   14d0a <free_block>
   158c1:	83 c4 10             	add    $0x10,%esp
}
   158c4:	83 c4 1c             	add    $0x1c,%esp
   158c7:	c3                   	ret    

000158c8 <truncate>:

// 截断文件数据函数。
// 将节点对应的文件长度减0,并释放战胜的设备空间。
void truncate(struct m_inode * inode)
{
   158c8:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	int block_busy;                 							// 有逻辑块没有被释放的标志。

	// 首先判断指定i节点有效性。如果不是常规文件、目录文件或链接项，则返回。
	if (!(S_ISREG(inode->i_mode) || S_ISDIR(inode->i_mode) ||
   158cb:	8b 44 24 20          	mov    0x20(%esp),%eax
   158cf:	0f b7 00             	movzwl (%eax),%eax
   158d2:	0f b7 c0             	movzwl %ax,%eax
   158d5:	25 00 f0 00 00       	and    $0xf000,%eax
   158da:	3d 00 80 00 00       	cmp    $0x8000,%eax
   158df:	74 30                	je     15911 <truncate+0x49>
   158e1:	8b 44 24 20          	mov    0x20(%esp),%eax
   158e5:	0f b7 00             	movzwl (%eax),%eax
   158e8:	0f b7 c0             	movzwl %ax,%eax
   158eb:	25 00 f0 00 00       	and    $0xf000,%eax
   158f0:	3d 00 40 00 00       	cmp    $0x4000,%eax
   158f5:	74 1a                	je     15911 <truncate+0x49>
	     S_ISLNK(inode->i_mode)))
   158f7:	8b 44 24 20          	mov    0x20(%esp),%eax
   158fb:	0f b7 00             	movzwl (%eax),%eax
   158fe:	0f b7 c0             	movzwl %ax,%eax
   15901:	25 00 f0 00 00       	and    $0xf000,%eax
{
	int i;
	int block_busy;                 							// 有逻辑块没有被释放的标志。

	// 首先判断指定i节点有效性。如果不是常规文件、目录文件或链接项，则返回。
	if (!(S_ISREG(inode->i_mode) || S_ISDIR(inode->i_mode) ||
   15906:	3d 00 a0 00 00       	cmp    $0xa000,%eax
   1590b:	0f 85 50 01 00 00    	jne    15a61 <truncate+0x199>
	     S_ISLNK(inode->i_mode)))
		return;
	// 然后释放i节点的7个直接逻辑块，并将这7个逻辑块项全置零。函数free_block()用于释放设备上指定逻辑块的磁盘块
	// （fs/bitmap.c）。若有逻辑块忙而没有被释放则置块忙标志block_busy。
repeat:
	block_busy = 0;
   15911:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   15918:	00 
	for (i = 0; i < 7; i++)
   15919:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   15920:	00 
   15921:	eb 5c                	jmp    1597f <truncate+0xb7>
		if (inode->i_zone[i]) {                 				// 如果块号不为0，则释放之。
   15923:	8b 44 24 20          	mov    0x20(%esp),%eax
   15927:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1592b:	0f b7 44 50 0e       	movzwl 0xe(%eax,%edx,2),%eax
   15930:	66 85 c0             	test   %ax,%ax
   15933:	74 45                	je     1597a <truncate+0xb2>
			if (free_block(inode->i_dev, inode->i_zone[i]))
   15935:	8b 44 24 20          	mov    0x20(%esp),%eax
   15939:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1593d:	0f b7 44 50 0e       	movzwl 0xe(%eax,%edx,2),%eax
   15942:	0f b7 d0             	movzwl %ax,%edx
   15945:	8b 44 24 20          	mov    0x20(%esp),%eax
   15949:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   1594d:	0f b7 c0             	movzwl %ax,%eax
   15950:	83 ec 08             	sub    $0x8,%esp
   15953:	52                   	push   %edx
   15954:	50                   	push   %eax
   15955:	e8 b0 f3 ff ff       	call   14d0a <free_block>
   1595a:	83 c4 10             	add    $0x10,%esp
   1595d:	85 c0                	test   %eax,%eax
   1595f:	74 11                	je     15972 <truncate+0xaa>
				inode->i_zone[i] = 0;     						// 块指针置0。
   15961:	8b 44 24 20          	mov    0x20(%esp),%eax
   15965:	8b 54 24 0c          	mov    0xc(%esp),%edx
   15969:	66 c7 44 50 0e 00 00 	movw   $0x0,0xe(%eax,%edx,2)
   15970:	eb 08                	jmp    1597a <truncate+0xb2>
			else
				block_busy = 1;         						// 若没有释放掉则置标志。
   15972:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
   15979:	00 
		return;
	// 然后释放i节点的7个直接逻辑块，并将这7个逻辑块项全置零。函数free_block()用于释放设备上指定逻辑块的磁盘块
	// （fs/bitmap.c）。若有逻辑块忙而没有被释放则置块忙标志block_busy。
repeat:
	block_busy = 0;
	for (i = 0; i < 7; i++)
   1597a:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   1597f:	83 7c 24 0c 06       	cmpl   $0x6,0xc(%esp)
   15984:	7e 9d                	jle    15923 <truncate+0x5b>
			if (free_block(inode->i_dev, inode->i_zone[i]))
				inode->i_zone[i] = 0;     						// 块指针置0。
			else
				block_busy = 1;         						// 若没有释放掉则置标志。
		}
	if (free_ind(inode->i_dev, inode->i_zone[7]))    			// 释放所有一次间接块。
   15986:	8b 44 24 20          	mov    0x20(%esp),%eax
   1598a:	0f b7 40 1c          	movzwl 0x1c(%eax),%eax
   1598e:	0f b7 d0             	movzwl %ax,%edx
   15991:	8b 44 24 20          	mov    0x20(%esp),%eax
   15995:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   15999:	0f b7 c0             	movzwl %ax,%eax
   1599c:	83 ec 08             	sub    $0x8,%esp
   1599f:	52                   	push   %edx
   159a0:	50                   	push   %eax
   159a1:	e8 74 fd ff ff       	call   1571a <free_ind>
   159a6:	83 c4 10             	add    $0x10,%esp
   159a9:	85 c0                	test   %eax,%eax
   159ab:	74 0c                	je     159b9 <truncate+0xf1>
		inode->i_zone[7] = 0;                   				// 块指针置0。
   159ad:	8b 44 24 20          	mov    0x20(%esp),%eax
   159b1:	66 c7 40 1c 00 00    	movw   $0x0,0x1c(%eax)
   159b7:	eb 08                	jmp    159c1 <truncate+0xf9>
	else
		block_busy = 1;                         				// 若没有释放掉则置标志。
   159b9:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
   159c0:	00 
	if (free_dind(inode->i_dev, inode->i_zone[8]))   			// 释放所有二次间接块。
   159c1:	8b 44 24 20          	mov    0x20(%esp),%eax
   159c5:	0f b7 40 1e          	movzwl 0x1e(%eax),%eax
   159c9:	0f b7 d0             	movzwl %ax,%edx
   159cc:	8b 44 24 20          	mov    0x20(%esp),%eax
   159d0:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   159d4:	0f b7 c0             	movzwl %ax,%eax
   159d7:	83 ec 08             	sub    $0x8,%esp
   159da:	52                   	push   %edx
   159db:	50                   	push   %eax
   159dc:	e8 10 fe ff ff       	call   157f1 <free_dind>
   159e1:	83 c4 10             	add    $0x10,%esp
   159e4:	85 c0                	test   %eax,%eax
   159e6:	74 0c                	je     159f4 <truncate+0x12c>
		inode->i_zone[8] = 0;                   				// 块指针置0。
   159e8:	8b 44 24 20          	mov    0x20(%esp),%eax
   159ec:	66 c7 40 1e 00 00    	movw   $0x0,0x1e(%eax)
   159f2:	eb 08                	jmp    159fc <truncate+0x134>
	else
		block_busy = 1;                         				// 若没有释放掉则置标志。
   159f4:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
   159fb:	00 
	// 此后设置i节点已修改标志，并且如果还有逻辑块由于 “忙”而没有被释放，则把当前进程运行时间片置0,以让当前进程先被
	// 切换去运行其他进程，稍等一会再重新执行释放操作。
	inode->i_dirt = 1;
   159fc:	8b 44 24 20          	mov    0x20(%esp),%eax
   15a00:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	if (block_busy) {
   15a04:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   15a09:	74 16                	je     15a21 <truncate+0x159>
		current->counter = 0;           						// 当前进程时间片置0。
   15a0b:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15a10:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
		schedule();
   15a17:	e8 29 14 ff ff       	call   6e45 <schedule>
		goto repeat;
   15a1c:	e9 f0 fe ff ff       	jmp    15911 <truncate+0x49>
	}
	inode->i_size = 0;                      					// 文件大小置零。
   15a21:	8b 44 24 20          	mov    0x20(%esp),%eax
   15a25:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	// 最后重新置文件修改时间和i节点改变时间为当前时间。宏CURRENT_TIME定义在头文件include/linux/sched.h中，定义
	// 为（startup_time+jiffies/HZ）。用于取得从1970:0:0:0开始到现在为止经过的秒数。
	inode->i_mtime = inode->i_ctime = CURRENT_TIME;
   15a2c:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   15a31:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
   15a37:	01 d0                	add    %edx,%eax
   15a39:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   15a3e:	f7 e2                	mul    %edx
   15a40:	c1 ea 05             	shr    $0x5,%edx
   15a43:	a1 04 eb 02 00       	mov    0x2eb04,%eax
   15a48:	01 c2                	add    %eax,%edx
   15a4a:	8b 44 24 20          	mov    0x20(%esp),%eax
   15a4e:	89 50 2c             	mov    %edx,0x2c(%eax)
   15a51:	8b 44 24 20          	mov    0x20(%esp),%eax
   15a55:	8b 50 2c             	mov    0x2c(%eax),%edx
   15a58:	8b 44 24 20          	mov    0x20(%esp),%eax
   15a5c:	89 50 08             	mov    %edx,0x8(%eax)
   15a5f:	eb 01                	jmp    15a62 <truncate+0x19a>
	int block_busy;                 							// 有逻辑块没有被释放的标志。

	// 首先判断指定i节点有效性。如果不是常规文件、目录文件或链接项，则返回。
	if (!(S_ISREG(inode->i_mode) || S_ISDIR(inode->i_mode) ||
	     S_ISLNK(inode->i_mode)))
		return;
   15a61:	90                   	nop
	}
	inode->i_size = 0;                      					// 文件大小置零。
	// 最后重新置文件修改时间和i节点改变时间为当前时间。宏CURRENT_TIME定义在头文件include/linux/sched.h中，定义
	// 为（startup_time+jiffies/HZ）。用于取得从1970:0:0:0开始到现在为止经过的秒数。
	inode->i_mtime = inode->i_ctime = CURRENT_TIME;
}
   15a62:	83 c4 1c             	add    $0x1c,%esp
   15a65:	c3                   	ret    

00015a66 <get_fs_long>:
//// 读取fs段中指定地址处的长字(4字节).
// 参数:addr - 指定的内存地址.
// %0 - (返回的长字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的长字.
static inline unsigned long get_fs_long(const unsigned long *addr)
{
   15a66:	83 ec 10             	sub    $0x10,%esp
	unsigned long _v;

	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
   15a69:	8b 44 24 14          	mov    0x14(%esp),%eax
   15a6d:	64 8b 00             	mov    %fs:(%eax),%eax
   15a70:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
   15a74:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   15a78:	83 c4 10             	add    $0x10,%esp
   15a7b:	c3                   	ret    

00015a7c <put_fs_long>:
//// 将一长字存放在fs段中指定内存地址处.
// 参数:val - 长字值;addr - 内存地址.
// %0 - 寄存器(长字值val);%1 - (内存地址addr).
static inline void put_fs_long(unsigned long val,unsigned long * addr)
{
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
   15a7c:	8b 44 24 04          	mov    0x4(%esp),%eax
   15a80:	8b 54 24 08          	mov    0x8(%esp),%edx
   15a84:	64 89 02             	mov    %eax,%fs:(%edx)
}
   15a87:	90                   	nop
   15a88:	c3                   	ret    

00015a89 <add_wait>:
} select_table;

// 把未准备好描述符的等待队列指针加入等待表wait_table中。参数*wait_address是与描述符相关的等待队列头指针。例如tty读缓冲队
// 列secondary的等待队列头指针是proc_list。参数p是do_select()中定义的等待表结构指针。
static void add_wait(struct task_struct ** wait_address, select_table * p)
{
   15a89:	83 ec 10             	sub    $0x10,%esp
	int i;

	// 首先判断描述符是否有对应的等待队列，若无则返回。然后在等待表中搜索参数指定的等待队列指针是否已经在等待表中设置过，若设置过也
	// 立刻返回。这个判断主要是针对管道文件描述符。例如若一个管道在等待可以进行读操作，那么其必定可以立刻进行写操作。
	if (!wait_address)
   15a8c:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   15a91:	74 70                	je     15b03 <add_wait+0x7a>
		return;
	for (i = 0 ; i < p->nr ; i++)
   15a93:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   15a9a:	00 
   15a9b:	eb 17                	jmp    15ab4 <add_wait+0x2b>
		if (p->entry[i].wait_address == wait_address)
   15a9d:	8b 44 24 18          	mov    0x18(%esp),%eax
   15aa1:	8b 54 24 0c          	mov    0xc(%esp),%edx
   15aa5:	8b 44 d0 08          	mov    0x8(%eax,%edx,8),%eax
   15aa9:	3b 44 24 14          	cmp    0x14(%esp),%eax
   15aad:	74 57                	je     15b06 <add_wait+0x7d>

	// 首先判断描述符是否有对应的等待队列，若无则返回。然后在等待表中搜索参数指定的等待队列指针是否已经在等待表中设置过，若设置过也
	// 立刻返回。这个判断主要是针对管道文件描述符。例如若一个管道在等待可以进行读操作，那么其必定可以立刻进行写操作。
	if (!wait_address)
		return;
	for (i = 0 ; i < p->nr ; i++)
   15aaf:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   15ab4:	8b 44 24 18          	mov    0x18(%esp),%eax
   15ab8:	8b 00                	mov    (%eax),%eax
   15aba:	3b 44 24 0c          	cmp    0xc(%esp),%eax
   15abe:	7f dd                	jg     15a9d <add_wait+0x14>
		if (p->entry[i].wait_address == wait_address)
			return;
	// 然后我们把描述符对应等待队列的头指针保存在等待表wait_table中，同时让等待表项的old_task字段指向等待队列头指针指向的任务（若
	// 无则为NULL），在让等待队列头指针指向当前任务。最后把等待表有效项计数值nr增1（其在第179行初始化为0）。
	p->entry[p->nr].wait_address = wait_address;
   15ac0:	8b 44 24 18          	mov    0x18(%esp),%eax
   15ac4:	8b 10                	mov    (%eax),%edx
   15ac6:	8b 44 24 18          	mov    0x18(%esp),%eax
   15aca:	8b 4c 24 14          	mov    0x14(%esp),%ecx
   15ace:	89 4c d0 08          	mov    %ecx,0x8(%eax,%edx,8)
	p->entry[p->nr].old_task = * wait_address;
   15ad2:	8b 44 24 18          	mov    0x18(%esp),%eax
   15ad6:	8b 10                	mov    (%eax),%edx
   15ad8:	8b 44 24 14          	mov    0x14(%esp),%eax
   15adc:	8b 08                	mov    (%eax),%ecx
   15ade:	8b 44 24 18          	mov    0x18(%esp),%eax
   15ae2:	89 4c d0 04          	mov    %ecx,0x4(%eax,%edx,8)
	*wait_address = current;
   15ae6:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   15aec:	8b 44 24 14          	mov    0x14(%esp),%eax
   15af0:	89 10                	mov    %edx,(%eax)
	p->nr++;
   15af2:	8b 44 24 18          	mov    0x18(%esp),%eax
   15af6:	8b 00                	mov    (%eax),%eax
   15af8:	8d 50 01             	lea    0x1(%eax),%edx
   15afb:	8b 44 24 18          	mov    0x18(%esp),%eax
   15aff:	89 10                	mov    %edx,(%eax)
   15b01:	eb 04                	jmp    15b07 <add_wait+0x7e>
	int i;

	// 首先判断描述符是否有对应的等待队列，若无则返回。然后在等待表中搜索参数指定的等待队列指针是否已经在等待表中设置过，若设置过也
	// 立刻返回。这个判断主要是针对管道文件描述符。例如若一个管道在等待可以进行读操作，那么其必定可以立刻进行写操作。
	if (!wait_address)
		return;
   15b03:	90                   	nop
   15b04:	eb 01                	jmp    15b07 <add_wait+0x7e>
	for (i = 0 ; i < p->nr ; i++)
		if (p->entry[i].wait_address == wait_address)
			return;
   15b06:	90                   	nop
	// 无则为NULL），在让等待队列头指针指向当前任务。最后把等待表有效项计数值nr增1（其在第179行初始化为0）。
	p->entry[p->nr].wait_address = wait_address;
	p->entry[p->nr].old_task = * wait_address;
	*wait_address = current;
	p->nr++;
}
   15b07:	83 c4 10             	add    $0x10,%esp
   15b0a:	c3                   	ret    

00015b0b <free_wait>:

// 清空等待表。参数是等待表结构指针。本函数在do_select()函数中睡眠后被唤醒返回时被调用，用于唤醒等待表中处于各个等待队列上的其他
// 任务，它与kernel/sched.c中sleep_on()函数的后半部分代码几乎完全相同，请参考对sleep_on()函数的说明。
static void free_wait(select_table * p)
{
   15b0b:	83 ec 1c             	sub    $0x1c,%esp
	struct task_struct ** tpp;

	// 如果等待表中各项（共nr个有效项）记录的等待队列头指针表明还有其他后来添加进的等待任务（例如其他进程调用sleep_on()函数而睡眠在该
	// 等待队列上），则此时等待队列头指针指向的不是当前进程，那么我们就需要先唤醒这些任务。操作方法是将等待队列头所指任务先置为就绪状态
	// （state = 0），并把自己设置为不可中断等待状态，即自己要等待这些后续进队列的任务被唤醒而执行时来唤醒本任务。然后重新执行调度程序。
	for (i = 0; i < p->nr ; i++) {
   15b0e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   15b15:	00 
   15b16:	e9 8e 00 00 00       	jmp    15ba9 <free_wait+0x9e>
		tpp = p->entry[i].wait_address;
   15b1b:	8b 44 24 20          	mov    0x20(%esp),%eax
   15b1f:	8b 54 24 0c          	mov    0xc(%esp),%edx
   15b23:	8b 44 d0 08          	mov    0x8(%eax,%edx,8),%eax
   15b27:	89 44 24 08          	mov    %eax,0x8(%esp)
		while (*tpp && *tpp != current) {
   15b2b:	eb 1c                	jmp    15b49 <free_wait+0x3e>
			(*tpp)->state = 0;
   15b2d:	8b 44 24 08          	mov    0x8(%esp),%eax
   15b31:	8b 00                	mov    (%eax),%eax
   15b33:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			current->state = TASK_UNINTERRUPTIBLE;
   15b39:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15b3e:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
			schedule();
   15b44:	e8 fc 12 ff ff       	call   6e45 <schedule>
	// 如果等待表中各项（共nr个有效项）记录的等待队列头指针表明还有其他后来添加进的等待任务（例如其他进程调用sleep_on()函数而睡眠在该
	// 等待队列上），则此时等待队列头指针指向的不是当前进程，那么我们就需要先唤醒这些任务。操作方法是将等待队列头所指任务先置为就绪状态
	// （state = 0），并把自己设置为不可中断等待状态，即自己要等待这些后续进队列的任务被唤醒而执行时来唤醒本任务。然后重新执行调度程序。
	for (i = 0; i < p->nr ; i++) {
		tpp = p->entry[i].wait_address;
		while (*tpp && *tpp != current) {
   15b49:	8b 44 24 08          	mov    0x8(%esp),%eax
   15b4d:	8b 00                	mov    (%eax),%eax
   15b4f:	85 c0                	test   %eax,%eax
   15b51:	74 0f                	je     15b62 <free_wait+0x57>
   15b53:	8b 44 24 08          	mov    0x8(%esp),%eax
   15b57:	8b 10                	mov    (%eax),%edx
   15b59:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15b5e:	39 c2                	cmp    %eax,%edx
   15b60:	75 cb                	jne    15b2d <free_wait+0x22>
			schedule();
		}
		// 执行到这里，说明等待表当前处理项中的等待队列头指针字段wait_address指向当前任务，若它为空，则表明调度有问题，于是显示警告信息。
		// 然后我们让等待队列头指针指向在我们前面进入队列的任务（第76行）。若此时该头指针确实指向一个任务而不是NULL，则说明队列中还有任务（
		// *tpp不为空），于是将该任务设置成就绪状态，唤醒之。最后把等待表的有效表项计数字段nr清零。
		if (!*tpp)
   15b62:	8b 44 24 08          	mov    0x8(%esp),%eax
   15b66:	8b 00                	mov    (%eax),%eax
   15b68:	85 c0                	test   %eax,%eax
   15b6a:	75 10                	jne    15b7c <free_wait+0x71>
			printk("free_wait: NULL");
   15b6c:	83 ec 0c             	sub    $0xc,%esp
   15b6f:	68 10 3f 02 00       	push   $0x23f10
   15b74:	e8 ce 30 ff ff       	call   8c47 <printk>
   15b79:	83 c4 10             	add    $0x10,%esp
		if (*tpp = p->entry[i].old_task)
   15b7c:	8b 44 24 20          	mov    0x20(%esp),%eax
   15b80:	8b 54 24 0c          	mov    0xc(%esp),%edx
   15b84:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   15b88:	8b 44 24 08          	mov    0x8(%esp),%eax
   15b8c:	89 10                	mov    %edx,(%eax)
   15b8e:	8b 44 24 08          	mov    0x8(%esp),%eax
   15b92:	8b 00                	mov    (%eax),%eax
   15b94:	85 c0                	test   %eax,%eax
   15b96:	74 0c                	je     15ba4 <free_wait+0x99>
			(**tpp).state = 0;
   15b98:	8b 44 24 08          	mov    0x8(%esp),%eax
   15b9c:	8b 00                	mov    (%eax),%eax
   15b9e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	struct task_struct ** tpp;

	// 如果等待表中各项（共nr个有效项）记录的等待队列头指针表明还有其他后来添加进的等待任务（例如其他进程调用sleep_on()函数而睡眠在该
	// 等待队列上），则此时等待队列头指针指向的不是当前进程，那么我们就需要先唤醒这些任务。操作方法是将等待队列头所指任务先置为就绪状态
	// （state = 0），并把自己设置为不可中断等待状态，即自己要等待这些后续进队列的任务被唤醒而执行时来唤醒本任务。然后重新执行调度程序。
	for (i = 0; i < p->nr ; i++) {
   15ba4:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   15ba9:	8b 44 24 20          	mov    0x20(%esp),%eax
   15bad:	8b 00                	mov    (%eax),%eax
   15baf:	3b 44 24 0c          	cmp    0xc(%esp),%eax
   15bb3:	0f 8f 62 ff ff ff    	jg     15b1b <free_wait+0x10>
		if (!*tpp)
			printk("free_wait: NULL");
		if (*tpp = p->entry[i].old_task)
			(**tpp).state = 0;
	}
	p->nr = 0;
   15bb9:	8b 44 24 20          	mov    0x20(%esp),%eax
   15bbd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   15bc3:	90                   	nop
   15bc4:	83 c4 1c             	add    $0x1c,%esp
   15bc7:	c3                   	ret    

00015bc8 <get_tty>:

// 根据文件i节点判断文件是不是字符终端设备文件。若是则返回其tty结构指针，否则返回NULL。
static struct tty_struct * get_tty(struct m_inode * inode)
{
   15bc8:	83 ec 10             	sub    $0x10,%esp
	int major, minor;

	// 如果不是字符设备文件则返回NULL。如果主设备号不是5（控制终端）或4，则返回NULL。
	if (!S_ISCHR(inode->i_mode))
   15bcb:	8b 44 24 14          	mov    0x14(%esp),%eax
   15bcf:	0f b7 00             	movzwl (%eax),%eax
   15bd2:	0f b7 c0             	movzwl %ax,%eax
   15bd5:	25 00 f0 00 00       	and    $0xf000,%eax
   15bda:	3d 00 20 00 00       	cmp    $0x2000,%eax
   15bdf:	74 0a                	je     15beb <get_tty+0x23>
		return NULL;
   15be1:	b8 00 00 00 00       	mov    $0x0,%eax
   15be6:	e9 9d 00 00 00       	jmp    15c88 <get_tty+0xc0>
	if ((major = MAJOR(inode->i_zone[0])) != 5 && major != 4)
   15beb:	8b 44 24 14          	mov    0x14(%esp),%eax
   15bef:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   15bf3:	66 c1 e8 08          	shr    $0x8,%ax
   15bf7:	0f b7 c0             	movzwl %ax,%eax
   15bfa:	89 44 24 08          	mov    %eax,0x8(%esp)
   15bfe:	83 7c 24 08 05       	cmpl   $0x5,0x8(%esp)
   15c03:	74 0e                	je     15c13 <get_tty+0x4b>
   15c05:	83 7c 24 08 04       	cmpl   $0x4,0x8(%esp)
   15c0a:	74 07                	je     15c13 <get_tty+0x4b>
		return NULL;
   15c0c:	b8 00 00 00 00       	mov    $0x0,%eax
   15c11:	eb 75                	jmp    15c88 <get_tty+0xc0>
	// 如果主设备号是5，那么其终端设备号等于进程的tty字段值，否则就等于字符设备文件次设备号。如果终端设备号小于0,表示进程没有
	// 控制终端或没有使用终端，于是返回NULL。否则返回对应的tty结构指针。
	if (major == 5)
   15c13:	83 7c 24 08 05       	cmpl   $0x5,0x8(%esp)
   15c18:	75 11                	jne    15c2b <get_tty+0x63>
		minor = current->tty;
   15c1a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15c1f:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   15c25:	89 44 24 0c          	mov    %eax,0xc(%esp)
   15c29:	eb 14                	jmp    15c3f <get_tty+0x77>
	else
		minor = MINOR(inode->i_zone[0]);
   15c2b:	8b 44 24 14          	mov    0x14(%esp),%eax
   15c2f:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   15c33:	0f b7 c0             	movzwl %ax,%eax
   15c36:	25 ff 00 00 00       	and    $0xff,%eax
   15c3b:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (minor < 0)
   15c3f:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   15c44:	79 07                	jns    15c4d <get_tty+0x85>
		return NULL;
   15c46:	b8 00 00 00 00       	mov    $0x0,%eax
   15c4b:	eb 3b                	jmp    15c88 <get_tty+0xc0>
	return TTY_TABLE(minor);
   15c4d:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   15c52:	74 26                	je     15c7a <get_tty+0xb2>
   15c54:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
   15c59:	7f 11                	jg     15c6c <get_tty+0xa4>
   15c5b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15c5f:	83 e8 01             	sub    $0x1,%eax
   15c62:	c1 e0 06             	shl    $0x6,%eax
   15c65:	05 20 18 04 00       	add    $0x41820,%eax
   15c6a:	eb 1b                	jmp    15c87 <get_tty+0xbf>
   15c6c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15c70:	c1 e0 06             	shl    $0x6,%eax
   15c73:	05 20 18 04 00       	add    $0x41820,%eax
   15c78:	eb 0d                	jmp    15c87 <get_tty+0xbf>
   15c7a:	a1 80 12 03 00       	mov    0x31280,%eax
   15c7f:	c1 e0 06             	shl    $0x6,%eax
   15c82:	05 20 18 04 00       	add    $0x41820,%eax
   15c87:	90                   	nop
}
   15c88:	83 c4 10             	add    $0x10,%esp
   15c8b:	c3                   	ret    

00015c8c <check_in>:
 * check_XX函数用于检查一个文件。我们知道该文件要么是管道文件、要么是字符设备文件，或者要么是一个FIFO（FIFO）还未实现。
 */
// 检查读文件操作是否准备好，即终端读缓冲队列secondary是否有字符可读，或者管道文件是否不空。参数wait是等待表指针；inode
// 是文件i节点指针。若描述符可进行读操作则返回1,否则返回0。
static int check_in(select_table * wait, struct m_inode * inode)
{
   15c8c:	83 ec 10             	sub    $0x10,%esp

	// 首先根据文件i节点调用get_tty()检测文件是不是一个tty终端（字符）设备文件，如果是则检查该终端读缓冲队列secondary中是否有
	// 字符可供读取，若有则返回1，若此时secondary为空则把当前任务添加到secondary的等待队列proc_list上并返回0。如果是管道文件
	// 则判断目前管道中是否有字符可读，若有则返回1，若没有（管道空）则把当前任务添加到管道i节点的等待队列上并返回0。注意，PIPE_-
	// EMPTY()宏使用管道当前头尾指针位置来判断管道是否为空。管道i节点的i_zone[0]和i_zone[1]字段分别存放着管道当前的头尾指针。
	if (tty = get_tty(inode))
   15c8f:	ff 74 24 18          	pushl  0x18(%esp)
   15c93:	e8 30 ff ff ff       	call   15bc8 <get_tty>
   15c98:	83 c4 04             	add    $0x4,%esp
   15c9b:	89 44 24 0c          	mov    %eax,0xc(%esp)
   15c9f:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   15ca4:	74 38                	je     15cde <check_in+0x52>
		if (!EMPTY(tty->secondary))
   15ca6:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15caa:	8b 40 3c             	mov    0x3c(%eax),%eax
   15cad:	8b 50 04             	mov    0x4(%eax),%edx
   15cb0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15cb4:	8b 40 3c             	mov    0x3c(%eax),%eax
   15cb7:	8b 40 08             	mov    0x8(%eax),%eax
   15cba:	39 c2                	cmp    %eax,%edx
   15cbc:	74 07                	je     15cc5 <check_in+0x39>
			return 1;
   15cbe:	b8 01 00 00 00       	mov    $0x1,%eax
   15cc3:	eb 5a                	jmp    15d1f <check_in+0x93>
		else
			add_wait(&tty->secondary->proc_list, wait);
   15cc5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15cc9:	8b 40 3c             	mov    0x3c(%eax),%eax
   15ccc:	83 c0 0c             	add    $0xc,%eax
   15ccf:	ff 74 24 14          	pushl  0x14(%esp)
   15cd3:	50                   	push   %eax
   15cd4:	e8 b0 fd ff ff       	call   15a89 <add_wait>
   15cd9:	83 c4 08             	add    $0x8,%esp
   15cdc:	eb 3c                	jmp    15d1a <check_in+0x8e>
	else if (inode->i_pipe)
   15cde:	8b 44 24 18          	mov    0x18(%esp),%eax
   15ce2:	0f b6 40 38          	movzbl 0x38(%eax),%eax
   15ce6:	84 c0                	test   %al,%al
   15ce8:	74 30                	je     15d1a <check_in+0x8e>
		if (!PIPE_EMPTY(*inode))
   15cea:	8b 44 24 18          	mov    0x18(%esp),%eax
   15cee:	0f b7 50 0e          	movzwl 0xe(%eax),%edx
   15cf2:	8b 44 24 18          	mov    0x18(%esp),%eax
   15cf6:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   15cfa:	66 39 c2             	cmp    %ax,%dx
   15cfd:	74 07                	je     15d06 <check_in+0x7a>
			return 1;
   15cff:	b8 01 00 00 00       	mov    $0x1,%eax
   15d04:	eb 19                	jmp    15d1f <check_in+0x93>
		else
			add_wait(&inode->i_wait, wait);
   15d06:	8b 44 24 18          	mov    0x18(%esp),%eax
   15d0a:	83 c0 20             	add    $0x20,%eax
   15d0d:	ff 74 24 14          	pushl  0x14(%esp)
   15d11:	50                   	push   %eax
   15d12:	e8 72 fd ff ff       	call   15a89 <add_wait>
   15d17:	83 c4 08             	add    $0x8,%esp
	return 0;
   15d1a:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15d1f:	83 c4 10             	add    $0x10,%esp
   15d22:	c3                   	ret    

00015d23 <check_out>:

// 检查文件写操作是否准备好，即终端写缓冲队列write_q中是否还有空闲位置可写，或者此时管道文件是否不满。参数wait是等待表指针；
// inode是文件i节点指针。若描述符可进行写操作则返回1，否则返回0。
static int check_out(select_table * wait, struct m_inode * inode)
{
   15d23:	83 ec 10             	sub    $0x10,%esp
	struct tty_struct * tty;

	// 首先根据文件i节点调用get_tty()检测文件是不是一个tty终端（字符）设备文件，如果是则检查该终端写缓冲队列write_q中是否有空间
	// 可写入，若有则返回1,若没有空间则把当前任务添加到write_q等待队列proc_list上并返回0。如果是管道文件则判断目前管道中是否有
	// 空闲空间可写入字符，若有则返回1，若没有（管道满）则把当前任务添加到管道i节点的等待队列上并返回0。
	if (tty = get_tty(inode))
   15d26:	ff 74 24 18          	pushl  0x18(%esp)
   15d2a:	e8 99 fe ff ff       	call   15bc8 <get_tty>
   15d2f:	83 c4 04             	add    $0x4,%esp
   15d32:	89 44 24 0c          	mov    %eax,0xc(%esp)
   15d36:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   15d3b:	74 44                	je     15d81 <check_out+0x5e>
		if (!FULL(tty->write_q))
   15d3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15d41:	8b 40 38             	mov    0x38(%eax),%eax
   15d44:	8b 50 08             	mov    0x8(%eax),%edx
   15d47:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15d4b:	8b 40 38             	mov    0x38(%eax),%eax
   15d4e:	8b 40 04             	mov    0x4(%eax),%eax
   15d51:	29 c2                	sub    %eax,%edx
   15d53:	89 d0                	mov    %edx,%eax
   15d55:	83 e8 01             	sub    $0x1,%eax
   15d58:	25 ff 03 00 00       	and    $0x3ff,%eax
   15d5d:	85 c0                	test   %eax,%eax
   15d5f:	74 07                	je     15d68 <check_out+0x45>
			return 1;
   15d61:	b8 01 00 00 00       	mov    $0x1,%eax
   15d66:	eb 6b                	jmp    15dd3 <check_out+0xb0>
		else
			add_wait(&tty->write_q->proc_list, wait);
   15d68:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15d6c:	8b 40 38             	mov    0x38(%eax),%eax
   15d6f:	83 c0 0c             	add    $0xc,%eax
   15d72:	ff 74 24 14          	pushl  0x14(%esp)
   15d76:	50                   	push   %eax
   15d77:	e8 0d fd ff ff       	call   15a89 <add_wait>
   15d7c:	83 c4 08             	add    $0x8,%esp
   15d7f:	eb 4d                	jmp    15dce <check_out+0xab>
	else if (inode->i_pipe)
   15d81:	8b 44 24 18          	mov    0x18(%esp),%eax
   15d85:	0f b6 40 38          	movzbl 0x38(%eax),%eax
   15d89:	84 c0                	test   %al,%al
   15d8b:	74 41                	je     15dce <check_out+0xab>
		if (!PIPE_FULL(*inode))
   15d8d:	8b 44 24 18          	mov    0x18(%esp),%eax
   15d91:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   15d95:	0f b7 d0             	movzwl %ax,%edx
   15d98:	8b 44 24 18          	mov    0x18(%esp),%eax
   15d9c:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   15da0:	0f b7 c0             	movzwl %ax,%eax
   15da3:	29 c2                	sub    %eax,%edx
   15da5:	89 d0                	mov    %edx,%eax
   15da7:	25 ff 0f 00 00       	and    $0xfff,%eax
   15dac:	3d ff 0f 00 00       	cmp    $0xfff,%eax
   15db1:	74 07                	je     15dba <check_out+0x97>
			return 1;
   15db3:	b8 01 00 00 00       	mov    $0x1,%eax
   15db8:	eb 19                	jmp    15dd3 <check_out+0xb0>
		else
			add_wait(&inode->i_wait, wait);
   15dba:	8b 44 24 18          	mov    0x18(%esp),%eax
   15dbe:	83 c0 20             	add    $0x20,%eax
   15dc1:	ff 74 24 14          	pushl  0x14(%esp)
   15dc5:	50                   	push   %eax
   15dc6:	e8 be fc ff ff       	call   15a89 <add_wait>
   15dcb:	83 c4 08             	add    $0x8,%esp
	return 0;
   15dce:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15dd3:	83 c4 10             	add    $0x10,%esp
   15dd6:	c3                   	ret    

00015dd7 <check_ex>:

// 检查文件是否处于异常状态。对于终端设备文件，目前内核总是返回0。对于管道文件，如果此时两个管道描述符中有一个或都已被关闭，则
// 返回1，否则就把当前任务添加到管道i节点的等待队列上并返回0。返回0。参数wait等待表指针；inode是文件i节点指针。若出现异常条件
// 则返回1，否则返回0。
static int check_ex(select_table * wait, struct m_inode * inode)
{
   15dd7:	83 ec 10             	sub    $0x10,%esp
	struct tty_struct * tty;

	if (tty = get_tty(inode))
   15dda:	ff 74 24 18          	pushl  0x18(%esp)
   15dde:	e8 e5 fd ff ff       	call   15bc8 <get_tty>
   15de3:	83 c4 04             	add    $0x4,%esp
   15de6:	89 44 24 0c          	mov    %eax,0xc(%esp)
   15dea:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   15def:	74 32                	je     15e23 <check_ex+0x4c>
		if (!FULL(tty->write_q))
   15df1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15df5:	8b 40 38             	mov    0x38(%eax),%eax
   15df8:	8b 50 08             	mov    0x8(%eax),%edx
   15dfb:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15dff:	8b 40 38             	mov    0x38(%eax),%eax
   15e02:	8b 40 04             	mov    0x4(%eax),%eax
   15e05:	29 c2                	sub    %eax,%edx
   15e07:	89 d0                	mov    %edx,%eax
   15e09:	83 e8 01             	sub    $0x1,%eax
   15e0c:	25 ff 03 00 00       	and    $0x3ff,%eax
   15e11:	85 c0                	test   %eax,%eax
   15e13:	74 07                	je     15e1c <check_ex+0x45>
			return 0;
   15e15:	b8 00 00 00 00       	mov    $0x0,%eax
   15e1a:	eb 41                	jmp    15e5d <check_ex+0x86>
		else
			return 0;
   15e1c:	b8 00 00 00 00       	mov    $0x0,%eax
   15e21:	eb 3a                	jmp    15e5d <check_ex+0x86>
	else if (inode->i_pipe)
   15e23:	8b 44 24 18          	mov    0x18(%esp),%eax
   15e27:	0f b6 40 38          	movzbl 0x38(%eax),%eax
   15e2b:	84 c0                	test   %al,%al
   15e2d:	74 29                	je     15e58 <check_ex+0x81>
		if (inode->i_count < 2)
   15e2f:	8b 44 24 18          	mov    0x18(%esp),%eax
   15e33:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   15e37:	66 83 f8 01          	cmp    $0x1,%ax
   15e3b:	77 07                	ja     15e44 <check_ex+0x6d>
			return 1;
   15e3d:	b8 01 00 00 00       	mov    $0x1,%eax
   15e42:	eb 19                	jmp    15e5d <check_ex+0x86>
		else
			add_wait(&inode->i_wait, wait);
   15e44:	8b 44 24 18          	mov    0x18(%esp),%eax
   15e48:	83 c0 20             	add    $0x20,%eax
   15e4b:	ff 74 24 14          	pushl  0x14(%esp)
   15e4f:	50                   	push   %eax
   15e50:	e8 34 fc ff ff       	call   15a89 <add_wait>
   15e55:	83 c4 08             	add    $0x8,%esp
	return 0;
   15e58:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15e5d:	83 c4 10             	add    $0x10,%esp
   15e60:	c3                   	ret    

00015e61 <do_select>:
// 集描述符检查函数check_XX()对每个描述符进行检查，同时统计描述符集中当前已经准备好的描述符个数。若有任何一个描述符已经准备好，
// 本函数就会立刻返回，否则进程就会在本函数中进入睡眠状态，并在过了超时时间或者由于某个描述符所在等待队列上的进程被唤醒而使本
// 进程继续运行。
int do_select(fd_set in, fd_set out, fd_set ex,
	fd_set *inp, fd_set *outp, fd_set *exp)
{
   15e61:	81 ec fc 01 00 00    	sub    $0x1fc,%esp

	// 首先把3个描述符集进行或操作，在mask中得到描述符集中有效符位屏蔽码。然后循环判断当前进程各个描述符是否有效并且包含在描述符集内。
	// 在循环中，每判断完一个描述符就会把mask右移1位，因此根据mask的最低有效位我们就可以判断相应描述符是否在用户给定的描述符集中。有
	// 效的描述符应该是一个管道文件描述符，或者是一个字符设备文件描述符，或者是一个FIFO描述符，其余类型的都作为无效描述符而返回EBADF
	// 错误。
	mask = in | out | ex;
   15e67:	8b 84 24 00 02 00 00 	mov    0x200(%esp),%eax
   15e6e:	0b 84 24 04 02 00 00 	or     0x204(%esp),%eax
   15e75:	0b 84 24 08 02 00 00 	or     0x208(%esp),%eax
   15e7c:	89 84 24 e4 01 00 00 	mov    %eax,0x1e4(%esp)
	for (i = 0 ; i < NR_OPEN ; i++, mask >>= 1) {
   15e83:	c7 84 24 e8 01 00 00 	movl   $0x0,0x1e8(%esp)
   15e8a:	00 00 00 00 
   15e8e:	e9 f7 00 00 00       	jmp    15f8a <do_select+0x129>
		if (!(mask & 1))                                        // 若不在描述符集中则继续判断下一个。
   15e93:	8b 84 24 e4 01 00 00 	mov    0x1e4(%esp),%eax
   15e9a:	83 e0 01             	and    $0x1,%eax
   15e9d:	85 c0                	test   %eax,%eax
   15e9f:	0f 84 cc 00 00 00    	je     15f71 <do_select+0x110>
			continue;
		if (!current->filp[i])                                  // 若文件未打开，则返回描述符值。
   15ea5:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15eaa:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   15eb1:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15eb7:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15ebb:	85 c0                	test   %eax,%eax
   15ebd:	75 0a                	jne    15ec9 <do_select+0x68>
			return -EBADF;
   15ebf:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   15ec4:	e9 ea 02 00 00       	jmp    161b3 <do_select+0x352>
		if (!current->filp[i]->f_inode)                         // 若文件i节点指针为空，则返回错误号。
   15ec9:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15ece:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   15ed5:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15edb:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15edf:	8b 40 08             	mov    0x8(%eax),%eax
   15ee2:	85 c0                	test   %eax,%eax
   15ee4:	75 0a                	jne    15ef0 <do_select+0x8f>
			return -EBADF;
   15ee6:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   15eeb:	e9 c3 02 00 00       	jmp    161b3 <do_select+0x352>
		if (current->filp[i]->f_inode->i_pipe)                  // 若是管道文件描述符，则有效。
   15ef0:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15ef5:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   15efc:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15f02:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15f06:	8b 40 08             	mov    0x8(%eax),%eax
   15f09:	0f b6 40 38          	movzbl 0x38(%eax),%eax
   15f0d:	84 c0                	test   %al,%al
   15f0f:	75 63                	jne    15f74 <do_select+0x113>
			continue;
		if (S_ISCHR(current->filp[i]->f_inode->i_mode))         // 字符设备文件有效。
   15f11:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15f16:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   15f1d:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15f23:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15f27:	8b 40 08             	mov    0x8(%eax),%eax
   15f2a:	0f b7 00             	movzwl (%eax),%eax
   15f2d:	0f b7 c0             	movzwl %ax,%eax
   15f30:	25 00 f0 00 00       	and    $0xf000,%eax
   15f35:	3d 00 20 00 00       	cmp    $0x2000,%eax
   15f3a:	74 3b                	je     15f77 <do_select+0x116>
			continue;
		if (S_ISFIFO(current->filp[i]->f_inode->i_mode))        // FIFO也有效。
   15f3c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15f41:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   15f48:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15f4e:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15f52:	8b 40 08             	mov    0x8(%eax),%eax
   15f55:	0f b7 00             	movzwl (%eax),%eax
   15f58:	0f b7 c0             	movzwl %ax,%eax
   15f5b:	25 00 f0 00 00       	and    $0xf000,%eax
   15f60:	3d 00 10 00 00       	cmp    $0x1000,%eax
   15f65:	74 13                	je     15f7a <do_select+0x119>
			continue;
		return -EBADF;                  						// 其余都作为无效描述符而返回。
   15f67:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   15f6c:	e9 42 02 00 00       	jmp    161b3 <do_select+0x352>
	// 效的描述符应该是一个管道文件描述符，或者是一个字符设备文件描述符，或者是一个FIFO描述符，其余类型的都作为无效描述符而返回EBADF
	// 错误。
	mask = in | out | ex;
	for (i = 0 ; i < NR_OPEN ; i++, mask >>= 1) {
		if (!(mask & 1))                                        // 若不在描述符集中则继续判断下一个。
			continue;
   15f71:	90                   	nop
   15f72:	eb 07                	jmp    15f7b <do_select+0x11a>
		if (!current->filp[i])                                  // 若文件未打开，则返回描述符值。
			return -EBADF;
		if (!current->filp[i]->f_inode)                         // 若文件i节点指针为空，则返回错误号。
			return -EBADF;
		if (current->filp[i]->f_inode->i_pipe)                  // 若是管道文件描述符，则有效。
			continue;
   15f74:	90                   	nop
   15f75:	eb 04                	jmp    15f7b <do_select+0x11a>
		if (S_ISCHR(current->filp[i]->f_inode->i_mode))         // 字符设备文件有效。
			continue;
   15f77:	90                   	nop
   15f78:	eb 01                	jmp    15f7b <do_select+0x11a>
		if (S_ISFIFO(current->filp[i]->f_inode->i_mode))        // FIFO也有效。
			continue;
   15f7a:	90                   	nop
	// 首先把3个描述符集进行或操作，在mask中得到描述符集中有效符位屏蔽码。然后循环判断当前进程各个描述符是否有效并且包含在描述符集内。
	// 在循环中，每判断完一个描述符就会把mask右移1位，因此根据mask的最低有效位我们就可以判断相应描述符是否在用户给定的描述符集中。有
	// 效的描述符应该是一个管道文件描述符，或者是一个字符设备文件描述符，或者是一个FIFO描述符，其余类型的都作为无效描述符而返回EBADF
	// 错误。
	mask = in | out | ex;
	for (i = 0 ; i < NR_OPEN ; i++, mask >>= 1) {
   15f7b:	83 84 24 e8 01 00 00 	addl   $0x1,0x1e8(%esp)
   15f82:	01 
   15f83:	d1 ac 24 e4 01 00 00 	shrl   0x1e4(%esp)
   15f8a:	83 bc 24 e8 01 00 00 	cmpl   $0x13,0x1e8(%esp)
   15f91:	13 
   15f92:	0f 8e fb fe ff ff    	jle    15e93 <do_select+0x32>
	}
	// 下面循环检查3个描述符集中的各个描述符是否准备好（可以操作）。此时mask用作当前正在处理描述符的屏蔽码。循环中的3个函数check_in()、
	// check_out()和check_ex()分别用来判断描述符是否已经准备好。若一个描述符已经准备好，则在相关描述符集中设置对应位，并且把已准备
	// 好描述符个数计数值count增1。第186行for循环语句中的mask+= mask行将于mask<<1。
repeat:
	wait_table.nr = 0;
   15f98:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
	*inp = *outp = *exp = 0;
   15f9f:	8b 84 24 14 02 00 00 	mov    0x214(%esp),%eax
   15fa6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   15fac:	8b 84 24 14 02 00 00 	mov    0x214(%esp),%eax
   15fb3:	8b 10                	mov    (%eax),%edx
   15fb5:	8b 84 24 10 02 00 00 	mov    0x210(%esp),%eax
   15fbc:	89 10                	mov    %edx,(%eax)
   15fbe:	8b 84 24 10 02 00 00 	mov    0x210(%esp),%eax
   15fc5:	8b 10                	mov    (%eax),%edx
   15fc7:	8b 84 24 0c 02 00 00 	mov    0x20c(%esp),%eax
   15fce:	89 10                	mov    %edx,(%eax)
	count = 0;
   15fd0:	c7 84 24 ec 01 00 00 	movl   $0x0,0x1ec(%esp)
   15fd7:	00 00 00 00 
	mask = 1;
   15fdb:	c7 84 24 e4 01 00 00 	movl   $0x1,0x1e4(%esp)
   15fe2:	01 00 00 00 
	for (i = 0 ; i < NR_OPEN ; i++, mask += mask) {
   15fe6:	c7 84 24 e8 01 00 00 	movl   $0x0,0x1e8(%esp)
   15fed:	00 00 00 00 
   15ff1:	e9 38 01 00 00       	jmp    1612e <do_select+0x2cd>
		// 如果此时判断的描述符在读操作描述符集中，并且该描述符已经准备好可以进行读操作，则把该描述符在描述符集in中对应位置为1,同时把已准备
		// 好描述符个数计数值count增1。
		if (mask & in)
   15ff6:	8b 84 24 e4 01 00 00 	mov    0x1e4(%esp),%eax
   15ffd:	23 84 24 00 02 00 00 	and    0x200(%esp),%eax
   16004:	85 c0                	test   %eax,%eax
   16006:	74 4e                	je     16056 <do_select+0x1f5>
			if (check_in(&wait_table, current->filp[i]->f_inode)) {
   16008:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1600d:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   16014:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   1601a:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   1601e:	8b 40 08             	mov    0x8(%eax),%eax
   16021:	50                   	push   %eax
   16022:	8d 44 24 04          	lea    0x4(%esp),%eax
   16026:	50                   	push   %eax
   16027:	e8 60 fc ff ff       	call   15c8c <check_in>
   1602c:	83 c4 08             	add    $0x8,%esp
   1602f:	85 c0                	test   %eax,%eax
   16031:	74 23                	je     16056 <do_select+0x1f5>
				*inp |= mask;   								// 描述符集中设置对应位。
   16033:	8b 84 24 0c 02 00 00 	mov    0x20c(%esp),%eax
   1603a:	8b 00                	mov    (%eax),%eax
   1603c:	0b 84 24 e4 01 00 00 	or     0x1e4(%esp),%eax
   16043:	89 c2                	mov    %eax,%edx
   16045:	8b 84 24 0c 02 00 00 	mov    0x20c(%esp),%eax
   1604c:	89 10                	mov    %edx,(%eax)
				count++;        								// 已准备好描述符个数计数。
   1604e:	83 84 24 ec 01 00 00 	addl   $0x1,0x1ec(%esp)
   16055:	01 
			}
		// 如果此时判断的描述符在写操作描述符集中，并且该描述符已经准备好可以进行写操作，则把该描述符在描述符集out中对应位置为1,同时把已准备
		// 好描述符个数计数值count增1。
		if (mask & out)
   16056:	8b 84 24 e4 01 00 00 	mov    0x1e4(%esp),%eax
   1605d:	23 84 24 04 02 00 00 	and    0x204(%esp),%eax
   16064:	85 c0                	test   %eax,%eax
   16066:	74 4e                	je     160b6 <do_select+0x255>
			if (check_out(&wait_table, current->filp[i]->f_inode)) {
   16068:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1606d:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   16074:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   1607a:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   1607e:	8b 40 08             	mov    0x8(%eax),%eax
   16081:	50                   	push   %eax
   16082:	8d 44 24 04          	lea    0x4(%esp),%eax
   16086:	50                   	push   %eax
   16087:	e8 97 fc ff ff       	call   15d23 <check_out>
   1608c:	83 c4 08             	add    $0x8,%esp
   1608f:	85 c0                	test   %eax,%eax
   16091:	74 23                	je     160b6 <do_select+0x255>
				*outp |= mask;
   16093:	8b 84 24 10 02 00 00 	mov    0x210(%esp),%eax
   1609a:	8b 00                	mov    (%eax),%eax
   1609c:	0b 84 24 e4 01 00 00 	or     0x1e4(%esp),%eax
   160a3:	89 c2                	mov    %eax,%edx
   160a5:	8b 84 24 10 02 00 00 	mov    0x210(%esp),%eax
   160ac:	89 10                	mov    %edx,(%eax)
				count++;
   160ae:	83 84 24 ec 01 00 00 	addl   $0x1,0x1ec(%esp)
   160b5:	01 
			}
		// 如果此时判断的描述符在异常描述符集中，并且该描述符已经有异常出现，则把该描述符在描述符集ex中对应位置为1,同时把已准备好描述符个数计
		// 数值count增1。
		if (mask & ex)
   160b6:	8b 84 24 e4 01 00 00 	mov    0x1e4(%esp),%eax
   160bd:	23 84 24 08 02 00 00 	and    0x208(%esp),%eax
   160c4:	85 c0                	test   %eax,%eax
   160c6:	74 4e                	je     16116 <do_select+0x2b5>
			if (check_ex(&wait_table, current->filp[i]->f_inode)) {
   160c8:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   160cd:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   160d4:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   160da:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   160de:	8b 40 08             	mov    0x8(%eax),%eax
   160e1:	50                   	push   %eax
   160e2:	8d 44 24 04          	lea    0x4(%esp),%eax
   160e6:	50                   	push   %eax
   160e7:	e8 eb fc ff ff       	call   15dd7 <check_ex>
   160ec:	83 c4 08             	add    $0x8,%esp
   160ef:	85 c0                	test   %eax,%eax
   160f1:	74 23                	je     16116 <do_select+0x2b5>
				*exp |= mask;
   160f3:	8b 84 24 14 02 00 00 	mov    0x214(%esp),%eax
   160fa:	8b 00                	mov    (%eax),%eax
   160fc:	0b 84 24 e4 01 00 00 	or     0x1e4(%esp),%eax
   16103:	89 c2                	mov    %eax,%edx
   16105:	8b 84 24 14 02 00 00 	mov    0x214(%esp),%eax
   1610c:	89 10                	mov    %edx,(%eax)
				count++;
   1610e:	83 84 24 ec 01 00 00 	addl   $0x1,0x1ec(%esp)
   16115:	01 
repeat:
	wait_table.nr = 0;
	*inp = *outp = *exp = 0;
	count = 0;
	mask = 1;
	for (i = 0 ; i < NR_OPEN ; i++, mask += mask) {
   16116:	83 84 24 e8 01 00 00 	addl   $0x1,0x1e8(%esp)
   1611d:	01 
   1611e:	8b 84 24 e4 01 00 00 	mov    0x1e4(%esp),%eax
   16125:	01 c0                	add    %eax,%eax
   16127:	89 84 24 e4 01 00 00 	mov    %eax,0x1e4(%esp)
   1612e:	83 bc 24 e8 01 00 00 	cmpl   $0x13,0x1e8(%esp)
   16135:	13 
   16136:	0f 8e ba fe ff ff    	jle    15ff6 <do_select+0x195>
	}
	// 在对进程所有描述符判断处理后，若没有发现有已准备好的描述符（count==0），并且此时进程没有收到任何非阻塞信号，并且此时有等待着描述符
	// 或者等待时间还没有超时，那么我们就把当前进程状态设置成可中断睡眠状态，然后执行调度函数去执行其他任务。当内核又一次调度执行本任务时就
	// 调用free_wait()唤醒相关等待队列上本任务前后的任务,然后跳转到repeat标号处再次重新检测是否有我们关心的（描述符集中的）描述符已准备
	// 好。
	if (!(current->signal & ~current->blocked) &&
   1613c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   16141:	8b 50 0c             	mov    0xc(%eax),%edx
   16144:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   16149:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   1614f:	f7 d0                	not    %eax
   16151:	21 d0                	and    %edx,%eax
   16153:	85 c0                	test   %eax,%eax
   16155:	75 45                	jne    1619c <do_select+0x33b>
	    (wait_table.nr || current->timeout) && !count) {
   16157:	8b 04 24             	mov    (%esp),%eax
	}
	// 在对进程所有描述符判断处理后，若没有发现有已准备好的描述符（count==0），并且此时进程没有收到任何非阻塞信号，并且此时有等待着描述符
	// 或者等待时间还没有超时，那么我们就把当前进程状态设置成可中断睡眠状态，然后执行调度函数去执行其他任务。当内核又一次调度执行本任务时就
	// 调用free_wait()唤醒相关等待队列上本任务前后的任务,然后跳转到repeat标号处再次重新检测是否有我们关心的（描述符集中的）描述符已准备
	// 好。
	if (!(current->signal & ~current->blocked) &&
   1615a:	85 c0                	test   %eax,%eax
   1615c:	75 0f                	jne    1616d <do_select+0x30c>
	    (wait_table.nr || current->timeout) && !count) {
   1615e:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   16163:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
   16169:	85 c0                	test   %eax,%eax
   1616b:	74 2f                	je     1619c <do_select+0x33b>
   1616d:	83 bc 24 ec 01 00 00 	cmpl   $0x0,0x1ec(%esp)
   16174:	00 
   16175:	75 25                	jne    1619c <do_select+0x33b>
		current->state = TASK_INTERRUPTIBLE;
   16177:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1617c:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
		schedule();
   16182:	e8 be 0c ff ff       	call   6e45 <schedule>
		free_wait(&wait_table);         						// 本任务被唤醒返回后从这里开始执行。
   16187:	83 ec 0c             	sub    $0xc,%esp
   1618a:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1618e:	50                   	push   %eax
   1618f:	e8 77 f9 ff ff       	call   15b0b <free_wait>
   16194:	83 c4 10             	add    $0x10,%esp
		goto repeat;
   16197:	e9 fc fd ff ff       	jmp    15f98 <do_select+0x137>
	}
	// 如果此时count不等于0，或者接收到了信号，或者等待时间到并且没有需要等待的描述符，那么我们就调用free_wait()唤醒等待队列上
	// 的任务，然后返回已准备好的描述符个数。
	free_wait(&wait_table);
   1619c:	83 ec 0c             	sub    $0xc,%esp
   1619f:	8d 44 24 0c          	lea    0xc(%esp),%eax
   161a3:	50                   	push   %eax
   161a4:	e8 62 f9 ff ff       	call   15b0b <free_wait>
   161a9:	83 c4 10             	add    $0x10,%esp
	return count;
   161ac:	8b 84 24 ec 01 00 00 	mov    0x1ec(%esp),%eax
}
   161b3:	81 c4 fc 01 00 00    	add    $0x1fc,%esp
   161b9:	c3                   	ret    

000161ba <sys_select>:
// 函数来完成。sys_select()会首先根据参数传递来的缓冲区指针从用户数据空间把select()函数调用的参数分解复制到内核空间，然后
// 设置需要等待的超时时间值timeout，接着调用do_select()执行select功能，返回后就把处理结果再复制回用户空间中。
// 参数buffer指向用户数据区中select()函数的第1个参数处。如果返回值小于0表示执行时出现错误；如果返回值等于0,则表示在规定等
// 待时间内没有描述符准备好操作；如果返回值大于0,则表示已准备好的描述符数量。
int sys_select( unsigned long *buffer )
{
   161ba:	83 ec 4c             	sub    $0x4c,%esp
	/* Perform the select(nd, in, out, ex, tv) system call. */
	/* 执行select(nd, in, out, ex, tv)系统调用 */
	// 首先定义几个局部变量，用于把指针参数传递来的select()函数参数分解开来。
	int i;
	fd_set res_in, in = 0, *inp;            						// 读操作描述符集。
   161bd:	c7 44 24 3c 00 00 00 	movl   $0x0,0x3c(%esp)
   161c4:	00 
	fd_set res_out, out = 0, *outp;         						// 写操作描述符集。
   161c5:	c7 44 24 38 00 00 00 	movl   $0x0,0x38(%esp)
   161cc:	00 
	fd_set res_ex, ex = 0, *exp;            						// 异常条件描述符集。
   161cd:	c7 44 24 34 00 00 00 	movl   $0x0,0x34(%esp)
   161d4:	00 
	unsigned long timeout;

	// 然后从用户数据区把参数分别隔离复制到局部指针变量中，并根据描述符集指针是否有效分别取得3个描述符集in（读）、out（写）和ex
	// （异常）。其中mask也是一个描述符集变量，根据3个描述符集中最大描述符值+1（即第1个参数nd的值），它被设置成用户程序关心的所有
	// 描述符的屏蔽码。例如，若nd = 4,则mask = 0b00001111（共32位）。
	mask = ~((~0) << get_fs_long(buffer++));
   161d5:	8b 44 24 50          	mov    0x50(%esp),%eax
   161d9:	8d 50 04             	lea    0x4(%eax),%edx
   161dc:	89 54 24 50          	mov    %edx,0x50(%esp)
   161e0:	50                   	push   %eax
   161e1:	e8 80 f8 ff ff       	call   15a66 <get_fs_long>
   161e6:	83 c4 04             	add    $0x4,%esp
   161e9:	ba ff ff ff ff       	mov    $0xffffffff,%edx
   161ee:	89 c1                	mov    %eax,%ecx
   161f0:	d3 e2                	shl    %cl,%edx
   161f2:	89 d0                	mov    %edx,%eax
   161f4:	f7 d0                	not    %eax
   161f6:	89 44 24 2c          	mov    %eax,0x2c(%esp)
	inp = (fd_set *) get_fs_long(buffer++);
   161fa:	8b 44 24 50          	mov    0x50(%esp),%eax
   161fe:	8d 50 04             	lea    0x4(%eax),%edx
   16201:	89 54 24 50          	mov    %edx,0x50(%esp)
   16205:	50                   	push   %eax
   16206:	e8 5b f8 ff ff       	call   15a66 <get_fs_long>
   1620b:	83 c4 04             	add    $0x4,%esp
   1620e:	89 44 24 28          	mov    %eax,0x28(%esp)
	outp = (fd_set *) get_fs_long(buffer++);
   16212:	8b 44 24 50          	mov    0x50(%esp),%eax
   16216:	8d 50 04             	lea    0x4(%eax),%edx
   16219:	89 54 24 50          	mov    %edx,0x50(%esp)
   1621d:	50                   	push   %eax
   1621e:	e8 43 f8 ff ff       	call   15a66 <get_fs_long>
   16223:	83 c4 04             	add    $0x4,%esp
   16226:	89 44 24 24          	mov    %eax,0x24(%esp)
	exp = (fd_set *) get_fs_long(buffer++);
   1622a:	8b 44 24 50          	mov    0x50(%esp),%eax
   1622e:	8d 50 04             	lea    0x4(%eax),%edx
   16231:	89 54 24 50          	mov    %edx,0x50(%esp)
   16235:	50                   	push   %eax
   16236:	e8 2b f8 ff ff       	call   15a66 <get_fs_long>
   1623b:	83 c4 04             	add    $0x4,%esp
   1623e:	89 44 24 20          	mov    %eax,0x20(%esp)
	tvp = (struct timeval *) get_fs_long(buffer);
   16242:	ff 74 24 50          	pushl  0x50(%esp)
   16246:	e8 1b f8 ff ff       	call   15a66 <get_fs_long>
   1624b:	83 c4 04             	add    $0x4,%esp
   1624e:	89 44 24 1c          	mov    %eax,0x1c(%esp)

	if (inp)                                						// 若指针有效，则取读操作描述符集。
   16252:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   16257:	74 14                	je     1626d <sys_select+0xb3>
		in = mask & get_fs_long(inp);
   16259:	ff 74 24 28          	pushl  0x28(%esp)
   1625d:	e8 04 f8 ff ff       	call   15a66 <get_fs_long>
   16262:	83 c4 04             	add    $0x4,%esp
   16265:	23 44 24 2c          	and    0x2c(%esp),%eax
   16269:	89 44 24 3c          	mov    %eax,0x3c(%esp)
	if (outp)                               						// 若指针有效，则取写操作描述符集。
   1626d:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   16272:	74 14                	je     16288 <sys_select+0xce>
		out = mask & get_fs_long(outp);
   16274:	ff 74 24 24          	pushl  0x24(%esp)
   16278:	e8 e9 f7 ff ff       	call   15a66 <get_fs_long>
   1627d:	83 c4 04             	add    $0x4,%esp
   16280:	23 44 24 2c          	and    0x2c(%esp),%eax
   16284:	89 44 24 38          	mov    %eax,0x38(%esp)
	if (exp)                                						// 若指针有效，则取异常描述符集。
   16288:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   1628d:	74 14                	je     162a3 <sys_select+0xe9>
		ex = mask & get_fs_long(exp);
   1628f:	ff 74 24 20          	pushl  0x20(%esp)
   16293:	e8 ce f7 ff ff       	call   15a66 <get_fs_long>
   16298:	83 c4 04             	add    $0x4,%esp
   1629b:	23 44 24 2c          	and    0x2c(%esp),%eax
   1629f:	89 44 24 34          	mov    %eax,0x34(%esp)
	// 接下来我们尝试从时间结构中取出等待（睡眠）时间值timeout。首先把timeout初始化成最大（无限）值，然后从用户数据空间取得该时间
	// 结构中设置的时间值，经转换和加上系统当前嘀嗒值jiffies，最后得到需要等待的时间嘀嗒数值timeout。我们用此值来设置当前进程应该
	// 等待的延时。另外，第241行上tv_usec字段是微秒值，把它除以1000000后可得到对应秒数，再乘以系统每秒嘀嗒数HZ，即把tv_usec转换
	// 成嘀嗒值。
	timeout = 0xffffffff;
   162a3:	c7 44 24 30 ff ff ff 	movl   $0xffffffff,0x30(%esp)
   162aa:	ff 
	if (tvp) {
   162ab:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   162b0:	74 3d                	je     162ef <sys_select+0x135>
		timeout = get_fs_long((unsigned long *) & tvp->tv_usec) / (1000000 / HZ);
   162b2:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   162b6:	83 c0 04             	add    $0x4,%eax
   162b9:	50                   	push   %eax
   162ba:	e8 a7 f7 ff ff       	call   15a66 <get_fs_long>
   162bf:	83 c4 04             	add    $0x4,%esp
   162c2:	ba 59 17 b7 d1       	mov    $0xd1b71759,%edx
   162c7:	f7 e2                	mul    %edx
   162c9:	89 d0                	mov    %edx,%eax
   162cb:	c1 e8 0d             	shr    $0xd,%eax
   162ce:	89 44 24 30          	mov    %eax,0x30(%esp)
		timeout += get_fs_long((unsigned long *) & tvp->tv_sec) * HZ;
   162d2:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   162d6:	50                   	push   %eax
   162d7:	e8 8a f7 ff ff       	call   15a66 <get_fs_long>
   162dc:	83 c4 04             	add    $0x4,%esp
   162df:	6b c0 64             	imul   $0x64,%eax,%eax
   162e2:	01 44 24 30          	add    %eax,0x30(%esp)
		timeout += jiffies;
   162e6:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   162eb:	01 44 24 30          	add    %eax,0x30(%esp)
	}
	current->timeout = timeout;             						// 设置当前进程应该延时的嘀嗒值。
   162ef:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   162f4:	8b 54 24 30          	mov    0x30(%esp),%edx
   162f8:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%eax)
	// select()函数的主要工作在do_select()中完成。在调用该函数之后的代码用于把处理结果复制到用户数据区中，返回给用户。为了避免出现
	// 竞争条件，在调用do_select()前需要禁止中断，并在该函数返回后再开启中断。
	// 如果在do_select()返回之后进程的等待延时字段timeout还大于当前系统计时嘀嗒值jiffies，说明在超时之前已经有描述准备好，于是这里
	// 我们先记下到超时还剩余的时间值，随后我们会把这个值返回给用户。如果进程的等待延时字段timeout已经小于或等于当前系统jiffies，表示
	// do_select()可能是由于超时而返回，因此把剩余时间值设置为0。
	cli();                  										// 禁止响应中断。
   162fe:	fa                   	cli    
	i = do_select(in, out, ex, &res_in, &res_out, &res_ex);
   162ff:	83 ec 08             	sub    $0x8,%esp
   16302:	8d 44 24 14          	lea    0x14(%esp),%eax
   16306:	50                   	push   %eax
   16307:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   1630b:	50                   	push   %eax
   1630c:	8d 44 24 24          	lea    0x24(%esp),%eax
   16310:	50                   	push   %eax
   16311:	ff 74 24 48          	pushl  0x48(%esp)
   16315:	ff 74 24 50          	pushl  0x50(%esp)
   16319:	ff 74 24 58          	pushl  0x58(%esp)
   1631d:	e8 3f fb ff ff       	call   15e61 <do_select>
   16322:	83 c4 20             	add    $0x20,%esp
   16325:	89 44 24 18          	mov    %eax,0x18(%esp)
	if (current->timeout > jiffies)
   16329:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1632e:	8b 90 d8 02 00 00    	mov    0x2d8(%eax),%edx
   16334:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   16339:	39 c2                	cmp    %eax,%edx
   1633b:	76 1a                	jbe    16357 <sys_select+0x19d>
		timeout = current->timeout - jiffies;
   1633d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   16342:	8b 90 d8 02 00 00    	mov    0x2d8(%eax),%edx
   16348:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   1634d:	29 c2                	sub    %eax,%edx
   1634f:	89 d0                	mov    %edx,%eax
   16351:	89 44 24 30          	mov    %eax,0x30(%esp)
   16355:	eb 08                	jmp    1635f <sys_select+0x1a5>
	else
		timeout = 0;
   16357:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%esp)
   1635e:	00 
	sti();                  										// 开启中断响应。
   1635f:	fb                   	sti    
	// 接下来我们把进程的超时字段清零。如果do_select()返回的已准备好描述符个数小于0，表示执行出错，于是返回这个错误号。然后我们把处理过
	// 的描述符集内容和延迟时间结构内容写回到用户数据缓冲空间。在时间结构内容时还需要先将嘀嗒时间单位表示的剩余延迟时间转换成秒和微秒值。
	current->timeout = 0;
   16360:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   16365:	c7 80 d8 02 00 00 00 	movl   $0x0,0x2d8(%eax)
   1636c:	00 00 00 
	if (i < 0)
   1636f:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   16374:	79 09                	jns    1637f <sys_select+0x1c5>
		return i;
   16376:	8b 44 24 18          	mov    0x18(%esp),%eax
   1637a:	e9 2c 01 00 00       	jmp    164ab <sys_select+0x2f1>
	if (inp) {
   1637f:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   16384:	74 25                	je     163ab <sys_select+0x1f1>
		verify_area(inp, 4);
   16386:	83 ec 08             	sub    $0x8,%esp
   16389:	6a 04                	push   $0x4
   1638b:	ff 74 24 34          	pushl  0x34(%esp)
   1638f:	e8 0f 20 ff ff       	call   83a3 <verify_area>
   16394:	83 c4 10             	add    $0x10,%esp
		put_fs_long(res_in, inp);        							// 可读描述符值。
   16397:	8b 44 24 14          	mov    0x14(%esp),%eax
   1639b:	83 ec 08             	sub    $0x8,%esp
   1639e:	ff 74 24 30          	pushl  0x30(%esp)
   163a2:	50                   	push   %eax
   163a3:	e8 d4 f6 ff ff       	call   15a7c <put_fs_long>
   163a8:	83 c4 10             	add    $0x10,%esp
	}
	if (outp) {
   163ab:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   163b0:	74 25                	je     163d7 <sys_select+0x21d>
		verify_area(outp, 4);
   163b2:	83 ec 08             	sub    $0x8,%esp
   163b5:	6a 04                	push   $0x4
   163b7:	ff 74 24 30          	pushl  0x30(%esp)
   163bb:	e8 e3 1f ff ff       	call   83a3 <verify_area>
   163c0:	83 c4 10             	add    $0x10,%esp
		put_fs_long(res_out, outp);      							// 可写描述符值。
   163c3:	8b 44 24 10          	mov    0x10(%esp),%eax
   163c7:	83 ec 08             	sub    $0x8,%esp
   163ca:	ff 74 24 2c          	pushl  0x2c(%esp)
   163ce:	50                   	push   %eax
   163cf:	e8 a8 f6 ff ff       	call   15a7c <put_fs_long>
   163d4:	83 c4 10             	add    $0x10,%esp
	}
	if (exp) {
   163d7:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   163dc:	74 25                	je     16403 <sys_select+0x249>
		verify_area(exp, 4);
   163de:	83 ec 08             	sub    $0x8,%esp
   163e1:	6a 04                	push   $0x4
   163e3:	ff 74 24 2c          	pushl  0x2c(%esp)
   163e7:	e8 b7 1f ff ff       	call   83a3 <verify_area>
   163ec:	83 c4 10             	add    $0x10,%esp
		put_fs_long(res_ex, exp);        							// 出现异常条件描述符集。
   163ef:	8b 44 24 0c          	mov    0xc(%esp),%eax
   163f3:	83 ec 08             	sub    $0x8,%esp
   163f6:	ff 74 24 28          	pushl  0x28(%esp)
   163fa:	50                   	push   %eax
   163fb:	e8 7c f6 ff ff       	call   15a7c <put_fs_long>
   16400:	83 c4 10             	add    $0x10,%esp
	}
	if (tvp) {
   16403:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   16408:	74 74                	je     1647e <sys_select+0x2c4>
		verify_area(tvp, sizeof(*tvp));
   1640a:	83 ec 08             	sub    $0x8,%esp
   1640d:	6a 08                	push   $0x8
   1640f:	ff 74 24 28          	pushl  0x28(%esp)
   16413:	e8 8b 1f ff ff       	call   83a3 <verify_area>
   16418:	83 c4 10             	add    $0x10,%esp
		put_fs_long(timeout / HZ, (unsigned long *) &tvp->tv_sec);  // 秒。
   1641b:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   1641f:	8b 44 24 30          	mov    0x30(%esp),%eax
   16423:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   16428:	f7 e2                	mul    %edx
   1642a:	89 d0                	mov    %edx,%eax
   1642c:	c1 e8 05             	shr    $0x5,%eax
   1642f:	83 ec 08             	sub    $0x8,%esp
   16432:	51                   	push   %ecx
   16433:	50                   	push   %eax
   16434:	e8 43 f6 ff ff       	call   15a7c <put_fs_long>
   16439:	83 c4 10             	add    $0x10,%esp
		timeout %= HZ;
   1643c:	8b 4c 24 30          	mov    0x30(%esp),%ecx
   16440:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   16445:	89 c8                	mov    %ecx,%eax
   16447:	f7 e2                	mul    %edx
   16449:	89 d0                	mov    %edx,%eax
   1644b:	c1 e8 05             	shr    $0x5,%eax
   1644e:	6b c0 64             	imul   $0x64,%eax,%eax
   16451:	29 c1                	sub    %eax,%ecx
   16453:	89 c8                	mov    %ecx,%eax
   16455:	89 44 24 30          	mov    %eax,0x30(%esp)
		timeout *= (1000000 / HZ);
   16459:	8b 44 24 30          	mov    0x30(%esp),%eax
   1645d:	69 c0 10 27 00 00    	imul   $0x2710,%eax,%eax
   16463:	89 44 24 30          	mov    %eax,0x30(%esp)
		put_fs_long(timeout, (unsigned long *) &tvp->tv_usec);      // 微秒。
   16467:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1646b:	83 c0 04             	add    $0x4,%eax
   1646e:	83 ec 08             	sub    $0x8,%esp
   16471:	50                   	push   %eax
   16472:	ff 74 24 3c          	pushl  0x3c(%esp)
   16476:	e8 01 f6 ff ff       	call   15a7c <put_fs_long>
   1647b:	83 c4 10             	add    $0x10,%esp
	}
	// 如果此时并没有已准备好的描述符，并且收到了某个非阻塞信号，则返回被中断错误号。否则返回已准备好的描述符个数值。
	if (!i && (current->signal & ~current->blocked))
   1647e:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   16483:	75 22                	jne    164a7 <sys_select+0x2ed>
   16485:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1648a:	8b 50 0c             	mov    0xc(%eax),%edx
   1648d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   16492:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   16498:	f7 d0                	not    %eax
   1649a:	21 d0                	and    %edx,%eax
   1649c:	85 c0                	test   %eax,%eax
   1649e:	74 07                	je     164a7 <sys_select+0x2ed>
		return -EINTR;
   164a0:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
   164a5:	eb 04                	jmp    164ab <sys_select+0x2f1>
	return i;
   164a7:	8b 44 24 18          	mov    0x18(%esp),%eax
}
   164ab:	83 c4 4c             	add    $0x4c,%esp
   164ae:	c3                   	ret    

000164af <lock_buffer>:
int * blk_size[NR_BLK_DEV] = { NULL, NULL, };

// 锁定指定缓冲块.
// 如果指定的缓冲块已经被其他任务锁定,则使自己睡眠(不可中断的等待),直到被执行解锁缓冲块的任务明确地唤醒
static inline void lock_buffer(struct buffer_head * bh)
{
   164af:	83 ec 0c             	sub    $0xc,%esp
	cli();							// 清中断许可.
   164b2:	fa                   	cli    
	while (bh->b_lock)				// 如果缓冲区已被锁定则睡眠,直到缓冲区解锁.
   164b3:	eb 13                	jmp    164c8 <lock_buffer+0x19>
		sleep_on(&bh->b_wait);
   164b5:	8b 44 24 10          	mov    0x10(%esp),%eax
   164b9:	83 c0 10             	add    $0x10,%eax
   164bc:	83 ec 0c             	sub    $0xc,%esp
   164bf:	50                   	push   %eax
   164c0:	e8 71 0c ff ff       	call   7136 <sleep_on>
   164c5:	83 c4 10             	add    $0x10,%esp
// 锁定指定缓冲块.
// 如果指定的缓冲块已经被其他任务锁定,则使自己睡眠(不可中断的等待),直到被执行解锁缓冲块的任务明确地唤醒
static inline void lock_buffer(struct buffer_head * bh)
{
	cli();							// 清中断许可.
	while (bh->b_lock)				// 如果缓冲区已被锁定则睡眠,直到缓冲区解锁.
   164c8:	8b 44 24 10          	mov    0x10(%esp),%eax
   164cc:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   164d0:	84 c0                	test   %al,%al
   164d2:	75 e1                	jne    164b5 <lock_buffer+0x6>
		sleep_on(&bh->b_wait);
	bh->b_lock = 1;					// 立刻锁定缓冲区.
   164d4:	8b 44 24 10          	mov    0x10(%esp),%eax
   164d8:	c6 40 0d 01          	movb   $0x1,0xd(%eax)
	sti();							// 开中断.
   164dc:	fb                   	sti    
}
   164dd:	90                   	nop
   164de:	83 c4 0c             	add    $0xc,%esp
   164e1:	c3                   	ret    

000164e2 <unlock_buffer>:

// 释放(解锁)锁定的缓冲区.
// 该函数与hlk.h文件中的同名函数完全一样.
static inline void unlock_buffer(struct buffer_head * bh)
{
   164e2:	83 ec 0c             	sub    $0xc,%esp
	if (!bh->b_lock)				// 如果该缓冲区没有被锁定,则打印出错信息.
   164e5:	8b 44 24 10          	mov    0x10(%esp),%eax
   164e9:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   164ed:	84 c0                	test   %al,%al
   164ef:	75 10                	jne    16501 <unlock_buffer+0x1f>
		printk("ll_rw_block.c: buffer not locked\n\r");
   164f1:	83 ec 0c             	sub    $0xc,%esp
   164f4:	68 20 3f 02 00       	push   $0x23f20
   164f9:	e8 49 27 ff ff       	call   8c47 <printk>
   164fe:	83 c4 10             	add    $0x10,%esp
	bh->b_lock = 0;					// 清锁定标志.
   16501:	8b 44 24 10          	mov    0x10(%esp),%eax
   16505:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
	wake_up(&bh->b_wait);			// 唤醒等待该缓冲区的任务.
   16509:	8b 44 24 10          	mov    0x10(%esp),%eax
   1650d:	83 c0 10             	add    $0x10,%eax
   16510:	83 ec 0c             	sub    $0xc,%esp
   16513:	50                   	push   %eax
   16514:	e8 36 0c ff ff       	call   714f <wake_up>
   16519:	83 c4 10             	add    $0x10,%esp
}
   1651c:	90                   	nop
   1651d:	83 c4 0c             	add    $0xc,%esp
   16520:	c3                   	ret    

00016521 <add_request>:
// 参数dev是指定块设备结构指针,该结构中有处理请求项函数指针和当前正在请求项指针;
// req是已设置好内容的请求项结构指针.
// 本函数把已经设置好的请求项req添加到指定设备的请求项链表中.如果该设备在当前请求项指针为空,则可以设置req为当前请求项并立刻调用设备请求
// 项处理函数.否则就把req请求项插入到该请求项链表中.
static void add_request(struct blk_dev_struct * dev, struct request * req)
{
   16521:	83 ec 1c             	sub    $0x1c,%esp
	// 首先对参数提供的请求项的指针和标志作初始设置.置空请求项中的下一请求项指针,关中断并清除请求项相关缓冲区脏标志.
	struct request * tmp;

	req->next = NULL;
   16524:	8b 44 24 24          	mov    0x24(%esp),%eax
   16528:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
	cli();								// 关中断
   1652f:	fa                   	cli    
	if (req->bh)
   16530:	8b 44 24 24          	mov    0x24(%esp),%eax
   16534:	8b 40 1c             	mov    0x1c(%eax),%eax
   16537:	85 c0                	test   %eax,%eax
   16539:	74 0b                	je     16546 <add_request+0x25>
		req->bh->b_dirt = 0;			// 清缓冲区"脏"标志.
   1653b:	8b 44 24 24          	mov    0x24(%esp),%eax
   1653f:	8b 40 1c             	mov    0x1c(%eax),%eax
   16542:	c6 40 0b 00          	movb   $0x0,0xb(%eax)
	// 然后查看指定设备是否有当前请求项,即查看设备是否正忙.如果指定设备dev当前请求项(current_equest)字段为空,则表示目前该设备没有请求项,本次是
	// 第1个请求项,也是唯一的一个.因此可将块设备当前请求指针直接指向该请求项,并立刻执行相应设备的请求函数.
	if (!(tmp = dev->current_request)) {
   16546:	8b 44 24 20          	mov    0x20(%esp),%eax
   1654a:	8b 40 04             	mov    0x4(%eax),%eax
   1654d:	89 44 24 0c          	mov    %eax,0xc(%esp)
   16551:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   16556:	0f 85 79 01 00 00    	jne    166d5 <add_request+0x1b4>
		dev->current_request = req;
   1655c:	8b 44 24 20          	mov    0x20(%esp),%eax
   16560:	8b 54 24 24          	mov    0x24(%esp),%edx
   16564:	89 50 04             	mov    %edx,0x4(%eax)
		sti();							// 开中断.
   16567:	fb                   	sti    
		(dev->request_fn)();			// 执行请求函数,对于硬盘是do_hd_request().
   16568:	8b 44 24 20          	mov    0x20(%esp),%eax
   1656c:	8b 00                	mov    (%eax),%eax
   1656e:	ff d0                	call   *%eax
		return;
   16570:	e9 89 01 00 00       	jmp    166fe <add_request+0x1dd>
	// 如果目前该设备已经有当前请求项在处理,则首先利用电梯算法搜索最佳插入位置,然后将当前请求项插入到请求链表中.在搜索过程中,如果判断出欲插入
	// 请求项的缓冲块头指针空,即没有缓冲块,那么就需要找一个项,其已经有可用的缓冲块.因此若当前插入位置(tmp之后)处的空闲项缓冲块头指针不空,就选择这个位置
	// 于是退出循环并把请求项插入此处.最后开中断并退出函数.电梯算法的作用是让磁盘磁头的移动距离最小,从而改善(减少)硬盘访问时间.
	// 下面for循环中if语句用于把req所指请求项与请求队列(链表)中已有的请求项作比较,找出req插入该队列的正确位置顺序.然后中断循环,并把req插入到该队列正确位置处.
	for ( ; tmp->next ; tmp = tmp->next) {
		if (!req->bh)
   16575:	8b 44 24 24          	mov    0x24(%esp),%eax
   16579:	8b 40 1c             	mov    0x1c(%eax),%eax
   1657c:	85 c0                	test   %eax,%eax
   1657e:	75 17                	jne    16597 <add_request+0x76>
			if (tmp->next->bh)
   16580:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16584:	8b 40 20             	mov    0x20(%eax),%eax
   16587:	8b 40 1c             	mov    0x1c(%eax),%eax
   1658a:	85 c0                	test   %eax,%eax
   1658c:	0f 84 37 01 00 00    	je     166c9 <add_request+0x1a8>
				break;
   16592:	e9 4d 01 00 00       	jmp    166e4 <add_request+0x1c3>
			else
				continue;
		if ((IN_ORDER(tmp, req) ||
   16597:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1659b:	8b 50 04             	mov    0x4(%eax),%edx
   1659e:	8b 44 24 24          	mov    0x24(%esp),%eax
   165a2:	8b 40 04             	mov    0x4(%eax),%eax
   165a5:	39 c2                	cmp    %eax,%edx
   165a7:	0f 8c b5 00 00 00    	jl     16662 <add_request+0x141>
   165ad:	8b 44 24 0c          	mov    0xc(%esp),%eax
   165b1:	8b 50 04             	mov    0x4(%eax),%edx
   165b4:	8b 44 24 24          	mov    0x24(%esp),%eax
   165b8:	8b 40 04             	mov    0x4(%eax),%eax
   165bb:	39 c2                	cmp    %eax,%edx
   165bd:	75 36                	jne    165f5 <add_request+0xd4>
   165bf:	8b 44 24 0c          	mov    0xc(%esp),%eax
   165c3:	8b 10                	mov    (%eax),%edx
   165c5:	8b 44 24 24          	mov    0x24(%esp),%eax
   165c9:	8b 00                	mov    (%eax),%eax
   165cb:	39 c2                	cmp    %eax,%edx
   165cd:	0f 8c 8f 00 00 00    	jl     16662 <add_request+0x141>
   165d3:	8b 44 24 0c          	mov    0xc(%esp),%eax
   165d7:	8b 10                	mov    (%eax),%edx
   165d9:	8b 44 24 24          	mov    0x24(%esp),%eax
   165dd:	8b 00                	mov    (%eax),%eax
   165df:	39 c2                	cmp    %eax,%edx
   165e1:	75 12                	jne    165f5 <add_request+0xd4>
   165e3:	8b 44 24 0c          	mov    0xc(%esp),%eax
   165e7:	8b 50 0c             	mov    0xc(%eax),%edx
   165ea:	8b 44 24 24          	mov    0x24(%esp),%eax
   165ee:	8b 40 0c             	mov    0xc(%eax),%eax
   165f1:	39 c2                	cmp    %eax,%edx
   165f3:	72 6d                	jb     16662 <add_request+0x141>
		    !IN_ORDER(tmp, tmp->next)) &&
   165f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   165f9:	8b 50 04             	mov    0x4(%eax),%edx
   165fc:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16600:	8b 40 20             	mov    0x20(%eax),%eax
   16603:	8b 40 04             	mov    0x4(%eax),%eax
		if (!req->bh)
			if (tmp->next->bh)
				break;
			else
				continue;
		if ((IN_ORDER(tmp, req) ||
   16606:	39 c2                	cmp    %eax,%edx
   16608:	0f 8c bc 00 00 00    	jl     166ca <add_request+0x1a9>
		    !IN_ORDER(tmp, tmp->next)) &&
   1660e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16612:	8b 50 04             	mov    0x4(%eax),%edx
   16615:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16619:	8b 40 20             	mov    0x20(%eax),%eax
   1661c:	8b 40 04             	mov    0x4(%eax),%eax
   1661f:	39 c2                	cmp    %eax,%edx
   16621:	75 3f                	jne    16662 <add_request+0x141>
   16623:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16627:	8b 10                	mov    (%eax),%edx
   16629:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1662d:	8b 40 20             	mov    0x20(%eax),%eax
   16630:	8b 00                	mov    (%eax),%eax
   16632:	39 c2                	cmp    %eax,%edx
   16634:	0f 8c 90 00 00 00    	jl     166ca <add_request+0x1a9>
   1663a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1663e:	8b 10                	mov    (%eax),%edx
   16640:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16644:	8b 40 20             	mov    0x20(%eax),%eax
   16647:	8b 00                	mov    (%eax),%eax
   16649:	39 c2                	cmp    %eax,%edx
   1664b:	75 15                	jne    16662 <add_request+0x141>
   1664d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16651:	8b 50 0c             	mov    0xc(%eax),%edx
   16654:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16658:	8b 40 20             	mov    0x20(%eax),%eax
   1665b:	8b 40 0c             	mov    0xc(%eax),%eax
   1665e:	39 c2                	cmp    %eax,%edx
   16660:	72 68                	jb     166ca <add_request+0x1a9>
		    IN_ORDER(req, tmp->next))
   16662:	8b 44 24 24          	mov    0x24(%esp),%eax
   16666:	8b 50 04             	mov    0x4(%eax),%edx
   16669:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1666d:	8b 40 20             	mov    0x20(%eax),%eax
   16670:	8b 40 04             	mov    0x4(%eax),%eax
			if (tmp->next->bh)
				break;
			else
				continue;
		if ((IN_ORDER(tmp, req) ||
		    !IN_ORDER(tmp, tmp->next)) &&
   16673:	39 c2                	cmp    %eax,%edx
   16675:	7c 6d                	jl     166e4 <add_request+0x1c3>
		    IN_ORDER(req, tmp->next))
   16677:	8b 44 24 24          	mov    0x24(%esp),%eax
   1667b:	8b 50 04             	mov    0x4(%eax),%edx
   1667e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16682:	8b 40 20             	mov    0x20(%eax),%eax
   16685:	8b 40 04             	mov    0x4(%eax),%eax
   16688:	39 c2                	cmp    %eax,%edx
   1668a:	75 3e                	jne    166ca <add_request+0x1a9>
   1668c:	8b 44 24 24          	mov    0x24(%esp),%eax
   16690:	8b 10                	mov    (%eax),%edx
   16692:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16696:	8b 40 20             	mov    0x20(%eax),%eax
   16699:	8b 00                	mov    (%eax),%eax
   1669b:	39 c2                	cmp    %eax,%edx
   1669d:	7c 45                	jl     166e4 <add_request+0x1c3>
   1669f:	8b 44 24 24          	mov    0x24(%esp),%eax
   166a3:	8b 10                	mov    (%eax),%edx
   166a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   166a9:	8b 40 20             	mov    0x20(%eax),%eax
   166ac:	8b 00                	mov    (%eax),%eax
   166ae:	39 c2                	cmp    %eax,%edx
   166b0:	75 18                	jne    166ca <add_request+0x1a9>
   166b2:	8b 44 24 24          	mov    0x24(%esp),%eax
   166b6:	8b 50 0c             	mov    0xc(%eax),%edx
   166b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
   166bd:	8b 40 20             	mov    0x20(%eax),%eax
   166c0:	8b 40 0c             	mov    0xc(%eax),%eax
   166c3:	39 c2                	cmp    %eax,%edx
   166c5:	72 1d                	jb     166e4 <add_request+0x1c3>
   166c7:	eb 01                	jmp    166ca <add_request+0x1a9>
	for ( ; tmp->next ; tmp = tmp->next) {
		if (!req->bh)
			if (tmp->next->bh)
				break;
			else
				continue;
   166c9:	90                   	nop
	}
	// 如果目前该设备已经有当前请求项在处理,则首先利用电梯算法搜索最佳插入位置,然后将当前请求项插入到请求链表中.在搜索过程中,如果判断出欲插入
	// 请求项的缓冲块头指针空,即没有缓冲块,那么就需要找一个项,其已经有可用的缓冲块.因此若当前插入位置(tmp之后)处的空闲项缓冲块头指针不空,就选择这个位置
	// 于是退出循环并把请求项插入此处.最后开中断并退出函数.电梯算法的作用是让磁盘磁头的移动距离最小,从而改善(减少)硬盘访问时间.
	// 下面for循环中if语句用于把req所指请求项与请求队列(链表)中已有的请求项作比较,找出req插入该队列的正确位置顺序.然后中断循环,并把req插入到该队列正确位置处.
	for ( ; tmp->next ; tmp = tmp->next) {
   166ca:	8b 44 24 0c          	mov    0xc(%esp),%eax
   166ce:	8b 40 20             	mov    0x20(%eax),%eax
   166d1:	89 44 24 0c          	mov    %eax,0xc(%esp)
   166d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   166d9:	8b 40 20             	mov    0x20(%eax),%eax
   166dc:	85 c0                	test   %eax,%eax
   166de:	0f 85 91 fe ff ff    	jne    16575 <add_request+0x54>
		if ((IN_ORDER(tmp, req) ||
		    !IN_ORDER(tmp, tmp->next)) &&
		    IN_ORDER(req, tmp->next))
			break;
	}
	req->next = tmp->next;
   166e4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   166e8:	8b 50 20             	mov    0x20(%eax),%edx
   166eb:	8b 44 24 24          	mov    0x24(%esp),%eax
   166ef:	89 50 20             	mov    %edx,0x20(%eax)
	tmp->next = req;
   166f2:	8b 44 24 0c          	mov    0xc(%esp),%eax
   166f6:	8b 54 24 24          	mov    0x24(%esp),%edx
   166fa:	89 50 20             	mov    %edx,0x20(%eax)
	sti();
   166fd:	fb                   	sti    
}
   166fe:	83 c4 1c             	add    $0x1c,%esp
   16701:	c3                   	ret    

00016702 <make_request>:

// 创建请求项并插入请求队列中.
// 参数major是主设备号;rw是指定命令;bh是存放数据的缓冲区头指针.
static void make_request(int major, int rw, struct buffer_head * bh)
{
   16702:	83 ec 1c             	sub    $0x1c,%esp
	/* WRITEA/READA是一种特殊情况 - 它们并非必要,所以如果缓冲区已经上锁,我们就不用管它,否则它只是一个一般的读操作. */
	// 这里'READ'和'WRITE'后面的'A'字符代表英文单词Ahead,表示预读/写数据块的意思.
	// 该函数首先对命令READA/WRITEA的情况进行一些处理.对于这两个命令,当指定的缓冲区正在使用而已被上锁时,就放弃预读/写请求.否则就作为普通
	// READ/WRITE命令进行操作.另外,如果参数给出的命令既不是READ也不是WRITE,则表示内核程序有错,显示出错信息并停机.注意,在修改命令之前这里
	// 已为参数是否为预读/写命令设置了标志rw_ahead.
	if (rw_ahead = (rw == READA || rw == WRITEA)) {
   16705:	83 7c 24 24 02       	cmpl   $0x2,0x24(%esp)
   1670a:	74 07                	je     16713 <make_request+0x11>
   1670c:	83 7c 24 24 03       	cmpl   $0x3,0x24(%esp)
   16711:	75 07                	jne    1671a <make_request+0x18>
   16713:	b8 01 00 00 00       	mov    $0x1,%eax
   16718:	eb 05                	jmp    1671f <make_request+0x1d>
   1671a:	b8 00 00 00 00       	mov    $0x0,%eax
   1671f:	89 44 24 08          	mov    %eax,0x8(%esp)
   16723:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   16728:	74 29                	je     16753 <make_request+0x51>
		if (bh->b_lock)
   1672a:	8b 44 24 28          	mov    0x28(%esp),%eax
   1672e:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   16732:	84 c0                	test   %al,%al
   16734:	0f 85 7d 01 00 00    	jne    168b7 <make_request+0x1b5>
			return;
		if (rw == READA)
   1673a:	83 7c 24 24 02       	cmpl   $0x2,0x24(%esp)
   1673f:	75 0a                	jne    1674b <make_request+0x49>
			rw = READ;
   16741:	c7 44 24 24 00 00 00 	movl   $0x0,0x24(%esp)
   16748:	00 
   16749:	eb 08                	jmp    16753 <make_request+0x51>
		else
			rw = WRITE;
   1674b:	c7 44 24 24 01 00 00 	movl   $0x1,0x24(%esp)
   16752:	00 
	}
	if (rw != READ && rw != WRITE)
   16753:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   16758:	74 17                	je     16771 <make_request+0x6f>
   1675a:	83 7c 24 24 01       	cmpl   $0x1,0x24(%esp)
   1675f:	74 10                	je     16771 <make_request+0x6f>
		panic("Bad block dev command, must be R/W/RA/WA");
   16761:	83 ec 0c             	sub    $0xc,%esp
   16764:	68 44 3f 02 00       	push   $0x23f44
   16769:	e8 9a 24 ff ff       	call   8c08 <panic>
   1676e:	83 c4 10             	add    $0x10,%esp
	lock_buffer(bh);                				// 锁定缓冲块
   16771:	83 ec 0c             	sub    $0xc,%esp
   16774:	ff 74 24 34          	pushl  0x34(%esp)
   16778:	e8 32 fd ff ff       	call   164af <lock_buffer>
   1677d:	83 c4 10             	add    $0x10,%esp
	// 如果是WRITE操作并且缓冲块未修改，或是READ操作并且缓冲块已更新，则直接返回缓冲区块。
	if ((rw == WRITE && !bh->b_dirt) || (rw == READ && bh->b_uptodate)) {
   16780:	83 7c 24 24 01       	cmpl   $0x1,0x24(%esp)
   16785:	75 0c                	jne    16793 <make_request+0x91>
   16787:	8b 44 24 28          	mov    0x28(%esp),%eax
   1678b:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
   1678f:	84 c0                	test   %al,%al
   16791:	74 13                	je     167a6 <make_request+0xa4>
   16793:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   16798:	75 20                	jne    167ba <make_request+0xb8>
   1679a:	8b 44 24 28          	mov    0x28(%esp),%eax
   1679e:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
   167a2:	84 c0                	test   %al,%al
   167a4:	74 14                	je     167ba <make_request+0xb8>
		unlock_buffer(bh);
   167a6:	83 ec 0c             	sub    $0xc,%esp
   167a9:	ff 74 24 34          	pushl  0x34(%esp)
   167ad:	e8 30 fd ff ff       	call   164e2 <unlock_buffer>
   167b2:	83 c4 10             	add    $0x10,%esp
		return;
   167b5:	e9 fe 00 00 00       	jmp    168b8 <make_request+0x1b6>
	 */
	// 好,现在我们必须为本函数生成并添加读/写请求项了.首先我们需要在请求数组中寻找到一个空闲项(糟)来存放新请求项.搜索过程从请求数组末端开始.
	// 根据上述要求,对于读命令请求,我们直接从队列末尾开始搜索,而对于写请求就只能从队列2/3处向队列头处搜索空项填入.于是我们开始从后向前搜索,
	// 当请求结构request的设备字段dev值=-1时,表示该项未被占用(空闲).如果没有一项是空闲的(此时请求项数组指针已经搜索越过头部),则查看此次请求
	// 是否是提前读/写(READA或WRITEA),如果是则放弃此次请求操作.否则让本次请求操作先睡眠(以等待请求队列腾出空项),过一会儿再来搜索请求队列.
	if (rw == READ)
   167ba:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   167bf:	75 0a                	jne    167cb <make_request+0xc9>
		req = request + NR_REQUEST;						// 对于读请求,将指针指向队列尾部.
   167c1:	c7 44 24 0c 00 18 04 	movl   $0x41800,0xc(%esp)
   167c8:	00 
   167c9:	eb 14                	jmp    167df <make_request+0xdd>
	else
		req = request + ((NR_REQUEST * 2) / 3);			// 对于写请求,指针指向队列2/3处.
   167cb:	c7 44 24 0c 74 16 04 	movl   $0x41674,0xc(%esp)
   167d2:	00 
	/* find an empty request */
	/* 搜索一个空请求项 */
	while (--req >= request)
   167d3:	eb 0a                	jmp    167df <make_request+0xdd>
		if (req->dev < 0)
   167d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   167d9:	8b 00                	mov    (%eax),%eax
   167db:	85 c0                	test   %eax,%eax
   167dd:	78 11                	js     167f0 <make_request+0xee>
		req = request + NR_REQUEST;						// 对于读请求,将指针指向队列尾部.
	else
		req = request + ((NR_REQUEST * 2) / 3);			// 对于写请求,指针指向队列2/3处.
	/* find an empty request */
	/* 搜索一个空请求项 */
	while (--req >= request)
   167df:	83 6c 24 0c 24       	subl   $0x24,0xc(%esp)
   167e4:	81 7c 24 0c 80 13 04 	cmpl   $0x41380,0xc(%esp)
   167eb:	00 
   167ec:	73 e7                	jae    167d5 <make_request+0xd3>
   167ee:	eb 01                	jmp    167f1 <make_request+0xef>
		if (req->dev < 0)
			break;
   167f0:	90                   	nop
	/* if none found, sleep on new requests: check for rw_ahead */
	/* 如果没有找到空闲项,则让该次请求操作睡眠:需检查是否提前读/写 */
	if (req < request) {								// 如果已搜索到头(队列无空项)
   167f1:	81 7c 24 0c 80 13 04 	cmpl   $0x41380,0xc(%esp)
   167f8:	00 
   167f9:	73 2d                	jae    16828 <make_request+0x126>
		if (rw_ahead) {									// 则若是提前读/写请求,则退出.
   167fb:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   16800:	74 14                	je     16816 <make_request+0x114>
			unlock_buffer(bh);
   16802:	83 ec 0c             	sub    $0xc,%esp
   16805:	ff 74 24 34          	pushl  0x34(%esp)
   16809:	e8 d4 fc ff ff       	call   164e2 <unlock_buffer>
   1680e:	83 c4 10             	add    $0x10,%esp
			return;
   16811:	e9 a2 00 00 00       	jmp    168b8 <make_request+0x1b6>
		}
		sleep_on(&wait_for_request);					// 否则就睡眠,过会再查看请求队列.
   16816:	83 ec 0c             	sub    $0xc,%esp
   16819:	68 e0 10 03 00       	push   $0x310e0
   1681e:	e8 13 09 ff ff       	call   7136 <sleep_on>
   16823:	83 c4 10             	add    $0x10,%esp
		goto repeat;
   16826:	eb 92                	jmp    167ba <make_request+0xb8>
	}
	/* fill up the request-info, and add it to the queue */
	/* 向空闲请求项中填写请求信息,并将其加入队列中 */
	// OK,程序执行到这里表示已找到一个空闲请求项.于是我们在设置好的新请求项后就调用add_request()把它添加到请求队列中,立刻退出.请求结构请参见blk_drv/blk.h.
	// req->sector是读写操作的起始扇区号,req->buffer是请求项存放数据的缓冲区.
	req->dev = bh->b_dev;								// 设备号.
   16828:	8b 44 24 28          	mov    0x28(%esp),%eax
   1682c:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   16830:	0f b7 d0             	movzwl %ax,%edx
   16833:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16837:	89 10                	mov    %edx,(%eax)
	req->cmd = rw;										// 命令(READ/WRITE).
   16839:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1683d:	8b 54 24 24          	mov    0x24(%esp),%edx
   16841:	89 50 04             	mov    %edx,0x4(%eax)
	req->errors = 0;									// 操作时产生的错误次数.
   16844:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16848:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	req->sector = bh->b_blocknr << 1;					// 起始扇区.块号转换成扇区号(1块=2扇区).
   1684f:	8b 44 24 28          	mov    0x28(%esp),%eax
   16853:	8b 40 04             	mov    0x4(%eax),%eax
   16856:	8d 14 00             	lea    (%eax,%eax,1),%edx
   16859:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1685d:	89 50 0c             	mov    %edx,0xc(%eax)
	req->nr_sectors = 2;								// 本请求项需要读写的扇区数.
   16860:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16864:	c7 40 10 02 00 00 00 	movl   $0x2,0x10(%eax)
	req->buffer = bh->b_data;							// 请求项缓冲区指针指向需读写的数据缓冲区.
   1686b:	8b 44 24 28          	mov    0x28(%esp),%eax
   1686f:	8b 10                	mov    (%eax),%edx
   16871:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16875:	89 50 14             	mov    %edx,0x14(%eax)
	req->waiting = NULL;								// 任务等待操作执行完成的地方.
   16878:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1687c:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
	req->bh = bh;										// 缓冲块头指针.
   16883:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16887:	8b 54 24 28          	mov    0x28(%esp),%edx
   1688b:	89 50 1c             	mov    %edx,0x1c(%eax)
	req->next = NULL;									// 指向下一请求项.
   1688e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16892:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
	add_request(major + blk_dev, req);					// 将请求项加入队列中(blk_dev[major],reg).
   16899:	8b 44 24 20          	mov    0x20(%esp),%eax
   1689d:	c1 e0 03             	shl    $0x3,%eax
   168a0:	05 00 11 03 00       	add    $0x31100,%eax
   168a5:	83 ec 08             	sub    $0x8,%esp
   168a8:	ff 74 24 14          	pushl  0x14(%esp)
   168ac:	50                   	push   %eax
   168ad:	e8 6f fc ff ff       	call   16521 <add_request>
   168b2:	83 c4 10             	add    $0x10,%esp
   168b5:	eb 01                	jmp    168b8 <make_request+0x1b6>
	// 该函数首先对命令READA/WRITEA的情况进行一些处理.对于这两个命令,当指定的缓冲区正在使用而已被上锁时,就放弃预读/写请求.否则就作为普通
	// READ/WRITE命令进行操作.另外,如果参数给出的命令既不是READ也不是WRITE,则表示内核程序有错,显示出错信息并停机.注意,在修改命令之前这里
	// 已为参数是否为预读/写命令设置了标志rw_ahead.
	if (rw_ahead = (rw == READA || rw == WRITEA)) {
		if (bh->b_lock)
			return;
   168b7:	90                   	nop
	req->buffer = bh->b_data;							// 请求项缓冲区指针指向需读写的数据缓冲区.
	req->waiting = NULL;								// 任务等待操作执行完成的地方.
	req->bh = bh;										// 缓冲块头指针.
	req->next = NULL;									// 指向下一请求项.
	add_request(major + blk_dev, req);					// 将请求项加入队列中(blk_dev[major],reg).
}
   168b8:	83 c4 1c             	add    $0x1c,%esp
   168bb:	c3                   	ret    

000168bc <ll_rw_page>:

// 低级页面读写函数(Low Level Read Write Pagk).
// 以页面(4K)为单位访问设备数据,即每次读/写8个扇区.参见下面ll_rw_blk()函数.
void ll_rw_page(int rw, int dev, int page, char * buffer)
{
   168bc:	83 ec 1c             	sub    $0x1c,%esp
	struct request * req;
	unsigned int major = MAJOR(dev);
   168bf:	8b 44 24 24          	mov    0x24(%esp),%eax
   168c3:	c1 e8 08             	shr    $0x8,%eax
   168c6:	89 44 24 08          	mov    %eax,0x8(%esp)

	// 首先对函数参数的合法性进行检测.如果设备主设备号不存在或者该设备的请求操作函数不存在,则显示出错信息,并返回.如果参数给出的命令既不是
	// READ也不是WRITE,则表示内核程序有错,显示出错信息并停机.
	if (major >= NR_BLK_DEV || !(blk_dev[major].request_fn)) {
   168ca:	83 7c 24 08 06       	cmpl   $0x6,0x8(%esp)
   168cf:	77 0f                	ja     168e0 <ll_rw_page+0x24>
   168d1:	8b 44 24 08          	mov    0x8(%esp),%eax
   168d5:	8b 04 c5 00 11 03 00 	mov    0x31100(,%eax,8),%eax
   168dc:	85 c0                	test   %eax,%eax
   168de:	75 15                	jne    168f5 <ll_rw_page+0x39>
		printk("Trying to read nonexistent block-device\n\r");
   168e0:	83 ec 0c             	sub    $0xc,%esp
   168e3:	68 70 3f 02 00       	push   $0x23f70
   168e8:	e8 5a 23 ff ff       	call   8c47 <printk>
   168ed:	83 c4 10             	add    $0x10,%esp
		return;
   168f0:	e9 f5 00 00 00       	jmp    169ea <ll_rw_page+0x12e>
	}
	if (rw != READ && rw != WRITE)
   168f5:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   168fa:	74 17                	je     16913 <ll_rw_page+0x57>
   168fc:	83 7c 24 20 01       	cmpl   $0x1,0x20(%esp)
   16901:	74 10                	je     16913 <ll_rw_page+0x57>
		panic("Bad block dev command, must be R/W");
   16903:	83 ec 0c             	sub    $0xc,%esp
   16906:	68 9c 3f 02 00       	push   $0x23f9c
   1690b:	e8 f8 22 ff ff       	call   8c08 <panic>
   16910:	83 c4 10             	add    $0x10,%esp
	// 在参数检测操作完成后,我们现在需要为本次操作建立请求项.首先我们需要在请求数组中寻找到一个空闲项(糟)来存放新请求项.搜索过程从请求数组末端
	// 开始.于是我们开始从后向前搜索,当请求结构request的设备字段值<0时,表示该项未被占用(空闲).如果没有一项是空闲的(此时请求项数组指针已经搜索越过
	// 头部),则让本次请求操作先睡眠(以等待请求队列腾出空项),过一会再来搜索请求队列.
repeat:
	req = request + NR_REQUEST;							// 将指针指向队列尾部.
   16913:	c7 44 24 0c 00 18 04 	movl   $0x41800,0xc(%esp)
   1691a:	00 
	while (--req >= request)
   1691b:	eb 0a                	jmp    16927 <ll_rw_page+0x6b>
		if (req->dev < 0)
   1691d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16921:	8b 00                	mov    (%eax),%eax
   16923:	85 c0                	test   %eax,%eax
   16925:	78 11                	js     16938 <ll_rw_page+0x7c>
	// 在参数检测操作完成后,我们现在需要为本次操作建立请求项.首先我们需要在请求数组中寻找到一个空闲项(糟)来存放新请求项.搜索过程从请求数组末端
	// 开始.于是我们开始从后向前搜索,当请求结构request的设备字段值<0时,表示该项未被占用(空闲).如果没有一项是空闲的(此时请求项数组指针已经搜索越过
	// 头部),则让本次请求操作先睡眠(以等待请求队列腾出空项),过一会再来搜索请求队列.
repeat:
	req = request + NR_REQUEST;							// 将指针指向队列尾部.
	while (--req >= request)
   16927:	83 6c 24 0c 24       	subl   $0x24,0xc(%esp)
   1692c:	81 7c 24 0c 80 13 04 	cmpl   $0x41380,0xc(%esp)
   16933:	00 
   16934:	73 e7                	jae    1691d <ll_rw_page+0x61>
   16936:	eb 01                	jmp    16939 <ll_rw_page+0x7d>
		if (req->dev < 0)
			break;
   16938:	90                   	nop
	if (req < request) {
   16939:	81 7c 24 0c 80 13 04 	cmpl   $0x41380,0xc(%esp)
   16940:	00 
   16941:	73 12                	jae    16955 <ll_rw_page+0x99>
		sleep_on(&wait_for_request);					// 睡眠,过会再查看请求队列.
   16943:	83 ec 0c             	sub    $0xc,%esp
   16946:	68 e0 10 03 00       	push   $0x310e0
   1694b:	e8 e6 07 ff ff       	call   7136 <sleep_on>
   16950:	83 c4 10             	add    $0x10,%esp
		goto repeat;
   16953:	eb be                	jmp    16913 <ll_rw_page+0x57>
	/* 向空闲请求项中填写请求信息,并将其加入队列中 */
	// OK,程序执行到这里表示已找到一个空闲请求项.于是我们设置好新请求项,把当前进程置为不可中断睡眠中断后,就去调用add_request()把它添加到请求队列中,
	// 然后直接调用调度函数让当前进程睡眠等待页面从交换设备中读入.这里不像make_request()函数那样直接退出函数而调用了schedule(),是因为make_request()
	// 函数仅读2个扇区数据.而这里需要对交换设备读/写8个扇区,需要花较长的时间.因此当前进程肯定需要等待而睡眠.因此这里直接就让进程去睡眠了,省得在程序其他地方
	// 还要进行这些判断操作.
	req->dev = dev;										// 设备号
   16955:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16959:	8b 54 24 24          	mov    0x24(%esp),%edx
   1695d:	89 10                	mov    %edx,(%eax)
	req->cmd = rw;										// 命令(READ/WRITE)start_code
   1695f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16963:	8b 54 24 20          	mov    0x20(%esp),%edx
   16967:	89 50 04             	mov    %edx,0x4(%eax)
	req->errors = 0;									// 读写操作错误计数
   1696a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1696e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	req->sector = page << 3;							// 起始读写扇区
   16975:	8b 44 24 28          	mov    0x28(%esp),%eax
   16979:	c1 e0 03             	shl    $0x3,%eax
   1697c:	89 c2                	mov    %eax,%edx
   1697e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16982:	89 50 0c             	mov    %edx,0xc(%eax)
	req->nr_sectors = 8;								// 读写扇区数
   16985:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16989:	c7 40 10 08 00 00 00 	movl   $0x8,0x10(%eax)
	req->buffer = buffer;								// 数据缓冲区
   16990:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16994:	8b 54 24 2c          	mov    0x2c(%esp),%edx
   16998:	89 50 14             	mov    %edx,0x14(%eax)
	req->waiting = current;								// 当前进程进入该请求等待队列
   1699b:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   169a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   169a5:	89 50 18             	mov    %edx,0x18(%eax)
	req->bh = NULL;										// 无缓冲块头指针(不用高速缓冲)
   169a8:	8b 44 24 0c          	mov    0xc(%esp),%eax
   169ac:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
	req->next = NULL;									// 下一个请求项指针
   169b3:	8b 44 24 0c          	mov    0xc(%esp),%eax
   169b7:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
	current->state = TASK_UNINTERRUPTIBLE;				// 置为不可中断状态
   169be:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   169c3:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
	add_request(major + blk_dev, req);					// 将请求项加入队列中.
   169c9:	8b 44 24 08          	mov    0x8(%esp),%eax
   169cd:	c1 e0 03             	shl    $0x3,%eax
   169d0:	05 00 11 03 00       	add    $0x31100,%eax
   169d5:	83 ec 08             	sub    $0x8,%esp
   169d8:	ff 74 24 14          	pushl  0x14(%esp)
   169dc:	50                   	push   %eax
   169dd:	e8 3f fb ff ff       	call   16521 <add_request>
   169e2:	83 c4 10             	add    $0x10,%esp
	// 当前进程需要读取8个扇区的数据因此需要睡眠，因此调用调度程序选择进程运行
	schedule();
   169e5:	e8 5b 04 ff ff       	call   6e45 <schedule>
}
   169ea:	83 c4 1c             	add    $0x1c,%esp
   169ed:	c3                   	ret    

000169ee <ll_rw_block>:
// 该函数是块设备驱动程序与系统其他部分的接口函数.通常在fs/buffer.c程序中被调用.
// 主要功能是创建块设备读写请求项并插入到指定块设备请求队列.实际的读写操作则是由设备的request_fn()函数完成.对于硬盘操作,该函数是do_hd_request();对于软盘操作
// 该函数是do_fd_request();对于虚拟盘则是do_rd_request().另外,在调用该函数之前,调用者需要首先把读/写块设备的信息保存在缓冲块头结构中,如设备号,块号.
// 参数:rw - READ,READA,WRITE或WRITEA是命令;bh - 数据缓冲块头指针.
void ll_rw_block(int rw, struct buffer_head * bh)
{
   169ee:	83 ec 1c             	sub    $0x1c,%esp
	unsigned int major;									// 主设备号(对于硬盘是3)

	// 如果设备主设备号不存在或者该设备的请求操作函数不存在,则显示出错信息,并返回.否则创建请求项并插入请求队列.
	if ((major = MAJOR(bh->b_dev)) >= NR_BLK_DEV ||
   169f1:	8b 44 24 24          	mov    0x24(%esp),%eax
   169f5:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   169f9:	66 c1 e8 08          	shr    $0x8,%ax
   169fd:	0f b7 c0             	movzwl %ax,%eax
   16a00:	89 44 24 0c          	mov    %eax,0xc(%esp)
   16a04:	83 7c 24 0c 06       	cmpl   $0x6,0xc(%esp)
   16a09:	77 0f                	ja     16a1a <ll_rw_block+0x2c>
	!(blk_dev[major].request_fn)) {
   16a0b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16a0f:	8b 04 c5 00 11 03 00 	mov    0x31100(,%eax,8),%eax
void ll_rw_block(int rw, struct buffer_head * bh)
{
	unsigned int major;									// 主设备号(对于硬盘是3)

	// 如果设备主设备号不存在或者该设备的请求操作函数不存在,则显示出错信息,并返回.否则创建请求项并插入请求队列.
	if ((major = MAJOR(bh->b_dev)) >= NR_BLK_DEV ||
   16a16:	85 c0                	test   %eax,%eax
   16a18:	75 12                	jne    16a2c <ll_rw_block+0x3e>
	!(blk_dev[major].request_fn)) {
		printk("Trying to read nonexistent block-device\n\r");
   16a1a:	83 ec 0c             	sub    $0xc,%esp
   16a1d:	68 70 3f 02 00       	push   $0x23f70
   16a22:	e8 20 22 ff ff       	call   8c47 <printk>
   16a27:	83 c4 10             	add    $0x10,%esp
		return;
   16a2a:	eb 18                	jmp    16a44 <ll_rw_block+0x56>
	}
	make_request(major, rw, bh);
   16a2c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16a30:	83 ec 04             	sub    $0x4,%esp
   16a33:	ff 74 24 28          	pushl  0x28(%esp)
   16a37:	ff 74 24 28          	pushl  0x28(%esp)
   16a3b:	50                   	push   %eax
   16a3c:	e8 c1 fc ff ff       	call   16702 <make_request>
   16a41:	83 c4 10             	add    $0x10,%esp
}
   16a44:	83 c4 1c             	add    $0x1c,%esp
   16a47:	c3                   	ret    

00016a48 <blk_dev_init>:

// 块设备初始化函数,由初始化程序main.c调用.
// 初始化请求数组,将所有请求项置为空闲项(dev = -1).有32项(NR_REQUEST = 32).
void blk_dev_init(void)
{
   16a48:	83 ec 10             	sub    $0x10,%esp
	int i;

	for (i = 0; i < NR_REQUEST; i++) {
   16a4b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   16a52:	00 
   16a53:	eb 37                	jmp    16a8c <blk_dev_init+0x44>
		request[i].dev = -1;
   16a55:	8b 54 24 0c          	mov    0xc(%esp),%edx
   16a59:	89 d0                	mov    %edx,%eax
   16a5b:	c1 e0 03             	shl    $0x3,%eax
   16a5e:	01 d0                	add    %edx,%eax
   16a60:	c1 e0 02             	shl    $0x2,%eax
   16a63:	05 80 13 04 00       	add    $0x41380,%eax
   16a68:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
		request[i].next = NULL;
   16a6e:	8b 54 24 0c          	mov    0xc(%esp),%edx
   16a72:	89 d0                	mov    %edx,%eax
   16a74:	c1 e0 03             	shl    $0x3,%eax
   16a77:	01 d0                	add    %edx,%eax
   16a79:	c1 e0 02             	shl    $0x2,%eax
   16a7c:	05 a0 13 04 00       	add    $0x413a0,%eax
   16a81:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
// 初始化请求数组,将所有请求项置为空闲项(dev = -1).有32项(NR_REQUEST = 32).
void blk_dev_init(void)
{
	int i;

	for (i = 0; i < NR_REQUEST; i++) {
   16a87:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   16a8c:	83 7c 24 0c 1f       	cmpl   $0x1f,0xc(%esp)
   16a91:	7e c2                	jle    16a55 <blk_dev_init+0xd>
		request[i].dev = -1;
		request[i].next = NULL;
	}
}
   16a93:	90                   	nop
   16a94:	83 c4 10             	add    $0x10,%esp
   16a97:	c3                   	ret    

00016a98 <unlock_buffer>:
static void (DEVICE_REQUEST)(void);

// 解锁指定的缓冲块.
// 如果指定缓冲块bh并没有被上锁,则显示警告信息.否则将该缓冲块解锁,并唤醒等待该缓冲块的进程.此为内嵌函数.参数是缓冲块头指针.
static inline void unlock_buffer(struct buffer_head * bh)
{
   16a98:	83 ec 0c             	sub    $0xc,%esp
	if (!bh->b_lock)
   16a9b:	8b 44 24 10          	mov    0x10(%esp),%eax
   16a9f:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   16aa3:	84 c0                	test   %al,%al
   16aa5:	75 10                	jne    16ab7 <unlock_buffer+0x1f>
		printk(DEVICE_NAME ": free buffer being unlocked\n");
   16aa7:	83 ec 0c             	sub    $0xc,%esp
   16aaa:	68 c0 3f 02 00       	push   $0x23fc0
   16aaf:	e8 93 21 ff ff       	call   8c47 <printk>
   16ab4:	83 c4 10             	add    $0x10,%esp
	bh->b_lock = 0;
   16ab7:	8b 44 24 10          	mov    0x10(%esp),%eax
   16abb:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
	wake_up(&bh->b_wait);
   16abf:	8b 44 24 10          	mov    0x10(%esp),%eax
   16ac3:	83 c0 10             	add    $0x10,%eax
   16ac6:	83 ec 0c             	sub    $0xc,%esp
   16ac9:	50                   	push   %eax
   16aca:	e8 80 06 ff ff       	call   714f <wake_up>
   16acf:	83 c4 10             	add    $0x10,%esp
}
   16ad2:	90                   	nop
   16ad3:	83 c4 0c             	add    $0xc,%esp
   16ad6:	c3                   	ret    

00016ad7 <end_request>:
// 参数uptodate是更新标志.
// 首先关闭指定块设备,然后检查此次读写缓冲区是否有效.如果有效则根据参数值设置缓冲区数据更新标志,并解锁该缓冲区.如果更新标志参数值是0,
// 表示此次请求项的操作失败,因此显示相关块设备IO错误信息.最后,唤醒等待该请求项的进程以及等待空闲请求项出现的进程,释放并从请求链表
// 中删除本请求项,并把当前请求项指针指向下一请求项.
static inline void end_request(int uptodate)
{
   16ad7:	83 ec 0c             	sub    $0xc,%esp
	DEVICE_OFF(CURRENT->dev);							// 关闭设备
   16ada:	a1 14 11 03 00       	mov    0x31114,%eax
   16adf:	8b 00                	mov    (%eax),%eax
   16ae1:	83 e0 03             	and    $0x3,%eax
   16ae4:	83 ec 0c             	sub    $0xc,%esp
   16ae7:	50                   	push   %eax
   16ae8:	e8 d1 07 ff ff       	call   72be <floppy_off>
   16aed:	83 c4 10             	add    $0x10,%esp
	if (CURRENT->bh) {									// CURRENT为当前请求结构项指针
   16af0:	a1 14 11 03 00       	mov    0x31114,%eax
   16af5:	8b 40 1c             	mov    0x1c(%eax),%eax
   16af8:	85 c0                	test   %eax,%eax
   16afa:	74 23                	je     16b1f <end_request+0x48>
		CURRENT->bh->b_uptodate = uptodate;				// 置更新标志.
   16afc:	a1 14 11 03 00       	mov    0x31114,%eax
   16b01:	8b 40 1c             	mov    0x1c(%eax),%eax
   16b04:	8b 54 24 10          	mov    0x10(%esp),%edx
   16b08:	88 50 0a             	mov    %dl,0xa(%eax)
		unlock_buffer(CURRENT->bh);						// 解锁缓冲区.
   16b0b:	a1 14 11 03 00       	mov    0x31114,%eax
   16b10:	8b 40 1c             	mov    0x1c(%eax),%eax
   16b13:	83 ec 0c             	sub    $0xc,%esp
   16b16:	50                   	push   %eax
   16b17:	e8 7c ff ff ff       	call   16a98 <unlock_buffer>
   16b1c:	83 c4 10             	add    $0x10,%esp
	}
	if (!uptodate) {									// 若更新标志为0则显示出错信息.
   16b1f:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   16b24:	75 34                	jne    16b5a <end_request+0x83>
		printk(DEVICE_NAME " I/O error\n\r");
   16b26:	83 ec 0c             	sub    $0xc,%esp
   16b29:	68 e4 3f 02 00       	push   $0x23fe4
   16b2e:	e8 14 21 ff ff       	call   8c47 <printk>
   16b33:	83 c4 10             	add    $0x10,%esp
		printk("dev %04x, block %d\n\r",CURRENT->dev,
			CURRENT->bh->b_blocknr);
   16b36:	a1 14 11 03 00       	mov    0x31114,%eax
   16b3b:	8b 40 1c             	mov    0x1c(%eax),%eax
		CURRENT->bh->b_uptodate = uptodate;				// 置更新标志.
		unlock_buffer(CURRENT->bh);						// 解锁缓冲区.
	}
	if (!uptodate) {									// 若更新标志为0则显示出错信息.
		printk(DEVICE_NAME " I/O error\n\r");
		printk("dev %04x, block %d\n\r",CURRENT->dev,
   16b3e:	8b 50 04             	mov    0x4(%eax),%edx
   16b41:	a1 14 11 03 00       	mov    0x31114,%eax
   16b46:	8b 00                	mov    (%eax),%eax
   16b48:	83 ec 04             	sub    $0x4,%esp
   16b4b:	52                   	push   %edx
   16b4c:	50                   	push   %eax
   16b4d:	68 f7 3f 02 00       	push   $0x23ff7
   16b52:	e8 f0 20 ff ff       	call   8c47 <printk>
   16b57:	83 c4 10             	add    $0x10,%esp
			CURRENT->bh->b_blocknr);
	}
	wake_up(&CURRENT->waiting);							// 唤醒等待该请求项的进程.
   16b5a:	a1 14 11 03 00       	mov    0x31114,%eax
   16b5f:	83 c0 18             	add    $0x18,%eax
   16b62:	83 ec 0c             	sub    $0xc,%esp
   16b65:	50                   	push   %eax
   16b66:	e8 e4 05 ff ff       	call   714f <wake_up>
   16b6b:	83 c4 10             	add    $0x10,%esp
	wake_up(&wait_for_request);							// 唤醒等待空闲请求项的进程.
   16b6e:	83 ec 0c             	sub    $0xc,%esp
   16b71:	68 e0 10 03 00       	push   $0x310e0
   16b76:	e8 d4 05 ff ff       	call   714f <wake_up>
   16b7b:	83 c4 10             	add    $0x10,%esp
	CURRENT->dev = -1;									// 释放该请求项.
   16b7e:	a1 14 11 03 00       	mov    0x31114,%eax
   16b83:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	CURRENT = CURRENT->next;							// 指向下一请求项.
   16b89:	a1 14 11 03 00       	mov    0x31114,%eax
   16b8e:	8b 40 20             	mov    0x20(%eax),%eax
   16b91:	a3 14 11 03 00       	mov    %eax,0x31114
}
   16b96:	90                   	nop
   16b97:	83 c4 0c             	add    $0xc,%esp
   16b9a:	c3                   	ret    

00016b9b <floppy_deselect>:

// 取消选定软驱.
// 如果函数参数指定的软驱nr当前并没有被选定,则显示警告信息.然后复位软驱已选定标志selected,并唤醒等待选择该软驱的任务.数字输出
// 寄存器(DOR)的低2位用于指定选择的软驱(0-3对应A-D).
void floppy_deselect(unsigned int nr)
{
   16b9b:	83 ec 0c             	sub    $0xc,%esp
	if (nr != (current_DOR & 3))
   16b9e:	0f b6 05 c8 e2 02 00 	movzbl 0x2e2c8,%eax
   16ba5:	0f b6 c0             	movzbl %al,%eax
   16ba8:	83 e0 03             	and    $0x3,%eax
   16bab:	3b 44 24 10          	cmp    0x10(%esp),%eax
   16baf:	74 10                	je     16bc1 <floppy_deselect+0x26>
		printk("floppy_deselect: drive not selected\n\r");
   16bb1:	83 ec 0c             	sub    $0xc,%esp
   16bb4:	68 0c 40 02 00       	push   $0x2400c
   16bb9:	e8 89 20 ff ff       	call   8c47 <printk>
   16bbe:	83 c4 10             	add    $0x10,%esp
	selected = 0;											// 复位软驱已选定标志.
   16bc1:	c6 05 58 11 03 00 00 	movb   $0x0,0x31158
	wake_up(&wait_on_floppy_select);						// 唤醒等待的任务.
   16bc8:	83 ec 0c             	sub    $0xc,%esp
   16bcb:	68 5c 11 03 00       	push   $0x3115c
   16bd0:	e8 7a 05 ff ff       	call   714f <wake_up>
   16bd5:	83 c4 10             	add    $0x10,%esp
}
   16bd8:	90                   	nop
   16bd9:	83 c4 0c             	add    $0xc,%esp
   16bdc:	c3                   	ret    

00016bdd <floppy_change>:
// 检测指定软驱中软盘更换情况.
// 参数nr是软驱号.如果软盘更换了则返回1,否则返回0.
// 该函数首先选定参数指定的软驱nr,然后测试软盘控制器的数字输入寄存器DIR的值,以判断驱动器中的软盘是否被更换过.该函数由程序
// fs/buffer.c中的check_disk_change()函数调用.
int floppy_change(unsigned int nr)
{
   16bdd:	83 ec 1c             	sub    $0x1c,%esp
	// 首先要让软驱中软盘旋转起来并达到正常工作转速.这需要花费一定时间.采用的方法是利用kernel/sched.c中软盘定时函数do_floppy_timer()
	// 进行一定的延时处理.floppy_on()函数则用于判断延时是否到(mon_timer[nr]==0?),若没有到则让当前进程继续睡眠等待.若延时到则
	// do_floppy_timer()会唤醒当前进程.
repeat:
	floppy_on(nr);										// 启动并等待指定软驱nr(kernel/sched.c)
   16be0:	83 ec 0c             	sub    $0xc,%esp
   16be3:	ff 74 24 2c          	pushl  0x2c(%esp)
   16be7:	e8 9b 06 ff ff       	call   7287 <floppy_on>
   16bec:	83 c4 10             	add    $0x10,%esp
	// 在软盘启动(旋转)之后,我们来查看一下当前选择的软驱是不是函数参数指定的软驱nr.
	// 如果当前选择的软驱不是指定的软驱nr,并且已经选定了其他软驱,则让当前任务进入可中断等待状态,以等待其他软驱被取消选定.参见上面
	// floppy_deselect().如果当前没有选择其他软驱或者其他软驱被取消选定而使当前任务被唤醒时,当前软驱仍然不是指定的软驱nr,则跳转到
	// 函数开始处重新循环等待.
	while ((current_DOR & 3) != nr && selected)
   16bef:	eb 10                	jmp    16c01 <floppy_change+0x24>
		sleep_on(&wait_on_floppy_select);
   16bf1:	83 ec 0c             	sub    $0xc,%esp
   16bf4:	68 5c 11 03 00       	push   $0x3115c
   16bf9:	e8 38 05 ff ff       	call   7136 <sleep_on>
   16bfe:	83 c4 10             	add    $0x10,%esp
	floppy_on(nr);										// 启动并等待指定软驱nr(kernel/sched.c)
	// 在软盘启动(旋转)之后,我们来查看一下当前选择的软驱是不是函数参数指定的软驱nr.
	// 如果当前选择的软驱不是指定的软驱nr,并且已经选定了其他软驱,则让当前任务进入可中断等待状态,以等待其他软驱被取消选定.参见上面
	// floppy_deselect().如果当前没有选择其他软驱或者其他软驱被取消选定而使当前任务被唤醒时,当前软驱仍然不是指定的软驱nr,则跳转到
	// 函数开始处重新循环等待.
	while ((current_DOR & 3) != nr && selected)
   16c01:	0f b6 05 c8 e2 02 00 	movzbl 0x2e2c8,%eax
   16c08:	0f b6 c0             	movzbl %al,%eax
   16c0b:	83 e0 03             	and    $0x3,%eax
   16c0e:	3b 44 24 20          	cmp    0x20(%esp),%eax
   16c12:	74 0b                	je     16c1f <floppy_change+0x42>
   16c14:	0f b6 05 58 11 03 00 	movzbl 0x31158,%eax
   16c1b:	84 c0                	test   %al,%al
   16c1d:	75 d2                	jne    16bf1 <floppy_change+0x14>
		sleep_on(&wait_on_floppy_select);
	if ((current_DOR & 3) != nr)
   16c1f:	0f b6 05 c8 e2 02 00 	movzbl 0x2e2c8,%eax
   16c26:	0f b6 c0             	movzbl %al,%eax
   16c29:	83 e0 03             	and    $0x3,%eax
   16c2c:	3b 44 24 20          	cmp    0x20(%esp),%eax
   16c30:	74 02                	je     16c34 <floppy_change+0x57>
		goto repeat;
   16c32:	eb ac                	jmp    16be0 <floppy_change+0x3>
	// 现在软盘控制器已经选定我们指定的软驱nr.于是取数字输入寄存器DIR的值,如果其最高位(位7)置位,则表示软盘已更换,此时即可关闭马达并
	// 返回1退出.否则关闭马达返回0退出.表示磁盘没有被更换.
	if (inb(FD_DIR) & 0x80) {
   16c34:	b8 f7 03 00 00       	mov    $0x3f7,%eax
   16c39:	89 c2                	mov    %eax,%edx
   16c3b:	ec                   	in     (%dx),%al
   16c3c:	88 44 24 0f          	mov    %al,0xf(%esp)
   16c40:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   16c45:	84 c0                	test   %al,%al
   16c47:	79 16                	jns    16c5f <floppy_change+0x82>
		floppy_off(nr);
   16c49:	83 ec 0c             	sub    $0xc,%esp
   16c4c:	ff 74 24 2c          	pushl  0x2c(%esp)
   16c50:	e8 69 06 ff ff       	call   72be <floppy_off>
   16c55:	83 c4 10             	add    $0x10,%esp
		return 1;
   16c58:	b8 01 00 00 00       	mov    $0x1,%eax
   16c5d:	eb 14                	jmp    16c73 <floppy_change+0x96>
	}
	floppy_off(nr);
   16c5f:	83 ec 0c             	sub    $0xc,%esp
   16c62:	ff 74 24 2c          	pushl  0x2c(%esp)
   16c66:	e8 53 06 ff ff       	call   72be <floppy_off>
   16c6b:	83 c4 10             	add    $0x10,%esp
	return 0;
   16c6e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16c73:	83 c4 1c             	add    $0x1c,%esp
   16c76:	c3                   	ret    

00016c77 <setup_DMA>:
	:)

// 设置(初始化)软盘DMA通道.
// 软盘中数据读写操作是使用DMA进行的.因此在每次进行数据传输之前需要设置DMA芯片专门上用于软驱的通道2.
static void setup_DMA(void)
{
   16c77:	57                   	push   %edi
   16c78:	56                   	push   %esi
   16c79:	53                   	push   %ebx
   16c7a:	83 ec 10             	sub    $0x10,%esp
	long addr = (long) CURRENT->buffer;				// 当前请求项缓冲区所处内存地址.
   16c7d:	a1 14 11 03 00       	mov    0x31114,%eax
   16c82:	8b 40 14             	mov    0x14(%eax),%eax
   16c85:	89 44 24 0c          	mov    %eax,0xc(%esp)

	// 首先检测请求项的缓冲区所在位置.如果缓冲区处于内存1MB以上的某个地方,则需要将DMA缓冲区设在临时缓冲区域(tmp_floppy_area)处.因为
	// 8237A芯片只能在1MB地址范围内寻址.如果是写盘命令,则还需要把数据从请求项缓冲区复制到该临时区域.
	cli();
   16c89:	fa                   	cli    
	if (addr >= 0x100000) {
   16c8a:	81 7c 24 0c ff ff 0f 	cmpl   $0xfffff,0xc(%esp)
   16c91:	00 
   16c92:	7e 30                	jle    16cc4 <setup_DMA+0x4d>
		addr = (long) tmp_floppy_area;
   16c94:	c7 44 24 0c 00 50 00 	movl   $0x5000,0xc(%esp)
   16c9b:	00 
		if (command == FD_WRITE)
   16c9c:	0f b6 05 78 11 03 00 	movzbl 0x31178,%eax
   16ca3:	3c c5                	cmp    $0xc5,%al
   16ca5:	75 1d                	jne    16cc4 <setup_DMA+0x4d>
			copy_buffer(CURRENT->buffer,tmp_floppy_area);
   16ca7:	a1 14 11 03 00       	mov    0x31114,%eax
   16cac:	8b 40 14             	mov    0x14(%eax),%eax
   16caf:	89 c2                	mov    %eax,%edx
   16cb1:	bb 00 50 00 00       	mov    $0x5000,%ebx
   16cb6:	b8 00 01 00 00       	mov    $0x100,%eax
   16cbb:	89 c1                	mov    %eax,%ecx
   16cbd:	89 d6                	mov    %edx,%esi
   16cbf:	89 df                	mov    %ebx,%edi
   16cc1:	fc                   	cld    
   16cc2:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	}
	// 接下来我们开始设置DMA通道2.在开始设置之前需要先屏蔽该通道.单通道屏蔽寄存器端口为0x0A.位0-1指定DMA通道(0--3),位2:1表示屏蔽,0
	// 表示允许请求.然后向DMA控制器端口D12和11写入方式字(读盘是0x46,写盘是0x4A).再写入传输使用缓冲区地址addr和需要传输的字节数0x3ff
	// (0--1023).最后复位对DMA通道2的屏蔽,开放DMA2请求DREQ信号.
	/* mask DMA 2 */	/* 屏蔽DMA通道2 */
	immoutb_p(4 | 2,10);
   16cc4:	b8 06 00 00 00       	mov    $0x6,%eax
   16cc9:	e6 0a                	out    %al,$0xa
   16ccb:	eb 00                	jmp    16ccd <setup_DMA+0x56>
   16ccd:	eb 00                	jmp    16ccf <setup_DMA+0x58>
	// 由于各通道的地址和计数寄存器都是16位的,因此在设置他们时都需要分2次进行操作.一次访问低字节,另一次访问高字节.而实际在写哪个字节则
	// 由先后触发器的状态一.当触发器为0时,则访问低字节;当字节触发器为1时,则访问高字节.每访问一次,该触发器的状态就变化一次.而写端口12就可
	// 以将触发顺置成0状态,从而对16位寄存器的设置从低字节开始.
 	__asm__("outb %%al,$12\n\tjmp 1f\n1:\tjmp 1f\n1:\t"
	"outb %%al,$11\n\tjmp 1f\n1:\tjmp 1f\n1:"::
	"a" ((char) ((command == FD_READ)?DMA_READ:DMA_WRITE)));
   16ccf:	0f b6 05 78 11 03 00 	movzbl 0x31178,%eax
   16cd6:	3c e6                	cmp    $0xe6,%al
   16cd8:	75 07                	jne    16ce1 <setup_DMA+0x6a>
   16cda:	b8 46 00 00 00       	mov    $0x46,%eax
   16cdf:	eb 05                	jmp    16ce6 <setup_DMA+0x6f>
   16ce1:	b8 4a 00 00 00       	mov    $0x4a,%eax
	/* sanches和canton)都输出两次,首先是12口,然后是11口 */
	// 下面嵌入汇编代码向DMA控制器的"清除先后触发器"端口12和方式寄存器端口11写入方式字(读盘时是0x46,写盘是0x4A).
	// 由于各通道的地址和计数寄存器都是16位的,因此在设置他们时都需要分2次进行操作.一次访问低字节,另一次访问高字节.而实际在写哪个字节则
	// 由先后触发器的状态一.当触发器为0时,则访问低字节;当字节触发器为1时,则访问高字节.每访问一次,该触发器的状态就变化一次.而写端口12就可
	// 以将触发顺置成0状态,从而对16位寄存器的设置从低字节开始.
 	__asm__("outb %%al,$12\n\tjmp 1f\n1:\tjmp 1f\n1:\t"
   16ce6:	e6 0c                	out    %al,$0xc
   16ce8:	eb 00                	jmp    16cea <setup_DMA+0x73>
   16cea:	eb 00                	jmp    16cec <setup_DMA+0x75>
   16cec:	e6 0b                	out    %al,$0xb
   16cee:	eb 00                	jmp    16cf0 <setup_DMA+0x79>
   16cf0:	eb 00                	jmp    16cf2 <setup_DMA+0x7b>
	"outb %%al,$11\n\tjmp 1f\n1:\tjmp 1f\n1:"::
	"a" ((char) ((command == FD_READ)?DMA_READ:DMA_WRITE)));
	/* 8 low bits of addr */	/* 地址氏0-7位 */
	// 向DMA通道2写入基/当前地址寄存器(端口4).
	immoutb_p(addr, 4);
   16cf2:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16cf6:	e6 04                	out    %al,$0x4
   16cf8:	eb 00                	jmp    16cfa <setup_DMA+0x83>
   16cfa:	eb 00                	jmp    16cfc <setup_DMA+0x85>
	addr >>= 8;
   16cfc:	c1 7c 24 0c 08       	sarl   $0x8,0xc(%esp)
	/* bits 8-15 of addr */		/* 地址高8-15位 */
	immoutb_p(addr, 4);
   16d01:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16d05:	e6 04                	out    %al,$0x4
   16d07:	eb 00                	jmp    16d09 <setup_DMA+0x92>
   16d09:	eb 00                	jmp    16d0b <setup_DMA+0x94>
	addr >>= 8;
   16d0b:	c1 7c 24 0c 08       	sarl   $0x8,0xc(%esp)
	/* bits 16-19 of addr */	/* 地址16-19位 */
	// DMA只可以在1MB内存空间内寻址,基高16-19位地址需放入页面寄存器(端口0x81).
	immoutb_p(addr, 0x81);
   16d10:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16d14:	e6 81                	out    %al,$0x81
   16d16:	eb 00                	jmp    16d18 <setup_DMA+0xa1>
   16d18:	eb 00                	jmp    16d1a <setup_DMA+0xa3>
	/* low 8 bits of count-1 (1024-1=0x3ff) */	/* 计数器低8位(1024-1 = 0x3ff) */
	// 向DMA通道2写入基/当前字节计数值(端口5).
	immoutb_p(0xff, 5);
   16d1a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16d1f:	e6 05                	out    %al,$0x5
   16d21:	eb 00                	jmp    16d23 <setup_DMA+0xac>
   16d23:	eb 00                	jmp    16d25 <setup_DMA+0xae>
	/* high 8 bits of count-1 */	/* 计数器高8位 */
	// 一次共传输1024字节(两个扇区).
	immoutb_p(3, 5);
   16d25:	b8 03 00 00 00       	mov    $0x3,%eax
   16d2a:	e6 05                	out    %al,$0x5
   16d2c:	eb 00                	jmp    16d2e <setup_DMA+0xb7>
   16d2e:	eb 00                	jmp    16d30 <setup_DMA+0xb9>
	/* activate DMA 2 */	/* 开启DMA通道2的请求 */
	immoutb_p(0 | 2, 10);
   16d30:	b8 02 00 00 00       	mov    $0x2,%eax
   16d35:	e6 0a                	out    %al,$0xa
   16d37:	eb 00                	jmp    16d39 <setup_DMA+0xc2>
   16d39:	eb 00                	jmp    16d3b <setup_DMA+0xc4>
	sti();
   16d3b:	fb                   	sti    
}
   16d3c:	90                   	nop
   16d3d:	83 c4 10             	add    $0x10,%esp
   16d40:	5b                   	pop    %ebx
   16d41:	5e                   	pop    %esi
   16d42:	5f                   	pop    %edi
   16d43:	c3                   	ret    

00016d44 <output_byte>:

// 向软驱控制器输出一个字节命令或参数.
// 在向控制器发送一个字节之前,控制器需要处于准备好状态,并且数据传输方向必须设置成从CPU到FDC,因此函数需要首先读取控制器状态信息.
// 这里使用了循环查询方式,以作适当延时.若出错,则会设置复位标志reset.
static void output_byte(char byte)
{
   16d44:	83 ec 2c             	sub    $0x2c,%esp
   16d47:	8b 44 24 30          	mov    0x30(%esp),%eax
   16d4b:	88 44 24 0c          	mov    %al,0xc(%esp)
	int counter;
	unsigned char status;

	// 循环读取主状态控制器FD_STATUS(0x3f4)的状态.如果所读状态是STATUS_READY并且方向位STATUS_DIR = 0(CPU ->FDC),则向数据端口输出
	// 指定字节.
	if (reset)
   16d4f:	a1 64 11 03 00       	mov    0x31164,%eax
   16d54:	85 c0                	test   %eax,%eax
   16d56:	75 65                	jne    16dbd <output_byte+0x79>
		return;
	for(counter = 0 ; counter < 10000 ; counter++) {
   16d58:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   16d5f:	00 
   16d60:	eb 35                	jmp    16d97 <output_byte+0x53>
		status = inb_p(FD_STATUS) & (STATUS_READY | STATUS_DIR);
   16d62:	b8 f4 03 00 00       	mov    $0x3f4,%eax
   16d67:	89 c2                	mov    %eax,%edx
   16d69:	ec                   	in     (%dx),%al
   16d6a:	eb 00                	jmp    16d6c <output_byte+0x28>
   16d6c:	eb 00                	jmp    16d6e <output_byte+0x2a>
   16d6e:	88 44 24 1b          	mov    %al,0x1b(%esp)
   16d72:	0f b6 44 24 1b       	movzbl 0x1b(%esp),%eax
   16d77:	83 e0 c0             	and    $0xffffffc0,%eax
   16d7a:	88 44 24 1a          	mov    %al,0x1a(%esp)
		if (status == STATUS_READY) {
   16d7e:	80 7c 24 1a 80       	cmpb   $0x80,0x1a(%esp)
   16d83:	75 0d                	jne    16d92 <output_byte+0x4e>
			outb(byte,FD_DATA);
   16d85:	0f b6 44 24 0c       	movzbl 0xc(%esp),%eax
   16d8a:	ba f5 03 00 00       	mov    $0x3f5,%edx
   16d8f:	ee                   	out    %al,(%dx)
			return;
   16d90:	eb 2c                	jmp    16dbe <output_byte+0x7a>

	// 循环读取主状态控制器FD_STATUS(0x3f4)的状态.如果所读状态是STATUS_READY并且方向位STATUS_DIR = 0(CPU ->FDC),则向数据端口输出
	// 指定字节.
	if (reset)
		return;
	for(counter = 0 ; counter < 10000 ; counter++) {
   16d92:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   16d97:	81 7c 24 1c 0f 27 00 	cmpl   $0x270f,0x1c(%esp)
   16d9e:	00 
   16d9f:	7e c1                	jle    16d62 <output_byte+0x1e>
			outb(byte,FD_DATA);
			return;
		}
	}
	// 如果到循环1万次结束还不能发送,则置复位标志,并打印出错信息.
	reset = 1;
   16da1:	c7 05 64 11 03 00 01 	movl   $0x1,0x31164
   16da8:	00 00 00 
	printk("Unable to send byte to FDC\n\r");
   16dab:	83 ec 0c             	sub    $0xc,%esp
   16dae:	68 32 40 02 00       	push   $0x24032
   16db3:	e8 8f 1e ff ff       	call   8c47 <printk>
   16db8:	83 c4 10             	add    $0x10,%esp
   16dbb:	eb 01                	jmp    16dbe <output_byte+0x7a>
	unsigned char status;

	// 循环读取主状态控制器FD_STATUS(0x3f4)的状态.如果所读状态是STATUS_READY并且方向位STATUS_DIR = 0(CPU ->FDC),则向数据端口输出
	// 指定字节.
	if (reset)
		return;
   16dbd:	90                   	nop
		}
	}
	// 如果到循环1万次结束还不能发送,则置复位标志,并打印出错信息.
	reset = 1;
	printk("Unable to send byte to FDC\n\r");
}
   16dbe:	83 c4 2c             	add    $0x2c,%esp
   16dc1:	c3                   	ret    

00016dc2 <result>:

// 读取FDC执行的结果信息.
// 结果信息最多7个字节,存放在数组reply_buffer[]中.返回读入的结果字节数,若返回值=-1,则表示出错.程序处理方式与上面函数类似.
static int result(void)
{
   16dc2:	83 ec 2c             	sub    $0x2c,%esp
	int i = 0, counter, status;
   16dc5:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   16dcc:	00 

	// 若复位标志已置位,则立刻退出.去执行后续程序中的复位操作.否则循环读取主状态控制器FD_STATUS(0x3f4)的状态.如果读取的控制器状态
	// 是READY,表示已经没有数据可取,则返回已读取的字节数i.如果控制器状态是方向标志置位(CPU <-FDC),已准备好,忙,表示有数据可读取.
	// 于是把控制器中的结果数据读入到应答结果数组中.最多读取MAX_REPLIES(7)个字节.
	if (reset)
   16dcd:	a1 64 11 03 00       	mov    0x31164,%eax
   16dd2:	85 c0                	test   %eax,%eax
   16dd4:	74 0a                	je     16de0 <result+0x1e>
		return -1;
   16dd6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16ddb:	e9 a3 00 00 00       	jmp    16e83 <result+0xc1>
	for (counter = 0 ; counter < 10000 ; counter++) {
   16de0:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   16de7:	00 
   16de8:	eb 6d                	jmp    16e57 <result+0x95>
		status = inb_p(FD_STATUS)&(STATUS_DIR|STATUS_READY|STATUS_BUSY);
   16dea:	b8 f4 03 00 00       	mov    $0x3f4,%eax
   16def:	89 c2                	mov    %eax,%edx
   16df1:	ec                   	in     (%dx),%al
   16df2:	eb 00                	jmp    16df4 <result+0x32>
   16df4:	eb 00                	jmp    16df6 <result+0x34>
   16df6:	88 44 24 17          	mov    %al,0x17(%esp)
   16dfa:	0f b6 44 24 17       	movzbl 0x17(%esp),%eax
   16dff:	0f b6 c0             	movzbl %al,%eax
   16e02:	25 d0 00 00 00       	and    $0xd0,%eax
   16e07:	89 44 24 10          	mov    %eax,0x10(%esp)
		if (status == STATUS_READY)
   16e0b:	81 7c 24 10 80 00 00 	cmpl   $0x80,0x10(%esp)
   16e12:	00 
   16e13:	75 06                	jne    16e1b <result+0x59>
			return i;
   16e15:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   16e19:	eb 68                	jmp    16e83 <result+0xc1>
		if (status == (STATUS_DIR|STATUS_READY|STATUS_BUSY)) {
   16e1b:	81 7c 24 10 d0 00 00 	cmpl   $0xd0,0x10(%esp)
   16e22:	00 
   16e23:	75 2d                	jne    16e52 <result+0x90>
			if (i >= MAX_REPLIES)
   16e25:	83 7c 24 1c 06       	cmpl   $0x6,0x1c(%esp)
   16e2a:	7f 37                	jg     16e63 <result+0xa1>
				break;
			reply_buffer[i++] = inb_p(FD_DATA);
   16e2c:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   16e30:	8d 41 01             	lea    0x1(%ecx),%eax
   16e33:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   16e37:	b8 f5 03 00 00       	mov    $0x3f5,%eax
   16e3c:	89 c2                	mov    %eax,%edx
   16e3e:	ec                   	in     (%dx),%al
   16e3f:	eb 00                	jmp    16e41 <result+0x7f>
   16e41:	eb 00                	jmp    16e43 <result+0x81>
   16e43:	88 44 24 0f          	mov    %al,0xf(%esp)
   16e47:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   16e4c:	88 81 6c 11 03 00    	mov    %al,0x3116c(%ecx)
	// 若复位标志已置位,则立刻退出.去执行后续程序中的复位操作.否则循环读取主状态控制器FD_STATUS(0x3f4)的状态.如果读取的控制器状态
	// 是READY,表示已经没有数据可取,则返回已读取的字节数i.如果控制器状态是方向标志置位(CPU <-FDC),已准备好,忙,表示有数据可读取.
	// 于是把控制器中的结果数据读入到应答结果数组中.最多读取MAX_REPLIES(7)个字节.
	if (reset)
		return -1;
	for (counter = 0 ; counter < 10000 ; counter++) {
   16e52:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
   16e57:	81 7c 24 18 0f 27 00 	cmpl   $0x270f,0x18(%esp)
   16e5e:	00 
   16e5f:	7e 89                	jle    16dea <result+0x28>
   16e61:	eb 01                	jmp    16e64 <result+0xa2>
		status = inb_p(FD_STATUS)&(STATUS_DIR|STATUS_READY|STATUS_BUSY);
		if (status == STATUS_READY)
			return i;
		if (status == (STATUS_DIR|STATUS_READY|STATUS_BUSY)) {
			if (i >= MAX_REPLIES)
				break;
   16e63:	90                   	nop
			reply_buffer[i++] = inb_p(FD_DATA);
		}
	}
	// 如果到循环1万次结束还不能发送,则置复位标志,并打印出错信息.
	reset = 1;
   16e64:	c7 05 64 11 03 00 01 	movl   $0x1,0x31164
   16e6b:	00 00 00 
	printk("Getstatus times out\n\r");
   16e6e:	83 ec 0c             	sub    $0xc,%esp
   16e71:	68 4f 40 02 00       	push   $0x2404f
   16e76:	e8 cc 1d ff ff       	call   8c47 <printk>
   16e7b:	83 c4 10             	add    $0x10,%esp
	return -1;
   16e7e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16e83:	83 c4 2c             	add    $0x2c,%esp
   16e86:	c3                   	ret    

00016e87 <bad_flp_intr>:
// 该函数根据软盘读写出错次数来确定需要采取的进一步行动.如果当前处理的请求项出错次数大于规定的最大出错次数MAX_ERRORS(8次),则
// 不再对当前请求项作进一步的操作尝试.如果读/写出错次数已经超过MAX_ERRORS/2,则需要对软驱作复位处理,于是设置复位标志reset.否则
// 若出错次数还不到最大值的一半,则只需重新校正一下磁头位置,于是设置重新校正标志recalibrate.真正的复位和重新校正处理会在后续的
// 程序中进行.
static void bad_flp_intr(void)
{
   16e87:	83 ec 0c             	sub    $0xc,%esp
	// 首先把当前请求项出错次数增1.如果当前请求项出错次数大于最大允许出错次数,则取消选定当前软驱,并结束该请求项(缓冲区内容没有被更新).
	CURRENT->errors++;
   16e8a:	a1 14 11 03 00       	mov    0x31114,%eax
   16e8f:	8b 50 08             	mov    0x8(%eax),%edx
   16e92:	83 c2 01             	add    $0x1,%edx
   16e95:	89 50 08             	mov    %edx,0x8(%eax)
	if (CURRENT->errors > MAX_ERRORS) {
   16e98:	a1 14 11 03 00       	mov    0x31114,%eax
   16e9d:	8b 40 08             	mov    0x8(%eax),%eax
   16ea0:	83 f8 08             	cmp    $0x8,%eax
   16ea3:	7e 23                	jle    16ec8 <bad_flp_intr+0x41>
		floppy_deselect(current_drive);
   16ea5:	0f b6 05 73 11 03 00 	movzbl 0x31173,%eax
   16eac:	0f b6 c0             	movzbl %al,%eax
   16eaf:	83 ec 0c             	sub    $0xc,%esp
   16eb2:	50                   	push   %eax
   16eb3:	e8 e3 fc ff ff       	call   16b9b <floppy_deselect>
   16eb8:	83 c4 10             	add    $0x10,%esp
		end_request(0);
   16ebb:	83 ec 0c             	sub    $0xc,%esp
   16ebe:	6a 00                	push   $0x0
   16ec0:	e8 12 fc ff ff       	call   16ad7 <end_request>
   16ec5:	83 c4 10             	add    $0x10,%esp
	}
	// 如果当前请求项出错次数大于在允许出错次数的一半,则置复位标志,需对软驱进行复位操作,然后再试.否则软驱需重新校正一下再试.
	if (CURRENT->errors > MAX_ERRORS / 2)
   16ec8:	a1 14 11 03 00       	mov    0x31114,%eax
   16ecd:	8b 40 08             	mov    0x8(%eax),%eax
   16ed0:	83 f8 04             	cmp    $0x4,%eax
   16ed3:	7e 0c                	jle    16ee1 <bad_flp_intr+0x5a>
		reset = 1;
   16ed5:	c7 05 64 11 03 00 01 	movl   $0x1,0x31164
   16edc:	00 00 00 
	else
		recalibrate = 1;
}
   16edf:	eb 0a                	jmp    16eeb <bad_flp_intr+0x64>
	}
	// 如果当前请求项出错次数大于在允许出错次数的一半,则置复位标志,需对软驱进行复位操作,然后再试.否则软驱需重新校正一下再试.
	if (CURRENT->errors > MAX_ERRORS / 2)
		reset = 1;
	else
		recalibrate = 1;
   16ee1:	c7 05 60 11 03 00 01 	movl   $0x1,0x31160
   16ee8:	00 00 00 
}
   16eeb:	90                   	nop
   16eec:	83 c4 0c             	add    $0xc,%esp
   16eef:	c3                   	ret    

00016ef0 <rw_interrupt>:
 */
// 软盘读写中断调用函数.
// 该函数在软驱控制器操作结束后引发的中断处理过程中被调用.函数首先读取操作结果状态信息,据此判断操作是否出现问题并作相应处理.如果
// 读/写操作成功,那么若请求项是读操作并且其缓冲区在内存1MB以上位置,则需要把数据从软盘临时缓冲区复制到请求项的缓冲区.
static void rw_interrupt(void)
{
   16ef0:	57                   	push   %edi
   16ef1:	56                   	push   %esi
   16ef2:	53                   	push   %ebx
	// 读取FDC执行的结果信息.如果返回字节数不等于7,或者状态字节0,1或2中存在出错标志,那么若是写保护就显示出错信息,释放当前驱动器,并
	// 结束当前请求项.否则就执行出错计数处理.然后继续执行软盘请求项操作.以下状态的含义参见fdreg.h文件.
	if (result() != 7 || (ST0 & 0xd8) || (ST1 & 0xbf) || (ST2 & 0x73)) {    // 把0xf8修改0xd8
   16ef3:	e8 ca fe ff ff       	call   16dc2 <result>
   16ef8:	83 f8 07             	cmp    $0x7,%eax
   16efb:	75 37                	jne    16f34 <rw_interrupt+0x44>
   16efd:	0f b6 05 6c 11 03 00 	movzbl 0x3116c,%eax
   16f04:	0f b6 c0             	movzbl %al,%eax
   16f07:	25 d8 00 00 00       	and    $0xd8,%eax
   16f0c:	85 c0                	test   %eax,%eax
   16f0e:	75 24                	jne    16f34 <rw_interrupt+0x44>
   16f10:	0f b6 05 6d 11 03 00 	movzbl 0x3116d,%eax
   16f17:	0f b6 c0             	movzbl %al,%eax
   16f1a:	25 bf 00 00 00       	and    $0xbf,%eax
   16f1f:	85 c0                	test   %eax,%eax
   16f21:	75 11                	jne    16f34 <rw_interrupt+0x44>
   16f23:	0f b6 05 6e 11 03 00 	movzbl 0x3116e,%eax
   16f2a:	0f b6 c0             	movzbl %al,%eax
   16f2d:	83 e0 73             	and    $0x73,%eax
   16f30:	85 c0                	test   %eax,%eax
   16f32:	74 5d                	je     16f91 <rw_interrupt+0xa1>
		if (ST1 & 0x02) {
   16f34:	0f b6 05 6d 11 03 00 	movzbl 0x3116d,%eax
   16f3b:	0f b6 c0             	movzbl %al,%eax
   16f3e:	83 e0 02             	and    $0x2,%eax
   16f41:	85 c0                	test   %eax,%eax
   16f43:	74 40                	je     16f85 <rw_interrupt+0x95>
			printk("Drive %d is write protected\n\r",current_drive);
   16f45:	0f b6 05 73 11 03 00 	movzbl 0x31173,%eax
   16f4c:	0f b6 c0             	movzbl %al,%eax
   16f4f:	83 ec 08             	sub    $0x8,%esp
   16f52:	50                   	push   %eax
   16f53:	68 65 40 02 00       	push   $0x24065
   16f58:	e8 ea 1c ff ff       	call   8c47 <printk>
   16f5d:	83 c4 10             	add    $0x10,%esp
			floppy_deselect(current_drive);
   16f60:	0f b6 05 73 11 03 00 	movzbl 0x31173,%eax
   16f67:	0f b6 c0             	movzbl %al,%eax
   16f6a:	83 ec 0c             	sub    $0xc,%esp
   16f6d:	50                   	push   %eax
   16f6e:	e8 28 fc ff ff       	call   16b9b <floppy_deselect>
   16f73:	83 c4 10             	add    $0x10,%esp
			end_request(0);
   16f76:	83 ec 0c             	sub    $0xc,%esp
   16f79:	6a 00                	push   $0x0
   16f7b:	e8 57 fb ff ff       	call   16ad7 <end_request>
   16f80:	83 c4 10             	add    $0x10,%esp
   16f83:	eb 05                	jmp    16f8a <rw_interrupt+0x9a>
		} else
			bad_flp_intr();
   16f85:	e8 fd fe ff ff       	call   16e87 <bad_flp_intr>
		do_fd_request();
   16f8a:	e8 50 05 00 00       	call   174df <do_fd_request>
		return;
   16f8f:	eb 5f                	jmp    16ff0 <rw_interrupt+0x100>
	}
	// 如果当前请求项的缓冲区位于1MB地址以上,则说明此次软盘读操作的内容还放在临时缓冲区内,需要复制到当前请求项的缓冲区中(因为DMA只能在
	// 1MB地址范围寻址).最后释放当前软驱(取消选定),执行当前请求项结束处理:唤醒等待该请求项的进程,唤醒等待空闲请求项的进程(若有的话),从软驱
	// 设备请求项链表中删除本请求项.再继续执行其他软盘请求项操作.
	if (command == FD_READ && (unsigned long)(CURRENT->buffer) >= 0x100000)
   16f91:	0f b6 05 78 11 03 00 	movzbl 0x31178,%eax
   16f98:	3c e6                	cmp    $0xe6,%al
   16f9a:	75 2c                	jne    16fc8 <rw_interrupt+0xd8>
   16f9c:	a1 14 11 03 00       	mov    0x31114,%eax
   16fa1:	8b 40 14             	mov    0x14(%eax),%eax
   16fa4:	3d ff ff 0f 00       	cmp    $0xfffff,%eax
   16fa9:	76 1d                	jbe    16fc8 <rw_interrupt+0xd8>
		copy_buffer(tmp_floppy_area,CURRENT->buffer);
   16fab:	ba 00 50 00 00       	mov    $0x5000,%edx
   16fb0:	a1 14 11 03 00       	mov    0x31114,%eax
   16fb5:	8b 40 14             	mov    0x14(%eax),%eax
   16fb8:	89 c3                	mov    %eax,%ebx
   16fba:	b8 00 01 00 00       	mov    $0x100,%eax
   16fbf:	89 c1                	mov    %eax,%ecx
   16fc1:	89 d6                	mov    %edx,%esi
   16fc3:	89 df                	mov    %ebx,%edi
   16fc5:	fc                   	cld    
   16fc6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	floppy_deselect(current_drive);
   16fc8:	0f b6 05 73 11 03 00 	movzbl 0x31173,%eax
   16fcf:	0f b6 c0             	movzbl %al,%eax
   16fd2:	83 ec 0c             	sub    $0xc,%esp
   16fd5:	50                   	push   %eax
   16fd6:	e8 c0 fb ff ff       	call   16b9b <floppy_deselect>
   16fdb:	83 c4 10             	add    $0x10,%esp
	end_request(1);
   16fde:	83 ec 0c             	sub    $0xc,%esp
   16fe1:	6a 01                	push   $0x1
   16fe3:	e8 ef fa ff ff       	call   16ad7 <end_request>
   16fe8:	83 c4 10             	add    $0x10,%esp
	do_fd_request();
   16feb:	e8 ef 04 00 00       	call   174df <do_fd_request>
}
   16ff0:	5b                   	pop    %ebx
   16ff1:	5e                   	pop    %esi
   16ff2:	5f                   	pop    %edi
   16ff3:	c3                   	ret    

00016ff4 <setup_rw_floppy>:

// 设置DMA通道2并向软盘控制器输出命令和参数(输出1字节命令+0~7字节参数).
// 若reset标志没有置位,那么在该函数退出并且软盘控制器执行完相应读/写操作后就会产生一个软盘中断请求,并开始执行软盘中断处理程序.
void setup_rw_floppy(void)
{
   16ff4:	83 ec 0c             	sub    $0xc,%esp
	setup_DMA();										// 初始化软盘DMA通道.
   16ff7:	e8 7b fc ff ff       	call   16c77 <setup_DMA>
	do_floppy = rw_interrupt;							// 置软盘中断调用函数指针.
   16ffc:	c7 05 54 11 03 00 f0 	movl   $0x16ef0,0x31154
   17003:	6e 01 00 
	output_byte(command);								// 发送命令字节.
   17006:	0f b6 05 78 11 03 00 	movzbl 0x31178,%eax
   1700d:	0f be c0             	movsbl %al,%eax
   17010:	83 ec 0c             	sub    $0xc,%esp
   17013:	50                   	push   %eax
   17014:	e8 2b fd ff ff       	call   16d44 <output_byte>
   17019:	83 c4 10             	add    $0x10,%esp
	output_byte(head<<2 | current_drive);				// 参数:磁头号 + 驱动器号.
   1701c:	0f b6 05 75 11 03 00 	movzbl 0x31175,%eax
   17023:	0f b6 c0             	movzbl %al,%eax
   17026:	c1 e0 02             	shl    $0x2,%eax
   17029:	89 c2                	mov    %eax,%edx
   1702b:	0f b6 05 73 11 03 00 	movzbl 0x31173,%eax
   17032:	09 d0                	or     %edx,%eax
   17034:	0f be c0             	movsbl %al,%eax
   17037:	83 ec 0c             	sub    $0xc,%esp
   1703a:	50                   	push   %eax
   1703b:	e8 04 fd ff ff       	call   16d44 <output_byte>
   17040:	83 c4 10             	add    $0x10,%esp
	output_byte(track);									// 参数:磁道号.
   17043:	0f b6 05 76 11 03 00 	movzbl 0x31176,%eax
   1704a:	0f be c0             	movsbl %al,%eax
   1704d:	83 ec 0c             	sub    $0xc,%esp
   17050:	50                   	push   %eax
   17051:	e8 ee fc ff ff       	call   16d44 <output_byte>
   17056:	83 c4 10             	add    $0x10,%esp
	output_byte(head);									// 参数:磁头号.
   17059:	0f b6 05 75 11 03 00 	movzbl 0x31175,%eax
   17060:	0f be c0             	movsbl %al,%eax
   17063:	83 ec 0c             	sub    $0xc,%esp
   17066:	50                   	push   %eax
   17067:	e8 d8 fc ff ff       	call   16d44 <output_byte>
   1706c:	83 c4 10             	add    $0x10,%esp
	output_byte(sector);								// 参数:起始扇区号.
   1706f:	0f b6 05 74 11 03 00 	movzbl 0x31174,%eax
   17076:	0f be c0             	movsbl %al,%eax
   17079:	83 ec 0c             	sub    $0xc,%esp
   1707c:	50                   	push   %eax
   1707d:	e8 c2 fc ff ff       	call   16d44 <output_byte>
   17082:	83 c4 10             	add    $0x10,%esp
	output_byte(2);										/* sector size = 512 */	// 参数:(N=2)512字节.
   17085:	83 ec 0c             	sub    $0xc,%esp
   17088:	6a 02                	push   $0x2
   1708a:	e8 b5 fc ff ff       	call   16d44 <output_byte>
   1708f:	83 c4 10             	add    $0x10,%esp
	output_byte(floppy->sect);							// 参数:每磁道扇区数.
   17092:	a1 88 e4 02 00       	mov    0x2e488,%eax
   17097:	8b 40 04             	mov    0x4(%eax),%eax
   1709a:	0f be c0             	movsbl %al,%eax
   1709d:	83 ec 0c             	sub    $0xc,%esp
   170a0:	50                   	push   %eax
   170a1:	e8 9e fc ff ff       	call   16d44 <output_byte>
   170a6:	83 c4 10             	add    $0x10,%esp
	output_byte(floppy->gap);							// 参数:扇区间隔长度.
   170a9:	a1 88 e4 02 00       	mov    0x2e488,%eax
   170ae:	0f b6 40 14          	movzbl 0x14(%eax),%eax
   170b2:	0f be c0             	movsbl %al,%eax
   170b5:	83 ec 0c             	sub    $0xc,%esp
   170b8:	50                   	push   %eax
   170b9:	e8 86 fc ff ff       	call   16d44 <output_byte>
   170be:	83 c4 10             	add    $0x10,%esp
	output_byte(0xFF);									/* sector size (0xff when n!=0 ?) */ // 参数:当N=0时,扇区定义的字节长度,这里无用.
   170c1:	83 ec 0c             	sub    $0xc,%esp
   170c4:	6a ff                	push   $0xffffffff
   170c6:	e8 79 fc ff ff       	call   16d44 <output_byte>
   170cb:	83 c4 10             	add    $0x10,%esp
	// 若上述任何一个output_byte()操作出错,则会设置复位标志reset.此时即会立刻去执行do_fd_request()中的复位处理代码.
	if (reset)
   170ce:	a1 64 11 03 00       	mov    0x31164,%eax
   170d3:	85 c0                	test   %eax,%eax
   170d5:	74 05                	je     170dc <setup_rw_floppy+0xe8>
		do_fd_request();
   170d7:	e8 03 04 00 00       	call   174df <do_fd_request>
}
   170dc:	90                   	nop
   170dd:	83 c4 0c             	add    $0xc,%esp
   170e0:	c3                   	ret    

000170e1 <seek_interrupt>:
 */
// 寻道处理结束后中断过程中调用的C函数.
// 首先发送检测中断状态命令,获得状态信息ST0和磁头所在磁道信息.若出错则执行错误计数检测处理或取消本次软盘操作请求项.否则根据
// 状态信息设置当前磁道变量,然后调用函数setup_rw_floppy()设置DMA并输出软盘读写命令和参数.
static void seek_interrupt(void)
{
   170e1:	83 ec 0c             	sub    $0xc,%esp
	// 首先发送检测中断状态命令,以获取寻道操作执行的结果.该命令不带参数.返回结果信息是两个字节:ST0和磁头当前磁道号.一读取FDC执行的
	// 结果信息.如果返回结果字节数不等于2,或者ST0不为寻道结束,或者磁头所在磁道(ST1)不等于设定磁道,则说明发生了错误.于是执行检测错误
	// 计数处理,然后继续执行软盘请求项或执行复位处理.
	/* sense drive status */	/* 检测驱动器状态 */
	output_byte(FD_SENSEI);
   170e4:	83 ec 0c             	sub    $0xc,%esp
   170e7:	6a 08                	push   $0x8
   170e9:	e8 56 fc ff ff       	call   16d44 <output_byte>
   170ee:	83 c4 10             	add    $0x10,%esp
	if (result() != 2 || (ST0 & 0xF8) != 0x20 || ST1 != seek_track) {
   170f1:	e8 cc fc ff ff       	call   16dc2 <result>
   170f6:	83 f8 02             	cmp    $0x2,%eax
   170f9:	75 26                	jne    17121 <seek_interrupt+0x40>
   170fb:	0f b6 05 6c 11 03 00 	movzbl 0x3116c,%eax
   17102:	0f b6 c0             	movzbl %al,%eax
   17105:	25 f8 00 00 00       	and    $0xf8,%eax
   1710a:	83 f8 20             	cmp    $0x20,%eax
   1710d:	75 12                	jne    17121 <seek_interrupt+0x40>
   1710f:	0f b6 15 6d 11 03 00 	movzbl 0x3116d,%edx
   17116:	0f b6 05 77 11 03 00 	movzbl 0x31177,%eax
   1711d:	38 c2                	cmp    %al,%dl
   1711f:	74 0c                	je     1712d <seek_interrupt+0x4c>
		bad_flp_intr();
   17121:	e8 61 fd ff ff       	call   16e87 <bad_flp_intr>
		do_fd_request();
   17126:	e8 b4 03 00 00       	call   174df <do_fd_request>
		return;
   1712b:	eb 11                	jmp    1713e <seek_interrupt+0x5d>
	}
	// 若寻道操作成功,则继续执行当前请求项的软盘操作,即向软盘控制器发送命令和参数.
	current_track = ST1;							// 设置当前磁道.
   1712d:	0f b6 05 6d 11 03 00 	movzbl 0x3116d,%eax
   17134:	a2 8c e4 02 00       	mov    %al,0x2e48c
	setup_rw_floppy();								// 设置DMA并输出软盘操作命令和参数.
   17139:	e8 b6 fe ff ff       	call   16ff4 <setup_rw_floppy>
}
   1713e:	83 c4 0c             	add    $0xc,%esp
   17141:	c3                   	ret    

00017142 <transfer>:
/*
 * 该函数是在传输操作的所有信息都正确设置好后被调用的(即软驱马达已开启并且已选择了正确的软盘(软驱).
 */
// 读写数据传输函数.
static void transfer(void)
{
   17142:	83 ec 0c             	sub    $0xc,%esp
	// 首先检查当前驱动器参数是否就是指定驱动器的参数.若不是就发送设置驱动器参数命令及相应参数(参数1:高4位步进速率,低4位磁头卸载时间;
	// 参数2:磁头加载时间).然后判断当前数据传输速率是否与指定驱动器的一致,若不是就发送指定软驱的速率值到数据传输速率控制寄存器(FD_DCR).
	if (cur_spec1 != floppy->spec1) {				// 检测当前参数.
   17145:	a1 88 e4 02 00       	mov    0x2e488,%eax
   1714a:	0f b6 40 16          	movzbl 0x16(%eax),%eax
   1714e:	0f b6 d0             	movzbl %al,%edx
   17151:	a1 80 e4 02 00       	mov    0x2e480,%eax
   17156:	39 c2                	cmp    %eax,%edx
   17158:	74 3f                	je     17199 <transfer+0x57>
		cur_spec1 = floppy->spec1;
   1715a:	a1 88 e4 02 00       	mov    0x2e488,%eax
   1715f:	0f b6 40 16          	movzbl 0x16(%eax),%eax
   17163:	0f b6 c0             	movzbl %al,%eax
   17166:	a3 80 e4 02 00       	mov    %eax,0x2e480
		output_byte(FD_SPECIFY);					// 发送设置磁盘参数命令.
   1716b:	83 ec 0c             	sub    $0xc,%esp
   1716e:	6a 03                	push   $0x3
   17170:	e8 cf fb ff ff       	call   16d44 <output_byte>
   17175:	83 c4 10             	add    $0x10,%esp
		output_byte(cur_spec1);						/* hut etc */	// 发送参数.
   17178:	a1 80 e4 02 00       	mov    0x2e480,%eax
   1717d:	0f be c0             	movsbl %al,%eax
   17180:	83 ec 0c             	sub    $0xc,%esp
   17183:	50                   	push   %eax
   17184:	e8 bb fb ff ff       	call   16d44 <output_byte>
   17189:	83 c4 10             	add    $0x10,%esp
		output_byte(6);								/* Head load time =6ms, DMA */
   1718c:	83 ec 0c             	sub    $0xc,%esp
   1718f:	6a 06                	push   $0x6
   17191:	e8 ae fb ff ff       	call   16d44 <output_byte>
   17196:	83 c4 10             	add    $0x10,%esp
	}
	if (cur_rate != floppy->rate)					// 检测当前速率.
   17199:	a1 88 e4 02 00       	mov    0x2e488,%eax
   1719e:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   171a2:	0f b6 d0             	movzbl %al,%edx
   171a5:	a1 84 e4 02 00       	mov    0x2e484,%eax
   171aa:	39 c2                	cmp    %eax,%edx
   171ac:	74 20                	je     171ce <transfer+0x8c>
		outb_p(cur_rate = floppy->rate,FD_DCR);
   171ae:	a1 88 e4 02 00       	mov    0x2e488,%eax
   171b3:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   171b7:	0f b6 c0             	movzbl %al,%eax
   171ba:	a3 84 e4 02 00       	mov    %eax,0x2e484
   171bf:	a1 84 e4 02 00       	mov    0x2e484,%eax
   171c4:	ba f7 03 00 00       	mov    $0x3f7,%edx
   171c9:	ee                   	out    %al,(%dx)
   171ca:	eb 00                	jmp    171cc <transfer+0x8a>
   171cc:	eb 00                	jmp    171ce <transfer+0x8c>
	// 若上面任何一个output_byte()操作执行出错,则复位标志reset就会被置位.因此这里我们需要检测一下reset标志.若reset真的被置位了,就立刻
	// 去执行do_fd_requst()中的复位处理代码.
	if (reset) {
   171ce:	a1 64 11 03 00       	mov    0x31164,%eax
   171d3:	85 c0                	test   %eax,%eax
   171d5:	74 0a                	je     171e1 <transfer+0x9f>
		do_fd_request();
   171d7:	e8 03 03 00 00       	call   174df <do_fd_request>
		return;
   171dc:	e9 b6 00 00 00       	jmp    17297 <transfer+0x155>
	}
	// 如果此时寻道标志为零(即不需要寻道),则设置DMA并向软盘控制器发送相应操作命令和参数后返回.否则就执行寻道处理,于是首先置软盘中断处理
	// 调用函数为寻道中断函数.如果起始磁道号不等于零则发送磁头寻道命令和参数.所使用的参数即是第112-121行上设置的全局变量值.如果起始磁道
	// 号seek_track为0,则执行重新校正命令让磁头归零位.
	if (!seek) {
   171e1:	a1 68 11 03 00       	mov    0x31168,%eax
   171e6:	85 c0                	test   %eax,%eax
   171e8:	75 0a                	jne    171f4 <transfer+0xb2>
		setup_rw_floppy();							// 发送命令参数块.
   171ea:	e8 05 fe ff ff       	call   16ff4 <setup_rw_floppy>
		return;
   171ef:	e9 a3 00 00 00       	jmp    17297 <transfer+0x155>
	}
	do_floppy = seek_interrupt;						// 寻道中断调用的C函数.
   171f4:	c7 05 54 11 03 00 e1 	movl   $0x170e1,0x31154
   171fb:	70 01 00 
	if (seek_track) {								// 起始磁道号.
   171fe:	0f b6 05 77 11 03 00 	movzbl 0x31177,%eax
   17205:	84 c0                	test   %al,%al
   17207:	74 4c                	je     17255 <transfer+0x113>
		output_byte(FD_SEEK);						// 发送磁头寻道命令.
   17209:	83 ec 0c             	sub    $0xc,%esp
   1720c:	6a 0f                	push   $0xf
   1720e:	e8 31 fb ff ff       	call   16d44 <output_byte>
   17213:	83 c4 10             	add    $0x10,%esp
		output_byte(head<<2 | current_drive);		// 发送参数:磁头号+当前软驱号.
   17216:	0f b6 05 75 11 03 00 	movzbl 0x31175,%eax
   1721d:	0f b6 c0             	movzbl %al,%eax
   17220:	c1 e0 02             	shl    $0x2,%eax
   17223:	89 c2                	mov    %eax,%edx
   17225:	0f b6 05 73 11 03 00 	movzbl 0x31173,%eax
   1722c:	09 d0                	or     %edx,%eax
   1722e:	0f be c0             	movsbl %al,%eax
   17231:	83 ec 0c             	sub    $0xc,%esp
   17234:	50                   	push   %eax
   17235:	e8 0a fb ff ff       	call   16d44 <output_byte>
   1723a:	83 c4 10             	add    $0x10,%esp
		output_byte(seek_track);					// 发送参数:磁道号.
   1723d:	0f b6 05 77 11 03 00 	movzbl 0x31177,%eax
   17244:	0f be c0             	movsbl %al,%eax
   17247:	83 ec 0c             	sub    $0xc,%esp
   1724a:	50                   	push   %eax
   1724b:	e8 f4 fa ff ff       	call   16d44 <output_byte>
   17250:	83 c4 10             	add    $0x10,%esp
   17253:	eb 34                	jmp    17289 <transfer+0x147>
	} else {
		output_byte(FD_RECALIBRATE);				// 发送重新校正命令(磁头归零).
   17255:	83 ec 0c             	sub    $0xc,%esp
   17258:	6a 07                	push   $0x7
   1725a:	e8 e5 fa ff ff       	call   16d44 <output_byte>
   1725f:	83 c4 10             	add    $0x10,%esp
		output_byte(head<<2 | current_drive);		// 发送参数:磁头号+当前软驱号.
   17262:	0f b6 05 75 11 03 00 	movzbl 0x31175,%eax
   17269:	0f b6 c0             	movzbl %al,%eax
   1726c:	c1 e0 02             	shl    $0x2,%eax
   1726f:	89 c2                	mov    %eax,%edx
   17271:	0f b6 05 73 11 03 00 	movzbl 0x31173,%eax
   17278:	09 d0                	or     %edx,%eax
   1727a:	0f be c0             	movsbl %al,%eax
   1727d:	83 ec 0c             	sub    $0xc,%esp
   17280:	50                   	push   %eax
   17281:	e8 be fa ff ff       	call   16d44 <output_byte>
   17286:	83 c4 10             	add    $0x10,%esp
	}
	// 同样地,若上面任何一个output_byte()操作执行出错,则复位标志reset就会被置位.若reset真的被置位了,就立刻去执行do_fd_requet()中复位
	// 处理代码.
	if (reset)
   17289:	a1 64 11 03 00       	mov    0x31164,%eax
   1728e:	85 c0                	test   %eax,%eax
   17290:	74 05                	je     17297 <transfer+0x155>
		do_fd_request();
   17292:	e8 48 02 00 00       	call   174df <do_fd_request>
}
   17297:	83 c4 0c             	add    $0xc,%esp
   1729a:	c3                   	ret    

0001729b <recal_interrupt>:
 */
// 软驱重新校正中断调用函数.
// 首先发送检测中断状态命令(无参数),如果返回结果表明出错,则置复位标志.否则重新校正标志清零.然后再次执行软盘请求项处理函数
// 作相应操作.
static void recal_interrupt(void)
{
   1729b:	83 ec 0c             	sub    $0xc,%esp
	output_byte(FD_SENSEI);							// 发送检测中断状态命令.
   1729e:	83 ec 0c             	sub    $0xc,%esp
   172a1:	6a 08                	push   $0x8
   172a3:	e8 9c fa ff ff       	call   16d44 <output_byte>
   172a8:	83 c4 10             	add    $0x10,%esp
	if (result() != 2 || (ST0 & 0xE0) == 0x60)		// 如果返回结果字节数不等于2或命令异常结束,则置复位标志.
   172ab:	e8 12 fb ff ff       	call   16dc2 <result>
   172b0:	83 f8 02             	cmp    $0x2,%eax
   172b3:	75 14                	jne    172c9 <recal_interrupt+0x2e>
   172b5:	0f b6 05 6c 11 03 00 	movzbl 0x3116c,%eax
   172bc:	0f b6 c0             	movzbl %al,%eax
   172bf:	25 e0 00 00 00       	and    $0xe0,%eax
   172c4:	83 f8 60             	cmp    $0x60,%eax
   172c7:	75 0c                	jne    172d5 <recal_interrupt+0x3a>
		reset = 1;
   172c9:	c7 05 64 11 03 00 01 	movl   $0x1,0x31164
   172d0:	00 00 00 
   172d3:	eb 0a                	jmp    172df <recal_interrupt+0x44>
	else
		recalibrate = 0;							// 否则复位重新校正标志
   172d5:	c7 05 60 11 03 00 00 	movl   $0x0,0x31160
   172dc:	00 00 00 
	do_fd_request();								// 作相应处理.
   172df:	e8 fb 01 00 00       	call   174df <do_fd_request>
}
   172e4:	90                   	nop
   172e5:	83 c4 0c             	add    $0xc,%esp
   172e8:	c3                   	ret    

000172e9 <unexpected_floppy_interrupt>:

// 意外软盘中断请求引发的软盘中断处理程序中调用的函数.
// 首先发送检测中断状态命令(无参数),如果返回结果表明出错,则置复位标志,否则置重校正标志.
void unexpected_floppy_interrupt(void)
{
   172e9:	83 ec 0c             	sub    $0xc,%esp
	output_byte(FD_SENSEI);							// 发送检测中断状态命令.
   172ec:	83 ec 0c             	sub    $0xc,%esp
   172ef:	6a 08                	push   $0x8
   172f1:	e8 4e fa ff ff       	call   16d44 <output_byte>
   172f6:	83 c4 10             	add    $0x10,%esp
	if (result()!=2 || (ST0 & 0xE0) == 0x60)		// 如果返回结果字节数不等于2或命令异常结束,则置复位标志.
   172f9:	e8 c4 fa ff ff       	call   16dc2 <result>
   172fe:	83 f8 02             	cmp    $0x2,%eax
   17301:	75 14                	jne    17317 <unexpected_floppy_interrupt+0x2e>
   17303:	0f b6 05 6c 11 03 00 	movzbl 0x3116c,%eax
   1730a:	0f b6 c0             	movzbl %al,%eax
   1730d:	25 e0 00 00 00       	and    $0xe0,%eax
   17312:	83 f8 60             	cmp    $0x60,%eax
   17315:	75 0c                	jne    17323 <unexpected_floppy_interrupt+0x3a>
		reset = 1;
   17317:	c7 05 64 11 03 00 01 	movl   $0x1,0x31164
   1731e:	00 00 00 
   17321:	eb 0a                	jmp    1732d <unexpected_floppy_interrupt+0x44>
	else
		recalibrate = 1;							// 否则置重新校正标志.
   17323:	c7 05 60 11 03 00 01 	movl   $0x1,0x31160
   1732a:	00 00 00 
}
   1732d:	90                   	nop
   1732e:	83 c4 0c             	add    $0xc,%esp
   17331:	c3                   	ret    

00017332 <recalibrate_floppy>:

// 软盘重新校正处理函数.
// 向软盘控制器FDC发送重新校正命令和参数,并复位重新校正标志.当软盘控制器执行完重新校正命令就会再次引发的软盘中断调用
// recal_interrupt()函数.
static void recalibrate_floppy(void)
{
   17332:	83 ec 0c             	sub    $0xc,%esp
	recalibrate = 0;								// 复位重新校正标志.
   17335:	c7 05 60 11 03 00 00 	movl   $0x0,0x31160
   1733c:	00 00 00 
	current_track = 0;								// 当前磁道号归零.
   1733f:	c6 05 8c e4 02 00 00 	movb   $0x0,0x2e48c
	do_floppy = recal_interrupt;					// 指向重新校正中断调用的C函数.
   17346:	c7 05 54 11 03 00 9b 	movl   $0x1729b,0x31154
   1734d:	72 01 00 
	output_byte(FD_RECALIBRATE);					// 命令:重新校正.
   17350:	83 ec 0c             	sub    $0xc,%esp
   17353:	6a 07                	push   $0x7
   17355:	e8 ea f9 ff ff       	call   16d44 <output_byte>
   1735a:	83 c4 10             	add    $0x10,%esp
	output_byte(head<<2 | current_drive);			// 参数:磁头号 + 当前驱动器号.
   1735d:	0f b6 05 75 11 03 00 	movzbl 0x31175,%eax
   17364:	0f b6 c0             	movzbl %al,%eax
   17367:	c1 e0 02             	shl    $0x2,%eax
   1736a:	89 c2                	mov    %eax,%edx
   1736c:	0f b6 05 73 11 03 00 	movzbl 0x31173,%eax
   17373:	09 d0                	or     %edx,%eax
   17375:	0f be c0             	movsbl %al,%eax
   17378:	83 ec 0c             	sub    $0xc,%esp
   1737b:	50                   	push   %eax
   1737c:	e8 c3 f9 ff ff       	call   16d44 <output_byte>
   17381:	83 c4 10             	add    $0x10,%esp
	// 若上任何一个output_byte()操作执行出错,则复位标志reset就会被置位.因此这里我们需要检测一下reset标志.若reset真的被
	// 置位了,就立刻去执行do_fd_requeset()中的复位处理代码.
	if (reset)
   17384:	a1 64 11 03 00       	mov    0x31164,%eax
   17389:	85 c0                	test   %eax,%eax
   1738b:	74 05                	je     17392 <recalibrate_floppy+0x60>
		do_fd_request();
   1738d:	e8 4d 01 00 00       	call   174df <do_fd_request>
}
   17392:	90                   	nop
   17393:	83 c4 0c             	add    $0xc,%esp
   17396:	c3                   	ret    

00017397 <reset_interrupt>:
// 软盘控制器FDC复位中断调用函数.
// 该函数会在向控制器发送了复位操作命令后引发的软盘中断处理程序中被调用.
// 首先发送检测中断状态命令(无参数),然后读出返回的结果字节.接着发送设定软驱参数命令和相关参数,最后再次调用请求项处理函数
// do_fd_request()去执行重新校正工作.但由于执行output_byte()操作函数出错时复位标志又会被置位,因此也可能再次去执行复位处理.
static void reset_interrupt(void)
{
   17397:	83 ec 0c             	sub    $0xc,%esp
	output_byte(FD_SENSEI);							// 发送检测中断状态命令.
   1739a:	83 ec 0c             	sub    $0xc,%esp
   1739d:	6a 08                	push   $0x8
   1739f:	e8 a0 f9 ff ff       	call   16d44 <output_byte>
   173a4:	83 c4 10             	add    $0x10,%esp
	(void) result();								// 读取命令执行结果字节.
   173a7:	e8 16 fa ff ff       	call   16dc2 <result>
	output_byte(FD_SPECIFY);						// 发送设定软驱参数命令.
   173ac:	83 ec 0c             	sub    $0xc,%esp
   173af:	6a 03                	push   $0x3
   173b1:	e8 8e f9 ff ff       	call   16d44 <output_byte>
   173b6:	83 c4 10             	add    $0x10,%esp
	output_byte(cur_spec1);							/* hut etc */	// 发送参数
   173b9:	a1 80 e4 02 00       	mov    0x2e480,%eax
   173be:	0f be c0             	movsbl %al,%eax
   173c1:	83 ec 0c             	sub    $0xc,%esp
   173c4:	50                   	push   %eax
   173c5:	e8 7a f9 ff ff       	call   16d44 <output_byte>
   173ca:	83 c4 10             	add    $0x10,%esp
	output_byte(6);									/* Head load time =6ms, DMA */
   173cd:	83 ec 0c             	sub    $0xc,%esp
   173d0:	6a 06                	push   $0x6
   173d2:	e8 6d f9 ff ff       	call   16d44 <output_byte>
   173d7:	83 c4 10             	add    $0x10,%esp
	do_fd_request();                				// 调用执行软盘请求.
   173da:	e8 00 01 00 00       	call   174df <do_fd_request>
}
   173df:	90                   	nop
   173e0:	83 c4 0c             	add    $0xc,%esp
   173e3:	c3                   	ret    

000173e4 <reset_floppy>:
// 复位软盘控制器.
// 该函数首先设置参数和标志,把复位标志清0,然后把软驱变量cur_spec1和cur_rate置为无效.因为复位操作后,这两个参数就需要重新设置.接着
// 需要重新校正标志,并设置FDC执行复位操作后引发的软盘中断中调用的C函数reset_interrupt().最后把DOR寄存器位2置0一会儿以对软驱执行
// 复位操作.当前数字输出寄存器DOR的位2是启动/复位软驱位.
static void reset_floppy(void)
{
   173e4:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	reset = 0;										// 复位标志置0.
   173e7:	c7 05 64 11 03 00 00 	movl   $0x0,0x31164
   173ee:	00 00 00 
	cur_spec1 = -1;									// 使无效.
   173f1:	c7 05 80 e4 02 00 ff 	movl   $0xffffffff,0x2e480
   173f8:	ff ff ff 
	cur_rate = -1;
   173fb:	c7 05 84 e4 02 00 ff 	movl   $0xffffffff,0x2e484
   17402:	ff ff ff 
	recalibrate = 1;								// 重新校正标志置位.
   17405:	c7 05 60 11 03 00 01 	movl   $0x1,0x31160
   1740c:	00 00 00 
	printk("Reset-floppy called\n\r");				// 显示执行软盘复位操作信息.
   1740f:	83 ec 0c             	sub    $0xc,%esp
   17412:	68 83 40 02 00       	push   $0x24083
   17417:	e8 2b 18 ff ff       	call   8c47 <printk>
   1741c:	83 c4 10             	add    $0x10,%esp
	cli();											// 关中断.
   1741f:	fa                   	cli    
	do_floppy = reset_interrupt;					// 设置在中断处理程序中调用的函数.
   17420:	c7 05 54 11 03 00 97 	movl   $0x17397,0x31154
   17427:	73 01 00 
	outb_p(current_DOR & ~0x04,FD_DOR);				// 对软盘控制器FDC执行复位操作.
   1742a:	0f b6 05 c8 e2 02 00 	movzbl 0x2e2c8,%eax
   17431:	0f b6 c0             	movzbl %al,%eax
   17434:	83 e0 fb             	and    $0xfffffffb,%eax
   17437:	ba f2 03 00 00       	mov    $0x3f2,%edx
   1743c:	ee                   	out    %al,(%dx)
   1743d:	eb 00                	jmp    1743f <reset_floppy+0x5b>
   1743f:	eb 00                	jmp    17441 <reset_floppy+0x5d>
	for (i = 0 ; i < 100 ; i++)						// 空操作,延迟.
   17441:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   17448:	00 
   17449:	eb 06                	jmp    17451 <reset_floppy+0x6d>
		__asm__("nop");
   1744b:	90                   	nop
	recalibrate = 1;								// 重新校正标志置位.
	printk("Reset-floppy called\n\r");				// 显示执行软盘复位操作信息.
	cli();											// 关中断.
	do_floppy = reset_interrupt;					// 设置在中断处理程序中调用的函数.
	outb_p(current_DOR & ~0x04,FD_DOR);				// 对软盘控制器FDC执行复位操作.
	for (i = 0 ; i < 100 ; i++)						// 空操作,延迟.
   1744c:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   17451:	83 7c 24 0c 63       	cmpl   $0x63,0xc(%esp)
   17456:	7e f3                	jle    1744b <reset_floppy+0x67>
		__asm__("nop");
	outb(current_DOR,FD_DOR);						// 再启动软盘控制器.
   17458:	0f b6 05 c8 e2 02 00 	movzbl 0x2e2c8,%eax
   1745f:	ba f2 03 00 00       	mov    $0x3f2,%edx
   17464:	ee                   	out    %al,(%dx)
	sti();											// 开中断.
   17465:	fb                   	sti    
}
   17466:	90                   	nop
   17467:	83 c4 1c             	add    $0x1c,%esp
   1746a:	c3                   	ret    

0001746b <floppy_on_interrupt>:

// 软驱启动定时中断调用函数.
// 在执行一个请求项要求的操作之前,为了等待指定软驱马达旋转起来到达正常的工作转速,do_fd_request()函数为准备好的当前请求项添加了一个延时
// 定时器.本函数即是该定时器到期时调用的函数.它首先检查数字输出寄存器(DOR),使其选择当前指定的驱动.然后调用执行软盘读写传输函数transfer().
static void floppy_on_interrupt(void)
{
   1746b:	83 ec 0c             	sub    $0xc,%esp
	/* We cannot do a floppy-select, as that might sleep. We just force it */
	/* 我们不能任意设置选择的软驱,因为这可能会引起进程睡眠.我们只能迫使它自己选择 */
	// 如果当前驱动器号与数字输出寄存器DOR中的不同,则需要重新设置DOR为当前驱动器.在向数字输出寄存器输出当前DOR以后,使用定时器延迟2个滴答
	// 时间,以让命令得到执行.然后调用软盘读写传输函数transfer().若当前驱动器与DOR中的相符,那么就可以直接调用软盘读写传输函数.
	selected = 1;									// 置已选定当前驱动器标志.
   1746e:	c6 05 58 11 03 00 01 	movb   $0x1,0x31158
	if (current_drive != (current_DOR & 3)) {
   17475:	0f b6 05 73 11 03 00 	movzbl 0x31173,%eax
   1747c:	0f b6 c0             	movzbl %al,%eax
   1747f:	0f b6 15 c8 e2 02 00 	movzbl 0x2e2c8,%edx
   17486:	0f b6 d2             	movzbl %dl,%edx
   17489:	83 e2 03             	and    $0x3,%edx
   1748c:	39 d0                	cmp    %edx,%eax
   1748e:	74 45                	je     174d5 <floppy_on_interrupt+0x6a>
		current_DOR &= 0xFC;
   17490:	0f b6 05 c8 e2 02 00 	movzbl 0x2e2c8,%eax
   17497:	83 e0 fc             	and    $0xfffffffc,%eax
   1749a:	a2 c8 e2 02 00       	mov    %al,0x2e2c8
		current_DOR |= current_drive;
   1749f:	0f b6 15 c8 e2 02 00 	movzbl 0x2e2c8,%edx
   174a6:	0f b6 05 73 11 03 00 	movzbl 0x31173,%eax
   174ad:	09 d0                	or     %edx,%eax
   174af:	a2 c8 e2 02 00       	mov    %al,0x2e2c8
		outb(current_DOR,FD_DOR);					// 向数字输出寄存器输出当前DOR.
   174b4:	0f b6 05 c8 e2 02 00 	movzbl 0x2e2c8,%eax
   174bb:	ba f2 03 00 00       	mov    $0x3f2,%edx
   174c0:	ee                   	out    %al,(%dx)
		add_timer(2,&transfer);						// 添加定时器并执行传输函数.
   174c1:	83 ec 08             	sub    $0x8,%esp
   174c4:	68 42 71 01 00       	push   $0x17142
   174c9:	6a 02                	push   $0x2
   174cb:	e8 e2 fe fe ff       	call   73b2 <add_timer>
   174d0:	83 c4 10             	add    $0x10,%esp
	} else
		transfer();									// 执行软盘读写传输函数.
}
   174d3:	eb 05                	jmp    174da <floppy_on_interrupt+0x6f>
		current_DOR &= 0xFC;
		current_DOR |= current_drive;
		outb(current_DOR,FD_DOR);					// 向数字输出寄存器输出当前DOR.
		add_timer(2,&transfer);						// 添加定时器并执行传输函数.
	} else
		transfer();									// 执行软盘读写传输函数.
   174d5:	e8 68 fc ff ff       	call   17142 <transfer>
}
   174da:	90                   	nop
   174db:	83 c4 0c             	add    $0xc,%esp
   174de:	c3                   	ret    

000174df <do_fd_request>:

// 软盘读写请求项处理函数
// 该函数是软盘驱动程序中最主要的函数.主要作用是:1处理有复位标志或重新校正标志置位情况;2利用请求项中的设备号计算取得请求项指定软驱的
// 参数块;3利用内核定时器启动软盘读/写操作.
void do_fd_request(void)
{
   174df:	83 ec 1c             	sub    $0x1c,%esp
	unsigned int block;

	// 首先检查是否有复位标志或重校正标志置位,若有则本函数仅执行相关标志的处理功能后就返回.如果复位标志已置位,则执行软盘复位操作并返回.
	// 如果重新校正标志已置位,则执行软盘重新校正操作并返回.
	seek = 0;										// 清寻道标志.
   174e2:	c7 05 68 11 03 00 00 	movl   $0x0,0x31168
   174e9:	00 00 00 
	if (reset) {									// 复位标志已置位.
   174ec:	a1 64 11 03 00       	mov    0x31164,%eax
   174f1:	85 c0                	test   %eax,%eax
   174f3:	74 0a                	je     174ff <do_fd_request+0x20>
		reset_floppy();
   174f5:	e8 ea fe ff ff       	call   173e4 <reset_floppy>
		return;
   174fa:	e9 06 02 00 00       	jmp    17705 <do_fd_request+0x226>
	}
	if (recalibrate) {								// 重新校正标志已置位.
   174ff:	a1 60 11 03 00       	mov    0x31160,%eax
   17504:	85 c0                	test   %eax,%eax
   17506:	74 0a                	je     17512 <do_fd_request+0x33>
		recalibrate_floppy();
   17508:	e8 25 fe ff ff       	call   17332 <recalibrate_floppy>
		return;
   1750d:	e9 f3 01 00 00       	jmp    17705 <do_fd_request+0x226>
	}
	// 本函数的真正功能从这里开始.首先利用blk.h文件中的INIT_REQUEST宏来检测请求项的合法性,如果已没有请求项则退出.然后利用请求项中的设备
	// 号取得请求项指定软驱的参数块.这个参数块将在下面用于设置软盘操作使用的全局变量参数块.请求项设备号中的软盘类型(MINOR(CURRENT->dev)>>2)
	// 被用作磁盘类型数组floppy_type[]的索引值来取得指定软驱的参数块.
	INIT_REQUEST;
   17512:	a1 14 11 03 00       	mov    0x31114,%eax
   17517:	85 c0                	test   %eax,%eax
   17519:	75 0f                	jne    1752a <do_fd_request+0x4b>
   1751b:	c7 05 54 11 03 00 00 	movl   $0x0,0x31154
   17522:	00 00 00 
   17525:	e9 db 01 00 00       	jmp    17705 <do_fd_request+0x226>
   1752a:	a1 14 11 03 00       	mov    0x31114,%eax
   1752f:	8b 00                	mov    (%eax),%eax
   17531:	c1 e8 08             	shr    $0x8,%eax
   17534:	83 f8 02             	cmp    $0x2,%eax
   17537:	74 10                	je     17549 <do_fd_request+0x6a>
   17539:	83 ec 0c             	sub    $0xc,%esp
   1753c:	68 9c 40 02 00       	push   $0x2409c
   17541:	e8 c2 16 ff ff       	call   8c08 <panic>
   17546:	83 c4 10             	add    $0x10,%esp
   17549:	a1 14 11 03 00       	mov    0x31114,%eax
   1754e:	8b 40 1c             	mov    0x1c(%eax),%eax
   17551:	85 c0                	test   %eax,%eax
   17553:	74 20                	je     17575 <do_fd_request+0x96>
   17555:	a1 14 11 03 00       	mov    0x31114,%eax
   1755a:	8b 40 1c             	mov    0x1c(%eax),%eax
   1755d:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   17561:	84 c0                	test   %al,%al
   17563:	75 10                	jne    17575 <do_fd_request+0x96>
   17565:	83 ec 0c             	sub    $0xc,%esp
   17568:	68 bb 40 02 00       	push   $0x240bb
   1756d:	e8 96 16 ff ff       	call   8c08 <panic>
   17572:	83 c4 10             	add    $0x10,%esp
	floppy = (MINOR(CURRENT->dev) >> 2) + floppy_type;
   17575:	a1 14 11 03 00       	mov    0x31114,%eax
   1757a:	8b 00                	mov    (%eax),%eax
   1757c:	0f b6 c0             	movzbl %al,%eax
   1757f:	c1 f8 02             	sar    $0x2,%eax
   17582:	89 c2                	mov    %eax,%edx
   17584:	89 d0                	mov    %edx,%eax
   17586:	01 c0                	add    %eax,%eax
   17588:	01 d0                	add    %edx,%eax
   1758a:	c1 e0 03             	shl    $0x3,%eax
   1758d:	05 c0 e3 02 00       	add    $0x2e3c0,%eax
   17592:	a3 88 e4 02 00       	mov    %eax,0x2e488
	// 下面开始设置全局变量值.如果当前驱动器号current_drive不是请求项中指定的驱动器号,则置标志seek,表示在执行读/写操作之前需要先让驱动
	// 器执行寻道处理.然后把当前驱动器号设置为请求项中指定的驱动器号.
	if (current_drive != CURRENT_DEV)				// CURRENT_DEV是请求项中指定的软驱号.
   17597:	0f b6 05 73 11 03 00 	movzbl 0x31173,%eax
   1759e:	0f b6 d0             	movzbl %al,%edx
   175a1:	a1 14 11 03 00       	mov    0x31114,%eax
   175a6:	8b 00                	mov    (%eax),%eax
   175a8:	83 e0 03             	and    $0x3,%eax
   175ab:	39 c2                	cmp    %eax,%edx
   175ad:	74 0a                	je     175b9 <do_fd_request+0xda>
		seek = 1;
   175af:	c7 05 68 11 03 00 01 	movl   $0x1,0x31168
   175b6:	00 00 00 
	current_drive = CURRENT_DEV;
   175b9:	a1 14 11 03 00       	mov    0x31114,%eax
   175be:	8b 00                	mov    (%eax),%eax
   175c0:	83 e0 03             	and    $0x3,%eax
   175c3:	a2 73 11 03 00       	mov    %al,0x31173
	// 设置读写起始扇区block.因为每次读写是以块为单位(1块为2个扇区),所以起始扇区需要起码比磁盘总扇区数小2个扇区.否则说明这个请求 参数无效,
	// 结束该次软盘请求项去执行下一个请求项.
	block = CURRENT->sector;						// 取当前软盘请求项中起始扇区号.
   175c8:	a1 14 11 03 00       	mov    0x31114,%eax
   175cd:	8b 40 0c             	mov    0xc(%eax),%eax
   175d0:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (block + 2 > floppy->size) {					// 如果block + 2大于磁盘扇区总数,则结束本人软盘请求项.
   175d4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   175d8:	8d 50 02             	lea    0x2(%eax),%edx
   175db:	a1 88 e4 02 00       	mov    0x2e488,%eax
   175e0:	8b 00                	mov    (%eax),%eax
   175e2:	39 c2                	cmp    %eax,%edx
   175e4:	76 12                	jbe    175f8 <do_fd_request+0x119>
		end_request(0);
   175e6:	83 ec 0c             	sub    $0xc,%esp
   175e9:	6a 00                	push   $0x0
   175eb:	e8 e7 f4 ff ff       	call   16ad7 <end_request>
   175f0:	83 c4 10             	add    $0x10,%esp
		goto repeat;
   175f3:	e9 1a ff ff ff       	jmp    17512 <do_fd_request+0x33>
	}
	// 再求对应在磁道上的扇区号,磁头号,磁道号,搜寻磁道号(对于软驱读不同格式的盘).
	sector = block % floppy->sect;					// 起始扇区对每磁道扇区数取模,得磁道上扇区号.
   175f8:	a1 88 e4 02 00       	mov    0x2e488,%eax
   175fd:	8b 48 04             	mov    0x4(%eax),%ecx
   17600:	8b 44 24 0c          	mov    0xc(%esp),%eax
   17604:	ba 00 00 00 00       	mov    $0x0,%edx
   17609:	f7 f1                	div    %ecx
   1760b:	89 d0                	mov    %edx,%eax
   1760d:	a2 74 11 03 00       	mov    %al,0x31174
	block /= floppy->sect;							// 起始扇区对每磁道扇区数取整,得起始磁道数.
   17612:	a1 88 e4 02 00       	mov    0x2e488,%eax
   17617:	8b 48 04             	mov    0x4(%eax),%ecx
   1761a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1761e:	ba 00 00 00 00       	mov    $0x0,%edx
   17623:	f7 f1                	div    %ecx
   17625:	89 44 24 0c          	mov    %eax,0xc(%esp)
	head = block % floppy->head;					// 起始磁道数对磁头数取模,得操作的磁头号.
   17629:	a1 88 e4 02 00       	mov    0x2e488,%eax
   1762e:	8b 48 08             	mov    0x8(%eax),%ecx
   17631:	8b 44 24 0c          	mov    0xc(%esp),%eax
   17635:	ba 00 00 00 00       	mov    $0x0,%edx
   1763a:	f7 f1                	div    %ecx
   1763c:	89 d0                	mov    %edx,%eax
   1763e:	a2 75 11 03 00       	mov    %al,0x31175
	track = block / floppy->head;					// 起始磁道数对磁头数取整,得操作的磁道号.
   17643:	a1 88 e4 02 00       	mov    0x2e488,%eax
   17648:	8b 48 08             	mov    0x8(%eax),%ecx
   1764b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1764f:	ba 00 00 00 00       	mov    $0x0,%edx
   17654:	f7 f1                	div    %ecx
   17656:	a2 76 11 03 00       	mov    %al,0x31176
	seek_track = track << floppy->stretch;			// 相应于软驱中盘类型进行调整,得寻道号.
   1765b:	0f b6 05 76 11 03 00 	movzbl 0x31176,%eax
   17662:	0f b6 d0             	movzbl %al,%edx
   17665:	a1 88 e4 02 00       	mov    0x2e488,%eax
   1766a:	8b 40 10             	mov    0x10(%eax),%eax
   1766d:	89 c1                	mov    %eax,%ecx
   1766f:	d3 e2                	shl    %cl,%edx
   17671:	89 d0                	mov    %edx,%eax
   17673:	a2 77 11 03 00       	mov    %al,0x31177
	// 再看看是否还需要首先执行寻道操作.如果寻道号与当前磁头所在磁道号不同,则需要进行寻道操作,于是置需要寻道标志seek.最后我们设置执行的软盘
	// 命令command.
	if (seek_track != current_track)
   17678:	0f b6 15 77 11 03 00 	movzbl 0x31177,%edx
   1767f:	0f b6 05 8c e4 02 00 	movzbl 0x2e48c,%eax
   17686:	38 c2                	cmp    %al,%dl
   17688:	74 0a                	je     17694 <do_fd_request+0x1b5>
		seek = 1;
   1768a:	c7 05 68 11 03 00 01 	movl   $0x1,0x31168
   17691:	00 00 00 
	sector++;										// 磁盘上实际扇区计数是从1算起.
   17694:	0f b6 05 74 11 03 00 	movzbl 0x31174,%eax
   1769b:	83 c0 01             	add    $0x1,%eax
   1769e:	a2 74 11 03 00       	mov    %al,0x31174
	if (CURRENT->cmd == READ)						// 如果请求项是读操作,则置读命令码.
   176a3:	a1 14 11 03 00       	mov    0x31114,%eax
   176a8:	8b 40 04             	mov    0x4(%eax),%eax
   176ab:	85 c0                	test   %eax,%eax
   176ad:	75 09                	jne    176b8 <do_fd_request+0x1d9>
		command = FD_READ;
   176af:	c6 05 78 11 03 00 e6 	movb   $0xe6,0x31178
   176b6:	eb 26                	jmp    176de <do_fd_request+0x1ff>
	else if (CURRENT->cmd == WRITE)					// 如果请求项是写操作,则置写命令码.
   176b8:	a1 14 11 03 00       	mov    0x31114,%eax
   176bd:	8b 40 04             	mov    0x4(%eax),%eax
   176c0:	83 f8 01             	cmp    $0x1,%eax
   176c3:	75 09                	jne    176ce <do_fd_request+0x1ef>
		command = FD_WRITE;
   176c5:	c6 05 78 11 03 00 c5 	movb   $0xc5,0x31178
   176cc:	eb 10                	jmp    176de <do_fd_request+0x1ff>
	else
		panic("do_fd_request: unknown command");
   176ce:	83 ec 0c             	sub    $0xc,%esp
   176d1:	68 d4 40 02 00       	push   $0x240d4
   176d6:	e8 2d 15 ff ff       	call   8c08 <panic>
   176db:	83 c4 10             	add    $0x10,%esp
	// 在上面设置好所有全局变量值之后,我们可以开始执行请求项操作了.该操作利用定时器来启动.因为为了能对软驱进行读写操作,需要首先启动驱动器马达
	// 并达到正常运转速度.而这需要一定的时间.因此这里利用ticks_to_floppy_on()来计算启动延时时间,然后使用该延时设定一个定时器.当时间到时就调用
	// 函数floppy_on_interrupt().
	add_timer(ticks_to_floppy_on(current_drive), &floppy_on_interrupt);
   176de:	0f b6 05 73 11 03 00 	movzbl 0x31173,%eax
   176e5:	0f b6 c0             	movzbl %al,%eax
   176e8:	83 ec 0c             	sub    $0xc,%esp
   176eb:	50                   	push   %eax
   176ec:	e8 bd fa fe ff       	call   71ae <ticks_to_floppy_on>
   176f1:	83 c4 10             	add    $0x10,%esp
   176f4:	83 ec 08             	sub    $0x8,%esp
   176f7:	68 6b 74 01 00       	push   $0x1746b
   176fc:	50                   	push   %eax
   176fd:	e8 b0 fc fe ff       	call   73b2 <add_timer>
   17702:	83 c4 10             	add    $0x10,%esp
}
   17705:	83 c4 1c             	add    $0x1c,%esp
   17708:	c3                   	ret    

00017709 <floppy_init>:

// 软盘系统初始化.
// 设置软盘块设备请求项的处理函数do_fd_request(),并设置软盘中断门(int 0x26,对应硬件中断请求信号IRQ6).然后取消对该中断信号的屏蔽,以
// 允许软盘控制器FDC发送中断请求信号.中断描述符表IDT中陷阱门描述符设置宏set_trap_gate()定义在头文件include/asm/system.h中.
void floppy_init(void)
{
   17709:	53                   	push   %ebx
   1770a:	83 ec 10             	sub    $0x10,%esp
	// 设置软盘中断门描述符。floppy_interrup(kernel/sys_call.s)是其中断处理过程。
	blk_size[MAJOR_NR] = floppy_sizes;
   1770d:	c7 05 40 11 03 00 a0 	movl   $0x2e4a0,0x31140
   17714:	e4 02 00 
	blk_dev[MAJOR_NR].request_fn = DEVICE_REQUEST;  						// = do_fd_request()。
   17717:	c7 05 10 11 03 00 df 	movl   $0x174df,0x31110
   1771e:	74 01 00 
	set_trap_gate(0x26, &floppy_interrupt);          						// 设置陷阱门描述符。
   17721:	b9 e8 55 00 00       	mov    $0x55e8,%ecx
   17726:	bb ec 55 00 00       	mov    $0x55ec,%ebx
   1772b:	ba c6 7a 00 00       	mov    $0x7ac6,%edx
   17730:	b8 00 00 08 00       	mov    $0x80000,%eax
   17735:	66 89 d0             	mov    %dx,%ax
   17738:	66 ba 00 8f          	mov    $0x8f00,%dx
   1773c:	89 01                	mov    %eax,(%ecx)
   1773e:	89 13                	mov    %edx,(%ebx)
	outb(inb_p(0x21) & ~0x40, 0x21);                   						// 复位软盘中断请求屏蔽位。
   17740:	b8 21 00 00 00       	mov    $0x21,%eax
   17745:	89 c2                	mov    %eax,%edx
   17747:	ec                   	in     (%dx),%al
   17748:	eb 00                	jmp    1774a <floppy_init+0x41>
   1774a:	eb 00                	jmp    1774c <floppy_init+0x43>
   1774c:	88 44 24 0f          	mov    %al,0xf(%esp)
   17750:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   17755:	0f b6 c0             	movzbl %al,%eax
   17758:	83 e0 bf             	and    $0xffffffbf,%eax
   1775b:	ba 21 00 00 00       	mov    $0x21,%edx
   17760:	ee                   	out    %al,(%dx)
}
   17761:	90                   	nop
   17762:	83 c4 10             	add    $0x10,%esp
   17765:	5b                   	pop    %ebx
   17766:	c3                   	ret    

00017767 <unlock_buffer>:
static void (DEVICE_REQUEST)(void);

// 解锁指定的缓冲块.
// 如果指定缓冲块bh并没有被上锁,则显示警告信息.否则将该缓冲块解锁,并唤醒等待该缓冲块的进程.此为内嵌函数.参数是缓冲块头指针.
static inline void unlock_buffer(struct buffer_head * bh)
{
   17767:	83 ec 0c             	sub    $0xc,%esp
	if (!bh->b_lock)
   1776a:	8b 44 24 10          	mov    0x10(%esp),%eax
   1776e:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   17772:	84 c0                	test   %al,%al
   17774:	75 10                	jne    17786 <unlock_buffer+0x1f>
		printk(DEVICE_NAME ": free buffer being unlocked\n");
   17776:	83 ec 0c             	sub    $0xc,%esp
   17779:	68 f4 40 02 00       	push   $0x240f4
   1777e:	e8 c4 14 ff ff       	call   8c47 <printk>
   17783:	83 c4 10             	add    $0x10,%esp
	bh->b_lock = 0;
   17786:	8b 44 24 10          	mov    0x10(%esp),%eax
   1778a:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
	wake_up(&bh->b_wait);
   1778e:	8b 44 24 10          	mov    0x10(%esp),%eax
   17792:	83 c0 10             	add    $0x10,%eax
   17795:	83 ec 0c             	sub    $0xc,%esp
   17798:	50                   	push   %eax
   17799:	e8 b1 f9 fe ff       	call   714f <wake_up>
   1779e:	83 c4 10             	add    $0x10,%esp
}
   177a1:	90                   	nop
   177a2:	83 c4 0c             	add    $0xc,%esp
   177a5:	c3                   	ret    

000177a6 <end_request>:
// 参数uptodate是更新标志.
// 首先关闭指定块设备,然后检查此次读写缓冲区是否有效.如果有效则根据参数值设置缓冲区数据更新标志,并解锁该缓冲区.如果更新标志参数值是0,
// 表示此次请求项的操作失败,因此显示相关块设备IO错误信息.最后,唤醒等待该请求项的进程以及等待空闲请求项出现的进程,释放并从请求链表
// 中删除本请求项,并把当前请求项指针指向下一请求项.
static inline void end_request(int uptodate)
{
   177a6:	83 ec 0c             	sub    $0xc,%esp
	DEVICE_OFF(CURRENT->dev);							// 关闭设备
	if (CURRENT->bh) {									// CURRENT为当前请求结构项指针
   177a9:	a1 1c 11 03 00       	mov    0x3111c,%eax
   177ae:	8b 40 1c             	mov    0x1c(%eax),%eax
   177b1:	85 c0                	test   %eax,%eax
   177b3:	74 23                	je     177d8 <end_request+0x32>
		CURRENT->bh->b_uptodate = uptodate;				// 置更新标志.
   177b5:	a1 1c 11 03 00       	mov    0x3111c,%eax
   177ba:	8b 40 1c             	mov    0x1c(%eax),%eax
   177bd:	8b 54 24 10          	mov    0x10(%esp),%edx
   177c1:	88 50 0a             	mov    %dl,0xa(%eax)
		unlock_buffer(CURRENT->bh);						// 解锁缓冲区.
   177c4:	a1 1c 11 03 00       	mov    0x3111c,%eax
   177c9:	8b 40 1c             	mov    0x1c(%eax),%eax
   177cc:	83 ec 0c             	sub    $0xc,%esp
   177cf:	50                   	push   %eax
   177d0:	e8 92 ff ff ff       	call   17767 <unlock_buffer>
   177d5:	83 c4 10             	add    $0x10,%esp
	}
	if (!uptodate) {									// 若更新标志为0则显示出错信息.
   177d8:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   177dd:	75 34                	jne    17813 <end_request+0x6d>
		printk(DEVICE_NAME " I/O error\n\r");
   177df:	83 ec 0c             	sub    $0xc,%esp
   177e2:	68 1a 41 02 00       	push   $0x2411a
   177e7:	e8 5b 14 ff ff       	call   8c47 <printk>
   177ec:	83 c4 10             	add    $0x10,%esp
		printk("dev %04x, block %d\n\r",CURRENT->dev,
			CURRENT->bh->b_blocknr);
   177ef:	a1 1c 11 03 00       	mov    0x3111c,%eax
   177f4:	8b 40 1c             	mov    0x1c(%eax),%eax
		CURRENT->bh->b_uptodate = uptodate;				// 置更新标志.
		unlock_buffer(CURRENT->bh);						// 解锁缓冲区.
	}
	if (!uptodate) {									// 若更新标志为0则显示出错信息.
		printk(DEVICE_NAME " I/O error\n\r");
		printk("dev %04x, block %d\n\r",CURRENT->dev,
   177f7:	8b 50 04             	mov    0x4(%eax),%edx
   177fa:	a1 1c 11 03 00       	mov    0x3111c,%eax
   177ff:	8b 00                	mov    (%eax),%eax
   17801:	83 ec 04             	sub    $0x4,%esp
   17804:	52                   	push   %edx
   17805:	50                   	push   %eax
   17806:	68 2f 41 02 00       	push   $0x2412f
   1780b:	e8 37 14 ff ff       	call   8c47 <printk>
   17810:	83 c4 10             	add    $0x10,%esp
			CURRENT->bh->b_blocknr);
	}
	wake_up(&CURRENT->waiting);							// 唤醒等待该请求项的进程.
   17813:	a1 1c 11 03 00       	mov    0x3111c,%eax
   17818:	83 c0 18             	add    $0x18,%eax
   1781b:	83 ec 0c             	sub    $0xc,%esp
   1781e:	50                   	push   %eax
   1781f:	e8 2b f9 fe ff       	call   714f <wake_up>
   17824:	83 c4 10             	add    $0x10,%esp
	wake_up(&wait_for_request);							// 唤醒等待空闲请求项的进程.
   17827:	83 ec 0c             	sub    $0xc,%esp
   1782a:	68 e0 10 03 00       	push   $0x310e0
   1782f:	e8 1b f9 fe ff       	call   714f <wake_up>
   17834:	83 c4 10             	add    $0x10,%esp
	CURRENT->dev = -1;									// 释放该请求项.
   17837:	a1 1c 11 03 00       	mov    0x3111c,%eax
   1783c:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	CURRENT = CURRENT->next;							// 指向下一请求项.
   17842:	a1 1c 11 03 00       	mov    0x3111c,%eax
   17847:	8b 40 20             	mov    0x20(%eax),%eax
   1784a:	a3 1c 11 03 00       	mov    %eax,0x3111c
}
   1784f:	90                   	nop
   17850:	83 c4 0c             	add    $0xc,%esp
   17853:	c3                   	ret    

00017854 <sys_setup>:
// 系统设备函数.
// 函数参数BIOS是由初始化程序init/main.c中init子程序设置为指向硬盘参数表结构的指针.
// 该硬盘参数表结构包含2个硬盘参数表的(共32字节),是从内存0x90080处复制而来.0x90080处的硬盘参数表是由setup.s程序利用ROM BIOS
// 功能取得.本函数主要功能是读取CMOS和硬盘参数表信息,用于设置硬盘分区结构hd,并尝试加载RAM虚拟盘和根文件系统.
int sys_setup(void * BIOS)
{
   17854:	56                   	push   %esi
   17855:	53                   	push   %ebx
   17856:	83 ec 24             	sub    $0x24,%esp
	struct buffer_head * bh;

	// 首先设置callable标志,使得本函数只能被调用1次.然后设置硬盘信息数据组hd_info[].如果在include/linux/config.h文件已定义了符号
	// 常数HD_TYPE,那么hd_info[]数组已经在前面第49行上设置好了.否则就需要读取boot/setup.s程序存放在内存0x90080处开始的硬盘参数表.
	// setup.s程序在内存此处连续存放着一到两个硬盘参数表.
	if (!callable)
   17859:	a1 20 e5 02 00       	mov    0x2e520,%eax
   1785e:	85 c0                	test   %eax,%eax
   17860:	75 0a                	jne    1786c <sys_setup+0x18>
		return -1;
   17862:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17867:	e9 a4 04 00 00       	jmp    17d10 <sys_setup+0x4bc>
	callable = 0;
   1786c:	c7 05 20 e5 02 00 00 	movl   $0x0,0x2e520
   17873:	00 00 00 
#ifndef HD_TYPE																	// 如果没有定义HD_TYPE,则读取.
	for (drive = 0 ; drive < 2 ; drive++) {
   17876:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   1787d:	00 
   1787e:	e9 cd 00 00 00       	jmp    17950 <sys_setup+0xfc>
		hd_info[drive].cyl = *(unsigned short *) BIOS;							// 柱面数
   17883:	8b 44 24 30          	mov    0x30(%esp),%eax
   17887:	0f b7 00             	movzwl (%eax),%eax
   1788a:	0f b7 c8             	movzwl %ax,%ecx
   1788d:	8b 54 24 18          	mov    0x18(%esp),%edx
   17891:	89 d0                	mov    %edx,%eax
   17893:	01 c0                	add    %eax,%eax
   17895:	01 d0                	add    %edx,%eax
   17897:	c1 e0 03             	shl    $0x3,%eax
   1789a:	05 a8 11 03 00       	add    $0x311a8,%eax
   1789f:	89 08                	mov    %ecx,(%eax)
		hd_info[drive].head = *(unsigned char *) (2 + BIOS);					// 磁头数
   178a1:	8b 44 24 30          	mov    0x30(%esp),%eax
   178a5:	83 c0 02             	add    $0x2,%eax
   178a8:	0f b6 00             	movzbl (%eax),%eax
   178ab:	0f b6 c8             	movzbl %al,%ecx
   178ae:	8b 54 24 18          	mov    0x18(%esp),%edx
   178b2:	89 d0                	mov    %edx,%eax
   178b4:	01 c0                	add    %eax,%eax
   178b6:	01 d0                	add    %edx,%eax
   178b8:	c1 e0 03             	shl    $0x3,%eax
   178bb:	05 a0 11 03 00       	add    $0x311a0,%eax
   178c0:	89 08                	mov    %ecx,(%eax)
		hd_info[drive].wpcom = *(unsigned short *) (5 + BIOS);					// 写前预补偿柱面号
   178c2:	8b 44 24 30          	mov    0x30(%esp),%eax
   178c6:	83 c0 05             	add    $0x5,%eax
   178c9:	0f b7 00             	movzwl (%eax),%eax
   178cc:	0f b7 c8             	movzwl %ax,%ecx
   178cf:	8b 54 24 18          	mov    0x18(%esp),%edx
   178d3:	89 d0                	mov    %edx,%eax
   178d5:	01 c0                	add    %eax,%eax
   178d7:	01 d0                	add    %edx,%eax
   178d9:	c1 e0 03             	shl    $0x3,%eax
   178dc:	05 ac 11 03 00       	add    $0x311ac,%eax
   178e1:	89 08                	mov    %ecx,(%eax)
		hd_info[drive].ctl = *(unsigned char *) (8 + BIOS);						// 控制字节
   178e3:	8b 44 24 30          	mov    0x30(%esp),%eax
   178e7:	83 c0 08             	add    $0x8,%eax
   178ea:	0f b6 00             	movzbl (%eax),%eax
   178ed:	0f b6 c8             	movzbl %al,%ecx
   178f0:	8b 54 24 18          	mov    0x18(%esp),%edx
   178f4:	89 d0                	mov    %edx,%eax
   178f6:	01 c0                	add    %eax,%eax
   178f8:	01 d0                	add    %edx,%eax
   178fa:	c1 e0 03             	shl    $0x3,%eax
   178fd:	05 b4 11 03 00       	add    $0x311b4,%eax
   17902:	89 08                	mov    %ecx,(%eax)
		hd_info[drive].lzone = *(unsigned short *) (12 + BIOS);					// 磁头着陆区柱面号
   17904:	8b 44 24 30          	mov    0x30(%esp),%eax
   17908:	83 c0 0c             	add    $0xc,%eax
   1790b:	0f b7 00             	movzwl (%eax),%eax
   1790e:	0f b7 c8             	movzwl %ax,%ecx
   17911:	8b 54 24 18          	mov    0x18(%esp),%edx
   17915:	89 d0                	mov    %edx,%eax
   17917:	01 c0                	add    %eax,%eax
   17919:	01 d0                	add    %edx,%eax
   1791b:	c1 e0 03             	shl    $0x3,%eax
   1791e:	05 b0 11 03 00       	add    $0x311b0,%eax
   17923:	89 08                	mov    %ecx,(%eax)
		hd_info[drive].sect = *(unsigned char *) (14 + BIOS);					// 每磁道扇区数
   17925:	8b 44 24 30          	mov    0x30(%esp),%eax
   17929:	83 c0 0e             	add    $0xe,%eax
   1792c:	0f b6 00             	movzbl (%eax),%eax
   1792f:	0f b6 c8             	movzbl %al,%ecx
   17932:	8b 54 24 18          	mov    0x18(%esp),%edx
   17936:	89 d0                	mov    %edx,%eax
   17938:	01 c0                	add    %eax,%eax
   1793a:	01 d0                	add    %edx,%eax
   1793c:	c1 e0 03             	shl    $0x3,%eax
   1793f:	05 a4 11 03 00       	add    $0x311a4,%eax
   17944:	89 08                	mov    %ecx,(%eax)
		BIOS += 16;																// 每个硬盘参数表长16字节,这里BIOS指向下一表.
   17946:	83 44 24 30 10       	addl   $0x10,0x30(%esp)
	// setup.s程序在内存此处连续存放着一到两个硬盘参数表.
	if (!callable)
		return -1;
	callable = 0;
#ifndef HD_TYPE																	// 如果没有定义HD_TYPE,则读取.
	for (drive = 0 ; drive < 2 ; drive++) {
   1794b:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
   17950:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   17955:	0f 8e 28 ff ff ff    	jle    17883 <sys_setup+0x2f>
		hd_info[drive].sect = *(unsigned char *) (14 + BIOS);					// 每磁道扇区数
		BIOS += 16;																// 每个硬盘参数表长16字节,这里BIOS指向下一表.
	}
	// setup.s程序在取BIOS硬盘参数表信息时,如果系统中只有1个硬盘,就会将对应第2硬盘的16字节全部清零.因此这里只要判断第2个硬盘柱面数是否为0
	// 就可以知道是否有第2个硬盘了.
	if (hd_info[1].cyl)
   1795b:	a1 c0 11 03 00       	mov    0x311c0,%eax
   17960:	85 c0                	test   %eax,%eax
   17962:	74 0c                	je     17970 <sys_setup+0x11c>
		NR_HD = 2;																// 硬盘数置为2.
   17964:	c7 05 d8 11 03 00 02 	movl   $0x2,0x311d8
   1796b:	00 00 00 
   1796e:	eb 0a                	jmp    1797a <sys_setup+0x126>
	else
		NR_HD = 1;
   17970:	c7 05 d8 11 03 00 01 	movl   $0x1,0x311d8
   17977:	00 00 00 
#endif
	// 到这里,硬盘信息数组hd_info[]已经设置好,并且确定了系统含有的硬盘数NR_HD.现在开始设置硬盘 结构数组hd[].该数组的项0和项5分别表示两个
	// 硬盘的整体参数,而项1-4和6-9分别表示两个硬盘的4个分区参数.因此这里仅设置硬盘整体信息的两项(项0和5).
	for (i = 0 ; i < NR_HD ; i++) {
   1797a:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   17981:	00 
   17982:	eb 70                	jmp    179f4 <sys_setup+0x1a0>
		hd[i * 5].start_sect = 0;												// 硬盘起始扇区号
   17984:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   17988:	89 d0                	mov    %edx,%eax
   1798a:	c1 e0 02             	shl    $0x2,%eax
   1798d:	01 d0                	add    %edx,%eax
   1798f:	c7 04 c5 e0 11 03 00 	movl   $0x0,0x311e0(,%eax,8)
   17996:	00 00 00 00 
		hd[i * 5].nr_sects = hd_info[i].head * hd_info[i].sect * hd_info[i].cyl;// 硬盘总扇区数
   1799a:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1799e:	89 d0                	mov    %edx,%eax
   179a0:	c1 e0 02             	shl    $0x2,%eax
   179a3:	8d 0c 10             	lea    (%eax,%edx,1),%ecx
   179a6:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   179aa:	89 d0                	mov    %edx,%eax
   179ac:	01 c0                	add    %eax,%eax
   179ae:	01 d0                	add    %edx,%eax
   179b0:	c1 e0 03             	shl    $0x3,%eax
   179b3:	05 a0 11 03 00       	add    $0x311a0,%eax
   179b8:	8b 18                	mov    (%eax),%ebx
   179ba:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   179be:	89 d0                	mov    %edx,%eax
   179c0:	01 c0                	add    %eax,%eax
   179c2:	01 d0                	add    %edx,%eax
   179c4:	c1 e0 03             	shl    $0x3,%eax
   179c7:	05 a4 11 03 00       	add    $0x311a4,%eax
   179cc:	8b 00                	mov    (%eax),%eax
   179ce:	0f af d8             	imul   %eax,%ebx
   179d1:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   179d5:	89 d0                	mov    %edx,%eax
   179d7:	01 c0                	add    %eax,%eax
   179d9:	01 d0                	add    %edx,%eax
   179db:	c1 e0 03             	shl    $0x3,%eax
   179de:	05 a8 11 03 00       	add    $0x311a8,%eax
   179e3:	8b 00                	mov    (%eax),%eax
   179e5:	0f af c3             	imul   %ebx,%eax
   179e8:	89 04 cd e4 11 03 00 	mov    %eax,0x311e4(,%ecx,8)
	else
		NR_HD = 1;
#endif
	// 到这里,硬盘信息数组hd_info[]已经设置好,并且确定了系统含有的硬盘数NR_HD.现在开始设置硬盘 结构数组hd[].该数组的项0和项5分别表示两个
	// 硬盘的整体参数,而项1-4和6-9分别表示两个硬盘的4个分区参数.因此这里仅设置硬盘整体信息的两项(项0和5).
	for (i = 0 ; i < NR_HD ; i++) {
   179ef:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   179f4:	a1 d8 11 03 00       	mov    0x311d8,%eax
   179f9:	39 44 24 1c          	cmp    %eax,0x1c(%esp)
   179fd:	7c 85                	jl     17984 <sys_setup+0x130>
		总之,一个非零值意味着硬盘是一个AT控制器兼容硬盘.
	*/

	// 根据上述原理,下面代码用来检测硬盘到底是不是AT控制器兼容的.这里从CMOS偏移地址0x12处读出硬盘类型字节.如果低半字节值(存放着第2个硬盘类型
	// 值)不为0,则表示系统有两硬盘,否则表示系统只有1个硬盘.如果0x12处读出的值为0,则表示系统中没有AT兼容硬盘.
	if ((cmos_disks = CMOS_READ(0x12)) & 0xf0)
   179ff:	b8 92 00 00 00       	mov    $0x92,%eax
   17a04:	ba 70 00 00 00       	mov    $0x70,%edx
   17a09:	ee                   	out    %al,(%dx)
   17a0a:	eb 00                	jmp    17a0c <sys_setup+0x1b8>
   17a0c:	eb 00                	jmp    17a0e <sys_setup+0x1ba>
   17a0e:	b8 71 00 00 00       	mov    $0x71,%eax
   17a13:	89 c2                	mov    %eax,%edx
   17a15:	ec                   	in     (%dx),%al
   17a16:	eb 00                	jmp    17a18 <sys_setup+0x1c4>
   17a18:	eb 00                	jmp    17a1a <sys_setup+0x1c6>
   17a1a:	88 44 24 13          	mov    %al,0x13(%esp)
   17a1e:	0f b6 44 24 13       	movzbl 0x13(%esp),%eax
   17a23:	88 44 24 12          	mov    %al,0x12(%esp)
   17a27:	0f b6 44 24 12       	movzbl 0x12(%esp),%eax
   17a2c:	25 f0 00 00 00       	and    $0xf0,%eax
   17a31:	85 c0                	test   %eax,%eax
   17a33:	74 24                	je     17a59 <sys_setup+0x205>
		if (cmos_disks & 0x0f)
   17a35:	0f b6 44 24 12       	movzbl 0x12(%esp),%eax
   17a3a:	83 e0 0f             	and    $0xf,%eax
   17a3d:	85 c0                	test   %eax,%eax
   17a3f:	74 0c                	je     17a4d <sys_setup+0x1f9>
			NR_HD = 2;
   17a41:	c7 05 d8 11 03 00 02 	movl   $0x2,0x311d8
   17a48:	00 00 00 
   17a4b:	eb 16                	jmp    17a63 <sys_setup+0x20f>
		else
			NR_HD = 1;
   17a4d:	c7 05 d8 11 03 00 01 	movl   $0x1,0x311d8
   17a54:	00 00 00 
   17a57:	eb 0a                	jmp    17a63 <sys_setup+0x20f>
	else
		NR_HD = 0;
   17a59:	c7 05 d8 11 03 00 00 	movl   $0x0,0x311d8
   17a60:	00 00 00 
	// 若NR_HD = 0,则两个硬盘都不是AT控制器兼容的,两个硬盘数据结构全清零.若NR_HD = 1,则将第2个硬盘的参数清零.
	for (i = NR_HD ; i < 2 ; i++) {
   17a63:	a1 d8 11 03 00       	mov    0x311d8,%eax
   17a68:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   17a6c:	eb 31                	jmp    17a9f <sys_setup+0x24b>
		hd[i * 5].start_sect = 0;
   17a6e:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   17a72:	89 d0                	mov    %edx,%eax
   17a74:	c1 e0 02             	shl    $0x2,%eax
   17a77:	01 d0                	add    %edx,%eax
   17a79:	c7 04 c5 e0 11 03 00 	movl   $0x0,0x311e0(,%eax,8)
   17a80:	00 00 00 00 
		hd[i * 5].nr_sects = 0;
   17a84:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   17a88:	89 d0                	mov    %edx,%eax
   17a8a:	c1 e0 02             	shl    $0x2,%eax
   17a8d:	01 d0                	add    %edx,%eax
   17a8f:	c7 04 c5 e4 11 03 00 	movl   $0x0,0x311e4(,%eax,8)
   17a96:	00 00 00 00 
		else
			NR_HD = 1;
	else
		NR_HD = 0;
	// 若NR_HD = 0,则两个硬盘都不是AT控制器兼容的,两个硬盘数据结构全清零.若NR_HD = 1,则将第2个硬盘的参数清零.
	for (i = NR_HD ; i < 2 ; i++) {
   17a9a:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   17a9f:	83 7c 24 1c 01       	cmpl   $0x1,0x1c(%esp)
   17aa4:	7e c8                	jle    17a6e <sys_setup+0x21a>
	// 好,到此为止我们已经真正确定了系统中所含的硬盘个数NR_HD.现在我们来读取每个硬盘上第1个扇区中的分区表信息,用来设置分区结构数组hd[]中硬盘
	// 各分区的信息.首先利用读函数bread()读硬盘第1个数据块(fs/buffer.c),第1个参数(0x300,0x305)分别是两个硬盘的设备号,第2个参数(0)是所
	// 需读取的块号.若读操作成功,则数据会被存放在缓冲块bh的数据区中.若缓冲块头指针bh为0,则说明读操作失败,则显示出错信息并停机.否则我们根据硬盘第
	// 1个扇区最后两个字节应该是0xAA55来判断扇区中数据的有效性,从而可以知道扇区中位于偏移0x1BE开始处的分区表是否有效.若有效则将硬盘分区表信息
	// 放入硬盘分区结构数组hd[]中.最后释放bh缓冲区.
	for (drive = 0 ; drive < NR_HD ; drive++) {
   17aa6:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   17aad:	00 
   17aae:	e9 11 01 00 00       	jmp    17bc4 <sys_setup+0x370>
		if (!(bh = bread(0x300 + drive * 5, 0))) {								// 0x300,0x305是设备号.
   17ab3:	8b 54 24 18          	mov    0x18(%esp),%edx
   17ab7:	89 d0                	mov    %edx,%eax
   17ab9:	c1 e0 02             	shl    $0x2,%eax
   17abc:	01 d0                	add    %edx,%eax
   17abe:	05 00 03 00 00       	add    $0x300,%eax
   17ac3:	83 ec 08             	sub    $0x8,%esp
   17ac6:	6a 00                	push   $0x0
   17ac8:	50                   	push   %eax
   17ac9:	e8 18 7c ff ff       	call   f6e6 <bread>
   17ace:	83 c4 10             	add    $0x10,%esp
   17ad1:	89 44 24 0c          	mov    %eax,0xc(%esp)
   17ad5:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   17ada:	75 24                	jne    17b00 <sys_setup+0x2ac>
			printk("Unable to read partition table of drive %d\n\r",
   17adc:	83 ec 08             	sub    $0x8,%esp
   17adf:	ff 74 24 20          	pushl  0x20(%esp)
   17ae3:	68 44 41 02 00       	push   $0x24144
   17ae8:	e8 5a 11 ff ff       	call   8c47 <printk>
   17aed:	83 c4 10             	add    $0x10,%esp
				drive);
			panic("");
   17af0:	83 ec 0c             	sub    $0xc,%esp
   17af3:	68 71 41 02 00       	push   $0x24171
   17af8:	e8 0b 11 ff ff       	call   8c08 <panic>
   17afd:	83 c4 10             	add    $0x10,%esp
		}
		if (bh->b_data[510] != 0x55 || (unsigned char)
   17b00:	8b 44 24 0c          	mov    0xc(%esp),%eax
   17b04:	8b 00                	mov    (%eax),%eax
   17b06:	05 fe 01 00 00       	add    $0x1fe,%eax
   17b0b:	0f b6 00             	movzbl (%eax),%eax
   17b0e:	3c 55                	cmp    $0x55,%al
   17b10:	75 12                	jne    17b24 <sys_setup+0x2d0>
		    bh->b_data[511] != 0xAA) {											// 判断硬盘标志0xAA55.
   17b12:	8b 44 24 0c          	mov    0xc(%esp),%eax
   17b16:	8b 00                	mov    (%eax),%eax
   17b18:	05 ff 01 00 00       	add    $0x1ff,%eax
   17b1d:	0f b6 00             	movzbl (%eax),%eax
		if (!(bh = bread(0x300 + drive * 5, 0))) {								// 0x300,0x305是设备号.
			printk("Unable to read partition table of drive %d\n\r",
				drive);
			panic("");
		}
		if (bh->b_data[510] != 0x55 || (unsigned char)
   17b20:	3c aa                	cmp    $0xaa,%al
   17b22:	74 24                	je     17b48 <sys_setup+0x2f4>
		    bh->b_data[511] != 0xAA) {											// 判断硬盘标志0xAA55.
			printk("Bad partition table on drive %d\n\r",drive);
   17b24:	83 ec 08             	sub    $0x8,%esp
   17b27:	ff 74 24 20          	pushl  0x20(%esp)
   17b2b:	68 74 41 02 00       	push   $0x24174
   17b30:	e8 12 11 ff ff       	call   8c47 <printk>
   17b35:	83 c4 10             	add    $0x10,%esp
			panic("");
   17b38:	83 ec 0c             	sub    $0xc,%esp
   17b3b:	68 71 41 02 00       	push   $0x24171
   17b40:	e8 c3 10 ff ff       	call   8c08 <panic>
   17b45:	83 c4 10             	add    $0x10,%esp
		}
		p = 0x1BE + (void *)bh->b_data;	 										// 分区表位于第1扇区0x1BE处.
   17b48:	8b 44 24 0c          	mov    0xc(%esp),%eax
   17b4c:	8b 00                	mov    (%eax),%eax
   17b4e:	05 be 01 00 00       	add    $0x1be,%eax
   17b53:	89 44 24 14          	mov    %eax,0x14(%esp)
		for (i = 1; i < 5; i++, p++) {
   17b57:	c7 44 24 1c 01 00 00 	movl   $0x1,0x1c(%esp)
   17b5e:	00 
   17b5f:	eb 48                	jmp    17ba9 <sys_setup+0x355>
			hd[i + 5 * drive].start_sect = p->start_sect;
   17b61:	8b 54 24 18          	mov    0x18(%esp),%edx
   17b65:	89 d0                	mov    %edx,%eax
   17b67:	c1 e0 02             	shl    $0x2,%eax
   17b6a:	01 c2                	add    %eax,%edx
   17b6c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   17b70:	01 c2                	add    %eax,%edx
   17b72:	8b 44 24 14          	mov    0x14(%esp),%eax
   17b76:	8b 40 08             	mov    0x8(%eax),%eax
   17b79:	89 04 d5 e0 11 03 00 	mov    %eax,0x311e0(,%edx,8)
			hd[i + 5 * drive].nr_sects = p->nr_sects;
   17b80:	8b 54 24 18          	mov    0x18(%esp),%edx
   17b84:	89 d0                	mov    %edx,%eax
   17b86:	c1 e0 02             	shl    $0x2,%eax
   17b89:	01 c2                	add    %eax,%edx
   17b8b:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   17b8f:	01 c2                	add    %eax,%edx
   17b91:	8b 44 24 14          	mov    0x14(%esp),%eax
   17b95:	8b 40 0c             	mov    0xc(%eax),%eax
   17b98:	89 04 d5 e4 11 03 00 	mov    %eax,0x311e4(,%edx,8)
		    bh->b_data[511] != 0xAA) {											// 判断硬盘标志0xAA55.
			printk("Bad partition table on drive %d\n\r",drive);
			panic("");
		}
		p = 0x1BE + (void *)bh->b_data;	 										// 分区表位于第1扇区0x1BE处.
		for (i = 1; i < 5; i++, p++) {
   17b9f:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   17ba4:	83 44 24 14 10       	addl   $0x10,0x14(%esp)
   17ba9:	83 7c 24 1c 04       	cmpl   $0x4,0x1c(%esp)
   17bae:	7e b1                	jle    17b61 <sys_setup+0x30d>
			hd[i + 5 * drive].start_sect = p->start_sect;
			hd[i + 5 * drive].nr_sects = p->nr_sects;
		}
		brelse(bh);																// 释放为存放硬盘数据块而申请的缓冲区.
   17bb0:	83 ec 0c             	sub    $0xc,%esp
   17bb3:	ff 74 24 18          	pushl  0x18(%esp)
   17bb7:	e8 d4 7a ff ff       	call   f690 <brelse>
   17bbc:	83 c4 10             	add    $0x10,%esp
	// 好,到此为止我们已经真正确定了系统中所含的硬盘个数NR_HD.现在我们来读取每个硬盘上第1个扇区中的分区表信息,用来设置分区结构数组hd[]中硬盘
	// 各分区的信息.首先利用读函数bread()读硬盘第1个数据块(fs/buffer.c),第1个参数(0x300,0x305)分别是两个硬盘的设备号,第2个参数(0)是所
	// 需读取的块号.若读操作成功,则数据会被存放在缓冲块bh的数据区中.若缓冲块头指针bh为0,则说明读操作失败,则显示出错信息并停机.否则我们根据硬盘第
	// 1个扇区最后两个字节应该是0xAA55来判断扇区中数据的有效性,从而可以知道扇区中位于偏移0x1BE开始处的分区表是否有效.若有效则将硬盘分区表信息
	// 放入硬盘分区结构数组hd[]中.最后释放bh缓冲区.
	for (drive = 0 ; drive < NR_HD ; drive++) {
   17bbf:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
   17bc4:	a1 d8 11 03 00       	mov    0x311d8,%eax
   17bc9:	39 44 24 18          	cmp    %eax,0x18(%esp)
   17bcd:	0f 8c e0 fe ff ff    	jl     17ab3 <sys_setup+0x25f>
			hd[i + 5 * drive].nr_sects = p->nr_sects;
		}
		brelse(bh);																// 释放为存放硬盘数据块而申请的缓冲区.
    }
	// 现在再对每个分区中的数据块总数进行统计,并保存在硬盘分区总数据数组hd_sizes[]中.然后让设备数据块总数指针数组的本设备项指向该数组.
	for (i = 0 ; i < 5 * MAX_HD ; i++) {
   17bd3:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   17bda:	00 
   17bdb:	eb 5c                	jmp    17c39 <sys_setup+0x3e5>
		if (hd[i].nr_sects != 0)
   17bdd:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   17be1:	8b 04 c5 e4 11 03 00 	mov    0x311e4(,%eax,8),%eax
   17be8:	85 c0                	test   %eax,%eax
   17bea:	74 2e                	je     17c1a <sys_setup+0x3c6>
			Log(LOG_INFO_TYPE, "<<<<< HD Partition%d Info : start_sect = %d, nr_sects = %d >>>>>\n", i, hd[i].start_sect, hd[i].nr_sects);
   17bec:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   17bf0:	8b 14 c5 e4 11 03 00 	mov    0x311e4(,%eax,8),%edx
   17bf7:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   17bfb:	8b 04 c5 e0 11 03 00 	mov    0x311e0(,%eax,8),%eax
   17c02:	83 ec 0c             	sub    $0xc,%esp
   17c05:	52                   	push   %edx
   17c06:	50                   	push   %eax
   17c07:	ff 74 24 30          	pushl  0x30(%esp)
   17c0b:	68 98 41 02 00       	push   $0x24198
   17c10:	6a 00                	push   $0x0
   17c12:	e8 d8 ad 00 00       	call   229ef <Log>
   17c17:	83 c4 20             	add    $0x20,%esp
		hd_sizes[i] = hd[i].nr_sects >> 1 ;
   17c1a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   17c1e:	8b 04 c5 e4 11 03 00 	mov    0x311e4(,%eax,8),%eax
   17c25:	d1 f8                	sar    %eax
   17c27:	89 c2                	mov    %eax,%edx
   17c29:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   17c2d:	89 14 85 40 12 03 00 	mov    %edx,0x31240(,%eax,4)
			hd[i + 5 * drive].nr_sects = p->nr_sects;
		}
		brelse(bh);																// 释放为存放硬盘数据块而申请的缓冲区.
    }
	// 现在再对每个分区中的数据块总数进行统计,并保存在硬盘分区总数据数组hd_sizes[]中.然后让设备数据块总数指针数组的本设备项指向该数组.
	for (i = 0 ; i < 5 * MAX_HD ; i++) {
   17c34:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   17c39:	83 7c 24 1c 09       	cmpl   $0x9,0x1c(%esp)
   17c3e:	7e 9d                	jle    17bdd <sys_setup+0x389>
		if (hd[i].nr_sects != 0)
			Log(LOG_INFO_TYPE, "<<<<< HD Partition%d Info : start_sect = %d, nr_sects = %d >>>>>\n", i, hd[i].start_sect, hd[i].nr_sects);
		hd_sizes[i] = hd[i].nr_sects >> 1 ;
	}
	blk_size[MAJOR_NR] = hd_sizes;
   17c40:	c7 05 44 11 03 00 40 	movl   $0x31240,0x31144
   17c47:	12 03 00 
	// 现在总算完成设置硬盘分区结构数组hd[]的任务.如果确实有硬盘存在并且读入其分区表,则显示"分区表正常"信息.然后尝试在系统内存虚拟盘中加载启动盘中包含的
	// 根文件系统映像(blk_drv/ramdisk.c).即在系统设置有虚拟盘的情况下判断启动盘上是否还含有根文件系统的映像数据.如果有(此时该启动盘称为集成盘)则尝试
	// 把该映像加载并存放到虚拟盘中,然后把此时的根文件系统设备号ROOT_DEV修改成虚拟盘的设备号.接着再对交换设备进行初始化.最后安装根文件系统.
	if (NR_HD)
   17c4a:	a1 d8 11 03 00       	mov    0x311d8,%eax
   17c4f:	85 c0                	test   %eax,%eax
   17c51:	74 29                	je     17c7c <sys_setup+0x428>
		Log(LOG_INFO_TYPE, "<<<<< Partition table%s ok. >>>>>\n\r",(NR_HD > 1) ? "s":"");
   17c53:	a1 d8 11 03 00       	mov    0x311d8,%eax
   17c58:	83 f8 01             	cmp    $0x1,%eax
   17c5b:	7e 07                	jle    17c64 <sys_setup+0x410>
   17c5d:	b8 da 41 02 00       	mov    $0x241da,%eax
   17c62:	eb 05                	jmp    17c69 <sys_setup+0x415>
   17c64:	b8 71 41 02 00       	mov    $0x24171,%eax
   17c69:	83 ec 04             	sub    $0x4,%esp
   17c6c:	50                   	push   %eax
   17c6d:	68 dc 41 02 00       	push   $0x241dc
   17c72:	6a 00                	push   $0x0
   17c74:	e8 76 ad 00 00       	call   229ef <Log>
   17c79:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NR_HD; i++)
   17c7c:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   17c83:	00 
   17c84:	eb 6b                	jmp    17cf1 <sys_setup+0x49d>
		Log(LOG_INFO_TYPE, "<<<<< HD%d Info: cyl = %d, head = %d, sect = %d, ctl = %x >>>>>\n", hd_info[i].cyl, hd_info[i].head, hd_info[i].sect, hd_info[i].ctl);
   17c86:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   17c8a:	89 d0                	mov    %edx,%eax
   17c8c:	01 c0                	add    %eax,%eax
   17c8e:	01 d0                	add    %edx,%eax
   17c90:	c1 e0 03             	shl    $0x3,%eax
   17c93:	05 b4 11 03 00       	add    $0x311b4,%eax
   17c98:	8b 30                	mov    (%eax),%esi
   17c9a:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   17c9e:	89 d0                	mov    %edx,%eax
   17ca0:	01 c0                	add    %eax,%eax
   17ca2:	01 d0                	add    %edx,%eax
   17ca4:	c1 e0 03             	shl    $0x3,%eax
   17ca7:	05 a4 11 03 00       	add    $0x311a4,%eax
   17cac:	8b 18                	mov    (%eax),%ebx
   17cae:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   17cb2:	89 d0                	mov    %edx,%eax
   17cb4:	01 c0                	add    %eax,%eax
   17cb6:	01 d0                	add    %edx,%eax
   17cb8:	c1 e0 03             	shl    $0x3,%eax
   17cbb:	05 a0 11 03 00       	add    $0x311a0,%eax
   17cc0:	8b 08                	mov    (%eax),%ecx
   17cc2:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   17cc6:	89 d0                	mov    %edx,%eax
   17cc8:	01 c0                	add    %eax,%eax
   17cca:	01 d0                	add    %edx,%eax
   17ccc:	c1 e0 03             	shl    $0x3,%eax
   17ccf:	05 a8 11 03 00       	add    $0x311a8,%eax
   17cd4:	8b 00                	mov    (%eax),%eax
   17cd6:	83 ec 08             	sub    $0x8,%esp
   17cd9:	56                   	push   %esi
   17cda:	53                   	push   %ebx
   17cdb:	51                   	push   %ecx
   17cdc:	50                   	push   %eax
   17cdd:	68 00 42 02 00       	push   $0x24200
   17ce2:	6a 00                	push   $0x0
   17ce4:	e8 06 ad 00 00       	call   229ef <Log>
   17ce9:	83 c4 20             	add    $0x20,%esp
	// 现在总算完成设置硬盘分区结构数组hd[]的任务.如果确实有硬盘存在并且读入其分区表,则显示"分区表正常"信息.然后尝试在系统内存虚拟盘中加载启动盘中包含的
	// 根文件系统映像(blk_drv/ramdisk.c).即在系统设置有虚拟盘的情况下判断启动盘上是否还含有根文件系统的映像数据.如果有(此时该启动盘称为集成盘)则尝试
	// 把该映像加载并存放到虚拟盘中,然后把此时的根文件系统设备号ROOT_DEV修改成虚拟盘的设备号.接着再对交换设备进行初始化.最后安装根文件系统.
	if (NR_HD)
		Log(LOG_INFO_TYPE, "<<<<< Partition table%s ok. >>>>>\n\r",(NR_HD > 1) ? "s":"");
	for (i = 0; i < NR_HD; i++)
   17cec:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   17cf1:	a1 d8 11 03 00       	mov    0x311d8,%eax
   17cf6:	39 44 24 1c          	cmp    %eax,0x1c(%esp)
   17cfa:	7c 8a                	jl     17c86 <sys_setup+0x432>
		Log(LOG_INFO_TYPE, "<<<<< HD%d Info: cyl = %d, head = %d, sect = %d, ctl = %x >>>>>\n", hd_info[i].cyl, hd_info[i].head, hd_info[i].sect, hd_info[i].ctl);
	rd_load();																	// blk_drv/ramdisk.c
   17cfc:	e8 74 0b 00 00       	call   18875 <rd_load>
	init_swapping();															// mm/swap.c
   17d01:	e8 e6 53 ff ff       	call   d0ec <init_swapping>
	mount_root();																// fs/super.c
   17d06:	e8 39 86 ff ff       	call   10344 <mount_root>
	return (0);
   17d0b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   17d10:	83 c4 24             	add    $0x24,%esp
   17d13:	5b                   	pop    %ebx
   17d14:	5e                   	pop    %esi
   17d15:	c3                   	ret    

00017d16 <controller_ready>:
// 则表示等待控制器空闲的时间已经超时而发生错误,若返回值不为0则说明在等待(循环)时间期限内控制器回到空闲状态.OK!
// 实际上,我们仅需检测状态寄存器忙位(位7)是否为1来判断控制器是否处于忙状态,驱动器是否就绪(即位6是否为1)与控制器的状态无关.因此我们可能把第172行
// 语句改写成:"while(--retries && (inb_p(HD_STATUS)&0x80));"另外,由于现在的PC速度都很快,因此我们可以把等待的循环次数再加大一些,例如
// 再增加10倍.
static int controller_ready(void)
{
   17d16:	83 ec 10             	sub    $0x10,%esp
	int retries = 100000;
   17d19:	c7 44 24 0c a0 86 01 	movl   $0x186a0,0xc(%esp)
   17d20:	00 

	//while (--retries && (inb_p(HD_STATUS)&0xc0)!=0x40);
	while(--retries && (inb_p(HD_STATUS) & 0X80)) ;
   17d21:	83 6c 24 0c 01       	subl   $0x1,0xc(%esp)
   17d26:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   17d2b:	74 19                	je     17d46 <controller_ready+0x30>
   17d2d:	b8 f7 01 00 00       	mov    $0x1f7,%eax
   17d32:	89 c2                	mov    %eax,%edx
   17d34:	ec                   	in     (%dx),%al
   17d35:	eb 00                	jmp    17d37 <controller_ready+0x21>
   17d37:	eb 00                	jmp    17d39 <controller_ready+0x23>
   17d39:	88 44 24 0b          	mov    %al,0xb(%esp)
   17d3d:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
   17d42:	84 c0                	test   %al,%al
   17d44:	78 db                	js     17d21 <controller_ready+0xb>
	return (retries);									// 返回等待循环次数.
   17d46:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   17d4a:	83 c4 10             	add    $0x10,%esp
   17d4d:	c3                   	ret    

00017d4e <win_result>:

// 检测硬盘执行命令后的状态.(win表示温切斯特硬盘的缩写)
// 读取状态寄存器中的命令执行结果状态.返回0表示正常;1表示出错.如果执行命令错,则需要再读错误寄存器HD_ERROR(0x1f1).
static int win_result(void)
{
   17d4e:	83 ec 10             	sub    $0x10,%esp
	int i = inb_p(HD_STATUS);							// 取状态信息.
   17d51:	b8 f7 01 00 00       	mov    $0x1f7,%eax
   17d56:	89 c2                	mov    %eax,%edx
   17d58:	ec                   	in     (%dx),%al
   17d59:	eb 00                	jmp    17d5b <win_result+0xd>
   17d5b:	eb 00                	jmp    17d5d <win_result+0xf>
   17d5d:	88 44 24 0f          	mov    %al,0xf(%esp)
   17d61:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   17d66:	0f b6 c0             	movzbl %al,%eax
   17d69:	89 44 24 08          	mov    %eax,0x8(%esp)

	if ((i & (BUSY_STAT | READY_STAT | WRERR_STAT | SEEK_STAT | ERR_STAT))
   17d6d:	8b 44 24 08          	mov    0x8(%esp),%eax
   17d71:	25 f1 00 00 00       	and    $0xf1,%eax
   17d76:	83 f8 50             	cmp    $0x50,%eax
   17d79:	75 07                	jne    17d82 <win_result+0x34>
		== (READY_STAT | SEEK_STAT))
		return(0); 										/* ok */
   17d7b:	b8 00 00 00 00       	mov    $0x0,%eax
   17d80:	eb 28                	jmp    17daa <win_result+0x5c>
	if (i & 1) i = inb(HD_ERROR);						// 若ERR_STAT置位,则读取错误寄存器.
   17d82:	8b 44 24 08          	mov    0x8(%esp),%eax
   17d86:	83 e0 01             	and    $0x1,%eax
   17d89:	85 c0                	test   %eax,%eax
   17d8b:	74 18                	je     17da5 <win_result+0x57>
   17d8d:	b8 f1 01 00 00       	mov    $0x1f1,%eax
   17d92:	89 c2                	mov    %eax,%edx
   17d94:	ec                   	in     (%dx),%al
   17d95:	88 44 24 07          	mov    %al,0x7(%esp)
   17d99:	0f b6 44 24 07       	movzbl 0x7(%esp),%eax
   17d9e:	0f b6 c0             	movzbl %al,%eax
   17da1:	89 44 24 08          	mov    %eax,0x8(%esp)
	return (1);
   17da5:	b8 01 00 00 00       	mov    $0x1,%eax
}
   17daa:	83 c4 10             	add    $0x10,%esp
   17dad:	c3                   	ret    

00017dae <hd_out>:
// 第191行定义1个寄存器变量__res.该变量将被保存在1个寄存器中,以便于快速访问.
// 如果想指定寄存器(如eax),则我们可以把该句写成"register char __res asm("ax");"
static void hd_out(unsigned int drive, unsigned int nsect, unsigned int sect,
		unsigned int head, unsigned int cyl, unsigned int cmd,
		void (*intr_addr)(void))
{
   17dae:	53                   	push   %ebx
   17daf:	83 ec 08             	sub    $0x8,%esp
	register int port;

	// 首先对参数进行有效性检查.如果驱动器号大于1(只能是0,1)或者磁头号大于15,则程序不支持,停机.否则就判断并循环等待驱动器就绪.如果等待一段时间
	// 后仍未就绪则表示硬盘控制器出错,也停机.
	if (drive > 1 || head > 15)
   17db2:	83 7c 24 10 01       	cmpl   $0x1,0x10(%esp)
   17db7:	77 07                	ja     17dc0 <hd_out+0x12>
   17db9:	83 7c 24 1c 0f       	cmpl   $0xf,0x1c(%esp)
   17dbe:	76 10                	jbe    17dd0 <hd_out+0x22>
		panic("Trying to write bad sector");
   17dc0:	83 ec 0c             	sub    $0xc,%esp
   17dc3:	68 41 42 02 00       	push   $0x24241
   17dc8:	e8 3b 0e ff ff       	call   8c08 <panic>
   17dcd:	83 c4 10             	add    $0x10,%esp
	if (!controller_ready())
   17dd0:	e8 41 ff ff ff       	call   17d16 <controller_ready>
   17dd5:	85 c0                	test   %eax,%eax
   17dd7:	75 10                	jne    17de9 <hd_out+0x3b>
		panic("HD controller not ready");
   17dd9:	83 ec 0c             	sub    $0xc,%esp
   17ddc:	68 5c 42 02 00       	push   $0x2425c
   17de1:	e8 22 0e ff ff       	call   8c08 <panic>
   17de6:	83 c4 10             	add    $0x10,%esp
	// 接着我们设置硬盘中断发生时将调用的C函数指针do_hd(该函数指针定义在blk.h文件).然后在向硬盘控制器发送参数和命令之前,规定要先向控制器命令端口
	// (0x3f6)发送一指定硬盘的控制字节,以建立相应的硬盘控制方式.该控制字节即是硬盘信息结构数组中的ctl字节.然后向控制器端口0x1f1-0x1f7发送7字节
	// 的参数命令块.
	SET_INTR(intr_addr);								// do_hd = intr_addr在中断中被调用.
   17de9:	8b 44 24 28          	mov    0x28(%esp),%eax
   17ded:	a3 80 11 03 00       	mov    %eax,0x31180
   17df2:	c7 05 84 11 03 00 c8 	movl   $0xc8,0x31184
   17df9:	00 00 00 
	outb_p(hd_info[drive].ctl, HD_CMD);					// 向控制寄存器输出控制字节
   17dfc:	8b 54 24 10          	mov    0x10(%esp),%edx
   17e00:	89 d0                	mov    %edx,%eax
   17e02:	01 c0                	add    %eax,%eax
   17e04:	01 d0                	add    %edx,%eax
   17e06:	c1 e0 03             	shl    $0x3,%eax
   17e09:	05 b4 11 03 00       	add    $0x311b4,%eax
   17e0e:	8b 00                	mov    (%eax),%eax
   17e10:	ba f6 03 00 00       	mov    $0x3f6,%edx
   17e15:	ee                   	out    %al,(%dx)
   17e16:	eb 00                	jmp    17e18 <hd_out+0x6a>
   17e18:	eb 00                	jmp    17e1a <hd_out+0x6c>
	port = HD_DATA;										// 置dx为数据寄存器端口(0x1f0)
   17e1a:	bb f0 01 00 00       	mov    $0x1f0,%ebx
	outb_p(hd_info[drive].wpcom >> 2, ++port);			// 参数:写预补偿柱面号(需除4)
   17e1f:	8b 54 24 10          	mov    0x10(%esp),%edx
   17e23:	89 d0                	mov    %edx,%eax
   17e25:	01 c0                	add    %eax,%eax
   17e27:	01 d0                	add    %edx,%eax
   17e29:	c1 e0 03             	shl    $0x3,%eax
   17e2c:	05 ac 11 03 00       	add    $0x311ac,%eax
   17e31:	8b 00                	mov    (%eax),%eax
   17e33:	c1 f8 02             	sar    $0x2,%eax
   17e36:	83 c3 01             	add    $0x1,%ebx
   17e39:	89 da                	mov    %ebx,%edx
   17e3b:	ee                   	out    %al,(%dx)
   17e3c:	eb 00                	jmp    17e3e <hd_out+0x90>
   17e3e:	eb 00                	jmp    17e40 <hd_out+0x92>
	outb_p(nsect, ++port);								// 参数:读/写扇区总数.
   17e40:	83 c3 01             	add    $0x1,%ebx
   17e43:	8b 44 24 14          	mov    0x14(%esp),%eax
   17e47:	89 da                	mov    %ebx,%edx
   17e49:	ee                   	out    %al,(%dx)
   17e4a:	eb 00                	jmp    17e4c <hd_out+0x9e>
   17e4c:	eb 00                	jmp    17e4e <hd_out+0xa0>
	outb_p(sect, ++port);								// 参数:起始扇区.
   17e4e:	83 c3 01             	add    $0x1,%ebx
   17e51:	8b 44 24 18          	mov    0x18(%esp),%eax
   17e55:	89 da                	mov    %ebx,%edx
   17e57:	ee                   	out    %al,(%dx)
   17e58:	eb 00                	jmp    17e5a <hd_out+0xac>
   17e5a:	eb 00                	jmp    17e5c <hd_out+0xae>
	outb_p(cyl, ++port);								// 参数:柱面号低8位.
   17e5c:	83 c3 01             	add    $0x1,%ebx
   17e5f:	8b 44 24 20          	mov    0x20(%esp),%eax
   17e63:	89 da                	mov    %ebx,%edx
   17e65:	ee                   	out    %al,(%dx)
   17e66:	eb 00                	jmp    17e68 <hd_out+0xba>
   17e68:	eb 00                	jmp    17e6a <hd_out+0xbc>
	outb_p(cyl >> 8, ++port);							// 参数:柱面号高8位.
   17e6a:	8b 44 24 20          	mov    0x20(%esp),%eax
   17e6e:	c1 e8 08             	shr    $0x8,%eax
   17e71:	83 c3 01             	add    $0x1,%ebx
   17e74:	89 da                	mov    %ebx,%edx
   17e76:	ee                   	out    %al,(%dx)
   17e77:	eb 00                	jmp    17e79 <hd_out+0xcb>
   17e79:	eb 00                	jmp    17e7b <hd_out+0xcd>
	outb_p(0xA0 | (drive << 4) | head, ++port);			// 参数:驱动器号+磁头号.
   17e7b:	8b 44 24 10          	mov    0x10(%esp),%eax
   17e7f:	c1 e0 04             	shl    $0x4,%eax
   17e82:	0b 44 24 1c          	or     0x1c(%esp),%eax
   17e86:	0c a0                	or     $0xa0,%al
   17e88:	83 c3 01             	add    $0x1,%ebx
   17e8b:	89 da                	mov    %ebx,%edx
   17e8d:	ee                   	out    %al,(%dx)
   17e8e:	eb 00                	jmp    17e90 <hd_out+0xe2>
   17e90:	eb 00                	jmp    17e92 <hd_out+0xe4>
	outb(cmd, ++port);									// 命令:硬盘控制命令.
   17e92:	83 c3 01             	add    $0x1,%ebx
   17e95:	8b 44 24 24          	mov    0x24(%esp),%eax
   17e99:	89 da                	mov    %ebx,%edx
   17e9b:	ee                   	out    %al,(%dx)
}
   17e9c:	90                   	nop
   17e9d:	83 c4 08             	add    $0x8,%esp
   17ea0:	5b                   	pop    %ebx
   17ea1:	c3                   	ret    

00017ea2 <drive_busy>:

// 等待硬盘就绪.
// 该函数循环等待主状态控制器忙标志复位.若仅有就绪或寻道结束标志置位,则表示就绪,成功返回0.若经过一段时间仍为忙,则返回1.
static int drive_busy(void)
{
   17ea2:	83 ec 1c             	sub    $0x1c,%esp
	unsigned int i;
	unsigned char c;

	// 循环读取控制器的主状态寄存器HD_STATUS,等待就绪标志位置位并且忙位复位.然后检测其中忙位,就绪位和寻道结束位.若仅有就绪或寻道结束标志置位,则表示硬盘
	// 就绪,返回0.否则表示等待超时.于是警告显示信息.并返回1.
	for (i = 0; i < 50000; i++) {
   17ea5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   17eac:	00 
   17ead:	eb 31                	jmp    17ee0 <drive_busy+0x3e>
		c = inb_p(HD_STATUS);							// 取主控制器状态字节.
   17eaf:	b8 f7 01 00 00       	mov    $0x1f7,%eax
   17eb4:	89 c2                	mov    %eax,%edx
   17eb6:	ec                   	in     (%dx),%al
   17eb7:	eb 00                	jmp    17eb9 <drive_busy+0x17>
   17eb9:	eb 00                	jmp    17ebb <drive_busy+0x19>
   17ebb:	88 44 24 0b          	mov    %al,0xb(%esp)
   17ebf:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
   17ec4:	88 44 24 0a          	mov    %al,0xa(%esp)
		c &= (BUSY_STAT | READY_STAT | SEEK_STAT);
   17ec8:	80 64 24 0a d0       	andb   $0xd0,0xa(%esp)
		if (c == (READY_STAT | SEEK_STAT))
   17ecd:	80 7c 24 0a 50       	cmpb   $0x50,0xa(%esp)
   17ed2:	75 07                	jne    17edb <drive_busy+0x39>
			return 0;
   17ed4:	b8 00 00 00 00       	mov    $0x0,%eax
   17ed9:	eb 24                	jmp    17eff <drive_busy+0x5d>
	unsigned int i;
	unsigned char c;

	// 循环读取控制器的主状态寄存器HD_STATUS,等待就绪标志位置位并且忙位复位.然后检测其中忙位,就绪位和寻道结束位.若仅有就绪或寻道结束标志置位,则表示硬盘
	// 就绪,返回0.否则表示等待超时.于是警告显示信息.并返回1.
	for (i = 0; i < 50000; i++) {
   17edb:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   17ee0:	81 7c 24 0c 4f c3 00 	cmpl   $0xc34f,0xc(%esp)
   17ee7:	00 
   17ee8:	76 c5                	jbe    17eaf <drive_busy+0xd>
		c = inb_p(HD_STATUS);							// 取主控制器状态字节.
		c &= (BUSY_STAT | READY_STAT | SEEK_STAT);
		if (c == (READY_STAT | SEEK_STAT))
			return 0;
	}
	printk("HD controller times out\n\r");				// 等待超时,显示信息.并返回1.
   17eea:	83 ec 0c             	sub    $0xc,%esp
   17eed:	68 74 42 02 00       	push   $0x24274
   17ef2:	e8 50 0d ff ff       	call   8c47 <printk>
   17ef7:	83 c4 10             	add    $0x10,%esp
	return(1);
   17efa:	b8 01 00 00 00       	mov    $0x1,%eax
}
   17eff:	83 c4 1c             	add    $0x1c,%esp
   17f02:	c3                   	ret    

00017f03 <reset_controller>:

// 诊断复位(重新校正)硬盘控制器.
// 首先向控制器寄存器端口(0x3f6)发送允许复位(4)控制字节.然后循环 操作等待一段时间让控制器执行复位操作.接着再向该端口发送正常的控制字节(不禁止重试,重读)
// 并等待硬盘就绪.若等待硬盘就绪超时,则显示警告信息.然后读取错误寄存器内容,若其不等于1(表示无错误)则显示硬盘控制器复位失败信息.
static void reset_controller(void)
{
   17f03:	83 ec 1c             	sub    $0x1c,%esp
	int	i;

	outb(4, HD_CMD);									// 向控制寄存器端口发送复位控制字节.
   17f06:	b8 04 00 00 00       	mov    $0x4,%eax
   17f0b:	ba f6 03 00 00       	mov    $0x3f6,%edx
   17f10:	ee                   	out    %al,(%dx)
	for(i = 0; i < 1000; i++) nop();					// 等待一段时间.
   17f11:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   17f18:	00 
   17f19:	eb 06                	jmp    17f21 <reset_controller+0x1e>
   17f1b:	90                   	nop
   17f1c:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   17f21:	81 7c 24 0c e7 03 00 	cmpl   $0x3e7,0xc(%esp)
   17f28:	00 
   17f29:	7e f0                	jle    17f1b <reset_controller+0x18>
	outb(hd_info[0].ctl & 0x0f, HD_CMD);				// 发送正常控制字节(不禁止重试,重读).
   17f2b:	a1 b4 11 03 00       	mov    0x311b4,%eax
   17f30:	83 e0 0f             	and    $0xf,%eax
   17f33:	ba f6 03 00 00       	mov    $0x3f6,%edx
   17f38:	ee                   	out    %al,(%dx)
	if (drive_busy())
   17f39:	e8 64 ff ff ff       	call   17ea2 <drive_busy>
   17f3e:	85 c0                	test   %eax,%eax
   17f40:	74 10                	je     17f52 <reset_controller+0x4f>
		printk("HD-controller still busy\n\r");
   17f42:	83 ec 0c             	sub    $0xc,%esp
   17f45:	68 8e 42 02 00       	push   $0x2428e
   17f4a:	e8 f8 0c ff ff       	call   8c47 <printk>
   17f4f:	83 c4 10             	add    $0x10,%esp
	if ((i = inb(HD_ERROR)) != 1)
   17f52:	b8 f1 01 00 00       	mov    $0x1f1,%eax
   17f57:	89 c2                	mov    %eax,%edx
   17f59:	ec                   	in     (%dx),%al
   17f5a:	88 44 24 0b          	mov    %al,0xb(%esp)
   17f5e:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
   17f63:	0f b6 c0             	movzbl %al,%eax
   17f66:	89 44 24 0c          	mov    %eax,0xc(%esp)
   17f6a:	83 7c 24 0c 01       	cmpl   $0x1,0xc(%esp)
   17f6f:	74 14                	je     17f85 <reset_controller+0x82>
		printk("HD-controller reset failed: %02x\n\r",i);
   17f71:	83 ec 08             	sub    $0x8,%esp
   17f74:	ff 74 24 14          	pushl  0x14(%esp)
   17f78:	68 ac 42 02 00       	push   $0x242ac
   17f7d:	e8 c5 0c ff ff       	call   8c47 <printk>
   17f82:	83 c4 10             	add    $0x10,%esp
}
   17f85:	90                   	nop
   17f86:	83 c4 1c             	add    $0x1c,%esp
   17f89:	c3                   	ret    

00017f8a <reset_hd>:

// 硬盘复位操作.
// 首先复位(重新校正)硬盘控制器.然后发送硬盘控制器命令"建立驱动器参数".在本命令引起的硬盘中断处理程序中又会调用本函数.此时该函数会根据执行该命令的结果判断是
// 否要进行出错处理或是继续执行请求项处理操作.
static void reset_hd(void)
{
   17f8a:	56                   	push   %esi
   17f8b:	53                   	push   %ebx
   17f8c:	83 ec 04             	sub    $0x4,%esp
	// 如果复位标志reset是置位的,则把复位标志清零后,执行复位硬盘控制在操作.然后针对第i个硬盘向控制器发送"建立驱动器参数"命令.当控制器执行了该命令后,又会发出硬盘
	// 中断信号.此时本函数会被中断过程调用而再次执行.由于reset已经标志复位,因此会首先去执行246行开始的语句,判断命令执行是否正常.若还是发生错误就会调用bad_rw_intr()
	// 函数以统计出错次数并根据次数确定是否在设置reset标志如果又设置了reset标志则跳转到repeat重新执行本函数.若复位操作正常,则针对下一个硬盘发送"建立驱动器参数"
	// 命令,并作上述处理.如果系统中NR_HD个硬盘都已经正常执行了发送的命令,则再次do_hd_request()函数开始对请求项进行处理.
repeat:
	if (reset) {
   17f8f:	a1 d4 11 03 00       	mov    0x311d4,%eax
   17f94:	85 c0                	test   %eax,%eax
   17f96:	74 1b                	je     17fb3 <reset_hd+0x29>
		reset = 0;
   17f98:	c7 05 d4 11 03 00 00 	movl   $0x0,0x311d4
   17f9f:	00 00 00 
		i = -1;											// 初始化当前硬盘号(静态变量).
   17fa2:	c7 05 68 12 03 00 ff 	movl   $0xffffffff,0x31268
   17fa9:	ff ff ff 
		reset_controller();
   17fac:	e8 52 ff ff ff       	call   17f03 <reset_controller>
   17fb1:	eb 19                	jmp    17fcc <reset_hd+0x42>
	} else if (win_result()) {
   17fb3:	e8 96 fd ff ff       	call   17d4e <win_result>
   17fb8:	85 c0                	test   %eax,%eax
   17fba:	74 10                	je     17fcc <reset_hd+0x42>
		bad_rw_intr();
   17fbc:	e8 e2 00 00 00       	call   180a3 <bad_rw_intr>
		if (reset)
   17fc1:	a1 d4 11 03 00       	mov    0x311d4,%eax
   17fc6:	85 c0                	test   %eax,%eax
   17fc8:	74 02                	je     17fcc <reset_hd+0x42>
			goto repeat;
   17fca:	eb c3                	jmp    17f8f <reset_hd+0x5>
	}
	i++;												// 处理下一个硬盘(第1个是0).
   17fcc:	a1 68 12 03 00       	mov    0x31268,%eax
   17fd1:	83 c0 01             	add    $0x1,%eax
   17fd4:	a3 68 12 03 00       	mov    %eax,0x31268
	if (i < NR_HD) {
   17fd9:	8b 15 68 12 03 00    	mov    0x31268,%edx
   17fdf:	a1 d8 11 03 00       	mov    0x311d8,%eax
   17fe4:	39 c2                	cmp    %eax,%edx
   17fe6:	0f 8d 84 00 00 00    	jge    18070 <reset_hd+0xe6>
		hd_out(i, hd_info[i].sect, hd_info[i].sect,hd_info[i].head - 1,
			hd_info[i].cyl, WIN_SPECIFY, &reset_hd);
   17fec:	8b 15 68 12 03 00    	mov    0x31268,%edx
   17ff2:	89 d0                	mov    %edx,%eax
   17ff4:	01 c0                	add    %eax,%eax
   17ff6:	01 d0                	add    %edx,%eax
   17ff8:	c1 e0 03             	shl    $0x3,%eax
   17ffb:	05 a8 11 03 00       	add    $0x311a8,%eax
   18000:	8b 00                	mov    (%eax),%eax
		if (reset)
			goto repeat;
	}
	i++;												// 处理下一个硬盘(第1个是0).
	if (i < NR_HD) {
		hd_out(i, hd_info[i].sect, hd_info[i].sect,hd_info[i].head - 1,
   18002:	89 c6                	mov    %eax,%esi
   18004:	8b 15 68 12 03 00    	mov    0x31268,%edx
   1800a:	89 d0                	mov    %edx,%eax
   1800c:	01 c0                	add    %eax,%eax
   1800e:	01 d0                	add    %edx,%eax
   18010:	c1 e0 03             	shl    $0x3,%eax
   18013:	05 a0 11 03 00       	add    $0x311a0,%eax
   18018:	8b 00                	mov    (%eax),%eax
   1801a:	83 e8 01             	sub    $0x1,%eax
   1801d:	89 c3                	mov    %eax,%ebx
   1801f:	8b 15 68 12 03 00    	mov    0x31268,%edx
   18025:	89 d0                	mov    %edx,%eax
   18027:	01 c0                	add    %eax,%eax
   18029:	01 d0                	add    %edx,%eax
   1802b:	c1 e0 03             	shl    $0x3,%eax
   1802e:	05 a4 11 03 00       	add    $0x311a4,%eax
   18033:	8b 00                	mov    (%eax),%eax
   18035:	89 c1                	mov    %eax,%ecx
   18037:	8b 15 68 12 03 00    	mov    0x31268,%edx
   1803d:	89 d0                	mov    %edx,%eax
   1803f:	01 c0                	add    %eax,%eax
   18041:	01 d0                	add    %edx,%eax
   18043:	c1 e0 03             	shl    $0x3,%eax
   18046:	05 a4 11 03 00       	add    $0x311a4,%eax
   1804b:	8b 00                	mov    (%eax),%eax
   1804d:	89 c2                	mov    %eax,%edx
   1804f:	a1 68 12 03 00       	mov    0x31268,%eax
   18054:	83 ec 04             	sub    $0x4,%esp
   18057:	68 8a 7f 01 00       	push   $0x17f8a
   1805c:	68 91 00 00 00       	push   $0x91
   18061:	56                   	push   %esi
   18062:	53                   	push   %ebx
   18063:	51                   	push   %ecx
   18064:	52                   	push   %edx
   18065:	50                   	push   %eax
   18066:	e8 43 fd ff ff       	call   17dae <hd_out>
   1806b:	83 c4 20             	add    $0x20,%esp
			hd_info[i].cyl, WIN_SPECIFY, &reset_hd);
	} else
		do_hd_request();								// 执行请求项处理.
}
   1806e:	eb 05                	jmp    18075 <reset_hd+0xeb>
	i++;												// 处理下一个硬盘(第1个是0).
	if (i < NR_HD) {
		hd_out(i, hd_info[i].sect, hd_info[i].sect,hd_info[i].head - 1,
			hd_info[i].cyl, WIN_SPECIFY, &reset_hd);
	} else
		do_hd_request();								// 执行请求项处理.
   18070:	e8 33 02 00 00       	call   182a8 <do_hd_request>
}
   18075:	90                   	nop
   18076:	83 c4 04             	add    $0x4,%esp
   18079:	5b                   	pop    %ebx
   1807a:	5e                   	pop    %esi
   1807b:	c3                   	ret    

0001807c <unexpected_hd_interrupt>:

// 意外硬盘中断调用函数
// 发生意外硬盘中断时,硬盘中断处理程序中调用的默认C处理函数.在被调用函数指针为NULL时调用该函数.该函数在显示警告信息后设置复位标志reset,然后继续调用请求项函数
// do_hd_request()并在其中执行复位处理操作.
void unexpected_hd_interrupt(void)
{
   1807c:	83 ec 0c             	sub    $0xc,%esp
	printk("Unexpected HD interrupt\n\r");
   1807f:	83 ec 0c             	sub    $0xc,%esp
   18082:	68 cf 42 02 00       	push   $0x242cf
   18087:	e8 bb 0b ff ff       	call   8c47 <printk>
   1808c:	83 c4 10             	add    $0x10,%esp
	reset = 1;
   1808f:	c7 05 d4 11 03 00 01 	movl   $0x1,0x311d4
   18096:	00 00 00 
	do_hd_request();
   18099:	e8 0a 02 00 00       	call   182a8 <do_hd_request>
}
   1809e:	90                   	nop
   1809f:	83 c4 0c             	add    $0xc,%esp
   180a2:	c3                   	ret    

000180a3 <bad_rw_intr>:

// 读写硬盘失败处理调用函数
// 如果读扇区时的出错次数大于或等于7次时,则结束当前请求项并唤醒等待该请求的进程,而且对应缓冲区更新标志复位,表示数据没有更新.如果读写一扇区时的出错次数已经大于
// 3次,则要求执行复位硬盘控制器操作(设置复位标志).
static void bad_rw_intr(void)
{
   180a3:	83 ec 0c             	sub    $0xc,%esp
	if (++CURRENT->errors >= MAX_ERRORS)
   180a6:	a1 1c 11 03 00       	mov    0x3111c,%eax
   180ab:	8b 50 08             	mov    0x8(%eax),%edx
   180ae:	83 c2 01             	add    $0x1,%edx
   180b1:	89 50 08             	mov    %edx,0x8(%eax)
   180b4:	8b 40 08             	mov    0x8(%eax),%eax
   180b7:	83 f8 06             	cmp    $0x6,%eax
   180ba:	7e 0d                	jle    180c9 <bad_rw_intr+0x26>
		end_request(0);
   180bc:	83 ec 0c             	sub    $0xc,%esp
   180bf:	6a 00                	push   $0x0
   180c1:	e8 e0 f6 ff ff       	call   177a6 <end_request>
   180c6:	83 c4 10             	add    $0x10,%esp
	if (CURRENT->errors > MAX_ERRORS / 2)
   180c9:	a1 1c 11 03 00       	mov    0x3111c,%eax
   180ce:	8b 40 08             	mov    0x8(%eax),%eax
   180d1:	83 f8 03             	cmp    $0x3,%eax
   180d4:	7e 0a                	jle    180e0 <bad_rw_intr+0x3d>
		reset = 1;
   180d6:	c7 05 d4 11 03 00 01 	movl   $0x1,0x311d4
   180dd:	00 00 00 
}
   180e0:	90                   	nop
   180e1:	83 c4 0c             	add    $0xc,%esp
   180e4:	c3                   	ret    

000180e5 <read_intr>:
// 读操作中断调用函数.
// 该函数将在硬盘读命令结束时引发的硬盘中断过程中调用.
// 在读命令执行后会产生硬盘中断信号,并执行硬盘中断处理程序,此时在硬盘中断处理程序调用的C函数指针do_hd已经指向read_intr(),因此会在一次读扇区操作完成(或出错)
// 后就会执行该函数.
static void read_intr(void)
{
   180e5:	57                   	push   %edi
   180e6:	83 ec 08             	sub    $0x8,%esp
	// 该函数首先判断此次读命令操作是否出错.若命令结束后控制器还处于忙状态,或者命令执行错误,则处理硬盘操作失败的问题,接着再次请求硬盘作复位处理并执行其他请求项.然后
	// 返回.每次读操作出错都会对当前请求项作出错次数累计,若出错次数不到最大允许出错次数一半,则会先执行硬盘复位操作,然后再执行本次请求项处理.若出错次数已经大于等于
	// 最大允许出错次数MAX_ERRORS(7次),则结束本次请求项的处理而去处理队列中下一个请求项.
	if (win_result()) {									// 若控制器忙,读写错或命令执行错,则进行读写硬盘失败处理.
   180e9:	e8 60 fc ff ff       	call   17d4e <win_result>
   180ee:	85 c0                	test   %eax,%eax
   180f0:	74 0f                	je     18101 <read_intr+0x1c>
		bad_rw_intr();
   180f2:	e8 ac ff ff ff       	call   180a3 <bad_rw_intr>
		do_hd_request();								// 再次请求硬盘作相应(复位)处理.
   180f7:	e8 ac 01 00 00       	call   182a8 <do_hd_request>
		return;
   180fc:	e9 86 00 00 00       	jmp    18187 <read_intr+0xa2>
	}
	// 如果读命令没有出错,则从数据寄存器端口把1扇区的数据读到请求项的缓冲区中,并且递减请求项所需读取的扇区数值.若递减后不等于0,表示本项请求还有数据没取完,于是再次置中断
	// 调用C函数指针do_hd为read_intr()并直接返回,等待硬盘在读出另1个扇区数据后发出中断并再次调用本函数.
	// 注意:281行语句中的256是指内存字,即512字节.
	// 注意:262行再次置do_hd指针指向read_intr()是因为硬盘中断处理程序每次调用do_hd时都会将该函数指针置空.
	port_read(HD_DATA, CURRENT->buffer, 256);			// 读数据到请求结构缓冲区.
   18101:	a1 1c 11 03 00       	mov    0x3111c,%eax
   18106:	8b 40 14             	mov    0x14(%eax),%eax
   18109:	ba f0 01 00 00       	mov    $0x1f0,%edx
   1810e:	b9 00 01 00 00       	mov    $0x100,%ecx
   18113:	89 c7                	mov    %eax,%edi
   18115:	fc                   	cld    
   18116:	f3 66 6d             	rep insw (%dx),%es:(%edi)
	CURRENT->errors = 0;								// 清出错次数
   18119:	a1 1c 11 03 00       	mov    0x3111c,%eax
   1811e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	CURRENT->buffer += 512;								// 高速缓冲区指针,指向新的空区.
   18125:	a1 1c 11 03 00       	mov    0x3111c,%eax
   1812a:	8b 15 1c 11 03 00    	mov    0x3111c,%edx
   18130:	8b 52 14             	mov    0x14(%edx),%edx
   18133:	81 c2 00 02 00 00    	add    $0x200,%edx
   18139:	89 50 14             	mov    %edx,0x14(%eax)
	CURRENT->sector++;									// 起始扇区号加1.
   1813c:	a1 1c 11 03 00       	mov    0x3111c,%eax
   18141:	8b 50 0c             	mov    0xc(%eax),%edx
   18144:	83 c2 01             	add    $0x1,%edx
   18147:	89 50 0c             	mov    %edx,0xc(%eax)
	if (--CURRENT->nr_sectors) {						// 如果所需读出的扇区数还没读完,则再置硬盘调用C函数指针为read_intr().
   1814a:	a1 1c 11 03 00       	mov    0x3111c,%eax
   1814f:	8b 50 10             	mov    0x10(%eax),%edx
   18152:	83 ea 01             	sub    $0x1,%edx
   18155:	89 50 10             	mov    %edx,0x10(%eax)
   18158:	8b 40 10             	mov    0x10(%eax),%eax
   1815b:	85 c0                	test   %eax,%eax
   1815d:	74 16                	je     18175 <read_intr+0x90>
		SET_INTR(&read_intr);
   1815f:	c7 05 80 11 03 00 e5 	movl   $0x180e5,0x31180
   18166:	80 01 00 
   18169:	c7 05 84 11 03 00 c8 	movl   $0xc8,0x31184
   18170:	00 00 00 
		return;
   18173:	eb 12                	jmp    18187 <read_intr+0xa2>
	}
	// 执行到此,说明本次请求项的全部扇区数据已经读完,则调用end_request()函数去处理请求项结束事宜.最后再次调用do_hd_request(),去处理其他硬盘请求项.执行其他硬盘
	// 请求操作.
	end_request(1);										// 数据已更新标志置位(1).
   18175:	83 ec 0c             	sub    $0xc,%esp
   18178:	6a 01                	push   $0x1
   1817a:	e8 27 f6 ff ff       	call   177a6 <end_request>
   1817f:	83 c4 10             	add    $0x10,%esp
	do_hd_request();
   18182:	e8 21 01 00 00       	call   182a8 <do_hd_request>
}
   18187:	83 c4 08             	add    $0x8,%esp
   1818a:	5f                   	pop    %edi
   1818b:	c3                   	ret    

0001818c <write_intr>:

// 写扇区中断调用函数
// 该函数将在硬盘写命令结束引发的硬盘中断过程中被调用.函数功能与read_intr()类似.在写命令执行后会产生硬盘中断信号,并执行硬盘中断处理程序,此时在硬盘中断处理程序中
// 调用的C函数指针do_hd已经指向write_intr(),因此会在一次写扇区操作完成(或出错)后就会执行该函数.
static void write_intr(void)
{
   1818c:	56                   	push   %esi
   1818d:	83 ec 08             	sub    $0x8,%esp
	// 该函数首先判断此次写命令操作是否出错.若命令结束后控制器还处于忙状态,或者命令执行错误,则处理硬盘操作失败问题,接着再次请求硬盘作复位处理并执行其他请求项.然后返回.
	// 在bad_rw_intr()函数中,每次操作出错都会对当前请求项作出错次数累计,若出错次数不到最大允许出错次数的一半,则会先执行硬盘复位操作,然后再执行本次请求项处理.若出错
	// 次数已经大于等于最大允许出错次数MAX_ERRORS(7次),则结束本次请求项的处理而去处理队列中下一个请求项.do_hd_request()中会根据当时具体的标志状态来判别是否需要先执
	// 行复位,重新校正等操作,然后再继续或处理下一个请求项.
	if (win_result()) {									// 如果硬盘控制器返回错误信息,则首先进行硬盘读写失败处理,再次请求硬盘作相应(复位)处理.
   18190:	e8 b9 fb ff ff       	call   17d4e <win_result>
   18195:	85 c0                	test   %eax,%eax
   18197:	74 0c                	je     181a5 <write_intr+0x19>
		bad_rw_intr();
   18199:	e8 05 ff ff ff       	call   180a3 <bad_rw_intr>
		do_hd_request();
   1819e:	e8 05 01 00 00       	call   182a8 <do_hd_request>
		return;
   181a3:	eb 7a                	jmp    1821f <write_intr+0x93>
	}
	// 此时说明本次写一扇区操作成功,因为将欲写扇区数减1.若其不为0,则说明还有扇区要写,于是把当前请求起始扇区号+1,并调整请求项数据缓冲区指针指向下一块欲写的数据.然后再重置
	// 硬盘中断处理程序中调用的C函数指针do_hd(指向本函数).接着向控制器数据端口写入512字节数据,然后函数返回去等待控制器把些数据写入硬盘后产生的中断.
	if (--CURRENT->nr_sectors) {						// 若还有扇区要写,则
   181a5:	a1 1c 11 03 00       	mov    0x3111c,%eax
   181aa:	8b 50 10             	mov    0x10(%eax),%edx
   181ad:	83 ea 01             	sub    $0x1,%edx
   181b0:	89 50 10             	mov    %edx,0x10(%eax)
   181b3:	8b 40 10             	mov    0x10(%eax),%eax
   181b6:	85 c0                	test   %eax,%eax
   181b8:	74 53                	je     1820d <write_intr+0x81>
		CURRENT->sector++;								// 当前请求起始扇区号+1,
   181ba:	a1 1c 11 03 00       	mov    0x3111c,%eax
   181bf:	8b 50 0c             	mov    0xc(%eax),%edx
   181c2:	83 c2 01             	add    $0x1,%edx
   181c5:	89 50 0c             	mov    %edx,0xc(%eax)
		CURRENT->buffer += 512;							// 调整请求缓冲区指针,
   181c8:	a1 1c 11 03 00       	mov    0x3111c,%eax
   181cd:	8b 15 1c 11 03 00    	mov    0x3111c,%edx
   181d3:	8b 52 14             	mov    0x14(%edx),%edx
   181d6:	81 c2 00 02 00 00    	add    $0x200,%edx
   181dc:	89 50 14             	mov    %edx,0x14(%eax)
		SET_INTR(&write_intr);							// do_hd置函数指针为write_intr().
   181df:	c7 05 80 11 03 00 8c 	movl   $0x1818c,0x31180
   181e6:	81 01 00 
   181e9:	c7 05 84 11 03 00 c8 	movl   $0xc8,0x31184
   181f0:	00 00 00 
		port_write(HD_DATA, CURRENT->buffer, 256);		// 向数据端口写256字.
   181f3:	a1 1c 11 03 00       	mov    0x3111c,%eax
   181f8:	8b 40 14             	mov    0x14(%eax),%eax
   181fb:	ba f0 01 00 00       	mov    $0x1f0,%edx
   18200:	b9 00 01 00 00       	mov    $0x100,%ecx
   18205:	89 c6                	mov    %eax,%esi
   18207:	fc                   	cld    
   18208:	f3 66 6f             	rep outsw %ds:(%esi),(%dx)
		return;
   1820b:	eb 12                	jmp    1821f <write_intr+0x93>
	}
	// 若本次请求项的全部扇区数据已经写完,则调用end_request()函数去处理请求项结束事宜.最后再次调用do_hd_requrest(),去处理其他硬盘请求项.执行其他硬盘请求操作.
	end_request(1);										// 处理请求结束事宜(已设置更新标志).
   1820d:	83 ec 0c             	sub    $0xc,%esp
   18210:	6a 01                	push   $0x1
   18212:	e8 8f f5 ff ff       	call   177a6 <end_request>
   18217:	83 c4 10             	add    $0x10,%esp
	do_hd_request();									// 执行其他硬盘请求操作.
   1821a:	e8 89 00 00 00       	call   182a8 <do_hd_request>
}
   1821f:	83 c4 08             	add    $0x8,%esp
   18222:	5e                   	pop    %esi
   18223:	c3                   	ret    

00018224 <recal_intr>:
// 该函数会在硬盘执行重新校正操作而引发的硬盘中断中被调用.
// 如果硬盘控制器返回错误信息,则函数首先进行硬盘读写失败处理,然后请求硬盘作相应(复位)处理.在bad_rw_intr()函数中,每次操作出错都会对当前请求项作出错次数累计,若出错次数
// 不到最大允许出错次数一半,则会先执行硬盘复位操作,然后再执行本次请求项处理.若出错次数已经大于等于最大允许出错次数MAX_ERRORS(7次),则结束本次请求项的处理而去处理队列中
// 下一个请求项.do_hd_request()中根据当时具体的标志状态来判别是否需要先执行复位,重新校正等操作,然后再继续或处理下一请求项.
static void recal_intr(void)
{
   18224:	83 ec 0c             	sub    $0xc,%esp
	if (win_result())									// 若返回出错,则调用bad_rw_intr().
   18227:	e8 22 fb ff ff       	call   17d4e <win_result>
   1822c:	85 c0                	test   %eax,%eax
   1822e:	74 05                	je     18235 <recal_intr+0x11>
		bad_rw_intr();
   18230:	e8 6e fe ff ff       	call   180a3 <bad_rw_intr>
	do_hd_request();
   18235:	e8 6e 00 00 00       	call   182a8 <do_hd_request>
}
   1823a:	90                   	nop
   1823b:	83 c4 0c             	add    $0xc,%esp
   1823e:	c3                   	ret    

0001823f <hd_times_out>:
// 硬盘操作超时处理
// 本函数会在do_timer()中(kernel/sched.c)被调用.在向硬盘控制器发送了一个命令后,若在经过了hd_timeout个系统滴答后控制器还没有发出一个硬盘中断信号,则说明控制器(或
// 硬盘)操作超时.此时do_timer()就会调用本函数设置复位标志reset并调用do_hd_request()执行复位处理.若在预定时间内(200滴答)硬盘控制器发出了硬盘中断并开始执行硬盘中断
// 处理程序,那么hd_timeout值就会在中断处理程序中被置0.此时do_timer()就会跳过本函数.
void hd_times_out(void)
{
   1823f:	83 ec 0c             	sub    $0xc,%esp
	// 如果当前并没有请求项要处理(设备请求项指针为NULL),则无超时可言,直接返回.否则先显示警告信息,然后判断当前请求项执行过程中发生的出错次数是否已经大于设定值MAX_ERRORS(7).
	// 如果是则以失败形式结束本次请求项的处理(不设置数据更新标志).然后把中断过程中调用的C函数指针do_hd置空,并设置复位标志reset,继而在请求项处理函数do_hd_request()中去
	// 执行复位操作.
	if (!CURRENT)
   18242:	a1 1c 11 03 00       	mov    0x3111c,%eax
   18247:	85 c0                	test   %eax,%eax
   18249:	74 58                	je     182a3 <hd_times_out+0x64>
		return;
	printk("HD timeout");
   1824b:	83 ec 0c             	sub    $0xc,%esp
   1824e:	68 e9 42 02 00       	push   $0x242e9
   18253:	e8 ef 09 ff ff       	call   8c47 <printk>
   18258:	83 c4 10             	add    $0x10,%esp
	if (++CURRENT->errors >= MAX_ERRORS)
   1825b:	a1 1c 11 03 00       	mov    0x3111c,%eax
   18260:	8b 50 08             	mov    0x8(%eax),%edx
   18263:	83 c2 01             	add    $0x1,%edx
   18266:	89 50 08             	mov    %edx,0x8(%eax)
   18269:	8b 40 08             	mov    0x8(%eax),%eax
   1826c:	83 f8 06             	cmp    $0x6,%eax
   1826f:	7e 0d                	jle    1827e <hd_times_out+0x3f>
		end_request(0);
   18271:	83 ec 0c             	sub    $0xc,%esp
   18274:	6a 00                	push   $0x0
   18276:	e8 2b f5 ff ff       	call   177a6 <end_request>
   1827b:	83 c4 10             	add    $0x10,%esp
	SET_INTR(NULL);										// 令do_hd = NULL,time_out=200
   1827e:	c7 05 80 11 03 00 00 	movl   $0x0,0x31180
   18285:	00 00 00 
   18288:	c7 05 84 11 03 00 c8 	movl   $0xc8,0x31184
   1828f:	00 00 00 
	reset = 1;											// 设置复位标志.
   18292:	c7 05 d4 11 03 00 01 	movl   $0x1,0x311d4
   18299:	00 00 00 
	do_hd_request();
   1829c:	e8 07 00 00 00       	call   182a8 <do_hd_request>
   182a1:	eb 01                	jmp    182a4 <hd_times_out+0x65>
{
	// 如果当前并没有请求项要处理(设备请求项指针为NULL),则无超时可言,直接返回.否则先显示警告信息,然后判断当前请求项执行过程中发生的出错次数是否已经大于设定值MAX_ERRORS(7).
	// 如果是则以失败形式结束本次请求项的处理(不设置数据更新标志).然后把中断过程中调用的C函数指针do_hd置空,并设置复位标志reset,继而在请求项处理函数do_hd_request()中去
	// 执行复位操作.
	if (!CURRENT)
		return;
   182a3:	90                   	nop
	if (++CURRENT->errors >= MAX_ERRORS)
		end_request(0);
	SET_INTR(NULL);										// 令do_hd = NULL,time_out=200
	reset = 1;											// 设置复位标志.
	do_hd_request();
}
   182a4:	83 c4 0c             	add    $0xc,%esp
   182a7:	c3                   	ret    

000182a8 <do_hd_request>:
// 该函数根据设备当前请求项中的设备号和起始扇区号信息首先计算到对应硬盘上的柱面号,当前磁道中扇区号,磁头号数据,然后再根据请求项中的命令(READ/WRITE)对硬盘发送相应读/写命令
// 若控制器复位标志或硬盘重新校正已被置位,那么首先会执行复位或重新校正操作.
// 若请求项此时是块设备的第1个(原来设备空闲),则块设备当前请求项指针会直接指向该请求项(参见ll_rw_blk.c),并会立刻调用本函数执行读写操作.否则在一个读写操作完成而引发的硬盘
// 中断过程,若还有请求项需要处理,则也会在硬盘中断过程中调用本函数
void do_hd_request(void)
{
   182a8:	56                   	push   %esi
   182a9:	83 ec 38             	sub    $0x38,%esp

	// 函数首先检测请求项的合法性.若请求队列中已没有请求项则退出(参见blk.h)
	// 然后取设备号中的子设备号以及设备当前请求项中的起始扇区号.子设备号即对应硬盘上各分区.如果子设备号不存在或者起始扇区大于该分区扇区数-2,则结束该请求项,并跳转到标号repeat处(定义
	// 在INIT_REQUEST开始处).因为次要求读写一块数据(2个扇区,即1024字节),所以请求的扇区号不能大于分区中最后倒数第二个扇区号.然后通过加上子设备号对应分区的起始扇区号,就把需要读写的
	// 块对应到整个硬盘的绝对扇区号block上.而子设备号被5整除即可得到对应的硬盘号.
	INIT_REQUEST;
   182ac:	a1 1c 11 03 00       	mov    0x3111c,%eax
   182b1:	85 c0                	test   %eax,%eax
   182b3:	75 19                	jne    182ce <do_hd_request+0x26>
   182b5:	c7 05 80 11 03 00 00 	movl   $0x0,0x31180
   182bc:	00 00 00 
   182bf:	c7 05 84 11 03 00 00 	movl   $0x0,0x31184
   182c6:	00 00 00 
   182c9:	e9 87 02 00 00       	jmp    18555 <do_hd_request+0x2ad>
   182ce:	a1 1c 11 03 00       	mov    0x3111c,%eax
   182d3:	8b 00                	mov    (%eax),%eax
   182d5:	c1 e8 08             	shr    $0x8,%eax
   182d8:	83 f8 03             	cmp    $0x3,%eax
   182db:	74 10                	je     182ed <do_hd_request+0x45>
   182dd:	83 ec 0c             	sub    $0xc,%esp
   182e0:	68 f4 42 02 00       	push   $0x242f4
   182e5:	e8 1e 09 ff ff       	call   8c08 <panic>
   182ea:	83 c4 10             	add    $0x10,%esp
   182ed:	a1 1c 11 03 00       	mov    0x3111c,%eax
   182f2:	8b 40 1c             	mov    0x1c(%eax),%eax
   182f5:	85 c0                	test   %eax,%eax
   182f7:	74 20                	je     18319 <do_hd_request+0x71>
   182f9:	a1 1c 11 03 00       	mov    0x3111c,%eax
   182fe:	8b 40 1c             	mov    0x1c(%eax),%eax
   18301:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   18305:	84 c0                	test   %al,%al
   18307:	75 10                	jne    18319 <do_hd_request+0x71>
   18309:	83 ec 0c             	sub    $0xc,%esp
   1830c:	68 15 43 02 00       	push   $0x24315
   18311:	e8 f2 08 ff ff       	call   8c08 <panic>
   18316:	83 c4 10             	add    $0x10,%esp
 	dev = MINOR(CURRENT->dev);
   18319:	a1 1c 11 03 00       	mov    0x3111c,%eax
   1831e:	8b 00                	mov    (%eax),%eax
   18320:	25 ff 00 00 00       	and    $0xff,%eax
   18325:	89 44 24 24          	mov    %eax,0x24(%esp)
	block = CURRENT->sector;						// 请求的起始扇区.
   18329:	a1 1c 11 03 00       	mov    0x3111c,%eax
   1832e:	8b 40 0c             	mov    0xc(%eax),%eax
   18331:	89 44 24 20          	mov    %eax,0x20(%esp)
	if (dev >= 5 * NR_HD || block + 2 > hd[dev].nr_sects) {
   18335:	8b 15 d8 11 03 00    	mov    0x311d8,%edx
   1833b:	89 d0                	mov    %edx,%eax
   1833d:	c1 e0 02             	shl    $0x2,%eax
   18340:	01 d0                	add    %edx,%eax
   18342:	3b 44 24 24          	cmp    0x24(%esp),%eax
   18346:	76 16                	jbe    1835e <do_hd_request+0xb6>
   18348:	8b 44 24 20          	mov    0x20(%esp),%eax
   1834c:	8d 50 02             	lea    0x2(%eax),%edx
   1834f:	8b 44 24 24          	mov    0x24(%esp),%eax
   18353:	8b 04 c5 e4 11 03 00 	mov    0x311e4(,%eax,8),%eax
   1835a:	39 c2                	cmp    %eax,%edx
   1835c:	76 12                	jbe    18370 <do_hd_request+0xc8>
		end_request(0);
   1835e:	83 ec 0c             	sub    $0xc,%esp
   18361:	6a 00                	push   $0x0
   18363:	e8 3e f4 ff ff       	call   177a6 <end_request>
   18368:	83 c4 10             	add    $0x10,%esp
		goto repeat;								// 该标号在blk.h最后面.
   1836b:	e9 3c ff ff ff       	jmp    182ac <do_hd_request+0x4>
	}
	block += hd[dev].start_sect;
   18370:	8b 44 24 24          	mov    0x24(%esp),%eax
   18374:	8b 04 c5 e0 11 03 00 	mov    0x311e0(,%eax,8),%eax
   1837b:	01 44 24 20          	add    %eax,0x20(%esp)
	dev /= 5;										// 此时dev代表硬盘号(硬盘0还是硬盘1)
   1837f:	8b 44 24 24          	mov    0x24(%esp),%eax
   18383:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   18388:	f7 e2                	mul    %edx
   1838a:	89 d0                	mov    %edx,%eax
   1838c:	c1 e8 02             	shr    $0x2,%eax
   1838f:	89 44 24 24          	mov    %eax,0x24(%esp)
	// 数和硬盘磁头数来计算这些数据.计算方法为:初始时eax是扇区号block,edx中置0.divl指令把edx:eax组成的扇区号除以每磁道扇区数(hd_info[dev].sect),所得整数商值在eax中,余数在edx
	// 中.其中eax中是到指定位置的对应总磁道数(所有磁头面),edx中是当前磁道上的扇区号.348-349行代码初始时eax是计算出的对应总磁道数,edx中置0.divl指令把edx:eax的对应总磁道数除以硬盘
	// 总磁头数(hd_info[dev].head),在eax中得到的整除值是柱面号(cyl),edx得到的余数就是对应得当前磁头号(head).
	// 对应总磁道数 * 每磁道扇区数 + 当前磁道上的扇区号 = 绝对扇区号
	__asm__("divl %4":"=a" (block), "=d" (sec):"0" (block), "1" (0),
		"r" (hd_info[dev].sect));
   18393:	8b 54 24 24          	mov    0x24(%esp),%edx
   18397:	89 d0                	mov    %edx,%eax
   18399:	01 c0                	add    %eax,%eax
   1839b:	01 d0                	add    %edx,%eax
   1839d:	c1 e0 03             	shl    $0x3,%eax
   183a0:	05 a4 11 03 00       	add    $0x311a4,%eax
   183a5:	8b 08                	mov    (%eax),%ecx
	// 然后根据求得的绝对扇区号block和硬盘号dev,我们就可以计算出对应硬盘中的磁道中扇区号(sec),所在柱面号(cyl)和磁头号(head).下面嵌入的汇编代码即用来根据硬盘信息结构中的每磁道扇区
	// 数和硬盘磁头数来计算这些数据.计算方法为:初始时eax是扇区号block,edx中置0.divl指令把edx:eax组成的扇区号除以每磁道扇区数(hd_info[dev].sect),所得整数商值在eax中,余数在edx
	// 中.其中eax中是到指定位置的对应总磁道数(所有磁头面),edx中是当前磁道上的扇区号.348-349行代码初始时eax是计算出的对应总磁道数,edx中置0.divl指令把edx:eax的对应总磁道数除以硬盘
	// 总磁头数(hd_info[dev].head),在eax中得到的整除值是柱面号(cyl),edx得到的余数就是对应得当前磁头号(head).
	// 对应总磁道数 * 每磁道扇区数 + 当前磁道上的扇区号 = 绝对扇区号
	__asm__("divl %4":"=a" (block), "=d" (sec):"0" (block), "1" (0),
   183a7:	8b 44 24 20          	mov    0x20(%esp),%eax
   183ab:	ba 00 00 00 00       	mov    $0x0,%edx
   183b0:	f7 f1                	div    %ecx
   183b2:	89 44 24 20          	mov    %eax,0x20(%esp)
   183b6:	89 54 24 1c          	mov    %edx,0x1c(%esp)
		"r" (hd_info[dev].sect));
	// 总磁头数 * 柱面号 + 磁头号 = 对应总磁道数
	__asm__("divl %4":"=a" (cyl), "=d" (head):"0" (block), "1" (0),
		"r" (hd_info[dev].head));
   183ba:	8b 54 24 24          	mov    0x24(%esp),%edx
   183be:	89 d0                	mov    %edx,%eax
   183c0:	01 c0                	add    %eax,%eax
   183c2:	01 d0                	add    %edx,%eax
   183c4:	c1 e0 03             	shl    $0x3,%eax
   183c7:	05 a0 11 03 00       	add    $0x311a0,%eax
   183cc:	8b 08                	mov    (%eax),%ecx
	// 总磁头数(hd_info[dev].head),在eax中得到的整除值是柱面号(cyl),edx得到的余数就是对应得当前磁头号(head).
	// 对应总磁道数 * 每磁道扇区数 + 当前磁道上的扇区号 = 绝对扇区号
	__asm__("divl %4":"=a" (block), "=d" (sec):"0" (block), "1" (0),
		"r" (hd_info[dev].sect));
	// 总磁头数 * 柱面号 + 磁头号 = 对应总磁道数
	__asm__("divl %4":"=a" (cyl), "=d" (head):"0" (block), "1" (0),
   183ce:	8b 44 24 20          	mov    0x20(%esp),%eax
   183d2:	ba 00 00 00 00       	mov    $0x0,%edx
   183d7:	f7 f1                	div    %ecx
   183d9:	89 44 24 18          	mov    %eax,0x18(%esp)
   183dd:	89 54 24 14          	mov    %edx,0x14(%esp)
		"r" (hd_info[dev].head));
	sec++;											// 对计算所得当前磁道扇区号进行调整.
   183e1:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
	nsect = CURRENT->nr_sectors;					// 预读/写的扇区数.
   183e6:	a1 1c 11 03 00       	mov    0x3111c,%eax
   183eb:	8b 40 10             	mov    0x10(%eax),%eax
   183ee:	89 44 24 10          	mov    %eax,0x10(%esp)
	// 此时我们得到了欲读写的硬盘起始扇区block所对应的硬盘上柱面号(cyl),在当前磁道上的扇区号(sec),磁头号(head)以及欲读写的总扇区数(nsect).接着我们可以根据这些信息向硬盘控制器发送I/O
	// 操作信息了.但在发送之前我们还需要先看看是否有复位控制器状态和重新校正硬盘的标志.通常在复位操作之后都需要重新校正硬盘磁头位置.若这些标志已被置位,则说明前面的硬盘操作可能出现了一些问题
	// 或者现在是系统第一次硬盘读写操作等情况.于是我们就需要重新复位硬盘或控制器并重新校正硬盘.
	// 如果此时复位标志reset是置位的,则需要执行复位操作.复位硬盘和控制器,并置硬盘需要重新校正标志,返回.reset_hd()将首先向硬盘控制器发送复位(重新校正)命令,然后发送硬盘控制命令"
	// 建立驱动器参数".
	if (reset) {
   183f2:	a1 d4 11 03 00       	mov    0x311d4,%eax
   183f7:	85 c0                	test   %eax,%eax
   183f9:	74 14                	je     1840f <do_hd_request+0x167>
		recalibrate = 1;							// 置需重新校正标志.
   183fb:	c7 05 d0 11 03 00 01 	movl   $0x1,0x311d0
   18402:	00 00 00 
		reset_hd();
   18405:	e8 80 fb ff ff       	call   17f8a <reset_hd>
		return;
   1840a:	e9 46 01 00 00       	jmp    18555 <do_hd_request+0x2ad>
	}
	// 如果此时重新校正标志(recalibrate)是置位的,则首先复位该标志,然后向硬盘控制器发送重新校正命令.该命令会执行寻道操作,让处于任何地方的磁头移动到0柱面.
	if (recalibrate) {
   1840f:	a1 d0 11 03 00       	mov    0x311d0,%eax
   18414:	85 c0                	test   %eax,%eax
   18416:	74 58                	je     18470 <do_hd_request+0x1c8>
		recalibrate = 0;
   18418:	c7 05 d0 11 03 00 00 	movl   $0x0,0x311d0
   1841f:	00 00 00 
		hd_out(dev, hd_info[CURRENT_DEV].sect, 0, 0, 0,
   18422:	a1 1c 11 03 00       	mov    0x3111c,%eax
   18427:	8b 00                	mov    (%eax),%eax
   18429:	0f b6 c8             	movzbl %al,%ecx
   1842c:	ba 67 66 66 66       	mov    $0x66666667,%edx
   18431:	89 c8                	mov    %ecx,%eax
   18433:	f7 ea                	imul   %edx
   18435:	d1 fa                	sar    %edx
   18437:	89 c8                	mov    %ecx,%eax
   18439:	c1 f8 1f             	sar    $0x1f,%eax
   1843c:	29 c2                	sub    %eax,%edx
   1843e:	89 d0                	mov    %edx,%eax
   18440:	01 c0                	add    %eax,%eax
   18442:	01 d0                	add    %edx,%eax
   18444:	c1 e0 03             	shl    $0x3,%eax
   18447:	05 a4 11 03 00       	add    $0x311a4,%eax
   1844c:	8b 00                	mov    (%eax),%eax
   1844e:	83 ec 04             	sub    $0x4,%esp
   18451:	68 24 82 01 00       	push   $0x18224
   18456:	6a 10                	push   $0x10
   18458:	6a 00                	push   $0x0
   1845a:	6a 00                	push   $0x0
   1845c:	6a 00                	push   $0x0
   1845e:	50                   	push   %eax
   1845f:	ff 74 24 40          	pushl  0x40(%esp)
   18463:	e8 46 f9 ff ff       	call   17dae <hd_out>
   18468:	83 c4 20             	add    $0x20,%esp
			WIN_RESTORE, &recal_intr);
		return;
   1846b:	e9 e5 00 00 00       	jmp    18555 <do_hd_request+0x2ad>
	}
	// 如果以上两个标志都没有置位,那么我们就可以开始向硬盘控制器发送真正的数据读/写操作命令了.如果当前请求是写扇区操作,则发送命令,循环读取状态寄存器信息并判断请求服务标志DRQ_STAT是否
	// 置位.DRQ_STAT是硬盘状态寄存器的请求服务位表示驱动器已经准备好在主机和数据端口之间传输一个字或一个字节的数据.如果请求服务DRQ置位则退出循环.若等到循环结束也没有置位,则表示发送的
	// 要求写硬盘命令失败,于是跳转去处理出现在问题或继续执行下一个硬盘请求.否则我们可以向硬盘控制器数据寄存器端口HD_DATA写入1个扇区的数据.
	if (CURRENT->cmd == WRITE) {
   18470:	a1 1c 11 03 00       	mov    0x3111c,%eax
   18475:	8b 40 04             	mov    0x4(%eax),%eax
   18478:	83 f8 01             	cmp    $0x1,%eax
   1847b:	0f 85 90 00 00 00    	jne    18511 <do_hd_request+0x269>
		hd_out(dev, nsect, sec, head, cyl, WIN_WRITE, &write_intr);
   18481:	83 ec 04             	sub    $0x4,%esp
   18484:	68 8c 81 01 00       	push   $0x1818c
   18489:	6a 30                	push   $0x30
   1848b:	ff 74 24 24          	pushl  0x24(%esp)
   1848f:	ff 74 24 24          	pushl  0x24(%esp)
   18493:	ff 74 24 30          	pushl  0x30(%esp)
   18497:	ff 74 24 28          	pushl  0x28(%esp)
   1849b:	ff 74 24 40          	pushl  0x40(%esp)
   1849f:	e8 0a f9 ff ff       	call   17dae <hd_out>
   184a4:	83 c4 20             	add    $0x20,%esp
		for(i = 0 ; i < 10000 && !(r = inb_p(HD_STATUS) & DRQ_STAT) ; i++)
   184a7:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%esp)
   184ae:	00 
   184af:	eb 05                	jmp    184b6 <do_hd_request+0x20e>
   184b1:	83 44 24 2c 01       	addl   $0x1,0x2c(%esp)
   184b6:	81 7c 24 2c 0f 27 00 	cmpl   $0x270f,0x2c(%esp)
   184bd:	00 
   184be:	7f 26                	jg     184e6 <do_hd_request+0x23e>
   184c0:	b8 f7 01 00 00       	mov    $0x1f7,%eax
   184c5:	89 c2                	mov    %eax,%edx
   184c7:	ec                   	in     (%dx),%al
   184c8:	eb 00                	jmp    184ca <do_hd_request+0x222>
   184ca:	eb 00                	jmp    184cc <do_hd_request+0x224>
   184cc:	88 44 24 0f          	mov    %al,0xf(%esp)
   184d0:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   184d5:	0f b6 c0             	movzbl %al,%eax
   184d8:	83 e0 08             	and    $0x8,%eax
   184db:	89 44 24 28          	mov    %eax,0x28(%esp)
   184df:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   184e4:	74 cb                	je     184b1 <do_hd_request+0x209>
			/* nothing */ ;
		if (!r) {
   184e6:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   184eb:	75 0a                	jne    184f7 <do_hd_request+0x24f>
			bad_rw_intr();
   184ed:	e8 b1 fb ff ff       	call   180a3 <bad_rw_intr>
			goto repeat;							// 该标号在blk.h文件最后面.
   184f2:	e9 b5 fd ff ff       	jmp    182ac <do_hd_request+0x4>
		}
		port_write(HD_DATA, CURRENT->buffer, 256);
   184f7:	a1 1c 11 03 00       	mov    0x3111c,%eax
   184fc:	8b 40 14             	mov    0x14(%eax),%eax
   184ff:	ba f0 01 00 00       	mov    $0x1f0,%edx
   18504:	b9 00 01 00 00       	mov    $0x100,%ecx
   18509:	89 c6                	mov    %eax,%esi
   1850b:	fc                   	cld    
   1850c:	f3 66 6f             	rep outsw %ds:(%esi),(%dx)
   1850f:	eb 44                	jmp    18555 <do_hd_request+0x2ad>
	// 如果当前请求是读硬盘数据,则向硬盘控制器发送读扇区命令.若命令无效则停机.
	} else if (CURRENT->cmd == READ) {
   18511:	a1 1c 11 03 00       	mov    0x3111c,%eax
   18516:	8b 40 04             	mov    0x4(%eax),%eax
   18519:	85 c0                	test   %eax,%eax
   1851b:	75 28                	jne    18545 <do_hd_request+0x29d>
		hd_out(dev, nsect, sec, head, cyl, WIN_READ, &read_intr);
   1851d:	83 ec 04             	sub    $0x4,%esp
   18520:	68 e5 80 01 00       	push   $0x180e5
   18525:	6a 20                	push   $0x20
   18527:	ff 74 24 24          	pushl  0x24(%esp)
   1852b:	ff 74 24 24          	pushl  0x24(%esp)
   1852f:	ff 74 24 30          	pushl  0x30(%esp)
   18533:	ff 74 24 28          	pushl  0x28(%esp)
   18537:	ff 74 24 40          	pushl  0x40(%esp)
   1853b:	e8 6e f8 ff ff       	call   17dae <hd_out>
   18540:	83 c4 20             	add    $0x20,%esp
   18543:	eb 10                	jmp    18555 <do_hd_request+0x2ad>
	} else
		panic("unknown hd-command");
   18545:	83 ec 0c             	sub    $0xc,%esp
   18548:	68 30 43 02 00       	push   $0x24330
   1854d:	e8 b6 06 ff ff       	call   8c08 <panic>
   18552:	83 c4 10             	add    $0x10,%esp
}
   18555:	83 c4 38             	add    $0x38,%esp
   18558:	5e                   	pop    %esi
   18559:	c3                   	ret    

0001855a <hd_init>:
// 设置硬盘中断描述符,并允许硬盘控制器发送中断请求信号.
// 该函数设置硬盘设备的请求项处理函数指针为do_hd_request(),然后设置硬盘中断门描述符.hd_interrup(kernel/sys_call.s)是其中断处理过程地址.硬盘中断号为int 0x2E(46),对应8259A
// 芯片的中断请求信号IRQ13.接着复位接联的主8259A int 2屏蔽位,允许从片发出中断请求信号.再复位硬盘的中断请求屏蔽位(在从片上),允许硬盘控制器发送中断请求信号.中断描述符表IDT内中断门
// 描述符设置宏set_intr_gate()在include/asm/system.h中实现.
void hd_init(void)
{
   1855a:	53                   	push   %ebx
   1855b:	83 ec 10             	sub    $0x10,%esp
	blk_dev[MAJOR_NR].request_fn = DEVICE_REQUEST;				// do_hd_request().
   1855e:	c7 05 18 11 03 00 a8 	movl   $0x182a8,0x31118
   18565:	82 01 00 
	set_intr_gate(0x2E, &hd_interrupt);							// 设置中断门中处理函数指针
   18568:	b9 28 56 00 00       	mov    $0x5628,%ecx
   1856d:	bb 2c 56 00 00       	mov    $0x562c,%ebx
   18572:	ba 84 7a 00 00       	mov    $0x7a84,%edx
   18577:	b8 00 00 08 00       	mov    $0x80000,%eax
   1857c:	66 89 d0             	mov    %dx,%ax
   1857f:	66 ba 00 8e          	mov    $0x8e00,%dx
   18583:	89 01                	mov    %eax,(%ecx)
   18585:	89 13                	mov    %edx,(%ebx)
	outb_p(inb_p(0x21) & 0xfb, 0x21);							// 复位接联的主8259A int 2的屏蔽位
   18587:	b8 21 00 00 00       	mov    $0x21,%eax
   1858c:	89 c2                	mov    %eax,%edx
   1858e:	ec                   	in     (%dx),%al
   1858f:	eb 00                	jmp    18591 <hd_init+0x37>
   18591:	eb 00                	jmp    18593 <hd_init+0x39>
   18593:	88 44 24 0f          	mov    %al,0xf(%esp)
   18597:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   1859c:	0f b6 c0             	movzbl %al,%eax
   1859f:	25 fb 00 00 00       	and    $0xfb,%eax
   185a4:	ba 21 00 00 00       	mov    $0x21,%edx
   185a9:	ee                   	out    %al,(%dx)
   185aa:	eb 00                	jmp    185ac <hd_init+0x52>
   185ac:	eb 00                	jmp    185ae <hd_init+0x54>
	outb(inb_p(0xA1) & 0xbf, 0xA1);								// 复位硬盘中断请求屏蔽位(在从片上).
   185ae:	b8 a1 00 00 00       	mov    $0xa1,%eax
   185b3:	89 c2                	mov    %eax,%edx
   185b5:	ec                   	in     (%dx),%al
   185b6:	eb 00                	jmp    185b8 <hd_init+0x5e>
   185b8:	eb 00                	jmp    185ba <hd_init+0x60>
   185ba:	88 44 24 0e          	mov    %al,0xe(%esp)
   185be:	0f b6 44 24 0e       	movzbl 0xe(%esp),%eax
   185c3:	0f b6 c0             	movzbl %al,%eax
   185c6:	25 bf 00 00 00       	and    $0xbf,%eax
   185cb:	ba a1 00 00 00       	mov    $0xa1,%edx
   185d0:	ee                   	out    %al,(%dx)
}
   185d1:	90                   	nop
   185d2:	83 c4 10             	add    $0x10,%esp
   185d5:	5b                   	pop    %ebx
   185d6:	c3                   	ret    

000185d7 <memcpy>:
}

// 内存块复制.从源地址src处开始复制n个字节到目的地址dest处.
// 参数:dest - 复制的目的地址,src - 复制的源地址,n - 复制字节数.
static inline void * memcpy(void * dest, const void * src, int n)
{
   185d7:	57                   	push   %edi
   185d8:	56                   	push   %esi
   185d9:	53                   	push   %ebx
__asm__(
   185da:	8b 44 24 18          	mov    0x18(%esp),%eax
   185de:	8b 54 24 14          	mov    0x14(%esp),%edx
   185e2:	8b 5c 24 10          	mov    0x10(%esp),%ebx
   185e6:	89 c1                	mov    %eax,%ecx
   185e8:	89 d6                	mov    %edx,%esi
   185ea:	89 df                	mov    %ebx,%edi
   185ec:	fc                   	cld    
   185ed:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
	"cld\n\t"												// 清方向位
	"rep\n\t"												// 重复执行复制ecx个字节.
	"movsb"													// 从ds:[esi]到es:[edi],esi++,edi++.
	::"c" (n), "S" (src), "D" (dest)
	:);
return dest;												// 返回目的地址.
   185ef:	8b 44 24 10          	mov    0x10(%esp),%eax
}
   185f3:	5b                   	pop    %ebx
   185f4:	5e                   	pop    %esi
   185f5:	5f                   	pop    %edi
   185f6:	c3                   	ret    

000185f7 <unlock_buffer>:
static void (DEVICE_REQUEST)(void);

// 解锁指定的缓冲块.
// 如果指定缓冲块bh并没有被上锁,则显示警告信息.否则将该缓冲块解锁,并唤醒等待该缓冲块的进程.此为内嵌函数.参数是缓冲块头指针.
static inline void unlock_buffer(struct buffer_head * bh)
{
   185f7:	83 ec 0c             	sub    $0xc,%esp
	if (!bh->b_lock)
   185fa:	8b 44 24 10          	mov    0x10(%esp),%eax
   185fe:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   18602:	84 c0                	test   %al,%al
   18604:	75 10                	jne    18616 <unlock_buffer+0x1f>
		printk(DEVICE_NAME ": free buffer being unlocked\n");
   18606:	83 ec 0c             	sub    $0xc,%esp
   18609:	68 44 43 02 00       	push   $0x24344
   1860e:	e8 34 06 ff ff       	call   8c47 <printk>
   18613:	83 c4 10             	add    $0x10,%esp
	bh->b_lock = 0;
   18616:	8b 44 24 10          	mov    0x10(%esp),%eax
   1861a:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
	wake_up(&bh->b_wait);
   1861e:	8b 44 24 10          	mov    0x10(%esp),%eax
   18622:	83 c0 10             	add    $0x10,%eax
   18625:	83 ec 0c             	sub    $0xc,%esp
   18628:	50                   	push   %eax
   18629:	e8 21 eb fe ff       	call   714f <wake_up>
   1862e:	83 c4 10             	add    $0x10,%esp
}
   18631:	90                   	nop
   18632:	83 c4 0c             	add    $0xc,%esp
   18635:	c3                   	ret    

00018636 <end_request>:
// 参数uptodate是更新标志.
// 首先关闭指定块设备,然后检查此次读写缓冲区是否有效.如果有效则根据参数值设置缓冲区数据更新标志,并解锁该缓冲区.如果更新标志参数值是0,
// 表示此次请求项的操作失败,因此显示相关块设备IO错误信息.最后,唤醒等待该请求项的进程以及等待空闲请求项出现的进程,释放并从请求链表
// 中删除本请求项,并把当前请求项指针指向下一请求项.
static inline void end_request(int uptodate)
{
   18636:	83 ec 0c             	sub    $0xc,%esp
	DEVICE_OFF(CURRENT->dev);							// 关闭设备
	if (CURRENT->bh) {									// CURRENT为当前请求结构项指针
   18639:	a1 0c 11 03 00       	mov    0x3110c,%eax
   1863e:	8b 40 1c             	mov    0x1c(%eax),%eax
   18641:	85 c0                	test   %eax,%eax
   18643:	74 23                	je     18668 <end_request+0x32>
		CURRENT->bh->b_uptodate = uptodate;				// 置更新标志.
   18645:	a1 0c 11 03 00       	mov    0x3110c,%eax
   1864a:	8b 40 1c             	mov    0x1c(%eax),%eax
   1864d:	8b 54 24 10          	mov    0x10(%esp),%edx
   18651:	88 50 0a             	mov    %dl,0xa(%eax)
		unlock_buffer(CURRENT->bh);						// 解锁缓冲区.
   18654:	a1 0c 11 03 00       	mov    0x3110c,%eax
   18659:	8b 40 1c             	mov    0x1c(%eax),%eax
   1865c:	83 ec 0c             	sub    $0xc,%esp
   1865f:	50                   	push   %eax
   18660:	e8 92 ff ff ff       	call   185f7 <unlock_buffer>
   18665:	83 c4 10             	add    $0x10,%esp
	}
	if (!uptodate) {									// 若更新标志为0则显示出错信息.
   18668:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   1866d:	75 34                	jne    186a3 <end_request+0x6d>
		printk(DEVICE_NAME " I/O error\n\r");
   1866f:	83 ec 0c             	sub    $0xc,%esp
   18672:	68 69 43 02 00       	push   $0x24369
   18677:	e8 cb 05 ff ff       	call   8c47 <printk>
   1867c:	83 c4 10             	add    $0x10,%esp
		printk("dev %04x, block %d\n\r",CURRENT->dev,
			CURRENT->bh->b_blocknr);
   1867f:	a1 0c 11 03 00       	mov    0x3110c,%eax
   18684:	8b 40 1c             	mov    0x1c(%eax),%eax
		CURRENT->bh->b_uptodate = uptodate;				// 置更新标志.
		unlock_buffer(CURRENT->bh);						// 解锁缓冲区.
	}
	if (!uptodate) {									// 若更新标志为0则显示出错信息.
		printk(DEVICE_NAME " I/O error\n\r");
		printk("dev %04x, block %d\n\r",CURRENT->dev,
   18687:	8b 50 04             	mov    0x4(%eax),%edx
   1868a:	a1 0c 11 03 00       	mov    0x3110c,%eax
   1868f:	8b 00                	mov    (%eax),%eax
   18691:	83 ec 04             	sub    $0x4,%esp
   18694:	52                   	push   %edx
   18695:	50                   	push   %eax
   18696:	68 7d 43 02 00       	push   $0x2437d
   1869b:	e8 a7 05 ff ff       	call   8c47 <printk>
   186a0:	83 c4 10             	add    $0x10,%esp
			CURRENT->bh->b_blocknr);
	}
	wake_up(&CURRENT->waiting);							// 唤醒等待该请求项的进程.
   186a3:	a1 0c 11 03 00       	mov    0x3110c,%eax
   186a8:	83 c0 18             	add    $0x18,%eax
   186ab:	83 ec 0c             	sub    $0xc,%esp
   186ae:	50                   	push   %eax
   186af:	e8 9b ea fe ff       	call   714f <wake_up>
   186b4:	83 c4 10             	add    $0x10,%esp
	wake_up(&wait_for_request);							// 唤醒等待空闲请求项的进程.
   186b7:	83 ec 0c             	sub    $0xc,%esp
   186ba:	68 e0 10 03 00       	push   $0x310e0
   186bf:	e8 8b ea fe ff       	call   714f <wake_up>
   186c4:	83 c4 10             	add    $0x10,%esp
	CURRENT->dev = -1;									// 释放该请求项.
   186c7:	a1 0c 11 03 00       	mov    0x3110c,%eax
   186cc:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	CURRENT = CURRENT->next;							// 指向下一请求项.
   186d2:	a1 0c 11 03 00       	mov    0x3110c,%eax
   186d7:	8b 40 20             	mov    0x20(%eax),%eax
   186da:	a3 0c 11 03 00       	mov    %eax,0x3110c
}
   186df:	90                   	nop
   186e0:	83 c4 0c             	add    $0xc,%esp
   186e3:	c3                   	ret    

000186e4 <do_rd_request>:
// 添加到rd的链表中之后,就会调用该函数对rd当前请求项进行处理.该函数首先计算当前请求项中指定起始扇区对应虚拟盘所处内存
// 的起始位置addr和要求的扇区数对应的字节长度值len,然后根据请求项中的命令进行操作.若是写命令WRITE,就把请求项所指缓
// 冲区中的数据直接复制到内存位置addr处。若是读操作作反之。数据复制完成后即可直接调用end_request()对本次请求项作结束
// 处理。然后跳转到函数开始处再去处理下一个请求项。若已没有请求项则退出。
void do_rd_request(void)
{
   186e4:	83 ec 1c             	sub    $0x1c,%esp
	char	*addr;

	// 首先检测请求项的合法性,若已没有请求项则退出(参见blk.h).然后计算请求项处理的虚拟盘中起始扇区在物理内存中对应的地址
	// addr和占用的内存字节长度值len.下句用于取得请求项中的起始扇区对应的内存起始位置和内存长度.其中sector<<9表示
	// sector * 512,换算成字节值.CURRENT被定义为(blk_dev[MAJOR_NR].current_request).
	INIT_REQUEST;
   186e7:	a1 0c 11 03 00       	mov    0x3110c,%eax
   186ec:	85 c0                	test   %eax,%eax
   186ee:	0f 84 25 01 00 00    	je     18819 <do_rd_request+0x135>
   186f4:	a1 0c 11 03 00       	mov    0x3110c,%eax
   186f9:	8b 00                	mov    (%eax),%eax
   186fb:	c1 e8 08             	shr    $0x8,%eax
   186fe:	83 f8 01             	cmp    $0x1,%eax
   18701:	74 10                	je     18713 <do_rd_request+0x2f>
   18703:	83 ec 0c             	sub    $0xc,%esp
   18706:	68 94 43 02 00       	push   $0x24394
   1870b:	e8 f8 04 ff ff       	call   8c08 <panic>
   18710:	83 c4 10             	add    $0x10,%esp
   18713:	a1 0c 11 03 00       	mov    0x3110c,%eax
   18718:	8b 40 1c             	mov    0x1c(%eax),%eax
   1871b:	85 c0                	test   %eax,%eax
   1871d:	74 20                	je     1873f <do_rd_request+0x5b>
   1871f:	a1 0c 11 03 00       	mov    0x3110c,%eax
   18724:	8b 40 1c             	mov    0x1c(%eax),%eax
   18727:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   1872b:	84 c0                	test   %al,%al
   1872d:	75 10                	jne    1873f <do_rd_request+0x5b>
   1872f:	83 ec 0c             	sub    $0xc,%esp
   18732:	68 b4 43 02 00       	push   $0x243b4
   18737:	e8 cc 04 ff ff       	call   8c08 <panic>
   1873c:	83 c4 10             	add    $0x10,%esp
	addr = rd_start + (CURRENT->sector << 9);
   1873f:	8b 15 00 18 04 00    	mov    0x41800,%edx
   18745:	a1 0c 11 03 00       	mov    0x3110c,%eax
   1874a:	8b 40 0c             	mov    0xc(%eax),%eax
   1874d:	c1 e0 09             	shl    $0x9,%eax
   18750:	01 d0                	add    %edx,%eax
   18752:	89 44 24 0c          	mov    %eax,0xc(%esp)
	len = CURRENT->nr_sectors << 9;
   18756:	a1 0c 11 03 00       	mov    0x3110c,%eax
   1875b:	8b 40 10             	mov    0x10(%eax),%eax
   1875e:	c1 e0 09             	shl    $0x9,%eax
   18761:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 如果当前请求项中子设备号不为1或者对应内存起始位置大于虚拟盘末尾，则结束该请求项，并跳转到repeat处去处理下一个虚拟
	// 盘请求项。标号repeat定义在宏INIT_REQUEST内，位于宏的开始处，参见blk.h文件。
	if ((MINOR(CURRENT->dev) != 1) || (addr + len > rd_start + rd_length)) {
   18765:	a1 0c 11 03 00       	mov    0x3110c,%eax
   1876a:	8b 00                	mov    (%eax),%eax
   1876c:	0f b6 c0             	movzbl %al,%eax
   1876f:	83 f8 01             	cmp    $0x1,%eax
   18772:	75 1c                	jne    18790 <do_rd_request+0xac>
   18774:	8b 54 24 08          	mov    0x8(%esp),%edx
   18778:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1877c:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1877f:	a1 00 18 04 00       	mov    0x41800,%eax
   18784:	8b 15 6c 12 03 00    	mov    0x3126c,%edx
   1878a:	01 d0                	add    %edx,%eax
   1878c:	39 c1                	cmp    %eax,%ecx
   1878e:	76 12                	jbe    187a2 <do_rd_request+0xbe>
		end_request(0);
   18790:	83 ec 0c             	sub    $0xc,%esp
   18793:	6a 00                	push   $0x0
   18795:	e8 9c fe ff ff       	call   18636 <end_request>
   1879a:	83 c4 10             	add    $0x10,%esp
		goto repeat;
   1879d:	e9 45 ff ff ff       	jmp    186e7 <do_rd_request+0x3>
	}
	// 然后进行实际的读写操作。如果是写命令(WRITE)，则将请求项中缓冲区的内容复制到地址addr处，长度为len字节。如果是读命
	// 令(READ)，则将addr开始的内存内容复制到请求项缓冲区中，长度为len字节。否则显示命令不存在，死机。
	if (CURRENT-> cmd == WRITE) {
   187a2:	a1 0c 11 03 00       	mov    0x3110c,%eax
   187a7:	8b 40 04             	mov    0x4(%eax),%eax
   187aa:	83 f8 01             	cmp    $0x1,%eax
   187ad:	75 1e                	jne    187cd <do_rd_request+0xe9>
		(void ) memcpy(addr,
			      CURRENT->buffer,
   187af:	a1 0c 11 03 00       	mov    0x3110c,%eax
   187b4:	8b 40 14             	mov    0x14(%eax),%eax
		goto repeat;
	}
	// 然后进行实际的读写操作。如果是写命令(WRITE)，则将请求项中缓冲区的内容复制到地址addr处，长度为len字节。如果是读命
	// 令(READ)，则将addr开始的内存内容复制到请求项缓冲区中，长度为len字节。否则显示命令不存在，死机。
	if (CURRENT-> cmd == WRITE) {
		(void ) memcpy(addr,
   187b7:	83 ec 04             	sub    $0x4,%esp
   187ba:	ff 74 24 0c          	pushl  0xc(%esp)
   187be:	50                   	push   %eax
   187bf:	ff 74 24 18          	pushl  0x18(%esp)
   187c3:	e8 0f fe ff ff       	call   185d7 <memcpy>
   187c8:	83 c4 10             	add    $0x10,%esp
   187cb:	eb 3a                	jmp    18807 <do_rd_request+0x123>
			      CURRENT->buffer,
			      len);
	} else if (CURRENT->cmd == READ) {
   187cd:	a1 0c 11 03 00       	mov    0x3110c,%eax
   187d2:	8b 40 04             	mov    0x4(%eax),%eax
   187d5:	85 c0                	test   %eax,%eax
   187d7:	75 1e                	jne    187f7 <do_rd_request+0x113>
		(void) memcpy(CURRENT->buffer,
   187d9:	a1 0c 11 03 00       	mov    0x3110c,%eax
   187de:	8b 40 14             	mov    0x14(%eax),%eax
   187e1:	83 ec 04             	sub    $0x4,%esp
   187e4:	ff 74 24 0c          	pushl  0xc(%esp)
   187e8:	ff 74 24 14          	pushl  0x14(%esp)
   187ec:	50                   	push   %eax
   187ed:	e8 e5 fd ff ff       	call   185d7 <memcpy>
   187f2:	83 c4 10             	add    $0x10,%esp
   187f5:	eb 10                	jmp    18807 <do_rd_request+0x123>
			      addr,
			      len);
	} else
		panic("unknown ramdisk-command");
   187f7:	83 ec 0c             	sub    $0xc,%esp
   187fa:	68 ce 43 02 00       	push   $0x243ce
   187ff:	e8 04 04 ff ff       	call   8c08 <panic>
   18804:	83 c4 10             	add    $0x10,%esp
	// 然后在请求项成功后处理，置更新标志。并继续处理本设备的下一请求项。
	end_request(1);
   18807:	83 ec 0c             	sub    $0xc,%esp
   1880a:	6a 01                	push   $0x1
   1880c:	e8 25 fe ff ff       	call   18636 <end_request>
   18811:	83 c4 10             	add    $0x10,%esp
	goto repeat;
   18814:	e9 ce fe ff ff       	jmp    186e7 <do_rd_request+0x3>
	char	*addr;

	// 首先检测请求项的合法性,若已没有请求项则退出(参见blk.h).然后计算请求项处理的虚拟盘中起始扇区在物理内存中对应的地址
	// addr和占用的内存字节长度值len.下句用于取得请求项中的起始扇区对应的内存起始位置和内存长度.其中sector<<9表示
	// sector * 512,换算成字节值.CURRENT被定义为(blk_dev[MAJOR_NR].current_request).
	INIT_REQUEST;
   18819:	90                   	nop
	} else
		panic("unknown ramdisk-command");
	// 然后在请求项成功后处理，置更新标志。并继续处理本设备的下一请求项。
	end_request(1);
	goto repeat;
}
   1881a:	83 c4 1c             	add    $0x1c,%esp
   1881d:	c3                   	ret    

0001881e <rd_init>:
// 该函数首先设置虚拟盘设备的请求项处理函数指针指向do_rd_request(),然后确定虚拟盘在物理内存中的起始地址,占用字节长度
// 值.并对整个虚拟盘区清零.最后返回盘区长度.当linux/Makefile文件中设置过RAMDISK值不为零时,表示系统中会创建RAM虚拟盘
// 设备.在这种情况下的内核初始化过程中,本函数就会被调用(init/main.c).该函数在第2个参数length会被赋值成RAMDISK*1024
// 单位为字节.
long rd_init(long mem_start, int length)
{
   1881e:	83 ec 10             	sub    $0x10,%esp
	int	i;
	char	*cp;

	blk_dev[MAJOR_NR].request_fn = DEVICE_REQUEST;
   18821:	c7 05 08 11 03 00 e4 	movl   $0x186e4,0x31108
   18828:	86 01 00 
	rd_start = (char *) mem_start;
   1882b:	8b 44 24 14          	mov    0x14(%esp),%eax
   1882f:	a3 00 18 04 00       	mov    %eax,0x41800
	rd_length = length;
   18834:	8b 44 24 18          	mov    0x18(%esp),%eax
   18838:	a3 6c 12 03 00       	mov    %eax,0x3126c
	cp = rd_start;
   1883d:	a1 00 18 04 00       	mov    0x41800,%eax
   18842:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 将内存空间清零
	for (i = 0; i < length; i++)
   18846:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   1884d:	00 
   1884e:	eb 13                	jmp    18863 <rd_init+0x45>
		*cp++ = '\0';
   18850:	8b 44 24 08          	mov    0x8(%esp),%eax
   18854:	8d 50 01             	lea    0x1(%eax),%edx
   18857:	89 54 24 08          	mov    %edx,0x8(%esp)
   1885b:	c6 00 00             	movb   $0x0,(%eax)
	blk_dev[MAJOR_NR].request_fn = DEVICE_REQUEST;
	rd_start = (char *) mem_start;
	rd_length = length;
	cp = rd_start;
	// 将内存空间清零
	for (i = 0; i < length; i++)
   1885e:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   18863:	8b 44 24 0c          	mov    0xc(%esp),%eax
   18867:	3b 44 24 18          	cmp    0x18(%esp),%eax
   1886b:	7c e3                	jl     18850 <rd_init+0x32>
		*cp++ = '\0';
	return(length);
   1886d:	8b 44 24 18          	mov    0x18(%esp),%eax
}
   18871:	83 c4 10             	add    $0x10,%esp
   18874:	c3                   	ret    

00018875 <rd_load>:
 */
// 尝试根文件系统加载到虚拟盘中.
// 该函数将在内核设置函数setup()(hd.c)中被调用.另外,1磁盘块 = 1024字节.变量block=256表示根文件系统映像被存储于boot盘第
// 256磁盘块开始处.
void rd_load(void)
{
   18875:	81 ec 8c 00 00 00    	sub    $0x8c,%esp
	struct buffer_head *bh;								// 调整缓冲块头指针.
	struct super_block	s;								// 文件超级块结构.
	int		block = 256;								/* Start at block 256 */	/* 开始于256盘块 */
   1887b:	c7 44 24 78 00 01 00 	movl   $0x100,0x78(%esp)
   18882:	00 
	int		i = 1;
   18883:	c7 44 24 74 01 00 00 	movl   $0x1,0x74(%esp)
   1888a:	00 
	int		nblocks;									// 文件系统盘块总数.
	char		*cp;									/* Move pointer */

	// 首先检查虚拟盘的有效性和完整性.如果ramdisk的长度为零,则退出.否则显示ramdisk的大小以及内存起始位置.如果此时根文件设备不是软盘
	// 设备,则也退出.
	if (!rd_length)
   1888b:	a1 6c 12 03 00       	mov    0x3126c,%eax
   18890:	85 c0                	test   %eax,%eax
   18892:	0f 84 00 02 00 00    	je     18a98 <rd_load+0x223>
		return;
	printk("Ram disk: %d bytes, starting at 0x%x, dev = 0x%x \n", rd_length, (int) rd_start, ROOT_DEV);
   18898:	8b 15 cc 10 03 00    	mov    0x310cc,%edx
   1889e:	a1 00 18 04 00       	mov    0x41800,%eax
   188a3:	89 c1                	mov    %eax,%ecx
   188a5:	a1 6c 12 03 00       	mov    0x3126c,%eax
   188aa:	52                   	push   %edx
   188ab:	51                   	push   %ecx
   188ac:	50                   	push   %eax
   188ad:	68 e8 43 02 00       	push   $0x243e8
   188b2:	e8 90 03 ff ff       	call   8c47 <printk>
   188b7:	83 c4 10             	add    $0x10,%esp
	if (MAJOR(ROOT_DEV) != 2)
   188ba:	a1 cc 10 03 00       	mov    0x310cc,%eax
   188bf:	c1 e8 08             	shr    $0x8,%eax
   188c2:	83 f8 02             	cmp    $0x2,%eax
   188c5:	0f 85 d0 01 00 00    	jne    18a9b <rd_load+0x226>
		return;
	// 然后读根文件系统的基本参数.即读软盘块256+1,256和256+2.这里block+1是指磁盘上的超级块.breada()用于读取指定的数据块,并标出还需要读的块,
	// 然后返回含有数据块的缓冲区指针.如果返回NULL,则表示数据块不可读(fs/buffer.c).然后把缓冲区中的磁盘超级块(d_super_block是磁盘超级
	// 块结构)复制到s变量中,并释放缓冲区.接着我们开始对超级块的有效性进行判断.超级块中文件系统魔数不对,则说明加载的数据块不是MINIX文件
	// 系统,于是退出.
	bh = breada(ROOT_DEV, block + 1, block, block + 2, -1);
   188cb:	8b 44 24 78          	mov    0x78(%esp),%eax
   188cf:	8d 48 02             	lea    0x2(%eax),%ecx
   188d2:	8b 44 24 78          	mov    0x78(%esp),%eax
   188d6:	8d 50 01             	lea    0x1(%eax),%edx
   188d9:	a1 cc 10 03 00       	mov    0x310cc,%eax
   188de:	83 ec 0c             	sub    $0xc,%esp
   188e1:	6a ff                	push   $0xffffffff
   188e3:	51                   	push   %ecx
   188e4:	ff b4 24 8c 00 00 00 	pushl  0x8c(%esp)
   188eb:	52                   	push   %edx
   188ec:	50                   	push   %eax
   188ed:	e8 b4 6f ff ff       	call   f8a6 <breada>
   188f2:	83 c4 20             	add    $0x20,%esp
   188f5:	89 44 24 7c          	mov    %eax,0x7c(%esp)
	if (!bh) {
   188f9:	83 7c 24 7c 00       	cmpl   $0x0,0x7c(%esp)
   188fe:	75 15                	jne    18915 <rd_load+0xa0>
		printk("Disk error while looking for ramdisk!\n");
   18900:	83 ec 0c             	sub    $0xc,%esp
   18903:	68 1c 44 02 00       	push   $0x2441c
   18908:	e8 3a 03 ff ff       	call   8c47 <printk>
   1890d:	83 c4 10             	add    $0x10,%esp
		return;
   18910:	e9 8a 01 00 00       	jmp    18a9f <rd_load+0x22a>
	}
	*((struct d_super_block *) &s) = *((struct d_super_block *) bh->b_data);
   18915:	89 e0                	mov    %esp,%eax
   18917:	8b 54 24 7c          	mov    0x7c(%esp),%edx
   1891b:	8b 12                	mov    (%edx),%edx
   1891d:	8b 0a                	mov    (%edx),%ecx
   1891f:	89 08                	mov    %ecx,(%eax)
   18921:	8b 4a 04             	mov    0x4(%edx),%ecx
   18924:	89 48 04             	mov    %ecx,0x4(%eax)
   18927:	8b 4a 08             	mov    0x8(%edx),%ecx
   1892a:	89 48 08             	mov    %ecx,0x8(%eax)
   1892d:	8b 4a 0c             	mov    0xc(%edx),%ecx
   18930:	89 48 0c             	mov    %ecx,0xc(%eax)
   18933:	8b 52 10             	mov    0x10(%edx),%edx
   18936:	89 50 10             	mov    %edx,0x10(%eax)
	brelse(bh);
   18939:	83 ec 0c             	sub    $0xc,%esp
   1893c:	ff b4 24 88 00 00 00 	pushl  0x88(%esp)
   18943:	e8 48 6d ff ff       	call   f690 <brelse>
   18948:	83 c4 10             	add    $0x10,%esp
	if (s.s_magic != SUPER_MAGIC)
   1894b:	0f b7 44 24 10       	movzwl 0x10(%esp),%eax
   18950:	66 3d 7f 13          	cmp    $0x137f,%ax
   18954:	0f 85 44 01 00 00    	jne    18a9e <rd_load+0x229>
		return;
	// 然后我们试图把整个根文件系统读入在内存虚拟盘区中.对于一个文件系统来说,其超级块结构的s_nzones字段中保存着总逻辑块数(或称为区段数).一个
	// 逻辑块中含有的数据块数则由字段s_log_zone_size指定.因此文件系统中的数据块总数nblocks就等于(逻辑块数 *2^(每区段块数的次方)),即
	// nblocks=(s_nzones * 2^s_log_zone_size).如果遇到文件系统中数据块总数大于内存虚拟盘所能容纳的块数的情况,则不能执行加载操作,而只能显示
	// 出错信息并返回.
	nblocks = s.s_nzones << s.s_log_zone_size;
   1895a:	0f b7 44 24 02       	movzwl 0x2(%esp),%eax
   1895f:	0f b7 d0             	movzwl %ax,%edx
   18962:	0f b7 44 24 0a       	movzwl 0xa(%esp),%eax
   18967:	0f b7 c0             	movzwl %ax,%eax
   1896a:	89 c1                	mov    %eax,%ecx
   1896c:	d3 e2                	shl    %cl,%edx
   1896e:	89 d0                	mov    %edx,%eax
   18970:	89 44 24 70          	mov    %eax,0x70(%esp)
	if (nblocks > (rd_length >> BLOCK_SIZE_BITS)) {
   18974:	a1 6c 12 03 00       	mov    0x3126c,%eax
   18979:	c1 f8 0a             	sar    $0xa,%eax
   1897c:	3b 44 24 70          	cmp    0x70(%esp),%eax
   18980:	7d 22                	jge    189a4 <rd_load+0x12f>
		printk("Ram disk image too big!  (%d blocks, %d avail)\n",
   18982:	a1 6c 12 03 00       	mov    0x3126c,%eax
   18987:	c1 f8 0a             	sar    $0xa,%eax
   1898a:	83 ec 04             	sub    $0x4,%esp
   1898d:	50                   	push   %eax
   1898e:	ff 74 24 78          	pushl  0x78(%esp)
   18992:	68 44 44 02 00       	push   $0x24444
   18997:	e8 ab 02 ff ff       	call   8c47 <printk>
   1899c:	83 c4 10             	add    $0x10,%esp
			nblocks, rd_length >> BLOCK_SIZE_BITS);
		return;
   1899f:	e9 fb 00 00 00       	jmp    18a9f <rd_load+0x22a>
	}
	// 若虚拟盘能容纳得下文件系统总数据块数,则我们显示加载数据信息,并让cp指向内存虚拟盘起始处,然后开始执行循环操作将磁盘上根文件系统映像加载到
	// 虚拟盘上.在操作过程中,如果一次需要加载的盘块数大于2块,我们就是用超前预读函数breada(),否则就使用bread()函数进行单块读取.若在读盘过程
	// 中出现I/O操作错误,就只能放弃加载过程返回.所读取的磁盘块会使用memcpy()函数从高速缓冲区中复制到内存虚拟盘相应位置处,同时显示已加载的块数.
	// 显示字符串中的八进制数'\010'表示显示一个制表符.
	printk("Loading %d bytes into ram disk... (0k)",
   189a4:	8b 44 24 70          	mov    0x70(%esp),%eax
   189a8:	c1 e0 0a             	shl    $0xa,%eax
   189ab:	83 ec 08             	sub    $0x8,%esp
   189ae:	50                   	push   %eax
   189af:	68 74 44 02 00       	push   $0x24474
   189b4:	e8 8e 02 ff ff       	call   8c47 <printk>
   189b9:	83 c4 10             	add    $0x10,%esp
		nblocks << BLOCK_SIZE_BITS);
	cp = rd_start;
   189bc:	a1 00 18 04 00       	mov    0x41800,%eax
   189c1:	89 44 24 6c          	mov    %eax,0x6c(%esp)
	while (nblocks) {
   189c5:	e9 b7 00 00 00       	jmp    18a81 <rd_load+0x20c>
		if (nblocks > 2)  								// 若读取块数多于2块则采用超前预读.
   189ca:	83 7c 24 70 02       	cmpl   $0x2,0x70(%esp)
   189cf:	7e 30                	jle    18a01 <rd_load+0x18c>
			bh = breada(ROOT_DEV, block, block + 1, block + 2, -1);
   189d1:	8b 44 24 78          	mov    0x78(%esp),%eax
   189d5:	8d 48 02             	lea    0x2(%eax),%ecx
   189d8:	8b 44 24 78          	mov    0x78(%esp),%eax
   189dc:	8d 50 01             	lea    0x1(%eax),%edx
   189df:	a1 cc 10 03 00       	mov    0x310cc,%eax
   189e4:	83 ec 0c             	sub    $0xc,%esp
   189e7:	6a ff                	push   $0xffffffff
   189e9:	51                   	push   %ecx
   189ea:	52                   	push   %edx
   189eb:	ff b4 24 90 00 00 00 	pushl  0x90(%esp)
   189f2:	50                   	push   %eax
   189f3:	e8 ae 6e ff ff       	call   f8a6 <breada>
   189f8:	83 c4 20             	add    $0x20,%esp
   189fb:	89 44 24 7c          	mov    %eax,0x7c(%esp)
   189ff:	eb 1c                	jmp    18a1d <rd_load+0x1a8>
		else											// 否则就单块读取.
			bh = bread(ROOT_DEV, block);
   18a01:	a1 cc 10 03 00       	mov    0x310cc,%eax
   18a06:	83 ec 08             	sub    $0x8,%esp
   18a09:	ff b4 24 80 00 00 00 	pushl  0x80(%esp)
   18a10:	50                   	push   %eax
   18a11:	e8 d0 6c ff ff       	call   f6e6 <bread>
   18a16:	83 c4 10             	add    $0x10,%esp
   18a19:	89 44 24 7c          	mov    %eax,0x7c(%esp)
		if (!bh) {
   18a1d:	83 7c 24 7c 00       	cmpl   $0x0,0x7c(%esp)
   18a22:	75 19                	jne    18a3d <rd_load+0x1c8>
			printk("I/O error on block %d, aborting load\n",
   18a24:	83 ec 08             	sub    $0x8,%esp
   18a27:	ff b4 24 80 00 00 00 	pushl  0x80(%esp)
   18a2e:	68 9c 44 02 00       	push   $0x2449c
   18a33:	e8 0f 02 ff ff       	call   8c47 <printk>
   18a38:	83 c4 10             	add    $0x10,%esp
				block);
			return;
   18a3b:	eb 62                	jmp    18a9f <rd_load+0x22a>
		}
		(void) memcpy(cp, bh->b_data, BLOCK_SIZE);		// 复制到cp处.
   18a3d:	8b 44 24 7c          	mov    0x7c(%esp),%eax
   18a41:	8b 00                	mov    (%eax),%eax
   18a43:	83 ec 04             	sub    $0x4,%esp
   18a46:	68 00 04 00 00       	push   $0x400
   18a4b:	50                   	push   %eax
   18a4c:	ff 74 24 78          	pushl  0x78(%esp)
   18a50:	e8 82 fb ff ff       	call   185d7 <memcpy>
   18a55:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   18a58:	83 ec 0c             	sub    $0xc,%esp
   18a5b:	ff b4 24 88 00 00 00 	pushl  0x88(%esp)
   18a62:	e8 29 6c ff ff       	call   f690 <brelse>
   18a67:	83 c4 10             	add    $0x10,%esp
		cp += BLOCK_SIZE;								// 虚拟盘指针前移.
   18a6a:	81 44 24 6c 00 04 00 	addl   $0x400,0x6c(%esp)
   18a71:	00 
		block++;
   18a72:	83 44 24 78 01       	addl   $0x1,0x78(%esp)
		nblocks--;
   18a77:	83 6c 24 70 01       	subl   $0x1,0x70(%esp)
		i++;
   18a7c:	83 44 24 74 01       	addl   $0x1,0x74(%esp)
	// 中出现I/O操作错误,就只能放弃加载过程返回.所读取的磁盘块会使用memcpy()函数从高速缓冲区中复制到内存虚拟盘相应位置处,同时显示已加载的块数.
	// 显示字符串中的八进制数'\010'表示显示一个制表符.
	printk("Loading %d bytes into ram disk... (0k)",
		nblocks << BLOCK_SIZE_BITS);
	cp = rd_start;
	while (nblocks) {
   18a81:	83 7c 24 70 00       	cmpl   $0x0,0x70(%esp)
   18a86:	0f 85 3e ff ff ff    	jne    189ca <rd_load+0x155>
		block++;
		nblocks--;
		i++;
	}
	// 当boot盘中从256盘块开始的整个文件系统加载完毕后,我们显示"done",并把目前根文件设备号修改成虚拟盘的设备号0x0101, 返回.
	ROOT_DEV = 0x0101;
   18a8c:	c7 05 cc 10 03 00 01 	movl   $0x101,0x310cc
   18a93:	01 00 00 
   18a96:	eb 07                	jmp    18a9f <rd_load+0x22a>
	char		*cp;									/* Move pointer */

	// 首先检查虚拟盘的有效性和完整性.如果ramdisk的长度为零,则退出.否则显示ramdisk的大小以及内存起始位置.如果此时根文件设备不是软盘
	// 设备,则也退出.
	if (!rd_length)
		return;
   18a98:	90                   	nop
   18a99:	eb 04                	jmp    18a9f <rd_load+0x22a>
	printk("Ram disk: %d bytes, starting at 0x%x, dev = 0x%x \n", rd_length, (int) rd_start, ROOT_DEV);
	if (MAJOR(ROOT_DEV) != 2)
		return;
   18a9b:	90                   	nop
   18a9c:	eb 01                	jmp    18a9f <rd_load+0x22a>
	*((struct d_super_block *) &s) = *((struct d_super_block *) bh->b_data);
	brelse(bh);
	if (s.s_magic != SUPER_MAGIC)
		/* No ram disk image present, assume normal floppy boot */
        /* 磁盘中没有ramdisk映像文件,退出去执行通常的软盘引导 */
		return;
   18a9e:	90                   	nop
		nblocks--;
		i++;
	}
	// 当boot盘中从256盘块开始的整个文件系统加载完毕后,我们显示"done",并把目前根文件设备号修改成虚拟盘的设备号0x0101, 返回.
	ROOT_DEV = 0x0101;
}
   18a9f:	81 c4 8c 00 00 00    	add    $0x8c,%esp
   18aa5:	c3                   	ret    

00018aa6 <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
   18aa6:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   18aa7:	8b 44 24 08          	mov    0x8(%esp),%eax
   18aab:	64 8a 00             	mov    %fs:(%eax),%al
   18aae:	89 c3                	mov    %eax,%ebx
	return _v;
   18ab0:	89 d8                	mov    %ebx,%eax
}
   18ab2:	5b                   	pop    %ebx
   18ab3:	c3                   	ret    

00018ab4 <put_fs_byte>:

//// 将一字节存放在fs段中指定内存地址处.
// 参数:val - 字节值;addr - 内存地址.
// %0 - 寄存器(字节值val);%1 - (内存地址addr).
static inline void put_fs_byte(char val,char *addr)
{
   18ab4:	83 ec 04             	sub    $0x4,%esp
   18ab7:	8b 44 24 08          	mov    0x8(%esp),%eax
   18abb:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   18abe:	0f b6 04 24          	movzbl (%esp),%eax
   18ac2:	8b 54 24 0c          	mov    0xc(%esp),%edx
   18ac6:	64 88 02             	mov    %al,%fs:(%edx)
}
   18ac9:	90                   	nop
   18aca:	83 c4 04             	add    $0x4,%esp
   18acd:	c3                   	ret    

00018ace <change_console>:

// 改变前台控制台.
// 将前台控制台设定为指定的虚拟控制台
// 参数:new_console - 指定的新控制台号
void change_console(unsigned int new_console)
{
   18ace:	83 ec 0c             	sub    $0xc,%esp
	// 如果参数指定的控制台已经在前台或者参数无效,则退出.否则设置当前前台控制台号,同时更新table_list[]中的前台控制台读/写队列结构地址.
	// 最后更新当前前台控制台屏幕.
	if (new_console == fg_console || new_console >= NR_CONSOLES)
   18ad1:	a1 80 12 03 00       	mov    0x31280,%eax
   18ad6:	39 44 24 10          	cmp    %eax,0x10(%esp)
   18ada:	74 4a                	je     18b26 <change_console+0x58>
   18adc:	a1 20 ee 03 00       	mov    0x3ee20,%eax
   18ae1:	39 44 24 10          	cmp    %eax,0x10(%esp)
   18ae5:	73 3f                	jae    18b26 <change_console+0x58>
		return;
	fg_console = new_console;
   18ae7:	8b 44 24 10          	mov    0x10(%esp),%eax
   18aeb:	a3 80 12 03 00       	mov    %eax,0x31280
	table_list[0] = con_queues + 0 + fg_console * 3;
   18af0:	a1 80 12 03 00       	mov    0x31280,%eax
   18af5:	69 c0 30 0c 00 00    	imul   $0xc30,%eax,%eax
   18afb:	05 a0 12 03 00       	add    $0x312a0,%eax
   18b00:	a3 24 e5 02 00       	mov    %eax,0x2e524
	table_list[1] = con_queues + 1 + fg_console * 3;
   18b05:	a1 80 12 03 00       	mov    0x31280,%eax
   18b0a:	69 c0 30 0c 00 00    	imul   $0xc30,%eax,%eax
   18b10:	05 10 04 00 00       	add    $0x410,%eax
   18b15:	05 a0 12 03 00       	add    $0x312a0,%eax
   18b1a:	a3 28 e5 02 00       	mov    %eax,0x2e528
	update_screen();
   18b1f:	e8 a8 48 00 00       	call   1d3cc <update_screen>
   18b24:	eb 01                	jmp    18b27 <change_console+0x59>
void change_console(unsigned int new_console)
{
	// 如果参数指定的控制台已经在前台或者参数无效,则退出.否则设置当前前台控制台号,同时更新table_list[]中的前台控制台读/写队列结构地址.
	// 最后更新当前前台控制台屏幕.
	if (new_console == fg_console || new_console >= NR_CONSOLES)
		return;
   18b26:	90                   	nop
	fg_console = new_console;
	table_list[0] = con_queues + 0 + fg_console * 3;
	table_list[1] = con_queues + 1 + fg_console * 3;
	update_screen();
}
   18b27:	83 c4 0c             	add    $0xc,%esp
   18b2a:	c3                   	ret    

00018b2b <sleep_if_empty>:
// 如果队列缓冲区空则让进程进入可中断睡眠状态.
// 参数:queue - 指定队列的指针.
// 进程在取队列缓冲区中字符之前需要调用此函数加以验证.如果当前进程没有信号要处理,并且指定的队列缓冲区空,则让进程进入可中断睡眠状态,并
// 让队列的进程等待指针指向该进程.
static void sleep_if_empty(struct tty_queue * queue)
{
   18b2b:	83 ec 0c             	sub    $0xc,%esp
	cli();
   18b2e:	fa                   	cli    
	while (!(current->signal & ~current->blocked) && EMPTY(queue))
   18b2f:	eb 13                	jmp    18b44 <sleep_if_empty+0x19>
		interruptible_sleep_on(&queue->proc_list);
   18b31:	8b 44 24 10          	mov    0x10(%esp),%eax
   18b35:	83 c0 0c             	add    $0xc,%eax
   18b38:	83 ec 0c             	sub    $0xc,%esp
   18b3b:	50                   	push   %eax
   18b3c:	e8 dc e5 fe ff       	call   711d <interruptible_sleep_on>
   18b41:	83 c4 10             	add    $0x10,%esp
// 进程在取队列缓冲区中字符之前需要调用此函数加以验证.如果当前进程没有信号要处理,并且指定的队列缓冲区空,则让进程进入可中断睡眠状态,并
// 让队列的进程等待指针指向该进程.
static void sleep_if_empty(struct tty_queue * queue)
{
	cli();
	while (!(current->signal & ~current->blocked) && EMPTY(queue))
   18b44:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   18b49:	8b 50 0c             	mov    0xc(%eax),%edx
   18b4c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   18b51:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   18b57:	f7 d0                	not    %eax
   18b59:	21 d0                	and    %edx,%eax
   18b5b:	85 c0                	test   %eax,%eax
   18b5d:	75 12                	jne    18b71 <sleep_if_empty+0x46>
   18b5f:	8b 44 24 10          	mov    0x10(%esp),%eax
   18b63:	8b 50 04             	mov    0x4(%eax),%edx
   18b66:	8b 44 24 10          	mov    0x10(%esp),%eax
   18b6a:	8b 40 08             	mov    0x8(%eax),%eax
   18b6d:	39 c2                	cmp    %eax,%edx
   18b6f:	74 c0                	je     18b31 <sleep_if_empty+0x6>
		interruptible_sleep_on(&queue->proc_list);
	sti();
   18b71:	fb                   	sti    
}
   18b72:	90                   	nop
   18b73:	83 c4 0c             	add    $0xc,%esp
   18b76:	c3                   	ret    

00018b77 <sleep_if_full>:

// 若队列缓冲区满则让进程进入可中断的睡眠状态.
// 参数:queue - 指定队列的指针.
// 进程在往队列缓冲区中写入字符之前需要调用此函数判断队列的情况.
static void sleep_if_full(struct tty_queue * queue)
{
   18b77:	83 ec 0c             	sub    $0xc,%esp
	// 如果队列缓冲区不满则返回退出.否则若进程没有信号需要处理,并且队列缓冲区中空闲剩余区长度<128,则让进程进入可中断息状态,并让该队列的进程
	// 等待指针指向该进程.
	if (!FULL(queue))
   18b7a:	8b 44 24 10          	mov    0x10(%esp),%eax
   18b7e:	8b 50 08             	mov    0x8(%eax),%edx
   18b81:	8b 44 24 10          	mov    0x10(%esp),%eax
   18b85:	8b 40 04             	mov    0x4(%eax),%eax
   18b88:	29 c2                	sub    %eax,%edx
   18b8a:	89 d0                	mov    %edx,%eax
   18b8c:	83 e8 01             	sub    $0x1,%eax
   18b8f:	25 ff 03 00 00       	and    $0x3ff,%eax
   18b94:	85 c0                	test   %eax,%eax
   18b96:	75 53                	jne    18beb <sleep_if_full+0x74>
		return;
	cli();
   18b98:	fa                   	cli    
	while (!(current->signal & ~current->blocked) && LEFT(queue) < 128)
   18b99:	eb 13                	jmp    18bae <sleep_if_full+0x37>
		interruptible_sleep_on(&queue->proc_list);
   18b9b:	8b 44 24 10          	mov    0x10(%esp),%eax
   18b9f:	83 c0 0c             	add    $0xc,%eax
   18ba2:	83 ec 0c             	sub    $0xc,%esp
   18ba5:	50                   	push   %eax
   18ba6:	e8 72 e5 fe ff       	call   711d <interruptible_sleep_on>
   18bab:	83 c4 10             	add    $0x10,%esp
	// 如果队列缓冲区不满则返回退出.否则若进程没有信号需要处理,并且队列缓冲区中空闲剩余区长度<128,则让进程进入可中断息状态,并让该队列的进程
	// 等待指针指向该进程.
	if (!FULL(queue))
		return;
	cli();
	while (!(current->signal & ~current->blocked) && LEFT(queue) < 128)
   18bae:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   18bb3:	8b 50 0c             	mov    0xc(%eax),%edx
   18bb6:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   18bbb:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   18bc1:	f7 d0                	not    %eax
   18bc3:	21 d0                	and    %edx,%eax
   18bc5:	85 c0                	test   %eax,%eax
   18bc7:	75 1f                	jne    18be8 <sleep_if_full+0x71>
   18bc9:	8b 44 24 10          	mov    0x10(%esp),%eax
   18bcd:	8b 50 08             	mov    0x8(%eax),%edx
   18bd0:	8b 44 24 10          	mov    0x10(%esp),%eax
   18bd4:	8b 40 04             	mov    0x4(%eax),%eax
   18bd7:	29 c2                	sub    %eax,%edx
   18bd9:	89 d0                	mov    %edx,%eax
   18bdb:	83 e8 01             	sub    $0x1,%eax
   18bde:	25 ff 03 00 00       	and    $0x3ff,%eax
   18be3:	83 f8 7f             	cmp    $0x7f,%eax
   18be6:	76 b3                	jbe    18b9b <sleep_if_full+0x24>
		interruptible_sleep_on(&queue->proc_list);
	sti();
   18be8:	fb                   	sti    
   18be9:	eb 01                	jmp    18bec <sleep_if_full+0x75>
static void sleep_if_full(struct tty_queue * queue)
{
	// 如果队列缓冲区不满则返回退出.否则若进程没有信号需要处理,并且队列缓冲区中空闲剩余区长度<128,则让进程进入可中断息状态,并让该队列的进程
	// 等待指针指向该进程.
	if (!FULL(queue))
		return;
   18beb:	90                   	nop
	cli();
	while (!(current->signal & ~current->blocked) && LEFT(queue) < 128)
		interruptible_sleep_on(&queue->proc_list);
	sti();
}
   18bec:	83 c4 0c             	add    $0xc,%esp
   18bef:	c3                   	ret    

00018bf0 <wait_for_keypress>:

// 等待按键.
// 如果前台控制台读队列缓冲区空,则让进程进入可中断睡眠状态.
void wait_for_keypress(void)
{
   18bf0:	83 ec 0c             	sub    $0xc,%esp
	sleep_if_empty(tty_table[fg_console].secondary);
   18bf3:	a1 80 12 03 00       	mov    0x31280,%eax
   18bf8:	c1 e0 06             	shl    $0x6,%eax
   18bfb:	05 5c 18 04 00       	add    $0x4185c,%eax
   18c00:	8b 00                	mov    (%eax),%eax
   18c02:	83 ec 0c             	sub    $0xc,%esp
   18c05:	50                   	push   %eax
   18c06:	e8 20 ff ff ff       	call   18b2b <sleep_if_empty>
   18c0b:	83 c4 10             	add    $0x10,%esp
}
   18c0e:	90                   	nop
   18c0f:	83 c4 0c             	add    $0xc,%esp
   18c12:	c3                   	ret    

00018c13 <copy_to_cooked>:

// 复制成规范模式字符序列
// 根据终端termios结构中设置的各种标志,将指定tty同读队列缓冲区中的字符复制转换成规范模式(熟模式)字符并存放在辅助队列(规范模式队列)中.
// 参数:tty - 指定终端的tty结构指针.
void copy_to_cooked(struct tty_struct * tty)
{
   18c13:	83 ec 1c             	sub    $0x1c,%esp
	signed char c;

	// 首先检查当前终端tty结构中缓冲队列指针是否有效.如果三个队列指针都是NULL,则说明内核tty初始化函数有问题.
	if (!(tty->read_q || tty->write_q || tty->secondary)) {
   18c16:	8b 44 24 20          	mov    0x20(%esp),%eax
   18c1a:	8b 40 34             	mov    0x34(%eax),%eax
   18c1d:	85 c0                	test   %eax,%eax
   18c1f:	75 2b                	jne    18c4c <copy_to_cooked+0x39>
   18c21:	8b 44 24 20          	mov    0x20(%esp),%eax
   18c25:	8b 40 38             	mov    0x38(%eax),%eax
   18c28:	85 c0                	test   %eax,%eax
   18c2a:	75 20                	jne    18c4c <copy_to_cooked+0x39>
   18c2c:	8b 44 24 20          	mov    0x20(%esp),%eax
   18c30:	8b 40 3c             	mov    0x3c(%eax),%eax
   18c33:	85 c0                	test   %eax,%eax
   18c35:	75 15                	jne    18c4c <copy_to_cooked+0x39>
		printk("copy_to_cooked: missing queues\n\r");
   18c37:	83 ec 0c             	sub    $0xc,%esp
   18c3a:	68 e0 44 02 00       	push   $0x244e0
   18c3f:	e8 03 00 ff ff       	call   8c47 <printk>
   18c44:	83 c4 10             	add    $0x10,%esp
		return;
   18c47:	e9 36 07 00 00       	jmp    19382 <copy_to_cooked+0x76f>
	// 循环体中,如果此时读队列缓冲区已经取空或都辅助队列缓冲区已经放满字符,就退出循环体.否则程序就从读队列缓冲区尾指针处取一字符,并把尾指针前移
	// 一个字符位置.然后根据该字符代码值进行处理.
	// 另外,如果定义了_POSIX_VDISABLE(\0),那么在对字符处理过程中,若字符代码值等于_POSIX_VDISABLE的值时,表示禁止使用相应特殊控制字符的功能.
	while (1) {
		// 如果tty对应的读队列为空则直接立刻中断循环
		if (EMPTY(tty->read_q))
   18c4c:	8b 44 24 20          	mov    0x20(%esp),%eax
   18c50:	8b 40 34             	mov    0x34(%eax),%eax
   18c53:	8b 50 04             	mov    0x4(%eax),%edx
   18c56:	8b 44 24 20          	mov    0x20(%esp),%eax
   18c5a:	8b 40 34             	mov    0x34(%eax),%eax
   18c5d:	8b 40 08             	mov    0x8(%eax),%eax
   18c60:	39 c2                	cmp    %eax,%edx
   18c62:	0f 84 00 07 00 00    	je     19368 <copy_to_cooked+0x755>
			break;
		// 如果tty对应的第三个队列为空则直接立刻中断循环
		if (FULL(tty->secondary))
   18c68:	8b 44 24 20          	mov    0x20(%esp),%eax
   18c6c:	8b 40 3c             	mov    0x3c(%eax),%eax
   18c6f:	8b 50 08             	mov    0x8(%eax),%edx
   18c72:	8b 44 24 20          	mov    0x20(%esp),%eax
   18c76:	8b 40 3c             	mov    0x3c(%eax),%eax
   18c79:	8b 40 04             	mov    0x4(%eax),%eax
   18c7c:	29 c2                	sub    %eax,%edx
   18c7e:	89 d0                	mov    %edx,%eax
   18c80:	83 e8 01             	sub    $0x1,%eax
   18c83:	25 ff 03 00 00       	and    $0x3ff,%eax
   18c88:	85 c0                	test   %eax,%eax
   18c8a:	0f 84 db 06 00 00    	je     1936b <copy_to_cooked+0x758>
			break;
		GETCH(tty->read_q, c);								// 取一字符到c,并前移尾指针
   18c90:	8b 44 24 20          	mov    0x20(%esp),%eax
   18c94:	8b 50 34             	mov    0x34(%eax),%edx
   18c97:	8b 44 24 20          	mov    0x20(%esp),%eax
   18c9b:	8b 40 34             	mov    0x34(%eax),%eax
   18c9e:	8b 40 08             	mov    0x8(%eax),%eax
   18ca1:	0f b6 44 02 10       	movzbl 0x10(%edx,%eax,1),%eax
   18ca6:	88 44 24 0f          	mov    %al,0xf(%esp)
   18caa:	8b 44 24 20          	mov    0x20(%esp),%eax
   18cae:	8b 40 34             	mov    0x34(%eax),%eax
   18cb1:	8b 54 24 20          	mov    0x20(%esp),%edx
   18cb5:	8b 52 34             	mov    0x34(%edx),%edx
   18cb8:	8b 52 08             	mov    0x8(%edx),%edx
   18cbb:	83 c2 01             	add    $0x1,%edx
   18cbe:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18cc4:	89 50 08             	mov    %edx,0x8(%eax)
		// 如果该字符是回车符CR(13),那么若回车换行转换行CRNL置位,则将字符转换为换行符NL(10).否则如果忽略回车标志NOCR置位,则忽略该字符,继续处理其他字符
		if (c == 13) {
   18cc7:	80 7c 24 0f 0d       	cmpb   $0xd,0xf(%esp)
   18ccc:	75 2a                	jne    18cf8 <copy_to_cooked+0xe5>
			if (I_CRNL(tty))
   18cce:	8b 44 24 20          	mov    0x20(%esp),%eax
   18cd2:	8b 00                	mov    (%eax),%eax
   18cd4:	25 00 01 00 00       	and    $0x100,%eax
   18cd9:	85 c0                	test   %eax,%eax
   18cdb:	74 07                	je     18ce4 <copy_to_cooked+0xd1>
				c = 10;
   18cdd:	c6 44 24 0f 0a       	movb   $0xa,0xf(%esp)
   18ce2:	eb 2d                	jmp    18d11 <copy_to_cooked+0xfe>
			else if (I_NOCR(tty))
   18ce4:	8b 44 24 20          	mov    0x20(%esp),%eax
   18ce8:	8b 00                	mov    (%eax),%eax
   18cea:	25 80 00 00 00       	and    $0x80,%eax
   18cef:	85 c0                	test   %eax,%eax
   18cf1:	74 1e                	je     18d11 <copy_to_cooked+0xfe>
				continue;
   18cf3:	e9 6b 06 00 00       	jmp    19363 <copy_to_cooked+0x750>
		// 如果字符是换行符NL(10),换行转回车标志NLCR置位,则将其转换为回车符CR(13).
		} else if (c == 10 && I_NLCR(tty))
   18cf8:	80 7c 24 0f 0a       	cmpb   $0xa,0xf(%esp)
   18cfd:	75 12                	jne    18d11 <copy_to_cooked+0xfe>
   18cff:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d03:	8b 00                	mov    (%eax),%eax
   18d05:	83 e0 40             	and    $0x40,%eax
   18d08:	85 c0                	test   %eax,%eax
   18d0a:	74 05                	je     18d11 <copy_to_cooked+0xfe>
			c = 13;
   18d0c:	c6 44 24 0f 0d       	movb   $0xd,0xf(%esp)
		// 如果大写转小写输入标志UCLC置位,则将该字符转换为小写字符.
		if (I_UCLC(tty))
   18d11:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d15:	8b 00                	mov    (%eax),%eax
   18d17:	25 00 02 00 00       	and    $0x200,%eax
   18d1c:	85 c0                	test   %eax,%eax
   18d1e:	74 40                	je     18d60 <copy_to_cooked+0x14d>
			c = tolower(c);
   18d20:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   18d25:	a2 20 58 04 00       	mov    %al,0x45820
   18d2a:	0f b6 05 20 58 04 00 	movzbl 0x45820,%eax
   18d31:	0f be c0             	movsbl %al,%eax
   18d34:	83 c0 01             	add    $0x1,%eax
   18d37:	05 a0 e5 02 00       	add    $0x2e5a0,%eax
   18d3c:	0f b6 00             	movzbl (%eax),%eax
   18d3f:	0f b6 c0             	movzbl %al,%eax
   18d42:	83 e0 01             	and    $0x1,%eax
   18d45:	85 c0                	test   %eax,%eax
   18d47:	74 0c                	je     18d55 <copy_to_cooked+0x142>
   18d49:	0f b6 05 20 58 04 00 	movzbl 0x45820,%eax
   18d50:	83 c0 20             	add    $0x20,%eax
   18d53:	eb 07                	jmp    18d5c <copy_to_cooked+0x149>
   18d55:	0f b6 05 20 58 04 00 	movzbl 0x45820,%eax
   18d5c:	88 44 24 0f          	mov    %al,0xf(%esp)
		// 字符(^D),则循环执行下列代码:
		// 如果本了回显标志ECHO置位,那么:若字符是控制字符(值 < 32),则往tty写队列放入擦除控制字符ERASE(^H).然后再放入一个擦除字符ERASE,并且调用
		// 该tty写函数,把写队列中的所有字符输出到终端屏幕上.另外,因为控制字符在放入写队列时需要用2个字节表示(例如^V),因此要求特别对控制字符多放入
		// 一个ERASE.最后将tty辅助队列头指针后退1字节.另外,如果了_POSIZ_VDISABLE(\0),那么在对字符修理过程中,若字符代码值等于_POSIX_VDISABLE
		// 的值时,表示禁止使用相应特殊控制字符的功能.
		if (L_CANON(tty)) {
   18d60:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d64:	8b 40 0c             	mov    0xc(%eax),%eax
   18d67:	83 e0 02             	and    $0x2,%eax
   18d6a:	85 c0                	test   %eax,%eax
   18d6c:	0f 84 9d 02 00 00    	je     1900f <copy_to_cooked+0x3fc>
			if ((KILL_CHAR(tty) != _POSIX_VDISABLE) &&
   18d72:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d76:	0f b6 40 14          	movzbl 0x14(%eax),%eax
   18d7a:	84 c0                	test   %al,%al
   18d7c:	0f 84 43 01 00 00    	je     18ec5 <copy_to_cooked+0x2b2>
			    (c == KILL_CHAR(tty))) {
   18d82:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   18d87:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d8b:	0f b6 40 14          	movzbl 0x14(%eax),%eax
   18d8f:	0f b6 c0             	movzbl %al,%eax
		// 如果本了回显标志ECHO置位,那么:若字符是控制字符(值 < 32),则往tty写队列放入擦除控制字符ERASE(^H).然后再放入一个擦除字符ERASE,并且调用
		// 该tty写函数,把写队列中的所有字符输出到终端屏幕上.另外,因为控制字符在放入写队列时需要用2个字节表示(例如^V),因此要求特别对控制字符多放入
		// 一个ERASE.最后将tty辅助队列头指针后退1字节.另外,如果了_POSIZ_VDISABLE(\0),那么在对字符修理过程中,若字符代码值等于_POSIX_VDISABLE
		// 的值时,表示禁止使用相应特殊控制字符的功能.
		if (L_CANON(tty)) {
			if ((KILL_CHAR(tty) != _POSIX_VDISABLE) &&
   18d92:	39 c2                	cmp    %eax,%edx
   18d94:	0f 85 2b 01 00 00    	jne    18ec5 <copy_to_cooked+0x2b2>
			    (c == KILL_CHAR(tty))) {
				/* deal with killing the input line */
				while(!(EMPTY(tty->secondary) ||
   18d9a:	e9 af 00 00 00       	jmp    18e4e <copy_to_cooked+0x23b>
				        (c = LAST(tty->secondary)) == 10 ||
				        ((EOF_CHAR(tty) != _POSIX_VDISABLE) && (c == EOF_CHAR(tty))))) {
					if (L_ECHO(tty)) {						// 若本地回显标志置位
   18d9f:	8b 44 24 20          	mov    0x20(%esp),%eax
   18da3:	8b 40 0c             	mov    0xc(%eax),%eax
   18da6:	83 e0 08             	and    $0x8,%eax
   18da9:	85 c0                	test   %eax,%eax
   18dab:	0f 84 80 00 00 00    	je     18e31 <copy_to_cooked+0x21e>
						if (c < 32)							// 控制字符要删2字节
   18db1:	80 7c 24 0f 1f       	cmpb   $0x1f,0xf(%esp)
   18db6:	7f 33                	jg     18deb <copy_to_cooked+0x1d8>
							PUTCH(127, tty->write_q);
   18db8:	8b 44 24 20          	mov    0x20(%esp),%eax
   18dbc:	8b 50 38             	mov    0x38(%eax),%edx
   18dbf:	8b 44 24 20          	mov    0x20(%esp),%eax
   18dc3:	8b 40 38             	mov    0x38(%eax),%eax
   18dc6:	8b 40 04             	mov    0x4(%eax),%eax
   18dc9:	c6 44 02 10 7f       	movb   $0x7f,0x10(%edx,%eax,1)
   18dce:	8b 44 24 20          	mov    0x20(%esp),%eax
   18dd2:	8b 40 38             	mov    0x38(%eax),%eax
   18dd5:	8b 54 24 20          	mov    0x20(%esp),%edx
   18dd9:	8b 52 38             	mov    0x38(%edx),%edx
   18ddc:	8b 52 04             	mov    0x4(%edx),%edx
   18ddf:	83 c2 01             	add    $0x1,%edx
   18de2:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18de8:	89 50 04             	mov    %edx,0x4(%eax)
						PUTCH(127, tty->write_q);
   18deb:	8b 44 24 20          	mov    0x20(%esp),%eax
   18def:	8b 50 38             	mov    0x38(%eax),%edx
   18df2:	8b 44 24 20          	mov    0x20(%esp),%eax
   18df6:	8b 40 38             	mov    0x38(%eax),%eax
   18df9:	8b 40 04             	mov    0x4(%eax),%eax
   18dfc:	c6 44 02 10 7f       	movb   $0x7f,0x10(%edx,%eax,1)
   18e01:	8b 44 24 20          	mov    0x20(%esp),%eax
   18e05:	8b 40 38             	mov    0x38(%eax),%eax
   18e08:	8b 54 24 20          	mov    0x20(%esp),%edx
   18e0c:	8b 52 38             	mov    0x38(%edx),%edx
   18e0f:	8b 52 04             	mov    0x4(%edx),%edx
   18e12:	83 c2 01             	add    $0x1,%edx
   18e15:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18e1b:	89 50 04             	mov    %edx,0x4(%eax)
						tty->write(tty);
   18e1e:	8b 44 24 20          	mov    0x20(%esp),%eax
   18e22:	8b 40 30             	mov    0x30(%eax),%eax
   18e25:	83 ec 0c             	sub    $0xc,%esp
   18e28:	ff 74 24 2c          	pushl  0x2c(%esp)
   18e2c:	ff d0                	call   *%eax
   18e2e:	83 c4 10             	add    $0x10,%esp
					}
					DEC(tty->secondary->head);
   18e31:	8b 44 24 20          	mov    0x20(%esp),%eax
   18e35:	8b 40 3c             	mov    0x3c(%eax),%eax
   18e38:	8b 54 24 20          	mov    0x20(%esp),%edx
   18e3c:	8b 52 3c             	mov    0x3c(%edx),%edx
   18e3f:	8b 52 04             	mov    0x4(%edx),%edx
   18e42:	83 ea 01             	sub    $0x1,%edx
   18e45:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18e4b:	89 50 04             	mov    %edx,0x4(%eax)
		// 的值时,表示禁止使用相应特殊控制字符的功能.
		if (L_CANON(tty)) {
			if ((KILL_CHAR(tty) != _POSIX_VDISABLE) &&
			    (c == KILL_CHAR(tty))) {
				/* deal with killing the input line */
				while(!(EMPTY(tty->secondary) ||
   18e4e:	8b 44 24 20          	mov    0x20(%esp),%eax
   18e52:	8b 40 3c             	mov    0x3c(%eax),%eax
   18e55:	8b 50 04             	mov    0x4(%eax),%edx
   18e58:	8b 44 24 20          	mov    0x20(%esp),%eax
   18e5c:	8b 40 3c             	mov    0x3c(%eax),%eax
   18e5f:	8b 40 08             	mov    0x8(%eax),%eax
   18e62:	39 c2                	cmp    %eax,%edx
   18e64:	0f 84 ec 04 00 00    	je     19356 <copy_to_cooked+0x743>
				        (c = LAST(tty->secondary)) == 10 ||
   18e6a:	8b 44 24 20          	mov    0x20(%esp),%eax
   18e6e:	8b 40 3c             	mov    0x3c(%eax),%eax
   18e71:	8b 54 24 20          	mov    0x20(%esp),%edx
   18e75:	8b 52 3c             	mov    0x3c(%edx),%edx
   18e78:	8b 52 04             	mov    0x4(%edx),%edx
   18e7b:	83 ea 01             	sub    $0x1,%edx
   18e7e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18e84:	0f b6 44 10 10       	movzbl 0x10(%eax,%edx,1),%eax
   18e89:	88 44 24 0f          	mov    %al,0xf(%esp)
		// 的值时,表示禁止使用相应特殊控制字符的功能.
		if (L_CANON(tty)) {
			if ((KILL_CHAR(tty) != _POSIX_VDISABLE) &&
			    (c == KILL_CHAR(tty))) {
				/* deal with killing the input line */
				while(!(EMPTY(tty->secondary) ||
   18e8d:	80 7c 24 0f 0a       	cmpb   $0xa,0xf(%esp)
   18e92:	0f 84 be 04 00 00    	je     19356 <copy_to_cooked+0x743>
				        (c = LAST(tty->secondary)) == 10 ||
				        ((EOF_CHAR(tty) != _POSIX_VDISABLE) && (c == EOF_CHAR(tty))))) {
   18e98:	8b 44 24 20          	mov    0x20(%esp),%eax
   18e9c:	0f b6 40 15          	movzbl 0x15(%eax),%eax
		// 的值时,表示禁止使用相应特殊控制字符的功能.
		if (L_CANON(tty)) {
			if ((KILL_CHAR(tty) != _POSIX_VDISABLE) &&
			    (c == KILL_CHAR(tty))) {
				/* deal with killing the input line */
				while(!(EMPTY(tty->secondary) ||
   18ea0:	84 c0                	test   %al,%al
   18ea2:	0f 84 f7 fe ff ff    	je     18d9f <copy_to_cooked+0x18c>
				        (c = LAST(tty->secondary)) == 10 ||
				        ((EOF_CHAR(tty) != _POSIX_VDISABLE) && (c == EOF_CHAR(tty))))) {
   18ea8:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   18ead:	8b 44 24 20          	mov    0x20(%esp),%eax
   18eb1:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   18eb5:	0f b6 c0             	movzbl %al,%eax
   18eb8:	39 c2                	cmp    %eax,%edx
   18eba:	0f 85 df fe ff ff    	jne    18d9f <copy_to_cooked+0x18c>
						PUTCH(127, tty->write_q);
						tty->write(tty);
					}
					DEC(tty->secondary->head);
				}
				continue;									// 继续读取读队列中字符进行处理.
   18ec0:	e9 91 04 00 00       	jmp    19356 <copy_to_cooked+0x743>
			}
			// 如果该字符是删除控制字符ERASE(^H),那么:如果tty的辅助队列为空,或者其最后一个字符是换行符NL(10),或者是文件结束符,则继续处理其他字符.如果本地回显
			// 标志ECHO置位,那么:若字符是控制字符(值 < 32),则往tty的写队列中放入擦除字符ERASE.再放入一个擦除字符ERASE,并且调用该tty的写函数.最后将tty辅助
			// 队列头指针后退1字节,继续处理其他字符.同样地,如果定义了_POSIX_VDISABLE(\0),那么在对字符处理过程中,若字符代码值等于_POSIX_VDISABLE的值时,
			// 表示禁止使用相应特殊控制字符的功能.
			if ((ERASE_CHAR(tty) != _POSIX_VDISABLE) && (c == ERASE_CHAR(tty))) {
   18ec5:	8b 44 24 20          	mov    0x20(%esp),%eax
   18ec9:	0f b6 40 13          	movzbl 0x13(%eax),%eax
   18ecd:	84 c0                	test   %al,%al
   18ecf:	0f 84 3a 01 00 00    	je     1900f <copy_to_cooked+0x3fc>
   18ed5:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   18eda:	8b 44 24 20          	mov    0x20(%esp),%eax
   18ede:	0f b6 40 13          	movzbl 0x13(%eax),%eax
   18ee2:	0f b6 c0             	movzbl %al,%eax
   18ee5:	39 c2                	cmp    %eax,%edx
   18ee7:	0f 85 22 01 00 00    	jne    1900f <copy_to_cooked+0x3fc>
				if (EMPTY(tty->secondary) ||
   18eed:	8b 44 24 20          	mov    0x20(%esp),%eax
   18ef1:	8b 40 3c             	mov    0x3c(%eax),%eax
   18ef4:	8b 50 04             	mov    0x4(%eax),%edx
   18ef7:	8b 44 24 20          	mov    0x20(%esp),%eax
   18efb:	8b 40 3c             	mov    0x3c(%eax),%eax
   18efe:	8b 40 08             	mov    0x8(%eax),%eax
   18f01:	39 c2                	cmp    %eax,%edx
   18f03:	0f 84 53 04 00 00    	je     1935c <copy_to_cooked+0x749>
				   (c = LAST(tty->secondary)) == 10 ||
   18f09:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f0d:	8b 40 3c             	mov    0x3c(%eax),%eax
   18f10:	8b 54 24 20          	mov    0x20(%esp),%edx
   18f14:	8b 52 3c             	mov    0x3c(%edx),%edx
   18f17:	8b 52 04             	mov    0x4(%edx),%edx
   18f1a:	83 ea 01             	sub    $0x1,%edx
   18f1d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18f23:	0f b6 44 10 10       	movzbl 0x10(%eax,%edx,1),%eax
   18f28:	88 44 24 0f          	mov    %al,0xf(%esp)
			// 如果该字符是删除控制字符ERASE(^H),那么:如果tty的辅助队列为空,或者其最后一个字符是换行符NL(10),或者是文件结束符,则继续处理其他字符.如果本地回显
			// 标志ECHO置位,那么:若字符是控制字符(值 < 32),则往tty的写队列中放入擦除字符ERASE.再放入一个擦除字符ERASE,并且调用该tty的写函数.最后将tty辅助
			// 队列头指针后退1字节,继续处理其他字符.同样地,如果定义了_POSIX_VDISABLE(\0),那么在对字符处理过程中,若字符代码值等于_POSIX_VDISABLE的值时,
			// 表示禁止使用相应特殊控制字符的功能.
			if ((ERASE_CHAR(tty) != _POSIX_VDISABLE) && (c == ERASE_CHAR(tty))) {
				if (EMPTY(tty->secondary) ||
   18f2c:	80 7c 24 0f 0a       	cmpb   $0xa,0xf(%esp)
   18f31:	0f 84 25 04 00 00    	je     1935c <copy_to_cooked+0x749>
				   (c = LAST(tty->secondary)) == 10 ||
				   ((EOF_CHAR(tty) != _POSIX_VDISABLE) &&
   18f37:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f3b:	0f b6 40 15          	movzbl 0x15(%eax),%eax
			// 标志ECHO置位,那么:若字符是控制字符(值 < 32),则往tty的写队列中放入擦除字符ERASE.再放入一个擦除字符ERASE,并且调用该tty的写函数.最后将tty辅助
			// 队列头指针后退1字节,继续处理其他字符.同样地,如果定义了_POSIX_VDISABLE(\0),那么在对字符处理过程中,若字符代码值等于_POSIX_VDISABLE的值时,
			// 表示禁止使用相应特殊控制字符的功能.
			if ((ERASE_CHAR(tty) != _POSIX_VDISABLE) && (c == ERASE_CHAR(tty))) {
				if (EMPTY(tty->secondary) ||
				   (c = LAST(tty->secondary)) == 10 ||
   18f3f:	84 c0                	test   %al,%al
   18f41:	74 18                	je     18f5b <copy_to_cooked+0x348>
				   ((EOF_CHAR(tty) != _POSIX_VDISABLE) &&
				    (c == EOF_CHAR(tty))))
   18f43:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   18f48:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f4c:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   18f50:	0f b6 c0             	movzbl %al,%eax
			// 队列头指针后退1字节,继续处理其他字符.同样地,如果定义了_POSIX_VDISABLE(\0),那么在对字符处理过程中,若字符代码值等于_POSIX_VDISABLE的值时,
			// 表示禁止使用相应特殊控制字符的功能.
			if ((ERASE_CHAR(tty) != _POSIX_VDISABLE) && (c == ERASE_CHAR(tty))) {
				if (EMPTY(tty->secondary) ||
				   (c = LAST(tty->secondary)) == 10 ||
				   ((EOF_CHAR(tty) != _POSIX_VDISABLE) &&
   18f53:	39 c2                	cmp    %eax,%edx
   18f55:	0f 84 01 04 00 00    	je     1935c <copy_to_cooked+0x749>
				    (c == EOF_CHAR(tty))))
					continue;
				if (L_ECHO(tty)) {							// 若本地回显标志置位.
   18f5b:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f5f:	8b 40 0c             	mov    0xc(%eax),%eax
   18f62:	83 e0 08             	and    $0x8,%eax
   18f65:	85 c0                	test   %eax,%eax
   18f67:	0f 84 80 00 00 00    	je     18fed <copy_to_cooked+0x3da>
					if (c < 32)
   18f6d:	80 7c 24 0f 1f       	cmpb   $0x1f,0xf(%esp)
   18f72:	7f 33                	jg     18fa7 <copy_to_cooked+0x394>
						PUTCH(127, tty->write_q);
   18f74:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f78:	8b 50 38             	mov    0x38(%eax),%edx
   18f7b:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f7f:	8b 40 38             	mov    0x38(%eax),%eax
   18f82:	8b 40 04             	mov    0x4(%eax),%eax
   18f85:	c6 44 02 10 7f       	movb   $0x7f,0x10(%edx,%eax,1)
   18f8a:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f8e:	8b 40 38             	mov    0x38(%eax),%eax
   18f91:	8b 54 24 20          	mov    0x20(%esp),%edx
   18f95:	8b 52 38             	mov    0x38(%edx),%edx
   18f98:	8b 52 04             	mov    0x4(%edx),%edx
   18f9b:	83 c2 01             	add    $0x1,%edx
   18f9e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18fa4:	89 50 04             	mov    %edx,0x4(%eax)
					PUTCH(127, tty->write_q);
   18fa7:	8b 44 24 20          	mov    0x20(%esp),%eax
   18fab:	8b 50 38             	mov    0x38(%eax),%edx
   18fae:	8b 44 24 20          	mov    0x20(%esp),%eax
   18fb2:	8b 40 38             	mov    0x38(%eax),%eax
   18fb5:	8b 40 04             	mov    0x4(%eax),%eax
   18fb8:	c6 44 02 10 7f       	movb   $0x7f,0x10(%edx,%eax,1)
   18fbd:	8b 44 24 20          	mov    0x20(%esp),%eax
   18fc1:	8b 40 38             	mov    0x38(%eax),%eax
   18fc4:	8b 54 24 20          	mov    0x20(%esp),%edx
   18fc8:	8b 52 38             	mov    0x38(%edx),%edx
   18fcb:	8b 52 04             	mov    0x4(%edx),%edx
   18fce:	83 c2 01             	add    $0x1,%edx
   18fd1:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18fd7:	89 50 04             	mov    %edx,0x4(%eax)
					tty->write(tty);
   18fda:	8b 44 24 20          	mov    0x20(%esp),%eax
   18fde:	8b 40 30             	mov    0x30(%eax),%eax
   18fe1:	83 ec 0c             	sub    $0xc,%esp
   18fe4:	ff 74 24 2c          	pushl  0x2c(%esp)
   18fe8:	ff d0                	call   *%eax
   18fea:	83 c4 10             	add    $0x10,%esp
				}
				DEC(tty->secondary->head);
   18fed:	8b 44 24 20          	mov    0x20(%esp),%eax
   18ff1:	8b 40 3c             	mov    0x3c(%eax),%eax
   18ff4:	8b 54 24 20          	mov    0x20(%esp),%edx
   18ff8:	8b 52 3c             	mov    0x3c(%edx),%edx
   18ffb:	8b 52 04             	mov    0x4(%edx),%edx
   18ffe:	83 ea 01             	sub    $0x1,%edx
   19001:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   19007:	89 50 04             	mov    %edx,0x4(%eax)
				continue;
   1900a:	e9 54 03 00 00       	jmp    19363 <copy_to_cooked+0x750>
		// 如果设置了IXON标志,则使终端停止/开始输出控制字符起作用.如果没有设置此标志,那么停止和开始字符将被作为一般字符供进程读取.在这段代码中,如果读取的字符是停止
		// 字符STOP(^S),则置tty停止标志,让tty暂停输出.同时丢弃该特殊控制字符(不放入辅助队列中),并继续处理其他字符.如果字符是开始字符START(^Q),则复位tty停止
		// 标志,恢复tty输出.同时丢弃该控制字符,并继续处理其他字符.对于控制台来说,这里的tty->write()是console.c中的con_write()函数.因此对于伪终端也是由于设置
		// 了终端stopped标志而会暂停写操作(chr_drv/console.c).对于伪终端也是由于设置了终端stopped标志而会暂停写操作(chr_drv/pty.c).
		// 对于串行终端,也应该在发送终端过程中根据终端stopped标志暂停发送,但本版未实现.
		if (I_IXON(tty)) {
   1900f:	8b 44 24 20          	mov    0x20(%esp),%eax
   19013:	8b 00                	mov    (%eax),%eax
   19015:	25 00 04 00 00       	and    $0x400,%eax
   1901a:	85 c0                	test   %eax,%eax
   1901c:	0f 84 86 00 00 00    	je     190a8 <copy_to_cooked+0x495>
			if ((STOP_CHAR(tty) != _POSIX_VDISABLE) && (c==STOP_CHAR(tty))) {
   19022:	8b 44 24 20          	mov    0x20(%esp),%eax
   19026:	0f b6 40 1a          	movzbl 0x1a(%eax),%eax
   1902a:	84 c0                	test   %al,%al
   1902c:	74 37                	je     19065 <copy_to_cooked+0x452>
   1902e:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   19033:	8b 44 24 20          	mov    0x20(%esp),%eax
   19037:	0f b6 40 1a          	movzbl 0x1a(%eax),%eax
   1903b:	0f b6 c0             	movzbl %al,%eax
   1903e:	39 c2                	cmp    %eax,%edx
   19040:	75 23                	jne    19065 <copy_to_cooked+0x452>
				tty->stopped = 1;
   19042:	8b 44 24 20          	mov    0x20(%esp),%eax
   19046:	c7 40 2c 01 00 00 00 	movl   $0x1,0x2c(%eax)
				tty->write(tty);
   1904d:	8b 44 24 20          	mov    0x20(%esp),%eax
   19051:	8b 40 30             	mov    0x30(%eax),%eax
   19054:	83 ec 0c             	sub    $0xc,%esp
   19057:	ff 74 24 2c          	pushl  0x2c(%esp)
   1905b:	ff d0                	call   *%eax
   1905d:	83 c4 10             	add    $0x10,%esp
				continue;
   19060:	e9 fe 02 00 00       	jmp    19363 <copy_to_cooked+0x750>
			}
			if ((START_CHAR(tty) != _POSIX_VDISABLE) && (c==START_CHAR(tty))) {
   19065:	8b 44 24 20          	mov    0x20(%esp),%eax
   19069:	0f b6 40 19          	movzbl 0x19(%eax),%eax
   1906d:	84 c0                	test   %al,%al
   1906f:	74 37                	je     190a8 <copy_to_cooked+0x495>
   19071:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   19076:	8b 44 24 20          	mov    0x20(%esp),%eax
   1907a:	0f b6 40 19          	movzbl 0x19(%eax),%eax
   1907e:	0f b6 c0             	movzbl %al,%eax
   19081:	39 c2                	cmp    %eax,%edx
   19083:	75 23                	jne    190a8 <copy_to_cooked+0x495>
				tty->stopped = 0;
   19085:	8b 44 24 20          	mov    0x20(%esp),%eax
   19089:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
				tty->write(tty);
   19090:	8b 44 24 20          	mov    0x20(%esp),%eax
   19094:	8b 40 30             	mov    0x30(%eax),%eax
   19097:	83 ec 0c             	sub    $0xc,%esp
   1909a:	ff 74 24 2c          	pushl  0x2c(%esp)
   1909e:	ff d0                	call   *%eax
   190a0:	83 c4 10             	add    $0x10,%esp
				continue;
   190a3:	e9 bb 02 00 00       	jmp    19363 <copy_to_cooked+0x750>
        }
		// 若输入模式标志集中ISIG标志置位,表示终端键盘可以产生信号,则在收到控制字符INTR,QUIT,SUSP或DSUSP时,需要为进程产生相应的信号.如果该字符是键盘中断符(^C),则向
		// 当前进程之进程组中所有进程发送键盘中断信号SIGINT,并继续处理下一字符.如果该字符是退出符(^\),则向当前进程之进程组中所有进程发送键盘退出信号SIGQUIT,并继续处理
		// 下一字符.如果字符是暂停符(^Z),则向当前进程发送暂停信息SIGTSTP.同样,若定义了_POSIX_VDISABLE(\0),那么在对字符处理过程中,若字符代码值等于_POSIX_VDISABLE
		// 的值时,表示禁止使用相应特殊控制字符的功能.
		if (L_ISIG(tty)) {
   190a8:	8b 44 24 20          	mov    0x20(%esp),%eax
   190ac:	8b 40 0c             	mov    0xc(%eax),%eax
   190af:	83 e0 01             	and    $0x1,%eax
   190b2:	85 c0                	test   %eax,%eax
   190b4:	0f 84 cf 00 00 00    	je     19189 <copy_to_cooked+0x576>
			if ((INTR_CHAR(tty) != _POSIX_VDISABLE) && (c==INTR_CHAR(tty))) {
   190ba:	8b 44 24 20          	mov    0x20(%esp),%eax
   190be:	0f b6 40 11          	movzbl 0x11(%eax),%eax
   190c2:	84 c0                	test   %al,%al
   190c4:	74 30                	je     190f6 <copy_to_cooked+0x4e3>
   190c6:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   190cb:	8b 44 24 20          	mov    0x20(%esp),%eax
   190cf:	0f b6 40 11          	movzbl 0x11(%eax),%eax
   190d3:	0f b6 c0             	movzbl %al,%eax
   190d6:	39 c2                	cmp    %eax,%edx
   190d8:	75 1c                	jne    190f6 <copy_to_cooked+0x4e3>
				kill_pg(tty->pgrp, SIGINT, 1);
   190da:	8b 44 24 20          	mov    0x20(%esp),%eax
   190de:	8b 40 24             	mov    0x24(%eax),%eax
   190e1:	83 ec 04             	sub    $0x4,%esp
   190e4:	6a 01                	push   $0x1
   190e6:	6a 02                	push   $0x2
   190e8:	50                   	push   %eax
   190e9:	e8 39 1a ff ff       	call   ab27 <kill_pg>
   190ee:	83 c4 10             	add    $0x10,%esp
				continue;
   190f1:	e9 6d 02 00 00       	jmp    19363 <copy_to_cooked+0x750>
			}
			if ((QUIT_CHAR(tty) != _POSIX_VDISABLE) && (c==QUIT_CHAR(tty))) {
   190f6:	8b 44 24 20          	mov    0x20(%esp),%eax
   190fa:	0f b6 40 12          	movzbl 0x12(%eax),%eax
   190fe:	84 c0                	test   %al,%al
   19100:	74 30                	je     19132 <copy_to_cooked+0x51f>
   19102:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   19107:	8b 44 24 20          	mov    0x20(%esp),%eax
   1910b:	0f b6 40 12          	movzbl 0x12(%eax),%eax
   1910f:	0f b6 c0             	movzbl %al,%eax
   19112:	39 c2                	cmp    %eax,%edx
   19114:	75 1c                	jne    19132 <copy_to_cooked+0x51f>
				kill_pg(tty->pgrp, SIGQUIT, 1);
   19116:	8b 44 24 20          	mov    0x20(%esp),%eax
   1911a:	8b 40 24             	mov    0x24(%eax),%eax
   1911d:	83 ec 04             	sub    $0x4,%esp
   19120:	6a 01                	push   $0x1
   19122:	6a 03                	push   $0x3
   19124:	50                   	push   %eax
   19125:	e8 fd 19 ff ff       	call   ab27 <kill_pg>
   1912a:	83 c4 10             	add    $0x10,%esp
				continue;
   1912d:	e9 31 02 00 00       	jmp    19363 <copy_to_cooked+0x750>
			}
			if ((SUSPEND_CHAR(tty) != _POSIX_VDISABLE) && (c == SUSPEND_CHAR(tty))) {
   19132:	8b 44 24 20          	mov    0x20(%esp),%eax
   19136:	0f b6 40 1b          	movzbl 0x1b(%eax),%eax
   1913a:	84 c0                	test   %al,%al
   1913c:	74 4b                	je     19189 <copy_to_cooked+0x576>
   1913e:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   19143:	8b 44 24 20          	mov    0x20(%esp),%eax
   19147:	0f b6 40 1b          	movzbl 0x1b(%eax),%eax
   1914b:	0f b6 c0             	movzbl %al,%eax
   1914e:	39 c2                	cmp    %eax,%edx
   19150:	75 37                	jne    19189 <copy_to_cooked+0x576>
				if (!is_orphaned_pgrp(tty->pgrp))				// 判断一个进程组是否孤儿进程
   19152:	8b 44 24 20          	mov    0x20(%esp),%eax
   19156:	8b 40 24             	mov    0x24(%eax),%eax
   19159:	83 ec 0c             	sub    $0xc,%esp
   1915c:	50                   	push   %eax
   1915d:	e8 8e 1b ff ff       	call   acf0 <is_orphaned_pgrp>
   19162:	83 c4 10             	add    $0x10,%esp
   19165:	85 c0                	test   %eax,%eax
   19167:	0f 85 f5 01 00 00    	jne    19362 <copy_to_cooked+0x74f>
					kill_pg(tty->pgrp, SIGTSTP, 1);
   1916d:	8b 44 24 20          	mov    0x20(%esp),%eax
   19171:	8b 40 24             	mov    0x24(%eax),%eax
   19174:	83 ec 04             	sub    $0x4,%esp
   19177:	6a 01                	push   $0x1
   19179:	6a 14                	push   $0x14
   1917b:	50                   	push   %eax
   1917c:	e8 a6 19 ff ff       	call   ab27 <kill_pg>
   19181:	83 c4 10             	add    $0x10,%esp
				continue;
   19184:	e9 d9 01 00 00       	jmp    19362 <copy_to_cooked+0x74f>
			}
		}
		// 如果该字符是换行符NL(10),或者是文件结束符EOF(4,^D),表示一行字符已处理完,则把辅助缓冲队列中当前含有字符行数值secondar.data增1.如果在函数tty_read()中取走一行
		// 字符,该值即会减1.
		if (c == 10 || (EOF_CHAR(tty) != _POSIX_VDISABLE && c == EOF_CHAR(tty)))
   19189:	80 7c 24 0f 0a       	cmpb   $0xa,0xf(%esp)
   1918e:	74 20                	je     191b0 <copy_to_cooked+0x59d>
   19190:	8b 44 24 20          	mov    0x20(%esp),%eax
   19194:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   19198:	84 c0                	test   %al,%al
   1919a:	74 22                	je     191be <copy_to_cooked+0x5ab>
   1919c:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   191a1:	8b 44 24 20          	mov    0x20(%esp),%eax
   191a5:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   191a9:	0f b6 c0             	movzbl %al,%eax
   191ac:	39 c2                	cmp    %eax,%edx
   191ae:	75 0e                	jne    191be <copy_to_cooked+0x5ab>
			tty->secondary->data++;
   191b0:	8b 44 24 20          	mov    0x20(%esp),%eax
   191b4:	8b 40 3c             	mov    0x3c(%eax),%eax
   191b7:	8b 10                	mov    (%eax),%edx
   191b9:	83 c2 01             	add    $0x1,%edx
   191bc:	89 10                	mov    %edx,(%eax)
		// 如果本地模式标志中回显标志ECHO在置位状态,那么,如果字符是换行符NL(10),则将换行符NL(10)和回车符(13)放入tty写队列缓冲区中;如果字符是控制字符(值<32)并且回显控制
		// 字符标志ECHOCTL置位,则将字符'^'和字符c+64放入tty写队列中(也即会显示^C,^H等);否则将该字符直接放入tty写缓冲队列中.最后调用该tty写操作函数.
		if (L_ECHO(tty)) {
   191be:	8b 44 24 20          	mov    0x20(%esp),%eax
   191c2:	8b 40 0c             	mov    0xc(%eax),%eax
   191c5:	83 e0 08             	and    $0x8,%eax
   191c8:	85 c0                	test   %eax,%eax
   191ca:	0f 84 4a 01 00 00    	je     1931a <copy_to_cooked+0x707>
			if (c == 10) {
   191d0:	80 7c 24 0f 0a       	cmpb   $0xa,0xf(%esp)
   191d5:	75 6b                	jne    19242 <copy_to_cooked+0x62f>
				PUTCH(10, tty->write_q);
   191d7:	8b 44 24 20          	mov    0x20(%esp),%eax
   191db:	8b 50 38             	mov    0x38(%eax),%edx
   191de:	8b 44 24 20          	mov    0x20(%esp),%eax
   191e2:	8b 40 38             	mov    0x38(%eax),%eax
   191e5:	8b 40 04             	mov    0x4(%eax),%eax
   191e8:	c6 44 02 10 0a       	movb   $0xa,0x10(%edx,%eax,1)
   191ed:	8b 44 24 20          	mov    0x20(%esp),%eax
   191f1:	8b 40 38             	mov    0x38(%eax),%eax
   191f4:	8b 54 24 20          	mov    0x20(%esp),%edx
   191f8:	8b 52 38             	mov    0x38(%edx),%edx
   191fb:	8b 52 04             	mov    0x4(%edx),%edx
   191fe:	83 c2 01             	add    $0x1,%edx
   19201:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   19207:	89 50 04             	mov    %edx,0x4(%eax)
				PUTCH(13, tty->write_q);
   1920a:	8b 44 24 20          	mov    0x20(%esp),%eax
   1920e:	8b 50 38             	mov    0x38(%eax),%edx
   19211:	8b 44 24 20          	mov    0x20(%esp),%eax
   19215:	8b 40 38             	mov    0x38(%eax),%eax
   19218:	8b 40 04             	mov    0x4(%eax),%eax
   1921b:	c6 44 02 10 0d       	movb   $0xd,0x10(%edx,%eax,1)
   19220:	8b 44 24 20          	mov    0x20(%esp),%eax
   19224:	8b 40 38             	mov    0x38(%eax),%eax
   19227:	8b 54 24 20          	mov    0x20(%esp),%edx
   1922b:	8b 52 38             	mov    0x38(%edx),%edx
   1922e:	8b 52 04             	mov    0x4(%edx),%edx
   19231:	83 c2 01             	add    $0x1,%edx
   19234:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1923a:	89 50 04             	mov    %edx,0x4(%eax)
   1923d:	e9 c5 00 00 00       	jmp    19307 <copy_to_cooked+0x6f4>
			} else if (c < 32) {
   19242:	80 7c 24 0f 1f       	cmpb   $0x1f,0xf(%esp)
   19247:	0f 8f 83 00 00 00    	jg     192d0 <copy_to_cooked+0x6bd>
				if (L_ECHOCTL(tty)) {
   1924d:	8b 44 24 20          	mov    0x20(%esp),%eax
   19251:	8b 40 0c             	mov    0xc(%eax),%eax
   19254:	25 00 02 00 00       	and    $0x200,%eax
   19259:	85 c0                	test   %eax,%eax
   1925b:	0f 84 a6 00 00 00    	je     19307 <copy_to_cooked+0x6f4>
					PUTCH('^', tty->write_q);
   19261:	8b 44 24 20          	mov    0x20(%esp),%eax
   19265:	8b 50 38             	mov    0x38(%eax),%edx
   19268:	8b 44 24 20          	mov    0x20(%esp),%eax
   1926c:	8b 40 38             	mov    0x38(%eax),%eax
   1926f:	8b 40 04             	mov    0x4(%eax),%eax
   19272:	c6 44 02 10 5e       	movb   $0x5e,0x10(%edx,%eax,1)
   19277:	8b 44 24 20          	mov    0x20(%esp),%eax
   1927b:	8b 40 38             	mov    0x38(%eax),%eax
   1927e:	8b 54 24 20          	mov    0x20(%esp),%edx
   19282:	8b 52 38             	mov    0x38(%edx),%edx
   19285:	8b 52 04             	mov    0x4(%edx),%edx
   19288:	83 c2 01             	add    $0x1,%edx
   1928b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   19291:	89 50 04             	mov    %edx,0x4(%eax)
					PUTCH(c + 64, tty->write_q);
   19294:	8b 44 24 20          	mov    0x20(%esp),%eax
   19298:	8b 50 38             	mov    0x38(%eax),%edx
   1929b:	8b 44 24 20          	mov    0x20(%esp),%eax
   1929f:	8b 40 38             	mov    0x38(%eax),%eax
   192a2:	8b 40 04             	mov    0x4(%eax),%eax
   192a5:	0f b6 4c 24 0f       	movzbl 0xf(%esp),%ecx
   192aa:	83 c1 40             	add    $0x40,%ecx
   192ad:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   192b1:	8b 44 24 20          	mov    0x20(%esp),%eax
   192b5:	8b 40 38             	mov    0x38(%eax),%eax
   192b8:	8b 54 24 20          	mov    0x20(%esp),%edx
   192bc:	8b 52 38             	mov    0x38(%edx),%edx
   192bf:	8b 52 04             	mov    0x4(%edx),%edx
   192c2:	83 c2 01             	add    $0x1,%edx
   192c5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   192cb:	89 50 04             	mov    %edx,0x4(%eax)
   192ce:	eb 37                	jmp    19307 <copy_to_cooked+0x6f4>
				}
			} else
				PUTCH(c, tty->write_q);
   192d0:	8b 44 24 20          	mov    0x20(%esp),%eax
   192d4:	8b 50 38             	mov    0x38(%eax),%edx
   192d7:	8b 44 24 20          	mov    0x20(%esp),%eax
   192db:	8b 40 38             	mov    0x38(%eax),%eax
   192de:	8b 40 04             	mov    0x4(%eax),%eax
   192e1:	0f b6 4c 24 0f       	movzbl 0xf(%esp),%ecx
   192e6:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   192ea:	8b 44 24 20          	mov    0x20(%esp),%eax
   192ee:	8b 40 38             	mov    0x38(%eax),%eax
   192f1:	8b 54 24 20          	mov    0x20(%esp),%edx
   192f5:	8b 52 38             	mov    0x38(%edx),%edx
   192f8:	8b 52 04             	mov    0x4(%edx),%edx
   192fb:	83 c2 01             	add    $0x1,%edx
   192fe:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   19304:	89 50 04             	mov    %edx,0x4(%eax)
			tty->write(tty);
   19307:	8b 44 24 20          	mov    0x20(%esp),%eax
   1930b:	8b 40 30             	mov    0x30(%eax),%eax
   1930e:	83 ec 0c             	sub    $0xc,%esp
   19311:	ff 74 24 2c          	pushl  0x2c(%esp)
   19315:	ff d0                	call   *%eax
   19317:	83 c4 10             	add    $0x10,%esp
		}
		// 每一次循环末将处理过的字符放入辅助队列中
		PUTCH(c, tty->secondary);
   1931a:	8b 44 24 20          	mov    0x20(%esp),%eax
   1931e:	8b 50 3c             	mov    0x3c(%eax),%edx
   19321:	8b 44 24 20          	mov    0x20(%esp),%eax
   19325:	8b 40 3c             	mov    0x3c(%eax),%eax
   19328:	8b 40 04             	mov    0x4(%eax),%eax
   1932b:	0f b6 4c 24 0f       	movzbl 0xf(%esp),%ecx
   19330:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   19334:	8b 44 24 20          	mov    0x20(%esp),%eax
   19338:	8b 40 3c             	mov    0x3c(%eax),%eax
   1933b:	8b 54 24 20          	mov    0x20(%esp),%edx
   1933f:	8b 52 3c             	mov    0x3c(%edx),%edx
   19342:	8b 52 04             	mov    0x4(%edx),%edx
   19345:	83 c2 01             	add    $0x1,%edx
   19348:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1934e:	89 50 04             	mov    %edx,0x4(%eax)
   19351:	e9 f6 f8 ff ff       	jmp    18c4c <copy_to_cooked+0x39>
						PUTCH(127, tty->write_q);
						tty->write(tty);
					}
					DEC(tty->secondary->head);
				}
				continue;									// 继续读取读队列中字符进行处理.
   19356:	90                   	nop
   19357:	e9 f0 f8 ff ff       	jmp    18c4c <copy_to_cooked+0x39>
			if ((ERASE_CHAR(tty) != _POSIX_VDISABLE) && (c == ERASE_CHAR(tty))) {
				if (EMPTY(tty->secondary) ||
				   (c = LAST(tty->secondary)) == 10 ||
				   ((EOF_CHAR(tty) != _POSIX_VDISABLE) &&
				    (c == EOF_CHAR(tty))))
					continue;
   1935c:	90                   	nop
   1935d:	e9 ea f8 ff ff       	jmp    18c4c <copy_to_cooked+0x39>
				continue;
			}
			if ((SUSPEND_CHAR(tty) != _POSIX_VDISABLE) && (c == SUSPEND_CHAR(tty))) {
				if (!is_orphaned_pgrp(tty->pgrp))				// 判断一个进程组是否孤儿进程
					kill_pg(tty->pgrp, SIGTSTP, 1);
				continue;
   19362:	90                   	nop
				PUTCH(c, tty->write_q);
			tty->write(tty);
		}
		// 每一次循环末将处理过的字符放入辅助队列中
		PUTCH(c, tty->secondary);
    }
   19363:	e9 e4 f8 ff ff       	jmp    18c4c <copy_to_cooked+0x39>
	// 一个字符位置.然后根据该字符代码值进行处理.
	// 另外,如果定义了_POSIX_VDISABLE(\0),那么在对字符处理过程中,若字符代码值等于_POSIX_VDISABLE的值时,表示禁止使用相应特殊控制字符的功能.
	while (1) {
		// 如果tty对应的读队列为空则直接立刻中断循环
		if (EMPTY(tty->read_q))
			break;
   19368:	90                   	nop
   19369:	eb 01                	jmp    1936c <copy_to_cooked+0x759>
		// 如果tty对应的第三个队列为空则直接立刻中断循环
		if (FULL(tty->secondary))
			break;
   1936b:	90                   	nop
		}
		// 每一次循环末将处理过的字符放入辅助队列中
		PUTCH(c, tty->secondary);
    }
	// 在退出循环体后唤醒等待该辅助缓冲队列的进程(如果有的话).
	wake_up(&tty->secondary->proc_list);
   1936c:	8b 44 24 20          	mov    0x20(%esp),%eax
   19370:	8b 40 3c             	mov    0x3c(%eax),%eax
   19373:	83 c0 0c             	add    $0xc,%eax
   19376:	83 ec 0c             	sub    $0xc,%esp
   19379:	50                   	push   %eax
   1937a:	e8 d0 dd fe ff       	call   714f <wake_up>
   1937f:	83 c4 10             	add    $0x10,%esp
}
   19382:	83 c4 1c             	add    $0x1c,%esp
   19385:	c3                   	ret    

00019386 <tty_signal>:
 */
// 向使用终端的进程组中所有进程发送信号。
// 在后台进程组中的一个进程访问控制终端时，该函数用于向后台进程组中的所有进程发送SIGTTIN或SIGTTOU信号。无论后台进程组
// 中的进程是否已经阻塞或忽略掉了这两个信号，当前进程都将立刻退出读写操作而返回。
int tty_signal(int sig, struct tty_struct *tty)
{
   19386:	53                   	push   %ebx
   19387:	83 ec 08             	sub    $0x8,%esp
	// 我们不希望停止一个孤儿进程组的进程（参见文件kernel/exit.c的说明）。
	// 因此如果当前进程组是孤儿进程组，就出错返回。否则就向当前进程组所有进程发送指定信号。
	if (is_orphaned_pgrp(current->pgrp))
   1938a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1938f:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
   19395:	83 ec 0c             	sub    $0xc,%esp
   19398:	50                   	push   %eax
   19399:	e8 52 19 ff ff       	call   acf0 <is_orphaned_pgrp>
   1939e:	83 c4 10             	add    $0x10,%esp
   193a1:	85 c0                	test   %eax,%eax
   193a3:	74 0a                	je     193af <tty_signal+0x29>
		return -EIO;									/* don't stop an orphaned pgrp */
   193a5:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   193aa:	e9 88 00 00 00       	jmp    19437 <tty_signal+0xb1>
	(void) kill_pg(current->pgrp, sig, 1);            	// 发送信号sig。
   193af:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   193b4:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
   193ba:	83 ec 04             	sub    $0x4,%esp
   193bd:	6a 01                	push   $0x1
   193bf:	ff 74 24 18          	pushl  0x18(%esp)
   193c3:	50                   	push   %eax
   193c4:	e8 5e 17 ff ff       	call   ab27 <kill_pg>
   193c9:	83 c4 10             	add    $0x10,%esp
	// 如果这个信号被当前进程阻塞（屏蔽），或者被当前进程忽略掉，则出错返回。否则，如果当前进程的对信号sig设置了新的处理句柄
	// 那么就返回我们可被中断的信息。否则就返回在系统调用重新启动后可以继续执行的信息。
	if ((current->blocked & (1 << (sig - 1))) ||
   193cc:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   193d1:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   193d7:	8b 54 24 10          	mov    0x10(%esp),%edx
   193db:	83 ea 01             	sub    $0x1,%edx
   193de:	bb 01 00 00 00       	mov    $0x1,%ebx
   193e3:	89 d1                	mov    %edx,%ecx
   193e5:	d3 e3                	shl    %cl,%ebx
   193e7:	89 da                	mov    %ebx,%edx
   193e9:	21 d0                	and    %edx,%eax
   193eb:	85 c0                	test   %eax,%eax
   193ed:	75 1b                	jne    1940a <tty_signal+0x84>
	    ((int) current->sigaction[sig - 1].sa_handler == 1))
   193ef:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   193f4:	8b 54 24 10          	mov    0x10(%esp),%edx
   193f8:	83 ea 01             	sub    $0x1,%edx
   193fb:	83 c2 01             	add    $0x1,%edx
   193fe:	c1 e2 04             	shl    $0x4,%edx
   19401:	01 d0                	add    %edx,%eax
   19403:	8b 00                	mov    (%eax),%eax
	if (is_orphaned_pgrp(current->pgrp))
		return -EIO;									/* don't stop an orphaned pgrp */
	(void) kill_pg(current->pgrp, sig, 1);            	// 发送信号sig。
	// 如果这个信号被当前进程阻塞（屏蔽），或者被当前进程忽略掉，则出错返回。否则，如果当前进程的对信号sig设置了新的处理句柄
	// 那么就返回我们可被中断的信息。否则就返回在系统调用重新启动后可以继续执行的信息。
	if ((current->blocked & (1 << (sig - 1))) ||
   19405:	83 f8 01             	cmp    $0x1,%eax
   19408:	75 07                	jne    19411 <tty_signal+0x8b>
	    ((int) current->sigaction[sig - 1].sa_handler == 1))
		return -EIO;		/* Our signal will be ignored */
   1940a:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   1940f:	eb 26                	jmp    19437 <tty_signal+0xb1>
	else if (current->sigaction[sig-1].sa_handler)
   19411:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   19416:	8b 54 24 10          	mov    0x10(%esp),%edx
   1941a:	83 ea 01             	sub    $0x1,%edx
   1941d:	83 c2 01             	add    $0x1,%edx
   19420:	c1 e2 04             	shl    $0x4,%edx
   19423:	01 d0                	add    %edx,%eax
   19425:	8b 00                	mov    (%eax),%eax
   19427:	85 c0                	test   %eax,%eax
   19429:	74 07                	je     19432 <tty_signal+0xac>
		return -EINTR;		/* We _will_ be interrupted :-) */
   1942b:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
   19430:	eb 05                	jmp    19437 <tty_signal+0xb1>
	else
		return -ERESTARTSYS;	/* We _will_ be interrupted :-) */
   19432:	b8 00 fe ff ff       	mov    $0xfffffe00,%eax
					/* (but restart after we continue) */
}
   19437:	83 c4 08             	add    $0x8,%esp
   1943a:	5b                   	pop    %ebx
   1943b:	c3                   	ret    

0001943c <tty_read>:

// tty读函数。
// 从终端辅助缓冲队列读取指定数量的字符，放到用户指定的缓冲区中。
// 参数：channel - 子设备号；buf - 用户缓冲区指针；nr - 欲读字节数。
int tty_read(unsigned channel, char * buf, int nr)
{
   1943c:	83 ec 2c             	sub    $0x2c,%esp
	struct tty_struct * tty;
	struct tty_struct * other_tty = NULL;
   1943f:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   19446:	00 
	char c, *b = buf;
   19447:	8b 44 24 34          	mov    0x34(%esp),%eax
   1944b:	89 44 24 18          	mov    %eax,0x18(%esp)
	int minimum, time;

	// 首先判断参数有效性并取终端的tty结构指针。如果tty终端的三个缓冲队列指针都是NULL，则返回EIO出错信息。如果tty
	// 终端是一个伪终端，则再取得另一个对应伪终端的tty结构other_tty。
	if (channel > 255)
   1944f:	81 7c 24 30 ff 00 00 	cmpl   $0xff,0x30(%esp)
   19456:	00 
   19457:	76 0a                	jbe    19463 <tty_read+0x27>
		return -EIO;
   19459:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   1945e:	e9 10 04 00 00       	jmp    19873 <tty_read+0x437>
	tty = TTY_TABLE(channel);
   19463:	83 7c 24 30 00       	cmpl   $0x0,0x30(%esp)
   19468:	74 28                	je     19492 <tty_read+0x56>
   1946a:	83 7c 24 30 3f       	cmpl   $0x3f,0x30(%esp)
   1946f:	77 13                	ja     19484 <tty_read+0x48>
   19471:	8b 44 24 30          	mov    0x30(%esp),%eax
   19475:	05 ff ff ff 03       	add    $0x3ffffff,%eax
   1947a:	c1 e0 06             	shl    $0x6,%eax
   1947d:	05 20 18 04 00       	add    $0x41820,%eax
   19482:	eb 1b                	jmp    1949f <tty_read+0x63>
   19484:	8b 44 24 30          	mov    0x30(%esp),%eax
   19488:	c1 e0 06             	shl    $0x6,%eax
   1948b:	05 20 18 04 00       	add    $0x41820,%eax
   19490:	eb 0d                	jmp    1949f <tty_read+0x63>
   19492:	a1 80 12 03 00       	mov    0x31280,%eax
   19497:	c1 e0 06             	shl    $0x6,%eax
   1949a:	05 20 18 04 00       	add    $0x41820,%eax
   1949f:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (!(tty->write_q || tty->read_q || tty->secondary))
   194a3:	8b 44 24 0c          	mov    0xc(%esp),%eax
   194a7:	8b 40 38             	mov    0x38(%eax),%eax
   194aa:	85 c0                	test   %eax,%eax
   194ac:	75 20                	jne    194ce <tty_read+0x92>
   194ae:	8b 44 24 0c          	mov    0xc(%esp),%eax
   194b2:	8b 40 34             	mov    0x34(%eax),%eax
   194b5:	85 c0                	test   %eax,%eax
   194b7:	75 15                	jne    194ce <tty_read+0x92>
   194b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
   194bd:	8b 40 3c             	mov    0x3c(%eax),%eax
   194c0:	85 c0                	test   %eax,%eax
   194c2:	75 0a                	jne    194ce <tty_read+0x92>
		return -EIO;
   194c4:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   194c9:	e9 a5 03 00 00       	jmp    19873 <tty_read+0x437>
	// 如果当前进程使用的是这里正在处理的tty终端，但该终端的进程组号却与当前进程组号不同，表示当前进程是后台进程组中
	// 的一个进程，即进程不在前台。于是我们要停止当前进程组的所有进程。因此这里就需要向当前进程组发送SIGTTIN信号，
	// 并返回等待成为前台进程组后再执行读操作。
	if ((current->tty == channel) && (tty->pgrp != current->pgrp))
   194ce:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   194d3:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   194d9:	3b 44 24 30          	cmp    0x30(%esp),%eax
   194dd:	75 2c                	jne    1950b <tty_read+0xcf>
   194df:	8b 44 24 0c          	mov    0xc(%esp),%eax
   194e3:	8b 50 24             	mov    0x24(%eax),%edx
   194e6:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   194eb:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
   194f1:	39 c2                	cmp    %eax,%edx
   194f3:	74 16                	je     1950b <tty_read+0xcf>
		return(tty_signal(SIGTTIN, tty));
   194f5:	83 ec 08             	sub    $0x8,%esp
   194f8:	ff 74 24 14          	pushl  0x14(%esp)
   194fc:	6a 15                	push   $0x15
   194fe:	e8 83 fe ff ff       	call   19386 <tty_signal>
   19503:	83 c4 10             	add    $0x10,%esp
   19506:	e9 68 03 00 00       	jmp    19873 <tty_read+0x437>
	// 如果当前终端是伪终端，那么对应的另一个伪终端就是other_tty。若这里tty是主伪终端，那么other_tty就是对应的从伪
	// 终端，反之亦然。
	if (channel & 0x80)
   1950b:	8b 44 24 30          	mov    0x30(%esp),%eax
   1950f:	25 80 00 00 00       	and    $0x80,%eax
   19514:	85 c0                	test   %eax,%eax
   19516:	74 13                	je     1952b <tty_read+0xef>
		other_tty = tty_table + (channel ^ 0x40);
   19518:	8b 44 24 30          	mov    0x30(%esp),%eax
   1951c:	83 f0 40             	xor    $0x40,%eax
   1951f:	c1 e0 06             	shl    $0x6,%eax
   19522:	05 20 18 04 00       	add    $0x41820,%eax
   19527:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	// 然后根据VTIME和VMIN对应的控制字符数组值设置读字符操作超时定时值time和最少需要读取的字符个数minimum。在非规范
	// 模式下，这两个是超时定时值。VMIN表示为了满足读操作而需要读取的最少字符个数。VTIME是一个1/10秒计数计时值。
	time = 10L * tty->termios.c_cc[VTIME];            				// 设置读操作超时定时值。
   1952b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1952f:	0f b6 40 16          	movzbl 0x16(%eax),%eax
   19533:	0f b6 d0             	movzbl %al,%edx
   19536:	89 d0                	mov    %edx,%eax
   19538:	c1 e0 02             	shl    $0x2,%eax
   1953b:	01 d0                	add    %edx,%eax
   1953d:	01 c0                	add    %eax,%eax
   1953f:	89 44 24 10          	mov    %eax,0x10(%esp)
	minimum = tty->termios.c_cc[VMIN];              				// 最少需要读取的字符个数。
   19543:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19547:	0f b6 40 17          	movzbl 0x17(%eax),%eax
   1954b:	0f b6 c0             	movzbl %al,%eax
   1954e:	89 44 24 14          	mov    %eax,0x14(%esp)
	// 定时值为无限大，以让进程先读取辅助队列中已有字符。如果读到的字符数不足minimum的话，后面代码会根据指定的超时值time
	// 来设置进程的读超时值timeout，并会等待读取其余字符。若此时没有设置最少读取字符数minimum（为0），则将其设置为进程
	// 欲读字符数nr，并且如果设置了超时定时值time的话，就把进程读字符超时定时值timeout设置为系统当前时间值+指定的超时
	// 值time，同时复位time。另外，如果以上设置的最少读取字符数minimum大于进程欲读取的字符数nr，则让minimum=nr。即对
	// 于规范模式下的读取操作，它不受VTIME和VMIN对应控制字符值的约束和控制，它们仅在非规范模式（生模式）操作中起作用。
	if (L_CANON(tty)) {
   19552:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19556:	8b 40 0c             	mov    0xc(%eax),%eax
   19559:	83 e0 02             	and    $0x2,%eax
   1955c:	85 c0                	test   %eax,%eax
   1955e:	74 21                	je     19581 <tty_read+0x145>
		minimum = nr;
   19560:	8b 44 24 38          	mov    0x38(%esp),%eax
   19564:	89 44 24 14          	mov    %eax,0x14(%esp)
		current->timeout = 0xffffffff;
   19568:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1956d:	c7 80 d8 02 00 00 ff 	movl   $0xffffffff,0x2d8(%eax)
   19574:	ff ff ff 
		time = 0;
   19577:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   1957e:	00 
   1957f:	eb 46                	jmp    195c7 <tty_read+0x18b>
	} else if (minimum)
   19581:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   19586:	74 11                	je     19599 <tty_read+0x15d>
		current->timeout = 0xffffffff;
   19588:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1958d:	c7 80 d8 02 00 00 ff 	movl   $0xffffffff,0x2d8(%eax)
   19594:	ff ff ff 
   19597:	eb 2e                	jmp    195c7 <tty_read+0x18b>
	else {
		minimum = nr;
   19599:	8b 44 24 38          	mov    0x38(%esp),%eax
   1959d:	89 44 24 14          	mov    %eax,0x14(%esp)
		if (time)
   195a1:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   195a6:	74 17                	je     195bf <tty_read+0x183>
			current->timeout = time + jiffies;
   195a8:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   195ad:	8b 4c 24 10          	mov    0x10(%esp),%ecx
   195b1:	8b 15 00 eb 02 00    	mov    0x2eb00,%edx
   195b7:	01 ca                	add    %ecx,%edx
   195b9:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%eax)
		time = 0;
   195bf:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   195c6:	00 
	}
	if (minimum > nr)
   195c7:	8b 44 24 14          	mov    0x14(%esp),%eax
   195cb:	3b 44 24 38          	cmp    0x38(%esp),%eax
   195cf:	0f 8e 47 02 00 00    	jle    1981c <tty_read+0x3e0>
		minimum = nr;           									// 最多读取要求的字符数。
   195d5:	8b 44 24 38          	mov    0x38(%esp),%eax
   195d9:	89 44 24 14          	mov    %eax,0x14(%esp)
	// 现在我们开始从辅助队列中循环取出字符并放到用户缓冲区buf中。当欲读的字节数大于0,则执行以下循环操作。在循环过程中
	// 如果当前终端是伪终端，那么我们就执行其对应的另一个伪终端的写操作函数，让另一个伪终端把字符写入当前伪终端辅助队列
	// 缓冲区中。即让另一终端把写队列缓冲区中字符复制到当前伪终端读队列缓冲区中，并经行规则函数转换后放入当前伪终端辅助
	// 队列中。
	while (nr > 0) {
   195dd:	e9 3a 02 00 00       	jmp    1981c <tty_read+0x3e0>
		if (other_tty)
   195e2:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   195e7:	74 13                	je     195fc <tty_read+0x1c0>
			other_tty->write(other_tty);
   195e9:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   195ed:	8b 40 30             	mov    0x30(%eax),%eax
   195f0:	83 ec 0c             	sub    $0xc,%esp
   195f3:	ff 74 24 28          	pushl  0x28(%esp)
   195f7:	ff d0                	call   *%eax
   195f9:	83 c4 10             	add    $0x10,%esp
		// 如果tty辅助缓冲队列为空，或者设置了规范模式标志并且tty读队列缓冲区未满，并且辅助队列中字符行数为0,那么，如果没
		// 有设置过进程读字符超时值（为0），或者当前进程目前收到信号，就先退出循环体。否则如果本终端是一个从伪终端，并且其
		// 对应的主伪终端已经挂断，那么我们也退出循环体。如果不是以上这两种情况，我们就让当前进程进入可中断睡眠状态，返回后
		// 继续处理。由于规范模式时内核以行为单位为用户提供数据，因此在该模式下辅助队列中必须至少有一行字符可供取胜，即
		// secondary.data起码是1才行。
		cli();
   195fc:	fa                   	cli    
		if (EMPTY(tty->secondary) || (L_CANON(tty) &&
   195fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19601:	8b 40 3c             	mov    0x3c(%eax),%eax
   19604:	8b 50 04             	mov    0x4(%eax),%edx
   19607:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1960b:	8b 40 3c             	mov    0x3c(%eax),%eax
   1960e:	8b 40 08             	mov    0x8(%eax),%eax
   19611:	39 c2                	cmp    %eax,%edx
   19613:	74 43                	je     19658 <tty_read+0x21c>
   19615:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19619:	8b 40 0c             	mov    0xc(%eax),%eax
   1961c:	83 e0 02             	and    $0x2,%eax
   1961f:	85 c0                	test   %eax,%eax
   19621:	0f 84 9f 00 00 00    	je     196c6 <tty_read+0x28a>
		    !FULL(tty->read_q) && !tty->secondary->data)) {
   19627:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1962b:	8b 40 34             	mov    0x34(%eax),%eax
   1962e:	8b 50 08             	mov    0x8(%eax),%edx
   19631:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19635:	8b 40 34             	mov    0x34(%eax),%eax
   19638:	8b 40 04             	mov    0x4(%eax),%eax
   1963b:	29 c2                	sub    %eax,%edx
   1963d:	89 d0                	mov    %edx,%eax
   1963f:	83 e8 01             	sub    $0x1,%eax
   19642:	25 ff 03 00 00       	and    $0x3ff,%eax
		// 有设置过进程读字符超时值（为0），或者当前进程目前收到信号，就先退出循环体。否则如果本终端是一个从伪终端，并且其
		// 对应的主伪终端已经挂断，那么我们也退出循环体。如果不是以上这两种情况，我们就让当前进程进入可中断睡眠状态，返回后
		// 继续处理。由于规范模式时内核以行为单位为用户提供数据，因此在该模式下辅助队列中必须至少有一行字符可供取胜，即
		// secondary.data起码是1才行。
		cli();
		if (EMPTY(tty->secondary) || (L_CANON(tty) &&
   19647:	85 c0                	test   %eax,%eax
   19649:	74 7b                	je     196c6 <tty_read+0x28a>
		    !FULL(tty->read_q) && !tty->secondary->data)) {
   1964b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1964f:	8b 40 3c             	mov    0x3c(%eax),%eax
   19652:	8b 00                	mov    (%eax),%eax
   19654:	85 c0                	test   %eax,%eax
   19656:	75 6e                	jne    196c6 <tty_read+0x28a>
			if (!current->timeout ||
   19658:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1965d:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
   19663:	85 c0                	test   %eax,%eax
   19665:	74 1b                	je     19682 <tty_read+0x246>
			  (current->signal & ~current->blocked)) {
   19667:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1966c:	8b 50 0c             	mov    0xc(%eax),%edx
   1966f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   19674:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   1967a:	f7 d0                	not    %eax
   1967c:	21 d0                	and    %edx,%eax
		// 继续处理。由于规范模式时内核以行为单位为用户提供数据，因此在该模式下辅助队列中必须至少有一行字符可供取胜，即
		// secondary.data起码是1才行。
		cli();
		if (EMPTY(tty->secondary) || (L_CANON(tty) &&
		    !FULL(tty->read_q) && !tty->secondary->data)) {
			if (!current->timeout ||
   1967e:	85 c0                	test   %eax,%eax
   19680:	74 06                	je     19688 <tty_read+0x24c>
			  (current->signal & ~current->blocked)) {
			  	sti();
   19682:	fb                   	sti    
				break;
   19683:	e9 a2 01 00 00       	jmp    1982a <tty_read+0x3ee>
			}
			if (IS_A_PTY_SLAVE(channel) && C_HUP(other_tty))
   19688:	8b 44 24 30          	mov    0x30(%esp),%eax
   1968c:	25 c0 00 00 00       	and    $0xc0,%eax
   19691:	3d c0 00 00 00       	cmp    $0xc0,%eax
   19696:	75 12                	jne    196aa <tty_read+0x26e>
   19698:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1969c:	8b 40 08             	mov    0x8(%eax),%eax
   1969f:	83 e0 0f             	and    $0xf,%eax
   196a2:	85 c0                	test   %eax,%eax
   196a4:	0f 84 7f 01 00 00    	je     19829 <tty_read+0x3ed>
				break;
			interruptible_sleep_on(&tty->secondary->proc_list);
   196aa:	8b 44 24 0c          	mov    0xc(%esp),%eax
   196ae:	8b 40 3c             	mov    0x3c(%eax),%eax
   196b1:	83 c0 0c             	add    $0xc,%eax
   196b4:	83 ec 0c             	sub    $0xc,%esp
   196b7:	50                   	push   %eax
   196b8:	e8 60 da fe ff       	call   711d <interruptible_sleep_on>
   196bd:	83 c4 10             	add    $0x10,%esp
			sti();
   196c0:	fb                   	sti    
			continue;
   196c1:	e9 56 01 00 00       	jmp    1981c <tty_read+0x3e0>
		}
		sti();
   196c6:	fb                   	sti    
		// 现在还没有遇到文件结束符或者正处于原始（非规范）模式。在这种模式中用户以字符流作为读取对象，也不识别其中的控制字符
		// （如文件结束符）。于是将字符直接放入用户数据缓冲区buf中，并把欲读字符数减1.此时如果欲读字符数已为0则中断循环。另外
		// 如果终端处于规范模式并且读取的字符是换行符NL（10），则也退出循环。除此之外，只要还没有取完欲读字符数nr并且辅助队列
		// 不空，就继续取队列中的字符。
		do {
			GETCH(tty->secondary, c);
   196c7:	8b 44 24 0c          	mov    0xc(%esp),%eax
   196cb:	8b 50 3c             	mov    0x3c(%eax),%edx
   196ce:	8b 44 24 0c          	mov    0xc(%esp),%eax
   196d2:	8b 40 3c             	mov    0x3c(%eax),%eax
   196d5:	8b 40 08             	mov    0x8(%eax),%eax
   196d8:	0f b6 44 02 10       	movzbl 0x10(%edx,%eax,1),%eax
   196dd:	88 44 24 0b          	mov    %al,0xb(%esp)
   196e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   196e5:	8b 40 3c             	mov    0x3c(%eax),%eax
   196e8:	8b 54 24 0c          	mov    0xc(%esp),%edx
   196ec:	8b 52 3c             	mov    0x3c(%edx),%edx
   196ef:	8b 52 08             	mov    0x8(%edx),%edx
   196f2:	83 c2 01             	add    $0x1,%edx
   196f5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   196fb:	89 50 08             	mov    %edx,0x8(%eax)
			if ((EOF_CHAR(tty) != _POSIX_VDISABLE && c == EOF_CHAR(tty)) || c == 10)
   196fe:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19702:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   19706:	84 c0                	test   %al,%al
   19708:	74 14                	je     1971e <tty_read+0x2e2>
   1970a:	0f be 54 24 0b       	movsbl 0xb(%esp),%edx
   1970f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19713:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   19717:	0f b6 c0             	movzbl %al,%eax
   1971a:	39 c2                	cmp    %eax,%edx
   1971c:	74 07                	je     19725 <tty_read+0x2e9>
   1971e:	80 7c 24 0b 0a       	cmpb   $0xa,0xb(%esp)
   19723:	75 0e                	jne    19733 <tty_read+0x2f7>
				tty->secondary->data--;
   19725:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19729:	8b 40 3c             	mov    0x3c(%eax),%eax
   1972c:	8b 10                	mov    (%eax),%edx
   1972e:	83 ea 01             	sub    $0x1,%edx
   19731:	89 10                	mov    %edx,(%eax)
			if ((EOF_CHAR(tty) != _POSIX_VDISABLE && c == EOF_CHAR(tty)) && L_CANON(tty))
   19733:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19737:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   1973b:	84 c0                	test   %al,%al
   1973d:	74 22                	je     19761 <tty_read+0x325>
   1973f:	0f be 54 24 0b       	movsbl 0xb(%esp),%edx
   19744:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19748:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   1974c:	0f b6 c0             	movzbl %al,%eax
   1974f:	39 c2                	cmp    %eax,%edx
   19751:	75 0e                	jne    19761 <tty_read+0x325>
   19753:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19757:	8b 40 0c             	mov    0xc(%eax),%eax
   1975a:	83 e0 02             	and    $0x2,%eax
   1975d:	85 c0                	test   %eax,%eax
   1975f:	75 67                	jne    197c8 <tty_read+0x38c>
				break;
			else {
				put_fs_byte(c, b++);
   19761:	8b 44 24 18          	mov    0x18(%esp),%eax
   19765:	8d 50 01             	lea    0x1(%eax),%edx
   19768:	89 54 24 18          	mov    %edx,0x18(%esp)
   1976c:	0f be 54 24 0b       	movsbl 0xb(%esp),%edx
   19771:	83 ec 08             	sub    $0x8,%esp
   19774:	50                   	push   %eax
   19775:	52                   	push   %edx
   19776:	e8 39 f3 ff ff       	call   18ab4 <put_fs_byte>
   1977b:	83 c4 10             	add    $0x10,%esp
				if (!--nr)
   1977e:	83 6c 24 38 01       	subl   $0x1,0x38(%esp)
   19783:	83 7c 24 38 00       	cmpl   $0x0,0x38(%esp)
   19788:	74 3a                	je     197c4 <tty_read+0x388>
					break;
			}
			if (c == 10 && L_CANON(tty))
   1978a:	80 7c 24 0b 0a       	cmpb   $0xa,0xb(%esp)
   1978f:	75 0e                	jne    1979f <tty_read+0x363>
   19791:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19795:	8b 40 0c             	mov    0xc(%eax),%eax
   19798:	83 e0 02             	and    $0x2,%eax
   1979b:	85 c0                	test   %eax,%eax
   1979d:	75 28                	jne    197c7 <tty_read+0x38b>
				break;
		} while (nr > 0 && !EMPTY(tty->secondary));
   1979f:	83 7c 24 38 00       	cmpl   $0x0,0x38(%esp)
   197a4:	7e 22                	jle    197c8 <tty_read+0x38c>
   197a6:	8b 44 24 0c          	mov    0xc(%esp),%eax
   197aa:	8b 40 3c             	mov    0x3c(%eax),%eax
   197ad:	8b 50 04             	mov    0x4(%eax),%edx
   197b0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   197b4:	8b 40 3c             	mov    0x3c(%eax),%eax
   197b7:	8b 40 08             	mov    0x8(%eax),%eax
   197ba:	39 c2                	cmp    %eax,%edx
   197bc:	0f 85 05 ff ff ff    	jne    196c7 <tty_read+0x28b>
   197c2:	eb 04                	jmp    197c8 <tty_read+0x38c>
			if ((EOF_CHAR(tty) != _POSIX_VDISABLE && c == EOF_CHAR(tty)) && L_CANON(tty))
				break;
			else {
				put_fs_byte(c, b++);
				if (!--nr)
					break;
   197c4:	90                   	nop
   197c5:	eb 01                	jmp    197c8 <tty_read+0x38c>
			}
			if (c == 10 && L_CANON(tty))
				break;
   197c7:	90                   	nop
		// 执行到此，那么如果tty终端处于规范模式下，说明我们可能读到了换行符或者遇到了文件结束符。如果是处于非规范模式下，那么
		// 说明我们已经读取了nr个字符，或者辅助队列已经被取空了。于是我们首先唤醒等待队列的进程，然后看看是否设置过超时定时值
		// time。如果超时定时值time不为0,我们就要求等待一定的时间让其他进程可以把字符写入读队列中。于是设置进程读超时定时值
		// 为系统当前时间jiffies + 读超时值time。当然，如果终端处于规范模式，或者已经读取nr个字符，我们就可以直接退出这个大
		// 循环了。
		wake_up(&tty->read_q->proc_list);
   197c8:	8b 44 24 0c          	mov    0xc(%esp),%eax
   197cc:	8b 40 34             	mov    0x34(%eax),%eax
   197cf:	83 c0 0c             	add    $0xc,%eax
   197d2:	83 ec 0c             	sub    $0xc,%esp
   197d5:	50                   	push   %eax
   197d6:	e8 74 d9 fe ff       	call   714f <wake_up>
   197db:	83 c4 10             	add    $0x10,%esp
		if (time)
   197de:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   197e3:	74 17                	je     197fc <tty_read+0x3c0>
			current->timeout = time + jiffies;
   197e5:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   197ea:	8b 4c 24 10          	mov    0x10(%esp),%ecx
   197ee:	8b 15 00 eb 02 00    	mov    0x2eb00,%edx
   197f4:	01 ca                	add    %ecx,%edx
   197f6:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%eax)
		if (L_CANON(tty) || b - buf >= minimum)
   197fc:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19800:	8b 40 0c             	mov    0xc(%eax),%eax
   19803:	83 e0 02             	and    $0x2,%eax
   19806:	85 c0                	test   %eax,%eax
   19808:	75 20                	jne    1982a <tty_read+0x3ee>
   1980a:	8b 54 24 18          	mov    0x18(%esp),%edx
   1980e:	8b 44 24 34          	mov    0x34(%esp),%eax
   19812:	29 c2                	sub    %eax,%edx
   19814:	89 d0                	mov    %edx,%eax
   19816:	3b 44 24 14          	cmp    0x14(%esp),%eax
   1981a:	7d 0e                	jge    1982a <tty_read+0x3ee>
		minimum = nr;           									// 最多读取要求的字符数。
	// 现在我们开始从辅助队列中循环取出字符并放到用户缓冲区buf中。当欲读的字节数大于0,则执行以下循环操作。在循环过程中
	// 如果当前终端是伪终端，那么我们就执行其对应的另一个伪终端的写操作函数，让另一个伪终端把字符写入当前伪终端辅助队列
	// 缓冲区中。即让另一终端把写队列缓冲区中字符复制到当前伪终端读队列缓冲区中，并经行规则函数转换后放入当前伪终端辅助
	// 队列中。
	while (nr > 0) {
   1981c:	83 7c 24 38 00       	cmpl   $0x0,0x38(%esp)
   19821:	0f 8f bb fd ff ff    	jg     195e2 <tty_read+0x1a6>
   19827:	eb 01                	jmp    1982a <tty_read+0x3ee>
			  (current->signal & ~current->blocked)) {
			  	sti();
				break;
			}
			if (IS_A_PTY_SLAVE(channel) && C_HUP(other_tty))
				break;
   19829:	90                   	nop
		if (L_CANON(tty) || b - buf >= minimum)
			break;
    }
	// 此时读取tty字符循环操作结束，因此复位进程的读取超时定时值timeout。如果此时当前进程已收到信号并且还没有读取到任何字符
	// 则以重新启动系统调用号“-ERESTARTSYS”返回。否则就返回已读取的字符数（b-buf）。
	current->timeout = 0;
   1982a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1982f:	c7 80 d8 02 00 00 00 	movl   $0x0,0x2d8(%eax)
   19836:	00 00 00 
	if ((current->signal & ~current->blocked) && !(b - buf))
   19839:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1983e:	8b 50 0c             	mov    0xc(%eax),%edx
   19841:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   19846:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   1984c:	f7 d0                	not    %eax
   1984e:	21 d0                	and    %edx,%eax
   19850:	85 c0                	test   %eax,%eax
   19852:	74 13                	je     19867 <tty_read+0x42b>
   19854:	8b 54 24 18          	mov    0x18(%esp),%edx
   19858:	8b 44 24 34          	mov    0x34(%esp),%eax
   1985c:	39 c2                	cmp    %eax,%edx
   1985e:	75 07                	jne    19867 <tty_read+0x42b>
		return -ERESTARTSYS;
   19860:	b8 00 fe ff ff       	mov    $0xfffffe00,%eax
   19865:	eb 0c                	jmp    19873 <tty_read+0x437>
	return (b - buf);
   19867:	8b 54 24 18          	mov    0x18(%esp),%edx
   1986b:	8b 44 24 34          	mov    0x34(%esp),%eax
   1986f:	29 c2                	sub    %eax,%edx
   19871:	89 d0                	mov    %edx,%eax
}
   19873:	83 c4 2c             	add    $0x2c,%esp
   19876:	c3                   	ret    

00019877 <tty_write>:
// tty写函数.
// 把用户缓冲区中的字符放入tty写队列缓冲区中.
// 参数:channel - 子设备号;buf - 缓冲区指针;nr - 写字节数.
// 返回已写字节数.
int tty_write(unsigned channel, char * buf, int nr)
{
   19877:	83 ec 1c             	sub    $0x1c,%esp
	static int cr_flag=0;
	struct tty_struct * tty;
	char c, *b = buf;
   1987a:	8b 44 24 24          	mov    0x24(%esp),%eax
   1987e:	89 44 24 08          	mov    %eax,0x8(%esp)

	// 首先判断参数有效性并取终端的tty结构指针.如果tty终端的三个缓冲队列指针都是NULL,则返回EIO出错信息.
	if (channel > 255)
   19882:	81 7c 24 20 ff 00 00 	cmpl   $0xff,0x20(%esp)
   19889:	00 
   1988a:	76 0a                	jbe    19896 <tty_write+0x1f>
		return -EIO;
   1988c:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   19891:	e9 b7 02 00 00       	jmp    19b4d <tty_write+0x2d6>
	tty = TTY_TABLE(channel);
   19896:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   1989b:	74 28                	je     198c5 <tty_write+0x4e>
   1989d:	83 7c 24 20 3f       	cmpl   $0x3f,0x20(%esp)
   198a2:	77 13                	ja     198b7 <tty_write+0x40>
   198a4:	8b 44 24 20          	mov    0x20(%esp),%eax
   198a8:	05 ff ff ff 03       	add    $0x3ffffff,%eax
   198ad:	c1 e0 06             	shl    $0x6,%eax
   198b0:	05 20 18 04 00       	add    $0x41820,%eax
   198b5:	eb 1b                	jmp    198d2 <tty_write+0x5b>
   198b7:	8b 44 24 20          	mov    0x20(%esp),%eax
   198bb:	c1 e0 06             	shl    $0x6,%eax
   198be:	05 20 18 04 00       	add    $0x41820,%eax
   198c3:	eb 0d                	jmp    198d2 <tty_write+0x5b>
   198c5:	a1 80 12 03 00       	mov    0x31280,%eax
   198ca:	c1 e0 06             	shl    $0x6,%eax
   198cd:	05 20 18 04 00       	add    $0x41820,%eax
   198d2:	89 44 24 04          	mov    %eax,0x4(%esp)
	if (!(tty->write_q || tty->read_q || tty->secondary))
   198d6:	8b 44 24 04          	mov    0x4(%esp),%eax
   198da:	8b 40 38             	mov    0x38(%eax),%eax
   198dd:	85 c0                	test   %eax,%eax
   198df:	75 20                	jne    19901 <tty_write+0x8a>
   198e1:	8b 44 24 04          	mov    0x4(%esp),%eax
   198e5:	8b 40 34             	mov    0x34(%eax),%eax
   198e8:	85 c0                	test   %eax,%eax
   198ea:	75 15                	jne    19901 <tty_write+0x8a>
   198ec:	8b 44 24 04          	mov    0x4(%esp),%eax
   198f0:	8b 40 3c             	mov    0x3c(%eax),%eax
   198f3:	85 c0                	test   %eax,%eax
   198f5:	75 0a                	jne    19901 <tty_write+0x8a>
		return -EIO;
   198f7:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   198fc:	e9 4c 02 00 00       	jmp    19b4d <tty_write+0x2d6>
	// 如果若终端本地模式标志集中设置了TOSTOP,表示后台进程输出时需要发送信号SIGTTOU.如果当前进程使用的是这里正在处理的tty终端,但该终端的进程组号却与当前
	// 进程组号不同,即表示当前进程是后台进程组中的一个进程,即进程不在前台.于是我们要停止当前进程组的所有进程.因此这里就需要向当前进程组发送SIGTTOU信号,并返回
	// 等待成为前台进程组后再执行写操作.
	if (L_TOSTOP(tty) &&
   19901:	8b 44 24 04          	mov    0x4(%esp),%eax
   19905:	8b 40 0c             	mov    0xc(%eax),%eax
   19908:	25 00 01 00 00       	and    $0x100,%eax
   1990d:	85 c0                	test   %eax,%eax
   1990f:	0f 84 1e 02 00 00    	je     19b33 <tty_write+0x2bc>
	    (current->tty == channel) && (tty->pgrp != current->pgrp))
   19915:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1991a:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
	if (!(tty->write_q || tty->read_q || tty->secondary))
		return -EIO;
	// 如果若终端本地模式标志集中设置了TOSTOP,表示后台进程输出时需要发送信号SIGTTOU.如果当前进程使用的是这里正在处理的tty终端,但该终端的进程组号却与当前
	// 进程组号不同,即表示当前进程是后台进程组中的一个进程,即进程不在前台.于是我们要停止当前进程组的所有进程.因此这里就需要向当前进程组发送SIGTTOU信号,并返回
	// 等待成为前台进程组后再执行写操作.
	if (L_TOSTOP(tty) &&
   19920:	3b 44 24 20          	cmp    0x20(%esp),%eax
   19924:	0f 85 09 02 00 00    	jne    19b33 <tty_write+0x2bc>
	    (current->tty == channel) && (tty->pgrp != current->pgrp))
   1992a:	8b 44 24 04          	mov    0x4(%esp),%eax
   1992e:	8b 50 24             	mov    0x24(%eax),%edx
   19931:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   19936:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
   1993c:	39 c2                	cmp    %eax,%edx
   1993e:	0f 84 ef 01 00 00    	je     19b33 <tty_write+0x2bc>
		return(tty_signal(SIGTTOU, tty));
   19944:	83 ec 08             	sub    $0x8,%esp
   19947:	ff 74 24 0c          	pushl  0xc(%esp)
   1994b:	6a 16                	push   $0x16
   1994d:	e8 34 fa ff ff       	call   19386 <tty_signal>
   19952:	83 c4 10             	add    $0x10,%esp
   19955:	e9 f3 01 00 00       	jmp    19b4d <tty_write+0x2d6>
	// 现在我们开始从用户缓冲区buf中循环取出字符并放到写队列缓冲区中.当欲写字节数大于0,则执行以下循环操作.在循环过程中,如果此时tty写队列已满,则当前进程进入可中断
	// 睡眠状态.如果当前进程有信号要处理,则退出循环体.
	while (nr > 0) {
		sleep_if_full(tty->write_q);
   1995a:	8b 44 24 04          	mov    0x4(%esp),%eax
   1995e:	8b 40 38             	mov    0x38(%eax),%eax
   19961:	83 ec 0c             	sub    $0xc,%esp
   19964:	50                   	push   %eax
   19965:	e8 0d f2 ff ff       	call   18b77 <sleep_if_full>
   1996a:	83 c4 10             	add    $0x10,%esp
		if (current->signal & ~current->blocked)
   1996d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   19972:	8b 50 0c             	mov    0xc(%eax),%edx
   19975:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1997a:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   19980:	f7 d0                	not    %eax
   19982:	21 d0                	and    %edx,%eax
   19984:	85 c0                	test   %eax,%eax
   19986:	0f 85 b4 01 00 00    	jne    19b40 <tty_write+0x2c9>
			break;
		// 当要写的字符数nr还大于0并且tty写队列缓冲区不满,则循环执行以下操作.首先从用户缓冲区中取1字节.
		while (nr > 0 && !FULL(tty->write_q)) {
   1998c:	e9 54 01 00 00       	jmp    19ae5 <tty_write+0x26e>
			c = get_fs_byte(b);
   19991:	83 ec 0c             	sub    $0xc,%esp
   19994:	ff 74 24 14          	pushl  0x14(%esp)
   19998:	e8 09 f1 ff ff       	call   18aa6 <get_fs_byte>
   1999d:	83 c4 10             	add    $0x10,%esp
   199a0:	88 44 24 0f          	mov    %al,0xf(%esp)
			// 如果终端输出模式标志集中的执行输出处理标志OPOST置位,则执行对字符的后处理操作.
			if (O_POST(tty)) {
   199a4:	8b 44 24 04          	mov    0x4(%esp),%eax
   199a8:	8b 40 04             	mov    0x4(%eax),%eax
   199ab:	83 e0 01             	and    $0x1,%eax
   199ae:	85 c0                	test   %eax,%eax
   199b0:	0f 84 e4 00 00 00    	je     19a9a <tty_write+0x223>
				// 如果该字符是回车符'\r'(CR,13)并且回车符转换行标志OCRNL置位,则将该字符换成行符'\n'(NL,10);
				if (c == '\r' && O_CRNL(tty))
   199b6:	80 7c 24 0f 0d       	cmpb   $0xd,0xf(%esp)
   199bb:	75 15                	jne    199d2 <tty_write+0x15b>
   199bd:	8b 44 24 04          	mov    0x4(%esp),%eax
   199c1:	8b 40 04             	mov    0x4(%eax),%eax
   199c4:	83 e0 08             	and    $0x8,%eax
   199c7:	85 c0                	test   %eax,%eax
   199c9:	74 07                	je     199d2 <tty_write+0x15b>
					c = '\n';
   199cb:	c6 44 24 0f 0a       	movb   $0xa,0xf(%esp)
   199d0:	eb 1a                	jmp    199ec <tty_write+0x175>
				// 如果该字符是换行符'\n'(NL,10)并且换行转回车功能标志ONLRET置位的话,则将该字符换成回车符'\r'(CR,13).
				else if (c == '\n' && O_NLRET(tty))
   199d2:	80 7c 24 0f 0a       	cmpb   $0xa,0xf(%esp)
   199d7:	75 13                	jne    199ec <tty_write+0x175>
   199d9:	8b 44 24 04          	mov    0x4(%esp),%eax
   199dd:	8b 40 04             	mov    0x4(%eax),%eax
   199e0:	83 e0 20             	and    $0x20,%eax
   199e3:	85 c0                	test   %eax,%eax
   199e5:	74 05                	je     199ec <tty_write+0x175>
					c = '\r';
   199e7:	c6 44 24 0f 0d       	movb   $0xd,0xf(%esp)
				// 如果该字符是换行符'\n'并且回车标志cr_flag没有置位,但换行转回车-换行标志ONLCR置位的话,则将cr_flag标志置位,并将一回车符放入写队列中.然后继续处理下一个字符.
				if (c == '\n' && !cr_flag && O_NLCR(tty)) {
   199ec:	80 7c 24 0f 0a       	cmpb   $0xa,0xf(%esp)
   199f1:	75 59                	jne    19a4c <tty_write+0x1d5>
   199f3:	a1 00 ee 03 00       	mov    0x3ee00,%eax
   199f8:	85 c0                	test   %eax,%eax
   199fa:	75 50                	jne    19a4c <tty_write+0x1d5>
   199fc:	8b 44 24 04          	mov    0x4(%esp),%eax
   19a00:	8b 40 04             	mov    0x4(%eax),%eax
   19a03:	83 e0 04             	and    $0x4,%eax
   19a06:	85 c0                	test   %eax,%eax
   19a08:	74 42                	je     19a4c <tty_write+0x1d5>
					cr_flag = 1;
   19a0a:	c7 05 00 ee 03 00 01 	movl   $0x1,0x3ee00
   19a11:	00 00 00 
					PUTCH(13, tty->write_q);
   19a14:	8b 44 24 04          	mov    0x4(%esp),%eax
   19a18:	8b 50 38             	mov    0x38(%eax),%edx
   19a1b:	8b 44 24 04          	mov    0x4(%esp),%eax
   19a1f:	8b 40 38             	mov    0x38(%eax),%eax
   19a22:	8b 40 04             	mov    0x4(%eax),%eax
   19a25:	c6 44 02 10 0d       	movb   $0xd,0x10(%edx,%eax,1)
   19a2a:	8b 44 24 04          	mov    0x4(%esp),%eax
   19a2e:	8b 40 38             	mov    0x38(%eax),%eax
   19a31:	8b 54 24 04          	mov    0x4(%esp),%edx
   19a35:	8b 52 38             	mov    0x38(%edx),%edx
   19a38:	8b 52 04             	mov    0x4(%edx),%edx
   19a3b:	83 c2 01             	add    $0x1,%edx
   19a3e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   19a44:	89 50 04             	mov    %edx,0x4(%eax)
					continue;
   19a47:	e9 99 00 00 00       	jmp    19ae5 <tty_write+0x26e>
				}
				// 如果小写转大写标志OLCUC置位的话,就将该字符转成大写字符.
				if (O_LCUC(tty))
   19a4c:	8b 44 24 04          	mov    0x4(%esp),%eax
   19a50:	8b 40 04             	mov    0x4(%eax),%eax
   19a53:	83 e0 02             	and    $0x2,%eax
   19a56:	85 c0                	test   %eax,%eax
   19a58:	74 40                	je     19a9a <tty_write+0x223>
					c = toupper(c);									// 小写转成大写字符.
   19a5a:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   19a5f:	a2 20 58 04 00       	mov    %al,0x45820
   19a64:	0f b6 05 20 58 04 00 	movzbl 0x45820,%eax
   19a6b:	0f be c0             	movsbl %al,%eax
   19a6e:	83 c0 01             	add    $0x1,%eax
   19a71:	05 a0 e5 02 00       	add    $0x2e5a0,%eax
   19a76:	0f b6 00             	movzbl (%eax),%eax
   19a79:	0f b6 c0             	movzbl %al,%eax
   19a7c:	83 e0 02             	and    $0x2,%eax
   19a7f:	85 c0                	test   %eax,%eax
   19a81:	74 0c                	je     19a8f <tty_write+0x218>
   19a83:	0f b6 05 20 58 04 00 	movzbl 0x45820,%eax
   19a8a:	83 e8 20             	sub    $0x20,%eax
   19a8d:	eb 07                	jmp    19a96 <tty_write+0x21f>
   19a8f:	0f b6 05 20 58 04 00 	movzbl 0x45820,%eax
   19a96:	88 44 24 0f          	mov    %al,0xf(%esp)
			}
			// 接着把用户数据缓冲指针b前移1字节;欲写字节数减1字节;复位cr_flag标志,并将该字节放入tty写队列中.
			b++; nr--;
   19a9a:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
   19a9f:	83 6c 24 28 01       	subl   $0x1,0x28(%esp)
			cr_flag = 0;
   19aa4:	c7 05 00 ee 03 00 00 	movl   $0x0,0x3ee00
   19aab:	00 00 00 
			PUTCH(c, tty->write_q);
   19aae:	8b 44 24 04          	mov    0x4(%esp),%eax
   19ab2:	8b 50 38             	mov    0x38(%eax),%edx
   19ab5:	8b 44 24 04          	mov    0x4(%esp),%eax
   19ab9:	8b 40 38             	mov    0x38(%eax),%eax
   19abc:	8b 40 04             	mov    0x4(%eax),%eax
   19abf:	0f b6 4c 24 0f       	movzbl 0xf(%esp),%ecx
   19ac4:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   19ac8:	8b 44 24 04          	mov    0x4(%esp),%eax
   19acc:	8b 40 38             	mov    0x38(%eax),%eax
   19acf:	8b 54 24 04          	mov    0x4(%esp),%edx
   19ad3:	8b 52 38             	mov    0x38(%edx),%edx
   19ad6:	8b 52 04             	mov    0x4(%edx),%edx
   19ad9:	83 c2 01             	add    $0x1,%edx
   19adc:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   19ae2:	89 50 04             	mov    %edx,0x4(%eax)
	while (nr > 0) {
		sleep_if_full(tty->write_q);
		if (current->signal & ~current->blocked)
			break;
		// 当要写的字符数nr还大于0并且tty写队列缓冲区不满,则循环执行以下操作.首先从用户缓冲区中取1字节.
		while (nr > 0 && !FULL(tty->write_q)) {
   19ae5:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   19aea:	7e 28                	jle    19b14 <tty_write+0x29d>
   19aec:	8b 44 24 04          	mov    0x4(%esp),%eax
   19af0:	8b 40 38             	mov    0x38(%eax),%eax
   19af3:	8b 50 08             	mov    0x8(%eax),%edx
   19af6:	8b 44 24 04          	mov    0x4(%esp),%eax
   19afa:	8b 40 38             	mov    0x38(%eax),%eax
   19afd:	8b 40 04             	mov    0x4(%eax),%eax
   19b00:	29 c2                	sub    %eax,%edx
   19b02:	89 d0                	mov    %edx,%eax
   19b04:	83 e8 01             	sub    $0x1,%eax
   19b07:	25 ff 03 00 00       	and    $0x3ff,%eax
   19b0c:	85 c0                	test   %eax,%eax
   19b0e:	0f 85 7d fe ff ff    	jne    19991 <tty_write+0x11a>
			PUTCH(c, tty->write_q);
		}
		// 若要求的字符全部写完,或者写队列已满,则程序退出循环.此时会调用对应tty写函数,把写队列缓冲区中的字符显示在控制台屏幕上,或者通过串行端口发送出去.如果当前处理的tty
		// 是控制台终端,那么tty->write()调用的是con_write();如果tty是串行终端,则tty->write()调用的是rs_write()函数.若还有字节要写,则等待写队列中字符取走.
		// 所以这里调用调度程序,先去执行其他任务.
		tty->write(tty);
   19b14:	8b 44 24 04          	mov    0x4(%esp),%eax
   19b18:	8b 40 30             	mov    0x30(%eax),%eax
   19b1b:	83 ec 0c             	sub    $0xc,%esp
   19b1e:	ff 74 24 10          	pushl  0x10(%esp)
   19b22:	ff d0                	call   *%eax
   19b24:	83 c4 10             	add    $0x10,%esp
		if (nr > 0)
   19b27:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   19b2c:	7e 05                	jle    19b33 <tty_write+0x2bc>
			schedule();
   19b2e:	e8 12 d3 fe ff       	call   6e45 <schedule>
	if (L_TOSTOP(tty) &&
	    (current->tty == channel) && (tty->pgrp != current->pgrp))
		return(tty_signal(SIGTTOU, tty));
	// 现在我们开始从用户缓冲区buf中循环取出字符并放到写队列缓冲区中.当欲写字节数大于0,则执行以下循环操作.在循环过程中,如果此时tty写队列已满,则当前进程进入可中断
	// 睡眠状态.如果当前进程有信号要处理,则退出循环体.
	while (nr > 0) {
   19b33:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   19b38:	0f 8f 1c fe ff ff    	jg     1995a <tty_write+0xe3>
   19b3e:	eb 01                	jmp    19b41 <tty_write+0x2ca>
		sleep_if_full(tty->write_q);
		if (current->signal & ~current->blocked)
			break;
   19b40:	90                   	nop
		// 所以这里调用调度程序,先去执行其他任务.
		tty->write(tty);
		if (nr > 0)
			schedule();
        }
	return (b - buf);												// 最后返回写入的字节数.
   19b41:	8b 54 24 08          	mov    0x8(%esp),%edx
   19b45:	8b 44 24 24          	mov    0x24(%esp),%eax
   19b49:	29 c2                	sub    %eax,%edx
   19b4b:	89 d0                	mov    %edx,%eax
}
   19b4d:	83 c4 1c             	add    $0x1c,%esp
   19b50:	c3                   	ret    

00019b51 <do_tty_interrupt>:
// tty中断处理调用函数 - 字符规范模式处理.
// 参数:tty - 指定的tty终端号.
// 将指定tty终端队列缓冲区中的字符复制或转换成规范(熟)模式字符并存放在辅助队列中.该函数会在串口读字符中断(rs_io.s)和键盘中断(
// kerboard.S)中被调用.
void do_tty_interrupt(int tty)
{
   19b51:	83 ec 0c             	sub    $0xc,%esp
	copy_to_cooked(TTY_TABLE(tty));
   19b54:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   19b59:	74 26                	je     19b81 <do_tty_interrupt+0x30>
   19b5b:	83 7c 24 10 3f       	cmpl   $0x3f,0x10(%esp)
   19b60:	7f 11                	jg     19b73 <do_tty_interrupt+0x22>
   19b62:	8b 44 24 10          	mov    0x10(%esp),%eax
   19b66:	83 e8 01             	sub    $0x1,%eax
   19b69:	c1 e0 06             	shl    $0x6,%eax
   19b6c:	05 20 18 04 00       	add    $0x41820,%eax
   19b71:	eb 1b                	jmp    19b8e <do_tty_interrupt+0x3d>
   19b73:	8b 44 24 10          	mov    0x10(%esp),%eax
   19b77:	c1 e0 06             	shl    $0x6,%eax
   19b7a:	05 20 18 04 00       	add    $0x41820,%eax
   19b7f:	eb 0d                	jmp    19b8e <do_tty_interrupt+0x3d>
   19b81:	a1 80 12 03 00       	mov    0x31280,%eax
   19b86:	c1 e0 06             	shl    $0x6,%eax
   19b89:	05 20 18 04 00       	add    $0x41820,%eax
   19b8e:	83 ec 0c             	sub    $0xc,%esp
   19b91:	50                   	push   %eax
   19b92:	e8 7c f0 ff ff       	call   18c13 <copy_to_cooked>
   19b97:	83 c4 10             	add    $0x10,%esp
}
   19b9a:	90                   	nop
   19b9b:	83 c4 0c             	add    $0xc,%esp
   19b9e:	c3                   	ret    

00019b9f <chr_dev_init>:

//字符设备初始化函数.空,为以后扩展做准备.
void chr_dev_init(void)
{
}
   19b9f:	90                   	nop
   19ba0:	c3                   	ret    

00019ba1 <tty_init>:

// tty终端初始化函数
// 初始化所有终端缓冲队列,初始化串口终端和控制台终端.
void tty_init(void)
{
   19ba1:	57                   	push   %edi
   19ba2:	56                   	push   %esi
   19ba3:	53                   	push   %ebx
   19ba4:	83 ec 10             	sub    $0x10,%esp
	int i;

	// 首先初始化所有终端的缓冲队列结构,设置初值.对于串行终端的读/写缓冲队列,将它们的data字段设置为串行端口基地址值.串中1是0x3f8,
	// 串口2是0x2f8.然后先初步设置所有终端的tty结构.
	// 其中特殊字符数组c_cc[]设置的初值定义在include/linux/tty.h文件中.
	for (i = 0 ; i < QUEUES ; i++)
   19ba7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   19bae:	00 
   19baf:	e9 93 00 00 00       	jmp    19c47 <tty_init+0xa6>
		tty_queues[i] = (struct tty_queue) {0, 0, 0, 0, ""};
   19bb4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19bb8:	c1 e0 04             	shl    $0x4,%eax
   19bbb:	89 c2                	mov    %eax,%edx
   19bbd:	c1 e2 06             	shl    $0x6,%edx
   19bc0:	01 d0                	add    %edx,%eax
   19bc2:	05 a0 12 03 00       	add    $0x312a0,%eax
   19bc7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19bcd:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19bd1:	c1 e0 04             	shl    $0x4,%eax
   19bd4:	89 c2                	mov    %eax,%edx
   19bd6:	c1 e2 06             	shl    $0x6,%edx
   19bd9:	01 d0                	add    %edx,%eax
   19bdb:	05 a4 12 03 00       	add    $0x312a4,%eax
   19be0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19be6:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19bea:	c1 e0 04             	shl    $0x4,%eax
   19bed:	89 c2                	mov    %eax,%edx
   19bef:	c1 e2 06             	shl    $0x6,%edx
   19bf2:	01 d0                	add    %edx,%eax
   19bf4:	05 a8 12 03 00       	add    $0x312a8,%eax
   19bf9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19bff:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19c03:	c1 e0 04             	shl    $0x4,%eax
   19c06:	89 c2                	mov    %eax,%edx
   19c08:	c1 e2 06             	shl    $0x6,%edx
   19c0b:	01 d0                	add    %edx,%eax
   19c0d:	05 ac 12 03 00       	add    $0x312ac,%eax
   19c12:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19c18:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19c1c:	c1 e0 04             	shl    $0x4,%eax
   19c1f:	89 c2                	mov    %eax,%edx
   19c21:	c1 e2 06             	shl    $0x6,%edx
   19c24:	01 d0                	add    %edx,%eax
   19c26:	05 b0 12 03 00       	add    $0x312b0,%eax
   19c2b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19c31:	8d 50 04             	lea    0x4(%eax),%edx
   19c34:	b8 00 00 00 00       	mov    $0x0,%eax
   19c39:	b9 ff 00 00 00       	mov    $0xff,%ecx
   19c3e:	89 d7                	mov    %edx,%edi
   19c40:	f3 ab                	rep stos %eax,%es:(%edi)
	int i;

	// 首先初始化所有终端的缓冲队列结构,设置初值.对于串行终端的读/写缓冲队列,将它们的data字段设置为串行端口基地址值.串中1是0x3f8,
	// 串口2是0x2f8.然后先初步设置所有终端的tty结构.
	// 其中特殊字符数组c_cc[]设置的初值定义在include/linux/tty.h文件中.
	for (i = 0 ; i < QUEUES ; i++)
   19c42:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   19c47:	83 7c 24 0c 35       	cmpl   $0x35,0xc(%esp)
   19c4c:	0f 8e 62 ff ff ff    	jle    19bb4 <tty_init+0x13>
		tty_queues[i] = (struct tty_queue) {0, 0, 0, 0, ""};
	rs_queues[0] = (struct tty_queue) {0x3f8, 0, 0, 0, ""};
   19c52:	ba 20 74 03 00       	mov    $0x37420,%edx
   19c57:	bb 40 45 02 00       	mov    $0x24540,%ebx
   19c5c:	b8 04 01 00 00       	mov    $0x104,%eax
   19c61:	89 d7                	mov    %edx,%edi
   19c63:	89 de                	mov    %ebx,%esi
   19c65:	89 c1                	mov    %eax,%ecx
   19c67:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	rs_queues[1] = (struct tty_queue) {0x3f8, 0, 0, 0, ""};
   19c69:	ba 30 78 03 00       	mov    $0x37830,%edx
   19c6e:	bb 40 45 02 00       	mov    $0x24540,%ebx
   19c73:	b8 04 01 00 00       	mov    $0x104,%eax
   19c78:	89 d7                	mov    %edx,%edi
   19c7a:	89 de                	mov    %ebx,%esi
   19c7c:	89 c1                	mov    %eax,%ecx
   19c7e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	rs_queues[3] = (struct tty_queue) {0x2f8, 0, 0, 0, ""};
   19c80:	ba 50 80 03 00       	mov    $0x38050,%edx
   19c85:	bb 60 49 02 00       	mov    $0x24960,%ebx
   19c8a:	b8 04 01 00 00       	mov    $0x104,%eax
   19c8f:	89 d7                	mov    %edx,%edi
   19c91:	89 de                	mov    %ebx,%esi
   19c93:	89 c1                	mov    %eax,%ecx
   19c95:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	rs_queues[4] = (struct tty_queue) {0x2f8, 0, 0, 0, ""};
   19c97:	ba 60 84 03 00       	mov    $0x38460,%edx
   19c9c:	bb 60 49 02 00       	mov    $0x24960,%ebx
   19ca1:	b8 04 01 00 00       	mov    $0x104,%eax
   19ca6:	89 d7                	mov    %edx,%edi
   19ca8:	89 de                	mov    %ebx,%esi
   19caa:	89 c1                	mov    %eax,%ecx
   19cac:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	for (i = 0 ; i < 256 ; i++) {
   19cae:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   19cb5:	00 
   19cb6:	e9 14 01 00 00       	jmp    19dcf <tty_init+0x22e>
		tty_table[i] =  (struct tty_struct) {
   19cbb:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19cbf:	c1 e0 06             	shl    $0x6,%eax
   19cc2:	05 20 18 04 00       	add    $0x41820,%eax
   19cc7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19ccd:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19cd1:	c1 e0 06             	shl    $0x6,%eax
   19cd4:	05 24 18 04 00       	add    $0x41824,%eax
   19cd9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19cdf:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19ce3:	c1 e0 06             	shl    $0x6,%eax
   19ce6:	05 28 18 04 00       	add    $0x41828,%eax
   19ceb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19cf1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19cf5:	c1 e0 06             	shl    $0x6,%eax
   19cf8:	05 2c 18 04 00       	add    $0x4182c,%eax
   19cfd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19d03:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d07:	c1 e0 06             	shl    $0x6,%eax
   19d0a:	05 30 18 04 00       	add    $0x41830,%eax
   19d0f:	c6 00 00             	movb   $0x0,(%eax)
   19d12:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d16:	c1 e0 06             	shl    $0x6,%eax
   19d19:	05 30 18 04 00       	add    $0x41830,%eax
   19d1e:	8b 15 70 4d 02 00    	mov    0x24d70,%edx
   19d24:	89 50 01             	mov    %edx,0x1(%eax)
   19d27:	8b 15 74 4d 02 00    	mov    0x24d74,%edx
   19d2d:	89 50 05             	mov    %edx,0x5(%eax)
   19d30:	8b 15 78 4d 02 00    	mov    0x24d78,%edx
   19d36:	89 50 09             	mov    %edx,0x9(%eax)
   19d39:	8b 15 7c 4d 02 00    	mov    0x24d7c,%edx
   19d3f:	89 50 0d             	mov    %edx,0xd(%eax)
   19d42:	0f b6 15 80 4d 02 00 	movzbl 0x24d80,%edx
   19d49:	88 50 11             	mov    %dl,0x11(%eax)
   19d4c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d50:	c1 e0 06             	shl    $0x6,%eax
   19d53:	05 44 18 04 00       	add    $0x41844,%eax
   19d58:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19d5e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d62:	c1 e0 06             	shl    $0x6,%eax
   19d65:	05 48 18 04 00       	add    $0x41848,%eax
   19d6a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19d70:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d74:	c1 e0 06             	shl    $0x6,%eax
   19d77:	05 4c 18 04 00       	add    $0x4184c,%eax
   19d7c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19d82:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d86:	c1 e0 06             	shl    $0x6,%eax
   19d89:	05 50 18 04 00       	add    $0x41850,%eax
   19d8e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19d94:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d98:	c1 e0 06             	shl    $0x6,%eax
   19d9b:	05 54 18 04 00       	add    $0x41854,%eax
   19da0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19da6:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19daa:	c1 e0 06             	shl    $0x6,%eax
   19dad:	05 58 18 04 00       	add    $0x41858,%eax
   19db2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19db8:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19dbc:	c1 e0 06             	shl    $0x6,%eax
   19dbf:	05 5c 18 04 00       	add    $0x4185c,%eax
   19dc4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tty_queues[i] = (struct tty_queue) {0, 0, 0, 0, ""};
	rs_queues[0] = (struct tty_queue) {0x3f8, 0, 0, 0, ""};
	rs_queues[1] = (struct tty_queue) {0x3f8, 0, 0, 0, ""};
	rs_queues[3] = (struct tty_queue) {0x2f8, 0, 0, 0, ""};
	rs_queues[4] = (struct tty_queue) {0x2f8, 0, 0, 0, ""};
	for (i = 0 ; i < 256 ; i++) {
   19dca:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   19dcf:	81 7c 24 0c ff 00 00 	cmpl   $0xff,0xc(%esp)
   19dd6:	00 
   19dd7:	0f 8e de fe ff ff    	jle    19cbb <tty_init+0x11a>
	// 接着初始化控制台终端(console.c).把con_init()放在这里,是因为我们需要根据显示卡类型和显示内存容量来确定系统虚拟控制台的数量
	// NR_CONSOLES.该值被用于随后的控制tty结构初始化循环中.对于控制台的tty结构,425--430行是tty结构中包含的termios结构字段.其中
	// 输入模式标志集被初始化为ICRNL标志;输出模式标志被初始化含有后处理标志OPOST和把NL转换成CRNL的标志ONLCR;本地模式标志集被初始化
	// 含有IXON,ICAON,ECHO,ECHOCTL和ECHOKE标志;控制字符数组c_cc[]被设置含有初始值INIT_C_CC.
	// 435行上初始化控制台终端tty结构中的读缓冲,写缓冲和辅助缓冲队列结构,它们分别指向tty缓冲队列结构数组tty_table[]中的相应结构项.
	con_init();
   19ddd:	e8 4c 30 00 00       	call   1ce2e <con_init>
	for (i = 0 ; i < NR_CONSOLES ; i++) {
   19de2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   19de9:	00 
   19dea:	e9 42 01 00 00       	jmp    19f31 <tty_init+0x390>
			INIT_C_CC},												// 控制字符数组c_cc[]
			0,														/* initial pgrp */	// 所属初始进程组pgrp
			0,														/* initial session */	// 初始会话级session
			0,														/* initial stopped */	// 初始停止标志stopped
			con_write,
			con_queues + 0 + i * 3, con_queues + 1 + i * 3, con_queues + 2 + i * 3
   19def:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19df3:	69 c0 30 0c 00 00    	imul   $0xc30,%eax,%eax
   19df9:	8d b0 a0 12 03 00    	lea    0x312a0(%eax),%esi
   19dff:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19e03:	69 c0 30 0c 00 00    	imul   $0xc30,%eax,%eax
   19e09:	05 10 04 00 00       	add    $0x410,%eax
   19e0e:	8d 98 a0 12 03 00    	lea    0x312a0(%eax),%ebx
   19e14:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19e18:	69 c0 30 0c 00 00    	imul   $0xc30,%eax,%eax
   19e1e:	05 20 08 00 00       	add    $0x820,%eax
   19e23:	8d 88 a0 12 03 00    	lea    0x312a0(%eax),%ecx
	// 输入模式标志集被初始化为ICRNL标志;输出模式标志被初始化含有后处理标志OPOST和把NL转换成CRNL的标志ONLCR;本地模式标志集被初始化
	// 含有IXON,ICAON,ECHO,ECHOCTL和ECHOKE标志;控制字符数组c_cc[]被设置含有初始值INIT_C_CC.
	// 435行上初始化控制台终端tty结构中的读缓冲,写缓冲和辅助缓冲队列结构,它们分别指向tty缓冲队列结构数组tty_table[]中的相应结构项.
	con_init();
	for (i = 0 ; i < NR_CONSOLES ; i++) {
		con_table[i] = (struct tty_struct) {
   19e29:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19e2d:	c1 e0 06             	shl    $0x6,%eax
   19e30:	05 20 18 04 00       	add    $0x41820,%eax
   19e35:	c7 00 00 01 00 00    	movl   $0x100,(%eax)
   19e3b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19e3f:	c1 e0 06             	shl    $0x6,%eax
   19e42:	05 24 18 04 00       	add    $0x41824,%eax
   19e47:	c7 00 05 00 00 00    	movl   $0x5,(%eax)
   19e4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19e51:	c1 e0 06             	shl    $0x6,%eax
   19e54:	05 28 18 04 00       	add    $0x41828,%eax
   19e59:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19e5f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19e63:	c1 e0 06             	shl    $0x6,%eax
   19e66:	05 2c 18 04 00       	add    $0x4182c,%eax
   19e6b:	c7 00 0b 0e 00 00    	movl   $0xe0b,(%eax)
   19e71:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19e75:	c1 e0 06             	shl    $0x6,%eax
   19e78:	05 30 18 04 00       	add    $0x41830,%eax
   19e7d:	c6 00 00             	movb   $0x0,(%eax)
   19e80:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19e84:	c1 e0 06             	shl    $0x6,%eax
   19e87:	05 30 18 04 00       	add    $0x41830,%eax
   19e8c:	8b 15 70 4d 02 00    	mov    0x24d70,%edx
   19e92:	89 50 01             	mov    %edx,0x1(%eax)
   19e95:	8b 15 74 4d 02 00    	mov    0x24d74,%edx
   19e9b:	89 50 05             	mov    %edx,0x5(%eax)
   19e9e:	8b 15 78 4d 02 00    	mov    0x24d78,%edx
   19ea4:	89 50 09             	mov    %edx,0x9(%eax)
   19ea7:	8b 15 7c 4d 02 00    	mov    0x24d7c,%edx
   19ead:	89 50 0d             	mov    %edx,0xd(%eax)
   19eb0:	0f b6 15 80 4d 02 00 	movzbl 0x24d80,%edx
   19eb7:	88 50 11             	mov    %dl,0x11(%eax)
   19eba:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19ebe:	c1 e0 06             	shl    $0x6,%eax
   19ec1:	05 44 18 04 00       	add    $0x41844,%eax
   19ec6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19ecc:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19ed0:	c1 e0 06             	shl    $0x6,%eax
   19ed3:	05 48 18 04 00       	add    $0x41848,%eax
   19ed8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19ede:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19ee2:	c1 e0 06             	shl    $0x6,%eax
   19ee5:	05 4c 18 04 00       	add    $0x4184c,%eax
   19eea:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19ef0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19ef4:	c1 e0 06             	shl    $0x6,%eax
   19ef7:	05 50 18 04 00       	add    $0x41850,%eax
   19efc:	c7 00 3e ba 01 00    	movl   $0x1ba3e,(%eax)
   19f02:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19f06:	c1 e0 06             	shl    $0x6,%eax
   19f09:	05 54 18 04 00       	add    $0x41854,%eax
   19f0e:	89 30                	mov    %esi,(%eax)
   19f10:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19f14:	c1 e0 06             	shl    $0x6,%eax
   19f17:	05 58 18 04 00       	add    $0x41858,%eax
   19f1c:	89 18                	mov    %ebx,(%eax)
   19f1e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19f22:	c1 e0 06             	shl    $0x6,%eax
   19f25:	05 5c 18 04 00       	add    $0x4185c,%eax
   19f2a:	89 08                	mov    %ecx,(%eax)
	// NR_CONSOLES.该值被用于随后的控制tty结构初始化循环中.对于控制台的tty结构,425--430行是tty结构中包含的termios结构字段.其中
	// 输入模式标志集被初始化为ICRNL标志;输出模式标志被初始化含有后处理标志OPOST和把NL转换成CRNL的标志ONLCR;本地模式标志集被初始化
	// 含有IXON,ICAON,ECHO,ECHOCTL和ECHOKE标志;控制字符数组c_cc[]被设置含有初始值INIT_C_CC.
	// 435行上初始化控制台终端tty结构中的读缓冲,写缓冲和辅助缓冲队列结构,它们分别指向tty缓冲队列结构数组tty_table[]中的相应结构项.
	con_init();
	for (i = 0 ; i < NR_CONSOLES ; i++) {
   19f2c:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   19f31:	a1 20 ee 03 00       	mov    0x3ee20,%eax
   19f36:	39 44 24 0c          	cmp    %eax,0xc(%esp)
   19f3a:	0f 8c af fe ff ff    	jl     19def <tty_init+0x24e>
			con_queues + 0 + i * 3, con_queues + 1 + i * 3, con_queues + 2 + i * 3
		};
	}
	// 然后初始化串行终端的tty结构各字段。450行初始化串行终端tty结构中的读/写和辅助缓冲队列结构，它们分别指向tty缓冲队列
	// 结构数组tty_table[]中相应结构项。
	for (i = 0 ; i < NR_SERIALS ; i++) {
   19f40:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   19f47:	00 
   19f48:	e9 c8 00 00 00       	jmp    1a015 <tty_init+0x474>
		rs_table[i] = (struct tty_struct) {
   19f4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19f51:	83 c0 40             	add    $0x40,%eax
   19f54:	c1 e0 06             	shl    $0x6,%eax
   19f57:	05 20 18 04 00       	add    $0x41820,%eax
			INIT_C_CC},                     						// 控制字符数组。
			0,                              						// 所属初始进程组。
			0,                              						// 初始会话组。
			0,                              						// 初始停止标志。
			rs_write,                       						// 串口终端写函数。
			rs_queues + 0 + i * 3, rs_queues + 1 + i * 3, rs_queues + 2 + i * 3
   19f5c:	8b 54 24 0c          	mov    0xc(%esp),%edx
   19f60:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   19f66:	81 c2 80 61 00 00    	add    $0x6180,%edx
   19f6c:	8d b2 a0 12 03 00    	lea    0x312a0(%edx),%esi
   19f72:	8b 54 24 0c          	mov    0xc(%esp),%edx
   19f76:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   19f7c:	81 c2 90 65 00 00    	add    $0x6590,%edx
   19f82:	8d 9a a0 12 03 00    	lea    0x312a0(%edx),%ebx
   19f88:	8b 54 24 0c          	mov    0xc(%esp),%edx
   19f8c:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   19f92:	81 c2 a0 69 00 00    	add    $0x69a0,%edx
   19f98:	8d 8a a0 12 03 00    	lea    0x312a0(%edx),%ecx
		};
	}
	// 然后初始化串行终端的tty结构各字段。450行初始化串行终端tty结构中的读/写和辅助缓冲队列结构，它们分别指向tty缓冲队列
	// 结构数组tty_table[]中相应结构项。
	for (i = 0 ; i < NR_SERIALS ; i++) {
		rs_table[i] = (struct tty_struct) {
   19f9e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19fa4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   19fab:	c7 40 08 3b 00 00 00 	movl   $0x3b,0x8(%eax)
   19fb2:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
   19fb9:	c6 40 10 00          	movb   $0x0,0x10(%eax)
   19fbd:	8b 15 70 4d 02 00    	mov    0x24d70,%edx
   19fc3:	89 50 11             	mov    %edx,0x11(%eax)
   19fc6:	8b 15 74 4d 02 00    	mov    0x24d74,%edx
   19fcc:	89 50 15             	mov    %edx,0x15(%eax)
   19fcf:	8b 15 78 4d 02 00    	mov    0x24d78,%edx
   19fd5:	89 50 19             	mov    %edx,0x19(%eax)
   19fd8:	8b 15 7c 4d 02 00    	mov    0x24d7c,%edx
   19fde:	89 50 1d             	mov    %edx,0x1d(%eax)
   19fe1:	0f b6 15 80 4d 02 00 	movzbl 0x24d80,%edx
   19fe8:	88 50 21             	mov    %dl,0x21(%eax)
   19feb:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
   19ff2:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   19ff9:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
   1a000:	c7 40 30 65 e0 01 00 	movl   $0x1e065,0x30(%eax)
   1a007:	89 70 34             	mov    %esi,0x34(%eax)
   1a00a:	89 58 38             	mov    %ebx,0x38(%eax)
   1a00d:	89 48 3c             	mov    %ecx,0x3c(%eax)
			con_queues + 0 + i * 3, con_queues + 1 + i * 3, con_queues + 2 + i * 3
		};
	}
	// 然后初始化串行终端的tty结构各字段。450行初始化串行终端tty结构中的读/写和辅助缓冲队列结构，它们分别指向tty缓冲队列
	// 结构数组tty_table[]中相应结构项。
	for (i = 0 ; i < NR_SERIALS ; i++) {
   1a010:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   1a015:	83 7c 24 0c 01       	cmpl   $0x1,0xc(%esp)
   1a01a:	0f 8e 2d ff ff ff    	jle    19f4d <tty_init+0x3ac>
			rs_queues + 0 + i * 3, rs_queues + 1 + i * 3, rs_queues + 2 + i * 3
		};
	}
	// 然后再初始化伪终端使用的tty结构。伪终端是配对使用的，即一个主（master）伪终端配有一个从（slave）伪终端。因此对它们
	// 都要进行初始化设置。在循环中，我们首先初始化每个主伪终端的tty结构，然后再初始化其对应的从伪终端的tty结构。
	for (i = 0 ; i < NR_PTYS ; i++) {
   1a020:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   1a027:	00 
   1a028:	e9 8d 01 00 00       	jmp    1a1ba <tty_init+0x619>
		mpty_table[i] = (struct tty_struct) {
   1a02d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1a031:	83 e8 80             	sub    $0xffffff80,%eax
   1a034:	c1 e0 06             	shl    $0x6,%eax
   1a037:	05 20 18 04 00       	add    $0x41820,%eax
			INIT_C_CC},                    							// 控制字符数组。
			0,                              						// 所属初始进程组。
			0,                              						// 初始会话组。
			0,                              						// 初始停止标志。
			mpty_write,                     						// 主伪终端写函数。
			mpty_queues + 0 + i * 3, mpty_queues + 1 + i * 3, mpty_queues + 2 + i * 3
   1a03c:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1a040:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   1a046:	81 c2 e0 79 00 00    	add    $0x79e0,%edx
   1a04c:	8d b2 a0 12 03 00    	lea    0x312a0(%edx),%esi
   1a052:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1a056:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   1a05c:	81 c2 f0 7d 00 00    	add    $0x7df0,%edx
   1a062:	8d 9a a0 12 03 00    	lea    0x312a0(%edx),%ebx
   1a068:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1a06c:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   1a072:	81 c2 00 82 00 00    	add    $0x8200,%edx
   1a078:	8d 8a a0 12 03 00    	lea    0x312a0(%edx),%ecx
		};
	}
	// 然后再初始化伪终端使用的tty结构。伪终端是配对使用的，即一个主（master）伪终端配有一个从（slave）伪终端。因此对它们
	// 都要进行初始化设置。在循环中，我们首先初始化每个主伪终端的tty结构，然后再初始化其对应的从伪终端的tty结构。
	for (i = 0 ; i < NR_PTYS ; i++) {
		mpty_table[i] = (struct tty_struct) {
   1a07e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   1a084:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1a08b:	c7 40 08 3d 00 00 00 	movl   $0x3d,0x8(%eax)
   1a092:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
   1a099:	c6 40 10 00          	movb   $0x0,0x10(%eax)
   1a09d:	8b 15 70 4d 02 00    	mov    0x24d70,%edx
   1a0a3:	89 50 11             	mov    %edx,0x11(%eax)
   1a0a6:	8b 15 74 4d 02 00    	mov    0x24d74,%edx
   1a0ac:	89 50 15             	mov    %edx,0x15(%eax)
   1a0af:	8b 15 78 4d 02 00    	mov    0x24d78,%edx
   1a0b5:	89 50 19             	mov    %edx,0x19(%eax)
   1a0b8:	8b 15 7c 4d 02 00    	mov    0x24d7c,%edx
   1a0be:	89 50 1d             	mov    %edx,0x1d(%eax)
   1a0c1:	0f b6 15 80 4d 02 00 	movzbl 0x24d80,%edx
   1a0c8:	88 50 21             	mov    %dl,0x21(%eax)
   1a0cb:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
   1a0d2:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   1a0d9:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
   1a0e0:	c7 40 30 bc eb 01 00 	movl   $0x1ebbc,0x30(%eax)
   1a0e7:	89 70 34             	mov    %esi,0x34(%eax)
   1a0ea:	89 58 38             	mov    %ebx,0x38(%eax)
   1a0ed:	89 48 3c             	mov    %ecx,0x3c(%eax)
			0,                              						// 初始会话组。
			0,                              						// 初始停止标志。
			mpty_write,                     						// 主伪终端写函数。
			mpty_queues + 0 + i * 3, mpty_queues + 1 + i * 3, mpty_queues + 2 + i * 3
		};
		spty_table[i] = (struct tty_struct) {
   1a0f0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1a0f4:	05 c0 00 00 00       	add    $0xc0,%eax
   1a0f9:	c1 e0 06             	shl    $0x6,%eax
   1a0fc:	05 20 18 04 00       	add    $0x41820,%eax
			INIT_C_CC},                    							// 控制字符数组。
			0,                              						// 所属初始进程组。
			0,                              						// 初始会话组。
			0,                              						// 初始停止标志。
			spty_write,                     						// 从伪终端写函数。
			spty_queues + 0 + i * 3, spty_queues + 1 + i * 3, spty_queues + 2 + i * 3
   1a101:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1a105:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   1a10b:	81 c2 a0 aa 00 00    	add    $0xaaa0,%edx
   1a111:	8d b2 a0 12 03 00    	lea    0x312a0(%edx),%esi
   1a117:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1a11b:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   1a121:	81 c2 b0 ae 00 00    	add    $0xaeb0,%edx
   1a127:	8d 9a a0 12 03 00    	lea    0x312a0(%edx),%ebx
   1a12d:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1a131:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   1a137:	81 c2 c0 b2 00 00    	add    $0xb2c0,%edx
   1a13d:	8d 8a a0 12 03 00    	lea    0x312a0(%edx),%ecx
			0,                              						// 初始会话组。
			0,                              						// 初始停止标志。
			mpty_write,                     						// 主伪终端写函数。
			mpty_queues + 0 + i * 3, mpty_queues + 1 + i * 3, mpty_queues + 2 + i * 3
		};
		spty_table[i] = (struct tty_struct) {
   1a143:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   1a149:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1a150:	c7 40 08 3d 00 00 00 	movl   $0x3d,0x8(%eax)
   1a157:	c7 40 0c 03 04 00 00 	movl   $0x403,0xc(%eax)
   1a15e:	c6 40 10 00          	movb   $0x0,0x10(%eax)
   1a162:	8b 15 70 4d 02 00    	mov    0x24d70,%edx
   1a168:	89 50 11             	mov    %edx,0x11(%eax)
   1a16b:	8b 15 74 4d 02 00    	mov    0x24d74,%edx
   1a171:	89 50 15             	mov    %edx,0x15(%eax)
   1a174:	8b 15 78 4d 02 00    	mov    0x24d78,%edx
   1a17a:	89 50 19             	mov    %edx,0x19(%eax)
   1a17d:	8b 15 7c 4d 02 00    	mov    0x24d7c,%edx
   1a183:	89 50 1d             	mov    %edx,0x1d(%eax)
   1a186:	0f b6 15 80 4d 02 00 	movzbl 0x24d80,%edx
   1a18d:	88 50 21             	mov    %dl,0x21(%eax)
   1a190:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
   1a197:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   1a19e:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
   1a1a5:	c7 40 30 0d ec 01 00 	movl   $0x1ec0d,0x30(%eax)
   1a1ac:	89 70 34             	mov    %esi,0x34(%eax)
   1a1af:	89 58 38             	mov    %ebx,0x38(%eax)
   1a1b2:	89 48 3c             	mov    %ecx,0x3c(%eax)
			rs_queues + 0 + i * 3, rs_queues + 1 + i * 3, rs_queues + 2 + i * 3
		};
	}
	// 然后再初始化伪终端使用的tty结构。伪终端是配对使用的，即一个主（master）伪终端配有一个从（slave）伪终端。因此对它们
	// 都要进行初始化设置。在循环中，我们首先初始化每个主伪终端的tty结构，然后再初始化其对应的从伪终端的tty结构。
	for (i = 0 ; i < NR_PTYS ; i++) {
   1a1b5:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   1a1ba:	83 7c 24 0c 03       	cmpl   $0x3,0xc(%esp)
   1a1bf:	0f 8e 68 fe ff ff    	jle    1a02d <tty_init+0x48c>
			spty_write,                     						// 从伪终端写函数。
			spty_queues + 0 + i * 3, spty_queues + 1 + i * 3, spty_queues + 2 + i * 3
		};
	}
	// 最后初始化串行中断处理程序和串行接口1和2（serial.c），并显示系统含有的虚拟控制台数NR_CONSOLES和伪终端数NR_PTYS。
	rs_init();
   1a1c5:	e8 10 3e 00 00       	call   1dfda <rs_init>
	printk("%d virtual consoles\n\r", NR_CONSOLES);
   1a1ca:	a1 20 ee 03 00       	mov    0x3ee20,%eax
   1a1cf:	83 ec 08             	sub    $0x8,%esp
   1a1d2:	50                   	push   %eax
   1a1d3:	68 01 45 02 00       	push   $0x24501
   1a1d8:	e8 6a ea fe ff       	call   8c47 <printk>
   1a1dd:	83 c4 10             	add    $0x10,%esp
	printk("%d pty's\n\r", NR_PTYS);
   1a1e0:	83 ec 08             	sub    $0x8,%esp
   1a1e3:	6a 04                	push   $0x4
   1a1e5:	68 17 45 02 00       	push   $0x24517
   1a1ea:	e8 58 ea fe ff       	call   8c47 <printk>
   1a1ef:	83 c4 10             	add    $0x10,%esp
}
   1a1f2:	90                   	nop
   1a1f3:	83 c4 10             	add    $0x10,%esp
   1a1f6:	5b                   	pop    %ebx
   1a1f7:	5e                   	pop    %esi
   1a1f8:	5f                   	pop    %edi
   1a1f9:	c3                   	ret    

0001a1fa <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
   1a1fa:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   1a1fb:	8b 44 24 08          	mov    0x8(%esp),%eax
   1a1ff:	64 8a 00             	mov    %fs:(%eax),%al
   1a202:	89 c3                	mov    %eax,%ebx
	return _v;
   1a204:	89 d8                	mov    %ebx,%eax
}
   1a206:	5b                   	pop    %ebx
   1a207:	c3                   	ret    

0001a208 <put_fs_byte>:

//// 将一字节存放在fs段中指定内存地址处.
// 参数:val - 字节值;addr - 内存地址.
// %0 - 寄存器(字节值val);%1 - (内存地址addr).
static inline void put_fs_byte(char val,char *addr)
{
   1a208:	83 ec 04             	sub    $0x4,%esp
   1a20b:	8b 44 24 08          	mov    0x8(%esp),%eax
   1a20f:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   1a212:	0f b6 04 24          	movzbl (%esp),%eax
   1a216:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1a21a:	64 88 02             	mov    %al,%fs:(%edx)
}
   1a21d:	90                   	nop
   1a21e:	83 c4 04             	add    $0x4,%esp
   1a221:	c3                   	ret    

0001a222 <gotoxy>:
// 注意,函数中的所有变量实际上是vc_cons[currcons]结构中的相应字段.以下函数相同.
/* NOTE! gotoxy thinks x==video_num_columns is ok */
/* 注意!gotoxy函数认为x==video_num_columns时是正确的 */
static inline void gotoxy(int currcons, int new_x, unsigned int new_y)
{
	if (new_x > video_num_columns || new_y >= video_num_lines)
   1a222:	8b 54 24 08          	mov    0x8(%esp),%edx
   1a226:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1a22b:	39 c2                	cmp    %eax,%edx
   1a22d:	0f 87 a6 00 00 00    	ja     1a2d9 <gotoxy+0xb7>
   1a233:	a1 44 ee 03 00       	mov    0x3ee44,%eax
   1a238:	39 44 24 0c          	cmp    %eax,0xc(%esp)
   1a23c:	0f 83 97 00 00 00    	jae    1a2d9 <gotoxy+0xb7>
		return;
	x = new_x;
   1a242:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   1a246:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a24a:	89 d0                	mov    %edx,%eax
   1a24c:	c1 e0 03             	shl    $0x3,%eax
   1a24f:	01 d0                	add    %edx,%eax
   1a251:	c1 e0 04             	shl    $0x4,%eax
   1a254:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1a259:	89 08                	mov    %ecx,(%eax)
	y = new_y;
   1a25b:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a25f:	89 d0                	mov    %edx,%eax
   1a261:	c1 e0 03             	shl    $0x3,%eax
   1a264:	01 d0                	add    %edx,%eax
   1a266:	c1 e0 04             	shl    $0x4,%eax
   1a269:	8d 90 88 ee 03 00    	lea    0x3ee88(%eax),%edx
   1a26f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1a273:	89 02                	mov    %eax,(%edx)
	pos = origin + y * video_size_row + (x << 1);	// 1列用2个字节表示,所以x<<1.
   1a275:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a279:	89 d0                	mov    %edx,%eax
   1a27b:	c1 e0 03             	shl    $0x3,%eax
   1a27e:	01 d0                	add    %edx,%eax
   1a280:	c1 e0 04             	shl    $0x4,%eax
   1a283:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a288:	8b 08                	mov    (%eax),%ecx
   1a28a:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a28e:	89 d0                	mov    %edx,%eax
   1a290:	c1 e0 03             	shl    $0x3,%eax
   1a293:	01 d0                	add    %edx,%eax
   1a295:	c1 e0 04             	shl    $0x4,%eax
   1a298:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1a29d:	8b 10                	mov    (%eax),%edx
   1a29f:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1a2a4:	0f af c2             	imul   %edx,%eax
   1a2a7:	01 c1                	add    %eax,%ecx
   1a2a9:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a2ad:	89 d0                	mov    %edx,%eax
   1a2af:	c1 e0 03             	shl    $0x3,%eax
   1a2b2:	01 d0                	add    %edx,%eax
   1a2b4:	c1 e0 04             	shl    $0x4,%eax
   1a2b7:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1a2bc:	8b 00                	mov    (%eax),%eax
   1a2be:	01 c0                	add    %eax,%eax
   1a2c0:	01 c1                	add    %eax,%ecx
   1a2c2:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a2c6:	89 d0                	mov    %edx,%eax
   1a2c8:	c1 e0 03             	shl    $0x3,%eax
   1a2cb:	01 d0                	add    %edx,%eax
   1a2cd:	c1 e0 04             	shl    $0x4,%eax
   1a2d0:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1a2d5:	89 08                	mov    %ecx,(%eax)
   1a2d7:	eb 01                	jmp    1a2da <gotoxy+0xb8>
/* NOTE! gotoxy thinks x==video_num_columns is ok */
/* 注意!gotoxy函数认为x==video_num_columns时是正确的 */
static inline void gotoxy(int currcons, int new_x, unsigned int new_y)
{
	if (new_x > video_num_columns || new_y >= video_num_lines)
		return;
   1a2d9:	90                   	nop
	x = new_x;
	y = new_y;
	pos = origin + y * video_size_row + (x << 1);	// 1列用2个字节表示,所以x<<1.
}
   1a2da:	c3                   	ret    

0001a2db <set_origin>:
static inline void set_origin(int currcons)
{
	// 首先判断显示卡类型.对于EGA/VGA,我们可以指定屏内范围(区域)进行滚屏操作,而MDA单色显示卡只能进行整屏滚屏操作.因此只有EGA/VGA卡才需要设置
	// 滚屏起始行显示内存地址(起始行是origin对应的行).即显示类型如果不是EGA/VGA彩色模式,也不是EGA/VGA单色模式,那么就直接返回.另外,我们只对前
	// 台控制台进行操作,因此当前控制台currocons必须是前台控制台时,我们才需要设置其滚屏起始行对应的内存起点位置.
	if (video_type != VIDEO_TYPE_EGAC && video_type != VIDEO_TYPE_EGAM)
   1a2db:	0f b6 05 30 ee 03 00 	movzbl 0x3ee30,%eax
   1a2e2:	3c 21                	cmp    $0x21,%al
   1a2e4:	74 0f                	je     1a2f5 <set_origin+0x1a>
   1a2e6:	0f b6 05 30 ee 03 00 	movzbl 0x3ee30,%eax
   1a2ed:	3c 20                	cmp    $0x20,%al
   1a2ef:	0f 85 94 00 00 00    	jne    1a389 <set_origin+0xae>
		return;
	if (currcons != fg_console)
   1a2f5:	a1 80 12 03 00       	mov    0x31280,%eax
   1a2fa:	39 44 24 04          	cmp    %eax,0x4(%esp)
   1a2fe:	0f 85 88 00 00 00    	jne    1a38c <set_origin+0xb1>
		return;
	// 然后向显示寄存器选择端口video_port_reg输出12,即选择显示控制数据寄存器r12,接着写入滚屏起始地址高字节.其中向右移动9位,实际上表示向右移动
	// 8位再除以2(上1个字符用2字节表示).再选择显示控制数据寄存器r13,然后写入滚屏起始地址低字节.向右移动1位表示除以2,同样代表屏幕上1个字符用2字节
	// 表示.输出值相对于默认显示内存起始位置video_mem_base进行操作.
	// 例如对于EGA/VGA彩色模式,viedo_mem_base = 物理内存地址0xb8000.
	cli();
   1a304:	fa                   	cli    
	outb_p(12, video_port_reg);											// 选择数据寄存器r12,输出滚屏起始位置高字节.
   1a305:	0f b7 15 4a ee 03 00 	movzwl 0x3ee4a,%edx
   1a30c:	b8 0c 00 00 00       	mov    $0xc,%eax
   1a311:	ee                   	out    %al,(%dx)
   1a312:	eb 00                	jmp    1a314 <set_origin+0x39>
   1a314:	eb 00                	jmp    1a316 <set_origin+0x3b>
	outb_p(0xff & ((origin - video_mem_base) >> 9), video_port_val);
   1a316:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a31a:	89 d0                	mov    %edx,%eax
   1a31c:	c1 e0 03             	shl    $0x3,%eax
   1a31f:	01 d0                	add    %edx,%eax
   1a321:	c1 e0 04             	shl    $0x4,%eax
   1a324:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a329:	8b 10                	mov    (%eax),%edx
   1a32b:	a1 38 ee 03 00       	mov    0x3ee38,%eax
   1a330:	29 c2                	sub    %eax,%edx
   1a332:	89 d0                	mov    %edx,%eax
   1a334:	c1 e8 09             	shr    $0x9,%eax
   1a337:	0f b6 c0             	movzbl %al,%eax
   1a33a:	0f b7 15 4c ee 03 00 	movzwl 0x3ee4c,%edx
   1a341:	ee                   	out    %al,(%dx)
   1a342:	eb 00                	jmp    1a344 <set_origin+0x69>
   1a344:	eb 00                	jmp    1a346 <set_origin+0x6b>
	outb_p(13, video_port_reg);											// 选择数据寄存器r13,输出滚屏起始位置低字节.
   1a346:	0f b7 15 4a ee 03 00 	movzwl 0x3ee4a,%edx
   1a34d:	b8 0d 00 00 00       	mov    $0xd,%eax
   1a352:	ee                   	out    %al,(%dx)
   1a353:	eb 00                	jmp    1a355 <set_origin+0x7a>
   1a355:	eb 00                	jmp    1a357 <set_origin+0x7c>
	outb_p(0xff & ((origin - video_mem_base) >> 1), video_port_val);
   1a357:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a35b:	89 d0                	mov    %edx,%eax
   1a35d:	c1 e0 03             	shl    $0x3,%eax
   1a360:	01 d0                	add    %edx,%eax
   1a362:	c1 e0 04             	shl    $0x4,%eax
   1a365:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a36a:	8b 10                	mov    (%eax),%edx
   1a36c:	a1 38 ee 03 00       	mov    0x3ee38,%eax
   1a371:	29 c2                	sub    %eax,%edx
   1a373:	89 d0                	mov    %edx,%eax
   1a375:	d1 e8                	shr    %eax
   1a377:	0f b6 c0             	movzbl %al,%eax
   1a37a:	0f b7 15 4c ee 03 00 	movzwl 0x3ee4c,%edx
   1a381:	ee                   	out    %al,(%dx)
   1a382:	eb 00                	jmp    1a384 <set_origin+0xa9>
   1a384:	eb 00                	jmp    1a386 <set_origin+0xab>
	sti();
   1a386:	fb                   	sti    
   1a387:	eb 04                	jmp    1a38d <set_origin+0xb2>
{
	// 首先判断显示卡类型.对于EGA/VGA,我们可以指定屏内范围(区域)进行滚屏操作,而MDA单色显示卡只能进行整屏滚屏操作.因此只有EGA/VGA卡才需要设置
	// 滚屏起始行显示内存地址(起始行是origin对应的行).即显示类型如果不是EGA/VGA彩色模式,也不是EGA/VGA单色模式,那么就直接返回.另外,我们只对前
	// 台控制台进行操作,因此当前控制台currocons必须是前台控制台时,我们才需要设置其滚屏起始行对应的内存起点位置.
	if (video_type != VIDEO_TYPE_EGAC && video_type != VIDEO_TYPE_EGAM)
		return;
   1a389:	90                   	nop
   1a38a:	eb 01                	jmp    1a38d <set_origin+0xb2>
	if (currcons != fg_console)
		return;
   1a38c:	90                   	nop
	outb_p(12, video_port_reg);											// 选择数据寄存器r12,输出滚屏起始位置高字节.
	outb_p(0xff & ((origin - video_mem_base) >> 9), video_port_val);
	outb_p(13, video_port_reg);											// 选择数据寄存器r13,输出滚屏起始位置低字节.
	outb_p(0xff & ((origin - video_mem_base) >> 1), video_port_val);
	sti();
}
   1a38d:	c3                   	ret    

0001a38e <scrup>:

// 向上卷动上行
// 将屏幕滚动窗口向上移动一行,并在屏幕滚动区域底出现的新行上添加空格字符.滚屏区域必须大于1行.
static void scrup(int currcons)
{
   1a38e:	57                   	push   %edi
   1a38f:	56                   	push   %esi
   1a390:	53                   	push   %ebx
	// 滚屏区域必须至少有2行.如果滚屏区域顶行号大于等于区域底行号,则不满足进行滚行操作的条件.另外,对于EGA/VGA卡,我们可以指定屏内行范围(区域)
	// 进行滚屏操作,而MDA单色显示卡只能进行整屏操作.该函数对EGA和MDA显示类型进行分别处理.如果显示类型是EGA,则还分为整屏窗口移动和区域内窗口移动
	// 这里首先处理显示卡是EGA/VGA显示类型的情况.
	if (bottom <= top)
   1a391:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a395:	89 d0                	mov    %edx,%eax
   1a397:	c1 e0 03             	shl    $0x3,%eax
   1a39a:	01 d0                	add    %edx,%eax
   1a39c:	c1 e0 04             	shl    $0x4,%eax
   1a39f:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1a3a4:	8b 08                	mov    (%eax),%ecx
   1a3a6:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a3aa:	89 d0                	mov    %edx,%eax
   1a3ac:	c1 e0 03             	shl    $0x3,%eax
   1a3af:	01 d0                	add    %edx,%eax
   1a3b1:	c1 e0 04             	shl    $0x4,%eax
   1a3b4:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1a3b9:	8b 00                	mov    (%eax),%eax
   1a3bb:	39 c1                	cmp    %eax,%ecx
   1a3bd:	0f 86 5d 04 00 00    	jbe    1a820 <scrup+0x492>
		return;
	if (video_type == VIDEO_TYPE_EGAC || video_type == VIDEO_TYPE_EGAM)
   1a3c3:	0f b6 05 30 ee 03 00 	movzbl 0x3ee30,%eax
   1a3ca:	3c 21                	cmp    $0x21,%al
   1a3cc:	74 0f                	je     1a3dd <scrup+0x4f>
   1a3ce:	0f b6 05 30 ee 03 00 	movzbl 0x3ee30,%eax
   1a3d5:	3c 20                	cmp    $0x20,%al
   1a3d7:	0f 85 71 03 00 00    	jne    1a74e <scrup+0x3c0>
	{
		// 如果移动起始行top=0,移动最底行bottom = video_num_lines = 25,则表示整屏窗口向下移动,于是把整个屏幕窗口左上角对应的起始内存位置origin
		// 调整为向下移动一行对应的内存位置,同时也跟踪调整当前光标对应的内存位置以及屏幕末行末端字符指针scr_end的位置.最后把新屏幕窗口内存起始位置值
		// origin写入显示控制器中
		if (!top && bottom == video_num_lines) {
   1a3dd:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a3e1:	89 d0                	mov    %edx,%eax
   1a3e3:	c1 e0 03             	shl    $0x3,%eax
   1a3e6:	01 d0                	add    %edx,%eax
   1a3e8:	c1 e0 04             	shl    $0x4,%eax
   1a3eb:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1a3f0:	8b 00                	mov    (%eax),%eax
   1a3f2:	85 c0                	test   %eax,%eax
   1a3f4:	0f 85 7f 02 00 00    	jne    1a679 <scrup+0x2eb>
   1a3fa:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a3fe:	89 d0                	mov    %edx,%eax
   1a400:	c1 e0 03             	shl    $0x3,%eax
   1a403:	01 d0                	add    %edx,%eax
   1a405:	c1 e0 04             	shl    $0x4,%eax
   1a408:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1a40d:	8b 10                	mov    (%eax),%edx
   1a40f:	a1 44 ee 03 00       	mov    0x3ee44,%eax
   1a414:	39 c2                	cmp    %eax,%edx
   1a416:	0f 85 5d 02 00 00    	jne    1a679 <scrup+0x2eb>
			origin += video_size_row;
   1a41c:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a420:	89 d0                	mov    %edx,%eax
   1a422:	c1 e0 03             	shl    $0x3,%eax
   1a425:	01 d0                	add    %edx,%eax
   1a427:	c1 e0 04             	shl    $0x4,%eax
   1a42a:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a42f:	8b 10                	mov    (%eax),%edx
   1a431:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1a436:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1a439:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a43d:	89 d0                	mov    %edx,%eax
   1a43f:	c1 e0 03             	shl    $0x3,%eax
   1a442:	01 d0                	add    %edx,%eax
   1a444:	c1 e0 04             	shl    $0x4,%eax
   1a447:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a44c:	89 08                	mov    %ecx,(%eax)
			pos += video_size_row;
   1a44e:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a452:	89 d0                	mov    %edx,%eax
   1a454:	c1 e0 03             	shl    $0x3,%eax
   1a457:	01 d0                	add    %edx,%eax
   1a459:	c1 e0 04             	shl    $0x4,%eax
   1a45c:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1a461:	8b 10                	mov    (%eax),%edx
   1a463:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1a468:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1a46b:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a46f:	89 d0                	mov    %edx,%eax
   1a471:	c1 e0 03             	shl    $0x3,%eax
   1a474:	01 d0                	add    %edx,%eax
   1a476:	c1 e0 04             	shl    $0x4,%eax
   1a479:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1a47e:	89 08                	mov    %ecx,(%eax)
			scr_end += video_size_row;
   1a480:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a484:	89 d0                	mov    %edx,%eax
   1a486:	c1 e0 03             	shl    $0x3,%eax
   1a489:	01 d0                	add    %edx,%eax
   1a48b:	c1 e0 04             	shl    $0x4,%eax
   1a48e:	05 7c ee 03 00       	add    $0x3ee7c,%eax
   1a493:	8b 10                	mov    (%eax),%edx
   1a495:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1a49a:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1a49d:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a4a1:	89 d0                	mov    %edx,%eax
   1a4a3:	c1 e0 03             	shl    $0x3,%eax
   1a4a6:	01 d0                	add    %edx,%eax
   1a4a8:	c1 e0 04             	shl    $0x4,%eax
   1a4ab:	05 7c ee 03 00       	add    $0x3ee7c,%eax
   1a4b0:	89 08                	mov    %ecx,(%eax)
			// 如果屏幕窗口末端所对应的显示内存指针scr_end超出了实际显示内存末端,则将屏幕内容除第一行以外所有行对应的内存数据移动到显示内存的起始位置video_mem_start
			// 处,并在整屏窗口向下移动出现的新行上填入空格字符.然后根据屏幕内存数据移动后的情况,重新调整当前屏幕对应内存的起始指针,光标位置指针和屏幕末端
			// 对应内存指针scr_end.
			if (scr_end > video_mem_end) {
   1a4b2:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a4b6:	89 d0                	mov    %edx,%eax
   1a4b8:	c1 e0 03             	shl    $0x3,%eax
   1a4bb:	01 d0                	add    %edx,%eax
   1a4bd:	c1 e0 04             	shl    $0x4,%eax
   1a4c0:	05 7c ee 03 00       	add    $0x3ee7c,%eax
   1a4c5:	8b 08                	mov    (%eax),%ecx
   1a4c7:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a4cb:	89 d0                	mov    %edx,%eax
   1a4cd:	c1 e0 03             	shl    $0x3,%eax
   1a4d0:	01 d0                	add    %edx,%eax
   1a4d2:	c1 e0 04             	shl    $0x4,%eax
   1a4d5:	05 dc ee 03 00       	add    $0x3eedc,%eax
   1a4da:	8b 00                	mov    (%eax),%eax
   1a4dc:	39 c1                	cmp    %eax,%ecx
   1a4de:	0f 86 44 01 00 00    	jbe    1a628 <scrup+0x29a>
					"rep\n\t"												// 重复操作,将当前屏幕内存数据移动到显示内存起始处
					"movsl\n\t"
					"movl video_num_columns, %1\n\t"
					"rep\n\t"												// 在新行上填入空格字符
					"stosw"
					::"a" (video_erase_char),
   1a4e4:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a4e8:	89 d0                	mov    %edx,%eax
   1a4ea:	c1 e0 03             	shl    $0x3,%eax
   1a4ed:	01 d0                	add    %edx,%eax
   1a4ef:	c1 e0 04             	shl    $0x4,%eax
   1a4f2:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1a4f7:	0f b7 18             	movzwl (%eax),%ebx
					"c" ((video_num_lines - 1) * video_num_columns >> 1),
   1a4fa:	a1 44 ee 03 00       	mov    0x3ee44,%eax
   1a4ff:	8d 50 ff             	lea    -0x1(%eax),%edx
   1a502:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1a507:	0f af c2             	imul   %edx,%eax
   1a50a:	d1 e8                	shr    %eax
   1a50c:	89 c1                	mov    %eax,%ecx
					"D" (video_mem_start),
   1a50e:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a512:	89 d0                	mov    %edx,%eax
   1a514:	c1 e0 03             	shl    $0x3,%eax
   1a517:	01 d0                	add    %edx,%eax
   1a519:	c1 e0 04             	shl    $0x4,%eax
   1a51c:	05 d8 ee 03 00       	add    $0x3eed8,%eax
   1a521:	8b 38                	mov    (%eax),%edi
					"S" (origin)
   1a523:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a527:	89 d0                	mov    %edx,%eax
   1a529:	c1 e0 03             	shl    $0x3,%eax
   1a52c:	01 d0                	add    %edx,%eax
   1a52e:	c1 e0 04             	shl    $0x4,%eax
   1a531:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a536:	8b 10                	mov    (%eax),%edx
				// 这段嵌入汇编程序首先将(屏幕字符行数 - 1)行对应的内存数据移动到显示内存起始位置video_mem_start处,然后在随后的内存位置处添加一行空格(擦除)
				// 字符数据.
				// %0 - eax(擦除字符+属性);%1 - ecx((屏幕字符行数-1)*所对应的字符数/2,以长字移动);
				// %2 - edi(显示内存起始位置video_mem_start); %3 - esi(屏幕窗口内存起始位置origin).
				// 移动方向:[edi] -> [esi],移动ecx个长字.
				__asm__("cld\n\t"											// 清方向位
   1a538:	89 d8                	mov    %ebx,%eax
   1a53a:	89 d6                	mov    %edx,%esi
   1a53c:	fc                   	cld    
   1a53d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   1a53f:	8b 0d 34 ee 03 00    	mov    0x3ee34,%ecx
   1a545:	f3 66 ab             	rep stos %ax,%es:(%edi)
					"c" ((video_num_lines - 1) * video_num_columns >> 1),
					"D" (video_mem_start),
					"S" (origin)
					:);
				// 重新设置快速滚屏的末端位置
				scr_end -= origin - video_mem_start;
   1a548:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a54c:	89 d0                	mov    %edx,%eax
   1a54e:	c1 e0 03             	shl    $0x3,%eax
   1a551:	01 d0                	add    %edx,%eax
   1a553:	c1 e0 04             	shl    $0x4,%eax
   1a556:	05 7c ee 03 00       	add    $0x3ee7c,%eax
   1a55b:	8b 08                	mov    (%eax),%ecx
   1a55d:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a561:	89 d0                	mov    %edx,%eax
   1a563:	c1 e0 03             	shl    $0x3,%eax
   1a566:	01 d0                	add    %edx,%eax
   1a568:	c1 e0 04             	shl    $0x4,%eax
   1a56b:	05 d8 ee 03 00       	add    $0x3eed8,%eax
   1a570:	8b 18                	mov    (%eax),%ebx
   1a572:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a576:	89 d0                	mov    %edx,%eax
   1a578:	c1 e0 03             	shl    $0x3,%eax
   1a57b:	01 d0                	add    %edx,%eax
   1a57d:	c1 e0 04             	shl    $0x4,%eax
   1a580:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a585:	8b 00                	mov    (%eax),%eax
   1a587:	29 c3                	sub    %eax,%ebx
   1a589:	89 d8                	mov    %ebx,%eax
   1a58b:	01 c1                	add    %eax,%ecx
   1a58d:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a591:	89 d0                	mov    %edx,%eax
   1a593:	c1 e0 03             	shl    $0x3,%eax
   1a596:	01 d0                	add    %edx,%eax
   1a598:	c1 e0 04             	shl    $0x4,%eax
   1a59b:	05 7c ee 03 00       	add    $0x3ee7c,%eax
   1a5a0:	89 08                	mov    %ecx,(%eax)
				// 设置当前显示位置
				pos -= origin - video_mem_start;
   1a5a2:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a5a6:	89 d0                	mov    %edx,%eax
   1a5a8:	c1 e0 03             	shl    $0x3,%eax
   1a5ab:	01 d0                	add    %edx,%eax
   1a5ad:	c1 e0 04             	shl    $0x4,%eax
   1a5b0:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1a5b5:	8b 08                	mov    (%eax),%ecx
   1a5b7:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a5bb:	89 d0                	mov    %edx,%eax
   1a5bd:	c1 e0 03             	shl    $0x3,%eax
   1a5c0:	01 d0                	add    %edx,%eax
   1a5c2:	c1 e0 04             	shl    $0x4,%eax
   1a5c5:	05 d8 ee 03 00       	add    $0x3eed8,%eax
   1a5ca:	8b 18                	mov    (%eax),%ebx
   1a5cc:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a5d0:	89 d0                	mov    %edx,%eax
   1a5d2:	c1 e0 03             	shl    $0x3,%eax
   1a5d5:	01 d0                	add    %edx,%eax
   1a5d7:	c1 e0 04             	shl    $0x4,%eax
   1a5da:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a5df:	8b 00                	mov    (%eax),%eax
   1a5e1:	29 c3                	sub    %eax,%ebx
   1a5e3:	89 d8                	mov    %ebx,%eax
   1a5e5:	01 c1                	add    %eax,%ecx
   1a5e7:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a5eb:	89 d0                	mov    %edx,%eax
   1a5ed:	c1 e0 03             	shl    $0x3,%eax
   1a5f0:	01 d0                	add    %edx,%eax
   1a5f2:	c1 e0 04             	shl    $0x4,%eax
   1a5f5:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1a5fa:	89 08                	mov    %ecx,(%eax)
				// 重新设置快速滚屏的起始位置
				origin = video_mem_start;
   1a5fc:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a600:	89 d0                	mov    %edx,%eax
   1a602:	c1 e0 03             	shl    $0x3,%eax
   1a605:	01 d0                	add    %edx,%eax
   1a607:	c1 e0 04             	shl    $0x4,%eax
   1a60a:	05 d8 ee 03 00       	add    $0x3eed8,%eax
   1a60f:	8b 08                	mov    (%eax),%ecx
   1a611:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a615:	89 d0                	mov    %edx,%eax
   1a617:	c1 e0 03             	shl    $0x3,%eax
   1a61a:	01 d0                	add    %edx,%eax
   1a61c:	c1 e0 04             	shl    $0x4,%eax
   1a61f:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a624:	89 08                	mov    %ecx,(%eax)
   1a626:	eb 40                	jmp    1a668 <scrup+0x2da>
			// %0 - eax(擦除字符+属性);%1 - ecx(屏幕行数);%2 - edi(最后1行开始处对应内存位置);
			} else {
				__asm__("cld\n\t"
					"rep\n\t"												// 重复操作,在新出现现上填入擦除字符(空格字符).
					"stosw"
					::"a" (video_erase_char),
   1a628:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a62c:	89 d0                	mov    %edx,%eax
   1a62e:	c1 e0 03             	shl    $0x3,%eax
   1a631:	01 d0                	add    %edx,%eax
   1a633:	c1 e0 04             	shl    $0x4,%eax
   1a636:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1a63b:	0f b7 18             	movzwl (%eax),%ebx
				// 重新设置快速滚屏的起始位置
				origin = video_mem_start;
			// 如果调整后的屏幕末端对应的内存指针scr_end没有超出显示内存的末端video_mem_end,则只需在新行上填入擦除字符(空格字符).
			// %0 - eax(擦除字符+属性);%1 - ecx(屏幕行数);%2 - edi(最后1行开始处对应内存位置);
			} else {
				__asm__("cld\n\t"
   1a63e:	8b 0d 34 ee 03 00    	mov    0x3ee34,%ecx
					"rep\n\t"												// 重复操作,在新出现现上填入擦除字符(空格字符).
					"stosw"
					::"a" (video_erase_char),
					"c" (video_num_columns),
					"D" (scr_end - video_size_row)
   1a644:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a648:	89 d0                	mov    %edx,%eax
   1a64a:	c1 e0 03             	shl    $0x3,%eax
   1a64d:	01 d0                	add    %edx,%eax
   1a64f:	c1 e0 04             	shl    $0x4,%eax
   1a652:	05 7c ee 03 00       	add    $0x3ee7c,%eax
   1a657:	8b 10                	mov    (%eax),%edx
   1a659:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1a65e:	29 c2                	sub    %eax,%edx
				// 重新设置快速滚屏的起始位置
				origin = video_mem_start;
			// 如果调整后的屏幕末端对应的内存指针scr_end没有超出显示内存的末端video_mem_end,则只需在新行上填入擦除字符(空格字符).
			// %0 - eax(擦除字符+属性);%1 - ecx(屏幕行数);%2 - edi(最后1行开始处对应内存位置);
			} else {
				__asm__("cld\n\t"
   1a660:	89 d8                	mov    %ebx,%eax
   1a662:	89 d7                	mov    %edx,%edi
   1a664:	fc                   	cld    
   1a665:	f3 66 ab             	rep stos %ax,%es:(%edi)
					"c" (video_num_columns),
					"D" (scr_end - video_size_row)
					:);
			}
			// 然后把新屏幕滚动窗口内存起始位置值origin写入显示控制器中.
			set_origin(currcons);
   1a668:	ff 74 24 10          	pushl  0x10(%esp)
   1a66c:	e8 6a fc ff ff       	call   1a2db <set_origin>
   1a671:	83 c4 04             	add    $0x4,%esp
	if (video_type == VIDEO_TYPE_EGAC || video_type == VIDEO_TYPE_EGAM)
	{
		// 如果移动起始行top=0,移动最底行bottom = video_num_lines = 25,则表示整屏窗口向下移动,于是把整个屏幕窗口左上角对应的起始内存位置origin
		// 调整为向下移动一行对应的内存位置,同时也跟踪调整当前光标对应的内存位置以及屏幕末行末端字符指针scr_end的位置.最后把新屏幕窗口内存起始位置值
		// origin写入显示控制器中
		if (!top && bottom == video_num_lines) {
   1a674:	e9 a8 01 00 00       	jmp    1a821 <scrup+0x493>
				"rep\n\t"													// 循环操作,将top+1到bottom行所对应的内存块移到top行开始处.
				"movsl\n\t"
				"movl video_num_columns, %%ecx\n\t"
				"rep\n\t"													// 在新行上填入擦除字符.
				"stosw"
				::"a" (video_erase_char),
   1a679:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a67d:	89 d0                	mov    %edx,%eax
   1a67f:	c1 e0 03             	shl    $0x3,%eax
   1a682:	01 d0                	add    %edx,%eax
   1a684:	c1 e0 04             	shl    $0x4,%eax
   1a687:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1a68c:	0f b7 18             	movzwl (%eax),%ebx
				"c" ((bottom - top - 1) * video_num_columns >> 1),
   1a68f:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a693:	89 d0                	mov    %edx,%eax
   1a695:	c1 e0 03             	shl    $0x3,%eax
   1a698:	01 d0                	add    %edx,%eax
   1a69a:	c1 e0 04             	shl    $0x4,%eax
   1a69d:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1a6a2:	8b 08                	mov    (%eax),%ecx
   1a6a4:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a6a8:	89 d0                	mov    %edx,%eax
   1a6aa:	c1 e0 03             	shl    $0x3,%eax
   1a6ad:	01 d0                	add    %edx,%eax
   1a6af:	c1 e0 04             	shl    $0x4,%eax
   1a6b2:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1a6b7:	8b 00                	mov    (%eax),%eax
   1a6b9:	29 c1                	sub    %eax,%ecx
   1a6bb:	89 c8                	mov    %ecx,%eax
   1a6bd:	8d 50 ff             	lea    -0x1(%eax),%edx
   1a6c0:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1a6c5:	0f af c2             	imul   %edx,%eax
   1a6c8:	d1 e8                	shr    %eax
   1a6ca:	89 c1                	mov    %eax,%ecx
				"D" (origin + video_size_row * top),
   1a6cc:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a6d0:	89 d0                	mov    %edx,%eax
   1a6d2:	c1 e0 03             	shl    $0x3,%eax
   1a6d5:	01 d0                	add    %edx,%eax
   1a6d7:	c1 e0 04             	shl    $0x4,%eax
   1a6da:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a6df:	8b 30                	mov    (%eax),%esi
   1a6e1:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a6e5:	89 d0                	mov    %edx,%eax
   1a6e7:	c1 e0 03             	shl    $0x3,%eax
   1a6ea:	01 d0                	add    %edx,%eax
   1a6ec:	c1 e0 04             	shl    $0x4,%eax
   1a6ef:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1a6f4:	8b 10                	mov    (%eax),%edx
   1a6f6:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1a6fb:	0f af c2             	imul   %edx,%eax
   1a6fe:	8d 3c 06             	lea    (%esi,%eax,1),%edi
				"S" (origin + video_size_row * (top + 1))
   1a701:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a705:	89 d0                	mov    %edx,%eax
   1a707:	c1 e0 03             	shl    $0x3,%eax
   1a70a:	01 d0                	add    %edx,%eax
   1a70c:	c1 e0 04             	shl    $0x4,%eax
   1a70f:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a714:	8b 30                	mov    (%eax),%esi
   1a716:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a71a:	89 d0                	mov    %edx,%eax
   1a71c:	c1 e0 03             	shl    $0x3,%eax
   1a71f:	01 d0                	add    %edx,%eax
   1a721:	c1 e0 04             	shl    $0x4,%eax
   1a724:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1a729:	8b 00                	mov    (%eax),%eax
   1a72b:	8d 50 01             	lea    0x1(%eax),%edx
   1a72e:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1a733:	0f af c2             	imul   %edx,%eax
   1a736:	8d 14 06             	lea    (%esi,%eax,1),%edx
		// 否则表示不是整屏移动.即表示从指定行top开始到bottom区域中的所有行向上移动1行,指定行top被删除.此时直接将屏幕从指定行top到屏幕末端
		// 所有行对应的显示内存数据向上移动1行,并在最下面新出现的行上填入擦除字符.
		// %0 - eax(擦除字符+属性);%1 - ecx(top行下1行开始到bottom行所对应的内存长字数);
		// %2 - edi(top行所处的内存位置); %3 - esi(top+1行所处的内存位置).
		} else {
			__asm__("cld\n\t"
   1a739:	89 d8                	mov    %ebx,%eax
   1a73b:	89 d6                	mov    %edx,%esi
   1a73d:	fc                   	cld    
   1a73e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   1a740:	8b 0d 34 ee 03 00    	mov    0x3ee34,%ecx
   1a746:	f3 66 ab             	rep stos %ax,%es:(%edi)
	if (video_type == VIDEO_TYPE_EGAC || video_type == VIDEO_TYPE_EGAM)
	{
		// 如果移动起始行top=0,移动最底行bottom = video_num_lines = 25,则表示整屏窗口向下移动,于是把整个屏幕窗口左上角对应的起始内存位置origin
		// 调整为向下移动一行对应的内存位置,同时也跟踪调整当前光标对应的内存位置以及屏幕末行末端字符指针scr_end的位置.最后把新屏幕窗口内存起始位置值
		// origin写入显示控制器中
		if (!top && bottom == video_num_lines) {
   1a749:	e9 d3 00 00 00       	jmp    1a821 <scrup+0x493>
			"rep\n\t"
			"movsl\n\t"
			"movl video_num_columns, %%ecx\n\t"
			"rep\n\t"
			"stosw"
			::"a" (video_erase_char),
   1a74e:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a752:	89 d0                	mov    %edx,%eax
   1a754:	c1 e0 03             	shl    $0x3,%eax
   1a757:	01 d0                	add    %edx,%eax
   1a759:	c1 e0 04             	shl    $0x4,%eax
   1a75c:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1a761:	0f b7 18             	movzwl (%eax),%ebx
			"c" ((bottom - top - 1) * video_num_columns >> 1),
   1a764:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a768:	89 d0                	mov    %edx,%eax
   1a76a:	c1 e0 03             	shl    $0x3,%eax
   1a76d:	01 d0                	add    %edx,%eax
   1a76f:	c1 e0 04             	shl    $0x4,%eax
   1a772:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1a777:	8b 08                	mov    (%eax),%ecx
   1a779:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a77d:	89 d0                	mov    %edx,%eax
   1a77f:	c1 e0 03             	shl    $0x3,%eax
   1a782:	01 d0                	add    %edx,%eax
   1a784:	c1 e0 04             	shl    $0x4,%eax
   1a787:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1a78c:	8b 00                	mov    (%eax),%eax
   1a78e:	29 c1                	sub    %eax,%ecx
   1a790:	89 c8                	mov    %ecx,%eax
   1a792:	8d 50 ff             	lea    -0x1(%eax),%edx
   1a795:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1a79a:	0f af c2             	imul   %edx,%eax
   1a79d:	d1 e8                	shr    %eax
   1a79f:	89 c1                	mov    %eax,%ecx
			"D" (origin + video_size_row * top),
   1a7a1:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a7a5:	89 d0                	mov    %edx,%eax
   1a7a7:	c1 e0 03             	shl    $0x3,%eax
   1a7aa:	01 d0                	add    %edx,%eax
   1a7ac:	c1 e0 04             	shl    $0x4,%eax
   1a7af:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a7b4:	8b 30                	mov    (%eax),%esi
   1a7b6:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a7ba:	89 d0                	mov    %edx,%eax
   1a7bc:	c1 e0 03             	shl    $0x3,%eax
   1a7bf:	01 d0                	add    %edx,%eax
   1a7c1:	c1 e0 04             	shl    $0x4,%eax
   1a7c4:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1a7c9:	8b 10                	mov    (%eax),%edx
   1a7cb:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1a7d0:	0f af c2             	imul   %edx,%eax
   1a7d3:	8d 3c 06             	lea    (%esi,%eax,1),%edi
			"S" (origin + video_size_row * (top + 1))
   1a7d6:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a7da:	89 d0                	mov    %edx,%eax
   1a7dc:	c1 e0 03             	shl    $0x3,%eax
   1a7df:	01 d0                	add    %edx,%eax
   1a7e1:	c1 e0 04             	shl    $0x4,%eax
   1a7e4:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a7e9:	8b 30                	mov    (%eax),%esi
   1a7eb:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a7ef:	89 d0                	mov    %edx,%eax
   1a7f1:	c1 e0 03             	shl    $0x3,%eax
   1a7f4:	01 d0                	add    %edx,%eax
   1a7f6:	c1 e0 04             	shl    $0x4,%eax
   1a7f9:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1a7fe:	8b 00                	mov    (%eax),%eax
   1a800:	8d 50 01             	lea    0x1(%eax),%edx
   1a803:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1a808:	0f af c2             	imul   %edx,%eax
   1a80b:	8d 14 06             	lea    (%esi,%eax,1),%edx
	}
	// 如果显示类型不是EGA(而是MDA),则执行下面移动操作.因为MDA显示控制卡只能整屏滚动,并且会自动调整超出显示范围的情况,即会自动翻巻指针,所以这里不对与屏幕
	// 内容相对应内存超出显示内存的情况单独处理处理方法与EGA非整屏移动情况完全一样.
	else		/* Not EGA/VGA */
	{
		__asm__("cld\n\t"
   1a80e:	89 d8                	mov    %ebx,%eax
   1a810:	89 d6                	mov    %edx,%esi
   1a812:	fc                   	cld    
   1a813:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   1a815:	8b 0d 34 ee 03 00    	mov    0x3ee34,%ecx
   1a81b:	f3 66 ab             	rep stos %ax,%es:(%edi)
   1a81e:	eb 01                	jmp    1a821 <scrup+0x493>
{
	// 滚屏区域必须至少有2行.如果滚屏区域顶行号大于等于区域底行号,则不满足进行滚行操作的条件.另外,对于EGA/VGA卡,我们可以指定屏内行范围(区域)
	// 进行滚屏操作,而MDA单色显示卡只能进行整屏操作.该函数对EGA和MDA显示类型进行分别处理.如果显示类型是EGA,则还分为整屏窗口移动和区域内窗口移动
	// 这里首先处理显示卡是EGA/VGA显示类型的情况.
	if (bottom <= top)
		return;
   1a820:	90                   	nop
			"c" ((bottom - top - 1) * video_num_columns >> 1),
			"D" (origin + video_size_row * top),
			"S" (origin + video_size_row * (top + 1))
			:);
	}
}
   1a821:	5b                   	pop    %ebx
   1a822:	5e                   	pop    %esi
   1a823:	5f                   	pop    %edi
   1a824:	c3                   	ret    

0001a825 <scrdown>:
// 将屏幕滚动窗口向上移动一行,相应屏幕滚动区域内容向下移动1行.并在移动开始行的上方出现一新行.处理方法与scrup()相似,只是为了在
// 移动显示内存数据时不会出现数据覆盖的问题,复制操作是以逆向进行的,即先从屏幕倒数第2行的最后一个字符开始复制到最后一行,再将倒数第3行
// 复制到倒数第2行,等等.因为此时对EGA/VGA显示类型和MDA类型的处理过程完全一样,所以该函数实际上没有必要写两段相同的代码.即这里if和
// else语句块中的操作完全一样.
static void scrdown(int currcons)
{
   1a825:	57                   	push   %edi
   1a826:	56                   	push   %esi
   1a827:	53                   	push   %ebx
	// 同样,滚屏区域必须至少有2行.如果滚屏区域顶行号大于等于区域底行号,则不满足进行滚行操作的条件.另外,对于EGA/VGA卡,我们可以指定屏内行范围(区域)
	// 进行滚屏操作,而MDA单色显示卡只能进行整屏操作.由于窗口向上移动最多移动以当前控制台实际显示内存末端的情况,所以这里只需要处理普通的内存数据
	// 移动情况.
	if (bottom <= top)
   1a828:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a82c:	89 d0                	mov    %edx,%eax
   1a82e:	c1 e0 03             	shl    $0x3,%eax
   1a831:	01 d0                	add    %edx,%eax
   1a833:	c1 e0 04             	shl    $0x4,%eax
   1a836:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1a83b:	8b 08                	mov    (%eax),%ecx
   1a83d:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a841:	89 d0                	mov    %edx,%eax
   1a843:	c1 e0 03             	shl    $0x3,%eax
   1a846:	01 d0                	add    %edx,%eax
   1a848:	c1 e0 04             	shl    $0x4,%eax
   1a84b:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1a850:	8b 00                	mov    (%eax),%eax
   1a852:	39 c1                	cmp    %eax,%ecx
   1a854:	0f 86 cf 01 00 00    	jbe    1aa29 <scrdown+0x204>
		return;
	if (video_type == VIDEO_TYPE_EGAC || video_type == VIDEO_TYPE_EGAM)
   1a85a:	0f b6 05 30 ee 03 00 	movzbl 0x3ee30,%eax
   1a861:	3c 21                	cmp    $0x21,%al
   1a863:	74 0f                	je     1a874 <scrdown+0x4f>
   1a865:	0f b6 05 30 ee 03 00 	movzbl 0x3ee30,%eax
   1a86c:	3c 20                	cmp    $0x20,%al
   1a86e:	0f 85 dc 00 00 00    	jne    1a950 <scrdown+0x12b>
			"movsl\n\t"
			"addl $2, %%edi\n\t"								/* %edi has been decremented by 4 */ /* %edi已减4,因也是反向填擦除字符 */
			"movl video_num_columns, %%ecx\n\t"
			"rep\n\t"											// 将擦除字符填入上方新行中.
			"stosw"
			::"a" (video_erase_char),
   1a874:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a878:	89 d0                	mov    %edx,%eax
   1a87a:	c1 e0 03             	shl    $0x3,%eax
   1a87d:	01 d0                	add    %edx,%eax
   1a87f:	c1 e0 04             	shl    $0x4,%eax
   1a882:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1a887:	0f b7 18             	movzwl (%eax),%ebx
			"c" ((bottom - top - 1) * video_num_columns >> 1),
   1a88a:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a88e:	89 d0                	mov    %edx,%eax
   1a890:	c1 e0 03             	shl    $0x3,%eax
   1a893:	01 d0                	add    %edx,%eax
   1a895:	c1 e0 04             	shl    $0x4,%eax
   1a898:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1a89d:	8b 08                	mov    (%eax),%ecx
   1a89f:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a8a3:	89 d0                	mov    %edx,%eax
   1a8a5:	c1 e0 03             	shl    $0x3,%eax
   1a8a8:	01 d0                	add    %edx,%eax
   1a8aa:	c1 e0 04             	shl    $0x4,%eax
   1a8ad:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1a8b2:	8b 00                	mov    (%eax),%eax
   1a8b4:	29 c1                	sub    %eax,%ecx
   1a8b6:	89 c8                	mov    %ecx,%eax
   1a8b8:	8d 50 ff             	lea    -0x1(%eax),%edx
   1a8bb:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1a8c0:	0f af c2             	imul   %edx,%eax
   1a8c3:	d1 e8                	shr    %eax
   1a8c5:	89 c1                	mov    %eax,%ecx
			"D" (origin + video_size_row * bottom - 4),
   1a8c7:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a8cb:	89 d0                	mov    %edx,%eax
   1a8cd:	c1 e0 03             	shl    $0x3,%eax
   1a8d0:	01 d0                	add    %edx,%eax
   1a8d2:	c1 e0 04             	shl    $0x4,%eax
   1a8d5:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a8da:	8b 30                	mov    (%eax),%esi
   1a8dc:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a8e0:	89 d0                	mov    %edx,%eax
   1a8e2:	c1 e0 03             	shl    $0x3,%eax
   1a8e5:	01 d0                	add    %edx,%eax
   1a8e7:	c1 e0 04             	shl    $0x4,%eax
   1a8ea:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1a8ef:	8b 10                	mov    (%eax),%edx
   1a8f1:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1a8f6:	0f af c2             	imul   %edx,%eax
   1a8f9:	01 f0                	add    %esi,%eax
   1a8fb:	8d 78 fc             	lea    -0x4(%eax),%edi
			"S" (origin + video_size_row * (bottom - 1) - 4)
   1a8fe:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a902:	89 d0                	mov    %edx,%eax
   1a904:	c1 e0 03             	shl    $0x3,%eax
   1a907:	01 d0                	add    %edx,%eax
   1a909:	c1 e0 04             	shl    $0x4,%eax
   1a90c:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a911:	8b 30                	mov    (%eax),%esi
   1a913:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a917:	89 d0                	mov    %edx,%eax
   1a919:	c1 e0 03             	shl    $0x3,%eax
   1a91c:	01 d0                	add    %edx,%eax
   1a91e:	c1 e0 04             	shl    $0x4,%eax
   1a921:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1a926:	8b 00                	mov    (%eax),%eax
   1a928:	8d 50 ff             	lea    -0x1(%eax),%edx
   1a92b:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1a930:	0f af c2             	imul   %edx,%eax
   1a933:	01 f0                	add    %esi,%eax
   1a935:	8d 50 fc             	lea    -0x4(%eax),%edx
		return;
	if (video_type == VIDEO_TYPE_EGAC || video_type == VIDEO_TYPE_EGAM)
	{
		// %0 - eax(擦除字符+属性);%1 - ecx(top行到bottom-1行所对应的内存长字数);
		// %2 - edi(窗口右下角最后一个字长位置); %3 - esi(窗口倒数第2行最后一个长字位置).
		__asm__("std\n\t"										// 置方向位!!
   1a938:	89 d8                	mov    %ebx,%eax
   1a93a:	89 d6                	mov    %edx,%esi
   1a93c:	fd                   	std    
   1a93d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   1a93f:	83 c7 02             	add    $0x2,%edi
   1a942:	8b 0d 34 ee 03 00    	mov    0x3ee34,%ecx
   1a948:	f3 66 ab             	rep stos %ax,%es:(%edi)
   1a94b:	e9 da 00 00 00       	jmp    1aa2a <scrdown+0x205>
			"movsl\n\t"
			"addl $2, %%edi\n\t"									/* %edi has been decremented by 4 */
			"movl video_num_columns, %%ecx\n\t"
			"rep\n\t"
			"stosw"
			::"a" (video_erase_char),
   1a950:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a954:	89 d0                	mov    %edx,%eax
   1a956:	c1 e0 03             	shl    $0x3,%eax
   1a959:	01 d0                	add    %edx,%eax
   1a95b:	c1 e0 04             	shl    $0x4,%eax
   1a95e:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1a963:	0f b7 18             	movzwl (%eax),%ebx
			"c" ((bottom - top - 1) * video_num_columns >> 1),
   1a966:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a96a:	89 d0                	mov    %edx,%eax
   1a96c:	c1 e0 03             	shl    $0x3,%eax
   1a96f:	01 d0                	add    %edx,%eax
   1a971:	c1 e0 04             	shl    $0x4,%eax
   1a974:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1a979:	8b 08                	mov    (%eax),%ecx
   1a97b:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a97f:	89 d0                	mov    %edx,%eax
   1a981:	c1 e0 03             	shl    $0x3,%eax
   1a984:	01 d0                	add    %edx,%eax
   1a986:	c1 e0 04             	shl    $0x4,%eax
   1a989:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1a98e:	8b 00                	mov    (%eax),%eax
   1a990:	29 c1                	sub    %eax,%ecx
   1a992:	89 c8                	mov    %ecx,%eax
   1a994:	8d 50 ff             	lea    -0x1(%eax),%edx
   1a997:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1a99c:	0f af c2             	imul   %edx,%eax
   1a99f:	d1 e8                	shr    %eax
   1a9a1:	89 c1                	mov    %eax,%ecx
			"D" (origin + video_size_row * bottom - 4),
   1a9a3:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a9a7:	89 d0                	mov    %edx,%eax
   1a9a9:	c1 e0 03             	shl    $0x3,%eax
   1a9ac:	01 d0                	add    %edx,%eax
   1a9ae:	c1 e0 04             	shl    $0x4,%eax
   1a9b1:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a9b6:	8b 30                	mov    (%eax),%esi
   1a9b8:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a9bc:	89 d0                	mov    %edx,%eax
   1a9be:	c1 e0 03             	shl    $0x3,%eax
   1a9c1:	01 d0                	add    %edx,%eax
   1a9c3:	c1 e0 04             	shl    $0x4,%eax
   1a9c6:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1a9cb:	8b 10                	mov    (%eax),%edx
   1a9cd:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1a9d2:	0f af c2             	imul   %edx,%eax
   1a9d5:	01 f0                	add    %esi,%eax
   1a9d7:	8d 78 fc             	lea    -0x4(%eax),%edi
			"S" (origin + video_size_row * (bottom - 1) - 4)
   1a9da:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a9de:	89 d0                	mov    %edx,%eax
   1a9e0:	c1 e0 03             	shl    $0x3,%eax
   1a9e3:	01 d0                	add    %edx,%eax
   1a9e5:	c1 e0 04             	shl    $0x4,%eax
   1a9e8:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a9ed:	8b 30                	mov    (%eax),%esi
   1a9ef:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a9f3:	89 d0                	mov    %edx,%eax
   1a9f5:	c1 e0 03             	shl    $0x3,%eax
   1a9f8:	01 d0                	add    %edx,%eax
   1a9fa:	c1 e0 04             	shl    $0x4,%eax
   1a9fd:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1aa02:	8b 00                	mov    (%eax),%eax
   1aa04:	8d 50 ff             	lea    -0x1(%eax),%edx
   1aa07:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1aa0c:	0f af c2             	imul   %edx,%eax
   1aa0f:	01 f0                	add    %esi,%eax
   1aa11:	8d 50 fc             	lea    -0x4(%eax),%edx
			:);
	}
	// 如果不是EGA显示类型,则执行以下操作(与上面完成一样).
	else														/* Not EGA/VGA */
	{
		__asm__("std\n\t"
   1aa14:	89 d8                	mov    %ebx,%eax
   1aa16:	89 d6                	mov    %edx,%esi
   1aa18:	fd                   	std    
   1aa19:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   1aa1b:	83 c7 02             	add    $0x2,%edi
   1aa1e:	8b 0d 34 ee 03 00    	mov    0x3ee34,%ecx
   1aa24:	f3 66 ab             	rep stos %ax,%es:(%edi)
   1aa27:	eb 01                	jmp    1aa2a <scrdown+0x205>
{
	// 同样,滚屏区域必须至少有2行.如果滚屏区域顶行号大于等于区域底行号,则不满足进行滚行操作的条件.另外,对于EGA/VGA卡,我们可以指定屏内行范围(区域)
	// 进行滚屏操作,而MDA单色显示卡只能进行整屏操作.由于窗口向上移动最多移动以当前控制台实际显示内存末端的情况,所以这里只需要处理普通的内存数据
	// 移动情况.
	if (bottom <= top)
		return;
   1aa29:	90                   	nop
			"c" ((bottom - top - 1) * video_num_columns >> 1),
			"D" (origin + video_size_row * bottom - 4),
			"S" (origin + video_size_row * (bottom - 1) - 4)
			:);
	}
}
   1aa2a:	5b                   	pop    %ebx
   1aa2b:	5e                   	pop    %esi
   1aa2c:	5f                   	pop    %edi
   1aa2d:	c3                   	ret    

0001aa2e <lf>:
// 如果光标没有处在最后一行,则直接修改光标当前行变量y++,并调整光标对应显示内存位置pos(加上一行字符所对应的内存长度).否则
// 需要将屏幕窗口内容上移一行.
// 函数名称lf(line feed 换行)是指处理控制字符LF.
static void lf(int currcons)
{
	if (y + 1 < bottom) {
   1aa2e:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aa32:	89 d0                	mov    %edx,%eax
   1aa34:	c1 e0 03             	shl    $0x3,%eax
   1aa37:	01 d0                	add    %edx,%eax
   1aa39:	c1 e0 04             	shl    $0x4,%eax
   1aa3c:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1aa41:	8b 00                	mov    (%eax),%eax
   1aa43:	8d 48 01             	lea    0x1(%eax),%ecx
   1aa46:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aa4a:	89 d0                	mov    %edx,%eax
   1aa4c:	c1 e0 03             	shl    $0x3,%eax
   1aa4f:	01 d0                	add    %edx,%eax
   1aa51:	c1 e0 04             	shl    $0x4,%eax
   1aa54:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1aa59:	8b 00                	mov    (%eax),%eax
   1aa5b:	39 c1                	cmp    %eax,%ecx
   1aa5d:	73 61                	jae    1aac0 <lf+0x92>
		y++;
   1aa5f:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aa63:	89 d0                	mov    %edx,%eax
   1aa65:	c1 e0 03             	shl    $0x3,%eax
   1aa68:	01 d0                	add    %edx,%eax
   1aa6a:	c1 e0 04             	shl    $0x4,%eax
   1aa6d:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1aa72:	8b 00                	mov    (%eax),%eax
   1aa74:	8d 48 01             	lea    0x1(%eax),%ecx
   1aa77:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aa7b:	89 d0                	mov    %edx,%eax
   1aa7d:	c1 e0 03             	shl    $0x3,%eax
   1aa80:	01 d0                	add    %edx,%eax
   1aa82:	c1 e0 04             	shl    $0x4,%eax
   1aa85:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1aa8a:	89 08                	mov    %ecx,(%eax)
		pos += video_size_row;							// 加上屏幕一行占用内存的字节数.
   1aa8c:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aa90:	89 d0                	mov    %edx,%eax
   1aa92:	c1 e0 03             	shl    $0x3,%eax
   1aa95:	01 d0                	add    %edx,%eax
   1aa97:	c1 e0 04             	shl    $0x4,%eax
   1aa9a:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1aa9f:	8b 10                	mov    (%eax),%edx
   1aaa1:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1aaa6:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1aaa9:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aaad:	89 d0                	mov    %edx,%eax
   1aaaf:	c1 e0 03             	shl    $0x3,%eax
   1aab2:	01 d0                	add    %edx,%eax
   1aab4:	c1 e0 04             	shl    $0x4,%eax
   1aab7:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1aabc:	89 08                	mov    %ecx,(%eax)
		return;
   1aabe:	eb 0c                	jmp    1aacc <lf+0x9e>
	}
	scrup(currcons);									// 将屏幕窗口内容上移一行.
   1aac0:	ff 74 24 04          	pushl  0x4(%esp)
   1aac4:	e8 c5 f8 ff ff       	call   1a38e <scrup>
   1aac9:	83 c4 04             	add    $0x4,%esp
}
   1aacc:	c3                   	ret    

0001aacd <ri>:
// 如果光标不在屏幕第一行上,则直接修改光标当前标量y--,并调整光标对应显示内存位置pos,减去屏幕上一行字符所对应的内存长度字节数.
// 否则需要将屏幕窗口内容下移一行.
// 函数名称ri(reverse index 反向索引)是指控制字符RI或转义序列"ESC M".
static void ri(int currcons)
{
	if (y > top) {
   1aacd:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aad1:	89 d0                	mov    %edx,%eax
   1aad3:	c1 e0 03             	shl    $0x3,%eax
   1aad6:	01 d0                	add    %edx,%eax
   1aad8:	c1 e0 04             	shl    $0x4,%eax
   1aadb:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1aae0:	8b 08                	mov    (%eax),%ecx
   1aae2:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aae6:	89 d0                	mov    %edx,%eax
   1aae8:	c1 e0 03             	shl    $0x3,%eax
   1aaeb:	01 d0                	add    %edx,%eax
   1aaed:	c1 e0 04             	shl    $0x4,%eax
   1aaf0:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1aaf5:	8b 00                	mov    (%eax),%eax
   1aaf7:	39 c1                	cmp    %eax,%ecx
   1aaf9:	76 62                	jbe    1ab5d <ri+0x90>
		y--;											// 减去屏幕一行占用内存的字节数
   1aafb:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aaff:	89 d0                	mov    %edx,%eax
   1ab01:	c1 e0 03             	shl    $0x3,%eax
   1ab04:	01 d0                	add    %edx,%eax
   1ab06:	c1 e0 04             	shl    $0x4,%eax
   1ab09:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1ab0e:	8b 00                	mov    (%eax),%eax
   1ab10:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1ab13:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ab17:	89 d0                	mov    %edx,%eax
   1ab19:	c1 e0 03             	shl    $0x3,%eax
   1ab1c:	01 d0                	add    %edx,%eax
   1ab1e:	c1 e0 04             	shl    $0x4,%eax
   1ab21:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1ab26:	89 08                	mov    %ecx,(%eax)
		pos -= video_size_row;
   1ab28:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ab2c:	89 d0                	mov    %edx,%eax
   1ab2e:	c1 e0 03             	shl    $0x3,%eax
   1ab31:	01 d0                	add    %edx,%eax
   1ab33:	c1 e0 04             	shl    $0x4,%eax
   1ab36:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1ab3b:	8b 10                	mov    (%eax),%edx
   1ab3d:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1ab42:	89 d1                	mov    %edx,%ecx
   1ab44:	29 c1                	sub    %eax,%ecx
   1ab46:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ab4a:	89 d0                	mov    %edx,%eax
   1ab4c:	c1 e0 03             	shl    $0x3,%eax
   1ab4f:	01 d0                	add    %edx,%eax
   1ab51:	c1 e0 04             	shl    $0x4,%eax
   1ab54:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1ab59:	89 08                	mov    %ecx,(%eax)
		return;
   1ab5b:	eb 0c                	jmp    1ab69 <ri+0x9c>
	}
	scrdown(currcons);									// 将屏幕窗口内容下移一行
   1ab5d:	ff 74 24 04          	pushl  0x4(%esp)
   1ab61:	e8 bf fc ff ff       	call   1a825 <scrdown>
   1ab66:	83 c4 04             	add    $0x4,%esp
}
   1ab69:	c3                   	ret    

0001ab6a <cr>:
// 光标回到第1列(0列).
// 调整光标对应内存位置pos.光标所在列号*2即是0列到光标所在列对应的内存字节长度.
// 函数名称cr(carriage return回车)指明处理的控制字符的回车.
static void cr(int currcons)
{
	pos -= x << 1;										// 减去0列到光标处占用的内存字节数.
   1ab6a:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ab6e:	89 d0                	mov    %edx,%eax
   1ab70:	c1 e0 03             	shl    $0x3,%eax
   1ab73:	01 d0                	add    %edx,%eax
   1ab75:	c1 e0 04             	shl    $0x4,%eax
   1ab78:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1ab7d:	8b 08                	mov    (%eax),%ecx
   1ab7f:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ab83:	89 d0                	mov    %edx,%eax
   1ab85:	c1 e0 03             	shl    $0x3,%eax
   1ab88:	01 d0                	add    %edx,%eax
   1ab8a:	c1 e0 04             	shl    $0x4,%eax
   1ab8d:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1ab92:	8b 00                	mov    (%eax),%eax
   1ab94:	01 c0                	add    %eax,%eax
   1ab96:	29 c1                	sub    %eax,%ecx
   1ab98:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ab9c:	89 d0                	mov    %edx,%eax
   1ab9e:	c1 e0 03             	shl    $0x3,%eax
   1aba1:	01 d0                	add    %edx,%eax
   1aba3:	c1 e0 04             	shl    $0x4,%eax
   1aba6:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1abab:	89 08                	mov    %ecx,(%eax)
	x = 0;
   1abad:	8b 54 24 04          	mov    0x4(%esp),%edx
   1abb1:	89 d0                	mov    %edx,%eax
   1abb3:	c1 e0 03             	shl    $0x3,%eax
   1abb6:	01 d0                	add    %edx,%eax
   1abb8:	c1 e0 04             	shl    $0x4,%eax
   1abbb:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1abc0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   1abc6:	90                   	nop
   1abc7:	c3                   	ret    

0001abc8 <del>:

// 擦除光标前一字符(用空格替代)(del -delete 删除)
// 如果光标没有处在0列,则将光标对应内存位置pos后退2字节(对应屏幕上一个字符),然后将当前光标变量列值减1,并将光标所在位置处字符符擦除
static void del(int currcons)
{
	if (x) {
   1abc8:	8b 54 24 04          	mov    0x4(%esp),%edx
   1abcc:	89 d0                	mov    %edx,%eax
   1abce:	c1 e0 03             	shl    $0x3,%eax
   1abd1:	01 d0                	add    %edx,%eax
   1abd3:	c1 e0 04             	shl    $0x4,%eax
   1abd6:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1abdb:	8b 00                	mov    (%eax),%eax
   1abdd:	85 c0                	test   %eax,%eax
   1abdf:	0f 84 8a 00 00 00    	je     1ac6f <del+0xa7>
		pos -= 2;
   1abe5:	8b 54 24 04          	mov    0x4(%esp),%edx
   1abe9:	89 d0                	mov    %edx,%eax
   1abeb:	c1 e0 03             	shl    $0x3,%eax
   1abee:	01 d0                	add    %edx,%eax
   1abf0:	c1 e0 04             	shl    $0x4,%eax
   1abf3:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1abf8:	8b 00                	mov    (%eax),%eax
   1abfa:	8d 48 fe             	lea    -0x2(%eax),%ecx
   1abfd:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ac01:	89 d0                	mov    %edx,%eax
   1ac03:	c1 e0 03             	shl    $0x3,%eax
   1ac06:	01 d0                	add    %edx,%eax
   1ac08:	c1 e0 04             	shl    $0x4,%eax
   1ac0b:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1ac10:	89 08                	mov    %ecx,(%eax)
		x--;
   1ac12:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ac16:	89 d0                	mov    %edx,%eax
   1ac18:	c1 e0 03             	shl    $0x3,%eax
   1ac1b:	01 d0                	add    %edx,%eax
   1ac1d:	c1 e0 04             	shl    $0x4,%eax
   1ac20:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1ac25:	8b 00                	mov    (%eax),%eax
   1ac27:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1ac2a:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ac2e:	89 d0                	mov    %edx,%eax
   1ac30:	c1 e0 03             	shl    $0x3,%eax
   1ac33:	01 d0                	add    %edx,%eax
   1ac35:	c1 e0 04             	shl    $0x4,%eax
   1ac38:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1ac3d:	89 08                	mov    %ecx,(%eax)
		*(unsigned short *)pos = video_erase_char;
   1ac3f:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ac43:	89 d0                	mov    %edx,%eax
   1ac45:	c1 e0 03             	shl    $0x3,%eax
   1ac48:	01 d0                	add    %edx,%eax
   1ac4a:	c1 e0 04             	shl    $0x4,%eax
   1ac4d:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1ac52:	8b 00                	mov    (%eax),%eax
   1ac54:	89 c1                	mov    %eax,%ecx
   1ac56:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ac5a:	89 d0                	mov    %edx,%eax
   1ac5c:	c1 e0 03             	shl    $0x3,%eax
   1ac5f:	01 d0                	add    %edx,%eax
   1ac61:	c1 e0 04             	shl    $0x4,%eax
   1ac64:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1ac69:	0f b7 00             	movzwl (%eax),%eax
   1ac6c:	66 89 01             	mov    %ax,(%ecx)
	}
}
   1ac6f:	90                   	nop
   1ac70:	c3                   	ret    

0001ac71 <csi_J>:
// ANSI控制序列: 'ESC [ Ps J'(Ps = 0 - 删除光标处到屏幕底端;1 - 删除屏幕开始到光标处;2 - 整屏删除).本函数根据指定的控制序列
// 具体参数值,执行与光标位置的删除操作,并且在擦除字符或行时光标位置不变.
// 函数名称csi_J(CSI - Control Sequence Introducer,即控制序列引导码)指明对控制序列"CSI Ps J"进行处理.
// 参数:vpar - 对应上面控制序列中Ps的值.
static void csi_J(int currcons, int vpar)
{
   1ac71:	57                   	push   %edi
   1ac72:	53                   	push   %ebx
   1ac73:	83 ec 10             	sub    $0x10,%esp
	long count;
	long start;

	// 首先根据三种情况分别设置需要删除的字符数和删除开始的显示内存位置.
	switch (vpar) {
   1ac76:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ac7a:	83 f8 01             	cmp    $0x1,%eax
   1ac7d:	74 61                	je     1ace0 <csi_J+0x6f>
   1ac7f:	83 f8 02             	cmp    $0x2,%eax
   1ac82:	0f 84 a7 00 00 00    	je     1ad2f <csi_J+0xbe>
   1ac88:	85 c0                	test   %eax,%eax
   1ac8a:	74 05                	je     1ac91 <csi_J+0x20>
		case 2: 											/* erase whole display */
			count = video_num_columns * video_num_lines;	/* 删除整个屏幕上的所有字符 */
			start = origin;
			break;
		default:
			return;
   1ac8c:	e9 f0 00 00 00       	jmp    1ad81 <csi_J+0x110>
	long start;

	// 首先根据三种情况分别设置需要删除的字符数和删除开始的显示内存位置.
	switch (vpar) {
		case 0:												/* erase from cursor to end of display */
			count = (scr_end - pos) >> 1;					/* 擦除光标到屏幕底端所有字符 */
   1ac91:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ac95:	89 d0                	mov    %edx,%eax
   1ac97:	c1 e0 03             	shl    $0x3,%eax
   1ac9a:	01 d0                	add    %edx,%eax
   1ac9c:	c1 e0 04             	shl    $0x4,%eax
   1ac9f:	05 7c ee 03 00       	add    $0x3ee7c,%eax
   1aca4:	8b 08                	mov    (%eax),%ecx
   1aca6:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1acaa:	89 d0                	mov    %edx,%eax
   1acac:	c1 e0 03             	shl    $0x3,%eax
   1acaf:	01 d0                	add    %edx,%eax
   1acb1:	c1 e0 04             	shl    $0x4,%eax
   1acb4:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1acb9:	8b 00                	mov    (%eax),%eax
   1acbb:	29 c1                	sub    %eax,%ecx
   1acbd:	89 c8                	mov    %ecx,%eax
   1acbf:	d1 e8                	shr    %eax
   1acc1:	89 44 24 0c          	mov    %eax,0xc(%esp)
			start = pos;
   1acc5:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1acc9:	89 d0                	mov    %edx,%eax
   1accb:	c1 e0 03             	shl    $0x3,%eax
   1acce:	01 d0                	add    %edx,%eax
   1acd0:	c1 e0 04             	shl    $0x4,%eax
   1acd3:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1acd8:	8b 00                	mov    (%eax),%eax
   1acda:	89 44 24 08          	mov    %eax,0x8(%esp)
			break;
   1acde:	eb 7b                	jmp    1ad5b <csi_J+0xea>
		case 1:												/* erase from start to cursor */
			count = (pos - origin) >> 1;					/* 删除从屏幕开始到光标处的字符 */
   1ace0:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ace4:	89 d0                	mov    %edx,%eax
   1ace6:	c1 e0 03             	shl    $0x3,%eax
   1ace9:	01 d0                	add    %edx,%eax
   1aceb:	c1 e0 04             	shl    $0x4,%eax
   1acee:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1acf3:	8b 08                	mov    (%eax),%ecx
   1acf5:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1acf9:	89 d0                	mov    %edx,%eax
   1acfb:	c1 e0 03             	shl    $0x3,%eax
   1acfe:	01 d0                	add    %edx,%eax
   1ad00:	c1 e0 04             	shl    $0x4,%eax
   1ad03:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1ad08:	8b 00                	mov    (%eax),%eax
   1ad0a:	29 c1                	sub    %eax,%ecx
   1ad0c:	89 c8                	mov    %ecx,%eax
   1ad0e:	d1 e8                	shr    %eax
   1ad10:	89 44 24 0c          	mov    %eax,0xc(%esp)
			start = origin;
   1ad14:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ad18:	89 d0                	mov    %edx,%eax
   1ad1a:	c1 e0 03             	shl    $0x3,%eax
   1ad1d:	01 d0                	add    %edx,%eax
   1ad1f:	c1 e0 04             	shl    $0x4,%eax
   1ad22:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1ad27:	8b 00                	mov    (%eax),%eax
   1ad29:	89 44 24 08          	mov    %eax,0x8(%esp)
			break;
   1ad2d:	eb 2c                	jmp    1ad5b <csi_J+0xea>
		case 2: 											/* erase whole display */
			count = video_num_columns * video_num_lines;	/* 删除整个屏幕上的所有字符 */
   1ad2f:	8b 15 34 ee 03 00    	mov    0x3ee34,%edx
   1ad35:	a1 44 ee 03 00       	mov    0x3ee44,%eax
   1ad3a:	0f af c2             	imul   %edx,%eax
   1ad3d:	89 44 24 0c          	mov    %eax,0xc(%esp)
			start = origin;
   1ad41:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ad45:	89 d0                	mov    %edx,%eax
   1ad47:	c1 e0 03             	shl    $0x3,%eax
   1ad4a:	01 d0                	add    %edx,%eax
   1ad4c:	c1 e0 04             	shl    $0x4,%eax
   1ad4f:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1ad54:	8b 00                	mov    (%eax),%eax
   1ad56:	89 44 24 08          	mov    %eax,0x8(%esp)
			break;
   1ad5a:	90                   	nop
	// %0 - ecx(删除的字符数count);%1 - edi(删除操作开始的地址);%2 - eax(填入的擦除字符).
	__asm__("cld\n\t"
		"rep\n\t"
		"stosw\n\t"
		::"c" (count),
		"D" (start),"a" (video_erase_char)
   1ad5b:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ad5f:	89 d0                	mov    %edx,%eax
   1ad61:	c1 e0 03             	shl    $0x3,%eax
   1ad64:	01 d0                	add    %edx,%eax
   1ad66:	c1 e0 04             	shl    $0x4,%eax
   1ad69:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1ad6e:	0f b7 00             	movzwl (%eax),%eax
		default:
			return;
	}
	// 然后使用擦除字符填写被删除字符的地方.
	// %0 - ecx(删除的字符数count);%1 - edi(删除操作开始的地址);%2 - eax(填入的擦除字符).
	__asm__("cld\n\t"
   1ad71:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1ad75:	8b 5c 24 08          	mov    0x8(%esp),%ebx
   1ad79:	89 d1                	mov    %edx,%ecx
   1ad7b:	89 df                	mov    %ebx,%edi
   1ad7d:	fc                   	cld    
   1ad7e:	f3 66 ab             	rep stos %ax,%es:(%edi)
		"rep\n\t"
		"stosw\n\t"
		::"c" (count),
		"D" (start),"a" (video_erase_char)
		:);
}
   1ad81:	83 c4 10             	add    $0x10,%esp
   1ad84:	5b                   	pop    %ebx
   1ad85:	5f                   	pop    %edi
   1ad86:	c3                   	ret    

0001ad87 <csi_K>:
// 删除上一行上与光标位置相关的部分.
// ANSI转义字符序列:'ESC [ Ps K'(Ps = 0删除到行尾;1 从开始删除;2 整行都删除).本函数根据参数擦除光标所在行的部分或所有字符.擦除操作从屏幕上
// 移走字符但不影响其他字符.擦除的字符被丢弃.在擦除字符或行时光标位置不变.
// 参数:par - 对应上面控制序列中Ps的值.
static void csi_K(int currcons, int vpar)
{
   1ad87:	57                   	push   %edi
   1ad88:	53                   	push   %ebx
   1ad89:	83 ec 10             	sub    $0x10,%esp
	long count;
	long start;

	// 首先根据三种情况分别设置需要删除的字符数和删除开始的显示内存位置.
	switch (vpar) {
   1ad8c:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ad90:	83 f8 01             	cmp    $0x1,%eax
   1ad93:	74 75                	je     1ae0a <csi_K+0x83>
   1ad95:	83 f8 02             	cmp    $0x2,%eax
   1ad98:	0f 84 c5 00 00 00    	je     1ae63 <csi_K+0xdc>
   1ad9e:	85 c0                	test   %eax,%eax
   1ada0:	74 05                	je     1ada7 <csi_K+0x20>
		case 2: 												/* erase whole line */
			start = pos - (x << 1);								/* 将整行字符全删除 */
			count = video_num_columns;
			break;
		default:
			return;
   1ada2:	e9 23 01 00 00       	jmp    1aeca <csi_K+0x143>
	long start;

	// 首先根据三种情况分别设置需要删除的字符数和删除开始的显示内存位置.
	switch (vpar) {
		case 0:													/* erase from cursor to end of line */
			if (x >= video_num_columns)							/* 删除光标到行尾所有字符 */
   1ada7:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1adab:	89 d0                	mov    %edx,%eax
   1adad:	c1 e0 03             	shl    $0x3,%eax
   1adb0:	01 d0                	add    %edx,%eax
   1adb2:	c1 e0 04             	shl    $0x4,%eax
   1adb5:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1adba:	8b 10                	mov    (%eax),%edx
   1adbc:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1adc1:	39 c2                	cmp    %eax,%edx
   1adc3:	0f 83 00 01 00 00    	jae    1aec9 <csi_K+0x142>
				return;
			count = video_num_columns - x;
   1adc9:	8b 0d 34 ee 03 00    	mov    0x3ee34,%ecx
   1adcf:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1add3:	89 d0                	mov    %edx,%eax
   1add5:	c1 e0 03             	shl    $0x3,%eax
   1add8:	01 d0                	add    %edx,%eax
   1adda:	c1 e0 04             	shl    $0x4,%eax
   1addd:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1ade2:	8b 00                	mov    (%eax),%eax
   1ade4:	29 c1                	sub    %eax,%ecx
   1ade6:	89 c8                	mov    %ecx,%eax
   1ade8:	89 44 24 0c          	mov    %eax,0xc(%esp)
			start = pos;
   1adec:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1adf0:	89 d0                	mov    %edx,%eax
   1adf2:	c1 e0 03             	shl    $0x3,%eax
   1adf5:	01 d0                	add    %edx,%eax
   1adf7:	c1 e0 04             	shl    $0x4,%eax
   1adfa:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1adff:	8b 00                	mov    (%eax),%eax
   1ae01:	89 44 24 08          	mov    %eax,0x8(%esp)
			break;
   1ae05:	e9 97 00 00 00       	jmp    1aea1 <csi_K+0x11a>
		case 1:													/* erase from start of line to cursor */
			start = pos - (x << 1);								/* 删除从行开始到光标处 */
   1ae0a:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ae0e:	89 d0                	mov    %edx,%eax
   1ae10:	c1 e0 03             	shl    $0x3,%eax
   1ae13:	01 d0                	add    %edx,%eax
   1ae15:	c1 e0 04             	shl    $0x4,%eax
   1ae18:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1ae1d:	8b 08                	mov    (%eax),%ecx
   1ae1f:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ae23:	89 d0                	mov    %edx,%eax
   1ae25:	c1 e0 03             	shl    $0x3,%eax
   1ae28:	01 d0                	add    %edx,%eax
   1ae2a:	c1 e0 04             	shl    $0x4,%eax
   1ae2d:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1ae32:	8b 00                	mov    (%eax),%eax
   1ae34:	01 c0                	add    %eax,%eax
   1ae36:	29 c1                	sub    %eax,%ecx
   1ae38:	89 c8                	mov    %ecx,%eax
   1ae3a:	89 44 24 08          	mov    %eax,0x8(%esp)
			count = (x < video_num_columns) ? x : video_num_columns;
   1ae3e:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ae42:	89 d0                	mov    %edx,%eax
   1ae44:	c1 e0 03             	shl    $0x3,%eax
   1ae47:	01 d0                	add    %edx,%eax
   1ae49:	c1 e0 04             	shl    $0x4,%eax
   1ae4c:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1ae51:	8b 10                	mov    (%eax),%edx
   1ae53:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1ae58:	39 c2                	cmp    %eax,%edx
   1ae5a:	0f 46 c2             	cmovbe %edx,%eax
   1ae5d:	89 44 24 0c          	mov    %eax,0xc(%esp)
			break;
   1ae61:	eb 3e                	jmp    1aea1 <csi_K+0x11a>
		case 2: 												/* erase whole line */
			start = pos - (x << 1);								/* 将整行字符全删除 */
   1ae63:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ae67:	89 d0                	mov    %edx,%eax
   1ae69:	c1 e0 03             	shl    $0x3,%eax
   1ae6c:	01 d0                	add    %edx,%eax
   1ae6e:	c1 e0 04             	shl    $0x4,%eax
   1ae71:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1ae76:	8b 08                	mov    (%eax),%ecx
   1ae78:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ae7c:	89 d0                	mov    %edx,%eax
   1ae7e:	c1 e0 03             	shl    $0x3,%eax
   1ae81:	01 d0                	add    %edx,%eax
   1ae83:	c1 e0 04             	shl    $0x4,%eax
   1ae86:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1ae8b:	8b 00                	mov    (%eax),%eax
   1ae8d:	01 c0                	add    %eax,%eax
   1ae8f:	29 c1                	sub    %eax,%ecx
   1ae91:	89 c8                	mov    %ecx,%eax
   1ae93:	89 44 24 08          	mov    %eax,0x8(%esp)
			count = video_num_columns;
   1ae97:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1ae9c:	89 44 24 0c          	mov    %eax,0xc(%esp)
			break;
   1aea0:	90                   	nop
	// %0 - ecx(删除字符数count);%1 - edi(删除操作开始地址);%2 - eax(填入的擦除字符).
	__asm__("cld\n\t"
		"rep\n\t"
		"stosw\n\t"
		::"c" (count),
		"D" (start),"a" (video_erase_char)
   1aea1:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1aea5:	89 d0                	mov    %edx,%eax
   1aea7:	c1 e0 03             	shl    $0x3,%eax
   1aeaa:	01 d0                	add    %edx,%eax
   1aeac:	c1 e0 04             	shl    $0x4,%eax
   1aeaf:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1aeb4:	0f b7 00             	movzwl (%eax),%eax
		default:
			return;
	}
	// 然后使用擦除字符填写删除字符的地方.
	// %0 - ecx(删除字符数count);%1 - edi(删除操作开始地址);%2 - eax(填入的擦除字符).
	__asm__("cld\n\t"
   1aeb7:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1aebb:	8b 5c 24 08          	mov    0x8(%esp),%ebx
   1aebf:	89 d1                	mov    %edx,%ecx
   1aec1:	89 df                	mov    %ebx,%edi
   1aec3:	fc                   	cld    
   1aec4:	f3 66 ab             	rep stos %ax,%es:(%edi)
   1aec7:	eb 01                	jmp    1aeca <csi_K+0x143>

	// 首先根据三种情况分别设置需要删除的字符数和删除开始的显示内存位置.
	switch (vpar) {
		case 0:													/* erase from cursor to end of line */
			if (x >= video_num_columns)							/* 删除光标到行尾所有字符 */
				return;
   1aec9:	90                   	nop
		"rep\n\t"
		"stosw\n\t"
		::"c" (count),
		"D" (start),"a" (video_erase_char)
		:);
}
   1aeca:	83 c4 10             	add    $0x10,%esp
   1aecd:	5b                   	pop    %ebx
   1aece:	5f                   	pop    %edi
   1aecf:	c3                   	ret    

0001aed0 <csi_m>:
// 设置显示字符属性
// ANSI转义序列:'ESC [ Ps;PS m'.Ps = 0 - 默认属性;1 - 粗体并增亮;4 - 下划线;5 - 闪烁;7 - 反显;22 - 非粗体;24 - 无下划线;
// 25 - 无闪烁;27 - 正显;30~38 - 设置前景色彩;39 - 默认前景色(White);40~48 - 设置背景色彩;49 - 默认背景色(Black).
// 该控制序列根据参数设置字符显示属性.以后所有发送到终端的字符都将使用这里指定的属性,直到再次执行本控制序列重新设置字符显示的属性.
void csi_m(int currcons)
{
   1aed0:	53                   	push   %ebx
   1aed1:	83 ec 10             	sub    $0x10,%esp
	// 如果Ps = 0,则把当前虚拟控制台随后显示的字符属性设置为默认属性def_attr.初始化时def_attr已被设置成0x07(黑底白字).
	// 如果Ps = 1,则把当前虚拟控制台随后显示的字符属性设置为粗体或增亮显示.如果是彩色显示,则把字符属性或上0x08让字符高亮度显示;如果是单色显示,
	// 则让人带下划线显示.
	// 如果ps = 4,则对彩色和单色显示进行不同的处理.若此时不是彩色显示方式,则让字符带下划线显示.如果是彩色显示,那么若原来vc_bold_attr不等于-1
	// 时就复位其背景色;否则的话就把背景色取反.若取反后前景色与背景色相同,就把前景色增1而取另一种颜色.
	for (i = 0; i <= npar; i++)
   1aed4:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   1aedb:	00 
   1aedc:	e9 dd 05 00 00       	jmp    1b4be <csi_m+0x5ee>
		switch (par[i]) {
   1aee1:	8b 54 24 18          	mov    0x18(%esp),%edx
   1aee5:	89 d0                	mov    %edx,%eax
   1aee7:	c1 e0 03             	shl    $0x3,%eax
   1aeea:	01 d0                	add    %edx,%eax
   1aeec:	c1 e0 02             	shl    $0x2,%eax
   1aeef:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1aef3:	01 d0                	add    %edx,%eax
   1aef5:	83 c0 0c             	add    $0xc,%eax
   1aef8:	8b 04 85 68 ee 03 00 	mov    0x3ee68(,%eax,4),%eax
   1aeff:	83 f8 31             	cmp    $0x31,%eax
   1af02:	0f 87 4e 04 00 00    	ja     1b356 <csi_m+0x486>
   1af08:	8b 04 85 4c 4e 02 00 	mov    0x24e4c(,%eax,4),%eax
   1af0f:	ff e0                	jmp    *%eax
			case 0:
				attr = def_attr; break;  									/* default */
   1af11:	8b 54 24 18          	mov    0x18(%esp),%edx
   1af15:	89 d0                	mov    %edx,%eax
   1af17:	c1 e0 03             	shl    $0x3,%eax
   1af1a:	01 d0                	add    %edx,%eax
   1af1c:	c1 e0 04             	shl    $0x4,%eax
   1af1f:	05 63 ee 03 00       	add    $0x3ee63,%eax
   1af24:	0f b6 08             	movzbl (%eax),%ecx
   1af27:	8b 54 24 18          	mov    0x18(%esp),%edx
   1af2b:	89 d0                	mov    %edx,%eax
   1af2d:	c1 e0 03             	shl    $0x3,%eax
   1af30:	01 d0                	add    %edx,%eax
   1af32:	c1 e0 04             	shl    $0x4,%eax
   1af35:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1af3a:	88 08                	mov    %cl,(%eax)
   1af3c:	e9 78 05 00 00       	jmp    1b4b9 <csi_m+0x5e9>
			case 1:
				attr = (iscolor ? attr | 0x08 : attr | 0x0f); break;  		/* bold */
   1af41:	8b 54 24 18          	mov    0x18(%esp),%edx
   1af45:	89 d0                	mov    %edx,%eax
   1af47:	c1 e0 03             	shl    $0x3,%eax
   1af4a:	01 d0                	add    %edx,%eax
   1af4c:	c1 e0 04             	shl    $0x4,%eax
   1af4f:	05 e8 ee 03 00       	add    $0x3eee8,%eax
   1af54:	8b 00                	mov    (%eax),%eax
   1af56:	85 c0                	test   %eax,%eax
   1af58:	74 1d                	je     1af77 <csi_m+0xa7>
   1af5a:	8b 54 24 18          	mov    0x18(%esp),%edx
   1af5e:	89 d0                	mov    %edx,%eax
   1af60:	c1 e0 03             	shl    $0x3,%eax
   1af63:	01 d0                	add    %edx,%eax
   1af65:	c1 e0 04             	shl    $0x4,%eax
   1af68:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1af6d:	0f b6 00             	movzbl (%eax),%eax
   1af70:	83 c8 08             	or     $0x8,%eax
   1af73:	89 c1                	mov    %eax,%ecx
   1af75:	eb 1b                	jmp    1af92 <csi_m+0xc2>
   1af77:	8b 54 24 18          	mov    0x18(%esp),%edx
   1af7b:	89 d0                	mov    %edx,%eax
   1af7d:	c1 e0 03             	shl    $0x3,%eax
   1af80:	01 d0                	add    %edx,%eax
   1af82:	c1 e0 04             	shl    $0x4,%eax
   1af85:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1af8a:	0f b6 00             	movzbl (%eax),%eax
   1af8d:	83 c8 0f             	or     $0xf,%eax
   1af90:	89 c1                	mov    %eax,%ecx
   1af92:	8b 54 24 18          	mov    0x18(%esp),%edx
   1af96:	89 d0                	mov    %edx,%eax
   1af98:	c1 e0 03             	shl    $0x3,%eax
   1af9b:	01 d0                	add    %edx,%eax
   1af9d:	c1 e0 04             	shl    $0x4,%eax
   1afa0:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1afa5:	88 08                	mov    %cl,(%eax)
   1afa7:	e9 0d 05 00 00       	jmp    1b4b9 <csi_m+0x5e9>
			/*case 4: attr=attr|0x01;break;*/  /* underline */
			case 4: 														/* bold */
			  if (!iscolor)
   1afac:	8b 54 24 18          	mov    0x18(%esp),%edx
   1afb0:	89 d0                	mov    %edx,%eax
   1afb2:	c1 e0 03             	shl    $0x3,%eax
   1afb5:	01 d0                	add    %edx,%eax
   1afb7:	c1 e0 04             	shl    $0x4,%eax
   1afba:	05 e8 ee 03 00       	add    $0x3eee8,%eax
   1afbf:	8b 00                	mov    (%eax),%eax
   1afc1:	85 c0                	test   %eax,%eax
   1afc3:	75 35                	jne    1affa <csi_m+0x12a>
			    attr |= 0x01;												// 单色则带下划线显示.
   1afc5:	8b 54 24 18          	mov    0x18(%esp),%edx
   1afc9:	89 d0                	mov    %edx,%eax
   1afcb:	c1 e0 03             	shl    $0x3,%eax
   1afce:	01 d0                	add    %edx,%eax
   1afd0:	c1 e0 04             	shl    $0x4,%eax
   1afd3:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1afd8:	0f b6 00             	movzbl (%eax),%eax
   1afdb:	83 c8 01             	or     $0x1,%eax
   1afde:	89 c1                	mov    %eax,%ecx
   1afe0:	8b 54 24 18          	mov    0x18(%esp),%edx
   1afe4:	89 d0                	mov    %edx,%eax
   1afe6:	c1 e0 03             	shl    $0x3,%eax
   1afe9:	01 d0                	add    %edx,%eax
   1afeb:	c1 e0 04             	shl    $0x4,%eax
   1afee:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1aff3:	88 08                	mov    %cl,(%eax)
			      	attr = ((newattr&0xf)==((attr>>4)&0xf)?
			        (attr&0xf0)|(((attr&0xf)+1)%0xf):
			        newattr);
			    }
			  }
			  break;
   1aff5:	e9 bf 04 00 00       	jmp    1b4b9 <csi_m+0x5e9>
			case 4: 														/* bold */
			  if (!iscolor)
			    attr |= 0x01;												// 单色则带下划线显示.
			  else
			  { 															/* check if forground == background */
			    if (vc_cons[currcons].vc_bold_attr != -1)
   1affa:	8b 54 24 18          	mov    0x18(%esp),%edx
   1affe:	89 d0                	mov    %edx,%eax
   1b000:	c1 e0 03             	shl    $0x3,%eax
   1b003:	01 d0                	add    %edx,%eax
   1b005:	c1 e0 04             	shl    $0x4,%eax
   1b008:	05 64 ee 03 00       	add    $0x3ee64,%eax
   1b00d:	8b 00                	mov    (%eax),%eax
   1b00f:	83 f8 ff             	cmp    $0xffffffff,%eax
   1b012:	74 51                	je     1b065 <csi_m+0x195>
			      attr = (vc_cons[currcons].vc_bold_attr & 0x0f) | (0xf0 & (attr));
   1b014:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b018:	89 d0                	mov    %edx,%eax
   1b01a:	c1 e0 03             	shl    $0x3,%eax
   1b01d:	01 d0                	add    %edx,%eax
   1b01f:	c1 e0 04             	shl    $0x4,%eax
   1b022:	05 64 ee 03 00       	add    $0x3ee64,%eax
   1b027:	8b 00                	mov    (%eax),%eax
   1b029:	83 e0 0f             	and    $0xf,%eax
   1b02c:	89 c1                	mov    %eax,%ecx
   1b02e:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b032:	89 d0                	mov    %edx,%eax
   1b034:	c1 e0 03             	shl    $0x3,%eax
   1b037:	01 d0                	add    %edx,%eax
   1b039:	c1 e0 04             	shl    $0x4,%eax
   1b03c:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b041:	0f b6 00             	movzbl (%eax),%eax
   1b044:	83 e0 f0             	and    $0xfffffff0,%eax
   1b047:	09 c8                	or     %ecx,%eax
   1b049:	89 c1                	mov    %eax,%ecx
   1b04b:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b04f:	89 d0                	mov    %edx,%eax
   1b051:	c1 e0 03             	shl    $0x3,%eax
   1b054:	01 d0                	add    %edx,%eax
   1b056:	c1 e0 04             	shl    $0x4,%eax
   1b059:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b05e:	88 08                	mov    %cl,(%eax)
			      	attr = ((newattr&0xf)==((attr>>4)&0xf)?
			        (attr&0xf0)|(((attr&0xf)+1)%0xf):
			        newattr);
			    }
			  }
			  break;
   1b060:	e9 54 04 00 00       	jmp    1b4b9 <csi_m+0x5e9>
			  { 															/* check if forground == background */
			    if (vc_cons[currcons].vc_bold_attr != -1)
			      attr = (vc_cons[currcons].vc_bold_attr & 0x0f) | (0xf0 & (attr));
			    else
			    {
			    	short newattr = (attr&0xf0)|(0xf&(~attr));
   1b065:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b069:	89 d0                	mov    %edx,%eax
   1b06b:	c1 e0 03             	shl    $0x3,%eax
   1b06e:	01 d0                	add    %edx,%eax
   1b070:	c1 e0 04             	shl    $0x4,%eax
   1b073:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b078:	0f b6 00             	movzbl (%eax),%eax
   1b07b:	0f b6 c0             	movzbl %al,%eax
   1b07e:	66 25 f0 00          	and    $0xf0,%ax
   1b082:	89 c1                	mov    %eax,%ecx
   1b084:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b088:	89 d0                	mov    %edx,%eax
   1b08a:	c1 e0 03             	shl    $0x3,%eax
   1b08d:	01 d0                	add    %edx,%eax
   1b08f:	c1 e0 04             	shl    $0x4,%eax
   1b092:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b097:	0f b6 00             	movzbl (%eax),%eax
   1b09a:	0f b6 c0             	movzbl %al,%eax
   1b09d:	f7 d0                	not    %eax
   1b09f:	83 e0 0f             	and    $0xf,%eax
   1b0a2:	09 c8                	or     %ecx,%eax
   1b0a4:	66 89 44 24 0a       	mov    %ax,0xa(%esp)
			      	attr = ((newattr&0xf)==((attr>>4)&0xf)?
   1b0a9:	0f bf 4c 24 0a       	movswl 0xa(%esp),%ecx
   1b0ae:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b0b2:	89 d0                	mov    %edx,%eax
   1b0b4:	c1 e0 03             	shl    $0x3,%eax
   1b0b7:	01 d0                	add    %edx,%eax
   1b0b9:	c1 e0 04             	shl    $0x4,%eax
   1b0bc:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b0c1:	0f b6 00             	movzbl (%eax),%eax
   1b0c4:	c0 e8 04             	shr    $0x4,%al
   1b0c7:	0f b6 c0             	movzbl %al,%eax
   1b0ca:	31 c8                	xor    %ecx,%eax
   1b0cc:	83 e0 0f             	and    $0xf,%eax
   1b0cf:	85 c0                	test   %eax,%eax
   1b0d1:	75 65                	jne    1b138 <csi_m+0x268>
			        (attr&0xf0)|(((attr&0xf)+1)%0xf):
   1b0d3:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b0d7:	89 d0                	mov    %edx,%eax
   1b0d9:	c1 e0 03             	shl    $0x3,%eax
   1b0dc:	01 d0                	add    %edx,%eax
   1b0de:	c1 e0 04             	shl    $0x4,%eax
   1b0e1:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b0e6:	0f b6 00             	movzbl (%eax),%eax
			    if (vc_cons[currcons].vc_bold_attr != -1)
			      attr = (vc_cons[currcons].vc_bold_attr & 0x0f) | (0xf0 & (attr));
			    else
			    {
			    	short newattr = (attr&0xf0)|(0xf&(~attr));
			      	attr = ((newattr&0xf)==((attr>>4)&0xf)?
   1b0e9:	83 e0 f0             	and    $0xfffffff0,%eax
   1b0ec:	89 c3                	mov    %eax,%ebx
			        (attr&0xf0)|(((attr&0xf)+1)%0xf):
   1b0ee:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b0f2:	89 d0                	mov    %edx,%eax
   1b0f4:	c1 e0 03             	shl    $0x3,%eax
   1b0f7:	01 d0                	add    %edx,%eax
   1b0f9:	c1 e0 04             	shl    $0x4,%eax
   1b0fc:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b101:	0f b6 00             	movzbl (%eax),%eax
   1b104:	0f b6 c0             	movzbl %al,%eax
   1b107:	83 e0 0f             	and    $0xf,%eax
   1b10a:	8d 48 01             	lea    0x1(%eax),%ecx
   1b10d:	ba 89 88 88 88       	mov    $0x88888889,%edx
   1b112:	89 c8                	mov    %ecx,%eax
   1b114:	f7 ea                	imul   %edx
   1b116:	8d 04 0a             	lea    (%edx,%ecx,1),%eax
   1b119:	c1 f8 03             	sar    $0x3,%eax
   1b11c:	89 c2                	mov    %eax,%edx
   1b11e:	89 c8                	mov    %ecx,%eax
   1b120:	c1 f8 1f             	sar    $0x1f,%eax
   1b123:	29 c2                	sub    %eax,%edx
   1b125:	89 d0                	mov    %edx,%eax
   1b127:	89 c2                	mov    %eax,%edx
   1b129:	c1 e2 04             	shl    $0x4,%edx
   1b12c:	29 c2                	sub    %eax,%edx
   1b12e:	89 c8                	mov    %ecx,%eax
   1b130:	29 d0                	sub    %edx,%eax
			    if (vc_cons[currcons].vc_bold_attr != -1)
			      attr = (vc_cons[currcons].vc_bold_attr & 0x0f) | (0xf0 & (attr));
			    else
			    {
			    	short newattr = (attr&0xf0)|(0xf&(~attr));
			      	attr = ((newattr&0xf)==((attr>>4)&0xf)?
   1b132:	09 d8                	or     %ebx,%eax
   1b134:	89 c1                	mov    %eax,%ecx
   1b136:	eb 07                	jmp    1b13f <csi_m+0x26f>
   1b138:	0f b7 44 24 0a       	movzwl 0xa(%esp),%eax
   1b13d:	89 c1                	mov    %eax,%ecx
   1b13f:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b143:	89 d0                	mov    %edx,%eax
   1b145:	c1 e0 03             	shl    $0x3,%eax
   1b148:	01 d0                	add    %edx,%eax
   1b14a:	c1 e0 04             	shl    $0x4,%eax
   1b14d:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b152:	88 08                	mov    %cl,(%eax)
			        (attr&0xf0)|(((attr&0xf)+1)%0xf):
			        newattr);
			    }
			  }
			  break;
   1b154:	e9 60 03 00 00       	jmp    1b4b9 <csi_m+0x5e9>
			// 如果Ps = 5,则把当前虚拟控制台随后显示的字符设置为闪烁,即把属性字节位7置1.
			case 5: attr = attr | 0x80; break;  							/* blinking */
   1b159:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b15d:	89 d0                	mov    %edx,%eax
   1b15f:	c1 e0 03             	shl    $0x3,%eax
   1b162:	01 d0                	add    %edx,%eax
   1b164:	c1 e0 04             	shl    $0x4,%eax
   1b167:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b16c:	0f b6 00             	movzbl (%eax),%eax
   1b16f:	83 c8 80             	or     $0xffffff80,%eax
   1b172:	89 c1                	mov    %eax,%ecx
   1b174:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b178:	89 d0                	mov    %edx,%eax
   1b17a:	c1 e0 03             	shl    $0x3,%eax
   1b17d:	01 d0                	add    %edx,%eax
   1b17f:	c1 e0 04             	shl    $0x4,%eax
   1b182:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b187:	88 08                	mov    %cl,(%eax)
   1b189:	e9 2b 03 00 00       	jmp    1b4b9 <csi_m+0x5e9>
			// 如果Ps = 7,则把当前虚拟控制台随后显示的字符设置为反显,即把前景色和背景色交换.
			case 7: attr = (attr << 4) | (attr >> 4); break;  				/* negative */
   1b18e:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b192:	89 d0                	mov    %edx,%eax
   1b194:	c1 e0 03             	shl    $0x3,%eax
   1b197:	01 d0                	add    %edx,%eax
   1b199:	c1 e0 04             	shl    $0x4,%eax
   1b19c:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b1a1:	0f b6 00             	movzbl (%eax),%eax
   1b1a4:	0f b6 c0             	movzbl %al,%eax
   1b1a7:	c1 e0 04             	shl    $0x4,%eax
   1b1aa:	89 c1                	mov    %eax,%ecx
   1b1ac:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b1b0:	89 d0                	mov    %edx,%eax
   1b1b2:	c1 e0 03             	shl    $0x3,%eax
   1b1b5:	01 d0                	add    %edx,%eax
   1b1b7:	c1 e0 04             	shl    $0x4,%eax
   1b1ba:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b1bf:	0f b6 00             	movzbl (%eax),%eax
   1b1c2:	c0 e8 04             	shr    $0x4,%al
   1b1c5:	09 c8                	or     %ecx,%eax
   1b1c7:	89 c1                	mov    %eax,%ecx
   1b1c9:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b1cd:	89 d0                	mov    %edx,%eax
   1b1cf:	c1 e0 03             	shl    $0x3,%eax
   1b1d2:	01 d0                	add    %edx,%eax
   1b1d4:	c1 e0 04             	shl    $0x4,%eax
   1b1d7:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b1dc:	88 08                	mov    %cl,(%eax)
   1b1de:	e9 d6 02 00 00       	jmp    1b4b9 <csi_m+0x5e9>
			// 如果Ps = 22,则取消随后字符的高亮度显示(取消粗体显示).
			case 22: attr = attr & 0xf7; break; 							/* not bold */
   1b1e3:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b1e7:	89 d0                	mov    %edx,%eax
   1b1e9:	c1 e0 03             	shl    $0x3,%eax
   1b1ec:	01 d0                	add    %edx,%eax
   1b1ee:	c1 e0 04             	shl    $0x4,%eax
   1b1f1:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b1f6:	0f b6 00             	movzbl (%eax),%eax
   1b1f9:	83 e0 f7             	and    $0xfffffff7,%eax
   1b1fc:	89 c1                	mov    %eax,%ecx
   1b1fe:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b202:	89 d0                	mov    %edx,%eax
   1b204:	c1 e0 03             	shl    $0x3,%eax
   1b207:	01 d0                	add    %edx,%eax
   1b209:	c1 e0 04             	shl    $0x4,%eax
   1b20c:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b211:	88 08                	mov    %cl,(%eax)
   1b213:	e9 a1 02 00 00       	jmp    1b4b9 <csi_m+0x5e9>
			// 如果Ps = 24,则对于单色显示是取消随后字符的下划线显示,对于彩色显示取是取消绿色.
			case 24: attr = attr & 0xfe; break;  							/* not underline */
   1b218:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b21c:	89 d0                	mov    %edx,%eax
   1b21e:	c1 e0 03             	shl    $0x3,%eax
   1b221:	01 d0                	add    %edx,%eax
   1b223:	c1 e0 04             	shl    $0x4,%eax
   1b226:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b22b:	0f b6 00             	movzbl (%eax),%eax
   1b22e:	83 e0 fe             	and    $0xfffffffe,%eax
   1b231:	89 c1                	mov    %eax,%ecx
   1b233:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b237:	89 d0                	mov    %edx,%eax
   1b239:	c1 e0 03             	shl    $0x3,%eax
   1b23c:	01 d0                	add    %edx,%eax
   1b23e:	c1 e0 04             	shl    $0x4,%eax
   1b241:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b246:	88 08                	mov    %cl,(%eax)
   1b248:	e9 6c 02 00 00       	jmp    1b4b9 <csi_m+0x5e9>
			// 如果Ps = 25,则取消随后字符的闪烁显示.
			case 25: attr = attr & 0x7f; break;  							/* not blinking */
   1b24d:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b251:	89 d0                	mov    %edx,%eax
   1b253:	c1 e0 03             	shl    $0x3,%eax
   1b256:	01 d0                	add    %edx,%eax
   1b258:	c1 e0 04             	shl    $0x4,%eax
   1b25b:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b260:	0f b6 00             	movzbl (%eax),%eax
   1b263:	83 e0 7f             	and    $0x7f,%eax
   1b266:	89 c1                	mov    %eax,%ecx
   1b268:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b26c:	89 d0                	mov    %edx,%eax
   1b26e:	c1 e0 03             	shl    $0x3,%eax
   1b271:	01 d0                	add    %edx,%eax
   1b273:	c1 e0 04             	shl    $0x4,%eax
   1b276:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b27b:	88 08                	mov    %cl,(%eax)
   1b27d:	e9 37 02 00 00       	jmp    1b4b9 <csi_m+0x5e9>
			// 如果Ps = 27,则取消随后字符的反显.
			case 27: attr = def_attr; break; 								/* positive image */
   1b282:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b286:	89 d0                	mov    %edx,%eax
   1b288:	c1 e0 03             	shl    $0x3,%eax
   1b28b:	01 d0                	add    %edx,%eax
   1b28d:	c1 e0 04             	shl    $0x4,%eax
   1b290:	05 63 ee 03 00       	add    $0x3ee63,%eax
   1b295:	0f b6 08             	movzbl (%eax),%ecx
   1b298:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b29c:	89 d0                	mov    %edx,%eax
   1b29e:	c1 e0 03             	shl    $0x3,%eax
   1b2a1:	01 d0                	add    %edx,%eax
   1b2a3:	c1 e0 04             	shl    $0x4,%eax
   1b2a6:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b2ab:	88 08                	mov    %cl,(%eax)
   1b2ad:	e9 07 02 00 00       	jmp    1b4b9 <csi_m+0x5e9>
			// 如果Ps = 39,则复位随后字符的前景色为默认前景色(白色).
			case 39: attr = (attr & 0xf0) | (def_attr & 0x0f); break;
   1b2b2:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b2b6:	89 d0                	mov    %edx,%eax
   1b2b8:	c1 e0 03             	shl    $0x3,%eax
   1b2bb:	01 d0                	add    %edx,%eax
   1b2bd:	c1 e0 04             	shl    $0x4,%eax
   1b2c0:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b2c5:	0f b6 00             	movzbl (%eax),%eax
   1b2c8:	83 e0 f0             	and    $0xfffffff0,%eax
   1b2cb:	89 c1                	mov    %eax,%ecx
   1b2cd:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b2d1:	89 d0                	mov    %edx,%eax
   1b2d3:	c1 e0 03             	shl    $0x3,%eax
   1b2d6:	01 d0                	add    %edx,%eax
   1b2d8:	c1 e0 04             	shl    $0x4,%eax
   1b2db:	05 63 ee 03 00       	add    $0x3ee63,%eax
   1b2e0:	0f b6 00             	movzbl (%eax),%eax
   1b2e3:	83 e0 0f             	and    $0xf,%eax
   1b2e6:	09 c8                	or     %ecx,%eax
   1b2e8:	89 c1                	mov    %eax,%ecx
   1b2ea:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b2ee:	89 d0                	mov    %edx,%eax
   1b2f0:	c1 e0 03             	shl    $0x3,%eax
   1b2f3:	01 d0                	add    %edx,%eax
   1b2f5:	c1 e0 04             	shl    $0x4,%eax
   1b2f8:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b2fd:	88 08                	mov    %cl,(%eax)
   1b2ff:	e9 b5 01 00 00       	jmp    1b4b9 <csi_m+0x5e9>
			// 如果Ps = 49,则复位随后字符的背景色为默认背景色(黑色).
			case 49: attr = (attr & 0x0f) | (def_attr & 0xf0); break;
   1b304:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b308:	89 d0                	mov    %edx,%eax
   1b30a:	c1 e0 03             	shl    $0x3,%eax
   1b30d:	01 d0                	add    %edx,%eax
   1b30f:	c1 e0 04             	shl    $0x4,%eax
   1b312:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b317:	0f b6 00             	movzbl (%eax),%eax
   1b31a:	83 e0 0f             	and    $0xf,%eax
   1b31d:	89 c1                	mov    %eax,%ecx
   1b31f:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b323:	89 d0                	mov    %edx,%eax
   1b325:	c1 e0 03             	shl    $0x3,%eax
   1b328:	01 d0                	add    %edx,%eax
   1b32a:	c1 e0 04             	shl    $0x4,%eax
   1b32d:	05 63 ee 03 00       	add    $0x3ee63,%eax
   1b332:	0f b6 00             	movzbl (%eax),%eax
   1b335:	83 e0 f0             	and    $0xfffffff0,%eax
   1b338:	09 c8                	or     %ecx,%eax
   1b33a:	89 c1                	mov    %eax,%ecx
   1b33c:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b340:	89 d0                	mov    %edx,%eax
   1b342:	c1 e0 03             	shl    $0x3,%eax
   1b345:	01 d0                	add    %edx,%eax
   1b347:	c1 e0 04             	shl    $0x4,%eax
   1b34a:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b34f:	88 08                	mov    %cl,(%eax)
   1b351:	e9 63 01 00 00       	jmp    1b4b9 <csi_m+0x5e9>
			// 当Ps(par[i])为其他值时,则是设置指定的前景色或背景色.如果Ps = 30..37,则是设置前景色;如果Ps=40..47,则是设置背景色.
			default:
			  if (!can_do_colour)
   1b356:	a1 50 ee 03 00       	mov    0x3ee50,%eax
   1b35b:	85 c0                	test   %eax,%eax
   1b35d:	0f 84 55 01 00 00    	je     1b4b8 <csi_m+0x5e8>
			    break;
			  iscolor = 1;
   1b363:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b367:	89 d0                	mov    %edx,%eax
   1b369:	c1 e0 03             	shl    $0x3,%eax
   1b36c:	01 d0                	add    %edx,%eax
   1b36e:	c1 e0 04             	shl    $0x4,%eax
   1b371:	05 e8 ee 03 00       	add    $0x3eee8,%eax
   1b376:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
			  if ((par[i] >= 30) && (par[i] <= 38))		 					// 设置前景色.
   1b37c:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b380:	89 d0                	mov    %edx,%eax
   1b382:	c1 e0 03             	shl    $0x3,%eax
   1b385:	01 d0                	add    %edx,%eax
   1b387:	c1 e0 02             	shl    $0x2,%eax
   1b38a:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1b38e:	01 d0                	add    %edx,%eax
   1b390:	83 c0 0c             	add    $0xc,%eax
   1b393:	8b 04 85 68 ee 03 00 	mov    0x3ee68(,%eax,4),%eax
   1b39a:	83 f8 1d             	cmp    $0x1d,%eax
   1b39d:	76 7b                	jbe    1b41a <csi_m+0x54a>
   1b39f:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b3a3:	89 d0                	mov    %edx,%eax
   1b3a5:	c1 e0 03             	shl    $0x3,%eax
   1b3a8:	01 d0                	add    %edx,%eax
   1b3aa:	c1 e0 02             	shl    $0x2,%eax
   1b3ad:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1b3b1:	01 d0                	add    %edx,%eax
   1b3b3:	83 c0 0c             	add    $0xc,%eax
   1b3b6:	8b 04 85 68 ee 03 00 	mov    0x3ee68(,%eax,4),%eax
   1b3bd:	83 f8 26             	cmp    $0x26,%eax
   1b3c0:	77 58                	ja     1b41a <csi_m+0x54a>
			    attr = (attr & 0xf0) | (par[i] - 30);
   1b3c2:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b3c6:	89 d0                	mov    %edx,%eax
   1b3c8:	c1 e0 03             	shl    $0x3,%eax
   1b3cb:	01 d0                	add    %edx,%eax
   1b3cd:	c1 e0 04             	shl    $0x4,%eax
   1b3d0:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b3d5:	0f b6 00             	movzbl (%eax),%eax
   1b3d8:	83 e0 f0             	and    $0xfffffff0,%eax
   1b3db:	89 c1                	mov    %eax,%ecx
   1b3dd:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b3e1:	89 d0                	mov    %edx,%eax
   1b3e3:	c1 e0 03             	shl    $0x3,%eax
   1b3e6:	01 d0                	add    %edx,%eax
   1b3e8:	c1 e0 02             	shl    $0x2,%eax
   1b3eb:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1b3ef:	01 d0                	add    %edx,%eax
   1b3f1:	83 c0 0c             	add    $0xc,%eax
   1b3f4:	8b 04 85 68 ee 03 00 	mov    0x3ee68(,%eax,4),%eax
   1b3fb:	83 e8 1e             	sub    $0x1e,%eax
   1b3fe:	09 c1                	or     %eax,%ecx
   1b400:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b404:	89 d0                	mov    %edx,%eax
   1b406:	c1 e0 03             	shl    $0x3,%eax
   1b409:	01 d0                	add    %edx,%eax
   1b40b:	c1 e0 04             	shl    $0x4,%eax
   1b40e:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b413:	88 08                	mov    %cl,(%eax)
   1b415:	e9 9f 00 00 00       	jmp    1b4b9 <csi_m+0x5e9>
			  else  														/* Background color */			 // 设置背景色.
			    if ((par[i] >= 40) && (par[i] <= 48))
   1b41a:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b41e:	89 d0                	mov    %edx,%eax
   1b420:	c1 e0 03             	shl    $0x3,%eax
   1b423:	01 d0                	add    %edx,%eax
   1b425:	c1 e0 02             	shl    $0x2,%eax
   1b428:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1b42c:	01 d0                	add    %edx,%eax
   1b42e:	83 c0 0c             	add    $0xc,%eax
   1b431:	8b 04 85 68 ee 03 00 	mov    0x3ee68(,%eax,4),%eax
   1b438:	83 f8 27             	cmp    $0x27,%eax
   1b43b:	76 7c                	jbe    1b4b9 <csi_m+0x5e9>
   1b43d:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b441:	89 d0                	mov    %edx,%eax
   1b443:	c1 e0 03             	shl    $0x3,%eax
   1b446:	01 d0                	add    %edx,%eax
   1b448:	c1 e0 02             	shl    $0x2,%eax
   1b44b:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1b44f:	01 d0                	add    %edx,%eax
   1b451:	83 c0 0c             	add    $0xc,%eax
   1b454:	8b 04 85 68 ee 03 00 	mov    0x3ee68(,%eax,4),%eax
   1b45b:	83 f8 30             	cmp    $0x30,%eax
   1b45e:	77 59                	ja     1b4b9 <csi_m+0x5e9>
			      attr = (attr & 0x0f) | ((par[i] - 40) << 4);
   1b460:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b464:	89 d0                	mov    %edx,%eax
   1b466:	c1 e0 03             	shl    $0x3,%eax
   1b469:	01 d0                	add    %edx,%eax
   1b46b:	c1 e0 04             	shl    $0x4,%eax
   1b46e:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b473:	0f b6 00             	movzbl (%eax),%eax
   1b476:	83 e0 0f             	and    $0xf,%eax
   1b479:	89 c1                	mov    %eax,%ecx
   1b47b:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b47f:	89 d0                	mov    %edx,%eax
   1b481:	c1 e0 03             	shl    $0x3,%eax
   1b484:	01 d0                	add    %edx,%eax
   1b486:	c1 e0 02             	shl    $0x2,%eax
   1b489:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1b48d:	01 d0                	add    %edx,%eax
   1b48f:	83 c0 0c             	add    $0xc,%eax
   1b492:	8b 04 85 68 ee 03 00 	mov    0x3ee68(,%eax,4),%eax
   1b499:	83 e8 28             	sub    $0x28,%eax
   1b49c:	c1 e0 04             	shl    $0x4,%eax
   1b49f:	09 c1                	or     %eax,%ecx
   1b4a1:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b4a5:	89 d0                	mov    %edx,%eax
   1b4a7:	c1 e0 03             	shl    $0x3,%eax
   1b4aa:	01 d0                	add    %edx,%eax
   1b4ac:	c1 e0 04             	shl    $0x4,%eax
   1b4af:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b4b4:	88 08                	mov    %cl,(%eax)
   1b4b6:	eb 01                	jmp    1b4b9 <csi_m+0x5e9>
			// 如果Ps = 49,则复位随后字符的背景色为默认背景色(黑色).
			case 49: attr = (attr & 0x0f) | (def_attr & 0xf0); break;
			// 当Ps(par[i])为其他值时,则是设置指定的前景色或背景色.如果Ps = 30..37,则是设置前景色;如果Ps=40..47,则是设置背景色.
			default:
			  if (!can_do_colour)
			    break;
   1b4b8:	90                   	nop
	// 如果Ps = 0,则把当前虚拟控制台随后显示的字符属性设置为默认属性def_attr.初始化时def_attr已被设置成0x07(黑底白字).
	// 如果Ps = 1,则把当前虚拟控制台随后显示的字符属性设置为粗体或增亮显示.如果是彩色显示,则把字符属性或上0x08让字符高亮度显示;如果是单色显示,
	// 则让人带下划线显示.
	// 如果ps = 4,则对彩色和单色显示进行不同的处理.若此时不是彩色显示方式,则让字符带下划线显示.如果是彩色显示,那么若原来vc_bold_attr不等于-1
	// 时就复位其背景色;否则的话就把背景色取反.若取反后前景色与背景色相同,就把前景色增1而取另一种颜色.
	for (i = 0; i <= npar; i++)
   1b4b9:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   1b4be:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b4c2:	89 d0                	mov    %edx,%eax
   1b4c4:	c1 e0 03             	shl    $0x3,%eax
   1b4c7:	01 d0                	add    %edx,%eax
   1b4c9:	c1 e0 04             	shl    $0x4,%eax
   1b4cc:	05 94 ee 03 00       	add    $0x3ee94,%eax
   1b4d1:	8b 10                	mov    (%eax),%edx
   1b4d3:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1b4d7:	39 c2                	cmp    %eax,%edx
   1b4d9:	0f 83 02 fa ff ff    	jae    1aee1 <csi_m+0x11>
			    if ((par[i] >= 40) && (par[i] <= 48))
			      attr = (attr & 0x0f) | ((par[i] - 40) << 4);
			    else
					break;
		}
}
   1b4df:	90                   	nop
   1b4e0:	83 c4 10             	add    $0x10,%esp
   1b4e3:	5b                   	pop    %ebx
   1b4e4:	c3                   	ret    

0001b4e5 <set_cursor>:
// 根据光标对应显示内存位置pos,设置显示控制器光标的显示位置.
static inline void set_cursor(int currcons)
{
	// 既然我们需要设置显示光标,说明有键盘操作,因此需要恢复进行黑屏操作的延时计数值.
	// 另外,显示光标的控制台必须是当前控制台,因此若当前处理的台号currocons不是前台控制台就立刻返回.
	blankcount = blankinterval;						// 复位黑屏操作的计数值.
   1b4e5:	a1 24 ee 03 00       	mov    0x3ee24,%eax
   1b4ea:	a3 28 ee 03 00       	mov    %eax,0x3ee28
	if (currcons != fg_console)
   1b4ef:	a1 80 12 03 00       	mov    0x31280,%eax
   1b4f4:	39 44 24 04          	cmp    %eax,0x4(%esp)
   1b4f8:	0f 85 85 00 00 00    	jne    1b583 <set_cursor+0x9e>
		return;
	// 然后使用索引寄存器端口选择显示控制数据寄存器r14(光标当前显示位置高字节),接着写入光标当前位置高字节(向右移动9位表示高字节移到低字节再除以2),
	// 相对于默认显示内存操作的.再使用索引寄存器选择r15,并将光标当前位置低字节写入其中.
	cli();
   1b4fe:	fa                   	cli    
	outb_p(14, video_port_reg);
   1b4ff:	0f b7 15 4a ee 03 00 	movzwl 0x3ee4a,%edx
   1b506:	b8 0e 00 00 00       	mov    $0xe,%eax
   1b50b:	ee                   	out    %al,(%dx)
   1b50c:	eb 00                	jmp    1b50e <set_cursor+0x29>
   1b50e:	eb 00                	jmp    1b510 <set_cursor+0x2b>
	outb_p(0xff & ((pos - video_mem_base) >> 9), video_port_val);
   1b510:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b514:	89 d0                	mov    %edx,%eax
   1b516:	c1 e0 03             	shl    $0x3,%eax
   1b519:	01 d0                	add    %edx,%eax
   1b51b:	c1 e0 04             	shl    $0x4,%eax
   1b51e:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1b523:	8b 10                	mov    (%eax),%edx
   1b525:	a1 38 ee 03 00       	mov    0x3ee38,%eax
   1b52a:	29 c2                	sub    %eax,%edx
   1b52c:	89 d0                	mov    %edx,%eax
   1b52e:	c1 e8 09             	shr    $0x9,%eax
   1b531:	0f b6 c0             	movzbl %al,%eax
   1b534:	0f b7 15 4c ee 03 00 	movzwl 0x3ee4c,%edx
   1b53b:	ee                   	out    %al,(%dx)
   1b53c:	eb 00                	jmp    1b53e <set_cursor+0x59>
   1b53e:	eb 00                	jmp    1b540 <set_cursor+0x5b>
	outb_p(15, video_port_reg);
   1b540:	0f b7 15 4a ee 03 00 	movzwl 0x3ee4a,%edx
   1b547:	b8 0f 00 00 00       	mov    $0xf,%eax
   1b54c:	ee                   	out    %al,(%dx)
   1b54d:	eb 00                	jmp    1b54f <set_cursor+0x6a>
   1b54f:	eb 00                	jmp    1b551 <set_cursor+0x6c>
	outb_p(0xff & ((pos - video_mem_base) >> 1), video_port_val);
   1b551:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b555:	89 d0                	mov    %edx,%eax
   1b557:	c1 e0 03             	shl    $0x3,%eax
   1b55a:	01 d0                	add    %edx,%eax
   1b55c:	c1 e0 04             	shl    $0x4,%eax
   1b55f:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1b564:	8b 10                	mov    (%eax),%edx
   1b566:	a1 38 ee 03 00       	mov    0x3ee38,%eax
   1b56b:	29 c2                	sub    %eax,%edx
   1b56d:	89 d0                	mov    %edx,%eax
   1b56f:	d1 e8                	shr    %eax
   1b571:	0f b6 c0             	movzbl %al,%eax
   1b574:	0f b7 15 4c ee 03 00 	movzwl 0x3ee4c,%edx
   1b57b:	ee                   	out    %al,(%dx)
   1b57c:	eb 00                	jmp    1b57e <set_cursor+0x99>
   1b57e:	eb 00                	jmp    1b580 <set_cursor+0x9b>
	sti();
   1b580:	fb                   	sti    
   1b581:	eb 01                	jmp    1b584 <set_cursor+0x9f>
{
	// 既然我们需要设置显示光标,说明有键盘操作,因此需要恢复进行黑屏操作的延时计数值.
	// 另外,显示光标的控制台必须是当前控制台,因此若当前处理的台号currocons不是前台控制台就立刻返回.
	blankcount = blankinterval;						// 复位黑屏操作的计数值.
	if (currcons != fg_console)
		return;
   1b583:	90                   	nop
	outb_p(14, video_port_reg);
	outb_p(0xff & ((pos - video_mem_base) >> 9), video_port_val);
	outb_p(15, video_port_reg);
	outb_p(0xff & ((pos - video_mem_base) >> 1), video_port_val);
	sti();
}
   1b584:	c3                   	ret    

0001b585 <respond>:
// 发送对VT100的响应序列.
// 即为响应主机请求终端向主机发送设备属性(DA).主机通过发送不带参数或参数是0的DA控制序列('ESC [ 0c'或'ESC Z']要求终端发送一个设备属性(DA)控制
// 序列,终端则发送第85行上定义的应答序列(即'ESC [?];2c']来主机的序列,该序列告诉主机本终端是具有高级视频功能的VT100兼容终端.处理过程是将应答序列
// 放入读缓冲队列中,并使用copy_to_cooked()函数处理后放入辅助队列中.
static void respond(int currcons, struct tty_struct * tty)
{
   1b585:	83 ec 1c             	sub    $0x1c,%esp
	char * p = RESPONSE;
   1b588:	c7 44 24 0c 14 4f 02 	movl   $0x24f14,0xc(%esp)
   1b58f:	00 

	cli();
   1b590:	fa                   	cli    
	while (*p) {									// 将应答序列放入读队列.
   1b591:	eb 3e                	jmp    1b5d1 <respond+0x4c>
		PUTCH(*p, tty->read_q);						// 逐字符放入.include/linux/tty.h
   1b593:	8b 44 24 24          	mov    0x24(%esp),%eax
   1b597:	8b 50 34             	mov    0x34(%eax),%edx
   1b59a:	8b 44 24 24          	mov    0x24(%esp),%eax
   1b59e:	8b 40 34             	mov    0x34(%eax),%eax
   1b5a1:	8b 40 04             	mov    0x4(%eax),%eax
   1b5a4:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   1b5a8:	0f b6 09             	movzbl (%ecx),%ecx
   1b5ab:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   1b5af:	8b 44 24 24          	mov    0x24(%esp),%eax
   1b5b3:	8b 40 34             	mov    0x34(%eax),%eax
   1b5b6:	8b 54 24 24          	mov    0x24(%esp),%edx
   1b5ba:	8b 52 34             	mov    0x34(%edx),%edx
   1b5bd:	8b 52 04             	mov    0x4(%edx),%edx
   1b5c0:	83 c2 01             	add    $0x1,%edx
   1b5c3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1b5c9:	89 50 04             	mov    %edx,0x4(%eax)
		p++;
   1b5cc:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
static void respond(int currcons, struct tty_struct * tty)
{
	char * p = RESPONSE;

	cli();
	while (*p) {									// 将应答序列放入读队列.
   1b5d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1b5d5:	0f b6 00             	movzbl (%eax),%eax
   1b5d8:	84 c0                	test   %al,%al
   1b5da:	75 b7                	jne    1b593 <respond+0xe>
		PUTCH(*p, tty->read_q);						// 逐字符放入.include/linux/tty.h
		p++;
	}
	sti();
   1b5dc:	fb                   	sti    
	copy_to_cooked(tty);							// 转换成规范模式(放入辅助队列中).tty_io.c
   1b5dd:	83 ec 0c             	sub    $0xc,%esp
   1b5e0:	ff 74 24 30          	pushl  0x30(%esp)
   1b5e4:	e8 2a d6 ff ff       	call   18c13 <copy_to_cooked>
   1b5e9:	83 c4 10             	add    $0x10,%esp
}
   1b5ec:	90                   	nop
   1b5ed:	83 c4 1c             	add    $0x1c,%esp
   1b5f0:	c3                   	ret    

0001b5f1 <insert_char>:

// 在光标处插入一空格字符.
// 把光标开始处的所有字符右移一格,并将擦除字符插入在光标所在处.
static void insert_char(int currcons)
{
   1b5f1:	83 ec 10             	sub    $0x10,%esp
	int i = x;
   1b5f4:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b5f8:	89 d0                	mov    %edx,%eax
   1b5fa:	c1 e0 03             	shl    $0x3,%eax
   1b5fd:	01 d0                	add    %edx,%eax
   1b5ff:	c1 e0 04             	shl    $0x4,%eax
   1b602:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1b607:	8b 00                	mov    (%eax),%eax
   1b609:	89 44 24 0c          	mov    %eax,0xc(%esp)
	unsigned short tmp, old = video_erase_char;		// 擦除字符(加属性)
   1b60d:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b611:	89 d0                	mov    %edx,%eax
   1b613:	c1 e0 03             	shl    $0x3,%eax
   1b616:	01 d0                	add    %edx,%eax
   1b618:	c1 e0 04             	shl    $0x4,%eax
   1b61b:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1b620:	0f b7 00             	movzwl (%eax),%eax
   1b623:	66 89 44 24 0a       	mov    %ax,0xa(%esp)
	unsigned short * p = (unsigned short *) pos;	// 光标对应内存位置.
   1b628:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b62c:	89 d0                	mov    %edx,%eax
   1b62e:	c1 e0 03             	shl    $0x3,%eax
   1b631:	01 d0                	add    %edx,%eax
   1b633:	c1 e0 04             	shl    $0x4,%eax
   1b636:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1b63b:	8b 00                	mov    (%eax),%eax
   1b63d:	89 44 24 04          	mov    %eax,0x4(%esp)

	while (i++ < video_num_columns) {
   1b641:	eb 27                	jmp    1b66a <insert_char+0x79>
		tmp = *p;
   1b643:	8b 44 24 04          	mov    0x4(%esp),%eax
   1b647:	0f b7 00             	movzwl (%eax),%eax
   1b64a:	66 89 44 24 02       	mov    %ax,0x2(%esp)
		*p = old;
   1b64f:	8b 44 24 04          	mov    0x4(%esp),%eax
   1b653:	0f b7 54 24 0a       	movzwl 0xa(%esp),%edx
   1b658:	66 89 10             	mov    %dx,(%eax)
		old = tmp;
   1b65b:	0f b7 44 24 02       	movzwl 0x2(%esp),%eax
   1b660:	66 89 44 24 0a       	mov    %ax,0xa(%esp)
		p++;
   1b665:	83 44 24 04 02       	addl   $0x2,0x4(%esp)
{
	int i = x;
	unsigned short tmp, old = video_erase_char;		// 擦除字符(加属性)
	unsigned short * p = (unsigned short *) pos;	// 光标对应内存位置.

	while (i++ < video_num_columns) {
   1b66a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1b66e:	8d 50 01             	lea    0x1(%eax),%edx
   1b671:	89 54 24 0c          	mov    %edx,0xc(%esp)
   1b675:	89 c2                	mov    %eax,%edx
   1b677:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1b67c:	39 c2                	cmp    %eax,%edx
   1b67e:	72 c3                	jb     1b643 <insert_char+0x52>
		tmp = *p;
		*p = old;
		old = tmp;
		p++;
	}
}
   1b680:	90                   	nop
   1b681:	83 c4 10             	add    $0x10,%esp
   1b684:	c3                   	ret    

0001b685 <insert_line>:

// 在光标处插入一行.
// 将屏幕窗口从光标所在行到窗口底的内容向下卷动一行.光标将处在新的空行上.
static void insert_line(int currcons)
{
   1b685:	83 ec 10             	sub    $0x10,%esp
	int oldtop, oldbottom;

	// 首先保存屏幕窗口卷动开始行top和最后行bottom值,然后从光标所在行让屏幕内容向下滚动一行.最后恢复屏幕窗口卷动开始行top和最后行bottom
	// 的原来值.
	oldtop = top;
   1b688:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b68c:	89 d0                	mov    %edx,%eax
   1b68e:	c1 e0 03             	shl    $0x3,%eax
   1b691:	01 d0                	add    %edx,%eax
   1b693:	c1 e0 04             	shl    $0x4,%eax
   1b696:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1b69b:	8b 00                	mov    (%eax),%eax
   1b69d:	89 44 24 0c          	mov    %eax,0xc(%esp)
	oldbottom = bottom;
   1b6a1:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b6a5:	89 d0                	mov    %edx,%eax
   1b6a7:	c1 e0 03             	shl    $0x3,%eax
   1b6aa:	01 d0                	add    %edx,%eax
   1b6ac:	c1 e0 04             	shl    $0x4,%eax
   1b6af:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1b6b4:	8b 00                	mov    (%eax),%eax
   1b6b6:	89 44 24 08          	mov    %eax,0x8(%esp)
	top = y;										// 设置屏幕卷动开始行和结束行.
   1b6ba:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b6be:	89 d0                	mov    %edx,%eax
   1b6c0:	c1 e0 03             	shl    $0x3,%eax
   1b6c3:	01 d0                	add    %edx,%eax
   1b6c5:	c1 e0 04             	shl    $0x4,%eax
   1b6c8:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1b6cd:	8b 08                	mov    (%eax),%ecx
   1b6cf:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b6d3:	89 d0                	mov    %edx,%eax
   1b6d5:	c1 e0 03             	shl    $0x3,%eax
   1b6d8:	01 d0                	add    %edx,%eax
   1b6da:	c1 e0 04             	shl    $0x4,%eax
   1b6dd:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1b6e2:	89 08                	mov    %ecx,(%eax)
	bottom = video_num_lines;
   1b6e4:	8b 0d 44 ee 03 00    	mov    0x3ee44,%ecx
   1b6ea:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b6ee:	89 d0                	mov    %edx,%eax
   1b6f0:	c1 e0 03             	shl    $0x3,%eax
   1b6f3:	01 d0                	add    %edx,%eax
   1b6f5:	c1 e0 04             	shl    $0x4,%eax
   1b6f8:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1b6fd:	89 08                	mov    %ecx,(%eax)
	scrdown(currcons);								// 从光标开始处,屏幕内容向下滚动一行.
   1b6ff:	ff 74 24 14          	pushl  0x14(%esp)
   1b703:	e8 1d f1 ff ff       	call   1a825 <scrdown>
   1b708:	83 c4 04             	add    $0x4,%esp
	top = oldtop;
   1b70b:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   1b70f:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b713:	89 d0                	mov    %edx,%eax
   1b715:	c1 e0 03             	shl    $0x3,%eax
   1b718:	01 d0                	add    %edx,%eax
   1b71a:	c1 e0 04             	shl    $0x4,%eax
   1b71d:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1b722:	89 08                	mov    %ecx,(%eax)
	bottom = oldbottom;
   1b724:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   1b728:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b72c:	89 d0                	mov    %edx,%eax
   1b72e:	c1 e0 03             	shl    $0x3,%eax
   1b731:	01 d0                	add    %edx,%eax
   1b733:	c1 e0 04             	shl    $0x4,%eax
   1b736:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1b73b:	89 08                	mov    %ecx,(%eax)
}
   1b73d:	90                   	nop
   1b73e:	83 c4 10             	add    $0x10,%esp
   1b741:	c3                   	ret    

0001b742 <delete_char>:

// 删除一个字符
// 删除光标处的一个字符,光标右边的所有字符左移一格.
static void delete_char(int currcons)
{
   1b742:	83 ec 10             	sub    $0x10,%esp
	int i;
	unsigned short * p = (unsigned short *) pos;
   1b745:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b749:	89 d0                	mov    %edx,%eax
   1b74b:	c1 e0 03             	shl    $0x3,%eax
   1b74e:	01 d0                	add    %edx,%eax
   1b750:	c1 e0 04             	shl    $0x4,%eax
   1b753:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1b758:	8b 00                	mov    (%eax),%eax
   1b75a:	89 44 24 08          	mov    %eax,0x8(%esp)

	// 如果光标的当前列位置x走出屏幕最右列,则返回.否则从光标右一个字符开始到行末所有字符左移一格.然后在最后一个字符处填入擦除字符.
	if (x >= video_num_columns)
   1b75e:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b762:	89 d0                	mov    %edx,%eax
   1b764:	c1 e0 03             	shl    $0x3,%eax
   1b767:	01 d0                	add    %edx,%eax
   1b769:	c1 e0 04             	shl    $0x4,%eax
   1b76c:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1b771:	8b 10                	mov    (%eax),%edx
   1b773:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1b778:	39 c2                	cmp    %eax,%edx
   1b77a:	73 60                	jae    1b7dc <delete_char+0x9a>
		return;
	i = x;
   1b77c:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b780:	89 d0                	mov    %edx,%eax
   1b782:	c1 e0 03             	shl    $0x3,%eax
   1b785:	01 d0                	add    %edx,%eax
   1b787:	c1 e0 04             	shl    $0x4,%eax
   1b78a:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1b78f:	8b 00                	mov    (%eax),%eax
   1b791:	89 44 24 0c          	mov    %eax,0xc(%esp)
	while (++i < video_num_columns) {				// 光标右所有字符左移1格.
   1b795:	eb 14                	jmp    1b7ab <delete_char+0x69>
		*p = *(p + 1);
   1b797:	8b 44 24 08          	mov    0x8(%esp),%eax
   1b79b:	0f b7 50 02          	movzwl 0x2(%eax),%edx
   1b79f:	8b 44 24 08          	mov    0x8(%esp),%eax
   1b7a3:	66 89 10             	mov    %dx,(%eax)
		p++;
   1b7a6:	83 44 24 08 02       	addl   $0x2,0x8(%esp)

	// 如果光标的当前列位置x走出屏幕最右列,则返回.否则从光标右一个字符开始到行末所有字符左移一格.然后在最后一个字符处填入擦除字符.
	if (x >= video_num_columns)
		return;
	i = x;
	while (++i < video_num_columns) {				// 光标右所有字符左移1格.
   1b7ab:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   1b7b0:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1b7b4:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1b7b9:	39 c2                	cmp    %eax,%edx
   1b7bb:	72 da                	jb     1b797 <delete_char+0x55>
		*p = *(p + 1);
		p++;
	}
	*p = video_erase_char;							// 最后填入擦除字符.
   1b7bd:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b7c1:	89 d0                	mov    %edx,%eax
   1b7c3:	c1 e0 03             	shl    $0x3,%eax
   1b7c6:	01 d0                	add    %edx,%eax
   1b7c8:	c1 e0 04             	shl    $0x4,%eax
   1b7cb:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1b7d0:	0f b7 10             	movzwl (%eax),%edx
   1b7d3:	8b 44 24 08          	mov    0x8(%esp),%eax
   1b7d7:	66 89 10             	mov    %dx,(%eax)
   1b7da:	eb 01                	jmp    1b7dd <delete_char+0x9b>
	int i;
	unsigned short * p = (unsigned short *) pos;

	// 如果光标的当前列位置x走出屏幕最右列,则返回.否则从光标右一个字符开始到行末所有字符左移一格.然后在最后一个字符处填入擦除字符.
	if (x >= video_num_columns)
		return;
   1b7dc:	90                   	nop
	while (++i < video_num_columns) {				// 光标右所有字符左移1格.
		*p = *(p + 1);
		p++;
	}
	*p = video_erase_char;							// 最后填入擦除字符.
}
   1b7dd:	83 c4 10             	add    $0x10,%esp
   1b7e0:	c3                   	ret    

0001b7e1 <delete_line>:

// 删除光标所在行
// 删除光标所在的一行,并从光标所在行开始屏幕内容上巻一行.
static void delete_line(int currcons)
{
   1b7e1:	83 ec 10             	sub    $0x10,%esp
	int oldtop, oldbottom;

	// 首先保存屏幕窗口卷动开始行top和最后行bottom值,然后从光标所在行让屏幕内容向上滚动一行.最后恢复屏幕窗口卷动开始行top和最后行bottom
	// 的原来值.
	oldtop = top;
   1b7e4:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b7e8:	89 d0                	mov    %edx,%eax
   1b7ea:	c1 e0 03             	shl    $0x3,%eax
   1b7ed:	01 d0                	add    %edx,%eax
   1b7ef:	c1 e0 04             	shl    $0x4,%eax
   1b7f2:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1b7f7:	8b 00                	mov    (%eax),%eax
   1b7f9:	89 44 24 0c          	mov    %eax,0xc(%esp)
	oldbottom = bottom;
   1b7fd:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b801:	89 d0                	mov    %edx,%eax
   1b803:	c1 e0 03             	shl    $0x3,%eax
   1b806:	01 d0                	add    %edx,%eax
   1b808:	c1 e0 04             	shl    $0x4,%eax
   1b80b:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1b810:	8b 00                	mov    (%eax),%eax
   1b812:	89 44 24 08          	mov    %eax,0x8(%esp)
	top = y;										// 设置屏幕卷动开始行和最后行.
   1b816:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b81a:	89 d0                	mov    %edx,%eax
   1b81c:	c1 e0 03             	shl    $0x3,%eax
   1b81f:	01 d0                	add    %edx,%eax
   1b821:	c1 e0 04             	shl    $0x4,%eax
   1b824:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1b829:	8b 08                	mov    (%eax),%ecx
   1b82b:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b82f:	89 d0                	mov    %edx,%eax
   1b831:	c1 e0 03             	shl    $0x3,%eax
   1b834:	01 d0                	add    %edx,%eax
   1b836:	c1 e0 04             	shl    $0x4,%eax
   1b839:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1b83e:	89 08                	mov    %ecx,(%eax)
	bottom = video_num_lines;
   1b840:	8b 0d 44 ee 03 00    	mov    0x3ee44,%ecx
   1b846:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b84a:	89 d0                	mov    %edx,%eax
   1b84c:	c1 e0 03             	shl    $0x3,%eax
   1b84f:	01 d0                	add    %edx,%eax
   1b851:	c1 e0 04             	shl    $0x4,%eax
   1b854:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1b859:	89 08                	mov    %ecx,(%eax)
	scrup(currcons);								// 从光标开始处,屏幕内容向上滚动一行.
   1b85b:	ff 74 24 14          	pushl  0x14(%esp)
   1b85f:	e8 2a eb ff ff       	call   1a38e <scrup>
   1b864:	83 c4 04             	add    $0x4,%esp
	top = oldtop;
   1b867:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   1b86b:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b86f:	89 d0                	mov    %edx,%eax
   1b871:	c1 e0 03             	shl    $0x3,%eax
   1b874:	01 d0                	add    %edx,%eax
   1b876:	c1 e0 04             	shl    $0x4,%eax
   1b879:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1b87e:	89 08                	mov    %ecx,(%eax)
	bottom = oldbottom;
   1b880:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   1b884:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b888:	89 d0                	mov    %edx,%eax
   1b88a:	c1 e0 03             	shl    $0x3,%eax
   1b88d:	01 d0                	add    %edx,%eax
   1b88f:	c1 e0 04             	shl    $0x4,%eax
   1b892:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1b897:	89 08                	mov    %ecx,(%eax)
}
   1b899:	90                   	nop
   1b89a:	83 c4 10             	add    $0x10,%esp
   1b89d:	c3                   	ret    

0001b89e <csi_at>:
// 的字符将右移.超过右边界的字符将被丢失.
// 参数 nr = 转义字符序列中的参数Pn.
static void csi_at(int currcons, unsigned int nr)
{
	// 如果插入的字符数大于一行字符数,则截为一行字符数;若插入字符数nr为0,则插入1个字符.然后循环插入指定个空格字符.
	if (nr > video_num_columns)
   1b89e:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1b8a3:	39 44 24 08          	cmp    %eax,0x8(%esp)
   1b8a7:	76 0b                	jbe    1b8b4 <csi_at+0x16>
		nr = video_num_columns;
   1b8a9:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1b8ae:	89 44 24 08          	mov    %eax,0x8(%esp)
   1b8b2:	eb 1d                	jmp    1b8d1 <csi_at+0x33>
	else if (!nr)
   1b8b4:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1b8b9:	75 16                	jne    1b8d1 <csi_at+0x33>
		nr = 1;
   1b8bb:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
   1b8c2:	00 
	while (nr--)
   1b8c3:	eb 0c                	jmp    1b8d1 <csi_at+0x33>
		insert_char(currcons);
   1b8c5:	ff 74 24 04          	pushl  0x4(%esp)
   1b8c9:	e8 23 fd ff ff       	call   1b5f1 <insert_char>
   1b8ce:	83 c4 04             	add    $0x4,%esp
	// 如果插入的字符数大于一行字符数,则截为一行字符数;若插入字符数nr为0,则插入1个字符.然后循环插入指定个空格字符.
	if (nr > video_num_columns)
		nr = video_num_columns;
	else if (!nr)
		nr = 1;
	while (nr--)
   1b8d1:	8b 44 24 08          	mov    0x8(%esp),%eax
   1b8d5:	8d 50 ff             	lea    -0x1(%eax),%edx
   1b8d8:	89 54 24 08          	mov    %edx,0x8(%esp)
   1b8dc:	85 c0                	test   %eax,%eax
   1b8de:	75 e5                	jne    1b8c5 <csi_at+0x27>
		insert_char(currcons);
}
   1b8e0:	90                   	nop
   1b8e1:	c3                   	ret    

0001b8e2 <csi_L>:
// 行就丢失.
// 参数nr = 转义字符序列中的参数Pn.
static void csi_L(int currcons, unsigned int nr)
{
	// 如果插入的行数大于屏最多行数,则截为屏幕显示行数;若插入行数nr为0,则插入1行.然后循环插入指定行数nr的空行.
	if (nr > video_num_lines)
   1b8e2:	a1 44 ee 03 00       	mov    0x3ee44,%eax
   1b8e7:	39 44 24 08          	cmp    %eax,0x8(%esp)
   1b8eb:	76 0b                	jbe    1b8f8 <csi_L+0x16>
		nr = video_num_lines;
   1b8ed:	a1 44 ee 03 00       	mov    0x3ee44,%eax
   1b8f2:	89 44 24 08          	mov    %eax,0x8(%esp)
   1b8f6:	eb 1d                	jmp    1b915 <csi_L+0x33>
	else if (!nr)
   1b8f8:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1b8fd:	75 16                	jne    1b915 <csi_L+0x33>
		nr = 1;
   1b8ff:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
   1b906:	00 
	while (nr--)
   1b907:	eb 0c                	jmp    1b915 <csi_L+0x33>
		insert_line(currcons);
   1b909:	ff 74 24 04          	pushl  0x4(%esp)
   1b90d:	e8 73 fd ff ff       	call   1b685 <insert_line>
   1b912:	83 c4 04             	add    $0x4,%esp
	// 如果插入的行数大于屏最多行数,则截为屏幕显示行数;若插入行数nr为0,则插入1行.然后循环插入指定行数nr的空行.
	if (nr > video_num_lines)
		nr = video_num_lines;
	else if (!nr)
		nr = 1;
	while (nr--)
   1b915:	8b 44 24 08          	mov    0x8(%esp),%eax
   1b919:	8d 50 ff             	lea    -0x1(%eax),%edx
   1b91c:	89 54 24 08          	mov    %edx,0x8(%esp)
   1b920:	85 c0                	test   %eax,%eax
   1b922:	75 e5                	jne    1b909 <csi_L+0x27>
		insert_line(currcons);
}
   1b924:	90                   	nop
   1b925:	c3                   	ret    

0001b926 <csi_P>:
// 相同,但这里作了简化处理,仅使用字符的默认属性(黑底白字空格0x0720)来设置空字符.
// 参数nr = 转义字符序列中的参数Pn.
static void csi_P(int currcons, unsigned int nr)
{
	// 如果删除的字符数大于一行字符数,则截为一行字符数;若删除字符数nr为0,则删除1个字符.然后循环删除光标处指定字符数nr.
	if (nr > video_num_columns)
   1b926:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1b92b:	39 44 24 08          	cmp    %eax,0x8(%esp)
   1b92f:	76 0b                	jbe    1b93c <csi_P+0x16>
		nr = video_num_columns;
   1b931:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1b936:	89 44 24 08          	mov    %eax,0x8(%esp)
   1b93a:	eb 1d                	jmp    1b959 <csi_P+0x33>
	else if (!nr)
   1b93c:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1b941:	75 16                	jne    1b959 <csi_P+0x33>
		nr = 1;
   1b943:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
   1b94a:	00 
	while (nr--)
   1b94b:	eb 0c                	jmp    1b959 <csi_P+0x33>
		delete_char(currcons);
   1b94d:	ff 74 24 04          	pushl  0x4(%esp)
   1b951:	e8 ec fd ff ff       	call   1b742 <delete_char>
   1b956:	83 c4 04             	add    $0x4,%esp
	// 如果删除的字符数大于一行字符数,则截为一行字符数;若删除字符数nr为0,则删除1个字符.然后循环删除光标处指定字符数nr.
	if (nr > video_num_columns)
		nr = video_num_columns;
	else if (!nr)
		nr = 1;
	while (nr--)
   1b959:	8b 44 24 08          	mov    0x8(%esp),%eax
   1b95d:	8d 50 ff             	lea    -0x1(%eax),%edx
   1b960:	89 54 24 08          	mov    %edx,0x8(%esp)
   1b964:	85 c0                	test   %eax,%eax
   1b966:	75 e5                	jne    1b94d <csi_P+0x27>
		delete_char(currcons);
}
   1b968:	90                   	nop
   1b969:	c3                   	ret    

0001b96a <csi_M>:
// Pn大于显示页上剩余行数,则本序列仅删除这些剩余行,并对滚动区域处不起作用.
// 参数nr = 转义字符序列中的参数Pn.
static void csi_M(int currcons, unsigned int nr)
{
	// 如果删除的行数大于屏幕最大行数,则截为屏幕显示行数;若欲删除的行数nr为0,则删除1行.然后循环删除指定行数nr.
	if (nr > video_num_lines)
   1b96a:	a1 44 ee 03 00       	mov    0x3ee44,%eax
   1b96f:	39 44 24 08          	cmp    %eax,0x8(%esp)
   1b973:	76 0b                	jbe    1b980 <csi_M+0x16>
		nr = video_num_lines;
   1b975:	a1 44 ee 03 00       	mov    0x3ee44,%eax
   1b97a:	89 44 24 08          	mov    %eax,0x8(%esp)
   1b97e:	eb 1d                	jmp    1b99d <csi_M+0x33>
	else if (!nr)
   1b980:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1b985:	75 16                	jne    1b99d <csi_M+0x33>
		nr=1;
   1b987:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
   1b98e:	00 
	while (nr--)
   1b98f:	eb 0c                	jmp    1b99d <csi_M+0x33>
		delete_line(currcons);
   1b991:	ff 74 24 04          	pushl  0x4(%esp)
   1b995:	e8 47 fe ff ff       	call   1b7e1 <delete_line>
   1b99a:	83 c4 04             	add    $0x4,%esp
	// 如果删除的行数大于屏幕最大行数,则截为屏幕显示行数;若欲删除的行数nr为0,则删除1行.然后循环删除指定行数nr.
	if (nr > video_num_lines)
		nr = video_num_lines;
	else if (!nr)
		nr=1;
	while (nr--)
   1b99d:	8b 44 24 08          	mov    0x8(%esp),%eax
   1b9a1:	8d 50 ff             	lea    -0x1(%eax),%edx
   1b9a4:	89 54 24 08          	mov    %edx,0x8(%esp)
   1b9a8:	85 c0                	test   %eax,%eax
   1b9aa:	75 e5                	jne    1b991 <csi_M+0x27>
		delete_line(currcons);
}
   1b9ac:	90                   	nop
   1b9ad:	c3                   	ret    

0001b9ae <save_cur>:

//// 保存当前光标位置
static void save_cur(int currcons)
{
	saved_x = x;
   1b9ae:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b9b2:	89 d0                	mov    %edx,%eax
   1b9b4:	c1 e0 03             	shl    $0x3,%eax
   1b9b7:	01 d0                	add    %edx,%eax
   1b9b9:	c1 e0 04             	shl    $0x4,%eax
   1b9bc:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1b9c1:	8b 08                	mov    (%eax),%ecx
   1b9c3:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b9c7:	89 d0                	mov    %edx,%eax
   1b9c9:	c1 e0 03             	shl    $0x3,%eax
   1b9cc:	01 d0                	add    %edx,%eax
   1b9ce:	c1 e0 04             	shl    $0x4,%eax
   1b9d1:	05 e0 ee 03 00       	add    $0x3eee0,%eax
   1b9d6:	89 08                	mov    %ecx,(%eax)
	saved_y = y;
   1b9d8:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b9dc:	89 d0                	mov    %edx,%eax
   1b9de:	c1 e0 03             	shl    $0x3,%eax
   1b9e1:	01 d0                	add    %edx,%eax
   1b9e3:	c1 e0 04             	shl    $0x4,%eax
   1b9e6:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1b9eb:	8b 08                	mov    (%eax),%ecx
   1b9ed:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b9f1:	89 d0                	mov    %edx,%eax
   1b9f3:	c1 e0 03             	shl    $0x3,%eax
   1b9f6:	01 d0                	add    %edx,%eax
   1b9f8:	c1 e0 04             	shl    $0x4,%eax
   1b9fb:	05 e4 ee 03 00       	add    $0x3eee4,%eax
   1ba00:	89 08                	mov    %ecx,(%eax)
}
   1ba02:	90                   	nop
   1ba03:	c3                   	ret    

0001ba04 <restore_cur>:

// 恢复保存的光标位置
static void restore_cur(int currcons)
{
	gotoxy(currcons, saved_x, saved_y);
   1ba04:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ba08:	89 d0                	mov    %edx,%eax
   1ba0a:	c1 e0 03             	shl    $0x3,%eax
   1ba0d:	01 d0                	add    %edx,%eax
   1ba0f:	c1 e0 04             	shl    $0x4,%eax
   1ba12:	05 e4 ee 03 00       	add    $0x3eee4,%eax
   1ba17:	8b 08                	mov    (%eax),%ecx
   1ba19:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ba1d:	89 d0                	mov    %edx,%eax
   1ba1f:	c1 e0 03             	shl    $0x3,%eax
   1ba22:	01 d0                	add    %edx,%eax
   1ba24:	c1 e0 04             	shl    $0x4,%eax
   1ba27:	05 e0 ee 03 00       	add    $0x3eee0,%eax
   1ba2c:	8b 00                	mov    (%eax),%eax
   1ba2e:	51                   	push   %ecx
   1ba2f:	50                   	push   %eax
   1ba30:	ff 74 24 0c          	pushl  0xc(%esp)
   1ba34:	e8 e9 e7 ff ff       	call   1a222 <gotoxy>
   1ba39:	83 c4 0c             	add    $0xc,%esp
}
   1ba3c:	90                   	nop
   1ba3d:	c3                   	ret    

0001ba3e <con_write>:
// 控制台写函数
// 从终端对应的tty写缓冲队列中取字符针对每个字符进行分析.若是控制字符或转义或控制序列,则进行光标定位,字符删除等的控制处理;对于普通字符就直接在光标处
// 显示.
// 参数:tty是当前控制台使用的tty结构指针.
void con_write(struct tty_struct * tty)
{
   1ba3e:	53                   	push   %ebx
   1ba3f:	83 ec 18             	sub    $0x18,%esp

	// 该函数首先根据当前控制台使用的tty在tty表的项位置取得对应控制台号currcons,然后计算出(CHARS())目前tty写队列中含有的字符数nr,并循环取出其中的每个
	// 字符进行处理.不过如果当前控制台由于接收键盘或发出的暂停命令(如按键Ctrl-S)而处于停止状态,那么本函数就停止处理写队列中的字符,退出函数.另外,如果取出的
	// 是控制字符CAN(24)或SUB(6),那么若是在转义或控制序列期间收到的,则序列不会执行而立刻终止,同时显示随后的字符.注意,con_write()函数只处理取队列字符数
	// 时写队列中当前含有的字符.这有可能在一个序列被放到写队列期间读取字符数,因此本函数前一次退出时state有可能处于处理转义或控制序列的其他状态上.
	currcons = tty - tty_table;
   1ba42:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ba46:	ba 20 18 04 00       	mov    $0x41820,%edx
   1ba4b:	29 d0                	sub    %edx,%eax
   1ba4d:	c1 f8 06             	sar    $0x6,%eax
   1ba50:	89 44 24 08          	mov    %eax,0x8(%esp)
	if ((currcons >= MAX_CONSOLES) || (currcons < 0))
   1ba54:	83 7c 24 08 07       	cmpl   $0x7,0x8(%esp)
   1ba59:	7f 07                	jg     1ba62 <con_write+0x24>
   1ba5b:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1ba60:	79 10                	jns    1ba72 <con_write+0x34>
		panic("con_write: illegal tty");
   1ba62:	83 ec 0c             	sub    $0xc,%esp
   1ba65:	68 1c 4f 02 00       	push   $0x24f1c
   1ba6a:	e8 99 d1 fe ff       	call   8c08 <panic>
   1ba6f:	83 c4 10             	add    $0x10,%esp

	nr = CHARS(tty->write_q);										// 取写队列中字符数,在tty.h文件中
   1ba72:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ba76:	8b 40 38             	mov    0x38(%eax),%eax
   1ba79:	8b 50 04             	mov    0x4(%eax),%edx
   1ba7c:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ba80:	8b 40 38             	mov    0x38(%eax),%eax
   1ba83:	8b 40 08             	mov    0x8(%eax),%eax
   1ba86:	29 c2                	sub    %eax,%edx
   1ba88:	89 d0                	mov    %edx,%eax
   1ba8a:	25 ff 03 00 00       	and    $0x3ff,%eax
   1ba8f:	89 44 24 0c          	mov    %eax,0xc(%esp)
	while (nr--) {
   1ba93:	e9 6b 13 00 00       	jmp    1ce03 <con_write+0x13c5>
		if (tty->stopped)
   1ba98:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ba9c:	8b 40 2c             	mov    0x2c(%eax),%eax
   1ba9f:	85 c0                	test   %eax,%eax
   1baa1:	0f 85 71 13 00 00    	jne    1ce18 <con_write+0x13da>
			break;
		GETCH(tty->write_q, c);										// 取1字符到c中
   1baa7:	8b 44 24 20          	mov    0x20(%esp),%eax
   1baab:	8b 50 38             	mov    0x38(%eax),%edx
   1baae:	8b 44 24 20          	mov    0x20(%esp),%eax
   1bab2:	8b 40 38             	mov    0x38(%eax),%eax
   1bab5:	8b 40 08             	mov    0x8(%eax),%eax
   1bab8:	0f b6 44 02 10       	movzbl 0x10(%edx,%eax,1),%eax
   1babd:	88 44 24 07          	mov    %al,0x7(%esp)
   1bac1:	8b 44 24 20          	mov    0x20(%esp),%eax
   1bac5:	8b 40 38             	mov    0x38(%eax),%eax
   1bac8:	8b 54 24 20          	mov    0x20(%esp),%edx
   1bacc:	8b 52 38             	mov    0x38(%edx),%edx
   1bacf:	8b 52 08             	mov    0x8(%edx),%edx
   1bad2:	83 c2 01             	add    $0x1,%edx
   1bad5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1badb:	89 50 08             	mov    %edx,0x8(%eax)
		if (c == 24 || c == 26)										// 控制字符CAN,SUB - 取消,替换
   1bade:	80 7c 24 07 18       	cmpb   $0x18,0x7(%esp)
   1bae3:	74 07                	je     1baec <con_write+0xae>
   1bae5:	80 7c 24 07 1a       	cmpb   $0x1a,0x7(%esp)
   1baea:	75 19                	jne    1bb05 <con_write+0xc7>
			state = ESnormal;
   1baec:	8b 54 24 08          	mov    0x8(%esp),%edx
   1baf0:	89 d0                	mov    %edx,%eax
   1baf2:	c1 e0 03             	shl    $0x3,%eax
   1baf5:	01 d0                	add    %edx,%eax
   1baf7:	c1 e0 04             	shl    $0x4,%eax
   1bafa:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1baff:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		switch(state) {
   1bb05:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bb09:	89 d0                	mov    %edx,%eax
   1bb0b:	c1 e0 03             	shl    $0x3,%eax
   1bb0e:	01 d0                	add    %edx,%eax
   1bb10:	c1 e0 04             	shl    $0x4,%eax
   1bb13:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1bb18:	8b 00                	mov    (%eax),%eax
   1bb1a:	83 f8 07             	cmp    $0x7,%eax
   1bb1d:	0f 87 c7 12 00 00    	ja     1cdea <con_write+0x13ac>
   1bb23:	8b 04 85 48 4f 02 00 	mov    0x24f48(,%eax,4),%eax
   1bb2a:	ff e0                	jmp    *%eax
			//          标位置进行设置.当刚处理完一个转义或控制序列,程序也会返回到本状态.
			// 如果从写队列中取出的字符是普通显示字符代码,就直接从当前映射字符集中取出对应的显示字符,并放到当前光标所处的显示内存位置处,即直接显示该字符.然后把光标
			// 位置右移一个字符位置.具体地,如果字符不是控制字符也不是扩展字符,即(31<c<127),那么,若当前光标处在行末端或末端以外,则将光标移到下行头列.并调整光标位置
			// 对应的内存指针pos.然后将字符c写到显示内存中pos处,并将光标右移1列,同时也将pos对应地移动2个字节.
			case ESnormal:
				if (c > 31 && c < 127) {							// 是普通显示字符
   1bb2c:	80 7c 24 07 1f       	cmpb   $0x1f,0x7(%esp)
   1bb31:	0f 8e 51 01 00 00    	jle    1bc88 <con_write+0x24a>
   1bb37:	80 7c 24 07 7f       	cmpb   $0x7f,0x7(%esp)
   1bb3c:	0f 84 46 01 00 00    	je     1bc88 <con_write+0x24a>
					if (x >= video_num_columns) {					// 要换行?
   1bb42:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bb46:	89 d0                	mov    %edx,%eax
   1bb48:	c1 e0 03             	shl    $0x3,%eax
   1bb4b:	01 d0                	add    %edx,%eax
   1bb4d:	c1 e0 04             	shl    $0x4,%eax
   1bb50:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1bb55:	8b 10                	mov    (%eax),%edx
   1bb57:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1bb5c:	39 c2                	cmp    %eax,%edx
   1bb5e:	72 75                	jb     1bbd5 <con_write+0x197>
						x -= video_num_columns;
   1bb60:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bb64:	89 d0                	mov    %edx,%eax
   1bb66:	c1 e0 03             	shl    $0x3,%eax
   1bb69:	01 d0                	add    %edx,%eax
   1bb6b:	c1 e0 04             	shl    $0x4,%eax
   1bb6e:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1bb73:	8b 10                	mov    (%eax),%edx
   1bb75:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1bb7a:	89 d1                	mov    %edx,%ecx
   1bb7c:	29 c1                	sub    %eax,%ecx
   1bb7e:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bb82:	89 d0                	mov    %edx,%eax
   1bb84:	c1 e0 03             	shl    $0x3,%eax
   1bb87:	01 d0                	add    %edx,%eax
   1bb89:	c1 e0 04             	shl    $0x4,%eax
   1bb8c:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1bb91:	89 08                	mov    %ecx,(%eax)
						pos -= video_size_row;
   1bb93:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bb97:	89 d0                	mov    %edx,%eax
   1bb99:	c1 e0 03             	shl    $0x3,%eax
   1bb9c:	01 d0                	add    %edx,%eax
   1bb9e:	c1 e0 04             	shl    $0x4,%eax
   1bba1:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1bba6:	8b 10                	mov    (%eax),%edx
   1bba8:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1bbad:	89 d1                	mov    %edx,%ecx
   1bbaf:	29 c1                	sub    %eax,%ecx
   1bbb1:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bbb5:	89 d0                	mov    %edx,%eax
   1bbb7:	c1 e0 03             	shl    $0x3,%eax
   1bbba:	01 d0                	add    %edx,%eax
   1bbbc:	c1 e0 04             	shl    $0x4,%eax
   1bbbf:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1bbc4:	89 08                	mov    %ecx,(%eax)
						lf(currcons);
   1bbc6:	83 ec 0c             	sub    $0xc,%esp
   1bbc9:	ff 74 24 14          	pushl  0x14(%esp)
   1bbcd:	e8 5c ee ff ff       	call   1aa2e <lf>
   1bbd2:	83 c4 10             	add    $0x10,%esp
					}
					__asm__("movb %2, %%ah\n\t"						// 写字符
						"movw %%ax, %1\n\t"
						::"a" (translate[c - 32]),
   1bbd5:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bbd9:	89 d0                	mov    %edx,%eax
   1bbdb:	c1 e0 03             	shl    $0x3,%eax
   1bbde:	01 d0                	add    %edx,%eax
   1bbe0:	c1 e0 04             	shl    $0x4,%eax
   1bbe3:	05 ec ee 03 00       	add    $0x3eeec,%eax
   1bbe8:	8b 00                	mov    (%eax),%eax
   1bbea:	0f be 54 24 07       	movsbl 0x7(%esp),%edx
   1bbef:	83 ea 20             	sub    $0x20,%edx
   1bbf2:	01 d0                	add    %edx,%eax
   1bbf4:	0f b6 08             	movzbl (%eax),%ecx
						"m" (*(short *)pos),
   1bbf7:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bbfb:	89 d0                	mov    %edx,%eax
   1bbfd:	c1 e0 03             	shl    $0x3,%eax
   1bc00:	01 d0                	add    %edx,%eax
   1bc02:	c1 e0 04             	shl    $0x4,%eax
   1bc05:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1bc0a:	8b 00                	mov    (%eax),%eax
   1bc0c:	89 c3                	mov    %eax,%ebx
					if (x >= video_num_columns) {					// 要换行?
						x -= video_num_columns;
						pos -= video_size_row;
						lf(currcons);
					}
					__asm__("movb %2, %%ah\n\t"						// 写字符
   1bc0e:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bc12:	89 d0                	mov    %edx,%eax
   1bc14:	c1 e0 03             	shl    $0x3,%eax
   1bc17:	01 d0                	add    %edx,%eax
   1bc19:	c1 e0 04             	shl    $0x4,%eax
   1bc1c:	8d 90 62 ee 03 00    	lea    0x3ee62(%eax),%edx
   1bc22:	89 c8                	mov    %ecx,%eax
   1bc24:	8a 22                	mov    (%edx),%ah
   1bc26:	66 89 03             	mov    %ax,(%ebx)
						"movw %%ax, %1\n\t"
						::"a" (translate[c - 32]),
						"m" (*(short *)pos),
						"m" (attr)
						:);
					pos += 2;
   1bc29:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bc2d:	89 d0                	mov    %edx,%eax
   1bc2f:	c1 e0 03             	shl    $0x3,%eax
   1bc32:	01 d0                	add    %edx,%eax
   1bc34:	c1 e0 04             	shl    $0x4,%eax
   1bc37:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1bc3c:	8b 00                	mov    (%eax),%eax
   1bc3e:	8d 48 02             	lea    0x2(%eax),%ecx
   1bc41:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bc45:	89 d0                	mov    %edx,%eax
   1bc47:	c1 e0 03             	shl    $0x3,%eax
   1bc4a:	01 d0                	add    %edx,%eax
   1bc4c:	c1 e0 04             	shl    $0x4,%eax
   1bc4f:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1bc54:	89 08                	mov    %ecx,(%eax)
					x++;
   1bc56:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bc5a:	89 d0                	mov    %edx,%eax
   1bc5c:	c1 e0 03             	shl    $0x3,%eax
   1bc5f:	01 d0                	add    %edx,%eax
   1bc61:	c1 e0 04             	shl    $0x4,%eax
   1bc64:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1bc69:	8b 00                	mov    (%eax),%eax
   1bc6b:	8d 48 01             	lea    0x1(%eax),%ecx
   1bc6e:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bc72:	89 d0                	mov    %edx,%eax
   1bc74:	c1 e0 03             	shl    $0x3,%eax
   1bc77:	01 d0                	add    %edx,%eax
   1bc79:	c1 e0 04             	shl    $0x4,%eax
   1bc7c:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1bc81:	89 08                	mov    %ecx,(%eax)
   1bc83:	e9 a5 02 00 00       	jmp    1bf2d <con_write+0x4ef>
				// 如果字符c是转义字符ESC,则转换状态state到ESesc
				} else if (c == 27)									// ESC - 转义控制字符
   1bc88:	80 7c 24 07 1b       	cmpb   $0x1b,0x7(%esp)
   1bc8d:	75 1e                	jne    1bcad <con_write+0x26f>
					state = ESesc;
   1bc8f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bc93:	89 d0                	mov    %edx,%eax
   1bc95:	c1 e0 03             	shl    $0x3,%eax
   1bc98:	01 d0                	add    %edx,%eax
   1bc9a:	c1 e0 04             	shl    $0x4,%eax
   1bc9d:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1bca2:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
   1bca8:	e9 56 11 00 00       	jmp    1ce03 <con_write+0x13c5>
				// 如果c是换行符LF(10),或垂直制表符VT(11),或换页符FF(12),则光标移动到下1行.
				else if (c == 10 || c == 11 || c == 12)
   1bcad:	80 7c 24 07 0a       	cmpb   $0xa,0x7(%esp)
   1bcb2:	74 0e                	je     1bcc2 <con_write+0x284>
   1bcb4:	80 7c 24 07 0b       	cmpb   $0xb,0x7(%esp)
   1bcb9:	74 07                	je     1bcc2 <con_write+0x284>
   1bcbb:	80 7c 24 07 0c       	cmpb   $0xc,0x7(%esp)
   1bcc0:	75 14                	jne    1bcd6 <con_write+0x298>
					lf(currcons);
   1bcc2:	83 ec 0c             	sub    $0xc,%esp
   1bcc5:	ff 74 24 14          	pushl  0x14(%esp)
   1bcc9:	e8 60 ed ff ff       	call   1aa2e <lf>
   1bcce:	83 c4 10             	add    $0x10,%esp
   1bcd1:	e9 57 02 00 00       	jmp    1bf2d <con_write+0x4ef>
				// 如果c是回车符CR(13),则将光标移动到头列(0列)
				else if (c == 13)									// CR - 回车
   1bcd6:	80 7c 24 07 0d       	cmpb   $0xd,0x7(%esp)
   1bcdb:	75 14                	jne    1bcf1 <con_write+0x2b3>
					cr(currcons);
   1bcdd:	83 ec 0c             	sub    $0xc,%esp
   1bce0:	ff 74 24 14          	pushl  0x14(%esp)
   1bce4:	e8 81 ee ff ff       	call   1ab6a <cr>
   1bce9:	83 c4 10             	add    $0x10,%esp
   1bcec:	e9 12 11 00 00       	jmp    1ce03 <con_write+0x13c5>
				// 如果c是DEL(127),则将光标左边字符擦除(用空格字符替代),并将光标移到被擦除位置.
				else if (c == ERASE_CHAR(tty))
   1bcf1:	0f be 54 24 07       	movsbl 0x7(%esp),%edx
   1bcf6:	8b 44 24 20          	mov    0x20(%esp),%eax
   1bcfa:	0f b6 40 13          	movzbl 0x13(%eax),%eax
   1bcfe:	0f b6 c0             	movzbl %al,%eax
   1bd01:	39 c2                	cmp    %eax,%edx
   1bd03:	75 14                	jne    1bd19 <con_write+0x2db>
					del(currcons);
   1bd05:	83 ec 0c             	sub    $0xc,%esp
   1bd08:	ff 74 24 14          	pushl  0x14(%esp)
   1bd0c:	e8 b7 ee ff ff       	call   1abc8 <del>
   1bd11:	83 c4 10             	add    $0x10,%esp
   1bd14:	e9 ea 10 00 00       	jmp    1ce03 <con_write+0x13c5>
				// 如果c是BS(backspace,8),则将光标左移1格,并相应调整光标对应内存位置指针pos.
				else if (c == 8) {									// BS - 后退.
   1bd19:	80 7c 24 07 08       	cmpb   $0x8,0x7(%esp)
   1bd1e:	75 7c                	jne    1bd9c <con_write+0x35e>
					if (x) {
   1bd20:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bd24:	89 d0                	mov    %edx,%eax
   1bd26:	c1 e0 03             	shl    $0x3,%eax
   1bd29:	01 d0                	add    %edx,%eax
   1bd2b:	c1 e0 04             	shl    $0x4,%eax
   1bd2e:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1bd33:	8b 00                	mov    (%eax),%eax
   1bd35:	85 c0                	test   %eax,%eax
   1bd37:	0f 84 c6 10 00 00    	je     1ce03 <con_write+0x13c5>
						x--;
   1bd3d:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bd41:	89 d0                	mov    %edx,%eax
   1bd43:	c1 e0 03             	shl    $0x3,%eax
   1bd46:	01 d0                	add    %edx,%eax
   1bd48:	c1 e0 04             	shl    $0x4,%eax
   1bd4b:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1bd50:	8b 00                	mov    (%eax),%eax
   1bd52:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1bd55:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bd59:	89 d0                	mov    %edx,%eax
   1bd5b:	c1 e0 03             	shl    $0x3,%eax
   1bd5e:	01 d0                	add    %edx,%eax
   1bd60:	c1 e0 04             	shl    $0x4,%eax
   1bd63:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1bd68:	89 08                	mov    %ecx,(%eax)
						pos -= 2;
   1bd6a:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bd6e:	89 d0                	mov    %edx,%eax
   1bd70:	c1 e0 03             	shl    $0x3,%eax
   1bd73:	01 d0                	add    %edx,%eax
   1bd75:	c1 e0 04             	shl    $0x4,%eax
   1bd78:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1bd7d:	8b 00                	mov    (%eax),%eax
   1bd7f:	8d 48 fe             	lea    -0x2(%eax),%ecx
   1bd82:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bd86:	89 d0                	mov    %edx,%eax
   1bd88:	c1 e0 03             	shl    $0x3,%eax
   1bd8b:	01 d0                	add    %edx,%eax
   1bd8d:	c1 e0 04             	shl    $0x4,%eax
   1bd90:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1bd95:	89 08                	mov    %ecx,(%eax)
   1bd97:	e9 67 10 00 00       	jmp    1ce03 <con_write+0x13c5>
					}
				// 如果字符c是水平制表符HT(9),则将光标移到8的位数列上.若此时光标列数超出屏幕最大列数,则将光标移到下一行上.
				} else if (c == 9) {								// HT - 水平制表
   1bd9c:	80 7c 24 07 09       	cmpb   $0x9,0x7(%esp)
   1bda1:	0f 85 28 01 00 00    	jne    1becf <con_write+0x491>
					c = 8 - (x & 7);
   1bda7:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bdab:	89 d0                	mov    %edx,%eax
   1bdad:	c1 e0 03             	shl    $0x3,%eax
   1bdb0:	01 d0                	add    %edx,%eax
   1bdb2:	c1 e0 04             	shl    $0x4,%eax
   1bdb5:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1bdba:	8b 00                	mov    (%eax),%eax
   1bdbc:	83 e0 07             	and    $0x7,%eax
   1bdbf:	ba 08 00 00 00       	mov    $0x8,%edx
   1bdc4:	29 c2                	sub    %eax,%edx
   1bdc6:	89 d0                	mov    %edx,%eax
   1bdc8:	88 44 24 07          	mov    %al,0x7(%esp)
					x += c;
   1bdcc:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bdd0:	89 d0                	mov    %edx,%eax
   1bdd2:	c1 e0 03             	shl    $0x3,%eax
   1bdd5:	01 d0                	add    %edx,%eax
   1bdd7:	c1 e0 04             	shl    $0x4,%eax
   1bdda:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1bddf:	8b 10                	mov    (%eax),%edx
   1bde1:	0f be 44 24 07       	movsbl 0x7(%esp),%eax
   1bde6:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1bde9:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bded:	89 d0                	mov    %edx,%eax
   1bdef:	c1 e0 03             	shl    $0x3,%eax
   1bdf2:	01 d0                	add    %edx,%eax
   1bdf4:	c1 e0 04             	shl    $0x4,%eax
   1bdf7:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1bdfc:	89 08                	mov    %ecx,(%eax)
					pos += c << 1;
   1bdfe:	8b 54 24 08          	mov    0x8(%esp),%edx
   1be02:	89 d0                	mov    %edx,%eax
   1be04:	c1 e0 03             	shl    $0x3,%eax
   1be07:	01 d0                	add    %edx,%eax
   1be09:	c1 e0 04             	shl    $0x4,%eax
   1be0c:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1be11:	8b 00                	mov    (%eax),%eax
   1be13:	0f be 54 24 07       	movsbl 0x7(%esp),%edx
   1be18:	01 d2                	add    %edx,%edx
   1be1a:	8d 0c 10             	lea    (%eax,%edx,1),%ecx
   1be1d:	8b 54 24 08          	mov    0x8(%esp),%edx
   1be21:	89 d0                	mov    %edx,%eax
   1be23:	c1 e0 03             	shl    $0x3,%eax
   1be26:	01 d0                	add    %edx,%eax
   1be28:	c1 e0 04             	shl    $0x4,%eax
   1be2b:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1be30:	89 08                	mov    %ecx,(%eax)
					if (x > video_num_columns) {
   1be32:	8b 54 24 08          	mov    0x8(%esp),%edx
   1be36:	89 d0                	mov    %edx,%eax
   1be38:	c1 e0 03             	shl    $0x3,%eax
   1be3b:	01 d0                	add    %edx,%eax
   1be3d:	c1 e0 04             	shl    $0x4,%eax
   1be40:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1be45:	8b 10                	mov    (%eax),%edx
   1be47:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1be4c:	39 c2                	cmp    %eax,%edx
   1be4e:	76 75                	jbe    1bec5 <con_write+0x487>
						x -= video_num_columns;
   1be50:	8b 54 24 08          	mov    0x8(%esp),%edx
   1be54:	89 d0                	mov    %edx,%eax
   1be56:	c1 e0 03             	shl    $0x3,%eax
   1be59:	01 d0                	add    %edx,%eax
   1be5b:	c1 e0 04             	shl    $0x4,%eax
   1be5e:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1be63:	8b 10                	mov    (%eax),%edx
   1be65:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1be6a:	89 d1                	mov    %edx,%ecx
   1be6c:	29 c1                	sub    %eax,%ecx
   1be6e:	8b 54 24 08          	mov    0x8(%esp),%edx
   1be72:	89 d0                	mov    %edx,%eax
   1be74:	c1 e0 03             	shl    $0x3,%eax
   1be77:	01 d0                	add    %edx,%eax
   1be79:	c1 e0 04             	shl    $0x4,%eax
   1be7c:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1be81:	89 08                	mov    %ecx,(%eax)
						pos -= video_size_row;
   1be83:	8b 54 24 08          	mov    0x8(%esp),%edx
   1be87:	89 d0                	mov    %edx,%eax
   1be89:	c1 e0 03             	shl    $0x3,%eax
   1be8c:	01 d0                	add    %edx,%eax
   1be8e:	c1 e0 04             	shl    $0x4,%eax
   1be91:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1be96:	8b 10                	mov    (%eax),%edx
   1be98:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1be9d:	89 d1                	mov    %edx,%ecx
   1be9f:	29 c1                	sub    %eax,%ecx
   1bea1:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bea5:	89 d0                	mov    %edx,%eax
   1bea7:	c1 e0 03             	shl    $0x3,%eax
   1beaa:	01 d0                	add    %edx,%eax
   1beac:	c1 e0 04             	shl    $0x4,%eax
   1beaf:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1beb4:	89 08                	mov    %ecx,(%eax)
						lf(currcons);
   1beb6:	83 ec 0c             	sub    $0xc,%esp
   1beb9:	ff 74 24 14          	pushl  0x14(%esp)
   1bebd:	e8 6c eb ff ff       	call   1aa2e <lf>
   1bec2:	83 c4 10             	add    $0x10,%esp
					}
					c = 9;
   1bec5:	c6 44 24 07 09       	movb   $0x9,0x7(%esp)
   1beca:	e9 34 0f 00 00       	jmp    1ce03 <con_write+0x13c5>
				// 如果字符c是响铃符BEL(7),则调用蜂鸣函数,使扬声器发声.
				} else if (c == 7)									// BEL - 响铃
   1becf:	80 7c 24 07 07       	cmpb   $0x7,0x7(%esp)
   1bed4:	75 0a                	jne    1bee0 <con_write+0x4a2>
					sysbeep();
   1bed6:	e8 3a 15 00 00       	call   1d415 <sysbeep>
   1bedb:	e9 23 0f 00 00       	jmp    1ce03 <con_write+0x13c5>
				// 如果c是控制字符SO(14)或SI(15),则相应选择字符集G1或G0作为显示字符集.
			  	else if (c == 14)									// SO - 换出,使用G1.
   1bee0:	80 7c 24 07 0e       	cmpb   $0xe,0x7(%esp)
   1bee5:	75 20                	jne    1bf07 <con_write+0x4c9>
			  		translate = GRAF_TRANS;
   1bee7:	8b 0d 40 e5 02 00    	mov    0x2e540,%ecx
   1beed:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bef1:	89 d0                	mov    %edx,%eax
   1bef3:	c1 e0 03             	shl    $0x3,%eax
   1bef6:	01 d0                	add    %edx,%eax
   1bef8:	c1 e0 04             	shl    $0x4,%eax
   1befb:	05 ec ee 03 00       	add    $0x3eeec,%eax
   1bf00:	89 08                	mov    %ecx,(%eax)
   1bf02:	e9 fc 0e 00 00       	jmp    1ce03 <con_write+0x13c5>
			  	else if (c == 15)									// SI - 换进,使用G0.
   1bf07:	80 7c 24 07 0f       	cmpb   $0xf,0x7(%esp)
   1bf0c:	0f 85 f1 0e 00 00    	jne    1ce03 <con_write+0x13c5>
					translate = NORM_TRANS;
   1bf12:	8b 0d 3c e5 02 00    	mov    0x2e53c,%ecx
   1bf18:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bf1c:	89 d0                	mov    %edx,%eax
   1bf1e:	c1 e0 03             	shl    $0x3,%eax
   1bf21:	01 d0                	add    %edx,%eax
   1bf23:	c1 e0 04             	shl    $0x4,%eax
   1bf26:	05 ec ee 03 00       	add    $0x3eeec,%eax
   1bf2b:	89 08                	mov    %ecx,(%eax)
				break;
   1bf2d:	e9 d1 0e 00 00       	jmp    1ce03 <con_write+0x13c5>
			//       ESsquare去处理.否则就把接收到的字符作为转义序列来处理.对于选择字符集转义序列'ESC ('和'ESC )',使用单独的状态ESsetgraph
			//       来处理;对于设备控制字符串序列'ESC P',使用单独的状态ESsetterm来处理
			// 如果在ESnormal状态收到转义字符ESC(0x1b = 033 = 27),则转到本状态处理.该状态对C1中控制字符或转义字符进行处理.处理完后默认的
			// 状态将是ESnormal.
			case ESesc:
				state = ESnormal;
   1bf32:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bf36:	89 d0                	mov    %edx,%eax
   1bf38:	c1 e0 03             	shl    $0x3,%eax
   1bf3b:	01 d0                	add    %edx,%eax
   1bf3d:	c1 e0 04             	shl    $0x4,%eax
   1bf40:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1bf45:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				switch (c)
   1bf4b:	0f be 44 24 07       	movsbl 0x7(%esp),%eax
   1bf50:	83 e8 23             	sub    $0x23,%eax
   1bf53:	83 f8 40             	cmp    $0x40,%eax
   1bf56:	0f 87 a7 0e 00 00    	ja     1ce03 <con_write+0x13c5>
   1bf5c:	8b 04 85 68 4f 02 00 	mov    0x24f68(,%eax,4),%eax
   1bf63:	ff e0                	jmp    *%eax
				{
				  case '[':											// ESC [ - 是CSI序列.
					state = ESsquare;
   1bf65:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bf69:	89 d0                	mov    %edx,%eax
   1bf6b:	c1 e0 03             	shl    $0x3,%eax
   1bf6e:	01 d0                	add    %edx,%eax
   1bf70:	c1 e0 04             	shl    $0x4,%eax
   1bf73:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1bf78:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
					break;
   1bf7e:	e9 e7 01 00 00       	jmp    1c16a <con_write+0x72c>
				  case 'E':											// ESC E - 光标下移1行回0列.
					gotoxy(currcons, 0, y + 1);
   1bf83:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bf87:	89 d0                	mov    %edx,%eax
   1bf89:	c1 e0 03             	shl    $0x3,%eax
   1bf8c:	01 d0                	add    %edx,%eax
   1bf8e:	c1 e0 04             	shl    $0x4,%eax
   1bf91:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1bf96:	8b 00                	mov    (%eax),%eax
   1bf98:	83 c0 01             	add    $0x1,%eax
   1bf9b:	83 ec 04             	sub    $0x4,%esp
   1bf9e:	50                   	push   %eax
   1bf9f:	6a 00                	push   $0x0
   1bfa1:	ff 74 24 14          	pushl  0x14(%esp)
   1bfa5:	e8 78 e2 ff ff       	call   1a222 <gotoxy>
   1bfaa:	83 c4 10             	add    $0x10,%esp
					break;
   1bfad:	e9 b8 01 00 00       	jmp    1c16a <con_write+0x72c>
				  case 'M':											// ESC M - 光标上移一行.
					ri(currcons);
   1bfb2:	83 ec 0c             	sub    $0xc,%esp
   1bfb5:	ff 74 24 14          	pushl  0x14(%esp)
   1bfb9:	e8 0f eb ff ff       	call   1aacd <ri>
   1bfbe:	83 c4 10             	add    $0x10,%esp
					break;
   1bfc1:	e9 a4 01 00 00       	jmp    1c16a <con_write+0x72c>
				  case 'D':											// ESC D - 光标下移一行
					lf(currcons);
   1bfc6:	83 ec 0c             	sub    $0xc,%esp
   1bfc9:	ff 74 24 14          	pushl  0x14(%esp)
   1bfcd:	e8 5c ea ff ff       	call   1aa2e <lf>
   1bfd2:	83 c4 10             	add    $0x10,%esp
					break;
   1bfd5:	e9 90 01 00 00       	jmp    1c16a <con_write+0x72c>
				  case 'Z':											// ESC Z - 设备属性查询
					respond(currcons, tty);
   1bfda:	83 ec 08             	sub    $0x8,%esp
   1bfdd:	ff 74 24 28          	pushl  0x28(%esp)
   1bfe1:	ff 74 24 14          	pushl  0x14(%esp)
   1bfe5:	e8 9b f5 ff ff       	call   1b585 <respond>
   1bfea:	83 c4 10             	add    $0x10,%esp
					break;
   1bfed:	e9 78 01 00 00       	jmp    1c16a <con_write+0x72c>
				  case '7':											// ESC 7 - 保存光标位置
					save_cur(currcons);
   1bff2:	83 ec 0c             	sub    $0xc,%esp
   1bff5:	ff 74 24 14          	pushl  0x14(%esp)
   1bff9:	e8 b0 f9 ff ff       	call   1b9ae <save_cur>
   1bffe:	83 c4 10             	add    $0x10,%esp
					break;
   1c001:	e9 64 01 00 00       	jmp    1c16a <con_write+0x72c>
				  case '8':											// ESC 8 - 恢复光标位置
					restore_cur(currcons);
   1c006:	83 ec 0c             	sub    $0xc,%esp
   1c009:	ff 74 24 14          	pushl  0x14(%esp)
   1c00d:	e8 f2 f9 ff ff       	call   1ba04 <restore_cur>
   1c012:	83 c4 10             	add    $0x10,%esp
					break;
   1c015:	e9 50 01 00 00       	jmp    1c16a <con_write+0x72c>
				  case '(':  case ')':								// ESC(,ESC) - 选择字符集
				    	state = ESsetgraph;
   1c01a:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c01e:	89 d0                	mov    %edx,%eax
   1c020:	c1 e0 03             	shl    $0x3,%eax
   1c023:	01 d0                	add    %edx,%eax
   1c025:	c1 e0 04             	shl    $0x4,%eax
   1c028:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1c02d:	c7 00 07 00 00 00    	movl   $0x7,(%eax)
					break;
   1c033:	e9 32 01 00 00       	jmp    1c16a <con_write+0x72c>
				  case 'P':											// ESC P - 设置终端参数
				    	state = ESsetterm;
   1c038:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c03c:	89 d0                	mov    %edx,%eax
   1c03e:	c1 e0 03             	shl    $0x3,%eax
   1c041:	01 d0                	add    %edx,%eax
   1c043:	c1 e0 04             	shl    $0x4,%eax
   1c046:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1c04b:	c7 00 06 00 00 00    	movl   $0x6,(%eax)
				    	break;
   1c051:	e9 14 01 00 00       	jmp    1c16a <con_write+0x72c>
				  case '#':											// ESC # - 修改整行属性
				  	state = -1;
   1c056:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c05a:	89 d0                	mov    %edx,%eax
   1c05c:	c1 e0 03             	shl    $0x3,%eax
   1c05f:	01 d0                	add    %edx,%eax
   1c061:	c1 e0 04             	shl    $0x4,%eax
   1c064:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1c069:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
				  	break;
   1c06f:	e9 f6 00 00 00       	jmp    1c16a <con_write+0x72c>
				  case 'c':											// ESC c - 复位到终端初始设置
					tty->termios = DEF_TERMIOS;
   1c074:	8b 44 24 20          	mov    0x20(%esp),%eax
   1c078:	c7 00 00 01 00 00    	movl   $0x100,(%eax)
   1c07e:	8b 44 24 20          	mov    0x20(%esp),%eax
   1c082:	c7 40 04 05 00 00 00 	movl   $0x5,0x4(%eax)
   1c089:	8b 44 24 20          	mov    0x20(%esp),%eax
   1c08d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
   1c094:	8b 44 24 20          	mov    0x20(%esp),%eax
   1c098:	c7 40 0c 0b 0e 00 00 	movl   $0xe0b,0xc(%eax)
   1c09f:	8b 44 24 20          	mov    0x20(%esp),%eax
   1c0a3:	c6 40 10 00          	movb   $0x0,0x10(%eax)
   1c0a7:	8b 44 24 20          	mov    0x20(%esp),%eax
   1c0ab:	8b 15 33 4f 02 00    	mov    0x24f33,%edx
   1c0b1:	89 50 11             	mov    %edx,0x11(%eax)
   1c0b4:	8b 15 37 4f 02 00    	mov    0x24f37,%edx
   1c0ba:	89 50 15             	mov    %edx,0x15(%eax)
   1c0bd:	8b 15 3b 4f 02 00    	mov    0x24f3b,%edx
   1c0c3:	89 50 19             	mov    %edx,0x19(%eax)
   1c0c6:	8b 15 3f 4f 02 00    	mov    0x24f3f,%edx
   1c0cc:	89 50 1d             	mov    %edx,0x1d(%eax)
   1c0cf:	0f b6 15 43 4f 02 00 	movzbl 0x24f43,%edx
   1c0d6:	88 50 21             	mov    %dl,0x21(%eax)
				  	state = restate = ESnormal;
   1c0d9:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c0dd:	89 d0                	mov    %edx,%eax
   1c0df:	c1 e0 03             	shl    $0x3,%eax
   1c0e2:	01 d0                	add    %edx,%eax
   1c0e4:	c1 e0 04             	shl    $0x4,%eax
   1c0e7:	05 70 ee 03 00       	add    $0x3ee70,%eax
   1c0ec:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   1c0f2:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c0f6:	89 d0                	mov    %edx,%eax
   1c0f8:	c1 e0 03             	shl    $0x3,%eax
   1c0fb:	01 d0                	add    %edx,%eax
   1c0fd:	c1 e0 04             	shl    $0x4,%eax
   1c100:	05 70 ee 03 00       	add    $0x3ee70,%eax
   1c105:	8b 08                	mov    (%eax),%ecx
   1c107:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c10b:	89 d0                	mov    %edx,%eax
   1c10d:	c1 e0 03             	shl    $0x3,%eax
   1c110:	01 d0                	add    %edx,%eax
   1c112:	c1 e0 04             	shl    $0x4,%eax
   1c115:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1c11a:	89 08                	mov    %ecx,(%eax)
					checkin = 0;
   1c11c:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c120:	89 d0                	mov    %edx,%eax
   1c122:	c1 e0 03             	shl    $0x3,%eax
   1c125:	01 d0                	add    %edx,%eax
   1c127:	c1 e0 04             	shl    $0x4,%eax
   1c12a:	05 74 ee 03 00       	add    $0x3ee74,%eax
   1c12f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
					top = 0;
   1c135:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c139:	89 d0                	mov    %edx,%eax
   1c13b:	c1 e0 03             	shl    $0x3,%eax
   1c13e:	01 d0                	add    %edx,%eax
   1c140:	c1 e0 04             	shl    $0x4,%eax
   1c143:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1c148:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
					bottom = video_num_lines;
   1c14e:	8b 0d 44 ee 03 00    	mov    0x3ee44,%ecx
   1c154:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c158:	89 d0                	mov    %edx,%eax
   1c15a:	c1 e0 03             	shl    $0x3,%eax
   1c15d:	01 d0                	add    %edx,%eax
   1c15f:	c1 e0 04             	shl    $0x4,%eax
   1c162:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1c167:	89 08                	mov    %ecx,(%eax)
					break;
   1c169:	90                   	nop
				 /* case '>':   Numeric keypad */
				 /* case '=':   Appl. keypad */
				}
				break;
   1c16a:	e9 94 0c 00 00       	jmp    1ce03 <con_write+0x13c5>
			// 如果在状态ESesc(是转义字符ESC)时收到的字符'[',则表明是CSI控制序列,于是转到状态Essequare来处理.首先对ESC转义序列保存参数数组par[]清零,
			// 索引变量npar指向首项,并且设置开始处于参数状态ESgetpars.如果接收到的字符不是'?',则直接转到状态ESgetpars去处理,若接收到的字符是'?',说明这
			// 个序列是终端设备私有序列,后面会有一个功能字符.于是去读下一字符,再到状态ESgetpars去处理代码处.如果此时接收到字符还是'[',那么表明收到了键盘功能
			// 键发出的序列,于是设置下一状态为ESfunckey.否则直接进入ESgetpars状态继续处理.
			case ESsquare:
				for(npar = 0; npar < NPAR; npar++)					// 初始化参数数组.
   1c16f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c173:	89 d0                	mov    %edx,%eax
   1c175:	c1 e0 03             	shl    $0x3,%eax
   1c178:	01 d0                	add    %edx,%eax
   1c17a:	c1 e0 04             	shl    $0x4,%eax
   1c17d:	05 94 ee 03 00       	add    $0x3ee94,%eax
   1c182:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   1c188:	eb 60                	jmp    1c1ea <con_write+0x7ac>
					par[npar] = 0;
   1c18a:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c18e:	89 d0                	mov    %edx,%eax
   1c190:	c1 e0 03             	shl    $0x3,%eax
   1c193:	01 d0                	add    %edx,%eax
   1c195:	c1 e0 04             	shl    $0x4,%eax
   1c198:	05 94 ee 03 00       	add    $0x3ee94,%eax
   1c19d:	8b 08                	mov    (%eax),%ecx
   1c19f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c1a3:	89 d0                	mov    %edx,%eax
   1c1a5:	c1 e0 03             	shl    $0x3,%eax
   1c1a8:	01 d0                	add    %edx,%eax
   1c1aa:	c1 e0 02             	shl    $0x2,%eax
   1c1ad:	01 c8                	add    %ecx,%eax
   1c1af:	83 c0 0c             	add    $0xc,%eax
   1c1b2:	c7 04 85 68 ee 03 00 	movl   $0x0,0x3ee68(,%eax,4)
   1c1b9:	00 00 00 00 
			// 如果在状态ESesc(是转义字符ESC)时收到的字符'[',则表明是CSI控制序列,于是转到状态Essequare来处理.首先对ESC转义序列保存参数数组par[]清零,
			// 索引变量npar指向首项,并且设置开始处于参数状态ESgetpars.如果接收到的字符不是'?',则直接转到状态ESgetpars去处理,若接收到的字符是'?',说明这
			// 个序列是终端设备私有序列,后面会有一个功能字符.于是去读下一字符,再到状态ESgetpars去处理代码处.如果此时接收到字符还是'[',那么表明收到了键盘功能
			// 键发出的序列,于是设置下一状态为ESfunckey.否则直接进入ESgetpars状态继续处理.
			case ESsquare:
				for(npar = 0; npar < NPAR; npar++)					// 初始化参数数组.
   1c1bd:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c1c1:	89 d0                	mov    %edx,%eax
   1c1c3:	c1 e0 03             	shl    $0x3,%eax
   1c1c6:	01 d0                	add    %edx,%eax
   1c1c8:	c1 e0 04             	shl    $0x4,%eax
   1c1cb:	05 94 ee 03 00       	add    $0x3ee94,%eax
   1c1d0:	8b 00                	mov    (%eax),%eax
   1c1d2:	8d 48 01             	lea    0x1(%eax),%ecx
   1c1d5:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c1d9:	89 d0                	mov    %edx,%eax
   1c1db:	c1 e0 03             	shl    $0x3,%eax
   1c1de:	01 d0                	add    %edx,%eax
   1c1e0:	c1 e0 04             	shl    $0x4,%eax
   1c1e3:	05 94 ee 03 00       	add    $0x3ee94,%eax
   1c1e8:	89 08                	mov    %ecx,(%eax)
   1c1ea:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c1ee:	89 d0                	mov    %edx,%eax
   1c1f0:	c1 e0 03             	shl    $0x3,%eax
   1c1f3:	01 d0                	add    %edx,%eax
   1c1f5:	c1 e0 04             	shl    $0x4,%eax
   1c1f8:	05 94 ee 03 00       	add    $0x3ee94,%eax
   1c1fd:	8b 00                	mov    (%eax),%eax
   1c1ff:	83 f8 0f             	cmp    $0xf,%eax
   1c202:	76 86                	jbe    1c18a <con_write+0x74c>
					par[npar] = 0;
				npar = 0;
   1c204:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c208:	89 d0                	mov    %edx,%eax
   1c20a:	c1 e0 03             	shl    $0x3,%eax
   1c20d:	01 d0                	add    %edx,%eax
   1c20f:	c1 e0 04             	shl    $0x4,%eax
   1c212:	05 94 ee 03 00       	add    $0x3ee94,%eax
   1c217:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				state = ESgetpars;
   1c21d:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c221:	89 d0                	mov    %edx,%eax
   1c223:	c1 e0 03             	shl    $0x3,%eax
   1c226:	01 d0                	add    %edx,%eax
   1c228:	c1 e0 04             	shl    $0x4,%eax
   1c22b:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1c230:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
				if (c == '[')  										/* Function key */	// 'ESC [['是功能键.
   1c236:	80 7c 24 07 5b       	cmpb   $0x5b,0x7(%esp)
   1c23b:	75 1e                	jne    1c25b <con_write+0x81d>
				{
					state = ESfunckey;
   1c23d:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c241:	89 d0                	mov    %edx,%eax
   1c243:	c1 e0 03             	shl    $0x3,%eax
   1c246:	01 d0                	add    %edx,%eax
   1c248:	c1 e0 04             	shl    $0x4,%eax
   1c24b:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1c250:	c7 00 05 00 00 00    	movl   $0x5,(%eax)
					break;
   1c256:	e9 a8 0b 00 00       	jmp    1ce03 <con_write+0x13c5>
				}
				if (ques = (c == '?'))
   1c25b:	80 7c 24 07 3f       	cmpb   $0x3f,0x7(%esp)
   1c260:	0f 94 c0             	sete   %al
   1c263:	0f b6 c8             	movzbl %al,%ecx
   1c266:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c26a:	89 d0                	mov    %edx,%eax
   1c26c:	c1 e0 03             	shl    $0x3,%eax
   1c26f:	01 d0                	add    %edx,%eax
   1c271:	c1 e0 04             	shl    $0x4,%eax
   1c274:	05 68 ee 03 00       	add    $0x3ee68,%eax
   1c279:	89 08                	mov    %ecx,(%eax)
   1c27b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c27f:	89 d0                	mov    %edx,%eax
   1c281:	c1 e0 03             	shl    $0x3,%eax
   1c284:	01 d0                	add    %edx,%eax
   1c286:	c1 e0 04             	shl    $0x4,%eax
   1c289:	05 68 ee 03 00       	add    $0x3ee68,%eax
   1c28e:	8b 00                	mov    (%eax),%eax
   1c290:	85 c0                	test   %eax,%eax
   1c292:	74 05                	je     1c299 <con_write+0x85b>
					break;
   1c294:	e9 6a 0b 00 00       	jmp    1ce03 <con_write+0x13c5>
			//            则还是维持在本状态,并把接收到的参数值保存在数据par[]下一项中.若不是数字字符或分号,说明已取得所有参数,那么就转移到状态
			//            ESgotparts去处理.
			// 该状态表示此时要接收控制序列的参数值.参数用十进制数表示,把接收到的数字字符转换成数值并保存到par[]数组中.如果收到一个分号';',则还是维持在本状态,并
			// 把接收到的参数值保存在数据par[]下一项中.若不是数字字符或分号,说明已取得所有参数,那么就转移到状态ESgotpars去处理.
			case ESgetpars:
				if (c == ';' && npar < NPAR - 1) {
   1c299:	80 7c 24 07 3b       	cmpb   $0x3b,0x7(%esp)
   1c29e:	75 4c                	jne    1c2ec <con_write+0x8ae>
   1c2a0:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c2a4:	89 d0                	mov    %edx,%eax
   1c2a6:	c1 e0 03             	shl    $0x3,%eax
   1c2a9:	01 d0                	add    %edx,%eax
   1c2ab:	c1 e0 04             	shl    $0x4,%eax
   1c2ae:	05 94 ee 03 00       	add    $0x3ee94,%eax
   1c2b3:	8b 00                	mov    (%eax),%eax
   1c2b5:	83 f8 0e             	cmp    $0xe,%eax
   1c2b8:	77 32                	ja     1c2ec <con_write+0x8ae>
					npar++;
   1c2ba:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c2be:	89 d0                	mov    %edx,%eax
   1c2c0:	c1 e0 03             	shl    $0x3,%eax
   1c2c3:	01 d0                	add    %edx,%eax
   1c2c5:	c1 e0 04             	shl    $0x4,%eax
   1c2c8:	05 94 ee 03 00       	add    $0x3ee94,%eax
   1c2cd:	8b 00                	mov    (%eax),%eax
   1c2cf:	8d 48 01             	lea    0x1(%eax),%ecx
   1c2d2:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c2d6:	89 d0                	mov    %edx,%eax
   1c2d8:	c1 e0 03             	shl    $0x3,%eax
   1c2db:	01 d0                	add    %edx,%eax
   1c2dd:	c1 e0 04             	shl    $0x4,%eax
   1c2e0:	05 94 ee 03 00       	add    $0x3ee94,%eax
   1c2e5:	89 08                	mov    %ecx,(%eax)
					break;
   1c2e7:	e9 17 0b 00 00       	jmp    1ce03 <con_write+0x13c5>
				} else if (c >= '0' && c <= '9') {
   1c2ec:	80 7c 24 07 2f       	cmpb   $0x2f,0x7(%esp)
   1c2f1:	7e 7f                	jle    1c372 <con_write+0x934>
   1c2f3:	80 7c 24 07 39       	cmpb   $0x39,0x7(%esp)
   1c2f8:	7f 78                	jg     1c372 <con_write+0x934>
					par[npar] = 10 * par[npar] + c - '0';
   1c2fa:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c2fe:	89 d0                	mov    %edx,%eax
   1c300:	c1 e0 03             	shl    $0x3,%eax
   1c303:	01 d0                	add    %edx,%eax
   1c305:	c1 e0 04             	shl    $0x4,%eax
   1c308:	05 94 ee 03 00       	add    $0x3ee94,%eax
   1c30d:	8b 18                	mov    (%eax),%ebx
   1c30f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c313:	89 d0                	mov    %edx,%eax
   1c315:	c1 e0 03             	shl    $0x3,%eax
   1c318:	01 d0                	add    %edx,%eax
   1c31a:	c1 e0 04             	shl    $0x4,%eax
   1c31d:	05 94 ee 03 00       	add    $0x3ee94,%eax
   1c322:	8b 08                	mov    (%eax),%ecx
   1c324:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c328:	89 d0                	mov    %edx,%eax
   1c32a:	c1 e0 03             	shl    $0x3,%eax
   1c32d:	01 d0                	add    %edx,%eax
   1c32f:	c1 e0 02             	shl    $0x2,%eax
   1c332:	01 c8                	add    %ecx,%eax
   1c334:	83 c0 0c             	add    $0xc,%eax
   1c337:	8b 14 85 68 ee 03 00 	mov    0x3ee68(,%eax,4),%edx
   1c33e:	89 d0                	mov    %edx,%eax
   1c340:	c1 e0 02             	shl    $0x2,%eax
   1c343:	01 d0                	add    %edx,%eax
   1c345:	01 c0                	add    %eax,%eax
   1c347:	89 c2                	mov    %eax,%edx
   1c349:	0f be 44 24 07       	movsbl 0x7(%esp),%eax
   1c34e:	01 d0                	add    %edx,%eax
   1c350:	8d 48 d0             	lea    -0x30(%eax),%ecx
   1c353:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c357:	89 d0                	mov    %edx,%eax
   1c359:	c1 e0 03             	shl    $0x3,%eax
   1c35c:	01 d0                	add    %edx,%eax
   1c35e:	c1 e0 02             	shl    $0x2,%eax
   1c361:	01 d8                	add    %ebx,%eax
   1c363:	83 c0 0c             	add    $0xc,%eax
   1c366:	89 0c 85 68 ee 03 00 	mov    %ecx,0x3ee68(,%eax,4)
					break;
   1c36d:	e9 91 0a 00 00       	jmp    1ce03 <con_write+0x13c5>
				} else state = ESgotpars;
   1c372:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c376:	89 d0                	mov    %edx,%eax
   1c378:	c1 e0 03             	shl    $0x3,%eax
   1c37b:	01 d0                	add    %edx,%eax
   1c37d:	c1 e0 04             	shl    $0x4,%eax
   1c380:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1c385:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
			//           收到过'?',说明这个序列是终端设备私有序列.本内核不对支持对这种序列的处理,于是直接恢复到ESnormal状态.否则就去执行相应控制序列.
			//           待序列处理完后就把状态恢复到ESnormal.
			// ESgotpars状态表示我们已经接收到一个完整的控制序列.此时可以根据本状态接收到的结尾字符对相应控制序列进行处理.不过在处理之前,如果在ESsquare状态收到过'?',
			// 说明这个序列是终端设备私有序列.本内核不支持对这种序列的处理,于是直接恢复到ESnormal状态.否则就去执行相应控制序列.待序列处理完后就把状态恢复到ESnormal.
			case ESgotpars:
				state = ESnormal;
   1c38b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c38f:	89 d0                	mov    %edx,%eax
   1c391:	c1 e0 03             	shl    $0x3,%eax
   1c394:	01 d0                	add    %edx,%eax
   1c396:	c1 e0 04             	shl    $0x4,%eax
   1c399:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1c39e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				if (ques)
   1c3a4:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c3a8:	89 d0                	mov    %edx,%eax
   1c3aa:	c1 e0 03             	shl    $0x3,%eax
   1c3ad:	01 d0                	add    %edx,%eax
   1c3af:	c1 e0 04             	shl    $0x4,%eax
   1c3b2:	05 68 ee 03 00       	add    $0x3ee68,%eax
   1c3b7:	8b 00                	mov    (%eax),%eax
   1c3b9:	85 c0                	test   %eax,%eax
   1c3bb:	74 1e                	je     1c3db <con_write+0x99d>
				{ ques =0;
   1c3bd:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c3c1:	89 d0                	mov    %edx,%eax
   1c3c3:	c1 e0 03             	shl    $0x3,%eax
   1c3c6:	01 d0                	add    %edx,%eax
   1c3c8:	c1 e0 04             	shl    $0x4,%eax
   1c3cb:	05 68 ee 03 00       	add    $0x3ee68,%eax
   1c3d0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				  break;
   1c3d6:	e9 28 0a 00 00       	jmp    1ce03 <con_write+0x13c5>
				}
				switch(c) {
   1c3db:	0f be 44 24 07       	movsbl 0x7(%esp),%eax
   1c3e0:	83 e8 40             	sub    $0x40,%eax
   1c3e3:	83 f8 35             	cmp    $0x35,%eax
   1c3e6:	0f 87 17 0a 00 00    	ja     1ce03 <con_write+0x13c5>
   1c3ec:	8b 04 85 6c 50 02 00 	mov    0x2506c(,%eax,4),%eax
   1c3f3:	ff e0                	jmp    *%eax
					// 如果c是字符'G'或'`',则par[]中第1个参数代表列号,若列号不为零,则将光标左移1格.
					case 'G': case '`':							// CSI Pn G - 光标水平移动.
						if (par[0]) par[0]--;
   1c3f5:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c3f9:	89 d0                	mov    %edx,%eax
   1c3fb:	c1 e0 03             	shl    $0x3,%eax
   1c3fe:	01 d0                	add    %edx,%eax
   1c400:	c1 e0 04             	shl    $0x4,%eax
   1c403:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c408:	8b 00                	mov    (%eax),%eax
   1c40a:	85 c0                	test   %eax,%eax
   1c40c:	74 2d                	je     1c43b <con_write+0x9fd>
   1c40e:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c412:	89 d0                	mov    %edx,%eax
   1c414:	c1 e0 03             	shl    $0x3,%eax
   1c417:	01 d0                	add    %edx,%eax
   1c419:	c1 e0 04             	shl    $0x4,%eax
   1c41c:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c421:	8b 00                	mov    (%eax),%eax
   1c423:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1c426:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c42a:	89 d0                	mov    %edx,%eax
   1c42c:	c1 e0 03             	shl    $0x3,%eax
   1c42f:	01 d0                	add    %edx,%eax
   1c431:	c1 e0 04             	shl    $0x4,%eax
   1c434:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c439:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, par[0], y);
   1c43b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c43f:	89 d0                	mov    %edx,%eax
   1c441:	c1 e0 03             	shl    $0x3,%eax
   1c444:	01 d0                	add    %edx,%eax
   1c446:	c1 e0 04             	shl    $0x4,%eax
   1c449:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1c44e:	8b 08                	mov    (%eax),%ecx
   1c450:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c454:	89 d0                	mov    %edx,%eax
   1c456:	c1 e0 03             	shl    $0x3,%eax
   1c459:	01 d0                	add    %edx,%eax
   1c45b:	c1 e0 04             	shl    $0x4,%eax
   1c45e:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c463:	8b 00                	mov    (%eax),%eax
   1c465:	83 ec 04             	sub    $0x4,%esp
   1c468:	51                   	push   %ecx
   1c469:	50                   	push   %eax
   1c46a:	ff 74 24 14          	pushl  0x14(%esp)
   1c46e:	e8 af dd ff ff       	call   1a222 <gotoxy>
   1c473:	83 c4 10             	add    $0x10,%esp
						break;
   1c476:	e9 4b 08 00 00       	jmp    1ccc6 <con_write+0x1288>
					// 如果c是'A',则第1个参数代表光标上移的行数.若参数为0则上移1行.
					case 'A':									// CSI Pn A - 光标上移.
						if (!par[0]) par[0]++;
   1c47b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c47f:	89 d0                	mov    %edx,%eax
   1c481:	c1 e0 03             	shl    $0x3,%eax
   1c484:	01 d0                	add    %edx,%eax
   1c486:	c1 e0 04             	shl    $0x4,%eax
   1c489:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c48e:	8b 00                	mov    (%eax),%eax
   1c490:	85 c0                	test   %eax,%eax
   1c492:	75 2d                	jne    1c4c1 <con_write+0xa83>
   1c494:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c498:	89 d0                	mov    %edx,%eax
   1c49a:	c1 e0 03             	shl    $0x3,%eax
   1c49d:	01 d0                	add    %edx,%eax
   1c49f:	c1 e0 04             	shl    $0x4,%eax
   1c4a2:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c4a7:	8b 00                	mov    (%eax),%eax
   1c4a9:	8d 48 01             	lea    0x1(%eax),%ecx
   1c4ac:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c4b0:	89 d0                	mov    %edx,%eax
   1c4b2:	c1 e0 03             	shl    $0x3,%eax
   1c4b5:	01 d0                	add    %edx,%eax
   1c4b7:	c1 e0 04             	shl    $0x4,%eax
   1c4ba:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c4bf:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, x, y - par[0]);
   1c4c1:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c4c5:	89 d0                	mov    %edx,%eax
   1c4c7:	c1 e0 03             	shl    $0x3,%eax
   1c4ca:	01 d0                	add    %edx,%eax
   1c4cc:	c1 e0 04             	shl    $0x4,%eax
   1c4cf:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1c4d4:	8b 08                	mov    (%eax),%ecx
   1c4d6:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c4da:	89 d0                	mov    %edx,%eax
   1c4dc:	c1 e0 03             	shl    $0x3,%eax
   1c4df:	01 d0                	add    %edx,%eax
   1c4e1:	c1 e0 04             	shl    $0x4,%eax
   1c4e4:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c4e9:	8b 00                	mov    (%eax),%eax
   1c4eb:	29 c1                	sub    %eax,%ecx
   1c4ed:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c4f1:	89 d0                	mov    %edx,%eax
   1c4f3:	c1 e0 03             	shl    $0x3,%eax
   1c4f6:	01 d0                	add    %edx,%eax
   1c4f8:	c1 e0 04             	shl    $0x4,%eax
   1c4fb:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1c500:	8b 00                	mov    (%eax),%eax
   1c502:	83 ec 04             	sub    $0x4,%esp
   1c505:	51                   	push   %ecx
   1c506:	50                   	push   %eax
   1c507:	ff 74 24 14          	pushl  0x14(%esp)
   1c50b:	e8 12 dd ff ff       	call   1a222 <gotoxy>
   1c510:	83 c4 10             	add    $0x10,%esp
						break;
   1c513:	e9 ae 07 00 00       	jmp    1ccc6 <con_write+0x1288>
					// 如果c是'B'或'e',则第1个代表光标右移的格数.若参数为0则下移一行.
					case 'B': case 'e':							// CSI Pn B - 光标下移.
						if (!par[0]) par[0]++;
   1c518:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c51c:	89 d0                	mov    %edx,%eax
   1c51e:	c1 e0 03             	shl    $0x3,%eax
   1c521:	01 d0                	add    %edx,%eax
   1c523:	c1 e0 04             	shl    $0x4,%eax
   1c526:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c52b:	8b 00                	mov    (%eax),%eax
   1c52d:	85 c0                	test   %eax,%eax
   1c52f:	75 2d                	jne    1c55e <con_write+0xb20>
   1c531:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c535:	89 d0                	mov    %edx,%eax
   1c537:	c1 e0 03             	shl    $0x3,%eax
   1c53a:	01 d0                	add    %edx,%eax
   1c53c:	c1 e0 04             	shl    $0x4,%eax
   1c53f:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c544:	8b 00                	mov    (%eax),%eax
   1c546:	8d 48 01             	lea    0x1(%eax),%ecx
   1c549:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c54d:	89 d0                	mov    %edx,%eax
   1c54f:	c1 e0 03             	shl    $0x3,%eax
   1c552:	01 d0                	add    %edx,%eax
   1c554:	c1 e0 04             	shl    $0x4,%eax
   1c557:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c55c:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, x, y + par[0]);
   1c55e:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c562:	89 d0                	mov    %edx,%eax
   1c564:	c1 e0 03             	shl    $0x3,%eax
   1c567:	01 d0                	add    %edx,%eax
   1c569:	c1 e0 04             	shl    $0x4,%eax
   1c56c:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1c571:	8b 08                	mov    (%eax),%ecx
   1c573:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c577:	89 d0                	mov    %edx,%eax
   1c579:	c1 e0 03             	shl    $0x3,%eax
   1c57c:	01 d0                	add    %edx,%eax
   1c57e:	c1 e0 04             	shl    $0x4,%eax
   1c581:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c586:	8b 00                	mov    (%eax),%eax
   1c588:	01 c1                	add    %eax,%ecx
   1c58a:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c58e:	89 d0                	mov    %edx,%eax
   1c590:	c1 e0 03             	shl    $0x3,%eax
   1c593:	01 d0                	add    %edx,%eax
   1c595:	c1 e0 04             	shl    $0x4,%eax
   1c598:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1c59d:	8b 00                	mov    (%eax),%eax
   1c59f:	83 ec 04             	sub    $0x4,%esp
   1c5a2:	51                   	push   %ecx
   1c5a3:	50                   	push   %eax
   1c5a4:	ff 74 24 14          	pushl  0x14(%esp)
   1c5a8:	e8 75 dc ff ff       	call   1a222 <gotoxy>
   1c5ad:	83 c4 10             	add    $0x10,%esp
						break;
   1c5b0:	e9 11 07 00 00       	jmp    1ccc6 <con_write+0x1288>
					// 如果c是'C'或'a',则第1个参数代表光标右移的格数.若参数为0则右移1格.
					case 'C': case 'a':							// CSI Pn C - 光标右移.
						if (!par[0]) par[0]++;
   1c5b5:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c5b9:	89 d0                	mov    %edx,%eax
   1c5bb:	c1 e0 03             	shl    $0x3,%eax
   1c5be:	01 d0                	add    %edx,%eax
   1c5c0:	c1 e0 04             	shl    $0x4,%eax
   1c5c3:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c5c8:	8b 00                	mov    (%eax),%eax
   1c5ca:	85 c0                	test   %eax,%eax
   1c5cc:	75 2d                	jne    1c5fb <con_write+0xbbd>
   1c5ce:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c5d2:	89 d0                	mov    %edx,%eax
   1c5d4:	c1 e0 03             	shl    $0x3,%eax
   1c5d7:	01 d0                	add    %edx,%eax
   1c5d9:	c1 e0 04             	shl    $0x4,%eax
   1c5dc:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c5e1:	8b 00                	mov    (%eax),%eax
   1c5e3:	8d 48 01             	lea    0x1(%eax),%ecx
   1c5e6:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c5ea:	89 d0                	mov    %edx,%eax
   1c5ec:	c1 e0 03             	shl    $0x3,%eax
   1c5ef:	01 d0                	add    %edx,%eax
   1c5f1:	c1 e0 04             	shl    $0x4,%eax
   1c5f4:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c5f9:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, x + par[0], y);
   1c5fb:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c5ff:	89 d0                	mov    %edx,%eax
   1c601:	c1 e0 03             	shl    $0x3,%eax
   1c604:	01 d0                	add    %edx,%eax
   1c606:	c1 e0 04             	shl    $0x4,%eax
   1c609:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1c60e:	8b 08                	mov    (%eax),%ecx
   1c610:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c614:	89 d0                	mov    %edx,%eax
   1c616:	c1 e0 03             	shl    $0x3,%eax
   1c619:	01 d0                	add    %edx,%eax
   1c61b:	c1 e0 04             	shl    $0x4,%eax
   1c61e:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1c623:	8b 18                	mov    (%eax),%ebx
   1c625:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c629:	89 d0                	mov    %edx,%eax
   1c62b:	c1 e0 03             	shl    $0x3,%eax
   1c62e:	01 d0                	add    %edx,%eax
   1c630:	c1 e0 04             	shl    $0x4,%eax
   1c633:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c638:	8b 00                	mov    (%eax),%eax
   1c63a:	01 d8                	add    %ebx,%eax
   1c63c:	83 ec 04             	sub    $0x4,%esp
   1c63f:	51                   	push   %ecx
   1c640:	50                   	push   %eax
   1c641:	ff 74 24 14          	pushl  0x14(%esp)
   1c645:	e8 d8 db ff ff       	call   1a222 <gotoxy>
   1c64a:	83 c4 10             	add    $0x10,%esp
						break;
   1c64d:	e9 74 06 00 00       	jmp    1ccc6 <con_write+0x1288>
					// 如果c是'D',则第1个参数代表光标左移的格数.若参数为0则左移1格.
					case 'D':									// CSI Pn D - 光标左移.
						if (!par[0]) par[0]++;
   1c652:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c656:	89 d0                	mov    %edx,%eax
   1c658:	c1 e0 03             	shl    $0x3,%eax
   1c65b:	01 d0                	add    %edx,%eax
   1c65d:	c1 e0 04             	shl    $0x4,%eax
   1c660:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c665:	8b 00                	mov    (%eax),%eax
   1c667:	85 c0                	test   %eax,%eax
   1c669:	75 2d                	jne    1c698 <con_write+0xc5a>
   1c66b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c66f:	89 d0                	mov    %edx,%eax
   1c671:	c1 e0 03             	shl    $0x3,%eax
   1c674:	01 d0                	add    %edx,%eax
   1c676:	c1 e0 04             	shl    $0x4,%eax
   1c679:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c67e:	8b 00                	mov    (%eax),%eax
   1c680:	8d 48 01             	lea    0x1(%eax),%ecx
   1c683:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c687:	89 d0                	mov    %edx,%eax
   1c689:	c1 e0 03             	shl    $0x3,%eax
   1c68c:	01 d0                	add    %edx,%eax
   1c68e:	c1 e0 04             	shl    $0x4,%eax
   1c691:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c696:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, x - par[0], y);
   1c698:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c69c:	89 d0                	mov    %edx,%eax
   1c69e:	c1 e0 03             	shl    $0x3,%eax
   1c6a1:	01 d0                	add    %edx,%eax
   1c6a3:	c1 e0 04             	shl    $0x4,%eax
   1c6a6:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1c6ab:	8b 08                	mov    (%eax),%ecx
   1c6ad:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c6b1:	89 d0                	mov    %edx,%eax
   1c6b3:	c1 e0 03             	shl    $0x3,%eax
   1c6b6:	01 d0                	add    %edx,%eax
   1c6b8:	c1 e0 04             	shl    $0x4,%eax
   1c6bb:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1c6c0:	8b 18                	mov    (%eax),%ebx
   1c6c2:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c6c6:	89 d0                	mov    %edx,%eax
   1c6c8:	c1 e0 03             	shl    $0x3,%eax
   1c6cb:	01 d0                	add    %edx,%eax
   1c6cd:	c1 e0 04             	shl    $0x4,%eax
   1c6d0:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c6d5:	8b 00                	mov    (%eax),%eax
   1c6d7:	29 c3                	sub    %eax,%ebx
   1c6d9:	89 d8                	mov    %ebx,%eax
   1c6db:	83 ec 04             	sub    $0x4,%esp
   1c6de:	51                   	push   %ecx
   1c6df:	50                   	push   %eax
   1c6e0:	ff 74 24 14          	pushl  0x14(%esp)
   1c6e4:	e8 39 db ff ff       	call   1a222 <gotoxy>
   1c6e9:	83 c4 10             	add    $0x10,%esp
						break;
   1c6ec:	e9 d5 05 00 00       	jmp    1ccc6 <con_write+0x1288>
					// 如果c是'E',则第1个参数代表光标向下移动的行数,并回到0列.若参数为0则下移1行.
					case 'E':									// CSI Pn E - 光标下移回0列
						if (!par[0]) par[0]++;
   1c6f1:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c6f5:	89 d0                	mov    %edx,%eax
   1c6f7:	c1 e0 03             	shl    $0x3,%eax
   1c6fa:	01 d0                	add    %edx,%eax
   1c6fc:	c1 e0 04             	shl    $0x4,%eax
   1c6ff:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c704:	8b 00                	mov    (%eax),%eax
   1c706:	85 c0                	test   %eax,%eax
   1c708:	75 2d                	jne    1c737 <con_write+0xcf9>
   1c70a:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c70e:	89 d0                	mov    %edx,%eax
   1c710:	c1 e0 03             	shl    $0x3,%eax
   1c713:	01 d0                	add    %edx,%eax
   1c715:	c1 e0 04             	shl    $0x4,%eax
   1c718:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c71d:	8b 00                	mov    (%eax),%eax
   1c71f:	8d 48 01             	lea    0x1(%eax),%ecx
   1c722:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c726:	89 d0                	mov    %edx,%eax
   1c728:	c1 e0 03             	shl    $0x3,%eax
   1c72b:	01 d0                	add    %edx,%eax
   1c72d:	c1 e0 04             	shl    $0x4,%eax
   1c730:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c735:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, 0, y + par[0]);
   1c737:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c73b:	89 d0                	mov    %edx,%eax
   1c73d:	c1 e0 03             	shl    $0x3,%eax
   1c740:	01 d0                	add    %edx,%eax
   1c742:	c1 e0 04             	shl    $0x4,%eax
   1c745:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1c74a:	8b 08                	mov    (%eax),%ecx
   1c74c:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c750:	89 d0                	mov    %edx,%eax
   1c752:	c1 e0 03             	shl    $0x3,%eax
   1c755:	01 d0                	add    %edx,%eax
   1c757:	c1 e0 04             	shl    $0x4,%eax
   1c75a:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c75f:	8b 00                	mov    (%eax),%eax
   1c761:	01 c8                	add    %ecx,%eax
   1c763:	83 ec 04             	sub    $0x4,%esp
   1c766:	50                   	push   %eax
   1c767:	6a 00                	push   $0x0
   1c769:	ff 74 24 14          	pushl  0x14(%esp)
   1c76d:	e8 b0 da ff ff       	call   1a222 <gotoxy>
   1c772:	83 c4 10             	add    $0x10,%esp
						break;
   1c775:	e9 4c 05 00 00       	jmp    1ccc6 <con_write+0x1288>
					// 如果c是'F',则第1个参数代表光标向上移动的行数,并回到0列.若参数为0则上移1行.
					case 'F':									// CSI Pn F - 光标上移回0列.
						if (!par[0]) par[0]++;
   1c77a:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c77e:	89 d0                	mov    %edx,%eax
   1c780:	c1 e0 03             	shl    $0x3,%eax
   1c783:	01 d0                	add    %edx,%eax
   1c785:	c1 e0 04             	shl    $0x4,%eax
   1c788:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c78d:	8b 00                	mov    (%eax),%eax
   1c78f:	85 c0                	test   %eax,%eax
   1c791:	75 2d                	jne    1c7c0 <con_write+0xd82>
   1c793:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c797:	89 d0                	mov    %edx,%eax
   1c799:	c1 e0 03             	shl    $0x3,%eax
   1c79c:	01 d0                	add    %edx,%eax
   1c79e:	c1 e0 04             	shl    $0x4,%eax
   1c7a1:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c7a6:	8b 00                	mov    (%eax),%eax
   1c7a8:	8d 48 01             	lea    0x1(%eax),%ecx
   1c7ab:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c7af:	89 d0                	mov    %edx,%eax
   1c7b1:	c1 e0 03             	shl    $0x3,%eax
   1c7b4:	01 d0                	add    %edx,%eax
   1c7b6:	c1 e0 04             	shl    $0x4,%eax
   1c7b9:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c7be:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, 0, y - par[0]);
   1c7c0:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c7c4:	89 d0                	mov    %edx,%eax
   1c7c6:	c1 e0 03             	shl    $0x3,%eax
   1c7c9:	01 d0                	add    %edx,%eax
   1c7cb:	c1 e0 04             	shl    $0x4,%eax
   1c7ce:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1c7d3:	8b 08                	mov    (%eax),%ecx
   1c7d5:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c7d9:	89 d0                	mov    %edx,%eax
   1c7db:	c1 e0 03             	shl    $0x3,%eax
   1c7de:	01 d0                	add    %edx,%eax
   1c7e0:	c1 e0 04             	shl    $0x4,%eax
   1c7e3:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c7e8:	8b 00                	mov    (%eax),%eax
   1c7ea:	29 c1                	sub    %eax,%ecx
   1c7ec:	89 c8                	mov    %ecx,%eax
   1c7ee:	83 ec 04             	sub    $0x4,%esp
   1c7f1:	50                   	push   %eax
   1c7f2:	6a 00                	push   $0x0
   1c7f4:	ff 74 24 14          	pushl  0x14(%esp)
   1c7f8:	e8 25 da ff ff       	call   1a222 <gotoxy>
   1c7fd:	83 c4 10             	add    $0x10,%esp
						break;
   1c800:	e9 c1 04 00 00       	jmp    1ccc6 <con_write+0x1288>
					// 如果c是'd',则第1个参数代表光标所需在的行号(从0计数).
					case 'd':									// CSI Pn d - 在当前列置行位置
						if (par[0]) par[0]--;
   1c805:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c809:	89 d0                	mov    %edx,%eax
   1c80b:	c1 e0 03             	shl    $0x3,%eax
   1c80e:	01 d0                	add    %edx,%eax
   1c810:	c1 e0 04             	shl    $0x4,%eax
   1c813:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c818:	8b 00                	mov    (%eax),%eax
   1c81a:	85 c0                	test   %eax,%eax
   1c81c:	74 2d                	je     1c84b <con_write+0xe0d>
   1c81e:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c822:	89 d0                	mov    %edx,%eax
   1c824:	c1 e0 03             	shl    $0x3,%eax
   1c827:	01 d0                	add    %edx,%eax
   1c829:	c1 e0 04             	shl    $0x4,%eax
   1c82c:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c831:	8b 00                	mov    (%eax),%eax
   1c833:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1c836:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c83a:	89 d0                	mov    %edx,%eax
   1c83c:	c1 e0 03             	shl    $0x3,%eax
   1c83f:	01 d0                	add    %edx,%eax
   1c841:	c1 e0 04             	shl    $0x4,%eax
   1c844:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c849:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, x, par[0]);
   1c84b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c84f:	89 d0                	mov    %edx,%eax
   1c851:	c1 e0 03             	shl    $0x3,%eax
   1c854:	01 d0                	add    %edx,%eax
   1c856:	c1 e0 04             	shl    $0x4,%eax
   1c859:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c85e:	8b 08                	mov    (%eax),%ecx
   1c860:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c864:	89 d0                	mov    %edx,%eax
   1c866:	c1 e0 03             	shl    $0x3,%eax
   1c869:	01 d0                	add    %edx,%eax
   1c86b:	c1 e0 04             	shl    $0x4,%eax
   1c86e:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1c873:	8b 00                	mov    (%eax),%eax
   1c875:	83 ec 04             	sub    $0x4,%esp
   1c878:	51                   	push   %ecx
   1c879:	50                   	push   %eax
   1c87a:	ff 74 24 14          	pushl  0x14(%esp)
   1c87e:	e8 9f d9 ff ff       	call   1a222 <gotoxy>
   1c883:	83 c4 10             	add    $0x10,%esp
						break;
   1c886:	e9 3b 04 00 00       	jmp    1ccc6 <con_write+0x1288>
					// 如果c是'H'或'f',则第1个参数代表光标移到的行号,第2个参数代表光标移到的列号.
					case 'H': case 'f':							// CSI Pn H - 光标定位.
						if (par[0]) par[0]--;
   1c88b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c88f:	89 d0                	mov    %edx,%eax
   1c891:	c1 e0 03             	shl    $0x3,%eax
   1c894:	01 d0                	add    %edx,%eax
   1c896:	c1 e0 04             	shl    $0x4,%eax
   1c899:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c89e:	8b 00                	mov    (%eax),%eax
   1c8a0:	85 c0                	test   %eax,%eax
   1c8a2:	74 2d                	je     1c8d1 <con_write+0xe93>
   1c8a4:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c8a8:	89 d0                	mov    %edx,%eax
   1c8aa:	c1 e0 03             	shl    $0x3,%eax
   1c8ad:	01 d0                	add    %edx,%eax
   1c8af:	c1 e0 04             	shl    $0x4,%eax
   1c8b2:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c8b7:	8b 00                	mov    (%eax),%eax
   1c8b9:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1c8bc:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c8c0:	89 d0                	mov    %edx,%eax
   1c8c2:	c1 e0 03             	shl    $0x3,%eax
   1c8c5:	01 d0                	add    %edx,%eax
   1c8c7:	c1 e0 04             	shl    $0x4,%eax
   1c8ca:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c8cf:	89 08                	mov    %ecx,(%eax)
						if (par[1]) par[1]--;
   1c8d1:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c8d5:	89 d0                	mov    %edx,%eax
   1c8d7:	c1 e0 03             	shl    $0x3,%eax
   1c8da:	01 d0                	add    %edx,%eax
   1c8dc:	c1 e0 04             	shl    $0x4,%eax
   1c8df:	05 9c ee 03 00       	add    $0x3ee9c,%eax
   1c8e4:	8b 00                	mov    (%eax),%eax
   1c8e6:	85 c0                	test   %eax,%eax
   1c8e8:	74 2d                	je     1c917 <con_write+0xed9>
   1c8ea:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c8ee:	89 d0                	mov    %edx,%eax
   1c8f0:	c1 e0 03             	shl    $0x3,%eax
   1c8f3:	01 d0                	add    %edx,%eax
   1c8f5:	c1 e0 04             	shl    $0x4,%eax
   1c8f8:	05 9c ee 03 00       	add    $0x3ee9c,%eax
   1c8fd:	8b 00                	mov    (%eax),%eax
   1c8ff:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1c902:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c906:	89 d0                	mov    %edx,%eax
   1c908:	c1 e0 03             	shl    $0x3,%eax
   1c90b:	01 d0                	add    %edx,%eax
   1c90d:	c1 e0 04             	shl    $0x4,%eax
   1c910:	05 9c ee 03 00       	add    $0x3ee9c,%eax
   1c915:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, par[1], par[0]);
   1c917:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c91b:	89 d0                	mov    %edx,%eax
   1c91d:	c1 e0 03             	shl    $0x3,%eax
   1c920:	01 d0                	add    %edx,%eax
   1c922:	c1 e0 04             	shl    $0x4,%eax
   1c925:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c92a:	8b 08                	mov    (%eax),%ecx
   1c92c:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c930:	89 d0                	mov    %edx,%eax
   1c932:	c1 e0 03             	shl    $0x3,%eax
   1c935:	01 d0                	add    %edx,%eax
   1c937:	c1 e0 04             	shl    $0x4,%eax
   1c93a:	05 9c ee 03 00       	add    $0x3ee9c,%eax
   1c93f:	8b 00                	mov    (%eax),%eax
   1c941:	83 ec 04             	sub    $0x4,%esp
   1c944:	51                   	push   %ecx
   1c945:	50                   	push   %eax
   1c946:	ff 74 24 14          	pushl  0x14(%esp)
   1c94a:	e8 d3 d8 ff ff       	call   1a222 <gotoxy>
   1c94f:	83 c4 10             	add    $0x10,%esp
						break;
   1c952:	e9 6f 03 00 00       	jmp    1ccc6 <con_write+0x1288>
					// 如果字符c是'J',则第1个参数代表以光标所处位置清屏的方式:
					// 序列: 'ESC [ Ps J'(Ps=0删除光标到屏幕底端;Ps=1删除屏幕开始到光标处;Ps=2整屏删除).
					case 'J':									// CSI Pn J - 屏幕擦除字符.
						csi_J(currcons, par[0]);
   1c957:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c95b:	89 d0                	mov    %edx,%eax
   1c95d:	c1 e0 03             	shl    $0x3,%eax
   1c960:	01 d0                	add    %edx,%eax
   1c962:	c1 e0 04             	shl    $0x4,%eax
   1c965:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c96a:	8b 00                	mov    (%eax),%eax
   1c96c:	83 ec 08             	sub    $0x8,%esp
   1c96f:	50                   	push   %eax
   1c970:	ff 74 24 14          	pushl  0x14(%esp)
   1c974:	e8 f8 e2 ff ff       	call   1ac71 <csi_J>
   1c979:	83 c4 10             	add    $0x10,%esp
						break;
   1c97c:	e9 45 03 00 00       	jmp    1ccc6 <con_write+0x1288>
					// 如果字符c是'K',则第1个参数代表以光标所在位置对行中字符进行删除处理的方式:
					// 序列: 'ESC [ Ps K'(Ps=0删除到行尾;Ps=1从开始删除;Ps=2整行都删除).
					case 'K':									// CSI Pn K - 行内擦除字符.
						csi_K(currcons,par[0]);
   1c981:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c985:	89 d0                	mov    %edx,%eax
   1c987:	c1 e0 03             	shl    $0x3,%eax
   1c98a:	01 d0                	add    %edx,%eax
   1c98c:	c1 e0 04             	shl    $0x4,%eax
   1c98f:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c994:	8b 00                	mov    (%eax),%eax
   1c996:	83 ec 08             	sub    $0x8,%esp
   1c999:	50                   	push   %eax
   1c99a:	ff 74 24 14          	pushl  0x14(%esp)
   1c99e:	e8 e4 e3 ff ff       	call   1ad87 <csi_K>
   1c9a3:	83 c4 10             	add    $0x10,%esp
						break;
   1c9a6:	e9 1b 03 00 00       	jmp    1ccc6 <con_write+0x1288>
					// 如果字符c是'L',表示在光标位置处插入n行(控制序列 'ESC [ Pn L')
					case 'L':									// CSI Pn L - 插入行.
						csi_L(currcons, par[0]);
   1c9ab:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c9af:	89 d0                	mov    %edx,%eax
   1c9b1:	c1 e0 03             	shl    $0x3,%eax
   1c9b4:	01 d0                	add    %edx,%eax
   1c9b6:	c1 e0 04             	shl    $0x4,%eax
   1c9b9:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c9be:	8b 00                	mov    (%eax),%eax
   1c9c0:	83 ec 08             	sub    $0x8,%esp
   1c9c3:	50                   	push   %eax
   1c9c4:	ff 74 24 14          	pushl  0x14(%esp)
   1c9c8:	e8 15 ef ff ff       	call   1b8e2 <csi_L>
   1c9cd:	83 c4 10             	add    $0x10,%esp
						break;
   1c9d0:	e9 f1 02 00 00       	jmp    1ccc6 <con_write+0x1288>
					// 如果字符c是'M',表示在光标位置处删除n行(控制序列 'ESC [ Pn M')
					case 'M':									// 删除行
						csi_M(currcons, par[0]);
   1c9d5:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c9d9:	89 d0                	mov    %edx,%eax
   1c9db:	c1 e0 03             	shl    $0x3,%eax
   1c9de:	01 d0                	add    %edx,%eax
   1c9e0:	c1 e0 04             	shl    $0x4,%eax
   1c9e3:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c9e8:	8b 00                	mov    (%eax),%eax
   1c9ea:	83 ec 08             	sub    $0x8,%esp
   1c9ed:	50                   	push   %eax
   1c9ee:	ff 74 24 14          	pushl  0x14(%esp)
   1c9f2:	e8 73 ef ff ff       	call   1b96a <csi_M>
   1c9f7:	83 c4 10             	add    $0x10,%esp
						break;
   1c9fa:	e9 c7 02 00 00       	jmp    1ccc6 <con_write+0x1288>
					// 如果字符c是'P',表示在光标位置处删除n个字符(控制序列 'ESC [ Pn P')
					case 'P':									// 删除字符.
						csi_P(currcons, par[0]);
   1c9ff:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ca03:	89 d0                	mov    %edx,%eax
   1ca05:	c1 e0 03             	shl    $0x3,%eax
   1ca08:	01 d0                	add    %edx,%eax
   1ca0a:	c1 e0 04             	shl    $0x4,%eax
   1ca0d:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1ca12:	8b 00                	mov    (%eax),%eax
   1ca14:	83 ec 08             	sub    $0x8,%esp
   1ca17:	50                   	push   %eax
   1ca18:	ff 74 24 14          	pushl  0x14(%esp)
   1ca1c:	e8 05 ef ff ff       	call   1b926 <csi_P>
   1ca21:	83 c4 10             	add    $0x10,%esp
						break;
   1ca24:	e9 9d 02 00 00       	jmp    1ccc6 <con_write+0x1288>
					// 如果字符c是'@',表示在光标位置处插入n个字符(控制序列 'ESC [ Pn @')
					case '@':									// 插入字符.
						csi_at(currcons, par[0]);
   1ca29:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ca2d:	89 d0                	mov    %edx,%eax
   1ca2f:	c1 e0 03             	shl    $0x3,%eax
   1ca32:	01 d0                	add    %edx,%eax
   1ca34:	c1 e0 04             	shl    $0x4,%eax
   1ca37:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1ca3c:	8b 00                	mov    (%eax),%eax
   1ca3e:	83 ec 08             	sub    $0x8,%esp
   1ca41:	50                   	push   %eax
   1ca42:	ff 74 24 14          	pushl  0x14(%esp)
   1ca46:	e8 53 ee ff ff       	call   1b89e <csi_at>
   1ca4b:	83 c4 10             	add    $0x10,%esp
						break;
   1ca4e:	e9 73 02 00 00       	jmp    1ccc6 <con_write+0x1288>
					// 如果字符c是'm',表示改变光标处字符的显示属性,比如加粗,加下划线,闪烁,反显等.
					// 转义序列: 'ESC [ Pn m'.n=0正常显示;1加粗;4加下划线;7反显;27正常显示等.
					case 'm':									// CSI Ps m - 设置显示字符属性.
						csi_m(currcons);
   1ca53:	83 ec 0c             	sub    $0xc,%esp
   1ca56:	ff 74 24 14          	pushl  0x14(%esp)
   1ca5a:	e8 71 e4 ff ff       	call   1aed0 <csi_m>
   1ca5f:	83 c4 10             	add    $0x10,%esp
						break;
   1ca62:	e9 5f 02 00 00       	jmp    1ccc6 <con_write+0x1288>
					// 如果字符c是'r',则表示两个参数设置滚屏的起始行号和终止行号.
					case 'r':									// CSI Pn r - 设置滚屏上下界.
						if (par[0]) par[0]--;
   1ca67:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ca6b:	89 d0                	mov    %edx,%eax
   1ca6d:	c1 e0 03             	shl    $0x3,%eax
   1ca70:	01 d0                	add    %edx,%eax
   1ca72:	c1 e0 04             	shl    $0x4,%eax
   1ca75:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1ca7a:	8b 00                	mov    (%eax),%eax
   1ca7c:	85 c0                	test   %eax,%eax
   1ca7e:	74 2d                	je     1caad <con_write+0x106f>
   1ca80:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ca84:	89 d0                	mov    %edx,%eax
   1ca86:	c1 e0 03             	shl    $0x3,%eax
   1ca89:	01 d0                	add    %edx,%eax
   1ca8b:	c1 e0 04             	shl    $0x4,%eax
   1ca8e:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1ca93:	8b 00                	mov    (%eax),%eax
   1ca95:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1ca98:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ca9c:	89 d0                	mov    %edx,%eax
   1ca9e:	c1 e0 03             	shl    $0x3,%eax
   1caa1:	01 d0                	add    %edx,%eax
   1caa3:	c1 e0 04             	shl    $0x4,%eax
   1caa6:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1caab:	89 08                	mov    %ecx,(%eax)
						if (!par[1]) par[1] = video_num_lines;
   1caad:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cab1:	89 d0                	mov    %edx,%eax
   1cab3:	c1 e0 03             	shl    $0x3,%eax
   1cab6:	01 d0                	add    %edx,%eax
   1cab8:	c1 e0 04             	shl    $0x4,%eax
   1cabb:	05 9c ee 03 00       	add    $0x3ee9c,%eax
   1cac0:	8b 00                	mov    (%eax),%eax
   1cac2:	85 c0                	test   %eax,%eax
   1cac4:	75 1b                	jne    1cae1 <con_write+0x10a3>
   1cac6:	8b 0d 44 ee 03 00    	mov    0x3ee44,%ecx
   1cacc:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cad0:	89 d0                	mov    %edx,%eax
   1cad2:	c1 e0 03             	shl    $0x3,%eax
   1cad5:	01 d0                	add    %edx,%eax
   1cad7:	c1 e0 04             	shl    $0x4,%eax
   1cada:	05 9c ee 03 00       	add    $0x3ee9c,%eax
   1cadf:	89 08                	mov    %ecx,(%eax)
						if (par[0] < par[1] &&
   1cae1:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cae5:	89 d0                	mov    %edx,%eax
   1cae7:	c1 e0 03             	shl    $0x3,%eax
   1caea:	01 d0                	add    %edx,%eax
   1caec:	c1 e0 04             	shl    $0x4,%eax
   1caef:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1caf4:	8b 08                	mov    (%eax),%ecx
   1caf6:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cafa:	89 d0                	mov    %edx,%eax
   1cafc:	c1 e0 03             	shl    $0x3,%eax
   1caff:	01 d0                	add    %edx,%eax
   1cb01:	c1 e0 04             	shl    $0x4,%eax
   1cb04:	05 9c ee 03 00       	add    $0x3ee9c,%eax
   1cb09:	8b 00                	mov    (%eax),%eax
   1cb0b:	39 c1                	cmp    %eax,%ecx
   1cb0d:	0f 83 b2 01 00 00    	jae    1ccc5 <con_write+0x1287>
						    par[1] <= video_num_lines) {
   1cb13:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cb17:	89 d0                	mov    %edx,%eax
   1cb19:	c1 e0 03             	shl    $0x3,%eax
   1cb1c:	01 d0                	add    %edx,%eax
   1cb1e:	c1 e0 04             	shl    $0x4,%eax
   1cb21:	05 9c ee 03 00       	add    $0x3ee9c,%eax
   1cb26:	8b 10                	mov    (%eax),%edx
   1cb28:	a1 44 ee 03 00       	mov    0x3ee44,%eax
						break;
					// 如果字符c是'r',则表示两个参数设置滚屏的起始行号和终止行号.
					case 'r':									// CSI Pn r - 设置滚屏上下界.
						if (par[0]) par[0]--;
						if (!par[1]) par[1] = video_num_lines;
						if (par[0] < par[1] &&
   1cb2d:	39 c2                	cmp    %eax,%edx
   1cb2f:	0f 87 90 01 00 00    	ja     1ccc5 <con_write+0x1287>
						    par[1] <= video_num_lines) {
							top = par[0];
   1cb35:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cb39:	89 d0                	mov    %edx,%eax
   1cb3b:	c1 e0 03             	shl    $0x3,%eax
   1cb3e:	01 d0                	add    %edx,%eax
   1cb40:	c1 e0 04             	shl    $0x4,%eax
   1cb43:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1cb48:	8b 08                	mov    (%eax),%ecx
   1cb4a:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cb4e:	89 d0                	mov    %edx,%eax
   1cb50:	c1 e0 03             	shl    $0x3,%eax
   1cb53:	01 d0                	add    %edx,%eax
   1cb55:	c1 e0 04             	shl    $0x4,%eax
   1cb58:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1cb5d:	89 08                	mov    %ecx,(%eax)
							bottom = par[1];
   1cb5f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cb63:	89 d0                	mov    %edx,%eax
   1cb65:	c1 e0 03             	shl    $0x3,%eax
   1cb68:	01 d0                	add    %edx,%eax
   1cb6a:	c1 e0 04             	shl    $0x4,%eax
   1cb6d:	05 9c ee 03 00       	add    $0x3ee9c,%eax
   1cb72:	8b 08                	mov    (%eax),%ecx
   1cb74:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cb78:	89 d0                	mov    %edx,%eax
   1cb7a:	c1 e0 03             	shl    $0x3,%eax
   1cb7d:	01 d0                	add    %edx,%eax
   1cb7f:	c1 e0 04             	shl    $0x4,%eax
   1cb82:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1cb87:	89 08                	mov    %ecx,(%eax)
						}
						break;
   1cb89:	e9 37 01 00 00       	jmp    1ccc5 <con_write+0x1287>
					// 如果字符c是's',则表示保存当前光标所在位置.
					case 's':									// CSI s - 保存光标位置.
						save_cur(currcons);
   1cb8e:	83 ec 0c             	sub    $0xc,%esp
   1cb91:	ff 74 24 14          	pushl  0x14(%esp)
   1cb95:	e8 14 ee ff ff       	call   1b9ae <save_cur>
   1cb9a:	83 c4 10             	add    $0x10,%esp
						break;
   1cb9d:	e9 24 01 00 00       	jmp    1ccc6 <con_write+0x1288>
					// 如果字符c是'u',则表示恢复光标到原保存的位置处.
					case 'u':									// CSI u - 恢复保存的光标位置.
						restore_cur(currcons);
   1cba2:	83 ec 0c             	sub    $0xc,%esp
   1cba5:	ff 74 24 14          	pushl  0x14(%esp)
   1cba9:	e8 56 ee ff ff       	call   1ba04 <restore_cur>
   1cbae:	83 c4 10             	add    $0x10,%esp
						break;
   1cbb1:	e9 10 01 00 00       	jmp    1ccc6 <con_write+0x1288>
					// 如果字符c是'l'或'b',则分别表示设置屏幕黑屏间隔时间和设置粗体字符显示.此时参数数组中par[1]和par[2]是特征值,它们分别必须par[1]=par[0]+13;
					// par[2]=par[0]+17.在这个条件下,如果c是字符'l',那么par[0]中是开始黑屏时延迟的分钟数;如果c是字符'b',那么par[0]中是设置的粗体字符属性值.
					case 'l': 									/* blank interval */
					case 'b': 									/* bold attribute */
						  if (!((npar >= 2) &&
   1cbb6:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cbba:	89 d0                	mov    %edx,%eax
   1cbbc:	c1 e0 03             	shl    $0x3,%eax
   1cbbf:	01 d0                	add    %edx,%eax
   1cbc1:	c1 e0 04             	shl    $0x4,%eax
   1cbc4:	05 94 ee 03 00       	add    $0x3ee94,%eax
   1cbc9:	8b 00                	mov    (%eax),%eax
   1cbcb:	83 f8 01             	cmp    $0x1,%eax
   1cbce:	0f 86 2f 02 00 00    	jbe    1ce03 <con_write+0x13c5>
						  ((par[1] - 13) == par[0]) &&
   1cbd4:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cbd8:	89 d0                	mov    %edx,%eax
   1cbda:	c1 e0 03             	shl    $0x3,%eax
   1cbdd:	01 d0                	add    %edx,%eax
   1cbdf:	c1 e0 04             	shl    $0x4,%eax
   1cbe2:	05 9c ee 03 00       	add    $0x3ee9c,%eax
   1cbe7:	8b 00                	mov    (%eax),%eax
   1cbe9:	8d 48 f3             	lea    -0xd(%eax),%ecx
   1cbec:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cbf0:	89 d0                	mov    %edx,%eax
   1cbf2:	c1 e0 03             	shl    $0x3,%eax
   1cbf5:	01 d0                	add    %edx,%eax
   1cbf7:	c1 e0 04             	shl    $0x4,%eax
   1cbfa:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1cbff:	8b 00                	mov    (%eax),%eax
						break;
					// 如果字符c是'l'或'b',则分别表示设置屏幕黑屏间隔时间和设置粗体字符显示.此时参数数组中par[1]和par[2]是特征值,它们分别必须par[1]=par[0]+13;
					// par[2]=par[0]+17.在这个条件下,如果c是字符'l',那么par[0]中是开始黑屏时延迟的分钟数;如果c是字符'b',那么par[0]中是设置的粗体字符属性值.
					case 'l': 									/* blank interval */
					case 'b': 									/* bold attribute */
						  if (!((npar >= 2) &&
   1cc01:	39 c1                	cmp    %eax,%ecx
   1cc03:	0f 85 fa 01 00 00    	jne    1ce03 <con_write+0x13c5>
						  ((par[1] - 13) == par[0]) &&
						  ((par[2] - 17) == par[0])))
   1cc09:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cc0d:	89 d0                	mov    %edx,%eax
   1cc0f:	c1 e0 03             	shl    $0x3,%eax
   1cc12:	01 d0                	add    %edx,%eax
   1cc14:	c1 e0 04             	shl    $0x4,%eax
   1cc17:	05 a0 ee 03 00       	add    $0x3eea0,%eax
   1cc1c:	8b 00                	mov    (%eax),%eax
   1cc1e:	8d 48 ef             	lea    -0x11(%eax),%ecx
   1cc21:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cc25:	89 d0                	mov    %edx,%eax
   1cc27:	c1 e0 03             	shl    $0x3,%eax
   1cc2a:	01 d0                	add    %edx,%eax
   1cc2c:	c1 e0 04             	shl    $0x4,%eax
   1cc2f:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1cc34:	8b 00                	mov    (%eax),%eax
						break;
					// 如果字符c是'l'或'b',则分别表示设置屏幕黑屏间隔时间和设置粗体字符显示.此时参数数组中par[1]和par[2]是特征值,它们分别必须par[1]=par[0]+13;
					// par[2]=par[0]+17.在这个条件下,如果c是字符'l',那么par[0]中是开始黑屏时延迟的分钟数;如果c是字符'b',那么par[0]中是设置的粗体字符属性值.
					case 'l': 									/* blank interval */
					case 'b': 									/* bold attribute */
						  if (!((npar >= 2) &&
   1cc36:	39 c1                	cmp    %eax,%ecx
   1cc38:	0f 85 c5 01 00 00    	jne    1ce03 <con_write+0x13c5>
						  ((par[1] - 13) == par[0]) &&
						  ((par[2] - 17) == par[0])))
						    break;
						if ((c == 'l') && (par[0] >= 0) && (par[0] <= 60))
   1cc3e:	80 7c 24 07 6c       	cmpb   $0x6c,0x7(%esp)
   1cc43:	75 44                	jne    1cc89 <con_write+0x124b>
   1cc45:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cc49:	89 d0                	mov    %edx,%eax
   1cc4b:	c1 e0 03             	shl    $0x3,%eax
   1cc4e:	01 d0                	add    %edx,%eax
   1cc50:	c1 e0 04             	shl    $0x4,%eax
   1cc53:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1cc58:	8b 00                	mov    (%eax),%eax
   1cc5a:	83 f8 3c             	cmp    $0x3c,%eax
   1cc5d:	77 2a                	ja     1cc89 <con_write+0x124b>
						{
						  blankinterval = HZ * 60 * par[0];
   1cc5f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cc63:	89 d0                	mov    %edx,%eax
   1cc65:	c1 e0 03             	shl    $0x3,%eax
   1cc68:	01 d0                	add    %edx,%eax
   1cc6a:	c1 e0 04             	shl    $0x4,%eax
   1cc6d:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1cc72:	8b 00                	mov    (%eax),%eax
   1cc74:	69 c0 70 17 00 00    	imul   $0x1770,%eax,%eax
   1cc7a:	a3 24 ee 03 00       	mov    %eax,0x3ee24
						  blankcount = blankinterval;
   1cc7f:	a1 24 ee 03 00       	mov    0x3ee24,%eax
   1cc84:	a3 28 ee 03 00       	mov    %eax,0x3ee28
						}
						if (c == 'b')
   1cc89:	80 7c 24 07 62       	cmpb   $0x62,0x7(%esp)
   1cc8e:	0f 85 6f 01 00 00    	jne    1ce03 <con_write+0x13c5>
						  vc_cons[currcons].vc_bold_attr = par[0];
   1cc94:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cc98:	89 d0                	mov    %edx,%eax
   1cc9a:	c1 e0 03             	shl    $0x3,%eax
   1cc9d:	01 d0                	add    %edx,%eax
   1cc9f:	c1 e0 04             	shl    $0x4,%eax
   1cca2:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1cca7:	8b 00                	mov    (%eax),%eax
   1cca9:	89 c1                	mov    %eax,%ecx
   1ccab:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ccaf:	89 d0                	mov    %edx,%eax
   1ccb1:	c1 e0 03             	shl    $0x3,%eax
   1ccb4:	01 d0                	add    %edx,%eax
   1ccb6:	c1 e0 04             	shl    $0x4,%eax
   1ccb9:	05 64 ee 03 00       	add    $0x3ee64,%eax
   1ccbe:	89 08                	mov    %ecx,(%eax)
   1ccc0:	e9 3e 01 00 00       	jmp    1ce03 <con_write+0x13c5>
						if (par[0] < par[1] &&
						    par[1] <= video_num_lines) {
							top = par[0];
							bottom = par[1];
						}
						break;
   1ccc5:	90                   	nop
						  blankcount = blankinterval;
						}
						if (c == 'b')
						  vc_cons[currcons].vc_bold_attr = par[0];
				}
				break;
   1ccc6:	e9 38 01 00 00       	jmp    1ce03 <con_write+0x13c5>
			// ESfunckey:表示接收到了键盘上功能键发出的一个序列,不用显示.于是恢复到正常状态ESnormal.
			// 状态ESfunckey表示接收到了键盘上功能键发出的一个序列,不用显示.于是恢复到正常状态ESnormal.
			case ESfunckey:									// 键盘功能键码.
				state = ESnormal;
   1cccb:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cccf:	89 d0                	mov    %edx,%eax
   1ccd1:	c1 e0 03             	shl    $0x3,%eax
   1ccd4:	01 d0                	add    %edx,%eax
   1ccd6:	c1 e0 04             	shl    $0x4,%eax
   1ccd9:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1ccde:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				break;
   1cce4:	e9 1a 01 00 00       	jmp    1ce03 <con_write+0x13c5>
			// ESsetterm:表示处于设备控制字符串序列状态(DCS).此时收到字符'S',则恢复初始的显示字符属性.若收到的字符是'L'或'l',则开启或关折行显示方式.
			// 状态ESsetterm表示处于设备控制字符串序列状态(DCS).此时若收到字符'S',则恢复初始的显示字符属性.若收到的字符是'L'或'l',则开启或关闭折行显示方式.
			case ESsetterm:  								/* Setterm functions. */
				state = ESnormal;
   1cce9:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cced:	89 d0                	mov    %edx,%eax
   1ccef:	c1 e0 03             	shl    $0x3,%eax
   1ccf2:	01 d0                	add    %edx,%eax
   1ccf4:	c1 e0 04             	shl    $0x4,%eax
   1ccf7:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1ccfc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				if (c == 'S') {
   1cd02:	80 7c 24 07 53       	cmpb   $0x53,0x7(%esp)
   1cd07:	0f 85 f6 00 00 00    	jne    1ce03 <con_write+0x13c5>
					def_attr = attr;
   1cd0d:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cd11:	89 d0                	mov    %edx,%eax
   1cd13:	c1 e0 03             	shl    $0x3,%eax
   1cd16:	01 d0                	add    %edx,%eax
   1cd18:	c1 e0 04             	shl    $0x4,%eax
   1cd1b:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1cd20:	0f b6 08             	movzbl (%eax),%ecx
   1cd23:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cd27:	89 d0                	mov    %edx,%eax
   1cd29:	c1 e0 03             	shl    $0x3,%eax
   1cd2c:	01 d0                	add    %edx,%eax
   1cd2e:	c1 e0 04             	shl    $0x4,%eax
   1cd31:	05 63 ee 03 00       	add    $0x3ee63,%eax
   1cd36:	88 08                	mov    %cl,(%eax)
					video_erase_char = (video_erase_char & 0x0ff) | (def_attr << 8);
   1cd38:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cd3c:	89 d0                	mov    %edx,%eax
   1cd3e:	c1 e0 03             	shl    $0x3,%eax
   1cd41:	01 d0                	add    %edx,%eax
   1cd43:	c1 e0 04             	shl    $0x4,%eax
   1cd46:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1cd4b:	0f b7 00             	movzwl (%eax),%eax
   1cd4e:	0f b6 c8             	movzbl %al,%ecx
   1cd51:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cd55:	89 d0                	mov    %edx,%eax
   1cd57:	c1 e0 03             	shl    $0x3,%eax
   1cd5a:	01 d0                	add    %edx,%eax
   1cd5c:	c1 e0 04             	shl    $0x4,%eax
   1cd5f:	05 63 ee 03 00       	add    $0x3ee63,%eax
   1cd64:	0f b6 00             	movzbl (%eax),%eax
   1cd67:	0f b6 c0             	movzbl %al,%eax
   1cd6a:	c1 e0 08             	shl    $0x8,%eax
   1cd6d:	09 c8                	or     %ecx,%eax
   1cd6f:	89 c1                	mov    %eax,%ecx
   1cd71:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cd75:	89 d0                	mov    %edx,%eax
   1cd77:	c1 e0 03             	shl    $0x3,%eax
   1cd7a:	01 d0                	add    %edx,%eax
   1cd7c:	c1 e0 04             	shl    $0x4,%eax
   1cd7f:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1cd84:	66 89 08             	mov    %cx,(%eax)
				} else if (c == 'L')
					; 										/*linewrap on*/
				else if (c == 'l')
					; 										/*linewrap off*/
				break;
   1cd87:	eb 7a                	jmp    1ce03 <con_write+0x13c5>
			// ESsetgraph:表示收到设置字符转移序列'ESC ('或'ESC )'.它们分别用于指定G0和G1所用的字符集.此时若收到字符'0',则选择图形字符集作为G0和G1,
			//            若收到的字符是'B',这选择普通ASCII字符集作为G0和G1的字符集.
			// 状态ESsetgraph表示收到设置字符集转移序列'ESC ('或'ESC )'.它们分别用于指定G0和G1所用的字符集.此时若收到字符'0',则选择图形字符集作为G0和G1,若收
			// 到的字符是'B',则选择普通ASCII字符集作为G0和G1的字符集.
			case ESsetgraph:								// 'CSI ( 0'或'CSI ( B' - 选择字符集
				state = ESnormal;
   1cd89:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cd8d:	89 d0                	mov    %edx,%eax
   1cd8f:	c1 e0 03             	shl    $0x3,%eax
   1cd92:	01 d0                	add    %edx,%eax
   1cd94:	c1 e0 04             	shl    $0x4,%eax
   1cd97:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1cd9c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				if (c == '0')
   1cda2:	80 7c 24 07 30       	cmpb   $0x30,0x7(%esp)
   1cda7:	75 1d                	jne    1cdc6 <con_write+0x1388>
					translate = GRAF_TRANS;
   1cda9:	8b 0d 40 e5 02 00    	mov    0x2e540,%ecx
   1cdaf:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cdb3:	89 d0                	mov    %edx,%eax
   1cdb5:	c1 e0 03             	shl    $0x3,%eax
   1cdb8:	01 d0                	add    %edx,%eax
   1cdba:	c1 e0 04             	shl    $0x4,%eax
   1cdbd:	05 ec ee 03 00       	add    $0x3eeec,%eax
   1cdc2:	89 08                	mov    %ecx,(%eax)
   1cdc4:	eb 3d                	jmp    1ce03 <con_write+0x13c5>
				else if (c == 'B')
   1cdc6:	80 7c 24 07 42       	cmpb   $0x42,0x7(%esp)
   1cdcb:	75 36                	jne    1ce03 <con_write+0x13c5>
					translate = NORM_TRANS;
   1cdcd:	8b 0d 3c e5 02 00    	mov    0x2e53c,%ecx
   1cdd3:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cdd7:	89 d0                	mov    %edx,%eax
   1cdd9:	c1 e0 03             	shl    $0x3,%eax
   1cddc:	01 d0                	add    %edx,%eax
   1cdde:	c1 e0 04             	shl    $0x4,%eax
   1cde1:	05 ec ee 03 00       	add    $0x3eeec,%eax
   1cde6:	89 08                	mov    %ecx,(%eax)
				break;
   1cde8:	eb 19                	jmp    1ce03 <con_write+0x13c5>
			default:
				state = ESnormal;
   1cdea:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cdee:	89 d0                	mov    %edx,%eax
   1cdf0:	c1 e0 03             	shl    $0x3,%eax
   1cdf3:	01 d0                	add    %edx,%eax
   1cdf5:	c1 e0 04             	shl    $0x4,%eax
   1cdf8:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1cdfd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	currcons = tty - tty_table;
	if ((currcons >= MAX_CONSOLES) || (currcons < 0))
		panic("con_write: illegal tty");

	nr = CHARS(tty->write_q);										// 取写队列中字符数,在tty.h文件中
	while (nr--) {
   1ce03:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1ce07:	8d 50 ff             	lea    -0x1(%eax),%edx
   1ce0a:	89 54 24 0c          	mov    %edx,0xc(%esp)
   1ce0e:	85 c0                	test   %eax,%eax
   1ce10:	0f 85 82 ec ff ff    	jne    1ba98 <con_write+0x5a>
   1ce16:	eb 01                	jmp    1ce19 <con_write+0x13db>
		if (tty->stopped)
			break;
   1ce18:	90                   	nop
				break;
			default:
				state = ESnormal;
        }
    }
	set_cursor(currcons);									// 最后根据上面设置的光标位置,设置显示控制器中光标位置.
   1ce19:	83 ec 0c             	sub    $0xc,%esp
   1ce1c:	ff 74 24 14          	pushl  0x14(%esp)
   1ce20:	e8 c0 e6 ff ff       	call   1b4e5 <set_cursor>
   1ce25:	83 c4 10             	add    $0x10,%esp
}
   1ce28:	90                   	nop
   1ce29:	83 c4 18             	add    $0x18,%esp
   1ce2c:	5b                   	pop    %ebx
   1ce2d:	c3                   	ret    

0001ce2e <con_init>:
 *
 * 这个子程序初始化控制台中断,其他什么都不做.如果你想让屏幕干净的话,就使用适当的转义字符序列调用tty_write()函数.
 * 读取setup.s程序保存的信息,用以确定当前显示器类型,并且设置所有相关参数.
 */
void con_init(void)
{
   1ce2e:	57                   	push   %edi
   1ce2f:	56                   	push   %esi
   1ce30:	53                   	push   %ebx
   1ce31:	83 ec 20             	sub    $0x20,%esp
	register unsigned char a;
	char *display_desc = "????";
   1ce34:	c7 44 24 1c 44 51 02 	movl   $0x25144,0x1c(%esp)
   1ce3b:	00 
	char *display_ptr;
	int currcons = 0;								// 当前虚拟控制台号.
   1ce3c:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
   1ce43:	00 
	long base, term;
	long video_memory;

	// 初始化屏幕的列数
	video_num_columns = ORIG_VIDEO_COLS;
   1ce44:	b8 06 00 09 00       	mov    $0x90006,%eax
   1ce49:	0f b7 00             	movzwl (%eax),%eax
   1ce4c:	66 c1 e8 08          	shr    $0x8,%ax
   1ce50:	0f b7 c0             	movzwl %ax,%eax
   1ce53:	a3 34 ee 03 00       	mov    %eax,0x3ee34
	// 屏幕每行的字节数等于屏幕列数乘以2，因为一个显示字节需要一个控制字节
	video_size_row = video_num_columns * 2;
   1ce58:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1ce5d:	01 c0                	add    %eax,%eax
   1ce5f:	a3 40 ee 03 00       	mov    %eax,0x3ee40
	// 初始化屏幕的行数
	video_num_lines = ORIG_VIDEO_LINES;
   1ce64:	b8 0e 00 09 00       	mov    $0x9000e,%eax
   1ce69:	0f b7 00             	movzwl (%eax),%eax
   1ce6c:	0f b7 c0             	movzwl %ax,%eax
   1ce6f:	0f b6 c0             	movzbl %al,%eax
   1ce72:	a3 44 ee 03 00       	mov    %eax,0x3ee44
	// 初始化显示页数
	video_page = ORIG_VIDEO_PAGE;
   1ce77:	b8 04 00 09 00       	mov    $0x90004,%eax
   1ce7c:	0f b7 00             	movzwl (%eax),%eax
   1ce7f:	a2 48 ee 03 00       	mov    %al,0x3ee48
	// 设置此时第0个(currcons)显示终端的擦除字符属性及字符
	video_erase_char = 0x0720;
   1ce84:	8b 54 24 14          	mov    0x14(%esp),%edx
   1ce88:	89 d0                	mov    %edx,%eax
   1ce8a:	c1 e0 03             	shl    $0x3,%eax
   1ce8d:	01 d0                	add    %edx,%eax
   1ce8f:	c1 e0 04             	shl    $0x4,%eax
   1ce92:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1ce97:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// 初始化黑屏时间计数
	blankcount = blankinterval;
   1ce9c:	a1 24 ee 03 00       	mov    0x3ee24,%eax
   1cea1:	a3 28 ee 03 00       	mov    %eax,0x3ee28

	// 然后根据显示模式是单色还是彩色,分别设置所使用的显示内存起始位置以及显示寄存器索引端口号和显示寄存器数据端口号.如果获得的BIOS显示方式等于7,
	// 则表示是单色显示卡.
	if (ORIG_VIDEO_MODE == 7)					/* Is this a monochrome display? */
   1cea6:	b8 06 00 09 00       	mov    $0x90006,%eax
   1ceab:	0f b7 00             	movzwl (%eax),%eax
   1ceae:	0f b7 c0             	movzwl %ax,%eax
   1ceb1:	0f b6 c0             	movzbl %al,%eax
   1ceb4:	83 f8 07             	cmp    $0x7,%eax
   1ceb7:	75 68                	jne    1cf21 <con_init+0xf3>
	{
		video_mem_base = 0xb0000;				// 设置单显映像内存起始地址.
   1ceb9:	c7 05 38 ee 03 00 00 	movl   $0xb0000,0x3ee38
   1cec0:	00 0b 00 
		video_port_reg = 0x3b4;					// 设置单显索引寄存器端口.
   1cec3:	66 c7 05 4a ee 03 00 	movw   $0x3b4,0x3ee4a
   1ceca:	b4 03 
		video_port_val = 0x3b5;					// 设置单显数据寄存器端口.
   1cecc:	66 c7 05 4c ee 03 00 	movw   $0x3b5,0x3ee4c
   1ced3:	b5 03 
		// 0x10,则说明是EGA卡.因此初始显示类型为EGA单色.虽然EGA卡上有较多显示内存,但在单色方式下最多只能利用地址范围在0xb0000~xb8000之间的显示内存.
		// 然后置显示器描述字符串为'EGAm'.
		// 并会在系统初始化期间显示器描述符字符串将显示在屏幕的右上角.
		// 注意,这里使用了bx在调用中断int 0x10前后是否被改变的方法来判断卡的类型.若BL在中断调用后值被改变,表示显示卡支持ah=12h功能调用,是EGA或后推
		// 出来的VGA等类型显示卡.若中断调用返回值末变,表示显示卡不支持这个功能,则说明是一般单色显示卡.
		if ((ORIG_VIDEO_EGA_BX & 0xff) != 0x10)
   1ced5:	b8 0a 00 09 00       	mov    $0x9000a,%eax
   1ceda:	0f b7 00             	movzwl (%eax),%eax
   1cedd:	0f b7 c0             	movzwl %ax,%eax
   1cee0:	0f b6 c0             	movzbl %al,%eax
   1cee3:	83 f8 10             	cmp    $0x10,%eax
   1cee6:	74 1e                	je     1cf06 <con_init+0xd8>
		{
			video_type = VIDEO_TYPE_EGAM;		// 设置显示类型(EGA单色).
   1cee8:	c6 05 30 ee 03 00 20 	movb   $0x20,0x3ee30
			video_mem_term = 0xb8000;			// 设置显示内存末端地址.
   1ceef:	c7 05 3c ee 03 00 00 	movl   $0xb8000,0x3ee3c
   1cef6:	80 0b 00 
			display_desc = "EGAm";				// 设置显示描述字符串.
   1cef9:	c7 44 24 1c 49 51 02 	movl   $0x25149,0x1c(%esp)
   1cf00:	00 
   1cf01:	e9 88 00 00 00       	jmp    1cf8e <con_init+0x160>
		}
		// 如果BX寄存器的值等于0x10,则说明是单色显示卡MDA,仅有8KB显示内存.
		else
		{
			video_type = VIDEO_TYPE_MDA;		// 设置显示类型(MDA单色).
   1cf06:	c6 05 30 ee 03 00 10 	movb   $0x10,0x3ee30
			video_mem_term = 0xb2000;			// 设置显示内存末端地址.
   1cf0d:	c7 05 3c ee 03 00 00 	movl   $0xb2000,0x3ee3c
   1cf14:	20 0b 00 
			display_desc = "*MDA";				// 设置显示描述字符串.
   1cf17:	c7 44 24 1c 4e 51 02 	movl   $0x2514e,0x1c(%esp)
   1cf1e:	00 
   1cf1f:	eb 6d                	jmp    1cf8e <con_init+0x160>
		}
	}
	// 如果显示方式不为7,说明是彩色显示卡.此时文本方式下所用显示内存起始地址为0xb8000;显示控制索引寄存器端口地址为0x3d4;数据寄存器端口地址为0x3d5.
	else										/* If not, it is color. */
	{
		can_do_colour = 1;						// 设置彩色显示标志.
   1cf21:	c7 05 50 ee 03 00 01 	movl   $0x1,0x3ee50
   1cf28:	00 00 00 
		video_mem_base = 0xb8000;				// 显示内存起始地址.
   1cf2b:	c7 05 38 ee 03 00 00 	movl   $0xb8000,0x3ee38
   1cf32:	80 0b 00 
		video_port_reg	= 0x3d4;				// 设置彩色显示索引寄存器端口.
   1cf35:	66 c7 05 4a ee 03 00 	movw   $0x3d4,0x3ee4a
   1cf3c:	d4 03 
		video_port_val	= 0x3d5;				// 设置彩色显示数据寄存器端口.
   1cf3e:	66 c7 05 4c ee 03 00 	movw   $0x3d5,0x3ee4c
   1cf45:	d5 03 
		// 再判断显示卡类别.如果BX不等于0x10,则说明是EGA显示卡,此时共有32KB显示内存可用(0xb8000~0xc0000).否则说明是CGA显示卡,只能使用8KB显示内存(
		// 0xb8000~0xba000).
		if ((ORIG_VIDEO_EGA_BX & 0xff) != 0x10)
   1cf47:	b8 0a 00 09 00       	mov    $0x9000a,%eax
   1cf4c:	0f b7 00             	movzwl (%eax),%eax
   1cf4f:	0f b7 c0             	movzwl %ax,%eax
   1cf52:	0f b6 c0             	movzbl %al,%eax
   1cf55:	83 f8 10             	cmp    $0x10,%eax
   1cf58:	74 1b                	je     1cf75 <con_init+0x147>
		{
			video_type = VIDEO_TYPE_EGAC;		// 设置显示类型(EGA彩色).
   1cf5a:	c6 05 30 ee 03 00 21 	movb   $0x21,0x3ee30
			video_mem_term = 0xc0000;			// 设置显示内存末端地址.
   1cf61:	c7 05 3c ee 03 00 00 	movl   $0xc0000,0x3ee3c
   1cf68:	00 0c 00 
			display_desc = "EGAc";				// 设置显示描述字符串.
   1cf6b:	c7 44 24 1c 53 51 02 	movl   $0x25153,0x1c(%esp)
   1cf72:	00 
   1cf73:	eb 19                	jmp    1cf8e <con_init+0x160>
		}
		else
		{
			video_type = VIDEO_TYPE_CGA;		// 设置显示类型(CGA).
   1cf75:	c6 05 30 ee 03 00 11 	movb   $0x11,0x3ee30
			video_mem_term = 0xba000;			// 设置显示内存末端地址.
   1cf7c:	c7 05 3c ee 03 00 00 	movl   $0xba000,0x3ee3c
   1cf83:	a0 0b 00 
			display_desc = "*CGA";				// 设置显示描述字符串.
   1cf86:	c7 44 24 1c 58 51 02 	movl   $0x25158,0x1c(%esp)
   1cf8d:	00 
	// 现在来计算当前显示卡内存上可以开设的虚拟控制台数量.硬件允许的虚拟控制台数量等于总显示内存量video_memory除以每个虚拟控制台占用的
	// 字节数.每个虚拟控制台占用的显示内存数等于屏幕显示数video_num_lines乘上每行字符占有的字节数video_size_row.
	// 如果硬件允许开设的虚拟控制台数量大于系统既定的数量MAX_CONSOLES,就把虚拟控制台数量设置为MAX_CONSOLES.若这样计算出的虚拟控制台
	// 数量为0,则设置为1.
	// 最后用显示内存数除以判断出的虚拟控制台数即得到每个虚拟控制台占用显示内存字节数.
	video_memory = video_mem_term - video_mem_base;
   1cf8e:	8b 15 3c ee 03 00    	mov    0x3ee3c,%edx
   1cf94:	a1 38 ee 03 00       	mov    0x3ee38,%eax
   1cf99:	29 c2                	sub    %eax,%edx
   1cf9b:	89 d0                	mov    %edx,%eax
   1cf9d:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 根据实际的显示内存的大小计算显示控制终端的实际数量
	NR_CONSOLES = video_memory / (video_num_lines * video_size_row);
   1cfa1:	8b 44 24 08          	mov    0x8(%esp),%eax
   1cfa5:	8b 0d 44 ee 03 00    	mov    0x3ee44,%ecx
   1cfab:	8b 15 40 ee 03 00    	mov    0x3ee40,%edx
   1cfb1:	89 d6                	mov    %edx,%esi
   1cfb3:	0f af f1             	imul   %ecx,%esi
   1cfb6:	ba 00 00 00 00       	mov    $0x0,%edx
   1cfbb:	f7 f6                	div    %esi
   1cfbd:	a3 20 ee 03 00       	mov    %eax,0x3ee20
	// 显示终端的最大数量是MAX_CONSOLES,设置在tty.h头文件中
	if (NR_CONSOLES > MAX_CONSOLES)
   1cfc2:	a1 20 ee 03 00       	mov    0x3ee20,%eax
   1cfc7:	83 f8 08             	cmp    $0x8,%eax
   1cfca:	7e 0a                	jle    1cfd6 <con_init+0x1a8>
		NR_CONSOLES = MAX_CONSOLES;
   1cfcc:	c7 05 20 ee 03 00 08 	movl   $0x8,0x3ee20
   1cfd3:	00 00 00 
	// 如果计算出来的显示终端数量为0，则将显示终端数量设置为1
	if (!NR_CONSOLES)
   1cfd6:	a1 20 ee 03 00       	mov    0x3ee20,%eax
   1cfdb:	85 c0                	test   %eax,%eax
   1cfdd:	75 0a                	jne    1cfe9 <con_init+0x1bb>
		NR_CONSOLES = 1;
   1cfdf:	c7 05 20 ee 03 00 01 	movl   $0x1,0x3ee20
   1cfe6:	00 00 00 
	video_memory /= NR_CONSOLES;				// 每个虚拟控制台占用显示内存字节数.
   1cfe9:	8b 3d 20 ee 03 00    	mov    0x3ee20,%edi
   1cfef:	8b 44 24 08          	mov    0x8(%esp),%eax
   1cff3:	99                   	cltd   
   1cff4:	f7 ff                	idiv   %edi
   1cff6:	89 44 24 08          	mov    %eax,0x8(%esp)

	/* Let the user known what kind of display driver we are using */

	// 然后我们在屏幕的右上角显示描述字符串.采用的方法是直接将字符串写到显示内存的相应位置处.首先将显示指针display_ptr指到屏幕第1行右端差
	// 4个字符处(每个字符需2个字节,因此减8),然后循环复制字符串的字符,并且每复制1个字符都空开1个属性字节.
	display_ptr = ((char *)video_mem_base) + video_size_row - 8;
   1cffa:	8b 15 40 ee 03 00    	mov    0x3ee40,%edx
   1d000:	a1 38 ee 03 00       	mov    0x3ee38,%eax
   1d005:	01 d0                	add    %edx,%eax
   1d007:	83 e8 08             	sub    $0x8,%eax
   1d00a:	89 44 24 18          	mov    %eax,0x18(%esp)
	while (*display_desc)
   1d00e:	eb 20                	jmp    1d030 <con_init+0x202>
	{
		*display_ptr++ = *display_desc++;
   1d010:	8b 44 24 18          	mov    0x18(%esp),%eax
   1d014:	8d 50 01             	lea    0x1(%eax),%edx
   1d017:	89 54 24 18          	mov    %edx,0x18(%esp)
   1d01b:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1d01f:	8d 4a 01             	lea    0x1(%edx),%ecx
   1d022:	89 4c 24 1c          	mov    %ecx,0x1c(%esp)
   1d026:	0f b6 12             	movzbl (%edx),%edx
   1d029:	88 10                	mov    %dl,(%eax)
		display_ptr++;
   1d02b:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
	/* Let the user known what kind of display driver we are using */

	// 然后我们在屏幕的右上角显示描述字符串.采用的方法是直接将字符串写到显示内存的相应位置处.首先将显示指针display_ptr指到屏幕第1行右端差
	// 4个字符处(每个字符需2个字节,因此减8),然后循环复制字符串的字符,并且每复制1个字符都空开1个属性字节.
	display_ptr = ((char *)video_mem_base) + video_size_row - 8;
	while (*display_desc)
   1d030:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1d034:	0f b6 00             	movzbl (%eax),%eax
   1d037:	84 c0                	test   %al,%al
   1d039:	75 d5                	jne    1d010 <con_init+0x1e2>
	/* 初始化用于滚屏的变量(主要用于EGA/VGA) */

	// 注意,此时当前虚拟控制台号curcons已经被初始化0.因此下面实际上是初始化0号虚拟控制台的结构vc_cons[0]中的所有字段值.下面首先设置0号控制台
	// 的默认滚屏开始位置video_mem_start和默认滚屏末行内存位置,实际上它们也就是0号控制台占用的部分显示内存区域.然后初始化设置0号虚拟控制台的
	// 其它属性和标志值.
	base = origin = video_mem_start = video_mem_base;						// 默认滚屏开始内存位置.
   1d03b:	8b 0d 38 ee 03 00    	mov    0x3ee38,%ecx
   1d041:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d045:	89 d0                	mov    %edx,%eax
   1d047:	c1 e0 03             	shl    $0x3,%eax
   1d04a:	01 d0                	add    %edx,%eax
   1d04c:	c1 e0 04             	shl    $0x4,%eax
   1d04f:	05 d8 ee 03 00       	add    $0x3eed8,%eax
   1d054:	89 08                	mov    %ecx,(%eax)
   1d056:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d05a:	89 d0                	mov    %edx,%eax
   1d05c:	c1 e0 03             	shl    $0x3,%eax
   1d05f:	01 d0                	add    %edx,%eax
   1d061:	c1 e0 04             	shl    $0x4,%eax
   1d064:	05 d8 ee 03 00       	add    $0x3eed8,%eax
   1d069:	8b 08                	mov    (%eax),%ecx
   1d06b:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d06f:	89 d0                	mov    %edx,%eax
   1d071:	c1 e0 03             	shl    $0x3,%eax
   1d074:	01 d0                	add    %edx,%eax
   1d076:	c1 e0 04             	shl    $0x4,%eax
   1d079:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1d07e:	89 08                	mov    %ecx,(%eax)
   1d080:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d084:	89 d0                	mov    %edx,%eax
   1d086:	c1 e0 03             	shl    $0x3,%eax
   1d089:	01 d0                	add    %edx,%eax
   1d08b:	c1 e0 04             	shl    $0x4,%eax
   1d08e:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1d093:	8b 00                	mov    (%eax),%eax
   1d095:	89 44 24 10          	mov    %eax,0x10(%esp)
	term = video_mem_end = base + video_memory;								// 0号屏幕内存末端位置.
   1d099:	8b 54 24 10          	mov    0x10(%esp),%edx
   1d09d:	8b 44 24 08          	mov    0x8(%esp),%eax
   1d0a1:	01 d0                	add    %edx,%eax
   1d0a3:	89 c1                	mov    %eax,%ecx
   1d0a5:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d0a9:	89 d0                	mov    %edx,%eax
   1d0ab:	c1 e0 03             	shl    $0x3,%eax
   1d0ae:	01 d0                	add    %edx,%eax
   1d0b0:	c1 e0 04             	shl    $0x4,%eax
   1d0b3:	05 dc ee 03 00       	add    $0x3eedc,%eax
   1d0b8:	89 08                	mov    %ecx,(%eax)
   1d0ba:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d0be:	89 d0                	mov    %edx,%eax
   1d0c0:	c1 e0 03             	shl    $0x3,%eax
   1d0c3:	01 d0                	add    %edx,%eax
   1d0c5:	c1 e0 04             	shl    $0x4,%eax
   1d0c8:	05 dc ee 03 00       	add    $0x3eedc,%eax
   1d0cd:	8b 00                	mov    (%eax),%eax
   1d0cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
	scr_end	= video_mem_start + video_num_lines * video_size_row;			// 滚屏末端位置.
   1d0d3:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d0d7:	89 d0                	mov    %edx,%eax
   1d0d9:	c1 e0 03             	shl    $0x3,%eax
   1d0dc:	01 d0                	add    %edx,%eax
   1d0de:	c1 e0 04             	shl    $0x4,%eax
   1d0e1:	05 d8 ee 03 00       	add    $0x3eed8,%eax
   1d0e6:	8b 10                	mov    (%eax),%edx
   1d0e8:	8b 0d 44 ee 03 00    	mov    0x3ee44,%ecx
   1d0ee:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1d0f3:	0f af c1             	imul   %ecx,%eax
   1d0f6:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1d0f9:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d0fd:	89 d0                	mov    %edx,%eax
   1d0ff:	c1 e0 03             	shl    $0x3,%eax
   1d102:	01 d0                	add    %edx,%eax
   1d104:	c1 e0 04             	shl    $0x4,%eax
   1d107:	05 7c ee 03 00       	add    $0x3ee7c,%eax
   1d10c:	89 08                	mov    %ecx,(%eax)
	top	= 0;																// 初始设置滚动时顶行行号.
   1d10e:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d112:	89 d0                	mov    %edx,%eax
   1d114:	c1 e0 03             	shl    $0x3,%eax
   1d117:	01 d0                	add    %edx,%eax
   1d119:	c1 e0 04             	shl    $0x4,%eax
   1d11c:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1d121:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	bottom	= video_num_lines;												// 初始设置滚动时底行行号.
   1d127:	8b 0d 44 ee 03 00    	mov    0x3ee44,%ecx
   1d12d:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d131:	89 d0                	mov    %edx,%eax
   1d133:	c1 e0 03             	shl    $0x3,%eax
   1d136:	01 d0                	add    %edx,%eax
   1d138:	c1 e0 04             	shl    $0x4,%eax
   1d13b:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1d140:	89 08                	mov    %ecx,(%eax)
	attr = 0x07;															// 初始设置显示字符属性(黑底白字).
   1d142:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d146:	89 d0                	mov    %edx,%eax
   1d148:	c1 e0 03             	shl    $0x3,%eax
   1d14b:	01 d0                	add    %edx,%eax
   1d14d:	c1 e0 04             	shl    $0x4,%eax
   1d150:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1d155:	c6 00 07             	movb   $0x7,(%eax)
	def_attr = 0x07;														// 设置默认显示字符属性.
   1d158:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d15c:	89 d0                	mov    %edx,%eax
   1d15e:	c1 e0 03             	shl    $0x3,%eax
   1d161:	01 d0                	add    %edx,%eax
   1d163:	c1 e0 04             	shl    $0x4,%eax
   1d166:	05 63 ee 03 00       	add    $0x3ee63,%eax
   1d16b:	c6 00 07             	movb   $0x7,(%eax)
	restate = state = ESnormal;												// 初始化转义序列操作的前和下一状态.
   1d16e:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d172:	89 d0                	mov    %edx,%eax
   1d174:	c1 e0 03             	shl    $0x3,%eax
   1d177:	01 d0                	add    %edx,%eax
   1d179:	c1 e0 04             	shl    $0x4,%eax
   1d17c:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1d181:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   1d187:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d18b:	89 d0                	mov    %edx,%eax
   1d18d:	c1 e0 03             	shl    $0x3,%eax
   1d190:	01 d0                	add    %edx,%eax
   1d192:	c1 e0 04             	shl    $0x4,%eax
   1d195:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1d19a:	8b 08                	mov    (%eax),%ecx
   1d19c:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d1a0:	89 d0                	mov    %edx,%eax
   1d1a2:	c1 e0 03             	shl    $0x3,%eax
   1d1a5:	01 d0                	add    %edx,%eax
   1d1a7:	c1 e0 04             	shl    $0x4,%eax
   1d1aa:	05 70 ee 03 00       	add    $0x3ee70,%eax
   1d1af:	89 08                	mov    %ecx,(%eax)
	checkin = 0;
   1d1b1:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d1b5:	89 d0                	mov    %edx,%eax
   1d1b7:	c1 e0 03             	shl    $0x3,%eax
   1d1ba:	01 d0                	add    %edx,%eax
   1d1bc:	c1 e0 04             	shl    $0x4,%eax
   1d1bf:	05 74 ee 03 00       	add    $0x3ee74,%eax
   1d1c4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	ques = 0;																// 收到问号字符标志.
   1d1ca:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d1ce:	89 d0                	mov    %edx,%eax
   1d1d0:	c1 e0 03             	shl    $0x3,%eax
   1d1d3:	01 d0                	add    %edx,%eax
   1d1d5:	c1 e0 04             	shl    $0x4,%eax
   1d1d8:	05 68 ee 03 00       	add    $0x3ee68,%eax
   1d1dd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	iscolor = 0;															// 彩色显示标志.
   1d1e3:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d1e7:	89 d0                	mov    %edx,%eax
   1d1e9:	c1 e0 03             	shl    $0x3,%eax
   1d1ec:	01 d0                	add    %edx,%eax
   1d1ee:	c1 e0 04             	shl    $0x4,%eax
   1d1f1:	05 e8 ee 03 00       	add    $0x3eee8,%eax
   1d1f6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	translate = NORM_TRANS;													// 使用的字符集(普通ASCII码表).
   1d1fc:	8b 0d 3c e5 02 00    	mov    0x2e53c,%ecx
   1d202:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d206:	89 d0                	mov    %edx,%eax
   1d208:	c1 e0 03             	shl    $0x3,%eax
   1d20b:	01 d0                	add    %edx,%eax
   1d20d:	c1 e0 04             	shl    $0x4,%eax
   1d210:	05 ec ee 03 00       	add    $0x3eeec,%eax
   1d215:	89 08                	mov    %ecx,(%eax)
	vc_cons[0].vc_bold_attr = -1;											// 粗体字符属性标志(-1表示不用).
   1d217:	c7 05 64 ee 03 00 ff 	movl   $0xffffffff,0x3ee64
   1d21e:	ff ff ff 

	// 在设置了0号控制台当前光标所有位置和光标对应的内存位置pos后,循环设置其余的几个虚拟控制台结构的参数值.除了各自占用的显示内存开始和结束位置不同,
	// 它们的初始值基本上都与0号控制台相同.
	gotoxy(currcons, ORIG_X, ORIG_Y);
   1d221:	b8 01 00 09 00       	mov    $0x90001,%eax
   1d226:	0f b6 00             	movzbl (%eax),%eax
   1d229:	0f b6 d0             	movzbl %al,%edx
   1d22c:	b8 00 00 09 00       	mov    $0x90000,%eax
   1d231:	0f b6 00             	movzbl (%eax),%eax
   1d234:	0f b6 c0             	movzbl %al,%eax
   1d237:	52                   	push   %edx
   1d238:	50                   	push   %eax
   1d239:	ff 74 24 1c          	pushl  0x1c(%esp)
   1d23d:	e8 e0 cf ff ff       	call   1a222 <gotoxy>
   1d242:	83 c4 0c             	add    $0xc,%esp
  	for (currcons = 1; currcons < NR_CONSOLES; currcons++) {
   1d245:	c7 44 24 14 01 00 00 	movl   $0x1,0x14(%esp)
   1d24c:	00 
   1d24d:	e9 e3 00 00 00       	jmp    1d335 <con_init+0x507>
		vc_cons[currcons] = vc_cons[0];         							// 复制0号结构的参数.
   1d252:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d256:	89 d0                	mov    %edx,%eax
   1d258:	c1 e0 03             	shl    $0x3,%eax
   1d25b:	01 d0                	add    %edx,%eax
   1d25d:	c1 e0 04             	shl    $0x4,%eax
   1d260:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1d265:	89 c2                	mov    %eax,%edx
   1d267:	bb 60 ee 03 00       	mov    $0x3ee60,%ebx
   1d26c:	b8 24 00 00 00       	mov    $0x24,%eax
   1d271:	89 d7                	mov    %edx,%edi
   1d273:	89 de                	mov    %ebx,%esi
   1d275:	89 c1                	mov    %eax,%ecx
   1d277:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		origin = video_mem_start = (base += video_memory);
   1d279:	8b 44 24 08          	mov    0x8(%esp),%eax
   1d27d:	01 44 24 10          	add    %eax,0x10(%esp)
   1d281:	8b 4c 24 10          	mov    0x10(%esp),%ecx
   1d285:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d289:	89 d0                	mov    %edx,%eax
   1d28b:	c1 e0 03             	shl    $0x3,%eax
   1d28e:	01 d0                	add    %edx,%eax
   1d290:	c1 e0 04             	shl    $0x4,%eax
   1d293:	05 d8 ee 03 00       	add    $0x3eed8,%eax
   1d298:	89 08                	mov    %ecx,(%eax)
   1d29a:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d29e:	89 d0                	mov    %edx,%eax
   1d2a0:	c1 e0 03             	shl    $0x3,%eax
   1d2a3:	01 d0                	add    %edx,%eax
   1d2a5:	c1 e0 04             	shl    $0x4,%eax
   1d2a8:	05 d8 ee 03 00       	add    $0x3eed8,%eax
   1d2ad:	8b 08                	mov    (%eax),%ecx
   1d2af:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d2b3:	89 d0                	mov    %edx,%eax
   1d2b5:	c1 e0 03             	shl    $0x3,%eax
   1d2b8:	01 d0                	add    %edx,%eax
   1d2ba:	c1 e0 04             	shl    $0x4,%eax
   1d2bd:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1d2c2:	89 08                	mov    %ecx,(%eax)
		scr_end = origin + video_num_lines * video_size_row;
   1d2c4:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d2c8:	89 d0                	mov    %edx,%eax
   1d2ca:	c1 e0 03             	shl    $0x3,%eax
   1d2cd:	01 d0                	add    %edx,%eax
   1d2cf:	c1 e0 04             	shl    $0x4,%eax
   1d2d2:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1d2d7:	8b 10                	mov    (%eax),%edx
   1d2d9:	8b 0d 44 ee 03 00    	mov    0x3ee44,%ecx
   1d2df:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1d2e4:	0f af c1             	imul   %ecx,%eax
   1d2e7:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1d2ea:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d2ee:	89 d0                	mov    %edx,%eax
   1d2f0:	c1 e0 03             	shl    $0x3,%eax
   1d2f3:	01 d0                	add    %edx,%eax
   1d2f5:	c1 e0 04             	shl    $0x4,%eax
   1d2f8:	05 7c ee 03 00       	add    $0x3ee7c,%eax
   1d2fd:	89 08                	mov    %ecx,(%eax)
		video_mem_end = (term += video_memory);
   1d2ff:	8b 44 24 08          	mov    0x8(%esp),%eax
   1d303:	01 44 24 0c          	add    %eax,0xc(%esp)
   1d307:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   1d30b:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d30f:	89 d0                	mov    %edx,%eax
   1d311:	c1 e0 03             	shl    $0x3,%eax
   1d314:	01 d0                	add    %edx,%eax
   1d316:	c1 e0 04             	shl    $0x4,%eax
   1d319:	05 dc ee 03 00       	add    $0x3eedc,%eax
   1d31e:	89 08                	mov    %ecx,(%eax)
		gotoxy(currcons, 0, 0);                           					// 光标都初始化在屏幕左上角位置.
   1d320:	6a 00                	push   $0x0
   1d322:	6a 00                	push   $0x0
   1d324:	ff 74 24 1c          	pushl  0x1c(%esp)
   1d328:	e8 f5 ce ff ff       	call   1a222 <gotoxy>
   1d32d:	83 c4 0c             	add    $0xc,%esp
	vc_cons[0].vc_bold_attr = -1;											// 粗体字符属性标志(-1表示不用).

	// 在设置了0号控制台当前光标所有位置和光标对应的内存位置pos后,循环设置其余的几个虚拟控制台结构的参数值.除了各自占用的显示内存开始和结束位置不同,
	// 它们的初始值基本上都与0号控制台相同.
	gotoxy(currcons, ORIG_X, ORIG_Y);
  	for (currcons = 1; currcons < NR_CONSOLES; currcons++) {
   1d330:	83 44 24 14 01       	addl   $0x1,0x14(%esp)
   1d335:	a1 20 ee 03 00       	mov    0x3ee20,%eax
   1d33a:	39 44 24 14          	cmp    %eax,0x14(%esp)
   1d33e:	0f 8c 0e ff ff ff    	jl     1d252 <con_init+0x424>
		video_mem_end = (term += video_memory);
		gotoxy(currcons, 0, 0);                           					// 光标都初始化在屏幕左上角位置.
	}
	// 最后设置当前前台控制台的屏幕原点(左上角)位置和显示控制器中光标显示位置,并设置键盘中断0x21陷阱门描述符(&keyboard_inierrupt是键盘中断处理过程
	// 地址).然后取消中断控制芯片8259A中对键盘中断的屏蔽,允许响应键盘发出的IRQ1请求信号.最后复位键盘控制器以允许键盘开始正常工作.
	update_screen();														// 更新前台原点来设置光标位置.
   1d344:	e8 83 00 00 00       	call   1d3cc <update_screen>
	set_trap_gate(0x21, &keyboard_interrupt);								// 参见system.h,设置键盘的系统中断门
   1d349:	b9 c0 55 00 00       	mov    $0x55c0,%ecx
   1d34e:	bb c4 55 00 00       	mov    $0x55c4,%ebx
   1d353:	ba 65 d7 01 00       	mov    $0x1d765,%edx
   1d358:	b8 00 00 08 00       	mov    $0x80000,%eax
   1d35d:	66 89 d0             	mov    %dx,%ax
   1d360:	66 ba 00 8f          	mov    $0x8f00,%dx
   1d364:	89 01                	mov    %eax,(%ecx)
   1d366:	89 13                	mov    %edx,(%ebx)
	outb_p(inb_p(0x21) & 0xfd, 0x21);										// 取消对键盘中断的屏蔽,允许IRQ1.
   1d368:	b8 21 00 00 00       	mov    $0x21,%eax
   1d36d:	89 c2                	mov    %eax,%edx
   1d36f:	ec                   	in     (%dx),%al
   1d370:	eb 00                	jmp    1d372 <con_init+0x544>
   1d372:	eb 00                	jmp    1d374 <con_init+0x546>
   1d374:	88 44 24 07          	mov    %al,0x7(%esp)
   1d378:	0f b6 44 24 07       	movzbl 0x7(%esp),%eax
   1d37d:	0f b6 c0             	movzbl %al,%eax
   1d380:	25 fd 00 00 00       	and    $0xfd,%eax
   1d385:	ba 21 00 00 00       	mov    $0x21,%edx
   1d38a:	ee                   	out    %al,(%dx)
   1d38b:	eb 00                	jmp    1d38d <con_init+0x55f>
   1d38d:	eb 00                	jmp    1d38f <con_init+0x561>
	a = inb_p(0x61);														// 读取键盘端口0x61(8255A端口PB).
   1d38f:	b8 61 00 00 00       	mov    $0x61,%eax
   1d394:	89 c2                	mov    %eax,%edx
   1d396:	ec                   	in     (%dx),%al
   1d397:	eb 00                	jmp    1d399 <con_init+0x56b>
   1d399:	eb 00                	jmp    1d39b <con_init+0x56d>
   1d39b:	88 44 24 06          	mov    %al,0x6(%esp)
   1d39f:	0f b6 44 24 06       	movzbl 0x6(%esp),%eax
   1d3a4:	89 c3                	mov    %eax,%ebx
	outb_p(a | 0x80, 0x61);													// 设置禁止键盘工作(位7置位).
   1d3a6:	89 d8                	mov    %ebx,%eax
   1d3a8:	83 c8 80             	or     $0xffffff80,%eax
   1d3ab:	0f b6 c0             	movzbl %al,%eax
   1d3ae:	ba 61 00 00 00       	mov    $0x61,%edx
   1d3b3:	ee                   	out    %al,(%dx)
   1d3b4:	eb 00                	jmp    1d3b6 <con_init+0x588>
   1d3b6:	eb 00                	jmp    1d3b8 <con_init+0x58a>
	outb_p(a, 0x61);														// 再允许键盘工作,用以复位键盘.
   1d3b8:	ba 61 00 00 00       	mov    $0x61,%edx
   1d3bd:	89 d8                	mov    %ebx,%eax
   1d3bf:	ee                   	out    %al,(%dx)
   1d3c0:	eb 00                	jmp    1d3c2 <con_init+0x594>
   1d3c2:	eb 00                	jmp    1d3c4 <con_init+0x596>
}
   1d3c4:	90                   	nop
   1d3c5:	83 c4 20             	add    $0x20,%esp
   1d3c8:	5b                   	pop    %ebx
   1d3c9:	5e                   	pop    %esi
   1d3ca:	5f                   	pop    %edi
   1d3cb:	c3                   	ret    

0001d3cc <update_screen>:
// 更新当前控制台.
// 把前台控制台转换为fg_console指定的虚拟控制台.fg_console是设置的前台虚拟控制台号.
// fg_console变量在tty.h头文件中定义，用来启动后默认使用的显示终端
void update_screen(void)
{
	set_origin(fg_console);													// 设置滚屏起始显示内存地址.
   1d3cc:	a1 80 12 03 00       	mov    0x31280,%eax
   1d3d1:	50                   	push   %eax
   1d3d2:	e8 04 cf ff ff       	call   1a2db <set_origin>
   1d3d7:	83 c4 04             	add    $0x4,%esp
	set_cursor(fg_console);													// 设置显示控制器中光标显示内存位置.
   1d3da:	a1 80 12 03 00       	mov    0x31280,%eax
   1d3df:	50                   	push   %eax
   1d3e0:	e8 00 e1 ff ff       	call   1b4e5 <set_cursor>
   1d3e5:	83 c4 04             	add    $0x4,%esp
}
   1d3e8:	90                   	nop
   1d3e9:	c3                   	ret    

0001d3ea <sysbeepstop>:
/* from bsd-net-2: */

// 停止蜂鸣
// 复位8255A PB端口的位1和位0.
void sysbeepstop(void)
{
   1d3ea:	83 ec 10             	sub    $0x10,%esp
	/* disable counter 2 */		/* 禁止定时器2 */
	outb(inb_p(0x61)&0xFC, 0x61);
   1d3ed:	b8 61 00 00 00       	mov    $0x61,%eax
   1d3f2:	89 c2                	mov    %eax,%edx
   1d3f4:	ec                   	in     (%dx),%al
   1d3f5:	eb 00                	jmp    1d3f7 <sysbeepstop+0xd>
   1d3f7:	eb 00                	jmp    1d3f9 <sysbeepstop+0xf>
   1d3f9:	88 44 24 0f          	mov    %al,0xf(%esp)
   1d3fd:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   1d402:	0f b6 c0             	movzbl %al,%eax
   1d405:	25 fc 00 00 00       	and    $0xfc,%eax
   1d40a:	ba 61 00 00 00       	mov    $0x61,%edx
   1d40f:	ee                   	out    %al,(%dx)
}
   1d410:	90                   	nop
   1d411:	83 c4 10             	add    $0x10,%esp
   1d414:	c3                   	ret    

0001d415 <sysbeep>:

// 开通蜂鸣
// 8255A芯片PB端口的位1用作扬声器的开门信号;位0用作8253定时器2门信号,该定时器的输出脉冲送往扬声器,作为扬声器发声频率.因此要使扬声器
// 发声,需要两步:首先开启PB端口(0x61)位1和位0(置位),然后设置定时器2通道发送一定的定时频率即可.
static void sysbeep(void)
{
   1d415:	83 ec 10             	sub    $0x10,%esp
	/* enable counter 2 */		/* 开启定时器2 */
	outb_p(inb_p(0x61)|3, 0x61);
   1d418:	b8 61 00 00 00       	mov    $0x61,%eax
   1d41d:	89 c2                	mov    %eax,%edx
   1d41f:	ec                   	in     (%dx),%al
   1d420:	eb 00                	jmp    1d422 <sysbeep+0xd>
   1d422:	eb 00                	jmp    1d424 <sysbeep+0xf>
   1d424:	88 44 24 0f          	mov    %al,0xf(%esp)
   1d428:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   1d42d:	83 c8 03             	or     $0x3,%eax
   1d430:	0f b6 c0             	movzbl %al,%eax
   1d433:	ba 61 00 00 00       	mov    $0x61,%edx
   1d438:	ee                   	out    %al,(%dx)
   1d439:	eb 00                	jmp    1d43b <sysbeep+0x26>
   1d43b:	eb 00                	jmp    1d43d <sysbeep+0x28>
	/* set command for counter 2, 2 byte write */	/* 送设置定时器2命令 */
	outb_p(0xB6, 0x43);		// 定时器芯片控制字寄存器端口.
   1d43d:	b8 b6 00 00 00       	mov    $0xb6,%eax
   1d442:	ba 43 00 00 00       	mov    $0x43,%edx
   1d447:	ee                   	out    %al,(%dx)
   1d448:	eb 00                	jmp    1d44a <sysbeep+0x35>
   1d44a:	eb 00                	jmp    1d44c <sysbeep+0x37>
	/* send 0x637 for 750 HZ */	/* 设置频率为720Hz,因此送定时值0x637 */
	outb_p(0x37, 0x42);		// 通过2数据端口分别送计数高低字节
   1d44c:	b8 37 00 00 00       	mov    $0x37,%eax
   1d451:	ba 42 00 00 00       	mov    $0x42,%edx
   1d456:	ee                   	out    %al,(%dx)
   1d457:	eb 00                	jmp    1d459 <sysbeep+0x44>
   1d459:	eb 00                	jmp    1d45b <sysbeep+0x46>
	outb(0x06, 0x42);
   1d45b:	b8 06 00 00 00       	mov    $0x6,%eax
   1d460:	ba 42 00 00 00       	mov    $0x42,%edx
   1d465:	ee                   	out    %al,(%dx)
	/* 1/8 second */		/* 蜂鸣时间为1/8s */
	beepcount = HZ / 8;
   1d466:	c7 05 2c ee 03 00 0c 	movl   $0xc,0x3ee2c
   1d46d:	00 00 00 
}
   1d470:	90                   	nop
   1d471:	83 c4 10             	add    $0x10,%esp
   1d474:	c3                   	ret    

0001d475 <do_screendump>:

// 拷贝屏幕
// 把屏幕内容复制到参数指定的用户缓冲区arg中。
// 参数arg有两个用途：一是用于传递控制台号，二是作为用户缓冲区指针。
int do_screendump(int arg)
{
   1d475:	83 ec 1c             	sub    $0x1c,%esp
	char *sptr, *buf = (char *)arg;
   1d478:	8b 44 24 20          	mov    0x20(%esp),%eax
   1d47c:	89 44 24 08          	mov    %eax,0x8(%esp)
	int currcons, l;

	// 函数首先验证用户提供的缓冲区容量，若不够则进行适当扩展。然后从其开始处取出控制台号currcons.
	// 在判断控制台号有效后，就把该控制台屏幕的所有内存内容复制到用户缓冲区中。
	verify_area(buf, video_num_columns * video_num_lines);
   1d480:	8b 15 34 ee 03 00    	mov    0x3ee34,%edx
   1d486:	a1 44 ee 03 00       	mov    0x3ee44,%eax
   1d48b:	0f af c2             	imul   %edx,%eax
   1d48e:	83 ec 08             	sub    $0x8,%esp
   1d491:	50                   	push   %eax
   1d492:	ff 74 24 14          	pushl  0x14(%esp)
   1d496:	e8 08 af fe ff       	call   83a3 <verify_area>
   1d49b:	83 c4 10             	add    $0x10,%esp
	currcons = get_fs_byte(buf);
   1d49e:	83 ec 0c             	sub    $0xc,%esp
   1d4a1:	ff 74 24 14          	pushl  0x14(%esp)
   1d4a5:	e8 50 cd ff ff       	call   1a1fa <get_fs_byte>
   1d4aa:	83 c4 10             	add    $0x10,%esp
   1d4ad:	0f b6 c0             	movzbl %al,%eax
   1d4b0:	89 04 24             	mov    %eax,(%esp)
	if ((currcons < 1) || (currcons > NR_CONSOLES))
   1d4b3:	83 3c 24 00          	cmpl   $0x0,(%esp)
   1d4b7:	7e 0a                	jle    1d4c3 <do_screendump+0x4e>
   1d4b9:	a1 20 ee 03 00       	mov    0x3ee20,%eax
   1d4be:	39 04 24             	cmp    %eax,(%esp)
   1d4c1:	7e 07                	jle    1d4ca <do_screendump+0x55>
		return -EIO;
   1d4c3:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   1d4c8:	eb 6a                	jmp    1d534 <do_screendump+0xbf>
	currcons--;
   1d4ca:	83 2c 24 01          	subl   $0x1,(%esp)
	sptr = (char *) origin;
   1d4ce:	8b 14 24             	mov    (%esp),%edx
   1d4d1:	89 d0                	mov    %edx,%eax
   1d4d3:	c1 e0 03             	shl    $0x3,%eax
   1d4d6:	01 d0                	add    %edx,%eax
   1d4d8:	c1 e0 04             	shl    $0x4,%eax
   1d4db:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1d4e0:	8b 00                	mov    (%eax),%eax
   1d4e2:	89 44 24 0c          	mov    %eax,0xc(%esp)
	for (l = video_num_lines * video_num_columns; l > 0 ; l--)
   1d4e6:	8b 15 44 ee 03 00    	mov    0x3ee44,%edx
   1d4ec:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1d4f1:	0f af c2             	imul   %edx,%eax
   1d4f4:	89 44 24 04          	mov    %eax,0x4(%esp)
   1d4f8:	eb 2e                	jmp    1d528 <do_screendump+0xb3>
		put_fs_byte(*sptr++, buf++);
   1d4fa:	8b 44 24 08          	mov    0x8(%esp),%eax
   1d4fe:	8d 50 01             	lea    0x1(%eax),%edx
   1d501:	89 54 24 08          	mov    %edx,0x8(%esp)
   1d505:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d509:	8d 4a 01             	lea    0x1(%edx),%ecx
   1d50c:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
   1d510:	0f b6 12             	movzbl (%edx),%edx
   1d513:	0f be d2             	movsbl %dl,%edx
   1d516:	83 ec 08             	sub    $0x8,%esp
   1d519:	50                   	push   %eax
   1d51a:	52                   	push   %edx
   1d51b:	e8 e8 cc ff ff       	call   1a208 <put_fs_byte>
   1d520:	83 c4 10             	add    $0x10,%esp
	currcons = get_fs_byte(buf);
	if ((currcons < 1) || (currcons > NR_CONSOLES))
		return -EIO;
	currcons--;
	sptr = (char *) origin;
	for (l = video_num_lines * video_num_columns; l > 0 ; l--)
   1d523:	83 6c 24 04 01       	subl   $0x1,0x4(%esp)
   1d528:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   1d52d:	7f cb                	jg     1d4fa <do_screendump+0x85>
		put_fs_byte(*sptr++, buf++);
	return(0);
   1d52f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1d534:	83 c4 1c             	add    $0x1c,%esp
   1d537:	c3                   	ret    

0001d538 <blank_screen>:

// 黑屏处理
// 当用户在blankInterval时间间隔内没有按任何按键时就让屏幕黑屏,以保护屏幕.
void blank_screen()
{
	if (video_type != VIDEO_TYPE_EGAC && video_type != VIDEO_TYPE_EGAM)
   1d538:	0f b6 05 30 ee 03 00 	movzbl 0x3ee30,%eax
   1d53f:	3c 21                	cmp    $0x21,%al
   1d541:	74 09                	je     1d54c <blank_screen+0x14>
   1d543:	0f b6 05 30 ee 03 00 	movzbl 0x3ee30,%eax
   1d54a:	3c 20                	cmp    $0x20,%al
		return;
	/* blank here. I can't find out how to do it, though */
}
   1d54c:	c3                   	ret    

0001d54d <unblank_screen>:

// 恢复黑屏的屏幕
// 当用户按下任何按键时,就恢复处于黑屏状态的屏幕显示内容.
void unblank_screen()
{
	if (video_type != VIDEO_TYPE_EGAC && video_type != VIDEO_TYPE_EGAM)
   1d54d:	0f b6 05 30 ee 03 00 	movzbl 0x3ee30,%eax
   1d554:	3c 21                	cmp    $0x21,%al
   1d556:	74 09                	je     1d561 <unblank_screen+0x14>
   1d558:	0f b6 05 30 ee 03 00 	movzbl 0x3ee30,%eax
   1d55f:	3c 20                	cmp    $0x20,%al
		return;
	/* unblank here */
}
   1d561:	c3                   	ret    

0001d562 <console_print>:
// 控制台显示函数
// 该函数仅用于内核显示函数printk()(kernel/printk.c),用于在当前前台控制台上显示内核信息.
// 处理方法是循环取出缓冲区中的字符,并根据字符的特性控制光标移动或直接显示在屏幕上.
// 参数b是null结尾的字符串缓冲区指针。
void console_print(const char * b)
{
   1d562:	53                   	push   %ebx
   1d563:	83 ec 10             	sub    $0x10,%esp
	int currcons = fg_console;
   1d566:	a1 80 12 03 00       	mov    0x31280,%eax
   1d56b:	89 44 24 0c          	mov    %eax,0xc(%esp)
	char c;

	// 循环读取缓冲区b中的字符。
	while (c = *(b++)) {
   1d56f:	e9 5d 01 00 00       	jmp    1d6d1 <console_print+0x16f>
		// 如果当前字符c是换行符，则对光标执行回车换行操作
		if (c == 10) {
   1d574:	80 7c 24 0b 0a       	cmpb   $0xa,0xb(%esp)
   1d579:	75 1d                	jne    1d598 <console_print+0x36>
			// 光标回到当前行的第0列
			cr(currcons);
   1d57b:	ff 74 24 0c          	pushl  0xc(%esp)
   1d57f:	e8 e6 d5 ff ff       	call   1ab6a <cr>
   1d584:	83 c4 04             	add    $0x4,%esp
			// 将光标从当前列移动到下一行
			lf(currcons);
   1d587:	ff 74 24 0c          	pushl  0xc(%esp)
   1d58b:	e8 9e d4 ff ff       	call   1aa2e <lf>
   1d590:	83 c4 04             	add    $0x4,%esp
			continue;
   1d593:	e9 39 01 00 00       	jmp    1d6d1 <console_print+0x16f>
		}
		// 如果是回车符，就直接执行回车动作。然后去处理下一个字符。
		if (c == 13) {
   1d598:	80 7c 24 0b 0d       	cmpb   $0xd,0xb(%esp)
   1d59d:	75 11                	jne    1d5b0 <console_print+0x4e>
			cr(currcons);
   1d59f:	ff 74 24 0c          	pushl  0xc(%esp)
   1d5a3:	e8 c2 d5 ff ff       	call   1ab6a <cr>
   1d5a8:	83 c4 04             	add    $0x4,%esp
			continue;
   1d5ab:	e9 21 01 00 00       	jmp    1d6d1 <console_print+0x16f>
		}
		// 在读取了一个不是回车或换行字符后，如果发现当前光标列位置x已经到达屏幕右末端，则让光标折返到下一行开始处。
		// 然后把字符放到光标所处显示内存位置处，即在屏幕上显示出来。再把光标右移一格位置，为显示下一个字符作准备。
		if (x >= video_num_columns) {
   1d5b0:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d5b4:	89 d0                	mov    %edx,%eax
   1d5b6:	c1 e0 03             	shl    $0x3,%eax
   1d5b9:	01 d0                	add    %edx,%eax
   1d5bb:	c1 e0 04             	shl    $0x4,%eax
   1d5be:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1d5c3:	8b 10                	mov    (%eax),%edx
   1d5c5:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1d5ca:	39 c2                	cmp    %eax,%edx
   1d5cc:	72 72                	jb     1d640 <console_print+0xde>
			x -= video_num_columns;
   1d5ce:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d5d2:	89 d0                	mov    %edx,%eax
   1d5d4:	c1 e0 03             	shl    $0x3,%eax
   1d5d7:	01 d0                	add    %edx,%eax
   1d5d9:	c1 e0 04             	shl    $0x4,%eax
   1d5dc:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1d5e1:	8b 10                	mov    (%eax),%edx
   1d5e3:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1d5e8:	89 d1                	mov    %edx,%ecx
   1d5ea:	29 c1                	sub    %eax,%ecx
   1d5ec:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d5f0:	89 d0                	mov    %edx,%eax
   1d5f2:	c1 e0 03             	shl    $0x3,%eax
   1d5f5:	01 d0                	add    %edx,%eax
   1d5f7:	c1 e0 04             	shl    $0x4,%eax
   1d5fa:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1d5ff:	89 08                	mov    %ecx,(%eax)
			pos -= video_size_row;
   1d601:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d605:	89 d0                	mov    %edx,%eax
   1d607:	c1 e0 03             	shl    $0x3,%eax
   1d60a:	01 d0                	add    %edx,%eax
   1d60c:	c1 e0 04             	shl    $0x4,%eax
   1d60f:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1d614:	8b 10                	mov    (%eax),%edx
   1d616:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1d61b:	89 d1                	mov    %edx,%ecx
   1d61d:	29 c1                	sub    %eax,%ecx
   1d61f:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d623:	89 d0                	mov    %edx,%eax
   1d625:	c1 e0 03             	shl    $0x3,%eax
   1d628:	01 d0                	add    %edx,%eax
   1d62a:	c1 e0 04             	shl    $0x4,%eax
   1d62d:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1d632:	89 08                	mov    %ecx,(%eax)
			lf(currcons);
   1d634:	ff 74 24 0c          	pushl  0xc(%esp)
   1d638:	e8 f1 d3 ff ff       	call   1aa2e <lf>
   1d63d:	83 c4 04             	add    $0x4,%esp
		}
		// 寄存器al中是需要显示的字符，这里把属性字节放到ah中，然后把ax内容存储到光标内存位置pos处，即在光标处显示字符。
		__asm__("movb %2, %%ah\n\t"              				// 属性字节放到ah中。
			"movw %%ax, %1\n\t"              					// ax内容放到pos处。
			::"a" (c),
			"m" (*(short *)pos),
   1d640:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d644:	89 d0                	mov    %edx,%eax
   1d646:	c1 e0 03             	shl    $0x3,%eax
   1d649:	01 d0                	add    %edx,%eax
   1d64b:	c1 e0 04             	shl    $0x4,%eax
   1d64e:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1d653:	8b 00                	mov    (%eax),%eax
   1d655:	89 c3                	mov    %eax,%ebx
			x -= video_num_columns;
			pos -= video_size_row;
			lf(currcons);
		}
		// 寄存器al中是需要显示的字符，这里把属性字节放到ah中，然后把ax内容存储到光标内存位置pos处，即在光标处显示字符。
		__asm__("movb %2, %%ah\n\t"              				// 属性字节放到ah中。
   1d657:	0f b6 4c 24 0b       	movzbl 0xb(%esp),%ecx
   1d65c:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d660:	89 d0                	mov    %edx,%eax
   1d662:	c1 e0 03             	shl    $0x3,%eax
   1d665:	01 d0                	add    %edx,%eax
   1d667:	c1 e0 04             	shl    $0x4,%eax
   1d66a:	8d 90 62 ee 03 00    	lea    0x3ee62(%eax),%edx
   1d670:	89 c8                	mov    %ecx,%eax
   1d672:	8a 22                	mov    (%edx),%ah
   1d674:	66 89 03             	mov    %ax,(%ebx)
			"movw %%ax, %1\n\t"              					// ax内容放到pos处。
			::"a" (c),
			"m" (*(short *)pos),
			"m" (attr)
			:);
		pos += 2;
   1d677:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d67b:	89 d0                	mov    %edx,%eax
   1d67d:	c1 e0 03             	shl    $0x3,%eax
   1d680:	01 d0                	add    %edx,%eax
   1d682:	c1 e0 04             	shl    $0x4,%eax
   1d685:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1d68a:	8b 00                	mov    (%eax),%eax
   1d68c:	8d 48 02             	lea    0x2(%eax),%ecx
   1d68f:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d693:	89 d0                	mov    %edx,%eax
   1d695:	c1 e0 03             	shl    $0x3,%eax
   1d698:	01 d0                	add    %edx,%eax
   1d69a:	c1 e0 04             	shl    $0x4,%eax
   1d69d:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1d6a2:	89 08                	mov    %ecx,(%eax)
		x++;
   1d6a4:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d6a8:	89 d0                	mov    %edx,%eax
   1d6aa:	c1 e0 03             	shl    $0x3,%eax
   1d6ad:	01 d0                	add    %edx,%eax
   1d6af:	c1 e0 04             	shl    $0x4,%eax
   1d6b2:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1d6b7:	8b 00                	mov    (%eax),%eax
   1d6b9:	8d 48 01             	lea    0x1(%eax),%ecx
   1d6bc:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d6c0:	89 d0                	mov    %edx,%eax
   1d6c2:	c1 e0 03             	shl    $0x3,%eax
   1d6c5:	01 d0                	add    %edx,%eax
   1d6c7:	c1 e0 04             	shl    $0x4,%eax
   1d6ca:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1d6cf:	89 08                	mov    %ecx,(%eax)
{
	int currcons = fg_console;
	char c;

	// 循环读取缓冲区b中的字符。
	while (c = *(b++)) {
   1d6d1:	8b 44 24 18          	mov    0x18(%esp),%eax
   1d6d5:	8d 50 01             	lea    0x1(%eax),%edx
   1d6d8:	89 54 24 18          	mov    %edx,0x18(%esp)
   1d6dc:	0f b6 00             	movzbl (%eax),%eax
   1d6df:	88 44 24 0b          	mov    %al,0xb(%esp)
   1d6e3:	80 7c 24 0b 00       	cmpb   $0x0,0xb(%esp)
   1d6e8:	0f 85 86 fe ff ff    	jne    1d574 <console_print+0x12>
			"m" (attr)
			:);
		pos += 2;
		x++;
	}
	set_cursor(currcons);           							// 最后设置的光标内存位置，设置显示控制器中光标位置。
   1d6ee:	ff 74 24 0c          	pushl  0xc(%esp)
   1d6f2:	e8 ee dd ff ff       	call   1b4e5 <set_cursor>
   1d6f7:	83 c4 04             	add    $0x4,%esp
}
   1d6fa:	90                   	nop
   1d6fb:	83 c4 10             	add    $0x10,%esp
   1d6fe:	5b                   	pop    %ebx
   1d6ff:	c3                   	ret    

0001d700 <del_col>:


void del_col(int i){
   1d700:	83 ec 10             	sub    $0x10,%esp
	int currcons = fg_console;
   1d703:	a1 80 12 03 00       	mov    0x31280,%eax
   1d708:	89 44 24 0c          	mov    %eax,0xc(%esp)
	gotoxy(currcons, x - i, y);
   1d70c:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d710:	89 d0                	mov    %edx,%eax
   1d712:	c1 e0 03             	shl    $0x3,%eax
   1d715:	01 d0                	add    %edx,%eax
   1d717:	c1 e0 04             	shl    $0x4,%eax
   1d71a:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1d71f:	8b 08                	mov    (%eax),%ecx
   1d721:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d725:	89 d0                	mov    %edx,%eax
   1d727:	c1 e0 03             	shl    $0x3,%eax
   1d72a:	01 d0                	add    %edx,%eax
   1d72c:	c1 e0 04             	shl    $0x4,%eax
   1d72f:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1d734:	8b 10                	mov    (%eax),%edx
   1d736:	8b 44 24 14          	mov    0x14(%esp),%eax
   1d73a:	29 c2                	sub    %eax,%edx
   1d73c:	89 d0                	mov    %edx,%eax
   1d73e:	51                   	push   %ecx
   1d73f:	50                   	push   %eax
   1d740:	ff 74 24 14          	pushl  0x14(%esp)
   1d744:	e8 d9 ca ff ff       	call   1a222 <gotoxy>
   1d749:	83 c4 0c             	add    $0xc,%esp
	csi_P(currcons, i);
   1d74c:	8b 44 24 14          	mov    0x14(%esp),%eax
   1d750:	50                   	push   %eax
   1d751:	ff 74 24 10          	pushl  0x10(%esp)
   1d755:	e8 cc e1 ff ff       	call   1b926 <csi_P>
   1d75a:	83 c4 08             	add    $0x8,%esp
}
   1d75d:	90                   	nop
   1d75e:	83 c4 10             	add    $0x10,%esp
   1d761:	c3                   	ret    

0001d762 <mode>:
	...

0001d763 <leds>:
   1d763:	02                   	.byte 0x2

0001d764 <e0>:
	...

0001d765 <keyboard_interrupt>:
   1d765:	50                   	push   %eax
   1d766:	53                   	push   %ebx
   1d767:	51                   	push   %ecx
   1d768:	52                   	push   %edx
   1d769:	1e                   	push   %ds
   1d76a:	06                   	push   %es
   1d76b:	b8 10 00 00 00       	mov    $0x10,%eax
   1d770:	8e d8                	mov    %eax,%ds
   1d772:	8e c0                	mov    %eax,%es
   1d774:	a1 24 ee 03 00       	mov    0x3ee24,%eax
   1d779:	a3 28 ee 03 00       	mov    %eax,0x3ee28
   1d77e:	31 c0                	xor    %eax,%eax
   1d780:	e4 60                	in     $0x60,%al
   1d782:	3c e0                	cmp    $0xe0,%al
   1d784:	74 3d                	je     1d7c3 <set_e0>
   1d786:	3c e1                	cmp    $0xe1,%al
   1d788:	74 42                	je     1d7cc <set_e1>
   1d78a:	ff 14 85 47 db 01 00 	call   *0x1db47(,%eax,4)
   1d791:	c6 05 64 d7 01 00 00 	movb   $0x0,0x1d764

0001d798 <e0_e1>:
   1d798:	e4 61                	in     $0x61,%al
   1d79a:	eb 00                	jmp    1d79c <e0_e1+0x4>
   1d79c:	eb 00                	jmp    1d79e <e0_e1+0x6>
   1d79e:	0c 80                	or     $0x80,%al
   1d7a0:	eb 00                	jmp    1d7a2 <e0_e1+0xa>
   1d7a2:	eb 00                	jmp    1d7a4 <e0_e1+0xc>
   1d7a4:	e6 61                	out    %al,$0x61
   1d7a6:	eb 00                	jmp    1d7a8 <e0_e1+0x10>
   1d7a8:	eb 00                	jmp    1d7aa <e0_e1+0x12>
   1d7aa:	24 7f                	and    $0x7f,%al
   1d7ac:	e6 61                	out    %al,$0x61
   1d7ae:	b0 20                	mov    $0x20,%al
   1d7b0:	e6 20                	out    %al,$0x20
   1d7b2:	6a 00                	push   $0x0
   1d7b4:	e8 98 c3 ff ff       	call   19b51 <do_tty_interrupt>
   1d7b9:	83 c4 04             	add    $0x4,%esp
   1d7bc:	07                   	pop    %es
   1d7bd:	1f                   	pop    %ds
   1d7be:	5a                   	pop    %edx
   1d7bf:	59                   	pop    %ecx
   1d7c0:	5b                   	pop    %ebx
   1d7c1:	58                   	pop    %eax
   1d7c2:	cf                   	iret   

0001d7c3 <set_e0>:
   1d7c3:	c6 05 64 d7 01 00 01 	movb   $0x1,0x1d764
   1d7ca:	eb cc                	jmp    1d798 <e0_e1>

0001d7cc <set_e1>:
   1d7cc:	c6 05 64 d7 01 00 02 	movb   $0x2,0x1d764
   1d7d3:	eb c3                	jmp    1d798 <e0_e1>

0001d7d5 <put_queue>:
   1d7d5:	51                   	push   %ecx
   1d7d6:	52                   	push   %edx
   1d7d7:	8b 15 24 e5 02 00    	mov    0x2e524,%edx
   1d7dd:	8b 4a 04             	mov    0x4(%edx),%ecx
   1d7e0:	88 44 0a 10          	mov    %al,0x10(%edx,%ecx,1)
   1d7e4:	41                   	inc    %ecx
   1d7e5:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
   1d7eb:	3b 4a 08             	cmp    0x8(%edx),%ecx
   1d7ee:	74 1b                	je     1d80b <put_queue+0x36>
   1d7f0:	0f ac d8 08          	shrd   $0x8,%ebx,%eax
   1d7f4:	74 05                	je     1d7fb <put_queue+0x26>
   1d7f6:	c1 eb 08             	shr    $0x8,%ebx
   1d7f9:	eb e5                	jmp    1d7e0 <put_queue+0xb>
   1d7fb:	89 4a 04             	mov    %ecx,0x4(%edx)
   1d7fe:	8b 4a 0c             	mov    0xc(%edx),%ecx
   1d801:	85 c9                	test   %ecx,%ecx
   1d803:	74 06                	je     1d80b <put_queue+0x36>
   1d805:	c7 01 00 00 00 00    	movl   $0x0,(%ecx)
   1d80b:	5a                   	pop    %edx
   1d80c:	59                   	pop    %ecx
   1d80d:	c3                   	ret    

0001d80e <ctrl>:
   1d80e:	b0 04                	mov    $0x4,%al
   1d810:	eb 02                	jmp    1d814 <alt+0x2>

0001d812 <alt>:
   1d812:	b0 10                	mov    $0x10,%al
   1d814:	80 3d 64 d7 01 00 00 	cmpb   $0x0,0x1d764
   1d81b:	74 02                	je     1d81f <alt+0xd>
   1d81d:	00 c0                	add    %al,%al
   1d81f:	08 05 62 d7 01 00    	or     %al,0x1d762
   1d825:	c3                   	ret    

0001d826 <unctrl>:
   1d826:	b0 04                	mov    $0x4,%al
   1d828:	eb 02                	jmp    1d82c <unalt+0x2>

0001d82a <unalt>:
   1d82a:	b0 10                	mov    $0x10,%al
   1d82c:	80 3d 64 d7 01 00 00 	cmpb   $0x0,0x1d764
   1d833:	74 02                	je     1d837 <unalt+0xd>
   1d835:	00 c0                	add    %al,%al
   1d837:	f6 d0                	not    %al
   1d839:	20 05 62 d7 01 00    	and    %al,0x1d762
   1d83f:	c3                   	ret    

0001d840 <lshift>:
   1d840:	80 0d 62 d7 01 00 01 	orb    $0x1,0x1d762
   1d847:	c3                   	ret    

0001d848 <unlshift>:
   1d848:	80 25 62 d7 01 00 fe 	andb   $0xfe,0x1d762
   1d84f:	c3                   	ret    

0001d850 <rshift>:
   1d850:	80 0d 62 d7 01 00 02 	orb    $0x2,0x1d762
   1d857:	c3                   	ret    

0001d858 <unrshift>:
   1d858:	80 25 62 d7 01 00 fd 	andb   $0xfd,0x1d762
   1d85f:	c3                   	ret    

0001d860 <caps>:
   1d860:	f6 05 62 d7 01 00 80 	testb  $0x80,0x1d762
   1d867:	75 43                	jne    1d8ac <scroll+0x10>
   1d869:	80 35 63 d7 01 00 04 	xorb   $0x4,0x1d763
   1d870:	80 35 62 d7 01 00 40 	xorb   $0x40,0x1d762
   1d877:	80 0d 62 d7 01 00 80 	orb    $0x80,0x1d762

0001d87e <set_leds>:
   1d87e:	e8 c4 06 00 00       	call   1df47 <kb_wait>
   1d883:	b0 ed                	mov    $0xed,%al
   1d885:	e6 60                	out    %al,$0x60
   1d887:	e8 bb 06 00 00       	call   1df47 <kb_wait>
   1d88c:	a0 63 d7 01 00       	mov    0x1d763,%al
   1d891:	e6 60                	out    %al,$0x60
   1d893:	c3                   	ret    

0001d894 <uncaps>:
   1d894:	80 25 62 d7 01 00 7f 	andb   $0x7f,0x1d762
   1d89b:	c3                   	ret    

0001d89c <scroll>:
   1d89c:	f6 05 62 d7 01 00 03 	testb  $0x3,0x1d762
   1d8a3:	74 07                	je     1d8ac <scroll+0x10>
   1d8a5:	e8 e5 f0 fe ff       	call   c98f <show_mem>
   1d8aa:	eb 05                	jmp    1d8b1 <scroll+0x15>
   1d8ac:	e8 dc 94 fe ff       	call   6d8d <show_state>
   1d8b1:	80 35 63 d7 01 00 01 	xorb   $0x1,0x1d763
   1d8b8:	eb c4                	jmp    1d87e <set_leds>

0001d8ba <num>:
   1d8ba:	80 35 63 d7 01 00 02 	xorb   $0x2,0x1d763
   1d8c1:	eb bb                	jmp    1d87e <set_leds>

0001d8c3 <cursor>:
   1d8c3:	2c 47                	sub    $0x47,%al
   1d8c5:	72 44                	jb     1d90b <cur2+0x28>
   1d8c7:	3c 0c                	cmp    $0xc,%al
   1d8c9:	77 40                	ja     1d90b <cur2+0x28>
   1d8cb:	75 16                	jne    1d8e3 <cur2>
   1d8cd:	f6 05 62 d7 01 00 0c 	testb  $0xc,0x1d762
   1d8d4:	74 0d                	je     1d8e3 <cur2>
   1d8d6:	f6 05 62 d7 01 00 30 	testb  $0x30,0x1d762
   1d8dd:	0f 85 6d 06 00 00    	jne    1df50 <reboot>

0001d8e3 <cur2>:
   1d8e3:	80 3d 64 d7 01 00 01 	cmpb   $0x1,0x1d764
   1d8ea:	74 20                	je     1d90c <cur>
   1d8ec:	f6 05 63 d7 01 00 02 	testb  $0x2,0x1d763
   1d8f3:	74 17                	je     1d90c <cur>
   1d8f5:	f6 05 62 d7 01 00 03 	testb  $0x3,0x1d762
   1d8fc:	75 0e                	jne    1d90c <cur>
   1d8fe:	31 db                	xor    %ebx,%ebx
   1d900:	8a 80 26 d9 01 00    	mov    0x1d926(%eax),%al
   1d906:	e9 ca fe ff ff       	jmp    1d7d5 <put_queue>
   1d90b:	c3                   	ret    

0001d90c <cur>:
   1d90c:	8a 80 33 d9 01 00    	mov    0x1d933(%eax),%al
   1d912:	3c 39                	cmp    $0x39,%al
   1d914:	77 02                	ja     1d918 <ok_cur>
   1d916:	b4 7e                	mov    $0x7e,%ah

0001d918 <ok_cur>:
   1d918:	c1 e0 10             	shl    $0x10,%eax
   1d91b:	66 b8 1b 5b          	mov    $0x5b1b,%ax
   1d91f:	31 db                	xor    %ebx,%ebx
   1d921:	e9 af fe ff ff       	jmp    1d7d5 <put_queue>

0001d926 <num_table>:
   1d926:	37                   	aaa    
   1d927:	38 39                	cmp    %bh,(%ecx)
   1d929:	20 34 35 36 20 31 32 	and    %dh,0x32312036(,%esi,1)
   1d930:	33 30                	xor    (%eax),%esi
   1d932:	2c                   	.byte 0x2c

0001d933 <cur_table>:
   1d933:	48                   	dec    %eax
   1d934:	41                   	inc    %ecx
   1d935:	35 20 44 47 43       	xor    $0x43474420,%eax
   1d93a:	20 59 42             	and    %bl,0x42(%ecx)
   1d93d:	36 32 33             	xor    %ss:(%ebx),%dh

0001d940 <func>:
   1d940:	2c 3b                	sub    $0x3b,%al
   1d942:	72 31                	jb     1d975 <end_func>
   1d944:	3c 09                	cmp    $0x9,%al
   1d946:	76 0a                	jbe    1d952 <ok_func>
   1d948:	2c 12                	sub    $0x12,%al
   1d94a:	3c 0a                	cmp    $0xa,%al
   1d94c:	72 27                	jb     1d975 <end_func>
   1d94e:	3c 0b                	cmp    $0xb,%al
   1d950:	77 23                	ja     1d975 <end_func>

0001d952 <ok_func>:
   1d952:	f6 05 62 d7 01 00 10 	testb  $0x10,0x1d762
   1d959:	75 13                	jne    1d96e <alt_func>
   1d95b:	83 f9 04             	cmp    $0x4,%ecx
   1d95e:	7c 15                	jl     1d975 <end_func>
   1d960:	8b 04 85 76 d9 01 00 	mov    0x1d976(,%eax,4),%eax
   1d967:	31 db                	xor    %ebx,%ebx
   1d969:	e9 67 fe ff ff       	jmp    1d7d5 <put_queue>

0001d96e <alt_func>:
   1d96e:	50                   	push   %eax
   1d96f:	e8 5a b1 ff ff       	call   18ace <change_console>
   1d974:	58                   	pop    %eax

0001d975 <end_func>:
   1d975:	c3                   	ret    

0001d976 <func_table>:
   1d976:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d979:	41                   	inc    %ecx
   1d97a:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d97d:	42                   	inc    %edx
   1d97e:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d981:	43                   	inc    %ebx
   1d982:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d985:	44                   	inc    %esp
   1d986:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d989:	45                   	inc    %ebp
   1d98a:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d98d:	46                   	inc    %esi
   1d98e:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d991:	47                   	inc    %edi
   1d992:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d995:	48                   	dec    %eax
   1d996:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d999:	49                   	dec    %ecx
   1d99a:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d99d:	4a                   	dec    %edx
   1d99e:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d9a1:	4b                   	dec    %ebx
   1d9a2:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d9a5:	4c                   	dec    %esp

0001d9a6 <key_map>:
   1d9a6:	00 1b                	add    %bl,(%ebx)
   1d9a8:	31 32                	xor    %esi,(%edx)
   1d9aa:	33 34 35 36 37 38 39 	xor    0x39383736(,%esi,1),%esi
   1d9b1:	30 2d 3d 7f 09 71    	xor    %ch,0x71097f3d
   1d9b7:	77 65                	ja     1da1e <shift_map+0x17>
   1d9b9:	72 74                	jb     1da2f <shift_map+0x28>
   1d9bb:	79 75                	jns    1da32 <shift_map+0x2b>
   1d9bd:	69 6f 70 5b 5d 0d 00 	imul   $0xd5d5b,0x70(%edi),%ebp
   1d9c4:	61                   	popa   
   1d9c5:	73 64                	jae    1da2b <shift_map+0x24>
   1d9c7:	66 67 68 6a 6b       	addr16 pushw $0x6b6a
   1d9cc:	6c                   	insb   (%dx),%es:(%edi)
   1d9cd:	3b 27                	cmp    (%edi),%esp
   1d9cf:	60                   	pusha  
   1d9d0:	00 5c 7a 78          	add    %bl,0x78(%edx,%edi,2)
   1d9d4:	63 76 62             	arpl   %si,0x62(%esi)
   1d9d7:	6e                   	outsb  %ds:(%esi),(%dx)
   1d9d8:	6d                   	insl   (%dx),%es:(%edi)
   1d9d9:	2c 2e                	sub    $0x2e,%al
   1d9db:	2f                   	das    
   1d9dc:	00 2a                	add    %ch,(%edx)
   1d9de:	00 20                	add    %ah,(%eax)
	...
   1d9f0:	2d 00 00 00 2b       	sub    $0x2b000000,%eax
   1d9f5:	00 00                	add    %al,(%eax)
   1d9f7:	00 00                	add    %al,(%eax)
   1d9f9:	00 00                	add    %al,(%eax)
   1d9fb:	00 3c 00             	add    %bh,(%eax,%eax,1)
	...

0001da07 <shift_map>:
   1da07:	00 1b                	add    %bl,(%ebx)
   1da09:	21 40 23             	and    %eax,0x23(%eax)
   1da0c:	24 25                	and    $0x25,%al
   1da0e:	5e                   	pop    %esi
   1da0f:	26 2a 28             	sub    %es:(%eax),%ch
   1da12:	29 5f 2b             	sub    %ebx,0x2b(%edi)
   1da15:	7f 09                	jg     1da20 <shift_map+0x19>
   1da17:	51                   	push   %ecx
   1da18:	57                   	push   %edi
   1da19:	45                   	inc    %ebp
   1da1a:	52                   	push   %edx
   1da1b:	54                   	push   %esp
   1da1c:	59                   	pop    %ecx
   1da1d:	55                   	push   %ebp
   1da1e:	49                   	dec    %ecx
   1da1f:	4f                   	dec    %edi
   1da20:	50                   	push   %eax
   1da21:	7b 7d                	jnp    1daa0 <alt_map+0x38>
   1da23:	0d 00 41 53 44       	or     $0x44534100,%eax
   1da28:	46                   	inc    %esi
   1da29:	47                   	inc    %edi
   1da2a:	48                   	dec    %eax
   1da2b:	4a                   	dec    %edx
   1da2c:	4b                   	dec    %ebx
   1da2d:	4c                   	dec    %esp
   1da2e:	3a 22                	cmp    (%edx),%ah
   1da30:	7e 00                	jle    1da32 <shift_map+0x2b>
   1da32:	7c 5a                	jl     1da8e <alt_map+0x26>
   1da34:	58                   	pop    %eax
   1da35:	43                   	inc    %ebx
   1da36:	56                   	push   %esi
   1da37:	42                   	inc    %edx
   1da38:	4e                   	dec    %esi
   1da39:	4d                   	dec    %ebp
   1da3a:	3c 3e                	cmp    $0x3e,%al
   1da3c:	3f                   	aas    
   1da3d:	00 2a                	add    %ch,(%edx)
   1da3f:	00 20                	add    %ah,(%eax)
	...
   1da51:	2d 00 00 00 2b       	sub    $0x2b000000,%eax
   1da56:	00 00                	add    %al,(%eax)
   1da58:	00 00                	add    %al,(%eax)
   1da5a:	00 00                	add    %al,(%eax)
   1da5c:	00 3e                	add    %bh,(%esi)
	...

0001da68 <alt_map>:
   1da68:	00 00                	add    %al,(%eax)
   1da6a:	00 40 00             	add    %al,0x0(%eax)
   1da6d:	24 00                	and    $0x0,%al
   1da6f:	00 7b 5b             	add    %bh,0x5b(%ebx)
   1da72:	5d                   	pop    %ebp
   1da73:	7d 5c                	jge    1dad1 <do_self+0x8>
	...
   1da81:	00 00                	add    %al,(%eax)
   1da83:	7e 0d                	jle    1da92 <alt_map+0x2a>
	...
   1dabd:	00 7c 00 00          	add    %bh,0x0(%eax,%eax,1)
	...

0001dac9 <do_self>:
   1dac9:	8d 1d 68 da 01 00    	lea    0x1da68,%ebx
   1dacf:	f6 05 62 d7 01 00 20 	testb  $0x20,0x1d762
   1dad6:	75 15                	jne    1daed <do_self+0x24>
   1dad8:	8d 1d 07 da 01 00    	lea    0x1da07,%ebx
   1dade:	f6 05 62 d7 01 00 03 	testb  $0x3,0x1d762
   1dae5:	75 06                	jne    1daed <do_self+0x24>
   1dae7:	8d 1d a6 d9 01 00    	lea    0x1d9a6,%ebx
   1daed:	8a 04 03             	mov    (%ebx,%eax,1),%al
   1daf0:	08 c0                	or     %al,%al
   1daf2:	74 3d                	je     1db31 <none>
   1daf4:	f6 05 62 d7 01 00 4c 	testb  $0x4c,0x1d762
   1dafb:	74 0a                	je     1db07 <do_self+0x3e>
   1dafd:	3c 61                	cmp    $0x61,%al
   1daff:	72 06                	jb     1db07 <do_self+0x3e>
   1db01:	3c 7d                	cmp    $0x7d,%al
   1db03:	77 02                	ja     1db07 <do_self+0x3e>
   1db05:	2c 20                	sub    $0x20,%al
   1db07:	f6 05 62 d7 01 00 0c 	testb  $0xc,0x1d762
   1db0e:	74 0a                	je     1db1a <do_self+0x51>
   1db10:	3c 40                	cmp    $0x40,%al
   1db12:	72 06                	jb     1db1a <do_self+0x51>
   1db14:	3c 60                	cmp    $0x60,%al
   1db16:	73 02                	jae    1db1a <do_self+0x51>
   1db18:	2c 40                	sub    $0x40,%al
   1db1a:	f6 05 62 d7 01 00 10 	testb  $0x10,0x1d762
   1db21:	74 02                	je     1db25 <do_self+0x5c>
   1db23:	0c 80                	or     $0x80,%al
   1db25:	25 ff 00 00 00       	and    $0xff,%eax
   1db2a:	31 db                	xor    %ebx,%ebx
   1db2c:	e8 a4 fc ff ff       	call   1d7d5 <put_queue>

0001db31 <none>:
   1db31:	c3                   	ret    

0001db32 <minus>:
   1db32:	80 3d 64 d7 01 00 01 	cmpb   $0x1,0x1d764
   1db39:	75 8e                	jne    1dac9 <do_self>
   1db3b:	b8 2f 00 00 00       	mov    $0x2f,%eax
   1db40:	31 db                	xor    %ebx,%ebx
   1db42:	e9 8e fc ff ff       	jmp    1d7d5 <put_queue>

0001db47 <key_table>:
   1db47:	31 db                	xor    %ebx,%ebx
   1db49:	01 00                	add    %eax,(%eax)
   1db4b:	c9                   	leave  
   1db4c:	da 01                	fiaddl (%ecx)
   1db4e:	00 c9                	add    %cl,%cl
   1db50:	da 01                	fiaddl (%ecx)
   1db52:	00 c9                	add    %cl,%cl
   1db54:	da 01                	fiaddl (%ecx)
   1db56:	00 c9                	add    %cl,%cl
   1db58:	da 01                	fiaddl (%ecx)
   1db5a:	00 c9                	add    %cl,%cl
   1db5c:	da 01                	fiaddl (%ecx)
   1db5e:	00 c9                	add    %cl,%cl
   1db60:	da 01                	fiaddl (%ecx)
   1db62:	00 c9                	add    %cl,%cl
   1db64:	da 01                	fiaddl (%ecx)
   1db66:	00 c9                	add    %cl,%cl
   1db68:	da 01                	fiaddl (%ecx)
   1db6a:	00 c9                	add    %cl,%cl
   1db6c:	da 01                	fiaddl (%ecx)
   1db6e:	00 c9                	add    %cl,%cl
   1db70:	da 01                	fiaddl (%ecx)
   1db72:	00 c9                	add    %cl,%cl
   1db74:	da 01                	fiaddl (%ecx)
   1db76:	00 c9                	add    %cl,%cl
   1db78:	da 01                	fiaddl (%ecx)
   1db7a:	00 c9                	add    %cl,%cl
   1db7c:	da 01                	fiaddl (%ecx)
   1db7e:	00 c9                	add    %cl,%cl
   1db80:	da 01                	fiaddl (%ecx)
   1db82:	00 c9                	add    %cl,%cl
   1db84:	da 01                	fiaddl (%ecx)
   1db86:	00 c9                	add    %cl,%cl
   1db88:	da 01                	fiaddl (%ecx)
   1db8a:	00 c9                	add    %cl,%cl
   1db8c:	da 01                	fiaddl (%ecx)
   1db8e:	00 c9                	add    %cl,%cl
   1db90:	da 01                	fiaddl (%ecx)
   1db92:	00 c9                	add    %cl,%cl
   1db94:	da 01                	fiaddl (%ecx)
   1db96:	00 c9                	add    %cl,%cl
   1db98:	da 01                	fiaddl (%ecx)
   1db9a:	00 c9                	add    %cl,%cl
   1db9c:	da 01                	fiaddl (%ecx)
   1db9e:	00 c9                	add    %cl,%cl
   1dba0:	da 01                	fiaddl (%ecx)
   1dba2:	00 c9                	add    %cl,%cl
   1dba4:	da 01                	fiaddl (%ecx)
   1dba6:	00 c9                	add    %cl,%cl
   1dba8:	da 01                	fiaddl (%ecx)
   1dbaa:	00 c9                	add    %cl,%cl
   1dbac:	da 01                	fiaddl (%ecx)
   1dbae:	00 c9                	add    %cl,%cl
   1dbb0:	da 01                	fiaddl (%ecx)
   1dbb2:	00 c9                	add    %cl,%cl
   1dbb4:	da 01                	fiaddl (%ecx)
   1dbb6:	00 c9                	add    %cl,%cl
   1dbb8:	da 01                	fiaddl (%ecx)
   1dbba:	00 0e                	add    %cl,(%esi)
   1dbbc:	d8 01                	fadds  (%ecx)
   1dbbe:	00 c9                	add    %cl,%cl
   1dbc0:	da 01                	fiaddl (%ecx)
   1dbc2:	00 c9                	add    %cl,%cl
   1dbc4:	da 01                	fiaddl (%ecx)
   1dbc6:	00 c9                	add    %cl,%cl
   1dbc8:	da 01                	fiaddl (%ecx)
   1dbca:	00 c9                	add    %cl,%cl
   1dbcc:	da 01                	fiaddl (%ecx)
   1dbce:	00 c9                	add    %cl,%cl
   1dbd0:	da 01                	fiaddl (%ecx)
   1dbd2:	00 c9                	add    %cl,%cl
   1dbd4:	da 01                	fiaddl (%ecx)
   1dbd6:	00 c9                	add    %cl,%cl
   1dbd8:	da 01                	fiaddl (%ecx)
   1dbda:	00 c9                	add    %cl,%cl
   1dbdc:	da 01                	fiaddl (%ecx)
   1dbde:	00 c9                	add    %cl,%cl
   1dbe0:	da 01                	fiaddl (%ecx)
   1dbe2:	00 c9                	add    %cl,%cl
   1dbe4:	da 01                	fiaddl (%ecx)
   1dbe6:	00 c9                	add    %cl,%cl
   1dbe8:	da 01                	fiaddl (%ecx)
   1dbea:	00 c9                	add    %cl,%cl
   1dbec:	da 01                	fiaddl (%ecx)
   1dbee:	00 40 d8             	add    %al,-0x28(%eax)
   1dbf1:	01 00                	add    %eax,(%eax)
   1dbf3:	c9                   	leave  
   1dbf4:	da 01                	fiaddl (%ecx)
   1dbf6:	00 c9                	add    %cl,%cl
   1dbf8:	da 01                	fiaddl (%ecx)
   1dbfa:	00 c9                	add    %cl,%cl
   1dbfc:	da 01                	fiaddl (%ecx)
   1dbfe:	00 c9                	add    %cl,%cl
   1dc00:	da 01                	fiaddl (%ecx)
   1dc02:	00 c9                	add    %cl,%cl
   1dc04:	da 01                	fiaddl (%ecx)
   1dc06:	00 c9                	add    %cl,%cl
   1dc08:	da 01                	fiaddl (%ecx)
   1dc0a:	00 c9                	add    %cl,%cl
   1dc0c:	da 01                	fiaddl (%ecx)
   1dc0e:	00 c9                	add    %cl,%cl
   1dc10:	da 01                	fiaddl (%ecx)
   1dc12:	00 c9                	add    %cl,%cl
   1dc14:	da 01                	fiaddl (%ecx)
   1dc16:	00 c9                	add    %cl,%cl
   1dc18:	da 01                	fiaddl (%ecx)
   1dc1a:	00 32                	add    %dh,(%edx)
   1dc1c:	db 01                	fildl  (%ecx)
   1dc1e:	00 50 d8             	add    %dl,-0x28(%eax)
   1dc21:	01 00                	add    %eax,(%eax)
   1dc23:	c9                   	leave  
   1dc24:	da 01                	fiaddl (%ecx)
   1dc26:	00 12                	add    %dl,(%edx)
   1dc28:	d8 01                	fadds  (%ecx)
   1dc2a:	00 c9                	add    %cl,%cl
   1dc2c:	da 01                	fiaddl (%ecx)
   1dc2e:	00 60 d8             	add    %ah,-0x28(%eax)
   1dc31:	01 00                	add    %eax,(%eax)
   1dc33:	40                   	inc    %eax
   1dc34:	d9 01                	flds   (%ecx)
   1dc36:	00 40 d9             	add    %al,-0x27(%eax)
   1dc39:	01 00                	add    %eax,(%eax)
   1dc3b:	40                   	inc    %eax
   1dc3c:	d9 01                	flds   (%ecx)
   1dc3e:	00 40 d9             	add    %al,-0x27(%eax)
   1dc41:	01 00                	add    %eax,(%eax)
   1dc43:	40                   	inc    %eax
   1dc44:	d9 01                	flds   (%ecx)
   1dc46:	00 40 d9             	add    %al,-0x27(%eax)
   1dc49:	01 00                	add    %eax,(%eax)
   1dc4b:	40                   	inc    %eax
   1dc4c:	d9 01                	flds   (%ecx)
   1dc4e:	00 40 d9             	add    %al,-0x27(%eax)
   1dc51:	01 00                	add    %eax,(%eax)
   1dc53:	40                   	inc    %eax
   1dc54:	d9 01                	flds   (%ecx)
   1dc56:	00 40 d9             	add    %al,-0x27(%eax)
   1dc59:	01 00                	add    %eax,(%eax)
   1dc5b:	ba d8 01 00 9c       	mov    $0x9c0001d8,%edx
   1dc60:	d8 01                	fadds  (%ecx)
   1dc62:	00 c3                	add    %al,%bl
   1dc64:	d8 01                	fadds  (%ecx)
   1dc66:	00 c3                	add    %al,%bl
   1dc68:	d8 01                	fadds  (%ecx)
   1dc6a:	00 c3                	add    %al,%bl
   1dc6c:	d8 01                	fadds  (%ecx)
   1dc6e:	00 c9                	add    %cl,%cl
   1dc70:	da 01                	fiaddl (%ecx)
   1dc72:	00 c3                	add    %al,%bl
   1dc74:	d8 01                	fadds  (%ecx)
   1dc76:	00 c3                	add    %al,%bl
   1dc78:	d8 01                	fadds  (%ecx)
   1dc7a:	00 c3                	add    %al,%bl
   1dc7c:	d8 01                	fadds  (%ecx)
   1dc7e:	00 c9                	add    %cl,%cl
   1dc80:	da 01                	fiaddl (%ecx)
   1dc82:	00 c3                	add    %al,%bl
   1dc84:	d8 01                	fadds  (%ecx)
   1dc86:	00 c3                	add    %al,%bl
   1dc88:	d8 01                	fadds  (%ecx)
   1dc8a:	00 c3                	add    %al,%bl
   1dc8c:	d8 01                	fadds  (%ecx)
   1dc8e:	00 c3                	add    %al,%bl
   1dc90:	d8 01                	fadds  (%ecx)
   1dc92:	00 c3                	add    %al,%bl
   1dc94:	d8 01                	fadds  (%ecx)
   1dc96:	00 31                	add    %dh,(%ecx)
   1dc98:	db 01                	fildl  (%ecx)
   1dc9a:	00 31                	add    %dh,(%ecx)
   1dc9c:	db 01                	fildl  (%ecx)
   1dc9e:	00 c9                	add    %cl,%cl
   1dca0:	da 01                	fiaddl (%ecx)
   1dca2:	00 40 d9             	add    %al,-0x27(%eax)
   1dca5:	01 00                	add    %eax,(%eax)
   1dca7:	40                   	inc    %eax
   1dca8:	d9 01                	flds   (%ecx)
   1dcaa:	00 31                	add    %dh,(%ecx)
   1dcac:	db 01                	fildl  (%ecx)
   1dcae:	00 31                	add    %dh,(%ecx)
   1dcb0:	db 01                	fildl  (%ecx)
   1dcb2:	00 31                	add    %dh,(%ecx)
   1dcb4:	db 01                	fildl  (%ecx)
   1dcb6:	00 31                	add    %dh,(%ecx)
   1dcb8:	db 01                	fildl  (%ecx)
   1dcba:	00 31                	add    %dh,(%ecx)
   1dcbc:	db 01                	fildl  (%ecx)
   1dcbe:	00 31                	add    %dh,(%ecx)
   1dcc0:	db 01                	fildl  (%ecx)
   1dcc2:	00 31                	add    %dh,(%ecx)
   1dcc4:	db 01                	fildl  (%ecx)
   1dcc6:	00 31                	add    %dh,(%ecx)
   1dcc8:	db 01                	fildl  (%ecx)
   1dcca:	00 31                	add    %dh,(%ecx)
   1dccc:	db 01                	fildl  (%ecx)
   1dcce:	00 31                	add    %dh,(%ecx)
   1dcd0:	db 01                	fildl  (%ecx)
   1dcd2:	00 31                	add    %dh,(%ecx)
   1dcd4:	db 01                	fildl  (%ecx)
   1dcd6:	00 31                	add    %dh,(%ecx)
   1dcd8:	db 01                	fildl  (%ecx)
   1dcda:	00 31                	add    %dh,(%ecx)
   1dcdc:	db 01                	fildl  (%ecx)
   1dcde:	00 31                	add    %dh,(%ecx)
   1dce0:	db 01                	fildl  (%ecx)
   1dce2:	00 31                	add    %dh,(%ecx)
   1dce4:	db 01                	fildl  (%ecx)
   1dce6:	00 31                	add    %dh,(%ecx)
   1dce8:	db 01                	fildl  (%ecx)
   1dcea:	00 31                	add    %dh,(%ecx)
   1dcec:	db 01                	fildl  (%ecx)
   1dcee:	00 31                	add    %dh,(%ecx)
   1dcf0:	db 01                	fildl  (%ecx)
   1dcf2:	00 31                	add    %dh,(%ecx)
   1dcf4:	db 01                	fildl  (%ecx)
   1dcf6:	00 31                	add    %dh,(%ecx)
   1dcf8:	db 01                	fildl  (%ecx)
   1dcfa:	00 31                	add    %dh,(%ecx)
   1dcfc:	db 01                	fildl  (%ecx)
   1dcfe:	00 31                	add    %dh,(%ecx)
   1dd00:	db 01                	fildl  (%ecx)
   1dd02:	00 31                	add    %dh,(%ecx)
   1dd04:	db 01                	fildl  (%ecx)
   1dd06:	00 31                	add    %dh,(%ecx)
   1dd08:	db 01                	fildl  (%ecx)
   1dd0a:	00 31                	add    %dh,(%ecx)
   1dd0c:	db 01                	fildl  (%ecx)
   1dd0e:	00 31                	add    %dh,(%ecx)
   1dd10:	db 01                	fildl  (%ecx)
   1dd12:	00 31                	add    %dh,(%ecx)
   1dd14:	db 01                	fildl  (%ecx)
   1dd16:	00 31                	add    %dh,(%ecx)
   1dd18:	db 01                	fildl  (%ecx)
   1dd1a:	00 31                	add    %dh,(%ecx)
   1dd1c:	db 01                	fildl  (%ecx)
   1dd1e:	00 31                	add    %dh,(%ecx)
   1dd20:	db 01                	fildl  (%ecx)
   1dd22:	00 31                	add    %dh,(%ecx)
   1dd24:	db 01                	fildl  (%ecx)
   1dd26:	00 31                	add    %dh,(%ecx)
   1dd28:	db 01                	fildl  (%ecx)
   1dd2a:	00 31                	add    %dh,(%ecx)
   1dd2c:	db 01                	fildl  (%ecx)
   1dd2e:	00 31                	add    %dh,(%ecx)
   1dd30:	db 01                	fildl  (%ecx)
   1dd32:	00 31                	add    %dh,(%ecx)
   1dd34:	db 01                	fildl  (%ecx)
   1dd36:	00 31                	add    %dh,(%ecx)
   1dd38:	db 01                	fildl  (%ecx)
   1dd3a:	00 31                	add    %dh,(%ecx)
   1dd3c:	db 01                	fildl  (%ecx)
   1dd3e:	00 31                	add    %dh,(%ecx)
   1dd40:	db 01                	fildl  (%ecx)
   1dd42:	00 31                	add    %dh,(%ecx)
   1dd44:	db 01                	fildl  (%ecx)
   1dd46:	00 31                	add    %dh,(%ecx)
   1dd48:	db 01                	fildl  (%ecx)
   1dd4a:	00 31                	add    %dh,(%ecx)
   1dd4c:	db 01                	fildl  (%ecx)
   1dd4e:	00 31                	add    %dh,(%ecx)
   1dd50:	db 01                	fildl  (%ecx)
   1dd52:	00 31                	add    %dh,(%ecx)
   1dd54:	db 01                	fildl  (%ecx)
   1dd56:	00 31                	add    %dh,(%ecx)
   1dd58:	db 01                	fildl  (%ecx)
   1dd5a:	00 31                	add    %dh,(%ecx)
   1dd5c:	db 01                	fildl  (%ecx)
   1dd5e:	00 31                	add    %dh,(%ecx)
   1dd60:	db 01                	fildl  (%ecx)
   1dd62:	00 31                	add    %dh,(%ecx)
   1dd64:	db 01                	fildl  (%ecx)
   1dd66:	00 31                	add    %dh,(%ecx)
   1dd68:	db 01                	fildl  (%ecx)
   1dd6a:	00 31                	add    %dh,(%ecx)
   1dd6c:	db 01                	fildl  (%ecx)
   1dd6e:	00 31                	add    %dh,(%ecx)
   1dd70:	db 01                	fildl  (%ecx)
   1dd72:	00 31                	add    %dh,(%ecx)
   1dd74:	db 01                	fildl  (%ecx)
   1dd76:	00 31                	add    %dh,(%ecx)
   1dd78:	db 01                	fildl  (%ecx)
   1dd7a:	00 31                	add    %dh,(%ecx)
   1dd7c:	db 01                	fildl  (%ecx)
   1dd7e:	00 31                	add    %dh,(%ecx)
   1dd80:	db 01                	fildl  (%ecx)
   1dd82:	00 31                	add    %dh,(%ecx)
   1dd84:	db 01                	fildl  (%ecx)
   1dd86:	00 31                	add    %dh,(%ecx)
   1dd88:	db 01                	fildl  (%ecx)
   1dd8a:	00 31                	add    %dh,(%ecx)
   1dd8c:	db 01                	fildl  (%ecx)
   1dd8e:	00 31                	add    %dh,(%ecx)
   1dd90:	db 01                	fildl  (%ecx)
   1dd92:	00 31                	add    %dh,(%ecx)
   1dd94:	db 01                	fildl  (%ecx)
   1dd96:	00 31                	add    %dh,(%ecx)
   1dd98:	db 01                	fildl  (%ecx)
   1dd9a:	00 31                	add    %dh,(%ecx)
   1dd9c:	db 01                	fildl  (%ecx)
   1dd9e:	00 31                	add    %dh,(%ecx)
   1dda0:	db 01                	fildl  (%ecx)
   1dda2:	00 31                	add    %dh,(%ecx)
   1dda4:	db 01                	fildl  (%ecx)
   1dda6:	00 31                	add    %dh,(%ecx)
   1dda8:	db 01                	fildl  (%ecx)
   1ddaa:	00 31                	add    %dh,(%ecx)
   1ddac:	db 01                	fildl  (%ecx)
   1ddae:	00 31                	add    %dh,(%ecx)
   1ddb0:	db 01                	fildl  (%ecx)
   1ddb2:	00 31                	add    %dh,(%ecx)
   1ddb4:	db 01                	fildl  (%ecx)
   1ddb6:	00 31                	add    %dh,(%ecx)
   1ddb8:	db 01                	fildl  (%ecx)
   1ddba:	00 26                	add    %ah,(%esi)
   1ddbc:	d8 01                	fadds  (%ecx)
   1ddbe:	00 31                	add    %dh,(%ecx)
   1ddc0:	db 01                	fildl  (%ecx)
   1ddc2:	00 31                	add    %dh,(%ecx)
   1ddc4:	db 01                	fildl  (%ecx)
   1ddc6:	00 31                	add    %dh,(%ecx)
   1ddc8:	db 01                	fildl  (%ecx)
   1ddca:	00 31                	add    %dh,(%ecx)
   1ddcc:	db 01                	fildl  (%ecx)
   1ddce:	00 31                	add    %dh,(%ecx)
   1ddd0:	db 01                	fildl  (%ecx)
   1ddd2:	00 31                	add    %dh,(%ecx)
   1ddd4:	db 01                	fildl  (%ecx)
   1ddd6:	00 31                	add    %dh,(%ecx)
   1ddd8:	db 01                	fildl  (%ecx)
   1ddda:	00 31                	add    %dh,(%ecx)
   1dddc:	db 01                	fildl  (%ecx)
   1ddde:	00 31                	add    %dh,(%ecx)
   1dde0:	db 01                	fildl  (%ecx)
   1dde2:	00 31                	add    %dh,(%ecx)
   1dde4:	db 01                	fildl  (%ecx)
   1dde6:	00 31                	add    %dh,(%ecx)
   1dde8:	db 01                	fildl  (%ecx)
   1ddea:	00 31                	add    %dh,(%ecx)
   1ddec:	db 01                	fildl  (%ecx)
   1ddee:	00 48 d8             	add    %cl,-0x28(%eax)
   1ddf1:	01 00                	add    %eax,(%eax)
   1ddf3:	31 db                	xor    %ebx,%ebx
   1ddf5:	01 00                	add    %eax,(%eax)
   1ddf7:	31 db                	xor    %ebx,%ebx
   1ddf9:	01 00                	add    %eax,(%eax)
   1ddfb:	31 db                	xor    %ebx,%ebx
   1ddfd:	01 00                	add    %eax,(%eax)
   1ddff:	31 db                	xor    %ebx,%ebx
   1de01:	01 00                	add    %eax,(%eax)
   1de03:	31 db                	xor    %ebx,%ebx
   1de05:	01 00                	add    %eax,(%eax)
   1de07:	31 db                	xor    %ebx,%ebx
   1de09:	01 00                	add    %eax,(%eax)
   1de0b:	31 db                	xor    %ebx,%ebx
   1de0d:	01 00                	add    %eax,(%eax)
   1de0f:	31 db                	xor    %ebx,%ebx
   1de11:	01 00                	add    %eax,(%eax)
   1de13:	31 db                	xor    %ebx,%ebx
   1de15:	01 00                	add    %eax,(%eax)
   1de17:	31 db                	xor    %ebx,%ebx
   1de19:	01 00                	add    %eax,(%eax)
   1de1b:	31 db                	xor    %ebx,%ebx
   1de1d:	01 00                	add    %eax,(%eax)
   1de1f:	58                   	pop    %eax
   1de20:	d8 01                	fadds  (%ecx)
   1de22:	00 31                	add    %dh,(%ecx)
   1de24:	db 01                	fildl  (%ecx)
   1de26:	00 2a                	add    %ch,(%edx)
   1de28:	d8 01                	fadds  (%ecx)
   1de2a:	00 31                	add    %dh,(%ecx)
   1de2c:	db 01                	fildl  (%ecx)
   1de2e:	00 94 d8 01 00 31 db 	add    %dl,-0x24ceffff(%eax,%ebx,8)
   1de35:	01 00                	add    %eax,(%eax)
   1de37:	31 db                	xor    %ebx,%ebx
   1de39:	01 00                	add    %eax,(%eax)
   1de3b:	31 db                	xor    %ebx,%ebx
   1de3d:	01 00                	add    %eax,(%eax)
   1de3f:	31 db                	xor    %ebx,%ebx
   1de41:	01 00                	add    %eax,(%eax)
   1de43:	31 db                	xor    %ebx,%ebx
   1de45:	01 00                	add    %eax,(%eax)
   1de47:	31 db                	xor    %ebx,%ebx
   1de49:	01 00                	add    %eax,(%eax)
   1de4b:	31 db                	xor    %ebx,%ebx
   1de4d:	01 00                	add    %eax,(%eax)
   1de4f:	31 db                	xor    %ebx,%ebx
   1de51:	01 00                	add    %eax,(%eax)
   1de53:	31 db                	xor    %ebx,%ebx
   1de55:	01 00                	add    %eax,(%eax)
   1de57:	31 db                	xor    %ebx,%ebx
   1de59:	01 00                	add    %eax,(%eax)
   1de5b:	31 db                	xor    %ebx,%ebx
   1de5d:	01 00                	add    %eax,(%eax)
   1de5f:	31 db                	xor    %ebx,%ebx
   1de61:	01 00                	add    %eax,(%eax)
   1de63:	31 db                	xor    %ebx,%ebx
   1de65:	01 00                	add    %eax,(%eax)
   1de67:	31 db                	xor    %ebx,%ebx
   1de69:	01 00                	add    %eax,(%eax)
   1de6b:	31 db                	xor    %ebx,%ebx
   1de6d:	01 00                	add    %eax,(%eax)
   1de6f:	31 db                	xor    %ebx,%ebx
   1de71:	01 00                	add    %eax,(%eax)
   1de73:	31 db                	xor    %ebx,%ebx
   1de75:	01 00                	add    %eax,(%eax)
   1de77:	31 db                	xor    %ebx,%ebx
   1de79:	01 00                	add    %eax,(%eax)
   1de7b:	31 db                	xor    %ebx,%ebx
   1de7d:	01 00                	add    %eax,(%eax)
   1de7f:	31 db                	xor    %ebx,%ebx
   1de81:	01 00                	add    %eax,(%eax)
   1de83:	31 db                	xor    %ebx,%ebx
   1de85:	01 00                	add    %eax,(%eax)
   1de87:	31 db                	xor    %ebx,%ebx
   1de89:	01 00                	add    %eax,(%eax)
   1de8b:	31 db                	xor    %ebx,%ebx
   1de8d:	01 00                	add    %eax,(%eax)
   1de8f:	31 db                	xor    %ebx,%ebx
   1de91:	01 00                	add    %eax,(%eax)
   1de93:	31 db                	xor    %ebx,%ebx
   1de95:	01 00                	add    %eax,(%eax)
   1de97:	31 db                	xor    %ebx,%ebx
   1de99:	01 00                	add    %eax,(%eax)
   1de9b:	31 db                	xor    %ebx,%ebx
   1de9d:	01 00                	add    %eax,(%eax)
   1de9f:	31 db                	xor    %ebx,%ebx
   1dea1:	01 00                	add    %eax,(%eax)
   1dea3:	31 db                	xor    %ebx,%ebx
   1dea5:	01 00                	add    %eax,(%eax)
   1dea7:	31 db                	xor    %ebx,%ebx
   1dea9:	01 00                	add    %eax,(%eax)
   1deab:	31 db                	xor    %ebx,%ebx
   1dead:	01 00                	add    %eax,(%eax)
   1deaf:	31 db                	xor    %ebx,%ebx
   1deb1:	01 00                	add    %eax,(%eax)
   1deb3:	31 db                	xor    %ebx,%ebx
   1deb5:	01 00                	add    %eax,(%eax)
   1deb7:	31 db                	xor    %ebx,%ebx
   1deb9:	01 00                	add    %eax,(%eax)
   1debb:	31 db                	xor    %ebx,%ebx
   1debd:	01 00                	add    %eax,(%eax)
   1debf:	31 db                	xor    %ebx,%ebx
   1dec1:	01 00                	add    %eax,(%eax)
   1dec3:	31 db                	xor    %ebx,%ebx
   1dec5:	01 00                	add    %eax,(%eax)
   1dec7:	31 db                	xor    %ebx,%ebx
   1dec9:	01 00                	add    %eax,(%eax)
   1decb:	31 db                	xor    %ebx,%ebx
   1decd:	01 00                	add    %eax,(%eax)
   1decf:	31 db                	xor    %ebx,%ebx
   1ded1:	01 00                	add    %eax,(%eax)
   1ded3:	31 db                	xor    %ebx,%ebx
   1ded5:	01 00                	add    %eax,(%eax)
   1ded7:	31 db                	xor    %ebx,%ebx
   1ded9:	01 00                	add    %eax,(%eax)
   1dedb:	31 db                	xor    %ebx,%ebx
   1dedd:	01 00                	add    %eax,(%eax)
   1dedf:	31 db                	xor    %ebx,%ebx
   1dee1:	01 00                	add    %eax,(%eax)
   1dee3:	31 db                	xor    %ebx,%ebx
   1dee5:	01 00                	add    %eax,(%eax)
   1dee7:	31 db                	xor    %ebx,%ebx
   1dee9:	01 00                	add    %eax,(%eax)
   1deeb:	31 db                	xor    %ebx,%ebx
   1deed:	01 00                	add    %eax,(%eax)
   1deef:	31 db                	xor    %ebx,%ebx
   1def1:	01 00                	add    %eax,(%eax)
   1def3:	31 db                	xor    %ebx,%ebx
   1def5:	01 00                	add    %eax,(%eax)
   1def7:	31 db                	xor    %ebx,%ebx
   1def9:	01 00                	add    %eax,(%eax)
   1defb:	31 db                	xor    %ebx,%ebx
   1defd:	01 00                	add    %eax,(%eax)
   1deff:	31 db                	xor    %ebx,%ebx
   1df01:	01 00                	add    %eax,(%eax)
   1df03:	31 db                	xor    %ebx,%ebx
   1df05:	01 00                	add    %eax,(%eax)
   1df07:	31 db                	xor    %ebx,%ebx
   1df09:	01 00                	add    %eax,(%eax)
   1df0b:	31 db                	xor    %ebx,%ebx
   1df0d:	01 00                	add    %eax,(%eax)
   1df0f:	31 db                	xor    %ebx,%ebx
   1df11:	01 00                	add    %eax,(%eax)
   1df13:	31 db                	xor    %ebx,%ebx
   1df15:	01 00                	add    %eax,(%eax)
   1df17:	31 db                	xor    %ebx,%ebx
   1df19:	01 00                	add    %eax,(%eax)
   1df1b:	31 db                	xor    %ebx,%ebx
   1df1d:	01 00                	add    %eax,(%eax)
   1df1f:	31 db                	xor    %ebx,%ebx
   1df21:	01 00                	add    %eax,(%eax)
   1df23:	31 db                	xor    %ebx,%ebx
   1df25:	01 00                	add    %eax,(%eax)
   1df27:	31 db                	xor    %ebx,%ebx
   1df29:	01 00                	add    %eax,(%eax)
   1df2b:	31 db                	xor    %ebx,%ebx
   1df2d:	01 00                	add    %eax,(%eax)
   1df2f:	31 db                	xor    %ebx,%ebx
   1df31:	01 00                	add    %eax,(%eax)
   1df33:	31 db                	xor    %ebx,%ebx
   1df35:	01 00                	add    %eax,(%eax)
   1df37:	31 db                	xor    %ebx,%ebx
   1df39:	01 00                	add    %eax,(%eax)
   1df3b:	31 db                	xor    %ebx,%ebx
   1df3d:	01 00                	add    %eax,(%eax)
   1df3f:	31 db                	xor    %ebx,%ebx
   1df41:	01 00                	add    %eax,(%eax)
   1df43:	31 db                	xor    %ebx,%ebx
   1df45:	01 00                	add    %eax,(%eax)

0001df47 <kb_wait>:
   1df47:	50                   	push   %eax
   1df48:	e4 64                	in     $0x64,%al
   1df4a:	a8 02                	test   $0x2,%al
   1df4c:	75 fa                	jne    1df48 <kb_wait+0x1>
   1df4e:	58                   	pop    %eax
   1df4f:	c3                   	ret    

0001df50 <reboot>:
   1df50:	e8 f2 ff ff ff       	call   1df47 <kb_wait>
   1df55:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
   1df5c:	34 12 
   1df5e:	b0 fc                	mov    $0xfc,%al
   1df60:	e6 64                	out    %al,$0x64

0001df62 <die>:
   1df62:	eb fe                	jmp    1df62 <die>

0001df64 <init>:
// 初始化串行端口。
// 设置指定串行端口的传输波特率（2400bps）并允许除了写保持寄存器空以外所有中断源。另外，在输出2字节的波特率因子时，须
// 首先设置线路控制寄存器的DLAB位（位7）。
// 参数：port是串行端口基地址，串口1 - 0x3F8；串口2 - 0x2F8。
static void init(int port)
{
   1df64:	83 ec 10             	sub    $0x10,%esp
	outb_p(0x80, port + 3);										/* set DLAB of line control reg */
   1df67:	8b 44 24 14          	mov    0x14(%esp),%eax
   1df6b:	8d 50 03             	lea    0x3(%eax),%edx
   1df6e:	b8 80 00 00 00       	mov    $0x80,%eax
   1df73:	ee                   	out    %al,(%dx)
   1df74:	eb 00                	jmp    1df76 <init+0x12>
   1df76:	eb 00                	jmp    1df78 <init+0x14>
	outb_p(0x30, port);											/* LS of divisor (48 -> 2400 bps */
   1df78:	b8 30 00 00 00       	mov    $0x30,%eax
   1df7d:	8b 54 24 14          	mov    0x14(%esp),%edx
   1df81:	ee                   	out    %al,(%dx)
   1df82:	eb 00                	jmp    1df84 <init+0x20>
   1df84:	eb 00                	jmp    1df86 <init+0x22>
	outb_p(0x00, port + 1);										/* MS of divisor */
   1df86:	8b 44 24 14          	mov    0x14(%esp),%eax
   1df8a:	8d 50 01             	lea    0x1(%eax),%edx
   1df8d:	b8 00 00 00 00       	mov    $0x0,%eax
   1df92:	ee                   	out    %al,(%dx)
   1df93:	eb 00                	jmp    1df95 <init+0x31>
   1df95:	eb 00                	jmp    1df97 <init+0x33>
	outb_p(0x03, port + 3);										/* reset DLAB */
   1df97:	8b 44 24 14          	mov    0x14(%esp),%eax
   1df9b:	8d 50 03             	lea    0x3(%eax),%edx
   1df9e:	b8 03 00 00 00       	mov    $0x3,%eax
   1dfa3:	ee                   	out    %al,(%dx)
   1dfa4:	eb 00                	jmp    1dfa6 <init+0x42>
   1dfa6:	eb 00                	jmp    1dfa8 <init+0x44>
	outb_p(0x0b, port + 4);										/* set DTR,RTS, OUT_2 */
   1dfa8:	8b 44 24 14          	mov    0x14(%esp),%eax
   1dfac:	8d 50 04             	lea    0x4(%eax),%edx
   1dfaf:	b8 0b 00 00 00       	mov    $0xb,%eax
   1dfb4:	ee                   	out    %al,(%dx)
   1dfb5:	eb 00                	jmp    1dfb7 <init+0x53>
   1dfb7:	eb 00                	jmp    1dfb9 <init+0x55>
	outb_p(0x0d, port + 1);										/* enable all intrs but writes */
   1dfb9:	8b 44 24 14          	mov    0x14(%esp),%eax
   1dfbd:	8d 50 01             	lea    0x1(%eax),%edx
   1dfc0:	b8 0d 00 00 00       	mov    $0xd,%eax
   1dfc5:	ee                   	out    %al,(%dx)
   1dfc6:	eb 00                	jmp    1dfc8 <init+0x64>
   1dfc8:	eb 00                	jmp    1dfca <init+0x66>
	(void)inb(port);											/* read data port to reset things (?) */
   1dfca:	8b 44 24 14          	mov    0x14(%esp),%eax
   1dfce:	89 c2                	mov    %eax,%edx
   1dfd0:	ec                   	in     (%dx),%al
   1dfd1:	88 44 24 0f          	mov    %al,0xf(%esp)
}
   1dfd5:	90                   	nop
   1dfd6:	83 c4 10             	add    $0x10,%esp
   1dfd9:	c3                   	ret    

0001dfda <rs_init>:

// 初始化串行中断程序和串行接口。
// 中断描述符表IDT中的门描述符设置宏set_intr_gate()在include/asm/system.h中实现。
void rs_init(void)
{
   1dfda:	53                   	push   %ebx
   1dfdb:	83 ec 10             	sub    $0x10,%esp
	// 下面两句用于设置两个串行口的中断门描述符。rs1_interrupt是口串1的中断处理过程指针。
	// 串口1使用的中断是int 0x24，串口2的是int 0x23。
	set_intr_gate(0x24, rs1_interrupt);      					// 设置串行口1的中断向量（IRQ4信号）。
   1dfde:	b9 d8 55 00 00       	mov    $0x55d8,%ecx
   1dfe3:	bb dc 55 00 00       	mov    $0x55dc,%ebx
   1dfe8:	ba b8 e0 01 00       	mov    $0x1e0b8,%edx
   1dfed:	b8 00 00 08 00       	mov    $0x80000,%eax
   1dff2:	66 89 d0             	mov    %dx,%ax
   1dff5:	66 ba 00 8e          	mov    $0x8e00,%dx
   1dff9:	89 01                	mov    %eax,(%ecx)
   1dffb:	89 13                	mov    %edx,(%ebx)
	set_intr_gate(0x23, rs2_interrupt);      					// 设置串行口2的中断向量（IRQ3信号）。
   1dffd:	b9 d0 55 00 00       	mov    $0x55d0,%ecx
   1e002:	bb d4 55 00 00       	mov    $0x55d4,%ebx
   1e007:	ba c0 e0 01 00       	mov    $0x1e0c0,%edx
   1e00c:	b8 00 00 08 00       	mov    $0x80000,%eax
   1e011:	66 89 d0             	mov    %dx,%ax
   1e014:	66 ba 00 8e          	mov    $0x8e00,%dx
   1e018:	89 01                	mov    %eax,(%ecx)
   1e01a:	89 13                	mov    %edx,(%ebx)
	init(tty_table[64].read_q->data);       					// 初始化串行口1（.data是端口基地址）。
   1e01c:	a1 54 28 04 00       	mov    0x42854,%eax
   1e021:	8b 00                	mov    (%eax),%eax
   1e023:	50                   	push   %eax
   1e024:	e8 3b ff ff ff       	call   1df64 <init>
   1e029:	83 c4 04             	add    $0x4,%esp
	init(tty_table[65].read_q->data);       					// 初始化串行口2.
   1e02c:	a1 94 28 04 00       	mov    0x42894,%eax
   1e031:	8b 00                	mov    (%eax),%eax
   1e033:	50                   	push   %eax
   1e034:	e8 2b ff ff ff       	call   1df64 <init>
   1e039:	83 c4 04             	add    $0x4,%esp
	outb(inb_p(0x21) & 0xE7, 0x21);            					// 允许主8259A响应IRQ3、IRQ4中断请求。
   1e03c:	b8 21 00 00 00       	mov    $0x21,%eax
   1e041:	89 c2                	mov    %eax,%edx
   1e043:	ec                   	in     (%dx),%al
   1e044:	eb 00                	jmp    1e046 <rs_init+0x6c>
   1e046:	eb 00                	jmp    1e048 <rs_init+0x6e>
   1e048:	88 44 24 0f          	mov    %al,0xf(%esp)
   1e04c:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   1e051:	0f b6 c0             	movzbl %al,%eax
   1e054:	25 e7 00 00 00       	and    $0xe7,%eax
   1e059:	ba 21 00 00 00       	mov    $0x21,%edx
   1e05e:	ee                   	out    %al,(%dx)
}
   1e05f:	90                   	nop
   1e060:	83 c4 10             	add    $0x10,%esp
   1e063:	5b                   	pop    %ebx
   1e064:	c3                   	ret    

0001e065 <rs_write>:
// 串行数据发送输出。
// 该函数实际上只是开启发送保持寄存器已空中断标志。此后当发送保持寄存器空时，UART就会产生中断请求。而在该串行中断
// 处理过程中，程序会取出写队列尾指针处的字符，并输出到发送保持寄存器中。一旦UART把该字符发送出去，发送保持寄存器
// 中断允许标志复位掉，从而再次禁止发送保持寄存器空引发中断请求。此次“循环”发送操作也随之结束。
void rs_write(struct tty_struct * tty)
{
   1e065:	83 ec 10             	sub    $0x10,%esp
	// 如果写队列不空，则首先从0x3f9（或0x2f9）读取中断允许寄存器内容，添上发送保持寄存器中断允许标志（位1）后，再写
	// 回该寄存器。这样，当发送保持寄存器空时UART就能够因期望获得欲发送的字符而引发中断。write_q.data中是串行端口基
	// 地址。
	cli();
   1e068:	fa                   	cli    
	if (!EMPTY(tty->write_q))
   1e069:	8b 44 24 14          	mov    0x14(%esp),%eax
   1e06d:	8b 40 38             	mov    0x38(%eax),%eax
   1e070:	8b 50 04             	mov    0x4(%eax),%edx
   1e073:	8b 44 24 14          	mov    0x14(%esp),%eax
   1e077:	8b 40 38             	mov    0x38(%eax),%eax
   1e07a:	8b 40 08             	mov    0x8(%eax),%eax
   1e07d:	39 c2                	cmp    %eax,%edx
   1e07f:	74 2f                	je     1e0b0 <rs_write+0x4b>
		outb(inb_p(tty->write_q->data + 1) | 0x02, tty->write_q->data + 1);
   1e081:	8b 44 24 14          	mov    0x14(%esp),%eax
   1e085:	8b 40 38             	mov    0x38(%eax),%eax
   1e088:	8b 00                	mov    (%eax),%eax
   1e08a:	83 c0 01             	add    $0x1,%eax
   1e08d:	89 c2                	mov    %eax,%edx
   1e08f:	ec                   	in     (%dx),%al
   1e090:	eb 00                	jmp    1e092 <rs_write+0x2d>
   1e092:	eb 00                	jmp    1e094 <rs_write+0x2f>
   1e094:	88 44 24 0f          	mov    %al,0xf(%esp)
   1e098:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   1e09d:	83 c8 02             	or     $0x2,%eax
   1e0a0:	0f b6 c0             	movzbl %al,%eax
   1e0a3:	8b 54 24 14          	mov    0x14(%esp),%edx
   1e0a7:	8b 52 38             	mov    0x38(%edx),%edx
   1e0aa:	8b 12                	mov    (%edx),%edx
   1e0ac:	83 c2 01             	add    $0x1,%edx
   1e0af:	ee                   	out    %al,(%dx)
	sti();
   1e0b0:	fb                   	sti    
}
   1e0b1:	90                   	nop
   1e0b2:	83 c4 10             	add    $0x10,%esp
   1e0b5:	c3                   	ret    
   1e0b6:	66 90                	xchg   %ax,%ax

0001e0b8 <rs1_interrupt>:
   1e0b8:	68 2c e5 02 00       	push   $0x2e52c
   1e0bd:	eb 06                	jmp    1e0c5 <rs_int>
   1e0bf:	90                   	nop

0001e0c0 <rs2_interrupt>:
   1e0c0:	68 34 e5 02 00       	push   $0x2e534

0001e0c5 <rs_int>:
   1e0c5:	52                   	push   %edx
   1e0c6:	51                   	push   %ecx
   1e0c7:	53                   	push   %ebx
   1e0c8:	50                   	push   %eax
   1e0c9:	06                   	push   %es
   1e0ca:	1e                   	push   %ds
   1e0cb:	6a 10                	push   $0x10
   1e0cd:	1f                   	pop    %ds
   1e0ce:	6a 10                	push   $0x10
   1e0d0:	07                   	pop    %es
   1e0d1:	8b 54 24 18          	mov    0x18(%esp),%edx
   1e0d5:	8b 12                	mov    (%edx),%edx
   1e0d7:	8b 12                	mov    (%edx),%edx
   1e0d9:	83 c2 02             	add    $0x2,%edx

0001e0dc <rep_int>:
   1e0dc:	31 c0                	xor    %eax,%eax
   1e0de:	ec                   	in     (%dx),%al
   1e0df:	a8 01                	test   $0x1,%al
   1e0e1:	75 16                	jne    1e0f9 <end>
   1e0e3:	3c 06                	cmp    $0x6,%al
   1e0e5:	77 12                	ja     1e0f9 <end>
   1e0e7:	8b 4c 24 18          	mov    0x18(%esp),%ecx
   1e0eb:	52                   	push   %edx
   1e0ec:	83 ea 02             	sub    $0x2,%edx
   1e0ef:	ff 14 45 07 e1 01 00 	call   *0x1e107(,%eax,2)
   1e0f6:	5a                   	pop    %edx
   1e0f7:	eb e3                	jmp    1e0dc <rep_int>

0001e0f9 <end>:
   1e0f9:	b0 20                	mov    $0x20,%al
   1e0fb:	e6 20                	out    %al,$0x20
   1e0fd:	1f                   	pop    %ds
   1e0fe:	07                   	pop    %es
   1e0ff:	58                   	pop    %eax
   1e100:	5b                   	pop    %ebx
   1e101:	59                   	pop    %ecx
   1e102:	5a                   	pop    %edx
   1e103:	83 c4 04             	add    $0x4,%esp
   1e106:	cf                   	iret   

0001e107 <jmp_table>:
   1e107:	18 e1                	sbb    %ah,%cl
   1e109:	01 00                	add    %eax,(%eax)
   1e10b:	5c                   	pop    %esp
   1e10c:	e1 01                	loope  1e10f <jmp_table+0x8>
   1e10e:	00 28                	add    %ch,(%eax)
   1e110:	e1 01                	loope  1e113 <jmp_table+0xc>
   1e112:	00 20                	add    %ah,(%eax)
   1e114:	e1 01                	loope  1e117 <jmp_table+0x10>
   1e116:	00                   	.byte 0x0
   1e117:	90                   	nop

0001e118 <modem_status>:
   1e118:	83 c2 06             	add    $0x6,%edx
   1e11b:	ec                   	in     (%dx),%al
   1e11c:	c3                   	ret    
   1e11d:	8d 76 00             	lea    0x0(%esi),%esi

0001e120 <line_status>:
   1e120:	83 c2 05             	add    $0x5,%edx
   1e123:	ec                   	in     (%dx),%al
   1e124:	c3                   	ret    
   1e125:	8d 76 00             	lea    0x0(%esi),%esi

0001e128 <read_char>:
   1e128:	ec                   	in     (%dx),%al
   1e129:	89 ca                	mov    %ecx,%edx
   1e12b:	81 ea 24 e5 02 00    	sub    $0x2e524,%edx
   1e131:	c1 ea 03             	shr    $0x3,%edx
   1e134:	8b 09                	mov    (%ecx),%ecx
   1e136:	8b 59 04             	mov    0x4(%ecx),%ebx
   1e139:	88 44 19 10          	mov    %al,0x10(%ecx,%ebx,1)
   1e13d:	43                   	inc    %ebx
   1e13e:	81 e3 ff 03 00 00    	and    $0x3ff,%ebx
   1e144:	3b 59 08             	cmp    0x8(%ecx),%ebx
   1e147:	74 03                	je     1e14c <read_char+0x24>
   1e149:	89 59 04             	mov    %ebx,0x4(%ecx)
   1e14c:	83 c2 3f             	add    $0x3f,%edx
   1e14f:	52                   	push   %edx
   1e150:	e8 fc b9 ff ff       	call   19b51 <do_tty_interrupt>
   1e155:	83 c4 04             	add    $0x4,%esp
   1e158:	c3                   	ret    
   1e159:	8d 76 00             	lea    0x0(%esi),%esi

0001e15c <write_char>:
   1e15c:	8b 49 04             	mov    0x4(%ecx),%ecx
   1e15f:	8b 59 04             	mov    0x4(%ecx),%ebx
   1e162:	2b 59 08             	sub    0x8(%ecx),%ebx
   1e165:	81 e3 ff 03 00 00    	and    $0x3ff,%ebx
   1e16b:	74 2f                	je     1e19c <write_buffer_empty>
   1e16d:	81 fb 00 01 00 00    	cmp    $0x100,%ebx
   1e173:	77 0d                	ja     1e182 <write_char+0x26>
   1e175:	8b 59 0c             	mov    0xc(%ecx),%ebx
   1e178:	85 db                	test   %ebx,%ebx
   1e17a:	74 06                	je     1e182 <write_char+0x26>
   1e17c:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   1e182:	8b 59 08             	mov    0x8(%ecx),%ebx
   1e185:	8a 44 19 10          	mov    0x10(%ecx,%ebx,1),%al
   1e189:	ee                   	out    %al,(%dx)
   1e18a:	43                   	inc    %ebx
   1e18b:	81 e3 ff 03 00 00    	and    $0x3ff,%ebx
   1e191:	89 59 08             	mov    %ebx,0x8(%ecx)
   1e194:	3b 59 04             	cmp    0x4(%ecx),%ebx
   1e197:	74 03                	je     1e19c <write_buffer_empty>
   1e199:	c3                   	ret    
   1e19a:	66 90                	xchg   %ax,%ax

0001e19c <write_buffer_empty>:
   1e19c:	8b 59 0c             	mov    0xc(%ecx),%ebx
   1e19f:	85 db                	test   %ebx,%ebx
   1e1a1:	74 06                	je     1e1a9 <write_buffer_empty+0xd>
   1e1a3:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   1e1a9:	42                   	inc    %edx
   1e1aa:	ec                   	in     (%dx),%al
   1e1ab:	eb 00                	jmp    1e1ad <write_buffer_empty+0x11>
   1e1ad:	eb 00                	jmp    1e1af <write_buffer_empty+0x13>
   1e1af:	24 0d                	and    $0xd,%al
   1e1b1:	ee                   	out    %al,(%dx)
   1e1b2:	c3                   	ret    

0001e1b3 <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
   1e1b3:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   1e1b4:	8b 44 24 08          	mov    0x8(%esp),%eax
   1e1b8:	64 8a 00             	mov    %fs:(%eax),%al
   1e1bb:	89 c3                	mov    %eax,%ebx
	return _v;
   1e1bd:	89 d8                	mov    %ebx,%eax
}
   1e1bf:	5b                   	pop    %ebx
   1e1c0:	c3                   	ret    

0001e1c1 <get_fs_long>:
//// 读取fs段中指定地址处的长字(4字节).
// 参数:addr - 指定的内存地址.
// %0 - (返回的长字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的长字.
static inline unsigned long get_fs_long(const unsigned long *addr)
{
   1e1c1:	83 ec 10             	sub    $0x10,%esp
	unsigned long _v;

	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
   1e1c4:	8b 44 24 14          	mov    0x14(%esp),%eax
   1e1c8:	64 8b 00             	mov    %fs:(%eax),%eax
   1e1cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
   1e1cf:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   1e1d3:	83 c4 10             	add    $0x10,%esp
   1e1d6:	c3                   	ret    

0001e1d7 <put_fs_byte>:

//// 将一字节存放在fs段中指定内存地址处.
// 参数:val - 字节值;addr - 内存地址.
// %0 - 寄存器(字节值val);%1 - (内存地址addr).
static inline void put_fs_byte(char val,char *addr)
{
   1e1d7:	83 ec 04             	sub    $0x4,%esp
   1e1da:	8b 44 24 08          	mov    0x8(%esp),%eax
   1e1de:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   1e1e1:	0f b6 04 24          	movzbl (%esp),%eax
   1e1e5:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e1e9:	64 88 02             	mov    %al,%fs:(%edx)
}
   1e1ec:	90                   	nop
   1e1ed:	83 c4 04             	add    $0x4,%esp
   1e1f0:	c3                   	ret    

0001e1f1 <put_fs_long>:
//// 将一长字存放在fs段中指定内存地址处.
// 参数:val - 长字值;addr - 内存地址.
// %0 - 寄存器(长字值val);%1 - (内存地址addr).
static inline void put_fs_long(unsigned long val,unsigned long * addr)
{
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
   1e1f1:	8b 44 24 04          	mov    0x4(%esp),%eax
   1e1f5:	8b 54 24 08          	mov    0x8(%esp),%edx
   1e1f9:	64 89 02             	mov    %eax,%fs:(%edx)
}
   1e1fc:	90                   	nop
   1e1fd:	c3                   	ret    

0001e1fe <change_speed>:
// 修改传输波特率。
// 参数：tty - 终端对应的tty数据结构。
// 在除数锁存标志DLAB置位情况下，通过端口0x3f8和0x3f9向UART分别写入波特率因子低字节和高字节。写完后再复位DLAB
// 位。对于串口2,这两个端口分别是0x2f8和0x2f9。
static void change_speed(struct tty_struct * tty)
{
   1e1fe:	83 ec 10             	sub    $0x10,%esp

	// 函数首先检查参数tty指定的终端是否是串行终端，若不是则退出。对于串口终端的tty结构，其读缓冲队列data字段存放着
	// 串行端口基址（0x3f8或0x2f8），而一般控制台终端的tty结构的read_q.data字段值为0。然后从终端termios结构的控制
	// 模式标志集中取得已设置的波特率索引号，并据此从波特率因子数组quotient[]中取得对应的波特率因子值quot。CBAUD是
	// 控制模式标志集中波特率位屏蔽码。
	if (!(port = tty->read_q->data))
   1e201:	8b 44 24 14          	mov    0x14(%esp),%eax
   1e205:	8b 40 34             	mov    0x34(%eax),%eax
   1e208:	8b 00                	mov    (%eax),%eax
   1e20a:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
   1e20f:	66 83 7c 24 0e 00    	cmpw   $0x0,0xe(%esp)
   1e215:	74 66                	je     1e27d <change_speed+0x7f>
		return;
	quot = quotient[tty->termios.c_cflag & CBAUD];
   1e217:	8b 44 24 14          	mov    0x14(%esp),%eax
   1e21b:	8b 40 08             	mov    0x8(%eax),%eax
   1e21e:	83 e0 0f             	and    $0xf,%eax
   1e221:	0f b7 84 00 60 e5 02 	movzwl 0x2e560(%eax,%eax,1),%eax
   1e228:	00 
   1e229:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	// 接着把波特率因子quot写入串行端口对应UART芯片的波特率因子锁存器中。在写之前我们先要把线路控制寄存器LCR的除数锁存
	// 访问位DLAB（位7）置1。然后把16位的波特率因子低、高字节分别写入端口0x3f8、0x3f9（分别对应波特率因子低、高字节
	// 锁存器）。最后再复位LCR的DLAB标志位。
	cli();
   1e22e:	fa                   	cli    
	outb_p(0x80, port + 3);									/* set DLAB */          // 首先设置除数锁定标志DLAB。
   1e22f:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
   1e234:	8d 50 03             	lea    0x3(%eax),%edx
   1e237:	b8 80 00 00 00       	mov    $0x80,%eax
   1e23c:	ee                   	out    %al,(%dx)
   1e23d:	eb 00                	jmp    1e23f <change_speed+0x41>
   1e23f:	eb 00                	jmp    1e241 <change_speed+0x43>
	outb_p(quot & 0xff, port);								/* LS of divisor */     // 输出因子低字节。
   1e241:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   1e246:	0f b6 c0             	movzbl %al,%eax
   1e249:	0f b7 54 24 0e       	movzwl 0xe(%esp),%edx
   1e24e:	ee                   	out    %al,(%dx)
   1e24f:	eb 00                	jmp    1e251 <change_speed+0x53>
   1e251:	eb 00                	jmp    1e253 <change_speed+0x55>
	outb_p(quot >> 8, port + 1);							/* MS of divisor */     // 输出因子高字节。
   1e253:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   1e258:	66 c1 e8 08          	shr    $0x8,%ax
   1e25c:	0f b7 c0             	movzwl %ax,%eax
   1e25f:	0f b7 54 24 0e       	movzwl 0xe(%esp),%edx
   1e264:	83 c2 01             	add    $0x1,%edx
   1e267:	ee                   	out    %al,(%dx)
   1e268:	eb 00                	jmp    1e26a <change_speed+0x6c>
   1e26a:	eb 00                	jmp    1e26c <change_speed+0x6e>
	outb(0x03, port + 3);									/* reset DLAB */        // 复位DLAB。
   1e26c:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
   1e271:	8d 50 03             	lea    0x3(%eax),%edx
   1e274:	b8 03 00 00 00       	mov    $0x3,%eax
   1e279:	ee                   	out    %al,(%dx)
	sti();
   1e27a:	fb                   	sti    
   1e27b:	eb 01                	jmp    1e27e <change_speed+0x80>
	// 函数首先检查参数tty指定的终端是否是串行终端，若不是则退出。对于串口终端的tty结构，其读缓冲队列data字段存放着
	// 串行端口基址（0x3f8或0x2f8），而一般控制台终端的tty结构的read_q.data字段值为0。然后从终端termios结构的控制
	// 模式标志集中取得已设置的波特率索引号，并据此从波特率因子数组quotient[]中取得对应的波特率因子值quot。CBAUD是
	// 控制模式标志集中波特率位屏蔽码。
	if (!(port = tty->read_q->data))
		return;
   1e27d:	90                   	nop
	outb_p(0x80, port + 3);									/* set DLAB */          // 首先设置除数锁定标志DLAB。
	outb_p(quot & 0xff, port);								/* LS of divisor */     // 输出因子低字节。
	outb_p(quot >> 8, port + 1);							/* MS of divisor */     // 输出因子高字节。
	outb(0x03, port + 3);									/* reset DLAB */        // 复位DLAB。
	sti();
}
   1e27e:	83 c4 10             	add    $0x10,%esp
   1e281:	c3                   	ret    

0001e282 <flush>:
// 刷新tty缓冲队列。
// 参数：queue - 指定的缓冲队列指针。
// 令缓冲队列的头指针等于尾指针，从而达到清空缓冲区的目的。
static void flush(struct tty_queue * queue)
{
	cli();
   1e282:	fa                   	cli    
	queue->head = queue->tail;
   1e283:	8b 44 24 04          	mov    0x4(%esp),%eax
   1e287:	8b 50 08             	mov    0x8(%eax),%edx
   1e28a:	8b 44 24 04          	mov    0x4(%esp),%eax
   1e28e:	89 50 04             	mov    %edx,0x4(%eax)
	sti();
   1e291:	fb                   	sti    
}
   1e292:	90                   	nop
   1e293:	c3                   	ret    

0001e294 <wait_until_sent>:

// 等待字符发送出去。
static void wait_until_sent(struct tty_struct * tty)
{
	/* do nothing - not implemented */      /* 什么都没做 - 还未实现 */
}
   1e294:	90                   	nop
   1e295:	c3                   	ret    

0001e296 <send_break>:

// 发送BREAK控制符。
static void send_break(struct tty_struct * tty)
{
	/* do nothing - not implemented */      /* 什么都没做 - 还未实现 */
}
   1e296:	90                   	nop
   1e297:	c3                   	ret    

0001e298 <get_termios>:

// 取终端termios结构信息。
// 参数：tty - 指定终端的tty结构指针；termios - 存放termios结构的用户缓冲区。
static int get_termios(struct tty_struct * tty, struct termios * termios)
{
   1e298:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	// 首先验证用户缓冲区指针所指内存区容量是否足够，如不够则分配内存。然后复制指定终端的termios结构信息到用户缓冲区中。
	// 最后返回0.
	verify_area(termios, sizeof (*termios));
   1e29b:	83 ec 08             	sub    $0x8,%esp
   1e29e:	6a 24                	push   $0x24
   1e2a0:	ff 74 24 30          	pushl  0x30(%esp)
   1e2a4:	e8 fa a0 fe ff       	call   83a3 <verify_area>
   1e2a9:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i < (sizeof (*termios)) ; i++)
   1e2ac:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   1e2b3:	00 
   1e2b4:	eb 2c                	jmp    1e2e2 <get_termios+0x4a>
		put_fs_byte( ((char *) & tty->termios)[i] , i + (char *)termios );
   1e2b6:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e2ba:	8b 44 24 24          	mov    0x24(%esp),%eax
   1e2be:	01 c2                	add    %eax,%edx
   1e2c0:	8b 4c 24 20          	mov    0x20(%esp),%ecx
   1e2c4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e2c8:	01 c8                	add    %ecx,%eax
   1e2ca:	0f b6 00             	movzbl (%eax),%eax
   1e2cd:	0f be c0             	movsbl %al,%eax
   1e2d0:	83 ec 08             	sub    $0x8,%esp
   1e2d3:	52                   	push   %edx
   1e2d4:	50                   	push   %eax
   1e2d5:	e8 fd fe ff ff       	call   1e1d7 <put_fs_byte>
   1e2da:	83 c4 10             	add    $0x10,%esp
	int i;

	// 首先验证用户缓冲区指针所指内存区容量是否足够，如不够则分配内存。然后复制指定终端的termios结构信息到用户缓冲区中。
	// 最后返回0.
	verify_area(termios, sizeof (*termios));
	for (i = 0 ; i < (sizeof (*termios)) ; i++)
   1e2dd:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   1e2e2:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e2e6:	83 f8 23             	cmp    $0x23,%eax
   1e2e9:	76 cb                	jbe    1e2b6 <get_termios+0x1e>
		put_fs_byte( ((char *) & tty->termios)[i] , i + (char *)termios );
	return 0;
   1e2eb:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1e2f0:	83 c4 1c             	add    $0x1c,%esp
   1e2f3:	c3                   	ret    

0001e2f4 <set_termios>:

// 设置终端termios结构信息。
// 参数：tty - 指定终端的tty结构指针；termios - 用户数据区termios结构指针。
static int set_termios(struct tty_struct * tty, struct termios * termios,
			int channel)
{
   1e2f4:	53                   	push   %ebx
   1e2f5:	83 ec 18             	sub    $0x18,%esp
     * 如果试图设置终端的状态但此时终端不在前台，那么我们就需要发送一个SIGTTOU
     * 信号。如果该信号被进程屏蔽或者忽略了，就直接执行本次操作。POSIX 7.2 */
	// 如果当前进程使用的tty终端的进程组号与进程的进程组号不同，即当前进程终端不在前台，表示当前进程试图修改不受控制的终端
	// 的termios结构。因此根据POSIX标准的要求这里需要发送SIGTTOU信号让使用这个终端的进程暂时停止执行，让我们先修改termios
	// 结构。如果发送信号函数tty_signal()返回值是ERESTARTSYS或EINTR，则等一会儿再执行本次操作。
	if ((current->tty == channel) && (tty->pgrp != current->pgrp)) {
   1e2f8:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1e2fd:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   1e303:	3b 44 24 28          	cmp    0x28(%esp),%eax
   1e307:	75 42                	jne    1e34b <set_termios+0x57>
   1e309:	8b 44 24 20          	mov    0x20(%esp),%eax
   1e30d:	8b 50 24             	mov    0x24(%eax),%edx
   1e310:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1e315:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
   1e31b:	39 c2                	cmp    %eax,%edx
   1e31d:	74 2c                	je     1e34b <set_termios+0x57>
		retsig = tty_signal(SIGTTOU, tty);
   1e31f:	83 ec 08             	sub    $0x8,%esp
   1e322:	ff 74 24 28          	pushl  0x28(%esp)
   1e326:	6a 16                	push   $0x16
   1e328:	e8 59 b0 ff ff       	call   19386 <tty_signal>
   1e32d:	83 c4 10             	add    $0x10,%esp
   1e330:	89 44 24 08          	mov    %eax,0x8(%esp)
		if (retsig == -ERESTARTSYS || retsig == -EINTR)
   1e334:	81 7c 24 08 00 fe ff 	cmpl   $0xfffffe00,0x8(%esp)
   1e33b:	ff 
   1e33c:	74 07                	je     1e345 <set_termios+0x51>
   1e33e:	83 7c 24 08 fc       	cmpl   $0xfffffffc,0x8(%esp)
   1e343:	75 06                	jne    1e34b <set_termios+0x57>
			return retsig;
   1e345:	8b 44 24 08          	mov    0x8(%esp),%eax
   1e349:	eb 4f                	jmp    1e39a <set_termios+0xa6>
	}
	// 接着把用户数据区中termios结构信息复制到指定终端tty结构的termios结构中。因为用户有可能已修改了终端串行口传输波特率，
	// 所以这里再根据termios结构中的控制模式标志c_cflag中的波特率信息修改串行UART芯片内的传输波特率。最后返回0。
	for (i = 0 ; i < (sizeof (*termios)) ; i++)
   1e34b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   1e352:	00 
   1e353:	eb 28                	jmp    1e37d <set_termios+0x89>
		((char *) & tty->termios)[i] = get_fs_byte(i + (char *)termios);
   1e355:	8b 54 24 20          	mov    0x20(%esp),%edx
   1e359:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e35d:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
   1e360:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e364:	8b 44 24 24          	mov    0x24(%esp),%eax
   1e368:	01 d0                	add    %edx,%eax
   1e36a:	83 ec 0c             	sub    $0xc,%esp
   1e36d:	50                   	push   %eax
   1e36e:	e8 40 fe ff ff       	call   1e1b3 <get_fs_byte>
   1e373:	83 c4 10             	add    $0x10,%esp
   1e376:	88 03                	mov    %al,(%ebx)
		if (retsig == -ERESTARTSYS || retsig == -EINTR)
			return retsig;
	}
	// 接着把用户数据区中termios结构信息复制到指定终端tty结构的termios结构中。因为用户有可能已修改了终端串行口传输波特率，
	// 所以这里再根据termios结构中的控制模式标志c_cflag中的波特率信息修改串行UART芯片内的传输波特率。最后返回0。
	for (i = 0 ; i < (sizeof (*termios)) ; i++)
   1e378:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   1e37d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e381:	83 f8 23             	cmp    $0x23,%eax
   1e384:	76 cf                	jbe    1e355 <set_termios+0x61>
		((char *) & tty->termios)[i] = get_fs_byte(i + (char *)termios);
	change_speed(tty);
   1e386:	83 ec 0c             	sub    $0xc,%esp
   1e389:	ff 74 24 2c          	pushl  0x2c(%esp)
   1e38d:	e8 6c fe ff ff       	call   1e1fe <change_speed>
   1e392:	83 c4 10             	add    $0x10,%esp
	return 0;
   1e395:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1e39a:	83 c4 18             	add    $0x18,%esp
   1e39d:	5b                   	pop    %ebx
   1e39e:	c3                   	ret    

0001e39f <get_termio>:

// 读取termio结构中的信息。
// 参数：tty - 指定终端的tty结构指针；termio - 保存termio结构信息的用户缓冲区。
static int get_termio(struct tty_struct * tty, struct termio * termio)
{
   1e39f:	83 ec 2c             	sub    $0x2c,%esp
	struct termio tmp_termio;

	// 首先验证用户的缓冲区指针所指内存区容量是否足够，如不够则分配内存。然后将termios结构的信息复制到临时termio结构中，
	// 这两个结构基本相同，输入、输出、控制和本地标志集数据类型不同。前者的是long，而后者的是short。因此先复制到临时
	// termio结构中目的是为了进行数据类型转换。
	verify_area(termio, sizeof (*termio));
   1e3a2:	83 ec 08             	sub    $0x8,%esp
   1e3a5:	6a 12                	push   $0x12
   1e3a7:	ff 74 24 40          	pushl  0x40(%esp)
   1e3ab:	e8 f3 9f fe ff       	call   83a3 <verify_area>
   1e3b0:	83 c4 10             	add    $0x10,%esp
	tmp_termio.c_iflag = tty->termios.c_iflag;
   1e3b3:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e3b7:	8b 00                	mov    (%eax),%eax
   1e3b9:	66 89 44 24 0a       	mov    %ax,0xa(%esp)
	tmp_termio.c_oflag = tty->termios.c_oflag;
   1e3be:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e3c2:	8b 40 04             	mov    0x4(%eax),%eax
   1e3c5:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	tmp_termio.c_cflag = tty->termios.c_cflag;
   1e3ca:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e3ce:	8b 40 08             	mov    0x8(%eax),%eax
   1e3d1:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	tmp_termio.c_lflag = tty->termios.c_lflag;
   1e3d6:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e3da:	8b 40 0c             	mov    0xc(%eax),%eax
   1e3dd:	66 89 44 24 10       	mov    %ax,0x10(%esp)
	tmp_termio.c_line = tty->termios.c_line;
   1e3e2:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e3e6:	0f b6 40 10          	movzbl 0x10(%eax),%eax
   1e3ea:	88 44 24 12          	mov    %al,0x12(%esp)
	for(i = 0 ; i < NCC ; i++)
   1e3ee:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   1e3f5:	00 
   1e3f6:	eb 21                	jmp    1e419 <get_termio+0x7a>
		tmp_termio.c_cc[i] = tty->termios.c_cc[i];
   1e3f8:	8b 54 24 30          	mov    0x30(%esp),%edx
   1e3fc:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1e400:	01 d0                	add    %edx,%eax
   1e402:	83 c0 11             	add    $0x11,%eax
   1e405:	0f b6 00             	movzbl (%eax),%eax
   1e408:	8d 4c 24 13          	lea    0x13(%esp),%ecx
   1e40c:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1e410:	01 ca                	add    %ecx,%edx
   1e412:	88 02                	mov    %al,(%edx)
	tmp_termio.c_iflag = tty->termios.c_iflag;
	tmp_termio.c_oflag = tty->termios.c_oflag;
	tmp_termio.c_cflag = tty->termios.c_cflag;
	tmp_termio.c_lflag = tty->termios.c_lflag;
	tmp_termio.c_line = tty->termios.c_line;
	for(i = 0 ; i < NCC ; i++)
   1e414:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   1e419:	83 7c 24 1c 07       	cmpl   $0x7,0x1c(%esp)
   1e41e:	7e d8                	jle    1e3f8 <get_termio+0x59>
		tmp_termio.c_cc[i] = tty->termios.c_cc[i];
	// 然后逐字节地把临时termio结构中的信息复制到用户termio结构缓冲区中。并返回0。
	for (i = 0 ; i < (sizeof (*termio)) ; i++)
   1e420:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   1e427:	00 
   1e428:	eb 2c                	jmp    1e456 <get_termio+0xb7>
		put_fs_byte( ((char *) & tmp_termio)[i] , i + (char *)termio );
   1e42a:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1e42e:	8b 44 24 34          	mov    0x34(%esp),%eax
   1e432:	01 c2                	add    %eax,%edx
   1e434:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1e438:	8d 4c 24 0a          	lea    0xa(%esp),%ecx
   1e43c:	01 c8                	add    %ecx,%eax
   1e43e:	0f b6 00             	movzbl (%eax),%eax
   1e441:	0f be c0             	movsbl %al,%eax
   1e444:	83 ec 08             	sub    $0x8,%esp
   1e447:	52                   	push   %edx
   1e448:	50                   	push   %eax
   1e449:	e8 89 fd ff ff       	call   1e1d7 <put_fs_byte>
   1e44e:	83 c4 10             	add    $0x10,%esp
	tmp_termio.c_lflag = tty->termios.c_lflag;
	tmp_termio.c_line = tty->termios.c_line;
	for(i = 0 ; i < NCC ; i++)
		tmp_termio.c_cc[i] = tty->termios.c_cc[i];
	// 然后逐字节地把临时termio结构中的信息复制到用户termio结构缓冲区中。并返回0。
	for (i = 0 ; i < (sizeof (*termio)) ; i++)
   1e451:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   1e456:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1e45a:	83 f8 11             	cmp    $0x11,%eax
   1e45d:	76 cb                	jbe    1e42a <get_termio+0x8b>
		put_fs_byte( ((char *) & tmp_termio)[i] , i + (char *)termio );
	return 0;
   1e45f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1e464:	83 c4 2c             	add    $0x2c,%esp
   1e467:	c3                   	ret    

0001e468 <set_termio>:
// 设置终端termio结构信息。
// 参数：tty - 指定终端的tty结构指针；termio - 用户数据区中termio结构。
// 将用户缓冲区termio的信息复制到终端的termios结构中。返回0。
static int set_termio(struct tty_struct * tty, struct termio * termio,
			int channel)
{
   1e468:	53                   	push   %ebx
   1e469:	83 ec 28             	sub    $0x28,%esp

	// 与set_termios()一样，如果进程使用的终端的进程组号的进程组号与进程的进程组号不同，即当前进程终端不在前台，表示当前
	// 进程试图修改不受控制的终端的termios结构。因此根据POSIX标准的要求这里需要发送SIGTTOU信号让使用这个终端的进程先暂
	// 时停止执行，以让我们先修改termios结构。如果发送信号函数tty_signal()返回值是ERESTARTSYS或EINTR，则等一会再执行
	// 本次操作。
	if ((current->tty == channel) && (tty->pgrp != current->pgrp)) {
   1e46c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1e471:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   1e477:	3b 44 24 38          	cmp    0x38(%esp),%eax
   1e47b:	75 45                	jne    1e4c2 <set_termio+0x5a>
   1e47d:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e481:	8b 50 24             	mov    0x24(%eax),%edx
   1e484:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1e489:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
   1e48f:	39 c2                	cmp    %eax,%edx
   1e491:	74 2f                	je     1e4c2 <set_termio+0x5a>
		retsig = tty_signal(SIGTTOU, tty);
   1e493:	83 ec 08             	sub    $0x8,%esp
   1e496:	ff 74 24 38          	pushl  0x38(%esp)
   1e49a:	6a 16                	push   $0x16
   1e49c:	e8 e5 ae ff ff       	call   19386 <tty_signal>
   1e4a1:	83 c4 10             	add    $0x10,%esp
   1e4a4:	89 44 24 18          	mov    %eax,0x18(%esp)
		if (retsig == -ERESTARTSYS || retsig == -EINTR)
   1e4a8:	81 7c 24 18 00 fe ff 	cmpl   $0xfffffe00,0x18(%esp)
   1e4af:	ff 
   1e4b0:	74 07                	je     1e4b9 <set_termio+0x51>
   1e4b2:	83 7c 24 18 fc       	cmpl   $0xfffffffc,0x18(%esp)
   1e4b7:	75 09                	jne    1e4c2 <set_termio+0x5a>
			return retsig;
   1e4b9:	8b 44 24 18          	mov    0x18(%esp),%eax
   1e4bd:	e9 c6 00 00 00       	jmp    1e588 <set_termio+0x120>
	}
	// 接着复制用户数据区中termio结构信息到临时termio结构中。然后再将termio结构的信息复制到tty的termios结构中。这样做
	// 的目的是为了对其中模式标志集的类型进行转换，即从termio的短整数类型转换成termios的长整数类型。但两种结构的c_line和
	// c_cc[]字段是完全相同的。
	for (i = 0 ; i< (sizeof (*termio)) ; i++)
   1e4c2:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   1e4c9:	00 
   1e4ca:	eb 28                	jmp    1e4f4 <set_termio+0x8c>
		((char *)&tmp_termio)[i] = get_fs_byte(i + (char *)termio);
   1e4cc:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1e4d0:	8d 54 24 06          	lea    0x6(%esp),%edx
   1e4d4:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
   1e4d7:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1e4db:	8b 44 24 34          	mov    0x34(%esp),%eax
   1e4df:	01 d0                	add    %edx,%eax
   1e4e1:	83 ec 0c             	sub    $0xc,%esp
   1e4e4:	50                   	push   %eax
   1e4e5:	e8 c9 fc ff ff       	call   1e1b3 <get_fs_byte>
   1e4ea:	83 c4 10             	add    $0x10,%esp
   1e4ed:	88 03                	mov    %al,(%ebx)
			return retsig;
	}
	// 接着复制用户数据区中termio结构信息到临时termio结构中。然后再将termio结构的信息复制到tty的termios结构中。这样做
	// 的目的是为了对其中模式标志集的类型进行转换，即从termio的短整数类型转换成termios的长整数类型。但两种结构的c_line和
	// c_cc[]字段是完全相同的。
	for (i = 0 ; i< (sizeof (*termio)) ; i++)
   1e4ef:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   1e4f4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1e4f8:	83 f8 11             	cmp    $0x11,%eax
   1e4fb:	76 cf                	jbe    1e4cc <set_termio+0x64>
		((char *)&tmp_termio)[i] = get_fs_byte(i + (char *)termio);
	*(unsigned short *)&tty->termios.c_iflag = tmp_termio.c_iflag;
   1e4fd:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e501:	0f b7 54 24 06       	movzwl 0x6(%esp),%edx
   1e506:	66 89 10             	mov    %dx,(%eax)
	*(unsigned short *)&tty->termios.c_oflag = tmp_termio.c_oflag;
   1e509:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e50d:	8d 50 04             	lea    0x4(%eax),%edx
   1e510:	0f b7 44 24 08       	movzwl 0x8(%esp),%eax
   1e515:	66 89 02             	mov    %ax,(%edx)
	*(unsigned short *)&tty->termios.c_cflag = tmp_termio.c_cflag;
   1e518:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e51c:	8d 50 08             	lea    0x8(%eax),%edx
   1e51f:	0f b7 44 24 0a       	movzwl 0xa(%esp),%eax
   1e524:	66 89 02             	mov    %ax,(%edx)
	*(unsigned short *)&tty->termios.c_lflag = tmp_termio.c_lflag;
   1e527:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e52b:	8d 50 0c             	lea    0xc(%eax),%edx
   1e52e:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   1e533:	66 89 02             	mov    %ax,(%edx)
	tty->termios.c_line = tmp_termio.c_line;
   1e536:	0f b6 54 24 0e       	movzbl 0xe(%esp),%edx
   1e53b:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e53f:	88 50 10             	mov    %dl,0x10(%eax)
	for(i = 0 ; i < NCC ; i++)
   1e542:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   1e549:	00 
   1e54a:	eb 21                	jmp    1e56d <set_termio+0x105>
		tty->termios.c_cc[i] = tmp_termio.c_cc[i];
   1e54c:	8d 54 24 0f          	lea    0xf(%esp),%edx
   1e550:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1e554:	01 d0                	add    %edx,%eax
   1e556:	0f b6 00             	movzbl (%eax),%eax
   1e559:	8b 4c 24 30          	mov    0x30(%esp),%ecx
   1e55d:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1e561:	01 ca                	add    %ecx,%edx
   1e563:	83 c2 11             	add    $0x11,%edx
   1e566:	88 02                	mov    %al,(%edx)
	*(unsigned short *)&tty->termios.c_iflag = tmp_termio.c_iflag;
	*(unsigned short *)&tty->termios.c_oflag = tmp_termio.c_oflag;
	*(unsigned short *)&tty->termios.c_cflag = tmp_termio.c_cflag;
	*(unsigned short *)&tty->termios.c_lflag = tmp_termio.c_lflag;
	tty->termios.c_line = tmp_termio.c_line;
	for(i = 0 ; i < NCC ; i++)
   1e568:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   1e56d:	83 7c 24 1c 07       	cmpl   $0x7,0x1c(%esp)
   1e572:	7e d8                	jle    1e54c <set_termio+0xe4>
		tty->termios.c_cc[i] = tmp_termio.c_cc[i];
	// 最后因为用户有可能已修改了终端串行口传输波特率，所以这里再根据termios结构中的控制模式标志c_cflag中的波特率信息修改
	// 串行UART芯片内的传输波特率，并返回0。
	change_speed(tty);
   1e574:	83 ec 0c             	sub    $0xc,%esp
   1e577:	ff 74 24 3c          	pushl  0x3c(%esp)
   1e57b:	e8 7e fc ff ff       	call   1e1fe <change_speed>
   1e580:	83 c4 10             	add    $0x10,%esp
	return 0;
   1e583:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1e588:	83 c4 28             	add    $0x28,%esp
   1e58b:	5b                   	pop    %ebx
   1e58c:	c3                   	ret    

0001e58d <tty_ioctl>:

// tty终端设备输入输出控制函数。
// 参数：dev - 设备号；cmd - ioctl命令；arg - 操作参数指针。
// 该函数首先根据参数给出的设备号找出对应终端的tty结构，然后根据控制命令cmd分别进行处理。
int tty_ioctl(int dev, int cmd, int arg)
{
   1e58d:	83 ec 1c             	sub    $0x1c,%esp
	int	pgrp;

	// 首先根据设备号取得tty子设备号，从而取得终端的tty结构。若主设备号是5（控制终端），则进程的tty字段即是tty子设备
	// 号。此时如果进程的tty子设备号是负数，表明该进程没有控制终端，即不能发出该ioctl调用，于是显示出错信息并停机。如果
	// 主设备号不是5而是4,我们就可以从设备号中取出子设备号。子设备号可以是0（控制台终端）、1（串口1终端）、2（串口2终端）。
	if (MAJOR(dev) == 5) {
   1e590:	8b 44 24 20          	mov    0x20(%esp),%eax
   1e594:	c1 e8 08             	shr    $0x8,%eax
   1e597:	83 f8 05             	cmp    $0x5,%eax
   1e59a:	75 28                	jne    1e5c4 <tty_ioctl+0x37>
		dev = current->tty;
   1e59c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1e5a1:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   1e5a7:	89 44 24 20          	mov    %eax,0x20(%esp)
		if (dev < 0)
   1e5ab:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   1e5b0:	79 1a                	jns    1e5cc <tty_ioctl+0x3f>
			panic("tty_ioctl: dev<0");
   1e5b2:	83 ec 0c             	sub    $0xc,%esp
   1e5b5:	68 60 51 02 00       	push   $0x25160
   1e5ba:	e8 49 a6 fe ff       	call   8c08 <panic>
   1e5bf:	83 c4 10             	add    $0x10,%esp
   1e5c2:	eb 08                	jmp    1e5cc <tty_ioctl+0x3f>
	} else
		dev = MINOR(dev);
   1e5c4:	81 64 24 20 ff 00 00 	andl   $0xff,0x20(%esp)
   1e5cb:	00 
	// ioctl命令cmd进行分别处理。144行后半部分用于根据子设备号dev在tty_table[]表中选择对应的tty结构。如果dev = 0，表示
	// 正在使用前台终端，因此直接使用终端号fg_console作为tty_table[]项索引取tty结构。如果dev大于0,那么就要分两种情况考虑：
	// 1、dev是虚拟终端号；2、dev是串行终端号或者伪终端号。对于虚拟终端其tty结构在tty_table[]中索引项是dev-1（0--63）。
	// 对于其他类型终端，则它们的tty结构索引项就是dev。例如，如果dev = 64，表示是一个串行终端1,则其tty结构就是tty_table[dev]
	// 如果dev = 1，则对应终端的tty结构是tty_table[0]。
	tty = tty_table + (dev ? ((dev < 64)? dev - 1 : dev) : fg_console);
   1e5cc:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   1e5d1:	74 26                	je     1e5f9 <tty_ioctl+0x6c>
   1e5d3:	83 7c 24 20 3f       	cmpl   $0x3f,0x20(%esp)
   1e5d8:	7f 11                	jg     1e5eb <tty_ioctl+0x5e>
   1e5da:	8b 44 24 20          	mov    0x20(%esp),%eax
   1e5de:	83 e8 01             	sub    $0x1,%eax
   1e5e1:	c1 e0 06             	shl    $0x6,%eax
   1e5e4:	05 20 18 04 00       	add    $0x41820,%eax
   1e5e9:	eb 1b                	jmp    1e606 <tty_ioctl+0x79>
   1e5eb:	8b 44 24 20          	mov    0x20(%esp),%eax
   1e5ef:	c1 e0 06             	shl    $0x6,%eax
   1e5f2:	05 20 18 04 00       	add    $0x41820,%eax
   1e5f7:	eb 0d                	jmp    1e606 <tty_ioctl+0x79>
   1e5f9:	a1 80 12 03 00       	mov    0x31280,%eax
   1e5fe:	c1 e0 06             	shl    $0x6,%eax
   1e601:	05 20 18 04 00       	add    $0x41820,%eax
   1e606:	89 44 24 0c          	mov    %eax,0xc(%esp)
	switch (cmd) {
   1e60a:	8b 44 24 24          	mov    0x24(%esp),%eax
   1e60e:	2d 01 54 00 00       	sub    $0x5401,%eax
   1e613:	83 f8 1a             	cmp    $0x1a,%eax
   1e616:	0f 87 4f 04 00 00    	ja     1ea6b <tty_ioctl+0x4de>
   1e61c:	8b 04 85 74 51 02 00 	mov    0x25174(,%eax,4),%eax
   1e623:	ff e0                	jmp    *%eax
		// 取相应终端termios结构信息。此时参数arg是用户缓冲区指针。
		case TCGETS:
			return get_termios(tty, (struct termios *) arg);
   1e625:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e629:	83 ec 08             	sub    $0x8,%esp
   1e62c:	50                   	push   %eax
   1e62d:	ff 74 24 18          	pushl  0x18(%esp)
   1e631:	e8 62 fc ff ff       	call   1e298 <get_termios>
   1e636:	83 c4 10             	add    $0x10,%esp
   1e639:	e9 32 04 00 00       	jmp    1ea70 <tty_ioctl+0x4e3>
		// 在设置termios结构信息之前，需要先等待输出队列中所有数据处理完毕，并且刷新（清空）输入队列。再接着执行下面的设置终端termios
		// 结构的操作。
		case TCSETSF:
			flush(tty->read_q); 							/* fallthrough */
   1e63e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e642:	8b 40 34             	mov    0x34(%eax),%eax
   1e645:	83 ec 0c             	sub    $0xc,%esp
   1e648:	50                   	push   %eax
   1e649:	e8 34 fc ff ff       	call   1e282 <flush>
   1e64e:	83 c4 10             	add    $0x10,%esp
		// 在设置终端termios的信息之前，需要先等待输出队列中所有数据处理完（耗尽）。对于修改参数会影响输出的情况，就需要使用这种形式。
		case TCSETSW:
			wait_until_sent(tty); 							/* fallthrough */
   1e651:	83 ec 0c             	sub    $0xc,%esp
   1e654:	ff 74 24 18          	pushl  0x18(%esp)
   1e658:	e8 37 fc ff ff       	call   1e294 <wait_until_sent>
   1e65d:	83 c4 10             	add    $0x10,%esp
		// 设置相应终端termios结构信息。此时参数arg是保存termios结构的用户缓冲区指针。
		case TCSETS:
			return set_termios(tty,(struct termios *) arg, dev);
   1e660:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e664:	83 ec 04             	sub    $0x4,%esp
   1e667:	ff 74 24 24          	pushl  0x24(%esp)
   1e66b:	50                   	push   %eax
   1e66c:	ff 74 24 18          	pushl  0x18(%esp)
   1e670:	e8 7f fc ff ff       	call   1e2f4 <set_termios>
   1e675:	83 c4 10             	add    $0x10,%esp
   1e678:	e9 f3 03 00 00       	jmp    1ea70 <tty_ioctl+0x4e3>
		// 取相应终端termio结构中的信息。此时参数arg是用户缓冲区指针。
		case TCGETA:
			return get_termio(tty,(struct termio *) arg);
   1e67d:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e681:	83 ec 08             	sub    $0x8,%esp
   1e684:	50                   	push   %eax
   1e685:	ff 74 24 18          	pushl  0x18(%esp)
   1e689:	e8 11 fd ff ff       	call   1e39f <get_termio>
   1e68e:	83 c4 10             	add    $0x10,%esp
   1e691:	e9 da 03 00 00       	jmp    1ea70 <tty_ioctl+0x4e3>
		// 在设置termio结构信息之前，需要先等待输出队列中所有数据处理完毕，并且刷新（清空）输入队列。再接着执行下面的设置终端termio
		// 结构的操作。
		case TCSETAF:
			flush(tty->read_q); 							/* fallthrough */
   1e696:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e69a:	8b 40 34             	mov    0x34(%eax),%eax
   1e69d:	83 ec 0c             	sub    $0xc,%esp
   1e6a0:	50                   	push   %eax
   1e6a1:	e8 dc fb ff ff       	call   1e282 <flush>
   1e6a6:	83 c4 10             	add    $0x10,%esp
		// 在设置终端termios的信息之前，需要先等待输出队列中所有数据处理完（耗尽）。对于修改参数会影响输出的情况，就需要使用这种形式。
		case TCSETAW:
			wait_until_sent(tty); 							/* fallthrough */
   1e6a9:	83 ec 0c             	sub    $0xc,%esp
   1e6ac:	ff 74 24 18          	pushl  0x18(%esp)
   1e6b0:	e8 df fb ff ff       	call   1e294 <wait_until_sent>
   1e6b5:	83 c4 10             	add    $0x10,%esp
		// 设置相应终端termio结构信息。此时参数arg是保存termio结构的用户缓冲区指针。
		case TCSETA:
			return set_termio(tty,(struct termio *) arg, dev);
   1e6b8:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e6bc:	83 ec 04             	sub    $0x4,%esp
   1e6bf:	ff 74 24 24          	pushl  0x24(%esp)
   1e6c3:	50                   	push   %eax
   1e6c4:	ff 74 24 18          	pushl  0x18(%esp)
   1e6c8:	e8 9b fd ff ff       	call   1e468 <set_termio>
   1e6cd:	83 c4 10             	add    $0x10,%esp
   1e6d0:	e9 9b 03 00 00       	jmp    1ea70 <tty_ioctl+0x4e3>
		// 如果参数arg值是0，则等待输出队列处理完毕（空），并发送一个break。
		case TCSBRK:
			if (!arg) {
   1e6d5:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   1e6da:	75 1e                	jne    1e6fa <tty_ioctl+0x16d>
				wait_until_sent(tty);
   1e6dc:	83 ec 0c             	sub    $0xc,%esp
   1e6df:	ff 74 24 18          	pushl  0x18(%esp)
   1e6e3:	e8 ac fb ff ff       	call   1e294 <wait_until_sent>
   1e6e8:	83 c4 10             	add    $0x10,%esp
				send_break(tty);
   1e6eb:	83 ec 0c             	sub    $0xc,%esp
   1e6ee:	ff 74 24 18          	pushl  0x18(%esp)
   1e6f2:	e8 9f fb ff ff       	call   1e296 <send_break>
   1e6f7:	83 c4 10             	add    $0x10,%esp
			}
			return 0;
   1e6fa:	b8 00 00 00 00       	mov    $0x0,%eax
   1e6ff:	e9 6c 03 00 00       	jmp    1ea70 <tty_ioctl+0x4e3>
		// 开始/停止流控制。如果参数arg是TCOOFF（Terminal Control Output OFF），则挂起输出；如果是TCOON，则恢复挂起的输出。在挂
		// 起或恢复输出同时需要把写队列中的字符输出，以加快用户交互响应速度。如果arg是TCIOFF（Terminal Control Input ON），则挂起
		// 输入；如果是TCION，则重新开启挂起的输入。
		case TCXONC:
			switch (arg) {
   1e704:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e708:	83 f8 01             	cmp    $0x1,%eax
   1e70b:	74 49                	je     1e756 <tty_ioctl+0x1c9>
   1e70d:	83 f8 01             	cmp    $0x1,%eax
   1e710:	7f 09                	jg     1e71b <tty_ioctl+0x18e>
   1e712:	85 c0                	test   %eax,%eax
   1e714:	74 18                	je     1e72e <tty_ioctl+0x1a1>
   1e716:	e9 03 01 00 00       	jmp    1e81e <tty_ioctl+0x291>
   1e71b:	83 f8 02             	cmp    $0x2,%eax
   1e71e:	74 5e                	je     1e77e <tty_ioctl+0x1f1>
   1e720:	83 f8 03             	cmp    $0x3,%eax
   1e723:	0f 84 a5 00 00 00    	je     1e7ce <tty_ioctl+0x241>
   1e729:	e9 f0 00 00 00       	jmp    1e81e <tty_ioctl+0x291>
			case TCOOFF:
				tty->stopped = 1;       					// 停止终端输出。
   1e72e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e732:	c7 40 2c 01 00 00 00 	movl   $0x1,0x2c(%eax)
				tty->write(tty);        					// 写缓冲队列输出。
   1e739:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e73d:	8b 40 30             	mov    0x30(%eax),%eax
   1e740:	83 ec 0c             	sub    $0xc,%esp
   1e743:	ff 74 24 18          	pushl  0x18(%esp)
   1e747:	ff d0                	call   *%eax
   1e749:	83 c4 10             	add    $0x10,%esp
				return 0;
   1e74c:	b8 00 00 00 00       	mov    $0x0,%eax
   1e751:	e9 1a 03 00 00       	jmp    1ea70 <tty_ioctl+0x4e3>
			case TCOON:
				tty->stopped = 0;       					// 恢复终端输出。
   1e756:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e75a:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
				tty->write(tty);
   1e761:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e765:	8b 40 30             	mov    0x30(%eax),%eax
   1e768:	83 ec 0c             	sub    $0xc,%esp
   1e76b:	ff 74 24 18          	pushl  0x18(%esp)
   1e76f:	ff d0                	call   *%eax
   1e771:	83 c4 10             	add    $0x10,%esp
				return 0;
   1e774:	b8 00 00 00 00       	mov    $0x0,%eax
   1e779:	e9 f2 02 00 00       	jmp    1ea70 <tty_ioctl+0x4e3>
			// 如果参数arg是TCIOFF，表示要求终端停止输入，于是我们往终端写队列放入STOP字符。当终端收到该字符时就会暂停输入。如果参数是
			// TCION，表示发送一个START字符，让终端恢复传输。STOP_CHAR(tty)字义为((tty)->termios.c_cc[VSTOP])，即取终端termios
			// 结构控制字符数组对应项值。若内核定义了_POSIX_VDISABLE(\0)，那么当某一项等于_POSIX_VDISABLE的值时，表示禁止使用相应的
			// 特殊字符。因此这里直接判断该值是否为0来确定要不要把停止控制字符放入终端写队列中。以下同。
			case TCIOFF:
				if (STOP_CHAR(tty))
   1e77e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e782:	0f b6 40 1a          	movzbl 0x1a(%eax),%eax
   1e786:	84 c0                	test   %al,%al
   1e788:	74 3a                	je     1e7c4 <tty_ioctl+0x237>
					PUTCH(STOP_CHAR(tty), tty->write_q);
   1e78a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e78e:	8b 50 38             	mov    0x38(%eax),%edx
   1e791:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e795:	8b 40 38             	mov    0x38(%eax),%eax
   1e798:	8b 40 04             	mov    0x4(%eax),%eax
   1e79b:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   1e79f:	0f b6 49 1a          	movzbl 0x1a(%ecx),%ecx
   1e7a3:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   1e7a7:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e7ab:	8b 40 38             	mov    0x38(%eax),%eax
   1e7ae:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e7b2:	8b 52 38             	mov    0x38(%edx),%edx
   1e7b5:	8b 52 04             	mov    0x4(%edx),%edx
   1e7b8:	83 c2 01             	add    $0x1,%edx
   1e7bb:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1e7c1:	89 50 04             	mov    %edx,0x4(%eax)
				return 0;
   1e7c4:	b8 00 00 00 00       	mov    $0x0,%eax
   1e7c9:	e9 a2 02 00 00       	jmp    1ea70 <tty_ioctl+0x4e3>
			case TCION:
				if (START_CHAR(tty))
   1e7ce:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e7d2:	0f b6 40 19          	movzbl 0x19(%eax),%eax
   1e7d6:	84 c0                	test   %al,%al
   1e7d8:	74 3a                	je     1e814 <tty_ioctl+0x287>
					PUTCH(START_CHAR(tty), tty->write_q);
   1e7da:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e7de:	8b 50 38             	mov    0x38(%eax),%edx
   1e7e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e7e5:	8b 40 38             	mov    0x38(%eax),%eax
   1e7e8:	8b 40 04             	mov    0x4(%eax),%eax
   1e7eb:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   1e7ef:	0f b6 49 19          	movzbl 0x19(%ecx),%ecx
   1e7f3:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   1e7f7:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e7fb:	8b 40 38             	mov    0x38(%eax),%eax
   1e7fe:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e802:	8b 52 38             	mov    0x38(%edx),%edx
   1e805:	8b 52 04             	mov    0x4(%edx),%edx
   1e808:	83 c2 01             	add    $0x1,%edx
   1e80b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1e811:	89 50 04             	mov    %edx,0x4(%eax)
				return 0;
   1e814:	b8 00 00 00 00       	mov    $0x0,%eax
   1e819:	e9 52 02 00 00       	jmp    1ea70 <tty_ioctl+0x4e3>
			}
			return -EINVAL; 								/* not implemented */
   1e81e:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e823:	e9 48 02 00 00       	jmp    1ea70 <tty_ioctl+0x4e3>
		// 刷新已写输出但还没有发送、或已接收但还没有读的数据。如果参数arg是0，则刷新（清空）输入队列；如果是1，则刷新输出队列；如果
		// 2，则刷新输入和输出队列。
		case TCFLSH:
			if (arg == 0)
   1e828:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   1e82d:	75 15                	jne    1e844 <tty_ioctl+0x2b7>
				flush(tty->read_q);
   1e82f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e833:	8b 40 34             	mov    0x34(%eax),%eax
   1e836:	83 ec 0c             	sub    $0xc,%esp
   1e839:	50                   	push   %eax
   1e83a:	e8 43 fa ff ff       	call   1e282 <flush>
   1e83f:	83 c4 10             	add    $0x10,%esp
   1e842:	eb 55                	jmp    1e899 <tty_ioctl+0x30c>
			else if (arg == 1)
   1e844:	83 7c 24 28 01       	cmpl   $0x1,0x28(%esp)
   1e849:	75 15                	jne    1e860 <tty_ioctl+0x2d3>
				flush(tty->write_q);
   1e84b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e84f:	8b 40 38             	mov    0x38(%eax),%eax
   1e852:	83 ec 0c             	sub    $0xc,%esp
   1e855:	50                   	push   %eax
   1e856:	e8 27 fa ff ff       	call   1e282 <flush>
   1e85b:	83 c4 10             	add    $0x10,%esp
   1e85e:	eb 39                	jmp    1e899 <tty_ioctl+0x30c>
			else if (arg == 2) {
   1e860:	83 7c 24 28 02       	cmpl   $0x2,0x28(%esp)
   1e865:	75 28                	jne    1e88f <tty_ioctl+0x302>
				flush(tty->read_q);
   1e867:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e86b:	8b 40 34             	mov    0x34(%eax),%eax
   1e86e:	83 ec 0c             	sub    $0xc,%esp
   1e871:	50                   	push   %eax
   1e872:	e8 0b fa ff ff       	call   1e282 <flush>
   1e877:	83 c4 10             	add    $0x10,%esp
				flush(tty->write_q);
   1e87a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e87e:	8b 40 38             	mov    0x38(%eax),%eax
   1e881:	83 ec 0c             	sub    $0xc,%esp
   1e884:	50                   	push   %eax
   1e885:	e8 f8 f9 ff ff       	call   1e282 <flush>
   1e88a:	83 c4 10             	add    $0x10,%esp
   1e88d:	eb 0a                	jmp    1e899 <tty_ioctl+0x30c>
			} else
				return -EINVAL;
   1e88f:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e894:	e9 d7 01 00 00       	jmp    1ea70 <tty_ioctl+0x4e3>
			return 0;
   1e899:	b8 00 00 00 00       	mov    $0x0,%eax
   1e89e:	e9 cd 01 00 00       	jmp    1ea70 <tty_ioctl+0x4e3>
		// 设置终端串行线路专用模式。
		case TIOCEXCL:
			return -EINVAL; 							/* not implemented */   /* 未实现 */
   1e8a3:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e8a8:	e9 c3 01 00 00       	jmp    1ea70 <tty_ioctl+0x4e3>
		// 复位终端串行线路专用模式。
		case TIOCNXCL:
			return -EINVAL; 							/* not implemented */
   1e8ad:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e8b2:	e9 b9 01 00 00       	jmp    1ea70 <tty_ioctl+0x4e3>
		// 设置tty为控制终端。（TIOCNOTTY - 不要控制终端）。
		case TIOCSCTTY:
			return -EINVAL; 							/* set controlling term NI */
   1e8b7:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e8bc:	e9 af 01 00 00       	jmp    1ea70 <tty_ioctl+0x4e3>
		// 读取终端进程组号（即读取前台进程组号）。首先验证用户缓冲区长度，然后复制终端tty的pgrp字段到用户缓冲区。此时参数arg是用户
		// 缓冲区指针。
		case TIOCGPGRP:
			verify_area((void *) arg, 4);            	// 实现库函数tcgetpgrp()。
   1e8c1:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e8c5:	83 ec 08             	sub    $0x8,%esp
   1e8c8:	6a 04                	push   $0x4
   1e8ca:	50                   	push   %eax
   1e8cb:	e8 d3 9a fe ff       	call   83a3 <verify_area>
   1e8d0:	83 c4 10             	add    $0x10,%esp
			put_fs_long(tty->pgrp, (unsigned long *) arg);
   1e8d3:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e8d7:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e8db:	8b 52 24             	mov    0x24(%edx),%edx
   1e8de:	83 ec 08             	sub    $0x8,%esp
   1e8e1:	50                   	push   %eax
   1e8e2:	52                   	push   %edx
   1e8e3:	e8 09 f9 ff ff       	call   1e1f1 <put_fs_long>
   1e8e8:	83 c4 10             	add    $0x10,%esp
			return 0;
   1e8eb:	b8 00 00 00 00       	mov    $0x0,%eax
   1e8f0:	e9 7b 01 00 00       	jmp    1ea70 <tty_ioctl+0x4e3>
		// 设置终端进程组号pgrp（即设置前台进程组号）。此时参数arg是用户缓冲区中进程组号pgrp的指针。执行该命令的前提条件是进程必须
		// 有控制终端。如果当前进程没有控制终端，或者dev不是其控制终端，或者控制终端现在的确是正在处理的终端dev，但进程的会话号与该
		// 终端dev的会话号不同，则返回无终端错误信息。
		case TIOCSPGRP:                                 // 实现库函数tcsetpgrp()。
			if ((current->tty < 0) ||
   1e8f5:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1e8fa:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   1e900:	85 c0                	test   %eax,%eax
   1e902:	78 27                	js     1e92b <tty_ioctl+0x39e>
			    (current->tty != dev) ||
   1e904:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1e909:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
			return 0;
		// 设置终端进程组号pgrp（即设置前台进程组号）。此时参数arg是用户缓冲区中进程组号pgrp的指针。执行该命令的前提条件是进程必须
		// 有控制终端。如果当前进程没有控制终端，或者dev不是其控制终端，或者控制终端现在的确是正在处理的终端dev，但进程的会话号与该
		// 终端dev的会话号不同，则返回无终端错误信息。
		case TIOCSPGRP:                                 // 实现库函数tcsetpgrp()。
			if ((current->tty < 0) ||
   1e90f:	3b 44 24 20          	cmp    0x20(%esp),%eax
   1e913:	75 16                	jne    1e92b <tty_ioctl+0x39e>
			    (current->tty != dev) ||
			    (tty->session != current->session))
   1e915:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e919:	8b 50 28             	mov    0x28(%eax),%edx
   1e91c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1e921:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
		// 设置终端进程组号pgrp（即设置前台进程组号）。此时参数arg是用户缓冲区中进程组号pgrp的指针。执行该命令的前提条件是进程必须
		// 有控制终端。如果当前进程没有控制终端，或者dev不是其控制终端，或者控制终端现在的确是正在处理的终端dev，但进程的会话号与该
		// 终端dev的会话号不同，则返回无终端错误信息。
		case TIOCSPGRP:                                 // 实现库函数tcsetpgrp()。
			if ((current->tty < 0) ||
			    (current->tty != dev) ||
   1e927:	39 c2                	cmp    %eax,%edx
   1e929:	74 0a                	je     1e935 <tty_ioctl+0x3a8>
			    (tty->session != current->session))
				return -ENOTTY;
   1e92b:	b8 e7 ff ff ff       	mov    $0xffffffe7,%eax
   1e930:	e9 3b 01 00 00       	jmp    1ea70 <tty_ioctl+0x4e3>
			// 然后我们就从用户缓冲区中取得欲设置的进程号，并对该组号的有效性进行验证。如果组号pgrp小于0,则返回无效组号错误信息；如果pgrp
			// 的会话号与当前进程的不同，则返回许可错误信息。否则我们可以设置终端进程组号为pgrp。此时pgrp成为前台进程组。
			pgrp = get_fs_long((unsigned long *) arg);
   1e935:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e939:	83 ec 0c             	sub    $0xc,%esp
   1e93c:	50                   	push   %eax
   1e93d:	e8 7f f8 ff ff       	call   1e1c1 <get_fs_long>
   1e942:	83 c4 10             	add    $0x10,%esp
   1e945:	89 44 24 08          	mov    %eax,0x8(%esp)
			if (pgrp < 0)
   1e949:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1e94e:	79 0a                	jns    1e95a <tty_ioctl+0x3cd>
				return -EINVAL;
   1e950:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e955:	e9 16 01 00 00       	jmp    1ea70 <tty_ioctl+0x4e3>
			if (session_of_pgrp(pgrp) != current->session)
   1e95a:	83 ec 0c             	sub    $0xc,%esp
   1e95d:	ff 74 24 14          	pushl  0x14(%esp)
   1e961:	e8 7c c1 fe ff       	call   aae2 <session_of_pgrp>
   1e966:	83 c4 10             	add    $0x10,%esp
   1e969:	89 c2                	mov    %eax,%edx
   1e96b:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1e970:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
   1e976:	39 c2                	cmp    %eax,%edx
   1e978:	74 0a                	je     1e984 <tty_ioctl+0x3f7>
				return -EPERM;
   1e97a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1e97f:	e9 ec 00 00 00       	jmp    1ea70 <tty_ioctl+0x4e3>
			tty->pgrp = pgrp;
   1e984:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e988:	8b 54 24 08          	mov    0x8(%esp),%edx
   1e98c:	89 50 24             	mov    %edx,0x24(%eax)
			return 0;
   1e98f:	b8 00 00 00 00       	mov    $0x0,%eax
   1e994:	e9 d7 00 00 00       	jmp    1ea70 <tty_ioctl+0x4e3>
		// 返回输出队列中还未送出的字符数。首先验证用户缓冲区长度，然后复制队列中字符数给用户。此时参数arg是用户缓冲区指针。
		case TIOCOUTQ:
			verify_area((void *) arg, 4);
   1e999:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e99d:	83 ec 08             	sub    $0x8,%esp
   1e9a0:	6a 04                	push   $0x4
   1e9a2:	50                   	push   %eax
   1e9a3:	e8 fb 99 fe ff       	call   83a3 <verify_area>
   1e9a8:	83 c4 10             	add    $0x10,%esp
			put_fs_long(CHARS(tty->write_q), (unsigned long *) arg);
   1e9ab:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e9af:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e9b3:	8b 52 38             	mov    0x38(%edx),%edx
   1e9b6:	8b 4a 04             	mov    0x4(%edx),%ecx
   1e9b9:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e9bd:	8b 52 38             	mov    0x38(%edx),%edx
   1e9c0:	8b 52 08             	mov    0x8(%edx),%edx
   1e9c3:	29 d1                	sub    %edx,%ecx
   1e9c5:	89 ca                	mov    %ecx,%edx
   1e9c7:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1e9cd:	83 ec 08             	sub    $0x8,%esp
   1e9d0:	50                   	push   %eax
   1e9d1:	52                   	push   %edx
   1e9d2:	e8 1a f8 ff ff       	call   1e1f1 <put_fs_long>
   1e9d7:	83 c4 10             	add    $0x10,%esp
			return 0;
   1e9da:	b8 00 00 00 00       	mov    $0x0,%eax
   1e9df:	e9 8c 00 00 00       	jmp    1ea70 <tty_ioctl+0x4e3>
		// 返回输入队列中还未读取的字符数。首先验证用户缓冲区长度，然后复制队列中字符数给用户。此时参数arg是用户缓冲区指针。
		case TIOCINQ:
			verify_area((void *) arg, 4);
   1e9e4:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e9e8:	83 ec 08             	sub    $0x8,%esp
   1e9eb:	6a 04                	push   $0x4
   1e9ed:	50                   	push   %eax
   1e9ee:	e8 b0 99 fe ff       	call   83a3 <verify_area>
   1e9f3:	83 c4 10             	add    $0x10,%esp
			put_fs_long(CHARS(tty->secondary),
   1e9f6:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e9fa:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e9fe:	8b 52 3c             	mov    0x3c(%edx),%edx
   1ea01:	8b 4a 04             	mov    0x4(%edx),%ecx
   1ea04:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1ea08:	8b 52 3c             	mov    0x3c(%edx),%edx
   1ea0b:	8b 52 08             	mov    0x8(%edx),%edx
   1ea0e:	29 d1                	sub    %edx,%ecx
   1ea10:	89 ca                	mov    %ecx,%edx
   1ea12:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1ea18:	83 ec 08             	sub    $0x8,%esp
   1ea1b:	50                   	push   %eax
   1ea1c:	52                   	push   %edx
   1ea1d:	e8 cf f7 ff ff       	call   1e1f1 <put_fs_long>
   1ea22:	83 c4 10             	add    $0x10,%esp
				(unsigned long *) arg);
			return 0;
   1ea25:	b8 00 00 00 00       	mov    $0x0,%eax
   1ea2a:	eb 44                	jmp    1ea70 <tty_ioctl+0x4e3>
		// 模拟终端输入操作。该命令以一个指向字符的指针作为参数，并假设该字符是在终端上键入的。用户终须在该控制终端上具有超级
		// 用户权限或具有读许可权限。
		case TIOCSTI:
			return -EINVAL; 							/* not implemented */
   1ea2c:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1ea31:	eb 3d                	jmp    1ea70 <tty_ioctl+0x4e3>
		// 读取终端设备窗口大小信息（参见termios.h中的winsize结构）。
		case TIOCGWINSZ:
			return -EINVAL; 							/* not implemented */
   1ea33:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1ea38:	eb 36                	jmp    1ea70 <tty_ioctl+0x4e3>
		// 设置终端设备窗口大小信息（参见winsize结构）。
		case TIOCSWINSZ:
			return -EINVAL; 							/* not implemented */
   1ea3a:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1ea3f:	eb 2f                	jmp    1ea70 <tty_ioctl+0x4e3>
		// 返回MODEM状态控制引线的当前状态位标志集（参见termios.h）。
		case TIOCMGET:
			return -EINVAL; 							/* not implemented */
   1ea41:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1ea46:	eb 28                	jmp    1ea70 <tty_ioctl+0x4e3>
		// 设置单个modem状态控制引线的状态（true或false）。
		case TIOCMBIS:
			return -EINVAL; 							/* not implemented */
   1ea48:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1ea4d:	eb 21                	jmp    1ea70 <tty_ioctl+0x4e3>
		// 复位ujwhMODEM状态控制引线的状态。
		case TIOCMBIC:
			return -EINVAL; 							/* not implemented */
   1ea4f:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1ea54:	eb 1a                	jmp    1ea70 <tty_ioctl+0x4e3>
		// 设置MODEM状态引线的状态。如果某一位置位，则modem对应的状态引线将为有效。
		case TIOCMSET:
			return -EINVAL; 							/* not implemented */
   1ea56:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1ea5b:	eb 13                	jmp    1ea70 <tty_ioctl+0x4e3>
		// 读取软件载波检测标志（1 - 开启；0 - 关闭）。
		case TIOCGSOFTCAR:
			return -EINVAL; 							/* not implemented */
   1ea5d:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1ea62:	eb 0c                	jmp    1ea70 <tty_ioctl+0x4e3>
		// 设置软件载波检测标志（1 - 开启；0 - 关闭）。
		case TIOCSSOFTCAR:
			return -EINVAL; 							/* not implemented */
   1ea64:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1ea69:	eb 05                	jmp    1ea70 <tty_ioctl+0x4e3>
		default:
			return -EINVAL;
   1ea6b:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
        }
}
   1ea70:	83 c4 1c             	add    $0x1c,%esp
   1ea73:	c3                   	ret    

0001ea74 <pty_copy>:
#include <asm/io.h>

// 伪终端写函数。
// 参数：from - 源伪终端结构；to - 目的伪终端结构。
static inline void pty_copy(struct tty_struct * from, struct tty_struct * to)
{
   1ea74:	83 ec 1c             	sub    $0x1c,%esp
	char c;

	// 判断源终端是否停止或源终端写队列是否为空。如果源终端未停止，并且源终端写队列不为空，则循环处理之。
	while (!from->stopped && !EMPTY(from->write_q)) {
   1ea77:	e9 e9 00 00 00       	jmp    1eb65 <pty_copy+0xf1>
		// 判断目的终端读队列是否已满，如果已满则先调用copy_to_cooked函数处理目的终端读队列，然后重新循环处理。
		if (FULL(to->read_q)) {
   1ea7c:	8b 44 24 24          	mov    0x24(%esp),%eax
   1ea80:	8b 40 34             	mov    0x34(%eax),%eax
   1ea83:	8b 50 08             	mov    0x8(%eax),%edx
   1ea86:	8b 44 24 24          	mov    0x24(%esp),%eax
   1ea8a:	8b 40 34             	mov    0x34(%eax),%eax
   1ea8d:	8b 40 04             	mov    0x4(%eax),%eax
   1ea90:	29 c2                	sub    %eax,%edx
   1ea92:	89 d0                	mov    %edx,%eax
   1ea94:	83 e8 01             	sub    $0x1,%eax
   1ea97:	25 ff 03 00 00       	and    $0x3ff,%eax
   1ea9c:	85 c0                	test   %eax,%eax
   1ea9e:	75 3c                	jne    1eadc <pty_copy+0x68>
			// 判断目的终端辅助队列是否已满，如果已满则直接退出循环，不再处理源终端写队列中的数据。
			if (FULL(to->secondary))
   1eaa0:	8b 44 24 24          	mov    0x24(%esp),%eax
   1eaa4:	8b 40 3c             	mov    0x3c(%eax),%eax
   1eaa7:	8b 50 08             	mov    0x8(%eax),%edx
   1eaaa:	8b 44 24 24          	mov    0x24(%esp),%eax
   1eaae:	8b 40 3c             	mov    0x3c(%eax),%eax
   1eab1:	8b 40 04             	mov    0x4(%eax),%eax
   1eab4:	29 c2                	sub    %eax,%edx
   1eab6:	89 d0                	mov    %edx,%eax
   1eab8:	83 e8 01             	sub    $0x1,%eax
   1eabb:	25 ff 03 00 00       	and    $0x3ff,%eax
   1eac0:	85 c0                	test   %eax,%eax
   1eac2:	0f 84 c6 00 00 00    	je     1eb8e <pty_copy+0x11a>
				break;
			copy_to_cooked(to);     						// 把读队列中的字符处理成成规范模式字符序列放入辅助队列。
   1eac8:	83 ec 0c             	sub    $0xc,%esp
   1eacb:	ff 74 24 30          	pushl  0x30(%esp)
   1eacf:	e8 3f a1 ff ff       	call   18c13 <copy_to_cooked>
   1ead4:	83 c4 10             	add    $0x10,%esp
			continue;
   1ead7:	e9 89 00 00 00       	jmp    1eb65 <pty_copy+0xf1>
		}
		GETCH(from->write_q, c);         					// 从源终端写队列中取一个字符，放入c，
   1eadc:	8b 44 24 20          	mov    0x20(%esp),%eax
   1eae0:	8b 50 38             	mov    0x38(%eax),%edx
   1eae3:	8b 44 24 20          	mov    0x20(%esp),%eax
   1eae7:	8b 40 38             	mov    0x38(%eax),%eax
   1eaea:	8b 40 08             	mov    0x8(%eax),%eax
   1eaed:	0f b6 44 02 10       	movzbl 0x10(%edx,%eax,1),%eax
   1eaf2:	88 44 24 0f          	mov    %al,0xf(%esp)
   1eaf6:	8b 44 24 20          	mov    0x20(%esp),%eax
   1eafa:	8b 40 38             	mov    0x38(%eax),%eax
   1eafd:	8b 54 24 20          	mov    0x20(%esp),%edx
   1eb01:	8b 52 38             	mov    0x38(%edx),%edx
   1eb04:	8b 52 08             	mov    0x8(%edx),%edx
   1eb07:	83 c2 01             	add    $0x1,%edx
   1eb0a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1eb10:	89 50 08             	mov    %edx,0x8(%eax)
		PUTCH(c, to->read_q);            					// 然后把c中的字符放入目的终端读队列中。
   1eb13:	8b 44 24 24          	mov    0x24(%esp),%eax
   1eb17:	8b 50 34             	mov    0x34(%eax),%edx
   1eb1a:	8b 44 24 24          	mov    0x24(%esp),%eax
   1eb1e:	8b 40 34             	mov    0x34(%eax),%eax
   1eb21:	8b 40 04             	mov    0x4(%eax),%eax
   1eb24:	0f b6 4c 24 0f       	movzbl 0xf(%esp),%ecx
   1eb29:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   1eb2d:	8b 44 24 24          	mov    0x24(%esp),%eax
   1eb31:	8b 40 34             	mov    0x34(%eax),%eax
   1eb34:	8b 54 24 24          	mov    0x24(%esp),%edx
   1eb38:	8b 52 34             	mov    0x34(%edx),%edx
   1eb3b:	8b 52 04             	mov    0x4(%edx),%edx
   1eb3e:	83 c2 01             	add    $0x1,%edx
   1eb41:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1eb47:	89 50 04             	mov    %edx,0x4(%eax)
		// 判断当前进程是否有信号需要处理，如果有，则退出循环。
		if (current->signal & ~current->blocked)
   1eb4a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1eb4f:	8b 50 0c             	mov    0xc(%eax),%edx
   1eb52:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1eb57:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   1eb5d:	f7 d0                	not    %eax
   1eb5f:	21 d0                	and    %edx,%eax
   1eb61:	85 c0                	test   %eax,%eax
   1eb63:	75 2c                	jne    1eb91 <pty_copy+0x11d>
static inline void pty_copy(struct tty_struct * from, struct tty_struct * to)
{
	char c;

	// 判断源终端是否停止或源终端写队列是否为空。如果源终端未停止，并且源终端写队列不为空，则循环处理之。
	while (!from->stopped && !EMPTY(from->write_q)) {
   1eb65:	8b 44 24 20          	mov    0x20(%esp),%eax
   1eb69:	8b 40 2c             	mov    0x2c(%eax),%eax
   1eb6c:	85 c0                	test   %eax,%eax
   1eb6e:	75 22                	jne    1eb92 <pty_copy+0x11e>
   1eb70:	8b 44 24 20          	mov    0x20(%esp),%eax
   1eb74:	8b 40 38             	mov    0x38(%eax),%eax
   1eb77:	8b 50 04             	mov    0x4(%eax),%edx
   1eb7a:	8b 44 24 20          	mov    0x20(%esp),%eax
   1eb7e:	8b 40 38             	mov    0x38(%eax),%eax
   1eb81:	8b 40 08             	mov    0x8(%eax),%eax
   1eb84:	39 c2                	cmp    %eax,%edx
   1eb86:	0f 85 f0 fe ff ff    	jne    1ea7c <pty_copy+0x8>
   1eb8c:	eb 04                	jmp    1eb92 <pty_copy+0x11e>
		// 判断目的终端读队列是否已满，如果已满则先调用copy_to_cooked函数处理目的终端读队列，然后重新循环处理。
		if (FULL(to->read_q)) {
			// 判断目的终端辅助队列是否已满，如果已满则直接退出循环，不再处理源终端写队列中的数据。
			if (FULL(to->secondary))
				break;
   1eb8e:	90                   	nop
   1eb8f:	eb 01                	jmp    1eb92 <pty_copy+0x11e>
		}
		GETCH(from->write_q, c);         					// 从源终端写队列中取一个字符，放入c，
		PUTCH(c, to->read_q);            					// 然后把c中的字符放入目的终端读队列中。
		// 判断当前进程是否有信号需要处理，如果有，则退出循环。
		if (current->signal & ~current->blocked)
			break;
   1eb91:	90                   	nop
	}
	copy_to_cooked(to);     								// 把读队列中的字符处理成成规范模式字符序列放入辅助队列。
   1eb92:	83 ec 0c             	sub    $0xc,%esp
   1eb95:	ff 74 24 30          	pushl  0x30(%esp)
   1eb99:	e8 75 a0 ff ff       	call   18c13 <copy_to_cooked>
   1eb9e:	83 c4 10             	add    $0x10,%esp
	wake_up(&from->write_q->proc_list);     				// 唤醒等待源终端写队列的进程，如果有。
   1eba1:	8b 44 24 20          	mov    0x20(%esp),%eax
   1eba5:	8b 40 38             	mov    0x38(%eax),%eax
   1eba8:	83 c0 0c             	add    $0xc,%eax
   1ebab:	83 ec 0c             	sub    $0xc,%esp
   1ebae:	50                   	push   %eax
   1ebaf:	e8 9b 85 fe ff       	call   714f <wake_up>
   1ebb4:	83 c4 10             	add    $0x10,%esp
}
   1ebb7:	90                   	nop
   1ebb8:	83 c4 1c             	add    $0x1c,%esp
   1ebbb:	c3                   	ret    

0001ebbc <mpty_write>:
 * 这个函数被调用时，tty_write函数已经把一些字符放到写队列write_queue中。它将复制这些输入到它的从伪终端的
 * 输出队列中。
 */
// 主伪终端写函数。
void mpty_write(struct tty_struct * tty)
{
   1ebbc:	83 ec 1c             	sub    $0x1c,%esp
	int nr = tty - tty_table;       						// 获取终端号
   1ebbf:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ebc3:	ba 20 18 04 00       	mov    $0x41820,%edx
   1ebc8:	29 d0                	sub    %edx,%eax
   1ebca:	c1 f8 06             	sar    $0x6,%eax
   1ebcd:	89 44 24 0c          	mov    %eax,0xc(%esp)

	// 终端号除以64取整如果为2则是“主伪终端”，否则显示出错信息。
	if ((nr >> 6) != 2)
   1ebd1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1ebd5:	c1 f8 06             	sar    $0x6,%eax
   1ebd8:	83 f8 02             	cmp    $0x2,%eax
   1ebdb:	74 12                	je     1ebef <mpty_write+0x33>
		printk("bad mpty\n\r");
   1ebdd:	83 ec 0c             	sub    $0xc,%esp
   1ebe0:	68 e0 51 02 00       	push   $0x251e0
   1ebe5:	e8 5d a0 fe ff       	call   8c47 <printk>
   1ebea:	83 c4 10             	add    $0x10,%esp
	else
		pty_copy(tty, tty + 64);   							// 调用伪终端写函数。
}
   1ebed:	eb 19                	jmp    1ec08 <mpty_write+0x4c>

	// 终端号除以64取整如果为2则是“主伪终端”，否则显示出错信息。
	if ((nr >> 6) != 2)
		printk("bad mpty\n\r");
	else
		pty_copy(tty, tty + 64);   							// 调用伪终端写函数。
   1ebef:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ebf3:	05 00 10 00 00       	add    $0x1000,%eax
   1ebf8:	83 ec 08             	sub    $0x8,%esp
   1ebfb:	50                   	push   %eax
   1ebfc:	ff 74 24 2c          	pushl  0x2c(%esp)
   1ec00:	e8 6f fe ff ff       	call   1ea74 <pty_copy>
   1ec05:	83 c4 10             	add    $0x10,%esp
}
   1ec08:	90                   	nop
   1ec09:	83 c4 1c             	add    $0x1c,%esp
   1ec0c:	c3                   	ret    

0001ec0d <spty_write>:

// 从伪终端写函数。
void spty_write(struct tty_struct * tty)
{
   1ec0d:	83 ec 1c             	sub    $0x1c,%esp
	int nr = tty - tty_table;       						// 获取终端号
   1ec10:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ec14:	ba 20 18 04 00       	mov    $0x41820,%edx
   1ec19:	29 d0                	sub    %edx,%eax
   1ec1b:	c1 f8 06             	sar    $0x6,%eax
   1ec1e:	89 44 24 0c          	mov    %eax,0xc(%esp)

	// 终端号除以64取整如果为3则是“从伪终端”，否则显示出错信息。
	if ((nr >> 6) != 3)
   1ec22:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1ec26:	c1 f8 06             	sar    $0x6,%eax
   1ec29:	83 f8 03             	cmp    $0x3,%eax
   1ec2c:	74 12                	je     1ec40 <spty_write+0x33>
		printk("bad spty\n\r");
   1ec2e:	83 ec 0c             	sub    $0xc,%esp
   1ec31:	68 eb 51 02 00       	push   $0x251eb
   1ec36:	e8 0c a0 fe ff       	call   8c47 <printk>
   1ec3b:	83 c4 10             	add    $0x10,%esp
	else
		pty_copy(tty, tty - 64);   							// 调用伪终端写函数。
}
   1ec3e:	eb 19                	jmp    1ec59 <spty_write+0x4c>

	// 终端号除以64取整如果为3则是“从伪终端”，否则显示出错信息。
	if ((nr >> 6) != 3)
		printk("bad spty\n\r");
	else
		pty_copy(tty, tty - 64);   							// 调用伪终端写函数。
   1ec40:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ec44:	2d 00 10 00 00       	sub    $0x1000,%eax
   1ec49:	83 ec 08             	sub    $0x8,%esp
   1ec4c:	50                   	push   %eax
   1ec4d:	ff 74 24 2c          	pushl  0x2c(%esp)
   1ec51:	e8 1e fe ff ff       	call   1ea74 <pty_copy>
   1ec56:	83 c4 10             	add    $0x10,%esp
}
   1ec59:	90                   	nop
   1ec5a:	83 c4 1c             	add    $0x1c,%esp
   1ec5d:	c3                   	ret    

0001ec5e <get_fs_word>:
//// 读取fs段中指定地址处的字.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的字.
static inline unsigned short get_fs_word(const unsigned short *addr)
{
   1ec5e:	83 ec 10             	sub    $0x10,%esp
	unsigned short _v;

	__asm__ ("movw %%fs:%1,%0":"=q" (_v):"m" (*addr));
   1ec61:	8b 44 24 14          	mov    0x14(%esp),%eax
   1ec65:	64 66 8b 00          	mov    %fs:(%eax),%ax
   1ec69:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	return _v;
   1ec6e:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
}
   1ec73:	83 c4 10             	add    $0x10,%esp
   1ec76:	c3                   	ret    

0001ec77 <get_fs_long>:
//// 读取fs段中指定地址处的长字(4字节).
// 参数:addr - 指定的内存地址.
// %0 - (返回的长字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的长字.
static inline unsigned long get_fs_long(const unsigned long *addr)
{
   1ec77:	83 ec 10             	sub    $0x10,%esp
	unsigned long _v;

	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
   1ec7a:	8b 44 24 14          	mov    0x14(%esp),%eax
   1ec7e:	64 8b 00             	mov    %fs:(%eax),%eax
   1ec81:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
   1ec85:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   1ec89:	83 c4 10             	add    $0x10,%esp
   1ec8c:	c3                   	ret    

0001ec8d <put_fs_word>:

//// 将一字存放在fs段中指定内存地址处.
// 参数:val - 字值;addr - 内存地址.
// %0 - 寄存器(字值val);%1 - (内存地址addr).
static inline void put_fs_word(short val,short * addr)
{
   1ec8d:	83 ec 04             	sub    $0x4,%esp
   1ec90:	8b 44 24 08          	mov    0x8(%esp),%eax
   1ec94:	66 89 04 24          	mov    %ax,(%esp)
__asm__ ("movw %0,%%fs:%1"::"q" (val),"m" (*addr));
   1ec98:	0f b7 04 24          	movzwl (%esp),%eax
   1ec9c:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1eca0:	64 66 89 02          	mov    %ax,%fs:(%edx)
}
   1eca4:	90                   	nop
   1eca5:	83 c4 04             	add    $0x4,%esp
   1eca8:	c3                   	ret    

0001eca9 <put_fs_long>:
//// 将一长字存放在fs段中指定内存地址处.
// 参数:val - 长字值;addr - 内存地址.
// %0 - 寄存器(长字值val);%1 - (内存地址addr).
static inline void put_fs_long(unsigned long val,unsigned long * addr)
{
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
   1eca9:	8b 44 24 04          	mov    0x4(%esp),%eax
   1ecad:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ecb1:	64 89 02             	mov    %eax,%fs:(%edx)
}
   1ecb4:	90                   	nop
   1ecb5:	c3                   	ret    

0001ecb6 <do_emu>:
// 该函数首先检测仿真的I387结构状态字寄存器中是否有未屏蔽的异常标志置位。若有则对状态字中忙标志B进行设置。然后把指令指针
// 保存起来，并取出代码指针EIP处的2字节浮点指令代码code。接着分析代码code，并根据其含义进行处理。针对不同代码类型值，Linus
// 使用了几个不同的switch程序块进行仿真处理。
// 参数是info结构指针。
static void do_emu(struct info * info)
{
   1ecb6:	53                   	push   %ebx
   1ecb7:	83 ec 28             	sub    $0x28,%esp
	char * address;

// 该函数首先检测仿真的I387结构状态字寄存器中是否有未屏蔽的异常标志置位。若有就设置状态字中忙标志B（位15），否则复位B标
// 志。然后我们把指令指针保存起来。再看看执行本函数的代码是不是用户代码。如是不是，即调用者的代码段选择符不等于0x0f，则
// 说明内核中有代码使用了浮点指令。于是在显示出浮点指令处的CS、EIP值和信息“内核中需要数学仿真”后停机。
	if (I387.cwd & I387.swd & 0x3f)
   1ecba:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1ecbf:	8b 90 18 04 00 00    	mov    0x418(%eax),%edx
   1ecc5:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1ecca:	8b 80 1c 04 00 00    	mov    0x41c(%eax),%eax
   1ecd0:	21 d0                	and    %edx,%eax
   1ecd2:	83 e0 3f             	and    $0x3f,%eax
   1ecd5:	85 c0                	test   %eax,%eax
   1ecd7:	74 1c                	je     1ecf5 <do_emu+0x3f>
		I387.swd |= 0x8000;             // 设置忙标志B。
   1ecd9:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1ecde:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   1ece4:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   1ecea:	80 ce 80             	or     $0x80,%dh
   1eced:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
   1ecf3:	eb 1d                	jmp    1ed12 <do_emu+0x5c>
	else
		I387.swd &= 0x7fff;             // 清忙标志B。
   1ecf5:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1ecfa:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   1ed00:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   1ed06:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
   1ed0c:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	ORIG_EIP = EIP;                         // 保存浮点指令指针。
   1ed12:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ed16:	8b 50 38             	mov    0x38(%eax),%edx
   1ed19:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ed1d:	89 50 04             	mov    %edx,0x4(%eax)
/* 0x0007 means user code space */
	if (CS != 0x000F) {                     // 不是用户代码则停机。
   1ed20:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ed24:	83 c0 3c             	add    $0x3c,%eax
   1ed27:	0f b7 00             	movzwl (%eax),%eax
   1ed2a:	66 83 f8 0f          	cmp    $0xf,%ax
   1ed2e:	74 36                	je     1ed66 <do_emu+0xb0>
		printk("math_emulate: %04x:%08x\n\r",CS,EIP);
   1ed30:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ed34:	8b 50 38             	mov    0x38(%eax),%edx
   1ed37:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ed3b:	83 c0 3c             	add    $0x3c,%eax
   1ed3e:	0f b7 00             	movzwl (%eax),%eax
   1ed41:	0f b7 c0             	movzwl %ax,%eax
   1ed44:	83 ec 04             	sub    $0x4,%esp
   1ed47:	52                   	push   %edx
   1ed48:	50                   	push   %eax
   1ed49:	68 f8 51 02 00       	push   $0x251f8
   1ed4e:	e8 f4 9e fe ff       	call   8c47 <printk>
   1ed53:	83 c4 10             	add    $0x10,%esp
		panic("Math emulation needed in kernel");
   1ed56:	83 ec 0c             	sub    $0xc,%esp
   1ed59:	68 14 52 02 00       	push   $0x25214
   1ed5e:	e8 a5 9e fe ff       	call   8c08 <panic>
   1ed63:	83 c4 10             	add    $0x10,%esp
// 然后我们取出代码指针EIP处的2字节浮点指令代码code。由于Inter CPU存储数据时是“小头”（Little endian）在前的，此时取出
// 的代码正好与指令第1、第2字节顺序颠倒。因此我们需要交换一下code中两个字节的顺序。然后再屏蔽掉第1个代码字节中的ESC位（二
// 进制11011）。接着把浮点指令指针EIP保存到TSS段i387结构中的fip字段中，而CS保存到fcs字段中，同时把略微处理过的浮点指令
// 代码code放到fcs字段的高16位中。保存这些值是为了在出现仿真的处理器异常时程序可以像使用真实的协处理器一样进行处理。最后
// 让EIP指向随后的浮点指令或操作数。
	code = get_fs_word((unsigned short *) EIP);     // 取2字节的浮点指令或操作数。
   1ed66:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ed6a:	8b 40 38             	mov    0x38(%eax),%eax
   1ed6d:	83 ec 0c             	sub    $0xc,%esp
   1ed70:	50                   	push   %eax
   1ed71:	e8 e8 fe ff ff       	call   1ec5e <get_fs_word>
   1ed76:	83 c4 10             	add    $0x10,%esp
   1ed79:	66 89 44 24 1e       	mov    %ax,0x1e(%esp)
	bswapw(code);                                   // 交换高低字节。
   1ed7e:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1ed83:	86 c4                	xchg   %al,%ah
   1ed85:	66 89 44 24 1e       	mov    %ax,0x1e(%esp)
	code &= 0x7ff;                                  // 屏蔽代码中的ESC码。
   1ed8a:	66 81 64 24 1e ff 07 	andw   $0x7ff,0x1e(%esp)
	I387.fip = EIP;                                 // 保存指令指针。
   1ed91:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1ed96:	8b 54 24 30          	mov    0x30(%esp),%edx
   1ed9a:	8b 52 38             	mov    0x38(%edx),%edx
   1ed9d:	89 90 24 04 00 00    	mov    %edx,0x424(%eax)
	*(unsigned short *) &I387.fcs = CS;             // 保存代码段选择符。
   1eda3:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1eda8:	8d 90 28 04 00 00    	lea    0x428(%eax),%edx
   1edae:	8b 44 24 30          	mov    0x30(%esp),%eax
   1edb2:	83 c0 3c             	add    $0x3c,%eax
   1edb5:	0f b7 00             	movzwl (%eax),%eax
   1edb8:	66 89 02             	mov    %ax,(%edx)
	*(1+(unsigned short *) &I387.fcs) = code;       // 保存代码。
   1edbb:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1edc0:	05 28 04 00 00       	add    $0x428,%eax
   1edc5:	8d 50 02             	lea    0x2(%eax),%edx
   1edc8:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1edcd:	66 89 02             	mov    %ax,(%edx)
	EIP += 2;                                       // 指令指针指向下一个字节。
   1edd0:	8b 44 24 30          	mov    0x30(%esp),%eax
   1edd4:	8b 40 38             	mov    0x38(%eax),%eax
   1edd7:	8d 50 02             	lea    0x2(%eax),%edx
   1edda:	8b 44 24 30          	mov    0x30(%esp),%eax
   1edde:	89 50 38             	mov    %edx,0x38(%eax)
        switch (code) {
   1ede1:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1ede6:	3d eb 01 00 00       	cmp    $0x1eb,%eax
   1edeb:	0f 84 a6 02 00 00    	je     1f097 <do_emu+0x3e1>
   1edf1:	3d eb 01 00 00       	cmp    $0x1eb,%eax
   1edf6:	0f 8f 97 00 00 00    	jg     1ee93 <do_emu+0x1dd>
   1edfc:	3d e3 01 00 00       	cmp    $0x1e3,%eax
   1ee01:	7f 48                	jg     1ee4b <do_emu+0x195>
   1ee03:	3d e2 01 00 00       	cmp    $0x1e2,%eax
   1ee08:	0f 8d 8c 01 00 00    	jge    1ef9a <do_emu+0x2e4>
   1ee0e:	3d d7 01 00 00       	cmp    $0x1d7,%eax
   1ee13:	7f 1b                	jg     1ee30 <do_emu+0x17a>
   1ee15:	3d d1 01 00 00       	cmp    $0x1d1,%eax
   1ee1a:	0f 8d 2b 01 00 00    	jge    1ef4b <do_emu+0x295>
   1ee20:	3d d0 01 00 00       	cmp    $0x1d0,%eax
   1ee25:	0f 84 df 1b 00 00    	je     20a0a <do_emu+0x1d54>
   1ee2b:	e9 52 04 00 00       	jmp    1f282 <do_emu+0x5cc>
   1ee30:	3d e0 01 00 00       	cmp    $0x1e0,%eax
   1ee35:	0f 84 21 01 00 00    	je     1ef5c <do_emu+0x2a6>
   1ee3b:	3d e1 01 00 00       	cmp    $0x1e1,%eax
   1ee40:	0f 84 35 01 00 00    	je     1ef7b <do_emu+0x2c5>
   1ee46:	e9 37 04 00 00       	jmp    1f282 <do_emu+0x5cc>
   1ee4b:	3d e7 01 00 00       	cmp    $0x1e7,%eax
   1ee50:	7f 26                	jg     1ee78 <do_emu+0x1c2>
   1ee52:	3d e6 01 00 00       	cmp    $0x1e6,%eax
   1ee57:	0f 8d 8d 01 00 00    	jge    1efea <do_emu+0x334>
   1ee5d:	3d e4 01 00 00       	cmp    $0x1e4,%eax
   1ee62:	0f 84 43 01 00 00    	je     1efab <do_emu+0x2f5>
   1ee68:	3d e5 01 00 00       	cmp    $0x1e5,%eax
   1ee6d:	0f 84 56 01 00 00    	je     1efc9 <do_emu+0x313>
   1ee73:	e9 0a 04 00 00       	jmp    1f282 <do_emu+0x5cc>
   1ee78:	3d e9 01 00 00       	cmp    $0x1e9,%eax
   1ee7d:	0f 84 ac 01 00 00    	je     1f02f <do_emu+0x379>
   1ee83:	3d e9 01 00 00       	cmp    $0x1e9,%eax
   1ee88:	0f 8f d5 01 00 00    	jg     1f063 <do_emu+0x3ad>
   1ee8e:	e9 68 01 00 00       	jmp    1effb <do_emu+0x345>
   1ee93:	3d e9 02 00 00       	cmp    $0x2e9,%eax
   1ee98:	0f 84 06 03 00 00    	je     1f1a4 <do_emu+0x4ee>
   1ee9e:	3d e9 02 00 00       	cmp    $0x2e9,%eax
   1eea3:	7f 48                	jg     1eeed <do_emu+0x237>
   1eea5:	3d ee 01 00 00       	cmp    $0x1ee,%eax
   1eeaa:	0f 84 83 02 00 00    	je     1f133 <do_emu+0x47d>
   1eeb0:	3d ee 01 00 00       	cmp    $0x1ee,%eax
   1eeb5:	7f 1b                	jg     1eed2 <do_emu+0x21c>
   1eeb7:	3d ec 01 00 00       	cmp    $0x1ec,%eax
   1eebc:	0f 84 09 02 00 00    	je     1f0cb <do_emu+0x415>
   1eec2:	3d ed 01 00 00       	cmp    $0x1ed,%eax
   1eec7:	0f 84 32 02 00 00    	je     1f0ff <do_emu+0x449>
   1eecd:	e9 b0 03 00 00       	jmp    1f282 <do_emu+0x5cc>
   1eed2:	3d ef 01 00 00       	cmp    $0x1ef,%eax
   1eed7:	0f 84 8a 02 00 00    	je     1f167 <do_emu+0x4b1>
   1eedd:	3d ff 01 00 00       	cmp    $0x1ff,%eax
   1eee2:	0f 8f 9a 03 00 00    	jg     1f282 <do_emu+0x5cc>
   1eee8:	e9 8b 02 00 00       	jmp    1f178 <do_emu+0x4c2>
   1eeed:	3d e3 03 00 00       	cmp    $0x3e3,%eax
   1eef2:	0f 84 06 03 00 00    	je     1f1fe <do_emu+0x548>
   1eef8:	3d e3 03 00 00       	cmp    $0x3e3,%eax
   1eefd:	7f 26                	jg     1ef25 <do_emu+0x26f>
   1eeff:	3d d0 03 00 00       	cmp    $0x3d0,%eax
   1ef04:	0f 8c 78 03 00 00    	jl     1f282 <do_emu+0x5cc>
   1ef0a:	3d d1 03 00 00       	cmp    $0x3d1,%eax
   1ef0f:	0f 8e f8 1a 00 00    	jle    20a0d <do_emu+0x1d57>
   1ef15:	3d e2 03 00 00       	cmp    $0x3e2,%eax
   1ef1a:	0f 84 bc 02 00 00    	je     1f1dc <do_emu+0x526>
   1ef20:	e9 5d 03 00 00       	jmp    1f282 <do_emu+0x5cc>
   1ef25:	3d d9 06 00 00       	cmp    $0x6d9,%eax
   1ef2a:	0f 84 00 03 00 00    	je     1f230 <do_emu+0x57a>
   1ef30:	3d e0 07 00 00       	cmp    $0x7e0,%eax
   1ef35:	0f 84 2d 03 00 00    	je     1f268 <do_emu+0x5b2>
   1ef3b:	3d e4 03 00 00       	cmp    $0x3e4,%eax
   1ef40:	0f 84 ca 1a 00 00    	je     20a10 <do_emu+0x1d5a>
   1ef46:	e9 37 03 00 00       	jmp    1f282 <do_emu+0x5cc>
		case 0x1d0: /* fnop */          // 空操作指令FNOP
			return;
		case 0x1d1: case 0x1d2: case 0x1d3:     // 无效指令代码。必信号，退出。
		case 0x1d4: case 0x1d5: case 0x1d6: case 0x1d7:
			math_abort(info,1<<(SIGILL-1));
   1ef4b:	83 ec 08             	sub    $0x8,%esp
   1ef4e:	6a 08                	push   $0x8
   1ef50:	ff 74 24 3c          	pushl  0x3c(%esp)
   1ef54:	e8 21 1b 00 00       	call   20a7a <__math_abort>
   1ef59:	83 c4 10             	add    $0x10,%esp
		case 0x1e0:                     // FCHS - 改变ST符号位。即ST = -ST。
			ST(0).exponent ^= 0x8000;
   1ef5c:	83 ec 0c             	sub    $0xc,%esp
   1ef5f:	6a 00                	push   $0x0
   1ef61:	e8 74 1c 00 00       	call   20bda <__st>
   1ef66:	83 c4 10             	add    $0x10,%esp
   1ef69:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   1ef6d:	66 81 f2 00 80       	xor    $0x8000,%dx
   1ef72:	66 89 50 08          	mov    %dx,0x8(%eax)
			return;
   1ef76:	e9 96 1a 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x1e1:                     // FABS - 取绝对值。即ST = |ST|。
			ST(0).exponent &= 0x7fff;
   1ef7b:	83 ec 0c             	sub    $0xc,%esp
   1ef7e:	6a 00                	push   $0x0
   1ef80:	e8 55 1c 00 00       	call   20bda <__st>
   1ef85:	83 c4 10             	add    $0x10,%esp
   1ef88:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   1ef8c:	66 81 e2 ff 7f       	and    $0x7fff,%dx
   1ef91:	66 89 50 08          	mov    %dx,0x8(%eax)
			return;
   1ef95:	e9 77 1a 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x1e2: case 0x1e3:         // 无效指令代码。发信号，退出。
			math_abort(info,1<<(SIGILL-1));
   1ef9a:	83 ec 08             	sub    $0x8,%esp
   1ef9d:	6a 08                	push   $0x8
   1ef9f:	ff 74 24 3c          	pushl  0x3c(%esp)
   1efa3:	e8 d2 1a 00 00       	call   20a7a <__math_abort>
   1efa8:	83 c4 10             	add    $0x10,%esp
		case 0x1e4:                     // FTST - 测试TS，同时设置状态字中Cn。
			ftst(PST(0));
   1efab:	83 ec 0c             	sub    $0xc,%esp
   1efae:	6a 00                	push   $0x0
   1efb0:	e8 25 1c 00 00       	call   20bda <__st>
   1efb5:	83 c4 10             	add    $0x10,%esp
   1efb8:	83 ec 0c             	sub    $0xc,%esp
   1efbb:	50                   	push   %eax
   1efbc:	e8 61 30 00 00       	call   22022 <ftst>
   1efc1:	83 c4 10             	add    $0x10,%esp
			return;
   1efc4:	e9 48 1a 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x1e5:                     // FXAM - 检查TS值，同时修改状态字中Cn。
			printk("fxam not implemented\n\r");     // 未实现。发信号退出。
   1efc9:	83 ec 0c             	sub    $0xc,%esp
   1efcc:	68 34 52 02 00       	push   $0x25234
   1efd1:	e8 71 9c fe ff       	call   8c47 <printk>
   1efd6:	83 c4 10             	add    $0x10,%esp
			math_abort(info,1<<(SIGILL-1));
   1efd9:	83 ec 08             	sub    $0x8,%esp
   1efdc:	6a 08                	push   $0x8
   1efde:	ff 74 24 3c          	pushl  0x3c(%esp)
   1efe2:	e8 93 1a 00 00       	call   20a7a <__math_abort>
   1efe7:	83 c4 10             	add    $0x10,%esp
		case 0x1e6: case 0x1e7:         // 无效指令代码。发信号，退出。
			math_abort(info,1<<(SIGILL-1));
   1efea:	83 ec 08             	sub    $0x8,%esp
   1efed:	6a 08                	push   $0x8
   1efef:	ff 74 24 3c          	pushl  0x3c(%esp)
   1eff3:	e8 82 1a 00 00       	call   20a7a <__math_abort>
   1eff8:	83 c4 10             	add    $0x10,%esp
		case 0x1e8:                     // FLD1 - 加载常数1.0到累加器ST。
			fpush();
   1effb:	e8 15 1b 00 00       	call   20b15 <fpush>
			ST(0) = CONST1;
   1f000:	83 ec 0c             	sub    $0xc,%esp
   1f003:	6a 00                	push   $0x0
   1f005:	e8 d0 1b 00 00       	call   20bda <__st>
   1f00a:	83 c4 10             	add    $0x10,%esp
   1f00d:	66 c7 00 00 00       	movw   $0x0,(%eax)
   1f012:	66 c7 40 02 00 00    	movw   $0x0,0x2(%eax)
   1f018:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)
   1f01e:	66 c7 40 06 00 80    	movw   $0x8000,0x6(%eax)
   1f024:	66 c7 40 08 ff 3f    	movw   $0x3fff,0x8(%eax)
			return;
   1f02a:	e9 e2 19 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x1e9:                     // FLDL2T - 加载常数Log2(10)到累加器ST。
			fpush();
   1f02f:	e8 e1 1a 00 00       	call   20b15 <fpush>
			ST(0) = CONSTL2T;
   1f034:	83 ec 0c             	sub    $0xc,%esp
   1f037:	6a 00                	push   $0x0
   1f039:	e8 9c 1b 00 00       	call   20bda <__st>
   1f03e:	83 c4 10             	add    $0x10,%esp
   1f041:	66 c7 00 fe 8a       	movw   $0x8afe,(%eax)
   1f046:	66 c7 40 02 1b cd    	movw   $0xcd1b,0x2(%eax)
   1f04c:	66 c7 40 04 4b 78    	movw   $0x784b,0x4(%eax)
   1f052:	66 c7 40 06 9a d4    	movw   $0xd49a,0x6(%eax)
   1f058:	66 c7 40 08 00 40    	movw   $0x4000,0x8(%eax)
			return;
   1f05e:	e9 ae 19 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x1ea:                     // FLDL2E - 加载常数Log2(e)到累加器ST。
			fpush();
   1f063:	e8 ad 1a 00 00       	call   20b15 <fpush>
			ST(0) = CONSTL2E;
   1f068:	83 ec 0c             	sub    $0xc,%esp
   1f06b:	6a 00                	push   $0x0
   1f06d:	e8 68 1b 00 00       	call   20bda <__st>
   1f072:	83 c4 10             	add    $0x10,%esp
   1f075:	66 c7 00 bc f0       	movw   $0xf0bc,(%eax)
   1f07a:	66 c7 40 02 17 5c    	movw   $0x5c17,0x2(%eax)
   1f080:	66 c7 40 04 29 3b    	movw   $0x3b29,0x4(%eax)
   1f086:	66 c7 40 06 aa b8    	movw   $0xb8aa,0x6(%eax)
   1f08c:	66 c7 40 08 ff 3f    	movw   $0x3fff,0x8(%eax)
			return;
   1f092:	e9 7a 19 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x1eb:                     // FLDPI - 加载常数Pi到累加器ST。
			fpush();
   1f097:	e8 79 1a 00 00       	call   20b15 <fpush>
			ST(0) = CONSTPI;
   1f09c:	83 ec 0c             	sub    $0xc,%esp
   1f09f:	6a 00                	push   $0x0
   1f0a1:	e8 34 1b 00 00       	call   20bda <__st>
   1f0a6:	83 c4 10             	add    $0x10,%esp
   1f0a9:	66 c7 00 35 c2       	movw   $0xc235,(%eax)
   1f0ae:	66 c7 40 02 68 21    	movw   $0x2168,0x2(%eax)
   1f0b4:	66 c7 40 04 a2 da    	movw   $0xdaa2,0x4(%eax)
   1f0ba:	66 c7 40 06 0f c9    	movw   $0xc90f,0x6(%eax)
   1f0c0:	66 c7 40 08 00 40    	movw   $0x4000,0x8(%eax)
			return;
   1f0c6:	e9 46 19 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x1ec:                     // FLDLG2 - 加载常数Log10(2)到累加器ST。
			fpush();
   1f0cb:	e8 45 1a 00 00       	call   20b15 <fpush>
			ST(0) = CONSTLG2;
   1f0d0:	83 ec 0c             	sub    $0xc,%esp
   1f0d3:	6a 00                	push   $0x0
   1f0d5:	e8 00 1b 00 00       	call   20bda <__st>
   1f0da:	83 c4 10             	add    $0x10,%esp
   1f0dd:	66 c7 00 99 f7       	movw   $0xf799,(%eax)
   1f0e2:	66 c7 40 02 cf fb    	movw   $0xfbcf,0x2(%eax)
   1f0e8:	66 c7 40 04 84 9a    	movw   $0x9a84,0x4(%eax)
   1f0ee:	66 c7 40 06 20 9a    	movw   $0x9a20,0x6(%eax)
   1f0f4:	66 c7 40 08 fd 3f    	movw   $0x3ffd,0x8(%eax)
			return;
   1f0fa:	e9 12 19 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x1ed:                     // FLDLN2 - 加载常数Loge(2)到累加器ST。
			fpush();
   1f0ff:	e8 11 1a 00 00       	call   20b15 <fpush>
			ST(0) = CONSTLN2;
   1f104:	83 ec 0c             	sub    $0xc,%esp
   1f107:	6a 00                	push   $0x0
   1f109:	e8 cc 1a 00 00       	call   20bda <__st>
   1f10e:	83 c4 10             	add    $0x10,%esp
   1f111:	66 c7 00 ac 79       	movw   $0x79ac,(%eax)
   1f116:	66 c7 40 02 cf d1    	movw   $0xd1cf,0x2(%eax)
   1f11c:	66 c7 40 04 f7 17    	movw   $0x17f7,0x4(%eax)
   1f122:	66 c7 40 06 72 b1    	movw   $0xb172,0x6(%eax)
   1f128:	66 c7 40 08 fe 3f    	movw   $0x3ffe,0x8(%eax)
			return;
   1f12e:	e9 de 18 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x1ee:                     // FLDZ - 加载常数0.0到累加器ST。
			fpush();
   1f133:	e8 dd 19 00 00       	call   20b15 <fpush>
			ST(0) = CONSTZ;
   1f138:	83 ec 0c             	sub    $0xc,%esp
   1f13b:	6a 00                	push   $0x0
   1f13d:	e8 98 1a 00 00       	call   20bda <__st>
   1f142:	83 c4 10             	add    $0x10,%esp
   1f145:	66 c7 00 00 00       	movw   $0x0,(%eax)
   1f14a:	66 c7 40 02 00 00    	movw   $0x0,0x2(%eax)
   1f150:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)
   1f156:	66 c7 40 06 00 00    	movw   $0x0,0x6(%eax)
   1f15c:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
			return;
   1f162:	e9 aa 18 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x1ef:                     // 无效和未实现仿真指令代码。发信号，退出。
			math_abort(info,1<<(SIGILL-1));
   1f167:	83 ec 08             	sub    $0x8,%esp
   1f16a:	6a 08                	push   $0x8
   1f16c:	ff 74 24 3c          	pushl  0x3c(%esp)
   1f170:	e8 05 19 00 00       	call   20a7a <__math_abort>
   1f175:	83 c4 10             	add    $0x10,%esp
		case 0x1f0: case 0x1f1: case 0x1f2: case 0x1f3:
		case 0x1f4: case 0x1f5: case 0x1f6: case 0x1f7:
		case 0x1f8: case 0x1f9: case 0x1fa: case 0x1fb:
		case 0x1fc: case 0x1fd: case 0x1fe: case 0x1ff:
			printk("%04x fxxx not implemented\n\r",code + 0xc800);
   1f178:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f17d:	05 00 c8 00 00       	add    $0xc800,%eax
   1f182:	83 ec 08             	sub    $0x8,%esp
   1f185:	50                   	push   %eax
   1f186:	68 4b 52 02 00       	push   $0x2524b
   1f18b:	e8 b7 9a fe ff       	call   8c47 <printk>
   1f190:	83 c4 10             	add    $0x10,%esp
			math_abort(info,1<<(SIGILL-1));
   1f193:	83 ec 08             	sub    $0x8,%esp
   1f196:	6a 08                	push   $0x8
   1f198:	ff 74 24 3c          	pushl  0x3c(%esp)
   1f19c:	e8 d9 18 00 00       	call   20a7a <__math_abort>
   1f1a1:	83 c4 10             	add    $0x10,%esp
		case 0x2e9:                     // FUCOMPP - 无次序比较。
			fucom(PST(1),PST(0));
   1f1a4:	83 ec 0c             	sub    $0xc,%esp
   1f1a7:	6a 00                	push   $0x0
   1f1a9:	e8 2c 1a 00 00       	call   20bda <__st>
   1f1ae:	83 c4 10             	add    $0x10,%esp
   1f1b1:	89 c3                	mov    %eax,%ebx
   1f1b3:	83 ec 0c             	sub    $0xc,%esp
   1f1b6:	6a 01                	push   $0x1
   1f1b8:	e8 1d 1a 00 00       	call   20bda <__st>
   1f1bd:	83 c4 10             	add    $0x10,%esp
   1f1c0:	83 ec 08             	sub    $0x8,%esp
   1f1c3:	53                   	push   %ebx
   1f1c4:	50                   	push   %eax
   1f1c5:	e8 50 2f 00 00       	call   2211a <fucom>
   1f1ca:	83 c4 10             	add    $0x10,%esp
			fpop(); fpop();
   1f1cd:	e8 d4 18 00 00       	call   20aa6 <fpop>
   1f1d2:	e8 cf 18 00 00       	call   20aa6 <fpop>
			return;
   1f1d7:	e9 35 18 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x3d0: case 0x3d1:         // FNOP - 对387。！！应该是0x3e0，0x3e1。
			return;
		case 0x3e2:                     // FCLEX - 清状态字中异常标志。
			I387.swd &= 0x7f00;
   1f1dc:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1f1e1:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   1f1e7:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   1f1ed:	81 e2 00 7f 00 00    	and    $0x7f00,%edx
   1f1f3:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
			return;
   1f1f9:	e9 13 18 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x3e3:                     // FINIT - 初始化协处理器。
			I387.cwd = 0x037f;
   1f1fe:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1f203:	c7 80 18 04 00 00 7f 	movl   $0x37f,0x418(%eax)
   1f20a:	03 00 00 
			I387.swd = 0x0000;
   1f20d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1f212:	c7 80 1c 04 00 00 00 	movl   $0x0,0x41c(%eax)
   1f219:	00 00 00 
			I387.twd = 0x0000;
   1f21c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1f221:	c7 80 20 04 00 00 00 	movl   $0x0,0x420(%eax)
   1f228:	00 00 00 
			return;
   1f22b:	e9 e1 17 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x3e4:                     // FNOP - 对80387。
			return;
		case 0x6d9:                     // FCOMPP - ST(i)与ST比较，出栈操作两次。
			fcom(PST(1),PST(0));
   1f230:	83 ec 0c             	sub    $0xc,%esp
   1f233:	6a 00                	push   $0x0
   1f235:	e8 a0 19 00 00       	call   20bda <__st>
   1f23a:	83 c4 10             	add    $0x10,%esp
   1f23d:	89 c3                	mov    %eax,%ebx
   1f23f:	83 ec 0c             	sub    $0xc,%esp
   1f242:	6a 01                	push   $0x1
   1f244:	e8 91 19 00 00       	call   20bda <__st>
   1f249:	83 c4 10             	add    $0x10,%esp
   1f24c:	83 ec 08             	sub    $0x8,%esp
   1f24f:	53                   	push   %ebx
   1f250:	50                   	push   %eax
   1f251:	e8 6d 2e 00 00       	call   220c3 <fcom>
   1f256:	83 c4 10             	add    $0x10,%esp
			fpop(); fpop();
   1f259:	e8 48 18 00 00       	call   20aa6 <fpop>
   1f25e:	e8 43 18 00 00       	call   20aa6 <fpop>
			return;
   1f263:	e9 a9 17 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x7e0:                     // FSTSW AX - 保存当前状态字到AX寄存器中。
			*(short *) &EAX = I387.swd;
   1f268:	8b 44 24 30          	mov    0x30(%esp),%eax
   1f26c:	8d 50 18             	lea    0x18(%eax),%edx
   1f26f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1f274:	8b 80 1c 04 00 00    	mov    0x41c(%eax),%eax
   1f27a:	66 89 02             	mov    %ax,(%edx)
			return;
   1f27d:	e9 8f 17 00 00       	jmp    20a11 <do_emu+0x1d5b>
	}
// 下面开始处理第2字节最后3位是REG的指令。即11011,XXXXXXXX，REG形式的代码。
	switch (code >> 3) {
   1f282:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f287:	66 c1 e8 03          	shr    $0x3,%ax
   1f28b:	0f b7 c0             	movzwl %ax,%eax
   1f28e:	83 e8 18             	sub    $0x18,%eax
   1f291:	3d e3 00 00 00       	cmp    $0xe3,%eax
   1f296:	0f 87 c3 0d 00 00    	ja     2005f <do_emu+0x13a9>
   1f29c:	8b 04 85 d4 52 02 00 	mov    0x252d4(,%eax,4),%eax
   1f2a3:	ff e0                	jmp    *%eax
		case 0x18:                      // FADD ST, ST(i)。
			fadd(PST(0),PST(code & 7),&tmp);
   1f2a5:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f2aa:	83 e0 07             	and    $0x7,%eax
   1f2ad:	83 ec 0c             	sub    $0xc,%esp
   1f2b0:	50                   	push   %eax
   1f2b1:	e8 24 19 00 00       	call   20bda <__st>
   1f2b6:	83 c4 10             	add    $0x10,%esp
   1f2b9:	89 c3                	mov    %eax,%ebx
   1f2bb:	83 ec 0c             	sub    $0xc,%esp
   1f2be:	6a 00                	push   $0x0
   1f2c0:	e8 15 19 00 00       	call   20bda <__st>
   1f2c5:	83 c4 10             	add    $0x10,%esp
   1f2c8:	89 c2                	mov    %eax,%edx
   1f2ca:	83 ec 04             	sub    $0x4,%esp
   1f2cd:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f2d1:	50                   	push   %eax
   1f2d2:	53                   	push   %ebx
   1f2d3:	52                   	push   %edx
   1f2d4:	e8 09 26 00 00       	call   218e2 <fadd>
   1f2d9:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f2dc:	83 ec 0c             	sub    $0xc,%esp
   1f2df:	6a 00                	push   $0x0
   1f2e1:	e8 f4 18 00 00       	call   20bda <__st>
   1f2e6:	83 c4 10             	add    $0x10,%esp
   1f2e9:	89 c1                	mov    %eax,%ecx
   1f2eb:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1f2ef:	8b 50 04             	mov    0x4(%eax),%edx
   1f2f2:	8b 00                	mov    (%eax),%eax
   1f2f4:	89 01                	mov    %eax,(%ecx)
   1f2f6:	89 51 04             	mov    %edx,0x4(%ecx)
   1f2f9:	83 ec 0c             	sub    $0xc,%esp
   1f2fc:	6a 00                	push   $0x0
   1f2fe:	e8 d7 18 00 00       	call   20bda <__st>
   1f303:	83 c4 10             	add    $0x10,%esp
   1f306:	89 c2                	mov    %eax,%edx
   1f308:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f30d:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f311:	e9 fb 16 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x19:                      // FMUL ST, ST(i)。
			fmul(PST(0),PST(code & 7),&tmp);
   1f316:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f31b:	83 e0 07             	and    $0x7,%eax
   1f31e:	83 ec 0c             	sub    $0xc,%esp
   1f321:	50                   	push   %eax
   1f322:	e8 b3 18 00 00       	call   20bda <__st>
   1f327:	83 c4 10             	add    $0x10,%esp
   1f32a:	89 c3                	mov    %eax,%ebx
   1f32c:	83 ec 0c             	sub    $0xc,%esp
   1f32f:	6a 00                	push   $0x0
   1f331:	e8 a4 18 00 00       	call   20bda <__st>
   1f336:	83 c4 10             	add    $0x10,%esp
   1f339:	89 c2                	mov    %eax,%edx
   1f33b:	83 ec 04             	sub    $0x4,%esp
   1f33e:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f342:	50                   	push   %eax
   1f343:	53                   	push   %ebx
   1f344:	52                   	push   %edx
   1f345:	e8 62 27 00 00       	call   21aac <fmul>
   1f34a:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f34d:	83 ec 0c             	sub    $0xc,%esp
   1f350:	6a 00                	push   $0x0
   1f352:	e8 83 18 00 00       	call   20bda <__st>
   1f357:	83 c4 10             	add    $0x10,%esp
   1f35a:	89 c1                	mov    %eax,%ecx
   1f35c:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1f360:	8b 50 04             	mov    0x4(%eax),%edx
   1f363:	8b 00                	mov    (%eax),%eax
   1f365:	89 01                	mov    %eax,(%ecx)
   1f367:	89 51 04             	mov    %edx,0x4(%ecx)
   1f36a:	83 ec 0c             	sub    $0xc,%esp
   1f36d:	6a 00                	push   $0x0
   1f36f:	e8 66 18 00 00       	call   20bda <__st>
   1f374:	83 c4 10             	add    $0x10,%esp
   1f377:	89 c2                	mov    %eax,%edx
   1f379:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f37e:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f382:	e9 8a 16 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x1a:                      // FCOM ST(i)。
			fcom(PST(code & 7),&tmp);
   1f387:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f38c:	83 e0 07             	and    $0x7,%eax
   1f38f:	83 ec 0c             	sub    $0xc,%esp
   1f392:	50                   	push   %eax
   1f393:	e8 42 18 00 00       	call   20bda <__st>
   1f398:	83 c4 10             	add    $0x10,%esp
   1f39b:	89 c2                	mov    %eax,%edx
   1f39d:	83 ec 08             	sub    $0x8,%esp
   1f3a0:	8d 44 24 14          	lea    0x14(%esp),%eax
   1f3a4:	50                   	push   %eax
   1f3a5:	52                   	push   %edx
   1f3a6:	e8 18 2d 00 00       	call   220c3 <fcom>
   1f3ab:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f3ae:	83 ec 0c             	sub    $0xc,%esp
   1f3b1:	6a 00                	push   $0x0
   1f3b3:	e8 22 18 00 00       	call   20bda <__st>
   1f3b8:	83 c4 10             	add    $0x10,%esp
   1f3bb:	89 c1                	mov    %eax,%ecx
   1f3bd:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1f3c1:	8b 50 04             	mov    0x4(%eax),%edx
   1f3c4:	8b 00                	mov    (%eax),%eax
   1f3c6:	89 01                	mov    %eax,(%ecx)
   1f3c8:	89 51 04             	mov    %edx,0x4(%ecx)
   1f3cb:	83 ec 0c             	sub    $0xc,%esp
   1f3ce:	6a 00                	push   $0x0
   1f3d0:	e8 05 18 00 00       	call   20bda <__st>
   1f3d5:	83 c4 10             	add    $0x10,%esp
   1f3d8:	89 c2                	mov    %eax,%edx
   1f3da:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f3df:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f3e3:	e9 29 16 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x1b:                      // FCOMP ST(i)。
			fcom(PST(code & 7),&tmp);
   1f3e8:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f3ed:	83 e0 07             	and    $0x7,%eax
   1f3f0:	83 ec 0c             	sub    $0xc,%esp
   1f3f3:	50                   	push   %eax
   1f3f4:	e8 e1 17 00 00       	call   20bda <__st>
   1f3f9:	83 c4 10             	add    $0x10,%esp
   1f3fc:	89 c2                	mov    %eax,%edx
   1f3fe:	83 ec 08             	sub    $0x8,%esp
   1f401:	8d 44 24 14          	lea    0x14(%esp),%eax
   1f405:	50                   	push   %eax
   1f406:	52                   	push   %edx
   1f407:	e8 b7 2c 00 00       	call   220c3 <fcom>
   1f40c:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f40f:	83 ec 0c             	sub    $0xc,%esp
   1f412:	6a 00                	push   $0x0
   1f414:	e8 c1 17 00 00       	call   20bda <__st>
   1f419:	83 c4 10             	add    $0x10,%esp
   1f41c:	89 c1                	mov    %eax,%ecx
   1f41e:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1f422:	8b 50 04             	mov    0x4(%eax),%edx
   1f425:	8b 00                	mov    (%eax),%eax
   1f427:	89 01                	mov    %eax,(%ecx)
   1f429:	89 51 04             	mov    %edx,0x4(%ecx)
   1f42c:	83 ec 0c             	sub    $0xc,%esp
   1f42f:	6a 00                	push   $0x0
   1f431:	e8 a4 17 00 00       	call   20bda <__st>
   1f436:	83 c4 10             	add    $0x10,%esp
   1f439:	89 c2                	mov    %eax,%edx
   1f43b:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f440:	66 89 42 08          	mov    %ax,0x8(%edx)
			fpop();
   1f444:	e8 5d 16 00 00       	call   20aa6 <fpop>
			return;
   1f449:	e9 c3 15 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x1c:                      // FSUB ST, ST(i)。
			real_to_real(&ST(code & 7),&tmp);
   1f44e:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f452:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f457:	83 e0 07             	and    $0x7,%eax
   1f45a:	83 ec 0c             	sub    $0xc,%esp
   1f45d:	50                   	push   %eax
   1f45e:	e8 77 17 00 00       	call   20bda <__st>
   1f463:	83 c4 10             	add    $0x10,%esp
   1f466:	8b 50 04             	mov    0x4(%eax),%edx
   1f469:	8b 00                	mov    (%eax),%eax
   1f46b:	89 03                	mov    %eax,(%ebx)
   1f46d:	89 53 04             	mov    %edx,0x4(%ebx)
   1f470:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f475:	83 e0 07             	and    $0x7,%eax
   1f478:	83 ec 0c             	sub    $0xc,%esp
   1f47b:	50                   	push   %eax
   1f47c:	e8 59 17 00 00       	call   20bda <__st>
   1f481:	83 c4 10             	add    $0x10,%esp
   1f484:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   1f488:	66 89 44 24 14       	mov    %ax,0x14(%esp)
			tmp.exponent ^= 0x8000;
   1f48d:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f492:	66 35 00 80          	xor    $0x8000,%ax
   1f496:	66 89 44 24 14       	mov    %ax,0x14(%esp)
			fadd(PST(0),&tmp,&tmp);
   1f49b:	83 ec 0c             	sub    $0xc,%esp
   1f49e:	6a 00                	push   $0x0
   1f4a0:	e8 35 17 00 00       	call   20bda <__st>
   1f4a5:	83 c4 10             	add    $0x10,%esp
   1f4a8:	89 c2                	mov    %eax,%edx
   1f4aa:	83 ec 04             	sub    $0x4,%esp
   1f4ad:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f4b1:	50                   	push   %eax
   1f4b2:	8d 44 24 14          	lea    0x14(%esp),%eax
   1f4b6:	50                   	push   %eax
   1f4b7:	52                   	push   %edx
   1f4b8:	e8 25 24 00 00       	call   218e2 <fadd>
   1f4bd:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f4c0:	83 ec 0c             	sub    $0xc,%esp
   1f4c3:	6a 00                	push   $0x0
   1f4c5:	e8 10 17 00 00       	call   20bda <__st>
   1f4ca:	83 c4 10             	add    $0x10,%esp
   1f4cd:	89 c1                	mov    %eax,%ecx
   1f4cf:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1f4d3:	8b 50 04             	mov    0x4(%eax),%edx
   1f4d6:	8b 00                	mov    (%eax),%eax
   1f4d8:	89 01                	mov    %eax,(%ecx)
   1f4da:	89 51 04             	mov    %edx,0x4(%ecx)
   1f4dd:	83 ec 0c             	sub    $0xc,%esp
   1f4e0:	6a 00                	push   $0x0
   1f4e2:	e8 f3 16 00 00       	call   20bda <__st>
   1f4e7:	83 c4 10             	add    $0x10,%esp
   1f4ea:	89 c2                	mov    %eax,%edx
   1f4ec:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f4f1:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f4f5:	e9 17 15 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x1d:                      // FSUBR ST, ST(i)。
			ST(0).exponent ^= 0x8000;
   1f4fa:	83 ec 0c             	sub    $0xc,%esp
   1f4fd:	6a 00                	push   $0x0
   1f4ff:	e8 d6 16 00 00       	call   20bda <__st>
   1f504:	83 c4 10             	add    $0x10,%esp
   1f507:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   1f50b:	66 81 f2 00 80       	xor    $0x8000,%dx
   1f510:	66 89 50 08          	mov    %dx,0x8(%eax)
			fadd(PST(0),PST(code & 7),&tmp);
   1f514:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f519:	83 e0 07             	and    $0x7,%eax
   1f51c:	83 ec 0c             	sub    $0xc,%esp
   1f51f:	50                   	push   %eax
   1f520:	e8 b5 16 00 00       	call   20bda <__st>
   1f525:	83 c4 10             	add    $0x10,%esp
   1f528:	89 c3                	mov    %eax,%ebx
   1f52a:	83 ec 0c             	sub    $0xc,%esp
   1f52d:	6a 00                	push   $0x0
   1f52f:	e8 a6 16 00 00       	call   20bda <__st>
   1f534:	83 c4 10             	add    $0x10,%esp
   1f537:	89 c2                	mov    %eax,%edx
   1f539:	83 ec 04             	sub    $0x4,%esp
   1f53c:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f540:	50                   	push   %eax
   1f541:	53                   	push   %ebx
   1f542:	52                   	push   %edx
   1f543:	e8 9a 23 00 00       	call   218e2 <fadd>
   1f548:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f54b:	83 ec 0c             	sub    $0xc,%esp
   1f54e:	6a 00                	push   $0x0
   1f550:	e8 85 16 00 00       	call   20bda <__st>
   1f555:	83 c4 10             	add    $0x10,%esp
   1f558:	89 c1                	mov    %eax,%ecx
   1f55a:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1f55e:	8b 50 04             	mov    0x4(%eax),%edx
   1f561:	8b 00                	mov    (%eax),%eax
   1f563:	89 01                	mov    %eax,(%ecx)
   1f565:	89 51 04             	mov    %edx,0x4(%ecx)
   1f568:	83 ec 0c             	sub    $0xc,%esp
   1f56b:	6a 00                	push   $0x0
   1f56d:	e8 68 16 00 00       	call   20bda <__st>
   1f572:	83 c4 10             	add    $0x10,%esp
   1f575:	89 c2                	mov    %eax,%edx
   1f577:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f57c:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f580:	e9 8c 14 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x1e:                      // FDIV ST, ST(i)。
			fdiv(PST(0),PST(code & 7),&tmp);
   1f585:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f58a:	83 e0 07             	and    $0x7,%eax
   1f58d:	83 ec 0c             	sub    $0xc,%esp
   1f590:	50                   	push   %eax
   1f591:	e8 44 16 00 00       	call   20bda <__st>
   1f596:	83 c4 10             	add    $0x10,%esp
   1f599:	89 c3                	mov    %eax,%ebx
   1f59b:	83 ec 0c             	sub    $0xc,%esp
   1f59e:	6a 00                	push   $0x0
   1f5a0:	e8 35 16 00 00       	call   20bda <__st>
   1f5a5:	83 c4 10             	add    $0x10,%esp
   1f5a8:	89 c2                	mov    %eax,%edx
   1f5aa:	83 ec 04             	sub    $0x4,%esp
   1f5ad:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f5b1:	50                   	push   %eax
   1f5b2:	53                   	push   %ebx
   1f5b3:	52                   	push   %edx
   1f5b4:	e8 81 27 00 00       	call   21d3a <fdiv>
   1f5b9:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f5bc:	83 ec 0c             	sub    $0xc,%esp
   1f5bf:	6a 00                	push   $0x0
   1f5c1:	e8 14 16 00 00       	call   20bda <__st>
   1f5c6:	83 c4 10             	add    $0x10,%esp
   1f5c9:	89 c1                	mov    %eax,%ecx
   1f5cb:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1f5cf:	8b 50 04             	mov    0x4(%eax),%edx
   1f5d2:	8b 00                	mov    (%eax),%eax
   1f5d4:	89 01                	mov    %eax,(%ecx)
   1f5d6:	89 51 04             	mov    %edx,0x4(%ecx)
   1f5d9:	83 ec 0c             	sub    $0xc,%esp
   1f5dc:	6a 00                	push   $0x0
   1f5de:	e8 f7 15 00 00       	call   20bda <__st>
   1f5e3:	83 c4 10             	add    $0x10,%esp
   1f5e6:	89 c2                	mov    %eax,%edx
   1f5e8:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f5ed:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f5f1:	e9 1b 14 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x1f:                      // FDIVR ST, ST(i)。
			fdiv(PST(code & 7),PST(0),&tmp);
   1f5f6:	83 ec 0c             	sub    $0xc,%esp
   1f5f9:	6a 00                	push   $0x0
   1f5fb:	e8 da 15 00 00       	call   20bda <__st>
   1f600:	83 c4 10             	add    $0x10,%esp
   1f603:	89 c3                	mov    %eax,%ebx
   1f605:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f60a:	83 e0 07             	and    $0x7,%eax
   1f60d:	83 ec 0c             	sub    $0xc,%esp
   1f610:	50                   	push   %eax
   1f611:	e8 c4 15 00 00       	call   20bda <__st>
   1f616:	83 c4 10             	add    $0x10,%esp
   1f619:	89 c2                	mov    %eax,%edx
   1f61b:	83 ec 04             	sub    $0x4,%esp
   1f61e:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f622:	50                   	push   %eax
   1f623:	53                   	push   %ebx
   1f624:	52                   	push   %edx
   1f625:	e8 10 27 00 00       	call   21d3a <fdiv>
   1f62a:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f62d:	83 ec 0c             	sub    $0xc,%esp
   1f630:	6a 00                	push   $0x0
   1f632:	e8 a3 15 00 00       	call   20bda <__st>
   1f637:	83 c4 10             	add    $0x10,%esp
   1f63a:	89 c1                	mov    %eax,%ecx
   1f63c:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1f640:	8b 50 04             	mov    0x4(%eax),%edx
   1f643:	8b 00                	mov    (%eax),%eax
   1f645:	89 01                	mov    %eax,(%ecx)
   1f647:	89 51 04             	mov    %edx,0x4(%ecx)
   1f64a:	83 ec 0c             	sub    $0xc,%esp
   1f64d:	6a 00                	push   $0x0
   1f64f:	e8 86 15 00 00       	call   20bda <__st>
   1f654:	83 c4 10             	add    $0x10,%esp
   1f657:	89 c2                	mov    %eax,%edx
   1f659:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f65e:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f662:	e9 aa 13 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x38:                      // FLD ST(i)。
			fpush();
   1f667:	e8 a9 14 00 00       	call   20b15 <fpush>
			ST(0) = ST((code & 7)+1);
   1f66c:	83 ec 0c             	sub    $0xc,%esp
   1f66f:	6a 00                	push   $0x0
   1f671:	e8 64 15 00 00       	call   20bda <__st>
   1f676:	83 c4 10             	add    $0x10,%esp
   1f679:	89 c3                	mov    %eax,%ebx
   1f67b:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f680:	83 e0 07             	and    $0x7,%eax
   1f683:	83 c0 01             	add    $0x1,%eax
   1f686:	83 ec 0c             	sub    $0xc,%esp
   1f689:	50                   	push   %eax
   1f68a:	e8 4b 15 00 00       	call   20bda <__st>
   1f68f:	83 c4 10             	add    $0x10,%esp
   1f692:	8b 10                	mov    (%eax),%edx
   1f694:	89 13                	mov    %edx,(%ebx)
   1f696:	8b 50 04             	mov    0x4(%eax),%edx
   1f699:	89 53 04             	mov    %edx,0x4(%ebx)
   1f69c:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   1f6a0:	66 89 43 08          	mov    %ax,0x8(%ebx)
			return;
   1f6a4:	e9 68 13 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x39:                      // FXCH ST(i)。
			fxchg(&ST(0),&ST(code & 7));
   1f6a9:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f6ae:	83 e0 07             	and    $0x7,%eax
   1f6b1:	83 ec 0c             	sub    $0xc,%esp
   1f6b4:	50                   	push   %eax
   1f6b5:	e8 20 15 00 00       	call   20bda <__st>
   1f6ba:	83 c4 10             	add    $0x10,%esp
   1f6bd:	89 c3                	mov    %eax,%ebx
   1f6bf:	83 ec 0c             	sub    $0xc,%esp
   1f6c2:	6a 00                	push   $0x0
   1f6c4:	e8 11 15 00 00       	call   20bda <__st>
   1f6c9:	83 c4 10             	add    $0x10,%esp
   1f6cc:	83 ec 08             	sub    $0x8,%esp
   1f6cf:	53                   	push   %ebx
   1f6d0:	50                   	push   %eax
   1f6d1:	e8 ae 14 00 00       	call   20b84 <fxchg>
   1f6d6:	83 c4 10             	add    $0x10,%esp
			return;
   1f6d9:	e9 33 13 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x3b:                      // FSTP ST(i)。
			ST(code & 7) = ST(0);
   1f6de:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f6e3:	83 e0 07             	and    $0x7,%eax
   1f6e6:	83 ec 0c             	sub    $0xc,%esp
   1f6e9:	50                   	push   %eax
   1f6ea:	e8 eb 14 00 00       	call   20bda <__st>
   1f6ef:	83 c4 10             	add    $0x10,%esp
   1f6f2:	89 c3                	mov    %eax,%ebx
   1f6f4:	83 ec 0c             	sub    $0xc,%esp
   1f6f7:	6a 00                	push   $0x0
   1f6f9:	e8 dc 14 00 00       	call   20bda <__st>
   1f6fe:	83 c4 10             	add    $0x10,%esp
   1f701:	8b 10                	mov    (%eax),%edx
   1f703:	89 13                	mov    %edx,(%ebx)
   1f705:	8b 50 04             	mov    0x4(%eax),%edx
   1f708:	89 53 04             	mov    %edx,0x4(%ebx)
   1f70b:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   1f70f:	66 89 43 08          	mov    %ax,0x8(%ebx)
			fpop();
   1f713:	e8 8e 13 00 00       	call   20aa6 <fpop>
			return;
   1f718:	e9 f4 12 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x98:                      // FADD ST(i)， ST。
			fadd(PST(0),PST(code & 7),&tmp);
   1f71d:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f722:	83 e0 07             	and    $0x7,%eax
   1f725:	83 ec 0c             	sub    $0xc,%esp
   1f728:	50                   	push   %eax
   1f729:	e8 ac 14 00 00       	call   20bda <__st>
   1f72e:	83 c4 10             	add    $0x10,%esp
   1f731:	89 c3                	mov    %eax,%ebx
   1f733:	83 ec 0c             	sub    $0xc,%esp
   1f736:	6a 00                	push   $0x0
   1f738:	e8 9d 14 00 00       	call   20bda <__st>
   1f73d:	83 c4 10             	add    $0x10,%esp
   1f740:	89 c2                	mov    %eax,%edx
   1f742:	83 ec 04             	sub    $0x4,%esp
   1f745:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f749:	50                   	push   %eax
   1f74a:	53                   	push   %ebx
   1f74b:	52                   	push   %edx
   1f74c:	e8 91 21 00 00       	call   218e2 <fadd>
   1f751:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1f754:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f759:	83 e0 07             	and    $0x7,%eax
   1f75c:	83 ec 0c             	sub    $0xc,%esp
   1f75f:	50                   	push   %eax
   1f760:	e8 75 14 00 00       	call   20bda <__st>
   1f765:	83 c4 10             	add    $0x10,%esp
   1f768:	89 c1                	mov    %eax,%ecx
   1f76a:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1f76e:	8b 50 04             	mov    0x4(%eax),%edx
   1f771:	8b 00                	mov    (%eax),%eax
   1f773:	89 01                	mov    %eax,(%ecx)
   1f775:	89 51 04             	mov    %edx,0x4(%ecx)
   1f778:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f77d:	83 e0 07             	and    $0x7,%eax
   1f780:	83 ec 0c             	sub    $0xc,%esp
   1f783:	50                   	push   %eax
   1f784:	e8 51 14 00 00       	call   20bda <__st>
   1f789:	83 c4 10             	add    $0x10,%esp
   1f78c:	89 c2                	mov    %eax,%edx
   1f78e:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f793:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f797:	e9 75 12 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x99:                      // FMUL ST(i)， ST。
			fmul(PST(0),PST(code & 7),&tmp);
   1f79c:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f7a1:	83 e0 07             	and    $0x7,%eax
   1f7a4:	83 ec 0c             	sub    $0xc,%esp
   1f7a7:	50                   	push   %eax
   1f7a8:	e8 2d 14 00 00       	call   20bda <__st>
   1f7ad:	83 c4 10             	add    $0x10,%esp
   1f7b0:	89 c3                	mov    %eax,%ebx
   1f7b2:	83 ec 0c             	sub    $0xc,%esp
   1f7b5:	6a 00                	push   $0x0
   1f7b7:	e8 1e 14 00 00       	call   20bda <__st>
   1f7bc:	83 c4 10             	add    $0x10,%esp
   1f7bf:	89 c2                	mov    %eax,%edx
   1f7c1:	83 ec 04             	sub    $0x4,%esp
   1f7c4:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f7c8:	50                   	push   %eax
   1f7c9:	53                   	push   %ebx
   1f7ca:	52                   	push   %edx
   1f7cb:	e8 dc 22 00 00       	call   21aac <fmul>
   1f7d0:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1f7d3:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f7d8:	83 e0 07             	and    $0x7,%eax
   1f7db:	83 ec 0c             	sub    $0xc,%esp
   1f7de:	50                   	push   %eax
   1f7df:	e8 f6 13 00 00       	call   20bda <__st>
   1f7e4:	83 c4 10             	add    $0x10,%esp
   1f7e7:	89 c1                	mov    %eax,%ecx
   1f7e9:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1f7ed:	8b 50 04             	mov    0x4(%eax),%edx
   1f7f0:	8b 00                	mov    (%eax),%eax
   1f7f2:	89 01                	mov    %eax,(%ecx)
   1f7f4:	89 51 04             	mov    %edx,0x4(%ecx)
   1f7f7:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f7fc:	83 e0 07             	and    $0x7,%eax
   1f7ff:	83 ec 0c             	sub    $0xc,%esp
   1f802:	50                   	push   %eax
   1f803:	e8 d2 13 00 00       	call   20bda <__st>
   1f808:	83 c4 10             	add    $0x10,%esp
   1f80b:	89 c2                	mov    %eax,%edx
   1f80d:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f812:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f816:	e9 f6 11 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x9a:                      // FCOM ST(i)。
			fcom(PST(code & 7),PST(0));
   1f81b:	83 ec 0c             	sub    $0xc,%esp
   1f81e:	6a 00                	push   $0x0
   1f820:	e8 b5 13 00 00       	call   20bda <__st>
   1f825:	83 c4 10             	add    $0x10,%esp
   1f828:	89 c3                	mov    %eax,%ebx
   1f82a:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f82f:	83 e0 07             	and    $0x7,%eax
   1f832:	83 ec 0c             	sub    $0xc,%esp
   1f835:	50                   	push   %eax
   1f836:	e8 9f 13 00 00       	call   20bda <__st>
   1f83b:	83 c4 10             	add    $0x10,%esp
   1f83e:	83 ec 08             	sub    $0x8,%esp
   1f841:	53                   	push   %ebx
   1f842:	50                   	push   %eax
   1f843:	e8 7b 28 00 00       	call   220c3 <fcom>
   1f848:	83 c4 10             	add    $0x10,%esp
			return;
   1f84b:	e9 c1 11 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x9b:                      // FCOMP ST(i)。
			fcom(PST(code & 7),PST(0));
   1f850:	83 ec 0c             	sub    $0xc,%esp
   1f853:	6a 00                	push   $0x0
   1f855:	e8 80 13 00 00       	call   20bda <__st>
   1f85a:	83 c4 10             	add    $0x10,%esp
   1f85d:	89 c3                	mov    %eax,%ebx
   1f85f:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f864:	83 e0 07             	and    $0x7,%eax
   1f867:	83 ec 0c             	sub    $0xc,%esp
   1f86a:	50                   	push   %eax
   1f86b:	e8 6a 13 00 00       	call   20bda <__st>
   1f870:	83 c4 10             	add    $0x10,%esp
   1f873:	83 ec 08             	sub    $0x8,%esp
   1f876:	53                   	push   %ebx
   1f877:	50                   	push   %eax
   1f878:	e8 46 28 00 00       	call   220c3 <fcom>
   1f87d:	83 c4 10             	add    $0x10,%esp
			fpop();
   1f880:	e8 21 12 00 00       	call   20aa6 <fpop>
			return;			
   1f885:	e9 87 11 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x9c:                      // FSUBR ST(i), ST。
			ST(code & 7).exponent ^= 0x8000;
   1f88a:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f88f:	83 e0 07             	and    $0x7,%eax
   1f892:	83 ec 0c             	sub    $0xc,%esp
   1f895:	50                   	push   %eax
   1f896:	e8 3f 13 00 00       	call   20bda <__st>
   1f89b:	83 c4 10             	add    $0x10,%esp
   1f89e:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   1f8a2:	66 81 f2 00 80       	xor    $0x8000,%dx
   1f8a7:	66 89 50 08          	mov    %dx,0x8(%eax)
			fadd(PST(0),PST(code & 7),&tmp);
   1f8ab:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f8b0:	83 e0 07             	and    $0x7,%eax
   1f8b3:	83 ec 0c             	sub    $0xc,%esp
   1f8b6:	50                   	push   %eax
   1f8b7:	e8 1e 13 00 00       	call   20bda <__st>
   1f8bc:	83 c4 10             	add    $0x10,%esp
   1f8bf:	89 c3                	mov    %eax,%ebx
   1f8c1:	83 ec 0c             	sub    $0xc,%esp
   1f8c4:	6a 00                	push   $0x0
   1f8c6:	e8 0f 13 00 00       	call   20bda <__st>
   1f8cb:	83 c4 10             	add    $0x10,%esp
   1f8ce:	89 c2                	mov    %eax,%edx
   1f8d0:	83 ec 04             	sub    $0x4,%esp
   1f8d3:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f8d7:	50                   	push   %eax
   1f8d8:	53                   	push   %ebx
   1f8d9:	52                   	push   %edx
   1f8da:	e8 03 20 00 00       	call   218e2 <fadd>
   1f8df:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1f8e2:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f8e7:	83 e0 07             	and    $0x7,%eax
   1f8ea:	83 ec 0c             	sub    $0xc,%esp
   1f8ed:	50                   	push   %eax
   1f8ee:	e8 e7 12 00 00       	call   20bda <__st>
   1f8f3:	83 c4 10             	add    $0x10,%esp
   1f8f6:	89 c1                	mov    %eax,%ecx
   1f8f8:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1f8fc:	8b 50 04             	mov    0x4(%eax),%edx
   1f8ff:	8b 00                	mov    (%eax),%eax
   1f901:	89 01                	mov    %eax,(%ecx)
   1f903:	89 51 04             	mov    %edx,0x4(%ecx)
   1f906:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f90b:	83 e0 07             	and    $0x7,%eax
   1f90e:	83 ec 0c             	sub    $0xc,%esp
   1f911:	50                   	push   %eax
   1f912:	e8 c3 12 00 00       	call   20bda <__st>
   1f917:	83 c4 10             	add    $0x10,%esp
   1f91a:	89 c2                	mov    %eax,%edx
   1f91c:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f921:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f925:	e9 e7 10 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x9d:                      // FSUB ST(i), ST。
			real_to_real(&ST(0),&tmp);
   1f92a:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f92e:	83 ec 0c             	sub    $0xc,%esp
   1f931:	6a 00                	push   $0x0
   1f933:	e8 a2 12 00 00       	call   20bda <__st>
   1f938:	83 c4 10             	add    $0x10,%esp
   1f93b:	8b 50 04             	mov    0x4(%eax),%edx
   1f93e:	8b 00                	mov    (%eax),%eax
   1f940:	89 03                	mov    %eax,(%ebx)
   1f942:	89 53 04             	mov    %edx,0x4(%ebx)
   1f945:	83 ec 0c             	sub    $0xc,%esp
   1f948:	6a 00                	push   $0x0
   1f94a:	e8 8b 12 00 00       	call   20bda <__st>
   1f94f:	83 c4 10             	add    $0x10,%esp
   1f952:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   1f956:	66 89 44 24 14       	mov    %ax,0x14(%esp)
			tmp.exponent ^= 0x8000;
   1f95b:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f960:	66 35 00 80          	xor    $0x8000,%ax
   1f964:	66 89 44 24 14       	mov    %ax,0x14(%esp)
			fadd(PST(code & 7),&tmp,&tmp);
   1f969:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f96e:	83 e0 07             	and    $0x7,%eax
   1f971:	83 ec 0c             	sub    $0xc,%esp
   1f974:	50                   	push   %eax
   1f975:	e8 60 12 00 00       	call   20bda <__st>
   1f97a:	83 c4 10             	add    $0x10,%esp
   1f97d:	89 c2                	mov    %eax,%edx
   1f97f:	83 ec 04             	sub    $0x4,%esp
   1f982:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f986:	50                   	push   %eax
   1f987:	8d 44 24 14          	lea    0x14(%esp),%eax
   1f98b:	50                   	push   %eax
   1f98c:	52                   	push   %edx
   1f98d:	e8 50 1f 00 00       	call   218e2 <fadd>
   1f992:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1f995:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f99a:	83 e0 07             	and    $0x7,%eax
   1f99d:	83 ec 0c             	sub    $0xc,%esp
   1f9a0:	50                   	push   %eax
   1f9a1:	e8 34 12 00 00       	call   20bda <__st>
   1f9a6:	83 c4 10             	add    $0x10,%esp
   1f9a9:	89 c1                	mov    %eax,%ecx
   1f9ab:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1f9af:	8b 50 04             	mov    0x4(%eax),%edx
   1f9b2:	8b 00                	mov    (%eax),%eax
   1f9b4:	89 01                	mov    %eax,(%ecx)
   1f9b6:	89 51 04             	mov    %edx,0x4(%ecx)
   1f9b9:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f9be:	83 e0 07             	and    $0x7,%eax
   1f9c1:	83 ec 0c             	sub    $0xc,%esp
   1f9c4:	50                   	push   %eax
   1f9c5:	e8 10 12 00 00       	call   20bda <__st>
   1f9ca:	83 c4 10             	add    $0x10,%esp
   1f9cd:	89 c2                	mov    %eax,%edx
   1f9cf:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f9d4:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f9d8:	e9 34 10 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x9e:                      // FDIVR ST(i), ST。
			fdiv(PST(0),PST(code & 7),&tmp);
   1f9dd:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f9e2:	83 e0 07             	and    $0x7,%eax
   1f9e5:	83 ec 0c             	sub    $0xc,%esp
   1f9e8:	50                   	push   %eax
   1f9e9:	e8 ec 11 00 00       	call   20bda <__st>
   1f9ee:	83 c4 10             	add    $0x10,%esp
   1f9f1:	89 c3                	mov    %eax,%ebx
   1f9f3:	83 ec 0c             	sub    $0xc,%esp
   1f9f6:	6a 00                	push   $0x0
   1f9f8:	e8 dd 11 00 00       	call   20bda <__st>
   1f9fd:	83 c4 10             	add    $0x10,%esp
   1fa00:	89 c2                	mov    %eax,%edx
   1fa02:	83 ec 04             	sub    $0x4,%esp
   1fa05:	8d 44 24 10          	lea    0x10(%esp),%eax
   1fa09:	50                   	push   %eax
   1fa0a:	53                   	push   %ebx
   1fa0b:	52                   	push   %edx
   1fa0c:	e8 29 23 00 00       	call   21d3a <fdiv>
   1fa11:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1fa14:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fa19:	83 e0 07             	and    $0x7,%eax
   1fa1c:	83 ec 0c             	sub    $0xc,%esp
   1fa1f:	50                   	push   %eax
   1fa20:	e8 b5 11 00 00       	call   20bda <__st>
   1fa25:	83 c4 10             	add    $0x10,%esp
   1fa28:	89 c1                	mov    %eax,%ecx
   1fa2a:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1fa2e:	8b 50 04             	mov    0x4(%eax),%edx
   1fa31:	8b 00                	mov    (%eax),%eax
   1fa33:	89 01                	mov    %eax,(%ecx)
   1fa35:	89 51 04             	mov    %edx,0x4(%ecx)
   1fa38:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fa3d:	83 e0 07             	and    $0x7,%eax
   1fa40:	83 ec 0c             	sub    $0xc,%esp
   1fa43:	50                   	push   %eax
   1fa44:	e8 91 11 00 00       	call   20bda <__st>
   1fa49:	83 c4 10             	add    $0x10,%esp
   1fa4c:	89 c2                	mov    %eax,%edx
   1fa4e:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1fa53:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1fa57:	e9 b5 0f 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x9f:                      // FDIV ST(i), ST。
			fdiv(PST(code & 7),PST(0),&tmp);
   1fa5c:	83 ec 0c             	sub    $0xc,%esp
   1fa5f:	6a 00                	push   $0x0
   1fa61:	e8 74 11 00 00       	call   20bda <__st>
   1fa66:	83 c4 10             	add    $0x10,%esp
   1fa69:	89 c3                	mov    %eax,%ebx
   1fa6b:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fa70:	83 e0 07             	and    $0x7,%eax
   1fa73:	83 ec 0c             	sub    $0xc,%esp
   1fa76:	50                   	push   %eax
   1fa77:	e8 5e 11 00 00       	call   20bda <__st>
   1fa7c:	83 c4 10             	add    $0x10,%esp
   1fa7f:	89 c2                	mov    %eax,%edx
   1fa81:	83 ec 04             	sub    $0x4,%esp
   1fa84:	8d 44 24 10          	lea    0x10(%esp),%eax
   1fa88:	50                   	push   %eax
   1fa89:	53                   	push   %ebx
   1fa8a:	52                   	push   %edx
   1fa8b:	e8 aa 22 00 00       	call   21d3a <fdiv>
   1fa90:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1fa93:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fa98:	83 e0 07             	and    $0x7,%eax
   1fa9b:	83 ec 0c             	sub    $0xc,%esp
   1fa9e:	50                   	push   %eax
   1fa9f:	e8 36 11 00 00       	call   20bda <__st>
   1faa4:	83 c4 10             	add    $0x10,%esp
   1faa7:	89 c1                	mov    %eax,%ecx
   1faa9:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1faad:	8b 50 04             	mov    0x4(%eax),%edx
   1fab0:	8b 00                	mov    (%eax),%eax
   1fab2:	89 01                	mov    %eax,(%ecx)
   1fab4:	89 51 04             	mov    %edx,0x4(%ecx)
   1fab7:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fabc:	83 e0 07             	and    $0x7,%eax
   1fabf:	83 ec 0c             	sub    $0xc,%esp
   1fac2:	50                   	push   %eax
   1fac3:	e8 12 11 00 00       	call   20bda <__st>
   1fac8:	83 c4 10             	add    $0x10,%esp
   1facb:	89 c2                	mov    %eax,%edx
   1facd:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1fad2:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1fad6:	e9 36 0f 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0xb8:                      // FFREE ST(i), ST。未实现。
			printk("ffree not implemented\n\r");
   1fadb:	83 ec 0c             	sub    $0xc,%esp
   1fade:	68 67 52 02 00       	push   $0x25267
   1fae3:	e8 5f 91 fe ff       	call   8c47 <printk>
   1fae8:	83 c4 10             	add    $0x10,%esp
			math_abort(info,1<<(SIGILL-1));
   1faeb:	83 ec 08             	sub    $0x8,%esp
   1faee:	6a 08                	push   $0x8
   1faf0:	ff 74 24 3c          	pushl  0x3c(%esp)
   1faf4:	e8 81 0f 00 00       	call   20a7a <__math_abort>
   1faf9:	83 c4 10             	add    $0x10,%esp
		case 0xb9:                      // FXCH ST(i)。
			fxchg(&ST(0),&ST(code & 7));
   1fafc:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fb01:	83 e0 07             	and    $0x7,%eax
   1fb04:	83 ec 0c             	sub    $0xc,%esp
   1fb07:	50                   	push   %eax
   1fb08:	e8 cd 10 00 00       	call   20bda <__st>
   1fb0d:	83 c4 10             	add    $0x10,%esp
   1fb10:	89 c3                	mov    %eax,%ebx
   1fb12:	83 ec 0c             	sub    $0xc,%esp
   1fb15:	6a 00                	push   $0x0
   1fb17:	e8 be 10 00 00       	call   20bda <__st>
   1fb1c:	83 c4 10             	add    $0x10,%esp
   1fb1f:	83 ec 08             	sub    $0x8,%esp
   1fb22:	53                   	push   %ebx
   1fb23:	50                   	push   %eax
   1fb24:	e8 5b 10 00 00       	call   20b84 <fxchg>
   1fb29:	83 c4 10             	add    $0x10,%esp
			return;
   1fb2c:	e9 e0 0e 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0xba:                      // FST ST(i)。
			ST(code & 7) = ST(0);
   1fb31:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fb36:	83 e0 07             	and    $0x7,%eax
   1fb39:	83 ec 0c             	sub    $0xc,%esp
   1fb3c:	50                   	push   %eax
   1fb3d:	e8 98 10 00 00       	call   20bda <__st>
   1fb42:	83 c4 10             	add    $0x10,%esp
   1fb45:	89 c3                	mov    %eax,%ebx
   1fb47:	83 ec 0c             	sub    $0xc,%esp
   1fb4a:	6a 00                	push   $0x0
   1fb4c:	e8 89 10 00 00       	call   20bda <__st>
   1fb51:	83 c4 10             	add    $0x10,%esp
   1fb54:	8b 10                	mov    (%eax),%edx
   1fb56:	89 13                	mov    %edx,(%ebx)
   1fb58:	8b 50 04             	mov    0x4(%eax),%edx
   1fb5b:	89 53 04             	mov    %edx,0x4(%ebx)
   1fb5e:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   1fb62:	66 89 43 08          	mov    %ax,0x8(%ebx)
			return;
   1fb66:	e9 a6 0e 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0xbb:                      // FSTP ST(i)。
			ST(code & 7) = ST(0);
   1fb6b:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fb70:	83 e0 07             	and    $0x7,%eax
   1fb73:	83 ec 0c             	sub    $0xc,%esp
   1fb76:	50                   	push   %eax
   1fb77:	e8 5e 10 00 00       	call   20bda <__st>
   1fb7c:	83 c4 10             	add    $0x10,%esp
   1fb7f:	89 c3                	mov    %eax,%ebx
   1fb81:	83 ec 0c             	sub    $0xc,%esp
   1fb84:	6a 00                	push   $0x0
   1fb86:	e8 4f 10 00 00       	call   20bda <__st>
   1fb8b:	83 c4 10             	add    $0x10,%esp
   1fb8e:	8b 10                	mov    (%eax),%edx
   1fb90:	89 13                	mov    %edx,(%ebx)
   1fb92:	8b 50 04             	mov    0x4(%eax),%edx
   1fb95:	89 53 04             	mov    %edx,0x4(%ebx)
   1fb98:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   1fb9c:	66 89 43 08          	mov    %ax,0x8(%ebx)
			fpop();
   1fba0:	e8 01 0f 00 00       	call   20aa6 <fpop>
			return;
   1fba5:	e9 67 0e 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0xbc:                      // FUCOM ST(i)。
			fucom(PST(code & 7),PST(0));
   1fbaa:	83 ec 0c             	sub    $0xc,%esp
   1fbad:	6a 00                	push   $0x0
   1fbaf:	e8 26 10 00 00       	call   20bda <__st>
   1fbb4:	83 c4 10             	add    $0x10,%esp
   1fbb7:	89 c3                	mov    %eax,%ebx
   1fbb9:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fbbe:	83 e0 07             	and    $0x7,%eax
   1fbc1:	83 ec 0c             	sub    $0xc,%esp
   1fbc4:	50                   	push   %eax
   1fbc5:	e8 10 10 00 00       	call   20bda <__st>
   1fbca:	83 c4 10             	add    $0x10,%esp
   1fbcd:	83 ec 08             	sub    $0x8,%esp
   1fbd0:	53                   	push   %ebx
   1fbd1:	50                   	push   %eax
   1fbd2:	e8 43 25 00 00       	call   2211a <fucom>
   1fbd7:	83 c4 10             	add    $0x10,%esp
			return;
   1fbda:	e9 32 0e 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0xbd:                      // FUCOMP ST(i)。
			fucom(PST(code & 7),PST(0));
   1fbdf:	83 ec 0c             	sub    $0xc,%esp
   1fbe2:	6a 00                	push   $0x0
   1fbe4:	e8 f1 0f 00 00       	call   20bda <__st>
   1fbe9:	83 c4 10             	add    $0x10,%esp
   1fbec:	89 c3                	mov    %eax,%ebx
   1fbee:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fbf3:	83 e0 07             	and    $0x7,%eax
   1fbf6:	83 ec 0c             	sub    $0xc,%esp
   1fbf9:	50                   	push   %eax
   1fbfa:	e8 db 0f 00 00       	call   20bda <__st>
   1fbff:	83 c4 10             	add    $0x10,%esp
   1fc02:	83 ec 08             	sub    $0x8,%esp
   1fc05:	53                   	push   %ebx
   1fc06:	50                   	push   %eax
   1fc07:	e8 0e 25 00 00       	call   2211a <fucom>
   1fc0c:	83 c4 10             	add    $0x10,%esp
			fpop();
   1fc0f:	e8 92 0e 00 00       	call   20aa6 <fpop>
			return;
   1fc14:	e9 f8 0d 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0xd8:                      // FADDP ST(i), ST。
			fadd(PST(code & 7),PST(0),&tmp);
   1fc19:	83 ec 0c             	sub    $0xc,%esp
   1fc1c:	6a 00                	push   $0x0
   1fc1e:	e8 b7 0f 00 00       	call   20bda <__st>
   1fc23:	83 c4 10             	add    $0x10,%esp
   1fc26:	89 c3                	mov    %eax,%ebx
   1fc28:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fc2d:	83 e0 07             	and    $0x7,%eax
   1fc30:	83 ec 0c             	sub    $0xc,%esp
   1fc33:	50                   	push   %eax
   1fc34:	e8 a1 0f 00 00       	call   20bda <__st>
   1fc39:	83 c4 10             	add    $0x10,%esp
   1fc3c:	89 c2                	mov    %eax,%edx
   1fc3e:	83 ec 04             	sub    $0x4,%esp
   1fc41:	8d 44 24 10          	lea    0x10(%esp),%eax
   1fc45:	50                   	push   %eax
   1fc46:	53                   	push   %ebx
   1fc47:	52                   	push   %edx
   1fc48:	e8 95 1c 00 00       	call   218e2 <fadd>
   1fc4d:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1fc50:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fc55:	83 e0 07             	and    $0x7,%eax
   1fc58:	83 ec 0c             	sub    $0xc,%esp
   1fc5b:	50                   	push   %eax
   1fc5c:	e8 79 0f 00 00       	call   20bda <__st>
   1fc61:	83 c4 10             	add    $0x10,%esp
   1fc64:	89 c1                	mov    %eax,%ecx
   1fc66:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1fc6a:	8b 50 04             	mov    0x4(%eax),%edx
   1fc6d:	8b 00                	mov    (%eax),%eax
   1fc6f:	89 01                	mov    %eax,(%ecx)
   1fc71:	89 51 04             	mov    %edx,0x4(%ecx)
   1fc74:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fc79:	83 e0 07             	and    $0x7,%eax
   1fc7c:	83 ec 0c             	sub    $0xc,%esp
   1fc7f:	50                   	push   %eax
   1fc80:	e8 55 0f 00 00       	call   20bda <__st>
   1fc85:	83 c4 10             	add    $0x10,%esp
   1fc88:	89 c2                	mov    %eax,%edx
   1fc8a:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1fc8f:	66 89 42 08          	mov    %ax,0x8(%edx)
			fpop();
   1fc93:	e8 0e 0e 00 00       	call   20aa6 <fpop>
			return;
   1fc98:	e9 74 0d 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0xd9:                      // FMULP ST(i), ST。
			fmul(PST(code & 7),PST(0),&tmp);
   1fc9d:	83 ec 0c             	sub    $0xc,%esp
   1fca0:	6a 00                	push   $0x0
   1fca2:	e8 33 0f 00 00       	call   20bda <__st>
   1fca7:	83 c4 10             	add    $0x10,%esp
   1fcaa:	89 c3                	mov    %eax,%ebx
   1fcac:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fcb1:	83 e0 07             	and    $0x7,%eax
   1fcb4:	83 ec 0c             	sub    $0xc,%esp
   1fcb7:	50                   	push   %eax
   1fcb8:	e8 1d 0f 00 00       	call   20bda <__st>
   1fcbd:	83 c4 10             	add    $0x10,%esp
   1fcc0:	89 c2                	mov    %eax,%edx
   1fcc2:	83 ec 04             	sub    $0x4,%esp
   1fcc5:	8d 44 24 10          	lea    0x10(%esp),%eax
   1fcc9:	50                   	push   %eax
   1fcca:	53                   	push   %ebx
   1fccb:	52                   	push   %edx
   1fccc:	e8 db 1d 00 00       	call   21aac <fmul>
   1fcd1:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1fcd4:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fcd9:	83 e0 07             	and    $0x7,%eax
   1fcdc:	83 ec 0c             	sub    $0xc,%esp
   1fcdf:	50                   	push   %eax
   1fce0:	e8 f5 0e 00 00       	call   20bda <__st>
   1fce5:	83 c4 10             	add    $0x10,%esp
   1fce8:	89 c1                	mov    %eax,%ecx
   1fcea:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1fcee:	8b 50 04             	mov    0x4(%eax),%edx
   1fcf1:	8b 00                	mov    (%eax),%eax
   1fcf3:	89 01                	mov    %eax,(%ecx)
   1fcf5:	89 51 04             	mov    %edx,0x4(%ecx)
   1fcf8:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fcfd:	83 e0 07             	and    $0x7,%eax
   1fd00:	83 ec 0c             	sub    $0xc,%esp
   1fd03:	50                   	push   %eax
   1fd04:	e8 d1 0e 00 00       	call   20bda <__st>
   1fd09:	83 c4 10             	add    $0x10,%esp
   1fd0c:	89 c2                	mov    %eax,%edx
   1fd0e:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1fd13:	66 89 42 08          	mov    %ax,0x8(%edx)
			fpop();
   1fd17:	e8 8a 0d 00 00       	call   20aa6 <fpop>
			return;
   1fd1c:	e9 f0 0c 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0xda:                      // FCOMP ST(i)。
			fcom(PST(code & 7),PST(0));
   1fd21:	83 ec 0c             	sub    $0xc,%esp
   1fd24:	6a 00                	push   $0x0
   1fd26:	e8 af 0e 00 00       	call   20bda <__st>
   1fd2b:	83 c4 10             	add    $0x10,%esp
   1fd2e:	89 c3                	mov    %eax,%ebx
   1fd30:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fd35:	83 e0 07             	and    $0x7,%eax
   1fd38:	83 ec 0c             	sub    $0xc,%esp
   1fd3b:	50                   	push   %eax
   1fd3c:	e8 99 0e 00 00       	call   20bda <__st>
   1fd41:	83 c4 10             	add    $0x10,%esp
   1fd44:	83 ec 08             	sub    $0x8,%esp
   1fd47:	53                   	push   %ebx
   1fd48:	50                   	push   %eax
   1fd49:	e8 75 23 00 00       	call   220c3 <fcom>
   1fd4e:	83 c4 10             	add    $0x10,%esp
			fpop();
   1fd51:	e8 50 0d 00 00       	call   20aa6 <fpop>
			return;
   1fd56:	e9 b6 0c 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0xdc:                      // FSUBRP ST(i)。
			ST(code & 7).exponent ^= 0x8000;
   1fd5b:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fd60:	83 e0 07             	and    $0x7,%eax
   1fd63:	83 ec 0c             	sub    $0xc,%esp
   1fd66:	50                   	push   %eax
   1fd67:	e8 6e 0e 00 00       	call   20bda <__st>
   1fd6c:	83 c4 10             	add    $0x10,%esp
   1fd6f:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   1fd73:	66 81 f2 00 80       	xor    $0x8000,%dx
   1fd78:	66 89 50 08          	mov    %dx,0x8(%eax)
			fadd(PST(0),PST(code & 7),&tmp);
   1fd7c:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fd81:	83 e0 07             	and    $0x7,%eax
   1fd84:	83 ec 0c             	sub    $0xc,%esp
   1fd87:	50                   	push   %eax
   1fd88:	e8 4d 0e 00 00       	call   20bda <__st>
   1fd8d:	83 c4 10             	add    $0x10,%esp
   1fd90:	89 c3                	mov    %eax,%ebx
   1fd92:	83 ec 0c             	sub    $0xc,%esp
   1fd95:	6a 00                	push   $0x0
   1fd97:	e8 3e 0e 00 00       	call   20bda <__st>
   1fd9c:	83 c4 10             	add    $0x10,%esp
   1fd9f:	89 c2                	mov    %eax,%edx
   1fda1:	83 ec 04             	sub    $0x4,%esp
   1fda4:	8d 44 24 10          	lea    0x10(%esp),%eax
   1fda8:	50                   	push   %eax
   1fda9:	53                   	push   %ebx
   1fdaa:	52                   	push   %edx
   1fdab:	e8 32 1b 00 00       	call   218e2 <fadd>
   1fdb0:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1fdb3:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fdb8:	83 e0 07             	and    $0x7,%eax
   1fdbb:	83 ec 0c             	sub    $0xc,%esp
   1fdbe:	50                   	push   %eax
   1fdbf:	e8 16 0e 00 00       	call   20bda <__st>
   1fdc4:	83 c4 10             	add    $0x10,%esp
   1fdc7:	89 c1                	mov    %eax,%ecx
   1fdc9:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1fdcd:	8b 50 04             	mov    0x4(%eax),%edx
   1fdd0:	8b 00                	mov    (%eax),%eax
   1fdd2:	89 01                	mov    %eax,(%ecx)
   1fdd4:	89 51 04             	mov    %edx,0x4(%ecx)
   1fdd7:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fddc:	83 e0 07             	and    $0x7,%eax
   1fddf:	83 ec 0c             	sub    $0xc,%esp
   1fde2:	50                   	push   %eax
   1fde3:	e8 f2 0d 00 00       	call   20bda <__st>
   1fde8:	83 c4 10             	add    $0x10,%esp
   1fdeb:	89 c2                	mov    %eax,%edx
   1fded:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1fdf2:	66 89 42 08          	mov    %ax,0x8(%edx)
			fpop();
   1fdf6:	e8 ab 0c 00 00       	call   20aa6 <fpop>
			return;
   1fdfb:	e9 11 0c 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0xdd:                      // FSUBP ST(I), ST。
			real_to_real(&ST(0),&tmp);
   1fe00:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1fe04:	83 ec 0c             	sub    $0xc,%esp
   1fe07:	6a 00                	push   $0x0
   1fe09:	e8 cc 0d 00 00       	call   20bda <__st>
   1fe0e:	83 c4 10             	add    $0x10,%esp
   1fe11:	8b 50 04             	mov    0x4(%eax),%edx
   1fe14:	8b 00                	mov    (%eax),%eax
   1fe16:	89 03                	mov    %eax,(%ebx)
   1fe18:	89 53 04             	mov    %edx,0x4(%ebx)
   1fe1b:	83 ec 0c             	sub    $0xc,%esp
   1fe1e:	6a 00                	push   $0x0
   1fe20:	e8 b5 0d 00 00       	call   20bda <__st>
   1fe25:	83 c4 10             	add    $0x10,%esp
   1fe28:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   1fe2c:	66 89 44 24 14       	mov    %ax,0x14(%esp)
			tmp.exponent ^= 0x8000;
   1fe31:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1fe36:	66 35 00 80          	xor    $0x8000,%ax
   1fe3a:	66 89 44 24 14       	mov    %ax,0x14(%esp)
			fadd(PST(code & 7),&tmp,&tmp);
   1fe3f:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fe44:	83 e0 07             	and    $0x7,%eax
   1fe47:	83 ec 0c             	sub    $0xc,%esp
   1fe4a:	50                   	push   %eax
   1fe4b:	e8 8a 0d 00 00       	call   20bda <__st>
   1fe50:	83 c4 10             	add    $0x10,%esp
   1fe53:	89 c2                	mov    %eax,%edx
   1fe55:	83 ec 04             	sub    $0x4,%esp
   1fe58:	8d 44 24 10          	lea    0x10(%esp),%eax
   1fe5c:	50                   	push   %eax
   1fe5d:	8d 44 24 14          	lea    0x14(%esp),%eax
   1fe61:	50                   	push   %eax
   1fe62:	52                   	push   %edx
   1fe63:	e8 7a 1a 00 00       	call   218e2 <fadd>
   1fe68:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1fe6b:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fe70:	83 e0 07             	and    $0x7,%eax
   1fe73:	83 ec 0c             	sub    $0xc,%esp
   1fe76:	50                   	push   %eax
   1fe77:	e8 5e 0d 00 00       	call   20bda <__st>
   1fe7c:	83 c4 10             	add    $0x10,%esp
   1fe7f:	89 c1                	mov    %eax,%ecx
   1fe81:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1fe85:	8b 50 04             	mov    0x4(%eax),%edx
   1fe88:	8b 00                	mov    (%eax),%eax
   1fe8a:	89 01                	mov    %eax,(%ecx)
   1fe8c:	89 51 04             	mov    %edx,0x4(%ecx)
   1fe8f:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fe94:	83 e0 07             	and    $0x7,%eax
   1fe97:	83 ec 0c             	sub    $0xc,%esp
   1fe9a:	50                   	push   %eax
   1fe9b:	e8 3a 0d 00 00       	call   20bda <__st>
   1fea0:	83 c4 10             	add    $0x10,%esp
   1fea3:	89 c2                	mov    %eax,%edx
   1fea5:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1feaa:	66 89 42 08          	mov    %ax,0x8(%edx)
			fpop();
   1feae:	e8 f3 0b 00 00       	call   20aa6 <fpop>
			return;
   1feb3:	e9 59 0b 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0xde:                      // FDIVRP ST(i), ST。
			fdiv(PST(0),PST(code & 7),&tmp);
   1feb8:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1febd:	83 e0 07             	and    $0x7,%eax
   1fec0:	83 ec 0c             	sub    $0xc,%esp
   1fec3:	50                   	push   %eax
   1fec4:	e8 11 0d 00 00       	call   20bda <__st>
   1fec9:	83 c4 10             	add    $0x10,%esp
   1fecc:	89 c3                	mov    %eax,%ebx
   1fece:	83 ec 0c             	sub    $0xc,%esp
   1fed1:	6a 00                	push   $0x0
   1fed3:	e8 02 0d 00 00       	call   20bda <__st>
   1fed8:	83 c4 10             	add    $0x10,%esp
   1fedb:	89 c2                	mov    %eax,%edx
   1fedd:	83 ec 04             	sub    $0x4,%esp
   1fee0:	8d 44 24 10          	lea    0x10(%esp),%eax
   1fee4:	50                   	push   %eax
   1fee5:	53                   	push   %ebx
   1fee6:	52                   	push   %edx
   1fee7:	e8 4e 1e 00 00       	call   21d3a <fdiv>
   1feec:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1feef:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fef4:	83 e0 07             	and    $0x7,%eax
   1fef7:	83 ec 0c             	sub    $0xc,%esp
   1fefa:	50                   	push   %eax
   1fefb:	e8 da 0c 00 00       	call   20bda <__st>
   1ff00:	83 c4 10             	add    $0x10,%esp
   1ff03:	89 c1                	mov    %eax,%ecx
   1ff05:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1ff09:	8b 50 04             	mov    0x4(%eax),%edx
   1ff0c:	8b 00                	mov    (%eax),%eax
   1ff0e:	89 01                	mov    %eax,(%ecx)
   1ff10:	89 51 04             	mov    %edx,0x4(%ecx)
   1ff13:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1ff18:	83 e0 07             	and    $0x7,%eax
   1ff1b:	83 ec 0c             	sub    $0xc,%esp
   1ff1e:	50                   	push   %eax
   1ff1f:	e8 b6 0c 00 00       	call   20bda <__st>
   1ff24:	83 c4 10             	add    $0x10,%esp
   1ff27:	89 c2                	mov    %eax,%edx
   1ff29:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1ff2e:	66 89 42 08          	mov    %ax,0x8(%edx)
			fpop();
   1ff32:	e8 6f 0b 00 00       	call   20aa6 <fpop>
			return;
   1ff37:	e9 d5 0a 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0xdf:                      // FDIVP ST(i), ST。
			fdiv(PST(code & 7),PST(0),&tmp);
   1ff3c:	83 ec 0c             	sub    $0xc,%esp
   1ff3f:	6a 00                	push   $0x0
   1ff41:	e8 94 0c 00 00       	call   20bda <__st>
   1ff46:	83 c4 10             	add    $0x10,%esp
   1ff49:	89 c3                	mov    %eax,%ebx
   1ff4b:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1ff50:	83 e0 07             	and    $0x7,%eax
   1ff53:	83 ec 0c             	sub    $0xc,%esp
   1ff56:	50                   	push   %eax
   1ff57:	e8 7e 0c 00 00       	call   20bda <__st>
   1ff5c:	83 c4 10             	add    $0x10,%esp
   1ff5f:	89 c2                	mov    %eax,%edx
   1ff61:	83 ec 04             	sub    $0x4,%esp
   1ff64:	8d 44 24 10          	lea    0x10(%esp),%eax
   1ff68:	50                   	push   %eax
   1ff69:	53                   	push   %ebx
   1ff6a:	52                   	push   %edx
   1ff6b:	e8 ca 1d 00 00       	call   21d3a <fdiv>
   1ff70:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1ff73:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1ff78:	83 e0 07             	and    $0x7,%eax
   1ff7b:	83 ec 0c             	sub    $0xc,%esp
   1ff7e:	50                   	push   %eax
   1ff7f:	e8 56 0c 00 00       	call   20bda <__st>
   1ff84:	83 c4 10             	add    $0x10,%esp
   1ff87:	89 c1                	mov    %eax,%ecx
   1ff89:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1ff8d:	8b 50 04             	mov    0x4(%eax),%edx
   1ff90:	8b 00                	mov    (%eax),%eax
   1ff92:	89 01                	mov    %eax,(%ecx)
   1ff94:	89 51 04             	mov    %edx,0x4(%ecx)
   1ff97:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1ff9c:	83 e0 07             	and    $0x7,%eax
   1ff9f:	83 ec 0c             	sub    $0xc,%esp
   1ffa2:	50                   	push   %eax
   1ffa3:	e8 32 0c 00 00       	call   20bda <__st>
   1ffa8:	83 c4 10             	add    $0x10,%esp
   1ffab:	89 c2                	mov    %eax,%edx
   1ffad:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1ffb2:	66 89 42 08          	mov    %ax,0x8(%edx)
			fpop();
   1ffb6:	e8 eb 0a 00 00       	call   20aa6 <fpop>
			return;
   1ffbb:	e9 51 0a 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0xf8:                      // FFREE ST(i)。未实现。
			printk("ffree not implemented\n\r");
   1ffc0:	83 ec 0c             	sub    $0xc,%esp
   1ffc3:	68 67 52 02 00       	push   $0x25267
   1ffc8:	e8 7a 8c fe ff       	call   8c47 <printk>
   1ffcd:	83 c4 10             	add    $0x10,%esp
			math_abort(info,1<<(SIGILL-1));
   1ffd0:	83 ec 08             	sub    $0x8,%esp
   1ffd3:	6a 08                	push   $0x8
   1ffd5:	ff 74 24 3c          	pushl  0x3c(%esp)
   1ffd9:	e8 9c 0a 00 00       	call   20a7a <__math_abort>
   1ffde:	83 c4 10             	add    $0x10,%esp
			fpop();
   1ffe1:	e8 c0 0a 00 00       	call   20aa6 <fpop>
			return;
   1ffe6:	e9 26 0a 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0xf9:                      // FXCH ST(i)。
			fxchg(&ST(0),&ST(code & 7));
   1ffeb:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fff0:	83 e0 07             	and    $0x7,%eax
   1fff3:	83 ec 0c             	sub    $0xc,%esp
   1fff6:	50                   	push   %eax
   1fff7:	e8 de 0b 00 00       	call   20bda <__st>
   1fffc:	83 c4 10             	add    $0x10,%esp
   1ffff:	89 c3                	mov    %eax,%ebx
   20001:	83 ec 0c             	sub    $0xc,%esp
   20004:	6a 00                	push   $0x0
   20006:	e8 cf 0b 00 00       	call   20bda <__st>
   2000b:	83 c4 10             	add    $0x10,%esp
   2000e:	83 ec 08             	sub    $0x8,%esp
   20011:	53                   	push   %ebx
   20012:	50                   	push   %eax
   20013:	e8 6c 0b 00 00       	call   20b84 <fxchg>
   20018:	83 c4 10             	add    $0x10,%esp
			return;
   2001b:	e9 f1 09 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0xfa:                      // FSTP ST(i)。
		case 0xfb:                      // FSTP ST(i)。
			ST(code & 7) = ST(0);
   20020:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20025:	83 e0 07             	and    $0x7,%eax
   20028:	83 ec 0c             	sub    $0xc,%esp
   2002b:	50                   	push   %eax
   2002c:	e8 a9 0b 00 00       	call   20bda <__st>
   20031:	83 c4 10             	add    $0x10,%esp
   20034:	89 c3                	mov    %eax,%ebx
   20036:	83 ec 0c             	sub    $0xc,%esp
   20039:	6a 00                	push   $0x0
   2003b:	e8 9a 0b 00 00       	call   20bda <__st>
   20040:	83 c4 10             	add    $0x10,%esp
   20043:	8b 10                	mov    (%eax),%edx
   20045:	89 13                	mov    %edx,(%ebx)
   20047:	8b 50 04             	mov    0x4(%eax),%edx
   2004a:	89 53 04             	mov    %edx,0x4(%ebx)
   2004d:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   20051:	66 89 43 08          	mov    %ax,0x8(%ebx)
			fpop();
   20055:	e8 4c 0a 00 00       	call   20aa6 <fpop>
			return;
   2005a:	e9 b2 09 00 00       	jmp    20a11 <do_emu+0x1d5b>
	}
// 处理第2个字节位7--6是MOD、位2--0是R/M的指令，即11011,XXX，MOD，XXX，R/M形式的代码。MOD在各子程序中处理，因此这里首先
// 让代码与上0xe7（0b11100111）屏蔽掉MOD。
	switch ((code>>3) & 0xe7) {
   2005f:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20064:	66 c1 e8 03          	shr    $0x3,%ax
   20068:	0f b7 c0             	movzwl %ax,%eax
   2006b:	25 e7 00 00 00       	and    $0xe7,%eax
   20070:	83 e8 22             	sub    $0x22,%eax
   20073:	3d c5 00 00 00       	cmp    $0xc5,%eax
   20078:	0f 87 9c 05 00 00    	ja     2061a <do_emu+0x1964>
   2007e:	8b 04 85 64 56 02 00 	mov    0x25664(,%eax,4),%eax
   20085:	ff e0                	jmp    *%eax
		case 0x22:
//			put_short_real(PST(0),info,code);
                    panic("kernel/math/math_emulate.c->do_emu(),394");
   20087:	83 ec 0c             	sub    $0xc,%esp
   2008a:	68 80 52 02 00       	push   $0x25280
   2008f:	e8 74 8b fe ff       	call   8c08 <panic>
   20094:	83 c4 10             	add    $0x10,%esp
			return;
   20097:	e9 75 09 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x23:                      // FSTP - 保存单精度实数（短实数）。
			put_short_real(PST(0),info,code);
   2009c:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   200a1:	83 ec 0c             	sub    $0xc,%esp
   200a4:	6a 00                	push   $0x0
   200a6:	e8 2f 0b 00 00       	call   20bda <__st>
   200ab:	83 c4 10             	add    $0x10,%esp
   200ae:	83 ec 04             	sub    $0x4,%esp
   200b1:	53                   	push   %ebx
   200b2:	ff 74 24 38          	pushl  0x38(%esp)
   200b6:	50                   	push   %eax
   200b7:	e8 d8 12 00 00       	call   21394 <put_short_real>
   200bc:	83 c4 10             	add    $0x10,%esp
			fpop();
   200bf:	e8 e2 09 00 00       	call   20aa6 <fpop>
			return;
   200c4:	e9 48 09 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x24:                      // FLDENV - 加载协处理器状态和控制寄存器等。
			address = ea(info,code);
   200c9:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   200ce:	83 ec 08             	sub    $0x8,%esp
   200d1:	50                   	push   %eax
   200d2:	ff 74 24 3c          	pushl  0x3c(%esp)
   200d6:	e8 ae 0c 00 00       	call   20d89 <ea>
   200db:	83 c4 10             	add    $0x10,%esp
   200de:	89 44 24 18          	mov    %eax,0x18(%esp)
			for (code = 0 ; code < 7 ; code++) {
   200e2:	66 c7 44 24 1e 00 00 	movw   $0x0,0x1e(%esp)
   200e9:	eb 39                	jmp    20124 <do_emu+0x146e>
				((long *) & I387)[code] =
   200eb:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   200f0:	8d 90 18 04 00 00    	lea    0x418(%eax),%edx
   200f6:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   200fb:	c1 e0 02             	shl    $0x2,%eax
   200fe:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
				   get_fs_long((unsigned long *) address);
   20101:	83 ec 0c             	sub    $0xc,%esp
   20104:	ff 74 24 24          	pushl  0x24(%esp)
   20108:	e8 6a eb ff ff       	call   1ec77 <get_fs_long>
   2010d:	83 c4 10             	add    $0x10,%esp
			fpop();
			return;
		case 0x24:                      // FLDENV - 加载协处理器状态和控制寄存器等。
			address = ea(info,code);
			for (code = 0 ; code < 7 ; code++) {
				((long *) & I387)[code] =
   20110:	89 03                	mov    %eax,(%ebx)
				   get_fs_long((unsigned long *) address);
				address += 4;
   20112:	83 44 24 18 04       	addl   $0x4,0x18(%esp)
			put_short_real(PST(0),info,code);
			fpop();
			return;
		case 0x24:                      // FLDENV - 加载协处理器状态和控制寄存器等。
			address = ea(info,code);
			for (code = 0 ; code < 7 ; code++) {
   20117:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   2011c:	83 c0 01             	add    $0x1,%eax
   2011f:	66 89 44 24 1e       	mov    %ax,0x1e(%esp)
   20124:	66 83 7c 24 1e 06    	cmpw   $0x6,0x1e(%esp)
   2012a:	76 bf                	jbe    200eb <do_emu+0x1435>
				((long *) & I387)[code] =
				   get_fs_long((unsigned long *) address);
				address += 4;
			}
			return;
   2012c:	e9 e0 08 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x25:                      // FLDCW - 加载控制字。
			address = ea(info,code);
   20131:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20136:	83 ec 08             	sub    $0x8,%esp
   20139:	50                   	push   %eax
   2013a:	ff 74 24 3c          	pushl  0x3c(%esp)
   2013e:	e8 46 0c 00 00       	call   20d89 <ea>
   20143:	83 c4 10             	add    $0x10,%esp
   20146:	89 44 24 18          	mov    %eax,0x18(%esp)
			*(unsigned short *) &I387.cwd =
   2014a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   2014f:	8d 98 18 04 00 00    	lea    0x418(%eax),%ebx
				get_fs_word((unsigned short *) address);
   20155:	83 ec 0c             	sub    $0xc,%esp
   20158:	ff 74 24 24          	pushl  0x24(%esp)
   2015c:	e8 fd ea ff ff       	call   1ec5e <get_fs_word>
   20161:	83 c4 10             	add    $0x10,%esp
				address += 4;
			}
			return;
		case 0x25:                      // FLDCW - 加载控制字。
			address = ea(info,code);
			*(unsigned short *) &I387.cwd =
   20164:	66 89 03             	mov    %ax,(%ebx)
				get_fs_word((unsigned short *) address);
			return;
   20167:	e9 a5 08 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x26:                      // FSTENV - 储存协处理器状态和控制寄存器等。
			address = ea(info,code);
   2016c:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20171:	83 ec 08             	sub    $0x8,%esp
   20174:	50                   	push   %eax
   20175:	ff 74 24 3c          	pushl  0x3c(%esp)
   20179:	e8 0b 0c 00 00       	call   20d89 <ea>
   2017e:	83 c4 10             	add    $0x10,%esp
   20181:	89 44 24 18          	mov    %eax,0x18(%esp)
			verify_area(address,28);
   20185:	83 ec 08             	sub    $0x8,%esp
   20188:	6a 1c                	push   $0x1c
   2018a:	ff 74 24 24          	pushl  0x24(%esp)
   2018e:	e8 10 82 fe ff       	call   83a3 <verify_area>
   20193:	83 c4 10             	add    $0x10,%esp
			for (code = 0 ; code < 7 ; code++) {
   20196:	66 c7 44 24 1e 00 00 	movw   $0x0,0x1e(%esp)
   2019d:	eb 39                	jmp    201d8 <do_emu+0x1522>
				put_fs_long( ((long *) & I387)[code],
   2019f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   201a4:	8d 90 18 04 00 00    	lea    0x418(%eax),%edx
   201aa:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   201af:	c1 e0 02             	shl    $0x2,%eax
   201b2:	01 d0                	add    %edx,%eax
   201b4:	8b 00                	mov    (%eax),%eax
   201b6:	83 ec 08             	sub    $0x8,%esp
   201b9:	ff 74 24 20          	pushl  0x20(%esp)
   201bd:	50                   	push   %eax
   201be:	e8 e6 ea ff ff       	call   1eca9 <put_fs_long>
   201c3:	83 c4 10             	add    $0x10,%esp
					(unsigned long *) address);
				address += 4;
   201c6:	83 44 24 18 04       	addl   $0x4,0x18(%esp)
				get_fs_word((unsigned short *) address);
			return;
		case 0x26:                      // FSTENV - 储存协处理器状态和控制寄存器等。
			address = ea(info,code);
			verify_area(address,28);
			for (code = 0 ; code < 7 ; code++) {
   201cb:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   201d0:	83 c0 01             	add    $0x1,%eax
   201d3:	66 89 44 24 1e       	mov    %ax,0x1e(%esp)
   201d8:	66 83 7c 24 1e 06    	cmpw   $0x6,0x1e(%esp)
   201de:	76 bf                	jbe    2019f <do_emu+0x14e9>
				put_fs_long( ((long *) & I387)[code],
					(unsigned long *) address);
				address += 4;
			}
			return;
   201e0:	e9 2c 08 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x27:                      // FSTCW - 存储控制字。
			address = ea(info,code);
   201e5:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   201ea:	83 ec 08             	sub    $0x8,%esp
   201ed:	50                   	push   %eax
   201ee:	ff 74 24 3c          	pushl  0x3c(%esp)
   201f2:	e8 92 0b 00 00       	call   20d89 <ea>
   201f7:	83 c4 10             	add    $0x10,%esp
   201fa:	89 44 24 18          	mov    %eax,0x18(%esp)
			verify_area(address,2);
   201fe:	83 ec 08             	sub    $0x8,%esp
   20201:	6a 02                	push   $0x2
   20203:	ff 74 24 24          	pushl  0x24(%esp)
   20207:	e8 97 81 fe ff       	call   83a3 <verify_area>
   2020c:	83 c4 10             	add    $0x10,%esp
			put_fs_word(I387.cwd,(short *) address);
   2020f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20214:	8b 80 18 04 00 00    	mov    0x418(%eax),%eax
   2021a:	98                   	cwtl   
   2021b:	83 ec 08             	sub    $0x8,%esp
   2021e:	ff 74 24 20          	pushl  0x20(%esp)
   20222:	50                   	push   %eax
   20223:	e8 65 ea ff ff       	call   1ec8d <put_fs_word>
   20228:	83 c4 10             	add    $0x10,%esp
			return;
   2022b:	e9 e1 07 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x62:                      // FIST - 存储短整形数。
			put_long_int(PST(0),info,code);
   20230:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   20235:	83 ec 0c             	sub    $0xc,%esp
   20238:	6a 00                	push   $0x0
   2023a:	e8 9b 09 00 00       	call   20bda <__st>
   2023f:	83 c4 10             	add    $0x10,%esp
   20242:	83 ec 04             	sub    $0x4,%esp
   20245:	53                   	push   %ebx
   20246:	ff 74 24 38          	pushl  0x38(%esp)
   2024a:	50                   	push   %eax
   2024b:	e8 23 13 00 00       	call   21573 <put_long_int>
   20250:	83 c4 10             	add    $0x10,%esp
			return;
   20253:	e9 b9 07 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x63:                      // FISTP - 存储短整型数。
			put_long_int(PST(0),info,code);
   20258:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   2025d:	83 ec 0c             	sub    $0xc,%esp
   20260:	6a 00                	push   $0x0
   20262:	e8 73 09 00 00       	call   20bda <__st>
   20267:	83 c4 10             	add    $0x10,%esp
   2026a:	83 ec 04             	sub    $0x4,%esp
   2026d:	53                   	push   %ebx
   2026e:	ff 74 24 38          	pushl  0x38(%esp)
   20272:	50                   	push   %eax
   20273:	e8 fb 12 00 00       	call   21573 <put_long_int>
   20278:	83 c4 10             	add    $0x10,%esp
			fpop();
   2027b:	e8 26 08 00 00       	call   20aa6 <fpop>
			return;
   20280:	e9 8c 07 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x65:                      // FLD - 加载扩展（临时）实数。
			fpush();
   20285:	e8 8b 08 00 00       	call   20b15 <fpush>
			get_temp_real(&tmp,info,code);
   2028a:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   2028f:	83 ec 04             	sub    $0x4,%esp
   20292:	50                   	push   %eax
   20293:	ff 74 24 38          	pushl  0x38(%esp)
   20297:	8d 44 24 18          	lea    0x18(%esp),%eax
   2029b:	50                   	push   %eax
   2029c:	e8 b0 0d 00 00       	call   21051 <get_temp_real>
   202a1:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   202a4:	83 ec 0c             	sub    $0xc,%esp
   202a7:	6a 00                	push   $0x0
   202a9:	e8 2c 09 00 00       	call   20bda <__st>
   202ae:	83 c4 10             	add    $0x10,%esp
   202b1:	89 c1                	mov    %eax,%ecx
   202b3:	8d 44 24 0c          	lea    0xc(%esp),%eax
   202b7:	8b 50 04             	mov    0x4(%eax),%edx
   202ba:	8b 00                	mov    (%eax),%eax
   202bc:	89 01                	mov    %eax,(%ecx)
   202be:	89 51 04             	mov    %edx,0x4(%ecx)
   202c1:	83 ec 0c             	sub    $0xc,%esp
   202c4:	6a 00                	push   $0x0
   202c6:	e8 0f 09 00 00       	call   20bda <__st>
   202cb:	83 c4 10             	add    $0x10,%esp
   202ce:	89 c2                	mov    %eax,%edx
   202d0:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   202d5:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   202d9:	e9 33 07 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0x67:                      // FSTP - 储存扩展实数。
			put_temp_real(PST(0),info,code);
   202de:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   202e3:	83 ec 0c             	sub    $0xc,%esp
   202e6:	6a 00                	push   $0x0
   202e8:	e8 ed 08 00 00       	call   20bda <__st>
   202ed:	83 c4 10             	add    $0x10,%esp
   202f0:	83 ec 04             	sub    $0x4,%esp
   202f3:	53                   	push   %ebx
   202f4:	ff 74 24 38          	pushl  0x38(%esp)
   202f8:	50                   	push   %eax
   202f9:	e8 74 11 00 00       	call   21472 <put_temp_real>
   202fe:	83 c4 10             	add    $0x10,%esp
			fpop();
   20301:	e8 a0 07 00 00       	call   20aa6 <fpop>
			return;
   20306:	e9 06 07 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0xa2:                      // FST - 储存双精度实数。
			put_long_real(PST(0),info,code);
   2030b:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   20310:	83 ec 0c             	sub    $0xc,%esp
   20313:	6a 00                	push   $0x0
   20315:	e8 c0 08 00 00       	call   20bda <__st>
   2031a:	83 c4 10             	add    $0x10,%esp
   2031d:	83 ec 04             	sub    $0x4,%esp
   20320:	53                   	push   %ebx
   20321:	ff 74 24 38          	pushl  0x38(%esp)
   20325:	50                   	push   %eax
   20326:	e8 cc 10 00 00       	call   213f7 <put_long_real>
   2032b:	83 c4 10             	add    $0x10,%esp
			return;
   2032e:	e9 de 06 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0xa3:                      // FSTP - 存储双精度实数。
			put_long_real(PST(0),info,code);
   20333:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   20338:	83 ec 0c             	sub    $0xc,%esp
   2033b:	6a 00                	push   $0x0
   2033d:	e8 98 08 00 00       	call   20bda <__st>
   20342:	83 c4 10             	add    $0x10,%esp
   20345:	83 ec 04             	sub    $0x4,%esp
   20348:	53                   	push   %ebx
   20349:	ff 74 24 38          	pushl  0x38(%esp)
   2034d:	50                   	push   %eax
   2034e:	e8 a4 10 00 00       	call   213f7 <put_long_real>
   20353:	83 c4 10             	add    $0x10,%esp
			fpop();
   20356:	e8 4b 07 00 00       	call   20aa6 <fpop>
			return;
   2035b:	e9 b1 06 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0xa4:                      // FRSTOR - 恢复所有108字节的寄存器内容。
			address = ea(info,code);
   20360:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20365:	83 ec 08             	sub    $0x8,%esp
   20368:	50                   	push   %eax
   20369:	ff 74 24 3c          	pushl  0x3c(%esp)
   2036d:	e8 17 0a 00 00       	call   20d89 <ea>
   20372:	83 c4 10             	add    $0x10,%esp
   20375:	89 44 24 18          	mov    %eax,0x18(%esp)
			for (code = 0 ; code < 27 ; code++) {
   20379:	66 c7 44 24 1e 00 00 	movw   $0x0,0x1e(%esp)
   20380:	eb 39                	jmp    203bb <do_emu+0x1705>
				((long *) & I387)[code] =
   20382:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20387:	8d 90 18 04 00 00    	lea    0x418(%eax),%edx
   2038d:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20392:	c1 e0 02             	shl    $0x2,%eax
   20395:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
				   get_fs_long((unsigned long *) address);
   20398:	83 ec 0c             	sub    $0xc,%esp
   2039b:	ff 74 24 24          	pushl  0x24(%esp)
   2039f:	e8 d3 e8 ff ff       	call   1ec77 <get_fs_long>
   203a4:	83 c4 10             	add    $0x10,%esp
			fpop();
			return;
		case 0xa4:                      // FRSTOR - 恢复所有108字节的寄存器内容。
			address = ea(info,code);
			for (code = 0 ; code < 27 ; code++) {
				((long *) & I387)[code] =
   203a7:	89 03                	mov    %eax,(%ebx)
				   get_fs_long((unsigned long *) address);
				address += 4;
   203a9:	83 44 24 18 04       	addl   $0x4,0x18(%esp)
			put_long_real(PST(0),info,code);
			fpop();
			return;
		case 0xa4:                      // FRSTOR - 恢复所有108字节的寄存器内容。
			address = ea(info,code);
			for (code = 0 ; code < 27 ; code++) {
   203ae:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   203b3:	83 c0 01             	add    $0x1,%eax
   203b6:	66 89 44 24 1e       	mov    %ax,0x1e(%esp)
   203bb:	66 83 7c 24 1e 1a    	cmpw   $0x1a,0x1e(%esp)
   203c1:	76 bf                	jbe    20382 <do_emu+0x16cc>
				((long *) & I387)[code] =
				   get_fs_long((unsigned long *) address);
				address += 4;
			}
			return;
   203c3:	e9 49 06 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0xa6:                      // FSAVE - 保存所有108字节寄存器内容。
			address = ea(info,code);
   203c8:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   203cd:	83 ec 08             	sub    $0x8,%esp
   203d0:	50                   	push   %eax
   203d1:	ff 74 24 3c          	pushl  0x3c(%esp)
   203d5:	e8 af 09 00 00       	call   20d89 <ea>
   203da:	83 c4 10             	add    $0x10,%esp
   203dd:	89 44 24 18          	mov    %eax,0x18(%esp)
			verify_area(address,108);
   203e1:	83 ec 08             	sub    $0x8,%esp
   203e4:	6a 6c                	push   $0x6c
   203e6:	ff 74 24 24          	pushl  0x24(%esp)
   203ea:	e8 b4 7f fe ff       	call   83a3 <verify_area>
   203ef:	83 c4 10             	add    $0x10,%esp
			for (code = 0 ; code < 27 ; code++) {
   203f2:	66 c7 44 24 1e 00 00 	movw   $0x0,0x1e(%esp)
   203f9:	eb 39                	jmp    20434 <do_emu+0x177e>
				put_fs_long( ((long *) & I387)[code],
   203fb:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20400:	8d 90 18 04 00 00    	lea    0x418(%eax),%edx
   20406:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   2040b:	c1 e0 02             	shl    $0x2,%eax
   2040e:	01 d0                	add    %edx,%eax
   20410:	8b 00                	mov    (%eax),%eax
   20412:	83 ec 08             	sub    $0x8,%esp
   20415:	ff 74 24 20          	pushl  0x20(%esp)
   20419:	50                   	push   %eax
   2041a:	e8 8a e8 ff ff       	call   1eca9 <put_fs_long>
   2041f:	83 c4 10             	add    $0x10,%esp
					(unsigned long *) address);
				address += 4;
   20422:	83 44 24 18 04       	addl   $0x4,0x18(%esp)
			}
			return;
		case 0xa6:                      // FSAVE - 保存所有108字节寄存器内容。
			address = ea(info,code);
			verify_area(address,108);
			for (code = 0 ; code < 27 ; code++) {
   20427:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   2042c:	83 c0 01             	add    $0x1,%eax
   2042f:	66 89 44 24 1e       	mov    %ax,0x1e(%esp)
   20434:	66 83 7c 24 1e 1a    	cmpw   $0x1a,0x1e(%esp)
   2043a:	76 bf                	jbe    203fb <do_emu+0x1745>
				put_fs_long( ((long *) & I387)[code],
					(unsigned long *) address);
				address += 4;
			}
			I387.cwd = 0x037f;
   2043c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20441:	c7 80 18 04 00 00 7f 	movl   $0x37f,0x418(%eax)
   20448:	03 00 00 
			I387.swd = 0x0000;
   2044b:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20450:	c7 80 1c 04 00 00 00 	movl   $0x0,0x41c(%eax)
   20457:	00 00 00 
			I387.twd = 0x0000;
   2045a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   2045f:	c7 80 20 04 00 00 00 	movl   $0x0,0x420(%eax)
   20466:	00 00 00 
			return;
   20469:	e9 a3 05 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0xa7:                      // FSTSW - 保存状态状态字。
			address = ea(info,code);
   2046e:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20473:	83 ec 08             	sub    $0x8,%esp
   20476:	50                   	push   %eax
   20477:	ff 74 24 3c          	pushl  0x3c(%esp)
   2047b:	e8 09 09 00 00       	call   20d89 <ea>
   20480:	83 c4 10             	add    $0x10,%esp
   20483:	89 44 24 18          	mov    %eax,0x18(%esp)
			verify_area(address,2);
   20487:	83 ec 08             	sub    $0x8,%esp
   2048a:	6a 02                	push   $0x2
   2048c:	ff 74 24 24          	pushl  0x24(%esp)
   20490:	e8 0e 7f fe ff       	call   83a3 <verify_area>
   20495:	83 c4 10             	add    $0x10,%esp
			put_fs_word(I387.swd,(short *) address);
   20498:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   2049d:	8b 80 1c 04 00 00    	mov    0x41c(%eax),%eax
   204a3:	98                   	cwtl   
   204a4:	83 ec 08             	sub    $0x8,%esp
   204a7:	ff 74 24 20          	pushl  0x20(%esp)
   204ab:	50                   	push   %eax
   204ac:	e8 dc e7 ff ff       	call   1ec8d <put_fs_word>
   204b1:	83 c4 10             	add    $0x10,%esp
			return;
   204b4:	e9 58 05 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0xe2:                      // FIST - 保存短整型数。
			put_short_int(PST(0),info,code);
   204b9:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   204be:	83 ec 0c             	sub    $0xc,%esp
   204c1:	6a 00                	push   $0x0
   204c3:	e8 12 07 00 00       	call   20bda <__st>
   204c8:	83 c4 10             	add    $0x10,%esp
   204cb:	83 ec 04             	sub    $0x4,%esp
   204ce:	53                   	push   %ebx
   204cf:	ff 74 24 38          	pushl  0x38(%esp)
   204d3:	50                   	push   %eax
   204d4:	e8 22 10 00 00       	call   214fb <put_short_int>
   204d9:	83 c4 10             	add    $0x10,%esp
			return;
   204dc:	e9 30 05 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0xe3:                      // FISTP - 保存短整型数。
			put_short_int(PST(0),info,code);
   204e1:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   204e6:	83 ec 0c             	sub    $0xc,%esp
   204e9:	6a 00                	push   $0x0
   204eb:	e8 ea 06 00 00       	call   20bda <__st>
   204f0:	83 c4 10             	add    $0x10,%esp
   204f3:	83 ec 04             	sub    $0x4,%esp
   204f6:	53                   	push   %ebx
   204f7:	ff 74 24 38          	pushl  0x38(%esp)
   204fb:	50                   	push   %eax
   204fc:	e8 fa 0f 00 00       	call   214fb <put_short_int>
   20501:	83 c4 10             	add    $0x10,%esp
			fpop();
   20504:	e8 9d 05 00 00       	call   20aa6 <fpop>
			return;
   20509:	e9 03 05 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0xe4:                      // FBLD - 加载BCD类型数。
			fpush();
   2050e:	e8 02 06 00 00       	call   20b15 <fpush>
			get_BCD(&tmp,info,code);
   20513:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20518:	83 ec 04             	sub    $0x4,%esp
   2051b:	50                   	push   %eax
   2051c:	ff 74 24 38          	pushl  0x38(%esp)
   20520:	8d 44 24 18          	lea    0x18(%esp),%eax
   20524:	50                   	push   %eax
   20525:	e8 35 0d 00 00       	call   2125f <get_BCD>
   2052a:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   2052d:	83 ec 0c             	sub    $0xc,%esp
   20530:	6a 00                	push   $0x0
   20532:	e8 a3 06 00 00       	call   20bda <__st>
   20537:	83 c4 10             	add    $0x10,%esp
   2053a:	89 c1                	mov    %eax,%ecx
   2053c:	8d 44 24 0c          	lea    0xc(%esp),%eax
   20540:	8b 50 04             	mov    0x4(%eax),%edx
   20543:	8b 00                	mov    (%eax),%eax
   20545:	89 01                	mov    %eax,(%ecx)
   20547:	89 51 04             	mov    %edx,0x4(%ecx)
   2054a:	83 ec 0c             	sub    $0xc,%esp
   2054d:	6a 00                	push   $0x0
   2054f:	e8 86 06 00 00       	call   20bda <__st>
   20554:	83 c4 10             	add    $0x10,%esp
   20557:	89 c2                	mov    %eax,%edx
   20559:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   2055e:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   20562:	e9 aa 04 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0xe5:                      // FILD - 加载长整型数。
			fpush();
   20567:	e8 a9 05 00 00       	call   20b15 <fpush>
			get_longlong_int(&tmp,info,code);
   2056c:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20571:	83 ec 04             	sub    $0x4,%esp
   20574:	50                   	push   %eax
   20575:	ff 74 24 38          	pushl  0x38(%esp)
   20579:	8d 44 24 18          	lea    0x18(%esp),%eax
   2057d:	50                   	push   %eax
   2057e:	e8 41 0c 00 00       	call   211c4 <get_longlong_int>
   20583:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   20586:	83 ec 0c             	sub    $0xc,%esp
   20589:	6a 00                	push   $0x0
   2058b:	e8 4a 06 00 00       	call   20bda <__st>
   20590:	83 c4 10             	add    $0x10,%esp
   20593:	89 c1                	mov    %eax,%ecx
   20595:	8d 44 24 0c          	lea    0xc(%esp),%eax
   20599:	8b 50 04             	mov    0x4(%eax),%edx
   2059c:	8b 00                	mov    (%eax),%eax
   2059e:	89 01                	mov    %eax,(%ecx)
   205a0:	89 51 04             	mov    %edx,0x4(%ecx)
   205a3:	83 ec 0c             	sub    $0xc,%esp
   205a6:	6a 00                	push   $0x0
   205a8:	e8 2d 06 00 00       	call   20bda <__st>
   205ad:	83 c4 10             	add    $0x10,%esp
   205b0:	89 c2                	mov    %eax,%edx
   205b2:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   205b7:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   205bb:	e9 51 04 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0xe6:                      // FBSTP - 保存BCD类型数。
			put_BCD(PST(0),info,code);
   205c0:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   205c5:	83 ec 0c             	sub    $0xc,%esp
   205c8:	6a 00                	push   $0x0
   205ca:	e8 0b 06 00 00       	call   20bda <__st>
   205cf:	83 c4 10             	add    $0x10,%esp
   205d2:	83 ec 04             	sub    $0x4,%esp
   205d5:	53                   	push   %ebx
   205d6:	ff 74 24 38          	pushl  0x38(%esp)
   205da:	50                   	push   %eax
   205db:	e8 a9 10 00 00       	call   21689 <put_BCD>
   205e0:	83 c4 10             	add    $0x10,%esp
			fpop();
   205e3:	e8 be 04 00 00       	call   20aa6 <fpop>
			return;
   205e8:	e9 24 04 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 0xe7:                      // BISTP - 保存长整型数。
			put_longlong_int(PST(0),info,code);
   205ed:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   205f2:	83 ec 0c             	sub    $0xc,%esp
   205f5:	6a 00                	push   $0x0
   205f7:	e8 de 05 00 00       	call   20bda <__st>
   205fc:	83 c4 10             	add    $0x10,%esp
   205ff:	83 ec 04             	sub    $0x4,%esp
   20602:	53                   	push   %ebx
   20603:	ff 74 24 38          	pushl  0x38(%esp)
   20607:	50                   	push   %eax
   20608:	e8 dd 0f 00 00       	call   215ea <put_longlong_int>
   2060d:	83 c4 10             	add    $0x10,%esp
			fpop();
   20610:	e8 91 04 00 00       	call   20aa6 <fpop>
			return;
   20615:	e9 f7 03 00 00       	jmp    20a11 <do_emu+0x1d5b>
	}
// 下面处理第2类浮点指令。首先根据指令代码的位10--9的MF值取指定类型的数，然后根据OPA和OPB的组合值进行分别处理。即处理11011，
// MF，000,XXX，R/M形式的指令代码。
	switch (code >> 9) {
   2061a:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   2061f:	66 c1 e8 09          	shr    $0x9,%ax
   20623:	0f b7 c0             	movzwl %ax,%eax
   20626:	83 f8 01             	cmp    $0x1,%eax
   20629:	74 33                	je     2065e <do_emu+0x19a8>
   2062b:	83 f8 01             	cmp    $0x1,%eax
   2062e:	7f 06                	jg     20636 <do_emu+0x1980>
   20630:	85 c0                	test   %eax,%eax
   20632:	74 0e                	je     20642 <do_emu+0x198c>
   20634:	eb 7a                	jmp    206b0 <do_emu+0x19fa>
   20636:	83 f8 02             	cmp    $0x2,%eax
   20639:	74 3f                	je     2067a <do_emu+0x19c4>
   2063b:	83 f8 04             	cmp    $0x4,%eax
   2063e:	74 56                	je     20696 <do_emu+0x19e0>
   20640:	eb 6e                	jmp    206b0 <do_emu+0x19fa>
		case 0:                 // MF = 00，短实数（32位整数）。
			get_short_real(&tmp,info,code);
   20642:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20647:	83 ec 04             	sub    $0x4,%esp
   2064a:	50                   	push   %eax
   2064b:	ff 74 24 38          	pushl  0x38(%esp)
   2064f:	8d 44 24 18          	lea    0x18(%esp),%eax
   20653:	50                   	push   %eax
   20654:	e8 3f 09 00 00       	call   20f98 <get_short_real>
   20659:	83 c4 10             	add    $0x10,%esp
			break;
   2065c:	eb 52                	jmp    206b0 <do_emu+0x19fa>
		case 1:                 // MF = 01，短整数（32位整数）。
			get_long_int(&tmp,info,code);
   2065e:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20663:	83 ec 04             	sub    $0x4,%esp
   20666:	50                   	push   %eax
   20667:	ff 74 24 38          	pushl  0x38(%esp)
   2066b:	8d 44 24 18          	lea    0x18(%esp),%eax
   2066f:	50                   	push   %eax
   20670:	e8 d3 0a 00 00       	call   21148 <get_long_int>
   20675:	83 c4 10             	add    $0x10,%esp
			break;
   20678:	eb 36                	jmp    206b0 <do_emu+0x19fa>
		case 2:                 // MF = 10，长实数（64位实数）。
			get_long_real(&tmp,info,code);
   2067a:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   2067f:	83 ec 04             	sub    $0x4,%esp
   20682:	50                   	push   %eax
   20683:	ff 74 24 38          	pushl  0x38(%esp)
   20687:	8d 44 24 18          	lea    0x18(%esp),%eax
   2068b:	50                   	push   %eax
   2068c:	e8 58 09 00 00       	call   20fe9 <get_long_real>
   20691:	83 c4 10             	add    $0x10,%esp
			break;
   20694:	eb 1a                	jmp    206b0 <do_emu+0x19fa>
		case 4:                 // MF = 11，长整数（64位整数）！应该是case 3。
			get_short_int(&tmp,info,code);
   20696:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   2069b:	83 ec 04             	sub    $0x4,%esp
   2069e:	50                   	push   %eax
   2069f:	ff 74 24 38          	pushl  0x38(%esp)
   206a3:	8d 44 24 18          	lea    0x18(%esp),%eax
   206a7:	50                   	push   %eax
   206a8:	e8 1e 0a 00 00       	call   210cb <get_short_int>
   206ad:	83 c4 10             	add    $0x10,%esp
	}
	switch ((code>>3) & 0x27) {
   206b0:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   206b5:	66 c1 e8 03          	shr    $0x3,%ax
   206b9:	0f b7 c0             	movzwl %ax,%eax
   206bc:	83 e0 27             	and    $0x27,%eax
   206bf:	83 f8 07             	cmp    $0x7,%eax
   206c2:	0f 87 b6 02 00 00    	ja     2097e <do_emu+0x1cc8>
   206c8:	8b 04 85 7c 59 02 00 	mov    0x2597c(,%eax,4),%eax
   206cf:	ff e0                	jmp    *%eax
		case 0:                 // FADD。
			fadd(&tmp,PST(0),&tmp);
   206d1:	83 ec 0c             	sub    $0xc,%esp
   206d4:	6a 00                	push   $0x0
   206d6:	e8 ff 04 00 00       	call   20bda <__st>
   206db:	83 c4 10             	add    $0x10,%esp
   206de:	89 c2                	mov    %eax,%edx
   206e0:	83 ec 04             	sub    $0x4,%esp
   206e3:	8d 44 24 10          	lea    0x10(%esp),%eax
   206e7:	50                   	push   %eax
   206e8:	52                   	push   %edx
   206e9:	8d 44 24 18          	lea    0x18(%esp),%eax
   206ed:	50                   	push   %eax
   206ee:	e8 ef 11 00 00       	call   218e2 <fadd>
   206f3:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   206f6:	83 ec 0c             	sub    $0xc,%esp
   206f9:	6a 00                	push   $0x0
   206fb:	e8 da 04 00 00       	call   20bda <__st>
   20700:	83 c4 10             	add    $0x10,%esp
   20703:	89 c1                	mov    %eax,%ecx
   20705:	8d 44 24 0c          	lea    0xc(%esp),%eax
   20709:	8b 50 04             	mov    0x4(%eax),%edx
   2070c:	8b 00                	mov    (%eax),%eax
   2070e:	89 01                	mov    %eax,(%ecx)
   20710:	89 51 04             	mov    %edx,0x4(%ecx)
   20713:	83 ec 0c             	sub    $0xc,%esp
   20716:	6a 00                	push   $0x0
   20718:	e8 bd 04 00 00       	call   20bda <__st>
   2071d:	83 c4 10             	add    $0x10,%esp
   20720:	89 c2                	mov    %eax,%edx
   20722:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   20727:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   2072b:	e9 e1 02 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 1:                 // FMUL。
			fmul(&tmp,PST(0),&tmp);
   20730:	83 ec 0c             	sub    $0xc,%esp
   20733:	6a 00                	push   $0x0
   20735:	e8 a0 04 00 00       	call   20bda <__st>
   2073a:	83 c4 10             	add    $0x10,%esp
   2073d:	89 c2                	mov    %eax,%edx
   2073f:	83 ec 04             	sub    $0x4,%esp
   20742:	8d 44 24 10          	lea    0x10(%esp),%eax
   20746:	50                   	push   %eax
   20747:	52                   	push   %edx
   20748:	8d 44 24 18          	lea    0x18(%esp),%eax
   2074c:	50                   	push   %eax
   2074d:	e8 5a 13 00 00       	call   21aac <fmul>
   20752:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   20755:	83 ec 0c             	sub    $0xc,%esp
   20758:	6a 00                	push   $0x0
   2075a:	e8 7b 04 00 00       	call   20bda <__st>
   2075f:	83 c4 10             	add    $0x10,%esp
   20762:	89 c1                	mov    %eax,%ecx
   20764:	8d 44 24 0c          	lea    0xc(%esp),%eax
   20768:	8b 50 04             	mov    0x4(%eax),%edx
   2076b:	8b 00                	mov    (%eax),%eax
   2076d:	89 01                	mov    %eax,(%ecx)
   2076f:	89 51 04             	mov    %edx,0x4(%ecx)
   20772:	83 ec 0c             	sub    $0xc,%esp
   20775:	6a 00                	push   $0x0
   20777:	e8 5e 04 00 00       	call   20bda <__st>
   2077c:	83 c4 10             	add    $0x10,%esp
   2077f:	89 c2                	mov    %eax,%edx
   20781:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   20786:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   2078a:	e9 82 02 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 2:                 // FCOM。
			fcom(&tmp,PST(0));
   2078f:	83 ec 0c             	sub    $0xc,%esp
   20792:	6a 00                	push   $0x0
   20794:	e8 41 04 00 00       	call   20bda <__st>
   20799:	83 c4 10             	add    $0x10,%esp
   2079c:	83 ec 08             	sub    $0x8,%esp
   2079f:	50                   	push   %eax
   207a0:	8d 44 24 18          	lea    0x18(%esp),%eax
   207a4:	50                   	push   %eax
   207a5:	e8 19 19 00 00       	call   220c3 <fcom>
   207aa:	83 c4 10             	add    $0x10,%esp
			return;
   207ad:	e9 5f 02 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 3:                 // FCOMP。
			fcom(&tmp,PST(0));
   207b2:	83 ec 0c             	sub    $0xc,%esp
   207b5:	6a 00                	push   $0x0
   207b7:	e8 1e 04 00 00       	call   20bda <__st>
   207bc:	83 c4 10             	add    $0x10,%esp
   207bf:	83 ec 08             	sub    $0x8,%esp
   207c2:	50                   	push   %eax
   207c3:	8d 44 24 18          	lea    0x18(%esp),%eax
   207c7:	50                   	push   %eax
   207c8:	e8 f6 18 00 00       	call   220c3 <fcom>
   207cd:	83 c4 10             	add    $0x10,%esp
			fpop();
   207d0:	e8 d1 02 00 00       	call   20aa6 <fpop>
			return;
   207d5:	e9 37 02 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 4:                 // FSUB。
			tmp.exponent ^= 0x8000;
   207da:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   207df:	66 35 00 80          	xor    $0x8000,%ax
   207e3:	66 89 44 24 14       	mov    %ax,0x14(%esp)
			fadd(&tmp,PST(0),&tmp);
   207e8:	83 ec 0c             	sub    $0xc,%esp
   207eb:	6a 00                	push   $0x0
   207ed:	e8 e8 03 00 00       	call   20bda <__st>
   207f2:	83 c4 10             	add    $0x10,%esp
   207f5:	89 c2                	mov    %eax,%edx
   207f7:	83 ec 04             	sub    $0x4,%esp
   207fa:	8d 44 24 10          	lea    0x10(%esp),%eax
   207fe:	50                   	push   %eax
   207ff:	52                   	push   %edx
   20800:	8d 44 24 18          	lea    0x18(%esp),%eax
   20804:	50                   	push   %eax
   20805:	e8 d8 10 00 00       	call   218e2 <fadd>
   2080a:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   2080d:	83 ec 0c             	sub    $0xc,%esp
   20810:	6a 00                	push   $0x0
   20812:	e8 c3 03 00 00       	call   20bda <__st>
   20817:	83 c4 10             	add    $0x10,%esp
   2081a:	89 c1                	mov    %eax,%ecx
   2081c:	8d 44 24 0c          	lea    0xc(%esp),%eax
   20820:	8b 50 04             	mov    0x4(%eax),%edx
   20823:	8b 00                	mov    (%eax),%eax
   20825:	89 01                	mov    %eax,(%ecx)
   20827:	89 51 04             	mov    %edx,0x4(%ecx)
   2082a:	83 ec 0c             	sub    $0xc,%esp
   2082d:	6a 00                	push   $0x0
   2082f:	e8 a6 03 00 00       	call   20bda <__st>
   20834:	83 c4 10             	add    $0x10,%esp
   20837:	89 c2                	mov    %eax,%edx
   20839:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   2083e:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   20842:	e9 ca 01 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 5:                 // FSUBR。
			ST(0).exponent ^= 0x8000;
   20847:	83 ec 0c             	sub    $0xc,%esp
   2084a:	6a 00                	push   $0x0
   2084c:	e8 89 03 00 00       	call   20bda <__st>
   20851:	83 c4 10             	add    $0x10,%esp
   20854:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   20858:	66 81 f2 00 80       	xor    $0x8000,%dx
   2085d:	66 89 50 08          	mov    %dx,0x8(%eax)
			fadd(&tmp,PST(0),&tmp);
   20861:	83 ec 0c             	sub    $0xc,%esp
   20864:	6a 00                	push   $0x0
   20866:	e8 6f 03 00 00       	call   20bda <__st>
   2086b:	83 c4 10             	add    $0x10,%esp
   2086e:	89 c2                	mov    %eax,%edx
   20870:	83 ec 04             	sub    $0x4,%esp
   20873:	8d 44 24 10          	lea    0x10(%esp),%eax
   20877:	50                   	push   %eax
   20878:	52                   	push   %edx
   20879:	8d 44 24 18          	lea    0x18(%esp),%eax
   2087d:	50                   	push   %eax
   2087e:	e8 5f 10 00 00       	call   218e2 <fadd>
   20883:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   20886:	83 ec 0c             	sub    $0xc,%esp
   20889:	6a 00                	push   $0x0
   2088b:	e8 4a 03 00 00       	call   20bda <__st>
   20890:	83 c4 10             	add    $0x10,%esp
   20893:	89 c1                	mov    %eax,%ecx
   20895:	8d 44 24 0c          	lea    0xc(%esp),%eax
   20899:	8b 50 04             	mov    0x4(%eax),%edx
   2089c:	8b 00                	mov    (%eax),%eax
   2089e:	89 01                	mov    %eax,(%ecx)
   208a0:	89 51 04             	mov    %edx,0x4(%ecx)
   208a3:	83 ec 0c             	sub    $0xc,%esp
   208a6:	6a 00                	push   $0x0
   208a8:	e8 2d 03 00 00       	call   20bda <__st>
   208ad:	83 c4 10             	add    $0x10,%esp
   208b0:	89 c2                	mov    %eax,%edx
   208b2:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   208b7:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   208bb:	e9 51 01 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 6:                 // FDIV。
			fdiv(PST(0),&tmp,&tmp);
   208c0:	83 ec 0c             	sub    $0xc,%esp
   208c3:	6a 00                	push   $0x0
   208c5:	e8 10 03 00 00       	call   20bda <__st>
   208ca:	83 c4 10             	add    $0x10,%esp
   208cd:	89 c2                	mov    %eax,%edx
   208cf:	83 ec 04             	sub    $0x4,%esp
   208d2:	8d 44 24 10          	lea    0x10(%esp),%eax
   208d6:	50                   	push   %eax
   208d7:	8d 44 24 14          	lea    0x14(%esp),%eax
   208db:	50                   	push   %eax
   208dc:	52                   	push   %edx
   208dd:	e8 58 14 00 00       	call   21d3a <fdiv>
   208e2:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   208e5:	83 ec 0c             	sub    $0xc,%esp
   208e8:	6a 00                	push   $0x0
   208ea:	e8 eb 02 00 00       	call   20bda <__st>
   208ef:	83 c4 10             	add    $0x10,%esp
   208f2:	89 c1                	mov    %eax,%ecx
   208f4:	8d 44 24 0c          	lea    0xc(%esp),%eax
   208f8:	8b 50 04             	mov    0x4(%eax),%edx
   208fb:	8b 00                	mov    (%eax),%eax
   208fd:	89 01                	mov    %eax,(%ecx)
   208ff:	89 51 04             	mov    %edx,0x4(%ecx)
   20902:	83 ec 0c             	sub    $0xc,%esp
   20905:	6a 00                	push   $0x0
   20907:	e8 ce 02 00 00       	call   20bda <__st>
   2090c:	83 c4 10             	add    $0x10,%esp
   2090f:	89 c2                	mov    %eax,%edx
   20911:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   20916:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   2091a:	e9 f2 00 00 00       	jmp    20a11 <do_emu+0x1d5b>
		case 7:                 // FDIVR。
			fdiv(&tmp,PST(0),&tmp);
   2091f:	83 ec 0c             	sub    $0xc,%esp
   20922:	6a 00                	push   $0x0
   20924:	e8 b1 02 00 00       	call   20bda <__st>
   20929:	83 c4 10             	add    $0x10,%esp
   2092c:	89 c2                	mov    %eax,%edx
   2092e:	83 ec 04             	sub    $0x4,%esp
   20931:	8d 44 24 10          	lea    0x10(%esp),%eax
   20935:	50                   	push   %eax
   20936:	52                   	push   %edx
   20937:	8d 44 24 18          	lea    0x18(%esp),%eax
   2093b:	50                   	push   %eax
   2093c:	e8 f9 13 00 00       	call   21d3a <fdiv>
   20941:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   20944:	83 ec 0c             	sub    $0xc,%esp
   20947:	6a 00                	push   $0x0
   20949:	e8 8c 02 00 00       	call   20bda <__st>
   2094e:	83 c4 10             	add    $0x10,%esp
   20951:	89 c1                	mov    %eax,%ecx
   20953:	8d 44 24 0c          	lea    0xc(%esp),%eax
   20957:	8b 50 04             	mov    0x4(%eax),%edx
   2095a:	8b 00                	mov    (%eax),%eax
   2095c:	89 01                	mov    %eax,(%ecx)
   2095e:	89 51 04             	mov    %edx,0x4(%ecx)
   20961:	83 ec 0c             	sub    $0xc,%esp
   20964:	6a 00                	push   $0x0
   20966:	e8 6f 02 00 00       	call   20bda <__st>
   2096b:	83 c4 10             	add    $0x10,%esp
   2096e:	89 c2                	mov    %eax,%edx
   20970:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   20975:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   20979:	e9 93 00 00 00       	jmp    20a11 <do_emu+0x1d5b>
	}
// 处理形如11011,XX,1,XX，000,R/M的指令代码。
	if ((code & 0x138) == 0x100) {
   2097e:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20983:	25 38 01 00 00       	and    $0x138,%eax
   20988:	3d 00 01 00 00       	cmp    $0x100,%eax
   2098d:	75 3c                	jne    209cb <do_emu+0x1d15>
			fpush();
   2098f:	e8 81 01 00 00       	call   20b15 <fpush>
			real_to_real(&tmp,&ST(0));
   20994:	83 ec 0c             	sub    $0xc,%esp
   20997:	6a 00                	push   $0x0
   20999:	e8 3c 02 00 00       	call   20bda <__st>
   2099e:	83 c4 10             	add    $0x10,%esp
   209a1:	89 c1                	mov    %eax,%ecx
   209a3:	8d 44 24 0c          	lea    0xc(%esp),%eax
   209a7:	8b 50 04             	mov    0x4(%eax),%edx
   209aa:	8b 00                	mov    (%eax),%eax
   209ac:	89 01                	mov    %eax,(%ecx)
   209ae:	89 51 04             	mov    %edx,0x4(%ecx)
   209b1:	83 ec 0c             	sub    $0xc,%esp
   209b4:	6a 00                	push   $0x0
   209b6:	e8 1f 02 00 00       	call   20bda <__st>
   209bb:	83 c4 10             	add    $0x10,%esp
   209be:	89 c2                	mov    %eax,%edx
   209c0:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   209c5:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   209c9:	eb 46                	jmp    20a11 <do_emu+0x1d5b>
	}
// 其余均为无效指令。
	printk("Unknown math-insns: %04x:%08x %04x\n\r",CS,EIP,code);
   209cb:	0f b7 4c 24 1e       	movzwl 0x1e(%esp),%ecx
   209d0:	8b 44 24 30          	mov    0x30(%esp),%eax
   209d4:	8b 50 38             	mov    0x38(%eax),%edx
   209d7:	8b 44 24 30          	mov    0x30(%esp),%eax
   209db:	83 c0 3c             	add    $0x3c,%eax
   209de:	0f b7 00             	movzwl (%eax),%eax
   209e1:	0f b7 c0             	movzwl %ax,%eax
   209e4:	51                   	push   %ecx
   209e5:	52                   	push   %edx
   209e6:	50                   	push   %eax
   209e7:	68 ac 52 02 00       	push   $0x252ac
   209ec:	e8 56 82 fe ff       	call   8c47 <printk>
   209f1:	83 c4 10             	add    $0x10,%esp
	math_abort(info,1<<(SIGFPE-1));
   209f4:	83 ec 08             	sub    $0x8,%esp
   209f7:	68 80 00 00 00       	push   $0x80
   209fc:	ff 74 24 3c          	pushl  0x3c(%esp)
   20a00:	e8 75 00 00 00       	call   20a7a <__math_abort>
   20a05:	83 c4 10             	add    $0x10,%esp
   20a08:	eb 07                	jmp    20a11 <do_emu+0x1d5b>
	*(unsigned short *) &I387.fcs = CS;             // 保存代码段选择符。
	*(1+(unsigned short *) &I387.fcs) = code;       // 保存代码。
	EIP += 2;                                       // 指令指针指向下一个字节。
        switch (code) {
		case 0x1d0: /* fnop */          // 空操作指令FNOP
			return;
   20a0a:	90                   	nop
   20a0b:	eb 04                	jmp    20a11 <do_emu+0x1d5b>
		case 0x2e9:                     // FUCOMPP - 无次序比较。
			fucom(PST(1),PST(0));
			fpop(); fpop();
			return;
		case 0x3d0: case 0x3d1:         // FNOP - 对387。！！应该是0x3e0，0x3e1。
			return;
   20a0d:	90                   	nop
   20a0e:	eb 01                	jmp    20a11 <do_emu+0x1d5b>
			I387.cwd = 0x037f;
			I387.swd = 0x0000;
			I387.twd = 0x0000;
			return;
		case 0x3e4:                     // FNOP - 对80387。
			return;
   20a10:	90                   	nop
			return;
	}
// 其余均为无效指令。
	printk("Unknown math-insns: %04x:%08x %04x\n\r",CS,EIP,code);
	math_abort(info,1<<(SIGFPE-1));
}
   20a11:	83 c4 28             	add    $0x28,%esp
   20a14:	5b                   	pop    %ebx
   20a15:	c3                   	ret    

00020a16 <math_emulate>:
// CPU异常中断int 7调用的80387仿真接口函数。
// 若当前进程没有使用过协处理器，就设置使用协处理器标志used_math，然后初始化80387的控制字、状态字和特征字。最后使用中断
// int 7调用本函数的返回地址指针作为参数调用浮点指令仿真主函数do_emu()。
// 参数____false是_orig_eip。
void math_emulate(long ___false)
{
   20a16:	83 ec 0c             	sub    $0xc,%esp
	if (!current->used_math) {
   20a19:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20a1e:	0f b7 80 28 03 00 00 	movzwl 0x328(%eax),%eax
   20a25:	66 85 c0             	test   %ax,%ax
   20a28:	75 3b                	jne    20a65 <math_emulate+0x4f>
		current->used_math = 1;
   20a2a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20a2f:	66 c7 80 28 03 00 00 	movw   $0x1,0x328(%eax)
   20a36:	01 00 
		I387.cwd = 0x037f;
   20a38:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20a3d:	c7 80 18 04 00 00 7f 	movl   $0x37f,0x418(%eax)
   20a44:	03 00 00 
		I387.swd = 0x0000;
   20a47:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20a4c:	c7 80 1c 04 00 00 00 	movl   $0x0,0x41c(%eax)
   20a53:	00 00 00 
		I387.twd = 0x0000;
   20a56:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20a5b:	c7 80 20 04 00 00 00 	movl   $0x0,0x420(%eax)
   20a62:	00 00 00 
	}
/* &___false points to info->___orig_eip, so subtract 1 to get info */
	do_emu((struct info *) ((&___false) - 1));
   20a65:	8d 44 24 0c          	lea    0xc(%esp),%eax
   20a69:	83 ec 0c             	sub    $0xc,%esp
   20a6c:	50                   	push   %eax
   20a6d:	e8 44 e2 ff ff       	call   1ecb6 <do_emu>
   20a72:	83 c4 10             	add    $0x10,%esp
}
   20a75:	90                   	nop
   20a76:	83 c4 0c             	add    $0xc,%esp
   20a79:	c3                   	ret    

00020a7a <__math_abort>:
// 终止仿真操作。
// 当处理到无效指令代码或者未实现的指令代码时，该函数首先恢复程序的原EIP，并发送指定信号给当前进程。最后将栈指针指向中断
// int 7处理过程调用本函数的返回地址，直接返回到中断处理过程中。
void __math_abort(struct info * info, unsigned int signal)
{
	EIP = ORIG_EIP;
   20a7a:	8b 44 24 04          	mov    0x4(%esp),%eax
   20a7e:	8b 50 04             	mov    0x4(%eax),%edx
   20a81:	8b 44 24 04          	mov    0x4(%esp),%eax
   20a85:	89 50 38             	mov    %edx,0x38(%eax)
	current->signal |= signal;
   20a88:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20a8d:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   20a93:	8b 52 0c             	mov    0xc(%edx),%edx
   20a96:	0b 54 24 08          	or     0x8(%esp),%edx
   20a9a:	89 50 0c             	mov    %edx,0xc(%eax)
	__asm__("movl %0,%%esp ; ret"::"g" ((long) info));
   20a9d:	8b 44 24 04          	mov    0x4(%esp),%eax
   20aa1:	89 c4                	mov    %eax,%esp
   20aa3:	c3                   	ret    
}
   20aa4:	90                   	nop
   20aa5:	c3                   	ret    

00020aa6 <fpop>:

// 累加器栈弹出操作。
// 将状态字TOP字段值加1，并以7取模。
static void fpop(void)
{
   20aa6:	83 ec 10             	sub    $0x10,%esp
	unsigned long tmp;

	tmp = I387.swd & 0xffffc7ff;
   20aa9:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20aae:	8b 80 1c 04 00 00    	mov    0x41c(%eax),%eax
   20ab4:	80 e4 c7             	and    $0xc7,%ah
   20ab7:	89 44 24 0c          	mov    %eax,0xc(%esp)
	I387.swd += 0x00000800;
   20abb:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20ac0:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   20ac6:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   20acc:	81 c2 00 08 00 00    	add    $0x800,%edx
   20ad2:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	I387.swd &= 0x00003800;
   20ad8:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20add:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   20ae3:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   20ae9:	81 e2 00 38 00 00    	and    $0x3800,%edx
   20aef:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	I387.swd |= tmp;
   20af5:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20afa:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   20b00:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   20b06:	0b 54 24 0c          	or     0xc(%esp),%edx
   20b0a:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
}
   20b10:	90                   	nop
   20b11:	83 c4 10             	add    $0x10,%esp
   20b14:	c3                   	ret    

00020b15 <fpush>:

// 累加器栈入栈操作。
// 将状态字TOP字段减1（即加7），并以7取模。
static void fpush(void)
{
   20b15:	83 ec 10             	sub    $0x10,%esp
	unsigned long tmp;

	tmp = I387.swd & 0xffffc7ff;
   20b18:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20b1d:	8b 80 1c 04 00 00    	mov    0x41c(%eax),%eax
   20b23:	80 e4 c7             	and    $0xc7,%ah
   20b26:	89 44 24 0c          	mov    %eax,0xc(%esp)
	I387.swd += 0x00003800;
   20b2a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20b2f:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   20b35:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   20b3b:	81 c2 00 38 00 00    	add    $0x3800,%edx
   20b41:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	I387.swd &= 0x00003800;
   20b47:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20b4c:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   20b52:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   20b58:	81 e2 00 38 00 00    	and    $0x3800,%edx
   20b5e:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	I387.swd |= tmp;
   20b64:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20b69:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   20b6f:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   20b75:	0b 54 24 0c          	or     0xc(%esp),%edx
   20b79:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
}
   20b7f:	90                   	nop
   20b80:	83 c4 10             	add    $0x10,%esp
   20b83:	c3                   	ret    

00020b84 <fxchg>:

// 交换两个累加器的值。
static void fxchg(temp_real_unaligned * a, temp_real_unaligned * b)
{
   20b84:	83 ec 10             	sub    $0x10,%esp
	temp_real_unaligned c;

	c = *a;
   20b87:	8b 44 24 14          	mov    0x14(%esp),%eax
   20b8b:	8b 10                	mov    (%eax),%edx
   20b8d:	89 54 24 06          	mov    %edx,0x6(%esp)
   20b91:	8b 50 04             	mov    0x4(%eax),%edx
   20b94:	89 54 24 0a          	mov    %edx,0xa(%esp)
   20b98:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   20b9c:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	*a = *b;
   20ba1:	8b 44 24 14          	mov    0x14(%esp),%eax
   20ba5:	8b 54 24 18          	mov    0x18(%esp),%edx
   20ba9:	8b 0a                	mov    (%edx),%ecx
   20bab:	89 08                	mov    %ecx,(%eax)
   20bad:	8b 4a 04             	mov    0x4(%edx),%ecx
   20bb0:	89 48 04             	mov    %ecx,0x4(%eax)
   20bb3:	0f b7 52 08          	movzwl 0x8(%edx),%edx
   20bb7:	66 89 50 08          	mov    %dx,0x8(%eax)
	*b = c;
   20bbb:	8b 44 24 18          	mov    0x18(%esp),%eax
   20bbf:	8b 54 24 06          	mov    0x6(%esp),%edx
   20bc3:	89 10                	mov    %edx,(%eax)
   20bc5:	8b 54 24 0a          	mov    0xa(%esp),%edx
   20bc9:	89 50 04             	mov    %edx,0x4(%eax)
   20bcc:	0f b7 54 24 0e       	movzwl 0xe(%esp),%edx
   20bd1:	66 89 50 08          	mov    %dx,0x8(%eax)
}
   20bd5:	90                   	nop
   20bd6:	83 c4 10             	add    $0x10,%esp
   20bd9:	c3                   	ret    

00020bda <__st>:

// 取ST(i)的内存指针。
// 取状态字中TOP字段值。加上指定的物理数据寄存器号并取模，最后返回ST(i)对应的指针。
static temp_real_unaligned * __st(int i)
{
	i += I387.swd >> 11;            // 取状态字中TOP字段值。
   20bda:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20bdf:	8b 80 1c 04 00 00    	mov    0x41c(%eax),%eax
   20be5:	c1 f8 0b             	sar    $0xb,%eax
   20be8:	01 44 24 04          	add    %eax,0x4(%esp)
	i &= 7;
   20bec:	83 64 24 04 07       	andl   $0x7,0x4(%esp)
	return (temp_real_unaligned *) (i*10 + (char *)(I387.st_space));
   20bf1:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20bf6:	8d 88 34 04 00 00    	lea    0x434(%eax),%ecx
   20bfc:	8b 54 24 04          	mov    0x4(%esp),%edx
   20c00:	89 d0                	mov    %edx,%eax
   20c02:	c1 e0 02             	shl    $0x2,%eax
   20c05:	01 d0                	add    %edx,%eax
   20c07:	01 c0                	add    %eax,%eax
   20c09:	01 c8                	add    %ecx,%eax
   20c0b:	c3                   	ret    

00020c0c <math_error>:
// 协处理器错误中断int 16调用的处理函数。
// 当协处理器检测到自己发生错误时，就会通过ERROR引脚通知CPU。下面代码用于处理协处理器发出的出错信号。并跳转去执行math_error()
// 返回后将跳转到标号ret_from_sys_call处继续执行。
void math_error(void)
{
	__asm__("fnclex");              // 让80387清除状态字中所有异常标志位和忙位。
   20c0c:	db e2                	fnclex 
	if (last_task_used_math)        // 若使用了协处理器，则设置协处理器出错信号。
   20c0e:	a1 0c eb 02 00       	mov    0x2eb0c,%eax
   20c13:	85 c0                	test   %eax,%eax
   20c15:	74 14                	je     20c2b <math_error+0x1f>
		last_task_used_math->signal |= 1<<(SIGFPE-1);
   20c17:	a1 0c eb 02 00       	mov    0x2eb0c,%eax
   20c1c:	8b 15 0c eb 02 00    	mov    0x2eb0c,%edx
   20c22:	8b 52 0c             	mov    0xc(%edx),%edx
   20c25:	80 ca 80             	or     $0x80,%dl
   20c28:	89 50 0c             	mov    %edx,0xc(%eax)
}
   20c2b:	90                   	nop
   20c2c:	c3                   	ret    

00020c2d <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
   20c2d:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   20c2e:	8b 44 24 08          	mov    0x8(%esp),%eax
   20c32:	64 8a 00             	mov    %fs:(%eax),%al
   20c35:	89 c3                	mov    %eax,%ebx
	return _v;
   20c37:	89 d8                	mov    %ebx,%eax
}
   20c39:	5b                   	pop    %ebx
   20c3a:	c3                   	ret    

00020c3b <get_fs_long>:
//// 读取fs段中指定地址处的长字(4字节).
// 参数:addr - 指定的内存地址.
// %0 - (返回的长字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的长字.
static inline unsigned long get_fs_long(const unsigned long *addr)
{
   20c3b:	83 ec 10             	sub    $0x10,%esp
	unsigned long _v;

	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
   20c3e:	8b 44 24 14          	mov    0x14(%esp),%eax
   20c42:	64 8b 00             	mov    %fs:(%eax),%eax
   20c45:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
   20c49:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   20c4d:	83 c4 10             	add    $0x10,%esp
   20c50:	c3                   	ret    

00020c51 <sib>:
// 取info结构中指定位置处寄存器内容。
#define REG(x) (*(long *)(__regoffset[(x)]+(char *) info))

// 求2字节寻址模式中第2操作数指示字节SIB（Scale, Index, Base）的值。
static char * sib(struct info * info, int mod)
{
   20c51:	83 ec 10             	sub    $0x10,%esp
	unsigned char ss,index,base;
	long offset = 0;
   20c54:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   20c5b:	00 

// 首先从用户代码段中取得SIB字节，然后取出各个字段位值。
	base = get_fs_byte((char *) EIP);
   20c5c:	8b 44 24 14          	mov    0x14(%esp),%eax
   20c60:	8b 40 38             	mov    0x38(%eax),%eax
   20c63:	50                   	push   %eax
   20c64:	e8 c4 ff ff ff       	call   20c2d <get_fs_byte>
   20c69:	83 c4 04             	add    $0x4,%esp
   20c6c:	88 44 24 0b          	mov    %al,0xb(%esp)
	EIP++;
   20c70:	8b 44 24 14          	mov    0x14(%esp),%eax
   20c74:	8b 40 38             	mov    0x38(%eax),%eax
   20c77:	8d 50 01             	lea    0x1(%eax),%edx
   20c7a:	8b 44 24 14          	mov    0x14(%esp),%eax
   20c7e:	89 50 38             	mov    %edx,0x38(%eax)
	ss = base >> 6;                 // 比例因子大小ss。
   20c81:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
   20c86:	c0 e8 06             	shr    $0x6,%al
   20c89:	88 44 24 0a          	mov    %al,0xa(%esp)
	index = (base >> 3) & 7;        // 索引值索引代号index。
   20c8d:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
   20c92:	c0 e8 03             	shr    $0x3,%al
   20c95:	83 e0 07             	and    $0x7,%eax
   20c98:	88 44 24 09          	mov    %al,0x9(%esp)
	base &= 7;                      // 基地址代号base。
   20c9c:	80 64 24 0b 07       	andb   $0x7,0xb(%esp)
// 如果索引代号为0b100，表示无索引偏移值。否则索引偏移值offset=对应寄存器内容×比例因子。
	if (index == 4)
   20ca1:	80 7c 24 09 04       	cmpb   $0x4,0x9(%esp)
   20ca6:	75 0a                	jne    20cb2 <sib+0x61>
		offset = 0;
   20ca8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   20caf:	00 
   20cb0:	eb 1a                	jmp    20ccc <sib+0x7b>
	else
		offset = REG(index);
   20cb2:	0f b6 44 24 09       	movzbl 0x9(%esp),%eax
   20cb7:	8b 04 85 80 e5 02 00 	mov    0x2e580(,%eax,4),%eax
   20cbe:	89 c2                	mov    %eax,%edx
   20cc0:	8b 44 24 14          	mov    0x14(%esp),%eax
   20cc4:	01 d0                	add    %edx,%eax
   20cc6:	8b 00                	mov    (%eax),%eax
   20cc8:	89 44 24 0c          	mov    %eax,0xc(%esp)
	offset <<= ss;
   20ccc:	0f b6 44 24 0a       	movzbl 0xa(%esp),%eax
   20cd1:	89 c1                	mov    %eax,%ecx
   20cd3:	d3 64 24 0c          	shll   %cl,0xc(%esp)
// 如果上一MODRM字节中的MOD不为零，或者Base不等于0b101，则表示有偏移值在base指定的寄存器中。因此偏移offset需要再加上base
// 对应寄存器中的内容。
	if (mod || base != 5)
   20cd7:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   20cdc:	75 07                	jne    20ce5 <sib+0x94>
   20cde:	80 7c 24 0b 05       	cmpb   $0x5,0xb(%esp)
   20ce3:	74 1a                	je     20cff <sib+0xae>
		offset += REG(base);
   20ce5:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
   20cea:	8b 04 85 80 e5 02 00 	mov    0x2e580(,%eax,4),%eax
   20cf1:	89 c2                	mov    %eax,%edx
   20cf3:	8b 44 24 14          	mov    0x14(%esp),%eax
   20cf7:	01 d0                	add    %edx,%eax
   20cf9:	8b 00                	mov    (%eax),%eax
   20cfb:	01 44 24 0c          	add    %eax,0xc(%esp)
// 如果MOD=1，则表示偏移值为1字节。否则，若MOD=2，或者base=0b101，则偏移值为4字节。
	if (mod == 1) {
   20cff:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   20d04:	75 2a                	jne    20d30 <sib+0xdf>
		offset += (signed char) get_fs_byte((char *) EIP);
   20d06:	8b 44 24 14          	mov    0x14(%esp),%eax
   20d0a:	8b 40 38             	mov    0x38(%eax),%eax
   20d0d:	50                   	push   %eax
   20d0e:	e8 1a ff ff ff       	call   20c2d <get_fs_byte>
   20d13:	83 c4 04             	add    $0x4,%esp
   20d16:	0f be c0             	movsbl %al,%eax
   20d19:	01 44 24 0c          	add    %eax,0xc(%esp)
		EIP++;
   20d1d:	8b 44 24 14          	mov    0x14(%esp),%eax
   20d21:	8b 40 38             	mov    0x38(%eax),%eax
   20d24:	8d 50 01             	lea    0x1(%eax),%edx
   20d27:	8b 44 24 14          	mov    0x14(%esp),%eax
   20d2b:	89 50 38             	mov    %edx,0x38(%eax)
   20d2e:	eb 33                	jmp    20d63 <sib+0x112>
	} else if (mod == 2 || base == 5) {
   20d30:	83 7c 24 18 02       	cmpl   $0x2,0x18(%esp)
   20d35:	74 07                	je     20d3e <sib+0xed>
   20d37:	80 7c 24 0b 05       	cmpb   $0x5,0xb(%esp)
   20d3c:	75 25                	jne    20d63 <sib+0x112>
		offset += (signed) get_fs_long((unsigned long *) EIP);
   20d3e:	8b 44 24 14          	mov    0x14(%esp),%eax
   20d42:	8b 40 38             	mov    0x38(%eax),%eax
   20d45:	50                   	push   %eax
   20d46:	e8 f0 fe ff ff       	call   20c3b <get_fs_long>
   20d4b:	83 c4 04             	add    $0x4,%esp
   20d4e:	01 44 24 0c          	add    %eax,0xc(%esp)
		EIP += 4;
   20d52:	8b 44 24 14          	mov    0x14(%esp),%eax
   20d56:	8b 40 38             	mov    0x38(%eax),%eax
   20d59:	8d 50 04             	lea    0x4(%eax),%edx
   20d5c:	8b 44 24 14          	mov    0x14(%esp),%eax
   20d60:	89 50 38             	mov    %edx,0x38(%eax)
	}
// 最后保存并返回偏移值。
	I387.foo = offset;
   20d63:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20d68:	8b 54 24 0c          	mov    0xc(%esp),%edx
   20d6c:	89 90 2c 04 00 00    	mov    %edx,0x42c(%eax)
	I387.fos = 0x17;
   20d72:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20d77:	c7 80 30 04 00 00 17 	movl   $0x17,0x430(%eax)
   20d7e:	00 00 00 
	return (char *) offset;
   20d81:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   20d85:	83 c4 10             	add    $0x10,%esp
   20d88:	c3                   	ret    

00020d89 <ea>:

// 根据指令中寻址模式字节计算有效地址值。
char * ea(struct info * info, unsigned short code)
{
   20d89:	83 ec 2c             	sub    $0x2c,%esp
   20d8c:	8b 44 24 34          	mov    0x34(%esp),%eax
   20d90:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	unsigned char mod,rm;
	long * tmp = &EAX;
   20d95:	8b 44 24 30          	mov    0x30(%esp),%eax
   20d99:	83 c0 18             	add    $0x18,%eax
   20d9c:	89 44 24 18          	mov    %eax,0x18(%esp)
	int offset = 0;
   20da0:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   20da7:	00 

// 首先取代码中的MOD字段和R/M字段值。如果MOD=0b11，表示是单字节指令，没有偏移字段。如果R/M字段=0b100，并且MOD不为0b11，
// 表示是2字节地址模式寻址，因此调用sib()求出偏移值并返回即可。
	mod = (code >> 6) & 3;          // MOD字段。
   20da8:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   20dad:	66 c1 e8 06          	shr    $0x6,%ax
   20db1:	83 e0 03             	and    $0x3,%eax
   20db4:	88 44 24 17          	mov    %al,0x17(%esp)
	rm = code & 7;                  // R/M字段。
   20db8:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   20dbd:	83 e0 07             	and    $0x7,%eax
   20dc0:	88 44 24 16          	mov    %al,0x16(%esp)
	if (rm == 4 && mod != 3)
   20dc4:	80 7c 24 16 04       	cmpb   $0x4,0x16(%esp)
   20dc9:	75 1e                	jne    20de9 <ea+0x60>
   20dcb:	80 7c 24 17 03       	cmpb   $0x3,0x17(%esp)
   20dd0:	74 17                	je     20de9 <ea+0x60>
		return sib(info,mod);
   20dd2:	0f b6 44 24 17       	movzbl 0x17(%esp),%eax
   20dd7:	50                   	push   %eax
   20dd8:	ff 74 24 34          	pushl  0x34(%esp)
   20ddc:	e8 70 fe ff ff       	call   20c51 <sib>
   20de1:	83 c4 08             	add    $0x8,%esp
   20de4:	e9 2b 01 00 00       	jmp    20f14 <ea+0x18b>
// 如果R/M字段为0b101，并且MOD为0，表示是单字节地址模式编码且后随32字节偏移值。于是取出用户代码中4字节偏移值，保存并返回
// 之。
	if (rm == 5 && !mod) {
   20de9:	80 7c 24 16 05       	cmpb   $0x5,0x16(%esp)
   20dee:	75 53                	jne    20e43 <ea+0xba>
   20df0:	80 7c 24 17 00       	cmpb   $0x0,0x17(%esp)
   20df5:	75 4c                	jne    20e43 <ea+0xba>
		offset = get_fs_long((unsigned long *) EIP);
   20df7:	8b 44 24 30          	mov    0x30(%esp),%eax
   20dfb:	8b 40 38             	mov    0x38(%eax),%eax
   20dfe:	50                   	push   %eax
   20dff:	e8 37 fe ff ff       	call   20c3b <get_fs_long>
   20e04:	83 c4 04             	add    $0x4,%esp
   20e07:	89 44 24 1c          	mov    %eax,0x1c(%esp)
		EIP += 4;
   20e0b:	8b 44 24 30          	mov    0x30(%esp),%eax
   20e0f:	8b 40 38             	mov    0x38(%eax),%eax
   20e12:	8d 50 04             	lea    0x4(%eax),%edx
   20e15:	8b 44 24 30          	mov    0x30(%esp),%eax
   20e19:	89 50 38             	mov    %edx,0x38(%eax)
		I387.foo = offset;
   20e1c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20e21:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   20e25:	89 90 2c 04 00 00    	mov    %edx,0x42c(%eax)
		I387.fos = 0x17;
   20e2b:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20e30:	c7 80 30 04 00 00 17 	movl   $0x17,0x430(%eax)
   20e37:	00 00 00 
		return (char *) offset;
   20e3a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   20e3e:	e9 d1 00 00 00       	jmp    20f14 <ea+0x18b>
	}
// 对于其余情况，则根据MOD进行处理。首先取出R/M代码对应寄存器内容的值作为指针tmp。对于MOD=0，无偏移值。对于MOD=1，代码后
// 随1字节偏移值。对于MOD=2，代码后有4字节偏移值。最后保存并返回有效地址值。
	tmp = & REG(rm);
   20e43:	0f b6 44 24 16       	movzbl 0x16(%esp),%eax
   20e48:	8b 04 85 80 e5 02 00 	mov    0x2e580(,%eax,4),%eax
   20e4f:	89 c2                	mov    %eax,%edx
   20e51:	8b 44 24 30          	mov    0x30(%esp),%eax
   20e55:	01 d0                	add    %edx,%eax
   20e57:	89 44 24 18          	mov    %eax,0x18(%esp)
	switch (mod) {
   20e5b:	0f b6 44 24 17       	movzbl 0x17(%esp),%eax
   20e60:	83 f8 01             	cmp    $0x1,%eax
   20e63:	74 21                	je     20e86 <ea+0xfd>
   20e65:	83 f8 01             	cmp    $0x1,%eax
   20e68:	7f 06                	jg     20e70 <ea+0xe7>
   20e6a:	85 c0                	test   %eax,%eax
   20e6c:	74 0e                	je     20e7c <ea+0xf3>
   20e6e:	eb 78                	jmp    20ee8 <ea+0x15f>
   20e70:	83 f8 02             	cmp    $0x2,%eax
   20e73:	74 3b                	je     20eb0 <ea+0x127>
   20e75:	83 f8 03             	cmp    $0x3,%eax
   20e78:	74 5d                	je     20ed7 <ea+0x14e>
   20e7a:	eb 6c                	jmp    20ee8 <ea+0x15f>
		case 0: offset = 0; break;
   20e7c:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   20e83:	00 
   20e84:	eb 62                	jmp    20ee8 <ea+0x15f>
		case 1:
			offset = (signed char) get_fs_byte((char *) EIP);
   20e86:	8b 44 24 30          	mov    0x30(%esp),%eax
   20e8a:	8b 40 38             	mov    0x38(%eax),%eax
   20e8d:	50                   	push   %eax
   20e8e:	e8 9a fd ff ff       	call   20c2d <get_fs_byte>
   20e93:	83 c4 04             	add    $0x4,%esp
   20e96:	0f be c0             	movsbl %al,%eax
   20e99:	89 44 24 1c          	mov    %eax,0x1c(%esp)
			EIP++;
   20e9d:	8b 44 24 30          	mov    0x30(%esp),%eax
   20ea1:	8b 40 38             	mov    0x38(%eax),%eax
   20ea4:	8d 50 01             	lea    0x1(%eax),%edx
   20ea7:	8b 44 24 30          	mov    0x30(%esp),%eax
   20eab:	89 50 38             	mov    %edx,0x38(%eax)
			break;
   20eae:	eb 38                	jmp    20ee8 <ea+0x15f>
		case 2:
			offset = (signed) get_fs_long((unsigned long *) EIP);
   20eb0:	8b 44 24 30          	mov    0x30(%esp),%eax
   20eb4:	8b 40 38             	mov    0x38(%eax),%eax
   20eb7:	50                   	push   %eax
   20eb8:	e8 7e fd ff ff       	call   20c3b <get_fs_long>
   20ebd:	83 c4 04             	add    $0x4,%esp
   20ec0:	89 44 24 1c          	mov    %eax,0x1c(%esp)
			EIP += 4;
   20ec4:	8b 44 24 30          	mov    0x30(%esp),%eax
   20ec8:	8b 40 38             	mov    0x38(%eax),%eax
   20ecb:	8d 50 04             	lea    0x4(%eax),%edx
   20ece:	8b 44 24 30          	mov    0x30(%esp),%eax
   20ed2:	89 50 38             	mov    %edx,0x38(%eax)
			break;
   20ed5:	eb 11                	jmp    20ee8 <ea+0x15f>
		case 3:
			math_abort(info,1<<(SIGILL-1));
   20ed7:	83 ec 08             	sub    $0x8,%esp
   20eda:	6a 08                	push   $0x8
   20edc:	ff 74 24 3c          	pushl  0x3c(%esp)
   20ee0:	e8 95 fb ff ff       	call   20a7a <__math_abort>
   20ee5:	83 c4 10             	add    $0x10,%esp
	}
	I387.foo = offset;
   20ee8:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20eed:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   20ef1:	89 90 2c 04 00 00    	mov    %edx,0x42c(%eax)
	I387.fos = 0x17;
   20ef7:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20efc:	c7 80 30 04 00 00 17 	movl   $0x17,0x430(%eax)
   20f03:	00 00 00 
	return offset + (char *) *tmp;
   20f06:	8b 44 24 18          	mov    0x18(%esp),%eax
   20f0a:	8b 00                	mov    (%eax),%eax
   20f0c:	89 c2                	mov    %eax,%edx
   20f0e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   20f12:	01 d0                	add    %edx,%eax
}
   20f14:	83 c4 2c             	add    $0x2c,%esp
   20f17:	c3                   	ret    

00020f18 <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
   20f18:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   20f19:	8b 44 24 08          	mov    0x8(%esp),%eax
   20f1d:	64 8a 00             	mov    %fs:(%eax),%al
   20f20:	89 c3                	mov    %eax,%ebx
	return _v;
   20f22:	89 d8                	mov    %ebx,%eax
}
   20f24:	5b                   	pop    %ebx
   20f25:	c3                   	ret    

00020f26 <get_fs_word>:
//// 读取fs段中指定地址处的字.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的字.
static inline unsigned short get_fs_word(const unsigned short *addr)
{
   20f26:	83 ec 10             	sub    $0x10,%esp
	unsigned short _v;

	__asm__ ("movw %%fs:%1,%0":"=q" (_v):"m" (*addr));
   20f29:	8b 44 24 14          	mov    0x14(%esp),%eax
   20f2d:	64 66 8b 00          	mov    %fs:(%eax),%ax
   20f31:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	return _v;
   20f36:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
}
   20f3b:	83 c4 10             	add    $0x10,%esp
   20f3e:	c3                   	ret    

00020f3f <get_fs_long>:
//// 读取fs段中指定地址处的长字(4字节).
// 参数:addr - 指定的内存地址.
// %0 - (返回的长字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的长字.
static inline unsigned long get_fs_long(const unsigned long *addr)
{
   20f3f:	83 ec 10             	sub    $0x10,%esp
	unsigned long _v;

	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
   20f42:	8b 44 24 14          	mov    0x14(%esp),%eax
   20f46:	64 8b 00             	mov    %fs:(%eax),%eax
   20f49:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
   20f4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   20f51:	83 c4 10             	add    $0x10,%esp
   20f54:	c3                   	ret    

00020f55 <put_fs_byte>:

//// 将一字节存放在fs段中指定内存地址处.
// 参数:val - 字节值;addr - 内存地址.
// %0 - 寄存器(字节值val);%1 - (内存地址addr).
static inline void put_fs_byte(char val,char *addr)
{
   20f55:	83 ec 04             	sub    $0x4,%esp
   20f58:	8b 44 24 08          	mov    0x8(%esp),%eax
   20f5c:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   20f5f:	0f b6 04 24          	movzbl (%esp),%eax
   20f63:	8b 54 24 0c          	mov    0xc(%esp),%edx
   20f67:	64 88 02             	mov    %al,%fs:(%edx)
}
   20f6a:	90                   	nop
   20f6b:	83 c4 04             	add    $0x4,%esp
   20f6e:	c3                   	ret    

00020f6f <put_fs_word>:

//// 将一字存放在fs段中指定内存地址处.
// 参数:val - 字值;addr - 内存地址.
// %0 - 寄存器(字值val);%1 - (内存地址addr).
static inline void put_fs_word(short val,short * addr)
{
   20f6f:	83 ec 04             	sub    $0x4,%esp
   20f72:	8b 44 24 08          	mov    0x8(%esp),%eax
   20f76:	66 89 04 24          	mov    %ax,(%esp)
__asm__ ("movw %0,%%fs:%1"::"q" (val),"m" (*addr));
   20f7a:	0f b7 04 24          	movzwl (%esp),%eax
   20f7e:	8b 54 24 0c          	mov    0xc(%esp),%edx
   20f82:	64 66 89 02          	mov    %ax,%fs:(%edx)
}
   20f86:	90                   	nop
   20f87:	83 c4 04             	add    $0x4,%esp
   20f8a:	c3                   	ret    

00020f8b <put_fs_long>:
//// 将一长字存放在fs段中指定内存地址处.
// 参数:val - 长字值;addr - 内存地址.
// %0 - 寄存器(长字值val);%1 - (内存地址addr).
static inline void put_fs_long(unsigned long val,unsigned long * addr)
{
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
   20f8b:	8b 44 24 04          	mov    0x4(%esp),%eax
   20f8f:	8b 54 24 08          	mov    0x8(%esp),%edx
   20f93:	64 89 02             	mov    %eax,%fs:(%edx)
}
   20f96:	90                   	nop
   20f97:	c3                   	ret    

00020f98 <get_short_real>:
// 根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得短实数所在有效地址（math/ea.c），然后从用户
// 数据区读取相应实数值。最后把用户短实数转换成临时实数（math/convert.c）。
// 参数：tmp - 转换成临时实数后的指针；info - info结构指针；code - 指令代码。
void get_short_real(temp_real * tmp,
	struct info * info, unsigned short code)
{
   20f98:	83 ec 2c             	sub    $0x2c,%esp
   20f9b:	8b 44 24 38          	mov    0x38(%esp),%eax
   20f9f:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	short_real sr;

	addr = ea(info,code);                           // 计算有效地址。
   20fa4:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   20fa9:	83 ec 08             	sub    $0x8,%esp
   20fac:	50                   	push   %eax
   20fad:	ff 74 24 40          	pushl  0x40(%esp)
   20fb1:	e8 d3 fd ff ff       	call   20d89 <ea>
   20fb6:	83 c4 10             	add    $0x10,%esp
   20fb9:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	sr = get_fs_long((unsigned long *) addr);       // 取用户数据区中的值。
   20fbd:	83 ec 0c             	sub    $0xc,%esp
   20fc0:	ff 74 24 28          	pushl  0x28(%esp)
   20fc4:	e8 76 ff ff ff       	call   20f3f <get_fs_long>
   20fc9:	83 c4 10             	add    $0x10,%esp
   20fcc:	89 44 24 18          	mov    %eax,0x18(%esp)
	short_to_temp(&sr,tmp);                         // 转换成临时实数格式。
   20fd0:	83 ec 08             	sub    $0x8,%esp
   20fd3:	ff 74 24 38          	pushl  0x38(%esp)
   20fd7:	8d 44 24 24          	lea    0x24(%esp),%eax
   20fdb:	50                   	push   %eax
   20fdc:	e8 54 11 00 00       	call   22135 <short_to_temp>
   20fe1:	83 c4 10             	add    $0x10,%esp
}
   20fe4:	90                   	nop
   20fe5:	83 c4 2c             	add    $0x2c,%esp
   20fe8:	c3                   	ret    

00020fe9 <get_long_real>:
// 首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得长实数所在有效地址（math/ec.c），然后从
// 用户数据区读取相应实数值。最后把用户实数值转换成临时实数（math/convert.c）。
// 参数：tmp - 转换成临时实数后的指针；info - info结构指针；code - 指令代码。
void get_long_real(temp_real * tmp,
	struct info * info, unsigned short code)
{
   20fe9:	83 ec 2c             	sub    $0x2c,%esp
   20fec:	8b 44 24 38          	mov    0x38(%esp),%eax
   20ff0:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	long_real lr;

	addr = ea(info,code);                           // 取指令中的有效地址。
   20ff5:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   20ffa:	83 ec 08             	sub    $0x8,%esp
   20ffd:	50                   	push   %eax
   20ffe:	ff 74 24 40          	pushl  0x40(%esp)
   21002:	e8 82 fd ff ff       	call   20d89 <ea>
   21007:	83 c4 10             	add    $0x10,%esp
   2100a:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	lr.a = get_fs_long((unsigned long *) addr);     // 取长8字节实数。
   2100e:	83 ec 0c             	sub    $0xc,%esp
   21011:	ff 74 24 28          	pushl  0x28(%esp)
   21015:	e8 25 ff ff ff       	call   20f3f <get_fs_long>
   2101a:	83 c4 10             	add    $0x10,%esp
   2101d:	89 44 24 14          	mov    %eax,0x14(%esp)
	lr.b = get_fs_long(1 + (unsigned long *) addr); // 转换成临时实数格式。
   21021:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21025:	83 c0 04             	add    $0x4,%eax
   21028:	83 ec 0c             	sub    $0xc,%esp
   2102b:	50                   	push   %eax
   2102c:	e8 0e ff ff ff       	call   20f3f <get_fs_long>
   21031:	83 c4 10             	add    $0x10,%esp
   21034:	89 44 24 18          	mov    %eax,0x18(%esp)
	long_to_temp(&lr,tmp);
   21038:	83 ec 08             	sub    $0x8,%esp
   2103b:	ff 74 24 38          	pushl  0x38(%esp)
   2103f:	8d 44 24 20          	lea    0x20(%esp),%eax
   21043:	50                   	push   %eax
   21044:	e8 91 11 00 00       	call   221da <long_to_temp>
   21049:	83 c4 10             	add    $0x10,%esp
}
   2104c:	90                   	nop
   2104d:	83 c4 2c             	add    $0x2c,%esp
   21050:	c3                   	ret    

00021051 <get_temp_real>:
// 首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得临时实数所在有效地址（math/ea.c），然后
// 从用户数据区读取相应临时实数值。
// 参数：tmp - 转换成临时实数后的指针；info - info结构指针；code - 指令代码。
void get_temp_real(temp_real * tmp,
	struct info * info, unsigned short code)
{
   21051:	83 ec 2c             	sub    $0x2c,%esp
   21054:	8b 44 24 38          	mov    0x38(%esp),%eax
   21058:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;

	addr = ea(info,code);           // 取指令中的有效地址值。
   2105d:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   21062:	83 ec 08             	sub    $0x8,%esp
   21065:	50                   	push   %eax
   21066:	ff 74 24 40          	pushl  0x40(%esp)
   2106a:	e8 1a fd ff ff       	call   20d89 <ea>
   2106f:	83 c4 10             	add    $0x10,%esp
   21072:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	tmp->a = get_fs_long((unsigned long *) addr);
   21076:	83 ec 0c             	sub    $0xc,%esp
   21079:	ff 74 24 28          	pushl  0x28(%esp)
   2107d:	e8 bd fe ff ff       	call   20f3f <get_fs_long>
   21082:	83 c4 10             	add    $0x10,%esp
   21085:	89 c2                	mov    %eax,%edx
   21087:	8b 44 24 30          	mov    0x30(%esp),%eax
   2108b:	89 10                	mov    %edx,(%eax)
	tmp->b = get_fs_long(1 + (unsigned long *) addr);
   2108d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21091:	83 c0 04             	add    $0x4,%eax
   21094:	83 ec 0c             	sub    $0xc,%esp
   21097:	50                   	push   %eax
   21098:	e8 a2 fe ff ff       	call   20f3f <get_fs_long>
   2109d:	83 c4 10             	add    $0x10,%esp
   210a0:	89 c2                	mov    %eax,%edx
   210a2:	8b 44 24 30          	mov    0x30(%esp),%eax
   210a6:	89 50 04             	mov    %edx,0x4(%eax)
	tmp->exponent = get_fs_word(4 + (unsigned short *) addr);
   210a9:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   210ad:	83 c0 08             	add    $0x8,%eax
   210b0:	83 ec 0c             	sub    $0xc,%esp
   210b3:	50                   	push   %eax
   210b4:	e8 6d fe ff ff       	call   20f26 <get_fs_word>
   210b9:	83 c4 10             	add    $0x10,%esp
   210bc:	89 c2                	mov    %eax,%edx
   210be:	8b 44 24 30          	mov    0x30(%esp),%eax
   210c2:	66 89 50 08          	mov    %dx,0x8(%eax)
}
   210c6:	90                   	nop
   210c7:	83 c4 2c             	add    $0x2c,%esp
   210ca:	c3                   	ret    

000210cb <get_short_int>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得短整数所在有效地址（math/ea.c）
// 然后从用户数据区读取相应整数值，并保存为临时整数格式。最后把临时整数值转换成临时实数（math/convert.c）。
// 参数：tmp - 转换成临时实数后的指针；info - info结构指针；code - 指令代码。
void get_short_int(temp_real * tmp,
	struct info * info, unsigned short code)
{
   210cb:	83 ec 2c             	sub    $0x2c,%esp
   210ce:	8b 44 24 38          	mov    0x38(%esp),%eax
   210d2:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	temp_int ti;

	addr = ea(info,code);           // 取指令中的有效地址值。
   210d7:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   210dc:	83 ec 08             	sub    $0x8,%esp
   210df:	50                   	push   %eax
   210e0:	ff 74 24 40          	pushl  0x40(%esp)
   210e4:	e8 a0 fc ff ff       	call   20d89 <ea>
   210e9:	83 c4 10             	add    $0x10,%esp
   210ec:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	ti.a = (signed short) get_fs_word((unsigned short *) addr);
   210f0:	83 ec 0c             	sub    $0xc,%esp
   210f3:	ff 74 24 28          	pushl  0x28(%esp)
   210f7:	e8 2a fe ff ff       	call   20f26 <get_fs_word>
   210fc:	83 c4 10             	add    $0x10,%esp
   210ff:	98                   	cwtl   
   21100:	89 44 24 10          	mov    %eax,0x10(%esp)
	ti.b = 0;
   21104:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
   2110b:	00 
	if (ti.sign = (ti.a < 0))       // 若是负数，则设置临时整数符号位。
   2110c:	8b 44 24 10          	mov    0x10(%esp),%eax
   21110:	c1 e8 1f             	shr    $0x1f,%eax
   21113:	0f b6 c0             	movzbl %al,%eax
   21116:	66 89 44 24 18       	mov    %ax,0x18(%esp)
   2111b:	0f b7 44 24 18       	movzwl 0x18(%esp),%eax
   21120:	66 85 c0             	test   %ax,%ax
   21123:	74 0a                	je     2112f <get_short_int+0x64>
		ti.a = - ti.a;          // 临时整数“尾数”部分为无符号数。
   21125:	8b 44 24 10          	mov    0x10(%esp),%eax
   21129:	f7 d8                	neg    %eax
   2112b:	89 44 24 10          	mov    %eax,0x10(%esp)
	int_to_real(&ti,tmp);           // 把临时整数转换成临时实数格式。
   2112f:	83 ec 08             	sub    $0x8,%esp
   21132:	ff 74 24 38          	pushl  0x38(%esp)
   21136:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   2113a:	50                   	push   %eax
   2113b:	e8 53 16 00 00       	call   22793 <int_to_real>
   21140:	83 c4 10             	add    $0x10,%esp
}
   21143:	90                   	nop
   21144:	83 c4 2c             	add    $0x2c,%esp
   21147:	c3                   	ret    

00021148 <get_long_int>:
// 首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得长整数所在有效地址（math/ea.c），然后从
// 用户数据区读取相应整数值，并保存为临时整数格式。最后把临时整数值转换成临时实数（math/convert.c）。
// 参数：tmp - 转换成临时实数后的指针；info - info结构指针；code - 指令代码。
void get_long_int(temp_real * tmp,
	struct info * info, unsigned short code)
{
   21148:	83 ec 2c             	sub    $0x2c,%esp
   2114b:	8b 44 24 38          	mov    0x38(%esp),%eax
   2114f:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	temp_int ti;

	addr = ea(info,code);           // 取指令中的有效地址值。
   21154:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   21159:	83 ec 08             	sub    $0x8,%esp
   2115c:	50                   	push   %eax
   2115d:	ff 74 24 40          	pushl  0x40(%esp)
   21161:	e8 23 fc ff ff       	call   20d89 <ea>
   21166:	83 c4 10             	add    $0x10,%esp
   21169:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	ti.a = get_fs_long((unsigned long *) addr);
   2116d:	83 ec 0c             	sub    $0xc,%esp
   21170:	ff 74 24 28          	pushl  0x28(%esp)
   21174:	e8 c6 fd ff ff       	call   20f3f <get_fs_long>
   21179:	83 c4 10             	add    $0x10,%esp
   2117c:	89 44 24 10          	mov    %eax,0x10(%esp)
	ti.b = 0;
   21180:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
   21187:	00 
	if (ti.sign = (ti.a < 0))       // 若是负数，则设置临时整数符号位。
   21188:	8b 44 24 10          	mov    0x10(%esp),%eax
   2118c:	c1 e8 1f             	shr    $0x1f,%eax
   2118f:	0f b6 c0             	movzbl %al,%eax
   21192:	66 89 44 24 18       	mov    %ax,0x18(%esp)
   21197:	0f b7 44 24 18       	movzwl 0x18(%esp),%eax
   2119c:	66 85 c0             	test   %ax,%ax
   2119f:	74 0a                	je     211ab <get_long_int+0x63>
		ti.a = - ti.a;          // 临时整数“尾数”部分为无符号数。
   211a1:	8b 44 24 10          	mov    0x10(%esp),%eax
   211a5:	f7 d8                	neg    %eax
   211a7:	89 44 24 10          	mov    %eax,0x10(%esp)
	int_to_real(&ti,tmp);           // 把临时整数转换成临时实数格式。
   211ab:	83 ec 08             	sub    $0x8,%esp
   211ae:	ff 74 24 38          	pushl  0x38(%esp)
   211b2:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   211b6:	50                   	push   %eax
   211b7:	e8 d7 15 00 00       	call   22793 <int_to_real>
   211bc:	83 c4 10             	add    $0x10,%esp
}
   211bf:	90                   	nop
   211c0:	83 c4 2c             	add    $0x2c,%esp
   211c3:	c3                   	ret    

000211c4 <get_longlong_int>:
// 首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得64位长整数所有有效地址（math/ea.c），
// 然后从用户数据区读取相应整数值，并保存为临时整数格式。最后再把临时整数值转换成临时实数（math/convert.c）。
// 参数：tmp - 转换成临时实数后的指针；info - info结构指针；code - 指令代码。
void get_longlong_int(temp_real * tmp,
	struct info * info, unsigned short code)
{
   211c4:	83 ec 2c             	sub    $0x2c,%esp
   211c7:	8b 44 24 38          	mov    0x38(%esp),%eax
   211cb:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	temp_int ti;

	addr = ea(info,code);                           // 取指令中的有效地址值。
   211d0:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   211d5:	83 ec 08             	sub    $0x8,%esp
   211d8:	50                   	push   %eax
   211d9:	ff 74 24 40          	pushl  0x40(%esp)
   211dd:	e8 a7 fb ff ff       	call   20d89 <ea>
   211e2:	83 c4 10             	add    $0x10,%esp
   211e5:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	ti.a = get_fs_long((unsigned long *) addr);     // 取用户64位长整数。
   211e9:	83 ec 0c             	sub    $0xc,%esp
   211ec:	ff 74 24 28          	pushl  0x28(%esp)
   211f0:	e8 4a fd ff ff       	call   20f3f <get_fs_long>
   211f5:	83 c4 10             	add    $0x10,%esp
   211f8:	89 44 24 10          	mov    %eax,0x10(%esp)
	ti.b = get_fs_long(1 + (unsigned long *) addr);
   211fc:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21200:	83 c0 04             	add    $0x4,%eax
   21203:	83 ec 0c             	sub    $0xc,%esp
   21206:	50                   	push   %eax
   21207:	e8 33 fd ff ff       	call   20f3f <get_fs_long>
   2120c:	83 c4 10             	add    $0x10,%esp
   2120f:	89 44 24 14          	mov    %eax,0x14(%esp)
	if (ti.sign = (ti.b < 0))                       // 若是负数则设置临时整数符号位。
   21213:	8b 44 24 14          	mov    0x14(%esp),%eax
   21217:	c1 e8 1f             	shr    $0x1f,%eax
   2121a:	0f b6 c0             	movzbl %al,%eax
   2121d:	66 89 44 24 18       	mov    %ax,0x18(%esp)
   21222:	0f b7 44 24 18       	movzwl 0x18(%esp),%eax
   21227:	66 85 c0             	test   %ax,%ax
   2122a:	74 1a                	je     21246 <get_longlong_int+0x82>
		__asm__("notl %0 ; notl %1\n\t"         // 同时取反加1和进位调整。
			"addl $1,%0 ; adcl $0,%1"
			:"=r" (ti.a),"=r" (ti.b)
			:"0" (ti.a),"1" (ti.b));
   2122c:	8b 54 24 10          	mov    0x10(%esp),%edx
   21230:	8b 44 24 14          	mov    0x14(%esp),%eax

	addr = ea(info,code);                           // 取指令中的有效地址值。
	ti.a = get_fs_long((unsigned long *) addr);     // 取用户64位长整数。
	ti.b = get_fs_long(1 + (unsigned long *) addr);
	if (ti.sign = (ti.b < 0))                       // 若是负数则设置临时整数符号位。
		__asm__("notl %0 ; notl %1\n\t"         // 同时取反加1和进位调整。
   21234:	f7 d2                	not    %edx
   21236:	f7 d0                	not    %eax
   21238:	83 c2 01             	add    $0x1,%edx
   2123b:	83 d0 00             	adc    $0x0,%eax
   2123e:	89 54 24 10          	mov    %edx,0x10(%esp)
   21242:	89 44 24 14          	mov    %eax,0x14(%esp)
			"addl $1,%0 ; adcl $0,%1"
			:"=r" (ti.a),"=r" (ti.b)
			:"0" (ti.a),"1" (ti.b));
	int_to_real(&ti,tmp);                           // 把临时整数转换成临时实数格式。
   21246:	83 ec 08             	sub    $0x8,%esp
   21249:	ff 74 24 38          	pushl  0x38(%esp)
   2124d:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   21251:	50                   	push   %eax
   21252:	e8 3c 15 00 00       	call   22793 <int_to_real>
   21257:	83 c4 10             	add    $0x10,%esp
}
   2125a:	90                   	nop
   2125b:	83 c4 2c             	add    $0x2c,%esp
   2125e:	c3                   	ret    

0002125f <get_BCD>:
// 取用户内存中的BCD码数值并转换成临时实数格式。
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得BCD码所在有效地址（math/ea.c），
// 然后从用户数据区读取10字节相应BCD码值（其中1字节用于符号），同时转换成临时整数形式。最后把临时整数值转换成临时实数。
// 参数：tmp - 转换成临时实数后的指针；info - info结构指针；code - 指令代码。
void get_BCD(temp_real * tmp, struct info * info, unsigned short code)
{
   2125f:	53                   	push   %ebx
   21260:	83 ec 38             	sub    $0x38,%esp
   21263:	8b 44 24 48          	mov    0x48(%esp),%eax
   21267:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	unsigned char c;

// 取得BCD码数值所在内存有效地址。然后从最后1个BCD码字节（最高有效位）开始处理。
// 先取得BCD码数值的符号位，并设置临时整数的符号位。然后把9字节的BCD码值转换成临时整数格式，最后把临时整数值转换成临时
// 实数。
	addr = ea(info,code);                   // 取有效地址。
   2126c:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   21271:	83 ec 08             	sub    $0x8,%esp
   21274:	50                   	push   %eax
   21275:	ff 74 24 50          	pushl  0x50(%esp)
   21279:	e8 0b fb ff ff       	call   20d89 <ea>
   2127e:	83 c4 10             	add    $0x10,%esp
   21281:	89 44 24 28          	mov    %eax,0x28(%esp)
	addr += 9;                              // 指向最后一个（第10个）字节。
   21285:	83 44 24 28 09       	addl   $0x9,0x28(%esp)
	i.sign = 0x80 & get_fs_byte(addr--);    // 取其中符号位。
   2128a:	8b 44 24 28          	mov    0x28(%esp),%eax
   2128e:	8d 50 ff             	lea    -0x1(%eax),%edx
   21291:	89 54 24 28          	mov    %edx,0x28(%esp)
   21295:	83 ec 0c             	sub    $0xc,%esp
   21298:	50                   	push   %eax
   21299:	e8 7a fc ff ff       	call   20f18 <get_fs_byte>
   2129e:	83 c4 10             	add    $0x10,%esp
   212a1:	0f b6 c0             	movzbl %al,%eax
   212a4:	66 25 80 00          	and    $0x80,%ax
   212a8:	66 89 44 24 20       	mov    %ax,0x20(%esp)
	i.a = i.b = 0;
   212ad:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   212b4:	00 
   212b5:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   212b9:	89 44 24 18          	mov    %eax,0x18(%esp)
	for (k = 0; k < 9; k++) {               // 转换成临时整数格式。
   212bd:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%esp)
   212c4:	00 
   212c5:	e9 a5 00 00 00       	jmp    2136f <get_BCD+0x110>
		c = get_fs_byte(addr--);
   212ca:	8b 44 24 28          	mov    0x28(%esp),%eax
   212ce:	8d 50 ff             	lea    -0x1(%eax),%edx
   212d1:	89 54 24 28          	mov    %edx,0x28(%esp)
   212d5:	83 ec 0c             	sub    $0xc,%esp
   212d8:	50                   	push   %eax
   212d9:	e8 3a fc ff ff       	call   20f18 <get_fs_byte>
   212de:	83 c4 10             	add    $0x10,%esp
   212e1:	88 44 24 27          	mov    %al,0x27(%esp)
		MUL10(i.a, i.b);
   212e5:	8b 44 24 18          	mov    0x18(%esp),%eax
   212e9:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   212ed:	01 c0                	add    %eax,%eax
   212ef:	11 d2                	adc    %edx,%edx
   212f1:	89 c1                	mov    %eax,%ecx
   212f3:	89 d3                	mov    %edx,%ebx
   212f5:	01 c0                	add    %eax,%eax
   212f7:	11 d2                	adc    %edx,%edx
   212f9:	01 c0                	add    %eax,%eax
   212fb:	11 d2                	adc    %edx,%edx
   212fd:	01 c8                	add    %ecx,%eax
   212ff:	11 da                	adc    %ebx,%edx
   21301:	89 44 24 18          	mov    %eax,0x18(%esp)
   21305:	89 54 24 1c          	mov    %edx,0x1c(%esp)
		ADD64((c>>4), i.a, i.b);
   21309:	8b 54 24 18          	mov    0x18(%esp),%edx
   2130d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21311:	0f b6 4c 24 27       	movzbl 0x27(%esp),%ecx
   21316:	c0 e9 04             	shr    $0x4,%cl
   21319:	0f b6 c9             	movzbl %cl,%ecx
   2131c:	01 ca                	add    %ecx,%edx
   2131e:	83 d0 00             	adc    $0x0,%eax
   21321:	89 54 24 18          	mov    %edx,0x18(%esp)
   21325:	89 44 24 1c          	mov    %eax,0x1c(%esp)
		MUL10(i.a, i.b);
   21329:	8b 44 24 18          	mov    0x18(%esp),%eax
   2132d:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   21331:	01 c0                	add    %eax,%eax
   21333:	11 d2                	adc    %edx,%edx
   21335:	89 c1                	mov    %eax,%ecx
   21337:	89 d3                	mov    %edx,%ebx
   21339:	01 c0                	add    %eax,%eax
   2133b:	11 d2                	adc    %edx,%edx
   2133d:	01 c0                	add    %eax,%eax
   2133f:	11 d2                	adc    %edx,%edx
   21341:	01 c8                	add    %ecx,%eax
   21343:	11 da                	adc    %ebx,%edx
   21345:	89 44 24 18          	mov    %eax,0x18(%esp)
   21349:	89 54 24 1c          	mov    %edx,0x1c(%esp)
		ADD64((c&0xf), i.a, i.b);
   2134d:	8b 54 24 18          	mov    0x18(%esp),%edx
   21351:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21355:	0f b6 4c 24 27       	movzbl 0x27(%esp),%ecx
   2135a:	83 e1 0f             	and    $0xf,%ecx
   2135d:	01 ca                	add    %ecx,%edx
   2135f:	83 d0 00             	adc    $0x0,%eax
   21362:	89 54 24 18          	mov    %edx,0x18(%esp)
   21366:	89 44 24 1c          	mov    %eax,0x1c(%esp)
// 实数。
	addr = ea(info,code);                   // 取有效地址。
	addr += 9;                              // 指向最后一个（第10个）字节。
	i.sign = 0x80 & get_fs_byte(addr--);    // 取其中符号位。
	i.a = i.b = 0;
	for (k = 0; k < 9; k++) {               // 转换成临时整数格式。
   2136a:	83 44 24 2c 01       	addl   $0x1,0x2c(%esp)
   2136f:	83 7c 24 2c 08       	cmpl   $0x8,0x2c(%esp)
   21374:	0f 8e 50 ff ff ff    	jle    212ca <get_BCD+0x6b>
		MUL10(i.a, i.b);
		ADD64((c>>4), i.a, i.b);
		MUL10(i.a, i.b);
		ADD64((c&0xf), i.a, i.b);
	}
	int_to_real(&i,tmp);                    // 转换成临时实数格式。
   2137a:	83 ec 08             	sub    $0x8,%esp
   2137d:	ff 74 24 48          	pushl  0x48(%esp)
   21381:	8d 44 24 24          	lea    0x24(%esp),%eax
   21385:	50                   	push   %eax
   21386:	e8 08 14 00 00       	call   22793 <int_to_real>
   2138b:	83 c4 10             	add    $0x10,%esp
}
   2138e:	90                   	nop
   2138f:	83 c4 38             	add    $0x38,%esp
   21392:	5b                   	pop    %ebx
   21393:	c3                   	ret    

00021394 <put_short_real>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得保存结果的有效地址addr，然后把临时实
// 数格式的结果转换成短实数格式并存储到有效地址addr处。
// 参数：tmp - 临时实数格式结果值；info - info结构指针；code - 指令代码。
void put_short_real(const temp_real * tmp,
	struct info * info, unsigned short code)
{
   21394:	83 ec 2c             	sub    $0x2c,%esp
   21397:	8b 44 24 38          	mov    0x38(%esp),%eax
   2139b:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	short_real sr;

	addr = ea(info,code);                           // 取有效地址。
   213a0:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   213a5:	83 ec 08             	sub    $0x8,%esp
   213a8:	50                   	push   %eax
   213a9:	ff 74 24 40          	pushl  0x40(%esp)
   213ad:	e8 d7 f9 ff ff       	call   20d89 <ea>
   213b2:	83 c4 10             	add    $0x10,%esp
   213b5:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	verify_area(addr,4);                            // 为保存结果验证或分配内存。
   213b9:	83 ec 08             	sub    $0x8,%esp
   213bc:	6a 04                	push   $0x4
   213be:	ff 74 24 28          	pushl  0x28(%esp)
   213c2:	e8 dc 6f fe ff       	call   83a3 <verify_area>
   213c7:	83 c4 10             	add    $0x10,%esp
	temp_to_short(tmp,&sr);                         // 结果转换成短实数格式。
   213ca:	83 ec 08             	sub    $0x8,%esp
   213cd:	8d 44 24 20          	lea    0x20(%esp),%eax
   213d1:	50                   	push   %eax
   213d2:	ff 74 24 3c          	pushl  0x3c(%esp)
   213d6:	e8 c8 0e 00 00       	call   222a3 <temp_to_short>
   213db:	83 c4 10             	add    $0x10,%esp
	put_fs_long(sr,(unsigned long *) addr);         // 存储数据到用户内存区。
   213de:	8b 44 24 18          	mov    0x18(%esp),%eax
   213e2:	83 ec 08             	sub    $0x8,%esp
   213e5:	ff 74 24 24          	pushl  0x24(%esp)
   213e9:	50                   	push   %eax
   213ea:	e8 9c fb ff ff       	call   20f8b <put_fs_long>
   213ef:	83 c4 10             	add    $0x10,%esp
}
   213f2:	90                   	nop
   213f3:	83 c4 2c             	add    $0x2c,%esp
   213f6:	c3                   	ret    

000213f7 <put_long_real>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得保存结果的有效地址addr，然后把临时
// 实数格式的结果转换成长实数格式，并存储到有效地址addr处。
// 参数：tmp - 临时实数格式结果值；info - info结构指针；code - 指令代码。
void put_long_real(const temp_real * tmp,
	struct info * info, unsigned short code)
{
   213f7:	83 ec 2c             	sub    $0x2c,%esp
   213fa:	8b 44 24 38          	mov    0x38(%esp),%eax
   213fe:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	long_real lr;

	addr = ea(info,code);                           // 取有效地址。
   21403:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   21408:	83 ec 08             	sub    $0x8,%esp
   2140b:	50                   	push   %eax
   2140c:	ff 74 24 40          	pushl  0x40(%esp)
   21410:	e8 74 f9 ff ff       	call   20d89 <ea>
   21415:	83 c4 10             	add    $0x10,%esp
   21418:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	verify_area(addr,8);                            // 为保存结果验证或分配内存。
   2141c:	83 ec 08             	sub    $0x8,%esp
   2141f:	6a 08                	push   $0x8
   21421:	ff 74 24 28          	pushl  0x28(%esp)
   21425:	e8 79 6f fe ff       	call   83a3 <verify_area>
   2142a:	83 c4 10             	add    $0x10,%esp
	temp_to_long(tmp,&lr);                          // 结果转换成长实数格式。
   2142d:	83 ec 08             	sub    $0x8,%esp
   21430:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   21434:	50                   	push   %eax
   21435:	ff 74 24 3c          	pushl  0x3c(%esp)
   21439:	e8 9c 0f 00 00       	call   223da <temp_to_long>
   2143e:	83 c4 10             	add    $0x10,%esp
	put_fs_long(lr.a, (unsigned long *) addr);      // 存储数据到用户内存区。
   21441:	8b 44 24 14          	mov    0x14(%esp),%eax
   21445:	83 ec 08             	sub    $0x8,%esp
   21448:	ff 74 24 24          	pushl  0x24(%esp)
   2144c:	50                   	push   %eax
   2144d:	e8 39 fb ff ff       	call   20f8b <put_fs_long>
   21452:	83 c4 10             	add    $0x10,%esp
	put_fs_long(lr.b, 1 + (unsigned long *) addr);
   21455:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21459:	83 c0 04             	add    $0x4,%eax
   2145c:	8b 54 24 18          	mov    0x18(%esp),%edx
   21460:	83 ec 08             	sub    $0x8,%esp
   21463:	50                   	push   %eax
   21464:	52                   	push   %edx
   21465:	e8 21 fb ff ff       	call   20f8b <put_fs_long>
   2146a:	83 c4 10             	add    $0x10,%esp
}
   2146d:	90                   	nop
   2146e:	83 c4 2c             	add    $0x2c,%esp
   21471:	c3                   	ret    

00021472 <put_temp_real>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得保存结果的有效地址addr，然后把临
// 时实数存储到有效地址addr处。
// 参数：tmp - 临时实数格式结果值；info - info结构指针；code - 指令代码。
void put_temp_real(const temp_real * tmp,
	struct info * info, unsigned short code)
{
   21472:	83 ec 2c             	sub    $0x2c,%esp
   21475:	8b 44 24 38          	mov    0x38(%esp),%eax
   21479:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;

	addr = ea(info,code);                           // 取有效地址。
   2147e:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   21483:	83 ec 08             	sub    $0x8,%esp
   21486:	50                   	push   %eax
   21487:	ff 74 24 40          	pushl  0x40(%esp)
   2148b:	e8 f9 f8 ff ff       	call   20d89 <ea>
   21490:	83 c4 10             	add    $0x10,%esp
   21493:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	verify_area(addr,10);                           // 为保存结果验证或分配内存。
   21497:	83 ec 08             	sub    $0x8,%esp
   2149a:	6a 0a                	push   $0xa
   2149c:	ff 74 24 28          	pushl  0x28(%esp)
   214a0:	e8 fe 6e fe ff       	call   83a3 <verify_area>
   214a5:	83 c4 10             	add    $0x10,%esp
	put_fs_long(tmp->a, (unsigned long *) addr);    // 存储数据到用户内存区。
   214a8:	8b 44 24 30          	mov    0x30(%esp),%eax
   214ac:	8b 00                	mov    (%eax),%eax
   214ae:	83 ec 08             	sub    $0x8,%esp
   214b1:	ff 74 24 24          	pushl  0x24(%esp)
   214b5:	50                   	push   %eax
   214b6:	e8 d0 fa ff ff       	call   20f8b <put_fs_long>
   214bb:	83 c4 10             	add    $0x10,%esp
	put_fs_long(tmp->b, 1 + (unsigned long *) addr);
   214be:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   214c2:	8d 50 04             	lea    0x4(%eax),%edx
   214c5:	8b 44 24 30          	mov    0x30(%esp),%eax
   214c9:	8b 40 04             	mov    0x4(%eax),%eax
   214cc:	83 ec 08             	sub    $0x8,%esp
   214cf:	52                   	push   %edx
   214d0:	50                   	push   %eax
   214d1:	e8 b5 fa ff ff       	call   20f8b <put_fs_long>
   214d6:	83 c4 10             	add    $0x10,%esp
	put_fs_word(tmp->exponent, 4 + (short *) addr);
   214d9:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   214dd:	8d 50 08             	lea    0x8(%eax),%edx
   214e0:	8b 44 24 30          	mov    0x30(%esp),%eax
   214e4:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   214e8:	98                   	cwtl   
   214e9:	83 ec 08             	sub    $0x8,%esp
   214ec:	52                   	push   %edx
   214ed:	50                   	push   %eax
   214ee:	e8 7c fa ff ff       	call   20f6f <put_fs_word>
   214f3:	83 c4 10             	add    $0x10,%esp
}
   214f6:	90                   	nop
   214f7:	83 c4 2c             	add    $0x2c,%esp
   214fa:	c3                   	ret    

000214fb <put_short_int>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得保存结果的有效地址addr，然后把临
// 时实数格式的结果转换成临时整数格式。如果是负数则设置整数符号位。最后把整数保存到用户内存中。
// 参数：tmp - 临时实数格式结果值；info - info结构指针；code - 指令代码。
void put_short_int(const temp_real * tmp,
	struct info * info, unsigned short code)
{
   214fb:	83 ec 2c             	sub    $0x2c,%esp
   214fe:	8b 44 24 38          	mov    0x38(%esp),%eax
   21502:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	temp_int ti;

	addr = ea(info,code);           // 取有效地址。
   21507:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   2150c:	83 ec 08             	sub    $0x8,%esp
   2150f:	50                   	push   %eax
   21510:	ff 74 24 40          	pushl  0x40(%esp)
   21514:	e8 70 f8 ff ff       	call   20d89 <ea>
   21519:	83 c4 10             	add    $0x10,%esp
   2151c:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	real_to_int(tmp,&ti);           // 转换成临时整数格式。
   21520:	83 ec 08             	sub    $0x8,%esp
   21523:	8d 44 24 18          	lea    0x18(%esp),%eax
   21527:	50                   	push   %eax
   21528:	ff 74 24 3c          	pushl  0x3c(%esp)
   2152c:	e8 56 10 00 00       	call   22587 <real_to_int>
   21531:	83 c4 10             	add    $0x10,%esp
	verify_area(addr,2);            // 验证或分配存储内存。
   21534:	83 ec 08             	sub    $0x8,%esp
   21537:	6a 02                	push   $0x2
   21539:	ff 74 24 28          	pushl  0x28(%esp)
   2153d:	e8 61 6e fe ff       	call   83a3 <verify_area>
   21542:	83 c4 10             	add    $0x10,%esp
	if (ti.sign)                    // 若有符号位，则取负数值。
   21545:	0f b7 44 24 18       	movzwl 0x18(%esp),%eax
   2154a:	66 85 c0             	test   %ax,%ax
   2154d:	74 0a                	je     21559 <put_short_int+0x5e>
		ti.a = -ti.a;
   2154f:	8b 44 24 10          	mov    0x10(%esp),%eax
   21553:	f7 d8                	neg    %eax
   21555:	89 44 24 10          	mov    %eax,0x10(%esp)
	put_fs_word(ti.a,(short *) addr);       // 存储到用户数据区中。
   21559:	8b 44 24 10          	mov    0x10(%esp),%eax
   2155d:	98                   	cwtl   
   2155e:	83 ec 08             	sub    $0x8,%esp
   21561:	ff 74 24 24          	pushl  0x24(%esp)
   21565:	50                   	push   %eax
   21566:	e8 04 fa ff ff       	call   20f6f <put_fs_word>
   2156b:	83 c4 10             	add    $0x10,%esp
}
   2156e:	90                   	nop
   2156f:	83 c4 2c             	add    $0x2c,%esp
   21572:	c3                   	ret    

00021573 <put_long_int>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得保存结果的有效地址addr，然后把临时
// 实数格式的结果转换成临时整数格式。如果是负数则设置整数符号位。最后把整数保存到用户内存中。
// 参数：tmp - 临时实数格式结果值；info - info结构指针；code - 指令代码。
void put_long_int(const temp_real * tmp,
	struct info * info, unsigned short code)
{
   21573:	83 ec 2c             	sub    $0x2c,%esp
   21576:	8b 44 24 38          	mov    0x38(%esp),%eax
   2157a:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	temp_int ti;

	addr = ea(info,code);                           // 取有效地址值。
   2157f:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   21584:	83 ec 08             	sub    $0x8,%esp
   21587:	50                   	push   %eax
   21588:	ff 74 24 40          	pushl  0x40(%esp)
   2158c:	e8 f8 f7 ff ff       	call   20d89 <ea>
   21591:	83 c4 10             	add    $0x10,%esp
   21594:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	real_to_int(tmp,&ti);                           // 转换成临时整数格式。
   21598:	83 ec 08             	sub    $0x8,%esp
   2159b:	8d 44 24 18          	lea    0x18(%esp),%eax
   2159f:	50                   	push   %eax
   215a0:	ff 74 24 3c          	pushl  0x3c(%esp)
   215a4:	e8 de 0f 00 00       	call   22587 <real_to_int>
   215a9:	83 c4 10             	add    $0x10,%esp
	verify_area(addr,4);                            // 验证或分配存储内存。
   215ac:	83 ec 08             	sub    $0x8,%esp
   215af:	6a 04                	push   $0x4
   215b1:	ff 74 24 28          	pushl  0x28(%esp)
   215b5:	e8 e9 6d fe ff       	call   83a3 <verify_area>
   215ba:	83 c4 10             	add    $0x10,%esp
	if (ti.sign)                                    // 若有符号位，则取负数值。
   215bd:	0f b7 44 24 18       	movzwl 0x18(%esp),%eax
   215c2:	66 85 c0             	test   %ax,%ax
   215c5:	74 0a                	je     215d1 <put_long_int+0x5e>
		ti.a = -ti.a;
   215c7:	8b 44 24 10          	mov    0x10(%esp),%eax
   215cb:	f7 d8                	neg    %eax
   215cd:	89 44 24 10          	mov    %eax,0x10(%esp)
	put_fs_long(ti.a,(unsigned long *) addr);       // 存储到用户数据区中。
   215d1:	8b 44 24 10          	mov    0x10(%esp),%eax
   215d5:	83 ec 08             	sub    $0x8,%esp
   215d8:	ff 74 24 24          	pushl  0x24(%esp)
   215dc:	50                   	push   %eax
   215dd:	e8 a9 f9 ff ff       	call   20f8b <put_fs_long>
   215e2:	83 c4 10             	add    $0x10,%esp
}
   215e5:	90                   	nop
   215e6:	83 c4 2c             	add    $0x2c,%esp
   215e9:	c3                   	ret    

000215ea <put_longlong_int>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得保存结果的有效地址addr，然后把临时
// 实数格式的结果转换成临时整数格式。如果是负数则设置整数符号位。最后把整数保存到用户内存中。
// 参数：tmp - 临时实数格式结果值；info - info结构指针；code - 指令代码。
void put_longlong_int(const temp_real * tmp,
	struct info * info, unsigned short code)
{
   215ea:	83 ec 2c             	sub    $0x2c,%esp
   215ed:	8b 44 24 38          	mov    0x38(%esp),%eax
   215f1:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	temp_int ti;

	addr = ea(info,code);           // 取有效地址。
   215f6:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   215fb:	83 ec 08             	sub    $0x8,%esp
   215fe:	50                   	push   %eax
   215ff:	ff 74 24 40          	pushl  0x40(%esp)
   21603:	e8 81 f7 ff ff       	call   20d89 <ea>
   21608:	83 c4 10             	add    $0x10,%esp
   2160b:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	real_to_int(tmp,&ti);           // 转换成临时整数格式。
   2160f:	83 ec 08             	sub    $0x8,%esp
   21612:	8d 44 24 18          	lea    0x18(%esp),%eax
   21616:	50                   	push   %eax
   21617:	ff 74 24 3c          	pushl  0x3c(%esp)
   2161b:	e8 67 0f 00 00       	call   22587 <real_to_int>
   21620:	83 c4 10             	add    $0x10,%esp
	verify_area(addr,8);            // 验证存储区域。
   21623:	83 ec 08             	sub    $0x8,%esp
   21626:	6a 08                	push   $0x8
   21628:	ff 74 24 28          	pushl  0x28(%esp)
   2162c:	e8 72 6d fe ff       	call   83a3 <verify_area>
   21631:	83 c4 10             	add    $0x10,%esp
	if (ti.sign)                    // 若是负数，则取反加1。
   21634:	0f b7 44 24 18       	movzwl 0x18(%esp),%eax
   21639:	66 85 c0             	test   %ax,%ax
   2163c:	74 1a                	je     21658 <put_longlong_int+0x6e>
		__asm__("notl %0 ; notl %1\n\t"
			"addl $1,%0 ; adcl $0,%1"
			:"=r" (ti.a),"=r" (ti.b)
			:"0" (ti.a),"1" (ti.b));
   2163e:	8b 54 24 10          	mov    0x10(%esp),%edx
   21642:	8b 44 24 14          	mov    0x14(%esp),%eax

	addr = ea(info,code);           // 取有效地址。
	real_to_int(tmp,&ti);           // 转换成临时整数格式。
	verify_area(addr,8);            // 验证存储区域。
	if (ti.sign)                    // 若是负数，则取反加1。
		__asm__("notl %0 ; notl %1\n\t"
   21646:	f7 d2                	not    %edx
   21648:	f7 d0                	not    %eax
   2164a:	83 c2 01             	add    $0x1,%edx
   2164d:	83 d0 00             	adc    $0x0,%eax
   21650:	89 54 24 10          	mov    %edx,0x10(%esp)
   21654:	89 44 24 14          	mov    %eax,0x14(%esp)
			"addl $1,%0 ; adcl $0,%1"
			:"=r" (ti.a),"=r" (ti.b)
			:"0" (ti.a),"1" (ti.b));
	put_fs_long(ti.a,(unsigned long *) addr);       // 存储到用户数据区中。
   21658:	8b 44 24 10          	mov    0x10(%esp),%eax
   2165c:	83 ec 08             	sub    $0x8,%esp
   2165f:	ff 74 24 24          	pushl  0x24(%esp)
   21663:	50                   	push   %eax
   21664:	e8 22 f9 ff ff       	call   20f8b <put_fs_long>
   21669:	83 c4 10             	add    $0x10,%esp
	put_fs_long(ti.b,1 + (unsigned long *) addr);
   2166c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21670:	83 c0 04             	add    $0x4,%eax
   21673:	8b 54 24 14          	mov    0x14(%esp),%edx
   21677:	83 ec 08             	sub    $0x8,%esp
   2167a:	50                   	push   %eax
   2167b:	52                   	push   %edx
   2167c:	e8 0a f9 ff ff       	call   20f8b <put_fs_long>
   21681:	83 c4 10             	add    $0x10,%esp
}
   21684:	90                   	nop
   21685:	83 c4 2c             	add    $0x2c,%esp
   21688:	c3                   	ret    

00021689 <put_BCD>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得保存结果的有效地址addr，并验证保
// 存10字节BCD码的用户空间。然后把临时实数格式的结果转换成BCD码格式的数据并保存到用户内存中。如果是负数则设置最高存储字
// 节的最高有效位。
// 参数：tmp - 临时实数格式结果值；info - info结构指针；code - 指令代码。
void put_BCD(const temp_real * tmp,struct info * info, unsigned short code)
{
   21689:	53                   	push   %ebx
   2168a:	83 ec 38             	sub    $0x38,%esp
   2168d:	8b 44 24 48          	mov    0x48(%esp),%eax
   21691:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	int k,rem;
	char * addr;
	temp_int i;
	unsigned char c;

	addr = ea(info,code);                   // 取有效地址。
   21696:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   2169b:	83 ec 08             	sub    $0x8,%esp
   2169e:	50                   	push   %eax
   2169f:	ff 74 24 50          	pushl  0x50(%esp)
   216a3:	e8 e1 f6 ff ff       	call   20d89 <ea>
   216a8:	83 c4 10             	add    $0x10,%esp
   216ab:	89 44 24 28          	mov    %eax,0x28(%esp)
	verify_area(addr,10);                   // 验证存储空间容量。
   216af:	83 ec 08             	sub    $0x8,%esp
   216b2:	6a 0a                	push   $0xa
   216b4:	ff 74 24 34          	pushl  0x34(%esp)
   216b8:	e8 e6 6c fe ff       	call   83a3 <verify_area>
   216bd:	83 c4 10             	add    $0x10,%esp
	real_to_int(tmp,&i);                    // 转换成临时整数格式。
   216c0:	83 ec 08             	sub    $0x8,%esp
   216c3:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   216c7:	50                   	push   %eax
   216c8:	ff 74 24 4c          	pushl  0x4c(%esp)
   216cc:	e8 b6 0e 00 00       	call   22587 <real_to_int>
   216d1:	83 c4 10             	add    $0x10,%esp
	if (i.sign)                             // 若是负数，则设置符号字节最高有效位。
   216d4:	0f b7 44 24 1c       	movzwl 0x1c(%esp),%eax
   216d9:	66 85 c0             	test   %ax,%ax
   216dc:	74 17                	je     216f5 <put_BCD+0x6c>
		put_fs_byte(0x80, addr+9);
   216de:	8b 44 24 28          	mov    0x28(%esp),%eax
   216e2:	83 c0 09             	add    $0x9,%eax
   216e5:	83 ec 08             	sub    $0x8,%esp
   216e8:	50                   	push   %eax
   216e9:	6a 80                	push   $0xffffff80
   216eb:	e8 65 f8 ff ff       	call   20f55 <put_fs_byte>
   216f0:	83 c4 10             	add    $0x10,%esp
   216f3:	eb 15                	jmp    2170a <put_BCD+0x81>
	else                                    // 否则符号字节设置为0。
		put_fs_byte(0, addr+9);
   216f5:	8b 44 24 28          	mov    0x28(%esp),%eax
   216f9:	83 c0 09             	add    $0x9,%eax
   216fc:	83 ec 08             	sub    $0x8,%esp
   216ff:	50                   	push   %eax
   21700:	6a 00                	push   $0x0
   21702:	e8 4e f8 ff ff       	call   20f55 <put_fs_byte>
   21707:	83 c4 10             	add    $0x10,%esp
	for (k = 0; k < 9; k++) {               // 临时整数转换成BCD码并保存。
   2170a:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%esp)
   21711:	00 
   21712:	eb 7e                	jmp    21792 <put_BCD+0x109>
		DIV10(i.a,i.b,rem);
   21714:	8b 44 24 18          	mov    0x18(%esp),%eax
   21718:	8b 5c 24 14          	mov    0x14(%esp),%ebx
   2171c:	ba 00 00 00 00       	mov    $0x0,%edx
   21721:	b9 0a 00 00 00       	mov    $0xa,%ecx
   21726:	f7 f1                	div    %ecx
   21728:	93                   	xchg   %eax,%ebx
   21729:	f7 f1                	div    %ecx
   2172b:	89 54 24 24          	mov    %edx,0x24(%esp)
   2172f:	89 44 24 14          	mov    %eax,0x14(%esp)
   21733:	89 5c 24 18          	mov    %ebx,0x18(%esp)
		c = rem;
   21737:	8b 44 24 24          	mov    0x24(%esp),%eax
   2173b:	88 44 24 23          	mov    %al,0x23(%esp)
		DIV10(i.a,i.b,rem);
   2173f:	8b 44 24 18          	mov    0x18(%esp),%eax
   21743:	8b 5c 24 14          	mov    0x14(%esp),%ebx
   21747:	ba 00 00 00 00       	mov    $0x0,%edx
   2174c:	b9 0a 00 00 00       	mov    $0xa,%ecx
   21751:	f7 f1                	div    %ecx
   21753:	93                   	xchg   %eax,%ebx
   21754:	f7 f1                	div    %ecx
   21756:	89 54 24 24          	mov    %edx,0x24(%esp)
   2175a:	89 44 24 14          	mov    %eax,0x14(%esp)
   2175e:	89 5c 24 18          	mov    %ebx,0x18(%esp)
		c += rem<<4;
   21762:	8b 44 24 24          	mov    0x24(%esp),%eax
   21766:	c1 e0 04             	shl    $0x4,%eax
   21769:	00 44 24 23          	add    %al,0x23(%esp)
		put_fs_byte(c,addr++);
   2176d:	8b 44 24 28          	mov    0x28(%esp),%eax
   21771:	8d 50 01             	lea    0x1(%eax),%edx
   21774:	89 54 24 28          	mov    %edx,0x28(%esp)
   21778:	0f b6 54 24 23       	movzbl 0x23(%esp),%edx
   2177d:	0f be d2             	movsbl %dl,%edx
   21780:	83 ec 08             	sub    $0x8,%esp
   21783:	50                   	push   %eax
   21784:	52                   	push   %edx
   21785:	e8 cb f7 ff ff       	call   20f55 <put_fs_byte>
   2178a:	83 c4 10             	add    $0x10,%esp
	real_to_int(tmp,&i);                    // 转换成临时整数格式。
	if (i.sign)                             // 若是负数，则设置符号字节最高有效位。
		put_fs_byte(0x80, addr+9);
	else                                    // 否则符号字节设置为0。
		put_fs_byte(0, addr+9);
	for (k = 0; k < 9; k++) {               // 临时整数转换成BCD码并保存。
   2178d:	83 44 24 2c 01       	addl   $0x1,0x2c(%esp)
   21792:	83 7c 24 2c 08       	cmpl   $0x8,0x2c(%esp)
   21797:	0f 8e 77 ff ff ff    	jle    21714 <put_BCD+0x8b>
		c = rem;
		DIV10(i.a,i.b,rem);
		c += rem<<4;
		put_fs_byte(c,addr++);
	}
   2179d:	90                   	nop
   2179e:	83 c4 38             	add    $0x38,%esp
   217a1:	5b                   	pop    %ebx
   217a2:	c3                   	ret    

000217a3 <signify>:
{
// 把64位二进制尾数右移2位（因此指数需要加2）。因为指针字段exponent的最高位是符号位，所以若指数值小于零，说明该数是负数。
// 于是则把尾数用补码表示（取负）。然后把指数取正值。此时尾数中不仅包含移过2位的有效数，而且还包含数值的符号位。
// 30行上：%0 - a->a；%1 - a->b。汇编指令“shrdl $2, %1, %0”执行双精度（64位）右移，即把组合尾数<b,a>右移2位。由于
// 该移动操作不会改变%1（a->b）中的值，因此还需要单独对其右移2位。
	a->exponent += 2;
   217a3:	8b 44 24 04          	mov    0x4(%esp),%eax
   217a7:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   217ab:	83 c0 02             	add    $0x2,%eax
   217ae:	89 c2                	mov    %eax,%edx
   217b0:	8b 44 24 04          	mov    0x4(%esp),%eax
   217b4:	66 89 50 08          	mov    %dx,0x8(%eax)
	__asm__("shrdl $2,%1,%0 ; shrl $2,%1"   // 使用双精度指令把尾数右移2位。
		:"=r" (a->a),"=r" (a->b)
		:"0" (a->a),"1" (a->b));
   217b8:	8b 44 24 04          	mov    0x4(%esp),%eax
   217bc:	8b 10                	mov    (%eax),%edx
   217be:	8b 44 24 04          	mov    0x4(%esp),%eax
   217c2:	8b 40 04             	mov    0x4(%eax),%eax
// 把64位二进制尾数右移2位（因此指数需要加2）。因为指针字段exponent的最高位是符号位，所以若指数值小于零，说明该数是负数。
// 于是则把尾数用补码表示（取负）。然后把指数取正值。此时尾数中不仅包含移过2位的有效数，而且还包含数值的符号位。
// 30行上：%0 - a->a；%1 - a->b。汇编指令“shrdl $2, %1, %0”执行双精度（64位）右移，即把组合尾数<b,a>右移2位。由于
// 该移动操作不会改变%1（a->b）中的值，因此还需要单独对其右移2位。
	a->exponent += 2;
	__asm__("shrdl $2,%1,%0 ; shrl $2,%1"   // 使用双精度指令把尾数右移2位。
   217c5:	0f ac c2 02          	shrd   $0x2,%eax,%edx
   217c9:	c1 e8 02             	shr    $0x2,%eax
   217cc:	8b 4c 24 04          	mov    0x4(%esp),%ecx
   217d0:	89 11                	mov    %edx,(%ecx)
   217d2:	8b 54 24 04          	mov    0x4(%esp),%edx
   217d6:	89 42 04             	mov    %eax,0x4(%edx)
		:"=r" (a->a),"=r" (a->b)
		:"0" (a->a),"1" (a->b));
	if (a->exponent < 0)                    // 是负数，则尾数用补码表示（取负值）。
   217d9:	8b 44 24 04          	mov    0x4(%esp),%eax
   217dd:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   217e1:	66 85 c0             	test   %ax,%ax
   217e4:	79 24                	jns    2180a <signify+0x67>
		NEGINT(a);
   217e6:	8b 44 24 04          	mov    0x4(%esp),%eax
   217ea:	8b 10                	mov    (%eax),%edx
   217ec:	8b 44 24 04          	mov    0x4(%esp),%eax
   217f0:	8b 40 04             	mov    0x4(%eax),%eax
   217f3:	f7 d2                	not    %edx
   217f5:	f7 d0                	not    %eax
   217f7:	83 c2 01             	add    $0x1,%edx
   217fa:	83 d0 00             	adc    $0x0,%eax
   217fd:	8b 4c 24 04          	mov    0x4(%esp),%ecx
   21801:	89 11                	mov    %edx,(%ecx)
   21803:	8b 54 24 04          	mov    0x4(%esp),%edx
   21807:	89 42 04             	mov    %eax,0x4(%edx)
	a->exponent &= 0x7fff;                  // 去掉符号位（若有）。
   2180a:	8b 44 24 04          	mov    0x4(%esp),%eax
   2180e:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21812:	66 25 ff 7f          	and    $0x7fff,%ax
   21816:	89 c2                	mov    %eax,%edx
   21818:	8b 44 24 04          	mov    0x4(%esp),%eax
   2181c:	66 89 50 08          	mov    %dx,0x8(%eax)
}
   21820:	90                   	nop
   21821:	c3                   	ret    

00021822 <unsignify>:
static void unsignify(temp_real * a)
{
// 对于值为0的数不用处理，直接返回。否则，我们先复位临时实数格式的符号位。然后判断尾数的高位long字段a->b是否带有符号位。
// 若有，则在exponent字段添加符号位，同时把尾数用无符号数形式表示（取补）。最后对尾数进行规格化处理，同时指数值作相应递
// 减。即执行左移操作，使得尾数最高有效位不为0（最后a->b值表现为负值）。
	if (!(a->a || a->b)) {                          // 若值为0就返回。
   21822:	8b 44 24 04          	mov    0x4(%esp),%eax
   21826:	8b 00                	mov    (%eax),%eax
   21828:	85 c0                	test   %eax,%eax
   2182a:	75 1a                	jne    21846 <unsignify+0x24>
   2182c:	8b 44 24 04          	mov    0x4(%esp),%eax
   21830:	8b 40 04             	mov    0x4(%eax),%eax
   21833:	85 c0                	test   %eax,%eax
   21835:	75 0f                	jne    21846 <unsignify+0x24>
		a->exponent = 0;
   21837:	8b 44 24 04          	mov    0x4(%esp),%eax
   2183b:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		return;
   21841:	e9 9b 00 00 00       	jmp    218e1 <unsignify+0xbf>
	}
	a->exponent &= 0x7fff;                          // 去掉符号位（若有）。
   21846:	8b 44 24 04          	mov    0x4(%esp),%eax
   2184a:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   2184e:	66 25 ff 7f          	and    $0x7fff,%ax
   21852:	89 c2                	mov    %eax,%edx
   21854:	8b 44 24 04          	mov    0x4(%esp),%eax
   21858:	66 89 50 08          	mov    %dx,0x8(%eax)
	if (a->b < 0) {                                 // 去负数，则尾数取正值。
   2185c:	8b 44 24 04          	mov    0x4(%esp),%eax
   21860:	8b 40 04             	mov    0x4(%eax),%eax
   21863:	85 c0                	test   %eax,%eax
   21865:	79 6f                	jns    218d6 <unsignify+0xb4>
		NEGINT(a);
   21867:	8b 44 24 04          	mov    0x4(%esp),%eax
   2186b:	8b 10                	mov    (%eax),%edx
   2186d:	8b 44 24 04          	mov    0x4(%esp),%eax
   21871:	8b 40 04             	mov    0x4(%eax),%eax
   21874:	f7 d2                	not    %edx
   21876:	f7 d0                	not    %eax
   21878:	83 c2 01             	add    $0x1,%edx
   2187b:	83 d0 00             	adc    $0x0,%eax
   2187e:	8b 4c 24 04          	mov    0x4(%esp),%ecx
   21882:	89 11                	mov    %edx,(%ecx)
   21884:	8b 54 24 04          	mov    0x4(%esp),%edx
   21888:	89 42 04             	mov    %eax,0x4(%edx)
		a->exponent |= 0x8000;                  // 临时实数添加置符号位。
   2188b:	8b 44 24 04          	mov    0x4(%esp),%eax
   2188f:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21893:	66 0d 00 80          	or     $0x8000,%ax
   21897:	89 c2                	mov    %eax,%edx
   21899:	8b 44 24 04          	mov    0x4(%esp),%eax
   2189d:	66 89 50 08          	mov    %dx,0x8(%eax)
	}
	while (a->b >= 0) {                             // 对尾数进行规格化处理。
   218a1:	eb 33                	jmp    218d6 <unsignify+0xb4>
		a->exponent--;
   218a3:	8b 44 24 04          	mov    0x4(%esp),%eax
   218a7:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   218ab:	83 e8 01             	sub    $0x1,%eax
   218ae:	89 c2                	mov    %eax,%edx
   218b0:	8b 44 24 04          	mov    0x4(%esp),%eax
   218b4:	66 89 50 08          	mov    %dx,0x8(%eax)
		__asm__("addl %0,%0 ; adcl %1,%1"
			:"=r" (a->a),"=r" (a->b)
			:"0" (a->a),"1" (a->b));
   218b8:	8b 44 24 04          	mov    0x4(%esp),%eax
   218bc:	8b 10                	mov    (%eax),%edx
   218be:	8b 44 24 04          	mov    0x4(%esp),%eax
   218c2:	8b 40 04             	mov    0x4(%eax),%eax
		NEGINT(a);
		a->exponent |= 0x8000;                  // 临时实数添加置符号位。
	}
	while (a->b >= 0) {                             // 对尾数进行规格化处理。
		a->exponent--;
		__asm__("addl %0,%0 ; adcl %1,%1"
   218c5:	01 d2                	add    %edx,%edx
   218c7:	11 c0                	adc    %eax,%eax
   218c9:	8b 4c 24 04          	mov    0x4(%esp),%ecx
   218cd:	89 11                	mov    %edx,(%ecx)
   218cf:	8b 54 24 04          	mov    0x4(%esp),%edx
   218d3:	89 42 04             	mov    %eax,0x4(%edx)
	a->exponent &= 0x7fff;                          // 去掉符号位（若有）。
	if (a->b < 0) {                                 // 去负数，则尾数取正值。
		NEGINT(a);
		a->exponent |= 0x8000;                  // 临时实数添加置符号位。
	}
	while (a->b >= 0) {                             // 对尾数进行规格化处理。
   218d6:	8b 44 24 04          	mov    0x4(%esp),%eax
   218da:	8b 40 04             	mov    0x4(%eax),%eax
   218dd:	85 c0                	test   %eax,%eax
   218df:	79 c2                	jns    218a3 <unsignify+0x81>
		a->exponent--;
		__asm__("addl %0,%0 ; adcl %1,%1"
			:"=r" (a->a),"=r" (a->b)
			:"0" (a->a),"1" (a->b));
	}
}
   218e1:	c3                   	ret    

000218e2 <fadd>:

// 仿真浮点加法指令运算。
// 临时实数参数src1 + src2 -> result。
void fadd(const temp_real * src1, const temp_real * src2, temp_real * result)
{
   218e2:	53                   	push   %ebx
   218e3:	83 ec 30             	sub    $0x30,%esp
	temp_real a,b;
	int x1,x2,shift;

// 首先取两个数的指数值x1、x2（去掉符号位）。然后让变量a等于基中最大值，shift为指数差值（即相差2的倍数值）。
	x1 = src1->exponent & 0x7fff;
   218e6:	8b 44 24 38          	mov    0x38(%esp),%eax
   218ea:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   218ee:	98                   	cwtl   
   218ef:	25 ff 7f 00 00       	and    $0x7fff,%eax
   218f4:	89 44 24 28          	mov    %eax,0x28(%esp)
	x2 = src2->exponent & 0x7fff;
   218f8:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   218fc:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21900:	98                   	cwtl   
   21901:	25 ff 7f 00 00       	and    $0x7fff,%eax
   21906:	89 44 24 24          	mov    %eax,0x24(%esp)
	if (x1 > x2) {
   2190a:	8b 44 24 28          	mov    0x28(%esp),%eax
   2190e:	3b 44 24 24          	cmp    0x24(%esp),%eax
   21912:	7e 3e                	jle    21952 <fadd+0x70>
		a = *src1;
   21914:	8b 44 24 38          	mov    0x38(%esp),%eax
   21918:	8b 10                	mov    (%eax),%edx
   2191a:	89 54 24 18          	mov    %edx,0x18(%esp)
   2191e:	8b 50 04             	mov    0x4(%eax),%edx
   21921:	89 54 24 1c          	mov    %edx,0x1c(%esp)
   21925:	8b 40 08             	mov    0x8(%eax),%eax
   21928:	89 44 24 20          	mov    %eax,0x20(%esp)
		b = *src2;
   2192c:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   21930:	8b 10                	mov    (%eax),%edx
   21932:	89 54 24 0c          	mov    %edx,0xc(%esp)
   21936:	8b 50 04             	mov    0x4(%eax),%edx
   21939:	89 54 24 10          	mov    %edx,0x10(%esp)
   2193d:	8b 40 08             	mov    0x8(%eax),%eax
   21940:	89 44 24 14          	mov    %eax,0x14(%esp)
		shift = x1-x2;
   21944:	8b 44 24 28          	mov    0x28(%esp),%eax
   21948:	2b 44 24 24          	sub    0x24(%esp),%eax
   2194c:	89 44 24 2c          	mov    %eax,0x2c(%esp)
   21950:	eb 3c                	jmp    2198e <fadd+0xac>
	} else {
		a = *src2;
   21952:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   21956:	8b 10                	mov    (%eax),%edx
   21958:	89 54 24 18          	mov    %edx,0x18(%esp)
   2195c:	8b 50 04             	mov    0x4(%eax),%edx
   2195f:	89 54 24 1c          	mov    %edx,0x1c(%esp)
   21963:	8b 40 08             	mov    0x8(%eax),%eax
   21966:	89 44 24 20          	mov    %eax,0x20(%esp)
		b = *src1;
   2196a:	8b 44 24 38          	mov    0x38(%esp),%eax
   2196e:	8b 10                	mov    (%eax),%edx
   21970:	89 54 24 0c          	mov    %edx,0xc(%esp)
   21974:	8b 50 04             	mov    0x4(%eax),%edx
   21977:	89 54 24 10          	mov    %edx,0x10(%esp)
   2197b:	8b 40 08             	mov    0x8(%eax),%eax
   2197e:	89 44 24 14          	mov    %eax,0x14(%esp)
		shift = x2-x1;
   21982:	8b 44 24 24          	mov    0x24(%esp),%eax
   21986:	2b 44 24 28          	sub    0x28(%esp),%eax
   2198a:	89 44 24 2c          	mov    %eax,0x2c(%esp)
	}
// 若两者相差太大，大于等于2的64次方，则我们可以忽略小的那个数，即b值。于是直接返回a值即可。否则，若相差大于等于2的32次
// 方，那么我们可以忽略小值b中的低32位值。于是我们把b的高long字段值b.b右移32位，即放到b.a中。然后把b的指数值相应地增加
// 32次方。即指数差值减去32。这样调整之后，相加的两个数的尾数基本上落在相同区域中。
	if (shift >= 64) {
   2198e:	83 7c 24 2c 3f       	cmpl   $0x3f,0x2c(%esp)
   21993:	7e 1d                	jle    219b2 <fadd+0xd0>
		*result = a;
   21995:	8b 44 24 40          	mov    0x40(%esp),%eax
   21999:	8b 54 24 18          	mov    0x18(%esp),%edx
   2199d:	89 10                	mov    %edx,(%eax)
   2199f:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   219a3:	89 50 04             	mov    %edx,0x4(%eax)
   219a6:	8b 54 24 20          	mov    0x20(%esp),%edx
   219aa:	89 50 08             	mov    %edx,0x8(%eax)
   219ad:	e9 90 00 00 00       	jmp    21a42 <fadd+0x160>
		return;
	}
	if (shift >= 32) {
   219b2:	83 7c 24 2c 1f       	cmpl   $0x1f,0x2c(%esp)
   219b7:	7e 15                	jle    219ce <fadd+0xec>
		b.a = b.b;
   219b9:	8b 44 24 10          	mov    0x10(%esp),%eax
   219bd:	89 44 24 0c          	mov    %eax,0xc(%esp)
		b.b = 0;
   219c1:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   219c8:	00 
		shift -= 32;
   219c9:	83 6c 24 2c 20       	subl   $0x20,0x2c(%esp)
	}
// 接着再进行细致的调整，以将相加两者调整成相同。调整方法是把小值b的尾数右移shift各位。这样两者的指数相同，处于同一个数量级。
// 我们就要以对尾数进行相加运算了。相加之前我们需要先把它们转换成仿真运算格式。在加法运算后再变换回临时实数格式。
	__asm__("shrdl %4,%1,%0 ; shrl %4,%1"                   // 双精度（64位）右移。
		:"=r" (b.a),"=r" (b.b)
		:"0" (b.a),"1" (b.b),"c" ((char) shift));
   219ce:	8b 54 24 0c          	mov    0xc(%esp),%edx
   219d2:	8b 44 24 10          	mov    0x10(%esp),%eax
   219d6:	8b 4c 24 2c          	mov    0x2c(%esp),%ecx
		b.b = 0;
		shift -= 32;
	}
// 接着再进行细致的调整，以将相加两者调整成相同。调整方法是把小值b的尾数右移shift各位。这样两者的指数相同，处于同一个数量级。
// 我们就要以对尾数进行相加运算了。相加之前我们需要先把它们转换成仿真运算格式。在加法运算后再变换回临时实数格式。
	__asm__("shrdl %4,%1,%0 ; shrl %4,%1"                   // 双精度（64位）右移。
   219da:	0f ad c2             	shrd   %cl,%eax,%edx
   219dd:	d3 e8                	shr    %cl,%eax
   219df:	89 54 24 0c          	mov    %edx,0xc(%esp)
   219e3:	89 44 24 10          	mov    %eax,0x10(%esp)
		:"=r" (b.a),"=r" (b.b)
		:"0" (b.a),"1" (b.b),"c" ((char) shift));
	signify(&a);                                            // 变换格式。
   219e7:	8d 44 24 18          	lea    0x18(%esp),%eax
   219eb:	50                   	push   %eax
   219ec:	e8 b2 fd ff ff       	call   217a3 <signify>
   219f1:	83 c4 04             	add    $0x4,%esp
	signify(&b);
   219f4:	8d 44 24 0c          	lea    0xc(%esp),%eax
   219f8:	50                   	push   %eax
   219f9:	e8 a5 fd ff ff       	call   217a3 <signify>
   219fe:	83 c4 04             	add    $0x4,%esp
	__asm__("addl %4,%0 ; adcl %5,%1"                       // 执行加法运算。
		:"=r" (a.a),"=r" (a.b)
		:"0" (a.a),"1" (a.b),"g" (b.a),"g" (b.b));
   21a01:	8b 54 24 18          	mov    0x18(%esp),%edx
   21a05:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21a09:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   21a0d:	8b 5c 24 10          	mov    0x10(%esp),%ebx
	__asm__("shrdl %4,%1,%0 ; shrl %4,%1"                   // 双精度（64位）右移。
		:"=r" (b.a),"=r" (b.b)
		:"0" (b.a),"1" (b.b),"c" ((char) shift));
	signify(&a);                                            // 变换格式。
	signify(&b);
	__asm__("addl %4,%0 ; adcl %5,%1"                       // 执行加法运算。
   21a11:	01 ca                	add    %ecx,%edx
   21a13:	11 d8                	adc    %ebx,%eax
   21a15:	89 54 24 18          	mov    %edx,0x18(%esp)
   21a19:	89 44 24 1c          	mov    %eax,0x1c(%esp)
		:"=r" (a.a),"=r" (a.b)
		:"0" (a.a),"1" (a.b),"g" (b.a),"g" (b.b));
	unsignify(&a);                                          // 再变换回临时实数格式。
   21a1d:	8d 44 24 18          	lea    0x18(%esp),%eax
   21a21:	50                   	push   %eax
   21a22:	e8 fb fd ff ff       	call   21822 <unsignify>
   21a27:	83 c4 04             	add    $0x4,%esp
	*result = a;
   21a2a:	8b 44 24 40          	mov    0x40(%esp),%eax
   21a2e:	8b 54 24 18          	mov    0x18(%esp),%edx
   21a32:	89 10                	mov    %edx,(%eax)
   21a34:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   21a38:	89 50 04             	mov    %edx,0x4(%eax)
   21a3b:	8b 54 24 20          	mov    0x20(%esp),%edx
   21a3f:	89 50 08             	mov    %edx,0x8(%eax)
}
   21a42:	83 c4 30             	add    $0x30,%esp
   21a45:	5b                   	pop    %ebx
   21a46:	c3                   	ret    

00021a47 <shift>:
{
	__asm__("movl (%0),%%eax ; addl %%eax,(%0)\n\t"
		"movl 4(%0),%%eax ; adcl %%eax,4(%0)\n\t"
		"movl 8(%0),%%eax ; adcl %%eax,8(%0)\n\t"
		"movl 12(%0),%%eax ; adcl %%eax,12(%0)"
		::"r" ((long) c):"ax");
   21a47:	8b 54 24 04          	mov    0x4(%esp),%edx
#include <linux/math_emu.h>

// 把c指针处的16字节值左移1位（乘2）。
static void shift(int * c)
{
	__asm__("movl (%0),%%eax ; addl %%eax,(%0)\n\t"
   21a4b:	8b 02                	mov    (%edx),%eax
   21a4d:	01 02                	add    %eax,(%edx)
   21a4f:	8b 42 04             	mov    0x4(%edx),%eax
   21a52:	11 42 04             	adc    %eax,0x4(%edx)
   21a55:	8b 42 08             	mov    0x8(%edx),%eax
   21a58:	11 42 08             	adc    %eax,0x8(%edx)
   21a5b:	8b 42 0c             	mov    0xc(%edx),%eax
   21a5e:	11 42 0c             	adc    %eax,0xc(%edx)
		"movl 4(%0),%%eax ; adcl %%eax,4(%0)\n\t"
		"movl 8(%0),%%eax ; adcl %%eax,8(%0)\n\t"
		"movl 12(%0),%%eax ; adcl %%eax,12(%0)"
		::"r" ((long) c):"ax");
}
   21a61:	90                   	nop
   21a62:	c3                   	ret    

00021a63 <mul64>:

// 2个临时实数相乘，结果放在c指针处（16字节）。
static void mul64(const temp_real * a, const temp_real * b, int * c)
{
   21a63:	57                   	push   %edi
   21a64:	56                   	push   %esi
   21a65:	53                   	push   %ebx
		"movl 4(%0),%%eax\n\t"          // 取a->b的值到eax。
		"mull (%1)\n\t"                 // 与b->a的值相乘。
		"addl %%eax,4(%2)\n\t"          // 乘积的低位与c[1]相加放入c[1]。
		"adcl %%edx,8(%2)\n\t"          // 乘积的高位与c[2]相加再加进位，然后放入a[2]。
		"adcl $0,12(%2)"                // 把0与c[3]相加再加进位，然后放入c[3]。
		::"b" ((long) a),"c" ((long) b),"D" ((long) c)
   21a66:	8b 5c 24 10          	mov    0x10(%esp),%ebx
   21a6a:	8b 4c 24 14          	mov    0x14(%esp),%ecx
   21a6e:	8b 74 24 18          	mov    0x18(%esp),%esi
}

// 2个临时实数相乘，结果放在c指针处（16字节）。
static void mul64(const temp_real * a, const temp_real * b, int * c)
{
	__asm__("movl (%0),%%eax\n\t"           // 取a->a的值到eax。
   21a72:	89 f7                	mov    %esi,%edi
   21a74:	8b 03                	mov    (%ebx),%eax
   21a76:	f7 21                	mull   (%ecx)
   21a78:	89 07                	mov    %eax,(%edi)
   21a7a:	89 57 04             	mov    %edx,0x4(%edi)
   21a7d:	8b 43 04             	mov    0x4(%ebx),%eax
   21a80:	f7 61 04             	mull   0x4(%ecx)
   21a83:	89 47 08             	mov    %eax,0x8(%edi)
   21a86:	89 57 0c             	mov    %edx,0xc(%edi)
   21a89:	8b 03                	mov    (%ebx),%eax
   21a8b:	f7 61 04             	mull   0x4(%ecx)
   21a8e:	01 47 04             	add    %eax,0x4(%edi)
   21a91:	11 57 08             	adc    %edx,0x8(%edi)
   21a94:	83 57 0c 00          	adcl   $0x0,0xc(%edi)
   21a98:	8b 43 04             	mov    0x4(%ebx),%eax
   21a9b:	f7 21                	mull   (%ecx)
   21a9d:	01 47 04             	add    %eax,0x4(%edi)
   21aa0:	11 57 08             	adc    %edx,0x8(%edi)
   21aa3:	83 57 0c 00          	adcl   $0x0,0xc(%edi)
		"addl %%eax,4(%2)\n\t"          // 乘积的低位与c[1]相加放入c[1]。
		"adcl %%edx,8(%2)\n\t"          // 乘积的高位与c[2]相加再加进位，然后放入a[2]。
		"adcl $0,12(%2)"                // 把0与c[3]相加再加进位，然后放入c[3]。
		::"b" ((long) a),"c" ((long) b),"D" ((long) c)
		:"ax","dx");
}
   21aa7:	90                   	nop
   21aa8:	5b                   	pop    %ebx
   21aa9:	5e                   	pop    %esi
   21aaa:	5f                   	pop    %edi
   21aab:	c3                   	ret    

00021aac <fmul>:

// 仿真浮点指令FMUL。
// 临时实数src1 * src2 -> result处。
void fmul(const temp_real * src1, const temp_real * src2, temp_real * result)
{
   21aac:	83 ec 20             	sub    $0x20,%esp
	int i,sign;
	int tmp[4] = {0,0,0,0};
   21aaf:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   21ab6:	00 
   21ab7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   21abe:	00 
   21abf:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   21ac6:	00 
   21ac7:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
   21ace:	00 

// 首先确定两数相乘的符号。符号值等于两者符号位异或值。然后计算乘后的指数值。相乘时指数值需要相加。但是由于指数使用偏置
// 格式保存，两个数的指数相加时偏置量也被加了两次，因此需要减掉一个偏置量值（临时实数的偏置量是16383）。
	sign = (src1->exponent ^ src2->exponent) & 0x8000;
   21acf:	8b 44 24 24          	mov    0x24(%esp),%eax
   21ad3:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   21ad7:	8b 44 24 28          	mov    0x28(%esp),%eax
   21adb:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21adf:	31 d0                	xor    %edx,%eax
   21ae1:	98                   	cwtl   
   21ae2:	25 00 80 00 00       	and    $0x8000,%eax
   21ae7:	89 44 24 18          	mov    %eax,0x18(%esp)
	i = (src1->exponent & 0x7fff) + (src2->exponent & 0x7fff) - 16383 + 1;
   21aeb:	8b 44 24 24          	mov    0x24(%esp),%eax
   21aef:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21af3:	98                   	cwtl   
   21af4:	25 ff 7f 00 00       	and    $0x7fff,%eax
   21af9:	89 c2                	mov    %eax,%edx
   21afb:	8b 44 24 28          	mov    0x28(%esp),%eax
   21aff:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21b03:	98                   	cwtl   
   21b04:	25 ff 7f 00 00       	and    $0x7fff,%eax
   21b09:	01 d0                	add    %edx,%eax
   21b0b:	2d fe 3f 00 00       	sub    $0x3ffe,%eax
   21b10:	89 44 24 1c          	mov    %eax,0x1c(%esp)
// 如果结果指数变成了负值，表示两数相乘后产生下溢。于是直接返回带符号的零值。如果结果指数大于0x7fff，表示产生上溢，于是
// 设置状态字溢出异常标志位，并返回。
	if (i<0) {
   21b14:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   21b19:	79 2b                	jns    21b46 <fmul+0x9a>
		result->exponent = sign;
   21b1b:	8b 44 24 18          	mov    0x18(%esp),%eax
   21b1f:	89 c2                	mov    %eax,%edx
   21b21:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21b25:	66 89 50 08          	mov    %dx,0x8(%eax)
		result->a = result->b = 0;
   21b29:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21b2d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   21b34:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21b38:	8b 50 04             	mov    0x4(%eax),%edx
   21b3b:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21b3f:	89 10                	mov    %edx,(%eax)
		return;
   21b41:	e9 b7 00 00 00       	jmp    21bfd <fmul+0x151>
	}
	if (i>0x7fff) {
   21b46:	81 7c 24 1c ff 7f 00 	cmpl   $0x7fff,0x1c(%esp)
   21b4d:	00 
   21b4e:	7e 1f                	jle    21b6f <fmul+0xc3>
		set_OE();       // 置位溢出标志位。
   21b50:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   21b55:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   21b5b:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   21b61:	83 ca 08             	or     $0x8,%edx
   21b64:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
		return;
   21b6a:	e9 8e 00 00 00       	jmp    21bfd <fmul+0x151>
	}
// 如果两数尾数相乘后结果不为0，则对结果尾数进行规格化处理。即左移结果尾数值，使得最高有效位为1。同时相应地调整指数值。如果
// 两数相乘后16字节的结尾数为0，则也设置指数值为0。最后把相乘结果保存在临时实数变量result中。
	mul64(src1,src2,tmp);
   21b6f:	8d 44 24 08          	lea    0x8(%esp),%eax
   21b73:	50                   	push   %eax
   21b74:	ff 74 24 2c          	pushl  0x2c(%esp)
   21b78:	ff 74 24 2c          	pushl  0x2c(%esp)
   21b7c:	e8 e2 fe ff ff       	call   21a63 <mul64>
   21b81:	83 c4 0c             	add    $0xc,%esp
	if (tmp[0] || tmp[1] || tmp[2] || tmp[3])
   21b84:	8b 44 24 08          	mov    0x8(%esp),%eax
   21b88:	85 c0                	test   %eax,%eax
   21b8a:	75 2c                	jne    21bb8 <fmul+0x10c>
   21b8c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   21b90:	85 c0                	test   %eax,%eax
   21b92:	75 24                	jne    21bb8 <fmul+0x10c>
   21b94:	8b 44 24 10          	mov    0x10(%esp),%eax
   21b98:	85 c0                	test   %eax,%eax
   21b9a:	75 1c                	jne    21bb8 <fmul+0x10c>
   21b9c:	8b 44 24 14          	mov    0x14(%esp),%eax
   21ba0:	85 c0                	test   %eax,%eax
   21ba2:	74 25                	je     21bc9 <fmul+0x11d>
		while (i && tmp[3] >= 0) {
   21ba4:	eb 12                	jmp    21bb8 <fmul+0x10c>
			i--;
   21ba6:	83 6c 24 1c 01       	subl   $0x1,0x1c(%esp)
			shift(tmp);
   21bab:	8d 44 24 08          	lea    0x8(%esp),%eax
   21baf:	50                   	push   %eax
   21bb0:	e8 92 fe ff ff       	call   21a47 <shift>
   21bb5:	83 c4 04             	add    $0x4,%esp
	}
// 如果两数尾数相乘后结果不为0，则对结果尾数进行规格化处理。即左移结果尾数值，使得最高有效位为1。同时相应地调整指数值。如果
// 两数相乘后16字节的结尾数为0，则也设置指数值为0。最后把相乘结果保存在临时实数变量result中。
	mul64(src1,src2,tmp);
	if (tmp[0] || tmp[1] || tmp[2] || tmp[3])
		while (i && tmp[3] >= 0) {
   21bb8:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   21bbd:	74 14                	je     21bd3 <fmul+0x127>
   21bbf:	8b 44 24 14          	mov    0x14(%esp),%eax
   21bc3:	85 c0                	test   %eax,%eax
   21bc5:	79 df                	jns    21ba6 <fmul+0xfa>
		return;
	}
// 如果两数尾数相乘后结果不为0，则对结果尾数进行规格化处理。即左移结果尾数值，使得最高有效位为1。同时相应地调整指数值。如果
// 两数相乘后16字节的结尾数为0，则也设置指数值为0。最后把相乘结果保存在临时实数变量result中。
	mul64(src1,src2,tmp);
	if (tmp[0] || tmp[1] || tmp[2] || tmp[3])
   21bc7:	eb 0a                	jmp    21bd3 <fmul+0x127>
		while (i && tmp[3] >= 0) {
			i--;
			shift(tmp);
		}
	else
		i = 0;
   21bc9:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   21bd0:	00 
   21bd1:	eb 01                	jmp    21bd4 <fmul+0x128>
		return;
	}
// 如果两数尾数相乘后结果不为0，则对结果尾数进行规格化处理。即左移结果尾数值，使得最高有效位为1。同时相应地调整指数值。如果
// 两数相乘后16字节的结尾数为0，则也设置指数值为0。最后把相乘结果保存在临时实数变量result中。
	mul64(src1,src2,tmp);
	if (tmp[0] || tmp[1] || tmp[2] || tmp[3])
   21bd3:	90                   	nop
			i--;
			shift(tmp);
		}
	else
		i = 0;
	result->exponent = i | sign;
   21bd4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21bd8:	89 c2                	mov    %eax,%edx
   21bda:	8b 44 24 18          	mov    0x18(%esp),%eax
   21bde:	09 c2                	or     %eax,%edx
   21be0:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21be4:	66 89 50 08          	mov    %dx,0x8(%eax)
	result->a = tmp[2];
   21be8:	8b 54 24 10          	mov    0x10(%esp),%edx
   21bec:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21bf0:	89 10                	mov    %edx,(%eax)
	result->b = tmp[3];
   21bf2:	8b 54 24 14          	mov    0x14(%esp),%edx
   21bf6:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21bfa:	89 50 04             	mov    %edx,0x4(%eax)
}
   21bfd:	83 c4 20             	add    $0x20,%esp
   21c00:	c3                   	ret    

00021c01 <shift_left>:
{
	__asm__ __volatile__("movl (%0),%%eax ; addl %%eax,(%0)\n\t"
		"movl 4(%0),%%eax ; adcl %%eax,4(%0)\n\t"
		"movl 8(%0),%%eax ; adcl %%eax,8(%0)\n\t"
		"movl 12(%0),%%eax ; adcl %%eax,12(%0)"
		::"r" ((long) c):"ax");
   21c01:	8b 54 24 04          	mov    0x4(%esp),%edx
#include <linux/math_emu.h>

// 将指针c指向的4字节中内容左移1位。
static void shift_left(int * c)
{
	__asm__ __volatile__("movl (%0),%%eax ; addl %%eax,(%0)\n\t"
   21c05:	8b 02                	mov    (%edx),%eax
   21c07:	01 02                	add    %eax,(%edx)
   21c09:	8b 42 04             	mov    0x4(%edx),%eax
   21c0c:	11 42 04             	adc    %eax,0x4(%edx)
   21c0f:	8b 42 08             	mov    0x8(%edx),%eax
   21c12:	11 42 08             	adc    %eax,0x8(%edx)
   21c15:	8b 42 0c             	mov    0xc(%edx),%eax
   21c18:	11 42 0c             	adc    %eax,0xc(%edx)
		"movl 4(%0),%%eax ; adcl %%eax,4(%0)\n\t"
		"movl 8(%0),%%eax ; adcl %%eax,8(%0)\n\t"
		"movl 12(%0),%%eax ; adcl %%eax,12(%0)"
		::"r" ((long) c):"ax");
}
   21c1b:	90                   	nop
   21c1c:	c3                   	ret    

00021c1d <shift_right>:

// 将指针c指向的4字节中内容右移1位。
static void shift_right(int * c)
{
	__asm__("shrl $1,12(%0) ; rcrl $1,8(%0) ; rcrl $1,4(%0) ; rcrl $1,(%0)"
		::"r" ((long) c));
   21c1d:	8b 44 24 04          	mov    0x4(%esp),%eax
}

// 将指针c指向的4字节中内容右移1位。
static void shift_right(int * c)
{
	__asm__("shrl $1,12(%0) ; rcrl $1,8(%0) ; rcrl $1,4(%0) ; rcrl $1,(%0)"
   21c21:	d1 68 0c             	shrl   0xc(%eax)
   21c24:	d1 58 08             	rcrl   0x8(%eax)
   21c27:	d1 58 04             	rcrl   0x4(%eax)
   21c2a:	d1 18                	rcrl   (%eax)
		::"r" ((long) c));
}
   21c2c:	90                   	nop
   21c2d:	c3                   	ret    

00021c2e <try_sub>:

// 减法运算。
// 16字节减法运算，b-a ->a。最后根据是否有借位（CF=1）设置OK。若无借位（CF=0）则ok = 1。否则ok = 0。
static int try_sub(int * a, int * b)
{
   21c2e:	83 ec 10             	sub    $0x10,%esp

	__asm__ __volatile__("movl (%1),%%eax ; subl %%eax,(%2)\n\t"
		"movl 4(%1),%%eax ; sbbl %%eax,4(%2)\n\t"
		"movl 8(%1),%%eax ; sbbl %%eax,8(%2)\n\t"
		"movl 12(%1),%%eax ; sbbl %%eax,12(%2)\n\t"
		"setae %%al":"=a" (ok):"c" ((long) a),"d" ((long) b));
   21c31:	8b 44 24 14          	mov    0x14(%esp),%eax
   21c35:	8b 54 24 18          	mov    0x18(%esp),%edx
// 16字节减法运算，b-a ->a。最后根据是否有借位（CF=1）设置OK。若无借位（CF=0）则ok = 1。否则ok = 0。
static int try_sub(int * a, int * b)
{
	char ok;

	__asm__ __volatile__("movl (%1),%%eax ; subl %%eax,(%2)\n\t"
   21c39:	89 c1                	mov    %eax,%ecx
   21c3b:	8b 01                	mov    (%ecx),%eax
   21c3d:	29 02                	sub    %eax,(%edx)
   21c3f:	8b 41 04             	mov    0x4(%ecx),%eax
   21c42:	19 42 04             	sbb    %eax,0x4(%edx)
   21c45:	8b 41 08             	mov    0x8(%ecx),%eax
   21c48:	19 42 08             	sbb    %eax,0x8(%edx)
   21c4b:	8b 41 0c             	mov    0xc(%ecx),%eax
   21c4e:	19 42 0c             	sbb    %eax,0xc(%edx)
   21c51:	0f 93 c0             	setae  %al
   21c54:	88 44 24 0f          	mov    %al,0xf(%esp)
		"movl 4(%1),%%eax ; sbbl %%eax,4(%2)\n\t"
		"movl 8(%1),%%eax ; sbbl %%eax,8(%2)\n\t"
		"movl 12(%1),%%eax ; sbbl %%eax,12(%2)\n\t"
		"setae %%al":"=a" (ok):"c" ((long) a),"d" ((long) b));
	return ok;
   21c58:	0f be 44 24 0f       	movsbl 0xf(%esp),%eax
}
   21c5d:	83 c4 10             	add    $0x10,%esp
   21c60:	c3                   	ret    

00021c61 <div64>:

// 16字节除法。
// 参数a/b -> c。利用减法模拟多字节除法。
static void div64(int * a, int * b, int * c)
{
   21c61:	83 ec 20             	sub    $0x20,%esp
	int tmp[4];     // 余数变量。
	int i;
	unsigned int mask = 0;  // 操作位。
   21c64:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   21c6b:	00 

	c += 4;
   21c6c:	83 44 24 2c 10       	addl   $0x10,0x2c(%esp)
// 16字节共64位。
	for (i = 0 ; i<64 ; i++) {
   21c71:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   21c78:	00 
   21c79:	e9 ac 00 00 00       	jmp    21d2a <div64+0xc9>
		if (!(mask >>= 1)) {
   21c7e:	d1 6c 24 18          	shrl   0x18(%esp)
   21c82:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   21c87:	75 0d                	jne    21c96 <div64+0x35>
			c--;
   21c89:	83 6c 24 2c 04       	subl   $0x4,0x2c(%esp)
			mask = 0x80000000;
   21c8e:	c7 44 24 18 00 00 00 	movl   $0x80000000,0x18(%esp)
   21c95:	80 
		}
// 把余数值tmp初始化为a值。
		tmp[0] = a[0]; tmp[1] = a[1];
   21c96:	8b 44 24 24          	mov    0x24(%esp),%eax
   21c9a:	8b 00                	mov    (%eax),%eax
   21c9c:	89 44 24 08          	mov    %eax,0x8(%esp)
   21ca0:	8b 44 24 24          	mov    0x24(%esp),%eax
   21ca4:	8b 40 04             	mov    0x4(%eax),%eax
   21ca7:	89 44 24 0c          	mov    %eax,0xc(%esp)
		tmp[2] = a[2]; tmp[3] = a[3];
   21cab:	8b 44 24 24          	mov    0x24(%esp),%eax
   21caf:	8b 40 08             	mov    0x8(%eax),%eax
   21cb2:	89 44 24 10          	mov    %eax,0x10(%esp)
   21cb6:	8b 44 24 24          	mov    0x24(%esp),%eax
   21cba:	8b 40 0c             	mov    0xc(%eax),%eax
   21cbd:	89 44 24 14          	mov    %eax,0x14(%esp)
		if (try_sub(b,tmp)) {           // 是否有借位。
   21cc1:	8d 44 24 08          	lea    0x8(%esp),%eax
   21cc5:	50                   	push   %eax
   21cc6:	ff 74 24 2c          	pushl  0x2c(%esp)
   21cca:	e8 5f ff ff ff       	call   21c2e <try_sub>
   21ccf:	83 c4 08             	add    $0x8,%esp
   21cd2:	85 c0                	test   %eax,%eax
   21cd4:	74 43                	je     21d19 <div64+0xb8>
			*c |= mask;             // 如果无借位，置当前操作位，把余数存入a，用于下次操作。
   21cd6:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21cda:	8b 00                	mov    (%eax),%eax
   21cdc:	0b 44 24 18          	or     0x18(%esp),%eax
   21ce0:	89 c2                	mov    %eax,%edx
   21ce2:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21ce6:	89 10                	mov    %edx,(%eax)
			a[0] = tmp[0]; a[1] = tmp[1];
   21ce8:	8b 54 24 08          	mov    0x8(%esp),%edx
   21cec:	8b 44 24 24          	mov    0x24(%esp),%eax
   21cf0:	89 10                	mov    %edx,(%eax)
   21cf2:	8b 44 24 24          	mov    0x24(%esp),%eax
   21cf6:	8d 50 04             	lea    0x4(%eax),%edx
   21cf9:	8b 44 24 0c          	mov    0xc(%esp),%eax
   21cfd:	89 02                	mov    %eax,(%edx)
			a[2] = tmp[2]; a[3] = tmp[3];
   21cff:	8b 44 24 24          	mov    0x24(%esp),%eax
   21d03:	8d 50 08             	lea    0x8(%eax),%edx
   21d06:	8b 44 24 10          	mov    0x10(%esp),%eax
   21d0a:	89 02                	mov    %eax,(%edx)
   21d0c:	8b 44 24 24          	mov    0x24(%esp),%eax
   21d10:	8d 50 0c             	lea    0xc(%eax),%edx
   21d13:	8b 44 24 14          	mov    0x14(%esp),%eax
   21d17:	89 02                	mov    %eax,(%edx)
		}
		shift_right(b);         // 右移一位，使b的值与值数处于同一级别。
   21d19:	ff 74 24 28          	pushl  0x28(%esp)
   21d1d:	e8 fb fe ff ff       	call   21c1d <shift_right>
   21d22:	83 c4 04             	add    $0x4,%esp
	int i;
	unsigned int mask = 0;  // 操作位。

	c += 4;
// 16字节共64位。
	for (i = 0 ; i<64 ; i++) {
   21d25:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   21d2a:	83 7c 24 1c 3f       	cmpl   $0x3f,0x1c(%esp)
   21d2f:	0f 8e 49 ff ff ff    	jle    21c7e <div64+0x1d>
			a[0] = tmp[0]; a[1] = tmp[1];
			a[2] = tmp[2]; a[3] = tmp[3];
		}
		shift_right(b);         // 右移一位，使b的值与值数处于同一级别。
	}
}
   21d35:	90                   	nop
   21d36:	83 c4 20             	add    $0x20,%esp
   21d39:	c3                   	ret    

00021d3a <fdiv>:

// 仿真浮点指令FDIV。
// 临时实数src1 / src2 -> result处。
void fdiv(const temp_real * src1, const temp_real * src2, temp_real * result)
{
   21d3a:	83 ec 40             	sub    $0x40,%esp
	int i,sign;
	int a[4],b[4],tmp[4] = {0,0,0,0};
   21d3d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   21d44:	00 
   21d45:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   21d4c:	00 
   21d4d:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   21d54:	00 
   21d55:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
   21d5c:	00 

// 首先确定两个数相除的符号。符号值等于两者符号位异或值。然后判断除数src2值是否为0，如果是，则置被零除异常。
	sign = (src1->exponent ^ src2->exponent) & 0x8000;
   21d5d:	8b 44 24 44          	mov    0x44(%esp),%eax
   21d61:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   21d65:	8b 44 24 48          	mov    0x48(%esp),%eax
   21d69:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21d6d:	31 d0                	xor    %edx,%eax
   21d6f:	98                   	cwtl   
   21d70:	25 00 80 00 00       	and    $0x8000,%eax
   21d75:	89 44 24 38          	mov    %eax,0x38(%esp)
	if (!(src2->a || src2->b)) {
   21d79:	8b 44 24 48          	mov    0x48(%esp),%eax
   21d7d:	8b 00                	mov    (%eax),%eax
   21d7f:	85 c0                	test   %eax,%eax
   21d81:	75 2a                	jne    21dad <fdiv+0x73>
   21d83:	8b 44 24 48          	mov    0x48(%esp),%eax
   21d87:	8b 40 04             	mov    0x4(%eax),%eax
   21d8a:	85 c0                	test   %eax,%eax
   21d8c:	75 1f                	jne    21dad <fdiv+0x73>
		set_ZE();               // 置被零除异常。
   21d8e:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   21d93:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   21d99:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   21d9f:	83 ca 04             	or     $0x4,%edx
   21da2:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
		return;
   21da8:	e9 dc 01 00 00       	jmp    21f89 <fdiv+0x24f>
	}
// 然后计算除后的指数值。相除时指数值需要相减。但是由于指数使用偏置格式保存，两个数的指数相减时偏置量也被减去了，因此需
// 要加上偏置量值（临时实数的偏置量是16383）。
        i = (src1->exponent & 0x7fff) - (src2->exponent & 0x7fff) + 16383;
   21dad:	8b 44 24 44          	mov    0x44(%esp),%eax
   21db1:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21db5:	98                   	cwtl   
   21db6:	25 ff 7f 00 00       	and    $0x7fff,%eax
   21dbb:	89 c2                	mov    %eax,%edx
   21dbd:	8b 44 24 48          	mov    0x48(%esp),%eax
   21dc1:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21dc5:	98                   	cwtl   
   21dc6:	25 ff 7f 00 00       	and    $0x7fff,%eax
   21dcb:	29 c2                	sub    %eax,%edx
   21dcd:	89 d0                	mov    %edx,%eax
   21dcf:	05 ff 3f 00 00       	add    $0x3fff,%eax
   21dd4:	89 44 24 3c          	mov    %eax,0x3c(%esp)
// 如果结果指数变成了负值，表示两数相除后产生下溢。于是直接返回带符号的零值。
	if (i<0) {
   21dd8:	83 7c 24 3c 00       	cmpl   $0x0,0x3c(%esp)
   21ddd:	79 45                	jns    21e24 <fdiv+0xea>
		set_UE();
   21ddf:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   21de4:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   21dea:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   21df0:	83 ca 10             	or     $0x10,%edx
   21df3:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
		result->exponent = sign;        // 设置符号位。
   21df9:	8b 44 24 38          	mov    0x38(%esp),%eax
   21dfd:	89 c2                	mov    %eax,%edx
   21dff:	8b 44 24 4c          	mov    0x4c(%esp),%eax
   21e03:	66 89 50 08          	mov    %dx,0x8(%eax)
		result->a = result->b = 0;      // 设置返回值为0。
   21e07:	8b 44 24 4c          	mov    0x4c(%esp),%eax
   21e0b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   21e12:	8b 44 24 4c          	mov    0x4c(%esp),%eax
   21e16:	8b 50 04             	mov    0x4(%eax),%edx
   21e19:	8b 44 24 4c          	mov    0x4c(%esp),%eax
   21e1d:	89 10                	mov    %edx,(%eax)
		return;
   21e1f:	e9 65 01 00 00       	jmp    21f89 <fdiv+0x24f>
	}
// 把临时实数src1、src2有效数放入整型数组a和b。
	a[0] = a[1] = 0;
   21e24:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%esp)
   21e2b:	00 
   21e2c:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21e30:	89 44 24 28          	mov    %eax,0x28(%esp)
	a[2] = src1->a;
   21e34:	8b 44 24 44          	mov    0x44(%esp),%eax
   21e38:	8b 00                	mov    (%eax),%eax
   21e3a:	89 44 24 30          	mov    %eax,0x30(%esp)
	a[3] = src1->b;
   21e3e:	8b 44 24 44          	mov    0x44(%esp),%eax
   21e42:	8b 40 04             	mov    0x4(%eax),%eax
   21e45:	89 44 24 34          	mov    %eax,0x34(%esp)
	b[0] = b[1] = 0;
   21e49:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   21e50:	00 
   21e51:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21e55:	89 44 24 18          	mov    %eax,0x18(%esp)
	b[2] = src2->a;
   21e59:	8b 44 24 48          	mov    0x48(%esp),%eax
   21e5d:	8b 00                	mov    (%eax),%eax
   21e5f:	89 44 24 20          	mov    %eax,0x20(%esp)
	b[3] = src2->b;
   21e63:	8b 44 24 48          	mov    0x48(%esp),%eax
   21e67:	8b 40 04             	mov    0x4(%eax),%eax
   21e6a:	89 44 24 24          	mov    %eax,0x24(%esp)
// 如果b[3]大于等于0，则进行规格化处理，即对b进行左移调整b[3]为负数。
	while (b[3] >= 0) {
   21e6e:	eb 12                	jmp    21e82 <fdiv+0x148>
		i++;
   21e70:	83 44 24 3c 01       	addl   $0x1,0x3c(%esp)
		shift_left(b);
   21e75:	8d 44 24 18          	lea    0x18(%esp),%eax
   21e79:	50                   	push   %eax
   21e7a:	e8 82 fd ff ff       	call   21c01 <shift_left>
   21e7f:	83 c4 04             	add    $0x4,%esp
	a[3] = src1->b;
	b[0] = b[1] = 0;
	b[2] = src2->a;
	b[3] = src2->b;
// 如果b[3]大于等于0，则进行规格化处理，即对b进行左移调整b[3]为负数。
	while (b[3] >= 0) {
   21e82:	8b 44 24 24          	mov    0x24(%esp),%eax
   21e86:	85 c0                	test   %eax,%eax
   21e88:	79 e6                	jns    21e70 <fdiv+0x136>
		i++;
		shift_left(b);
	}
// 进行64位除法操作。
	div64(a,b,tmp);
   21e8a:	8d 44 24 08          	lea    0x8(%esp),%eax
   21e8e:	50                   	push   %eax
   21e8f:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   21e93:	50                   	push   %eax
   21e94:	8d 44 24 30          	lea    0x30(%esp),%eax
   21e98:	50                   	push   %eax
   21e99:	e8 c3 fd ff ff       	call   21c61 <div64>
   21e9e:	83 c4 0c             	add    $0xc,%esp
// 如果除结果tmp[0]、tmp[1]、tmp[2]和tmp[3]都为0的话，说明结果为0,则设置指数i为0。否则进行规格化处理。
	if (tmp[0] || tmp[1] || tmp[2] || tmp[3]) {
   21ea1:	8b 44 24 08          	mov    0x8(%esp),%eax
   21ea5:	85 c0                	test   %eax,%eax
   21ea7:	75 2c                	jne    21ed5 <fdiv+0x19b>
   21ea9:	8b 44 24 0c          	mov    0xc(%esp),%eax
   21ead:	85 c0                	test   %eax,%eax
   21eaf:	75 24                	jne    21ed5 <fdiv+0x19b>
   21eb1:	8b 44 24 10          	mov    0x10(%esp),%eax
   21eb5:	85 c0                	test   %eax,%eax
   21eb7:	75 1c                	jne    21ed5 <fdiv+0x19b>
   21eb9:	8b 44 24 14          	mov    0x14(%esp),%eax
   21ebd:	85 c0                	test   %eax,%eax
   21ebf:	74 47                	je     21f08 <fdiv+0x1ce>
		while (i && tmp[3] >= 0) {      // 进行规格化处理。
   21ec1:	eb 12                	jmp    21ed5 <fdiv+0x19b>
			i--;
   21ec3:	83 6c 24 3c 01       	subl   $0x1,0x3c(%esp)
			shift_left(tmp);
   21ec8:	8d 44 24 08          	lea    0x8(%esp),%eax
   21ecc:	50                   	push   %eax
   21ecd:	e8 2f fd ff ff       	call   21c01 <shift_left>
   21ed2:	83 c4 04             	add    $0x4,%esp
	}
// 进行64位除法操作。
	div64(a,b,tmp);
// 如果除结果tmp[0]、tmp[1]、tmp[2]和tmp[3]都为0的话，说明结果为0,则设置指数i为0。否则进行规格化处理。
	if (tmp[0] || tmp[1] || tmp[2] || tmp[3]) {
		while (i && tmp[3] >= 0) {      // 进行规格化处理。
   21ed5:	83 7c 24 3c 00       	cmpl   $0x0,0x3c(%esp)
   21eda:	74 08                	je     21ee4 <fdiv+0x1aa>
   21edc:	8b 44 24 14          	mov    0x14(%esp),%eax
   21ee0:	85 c0                	test   %eax,%eax
   21ee2:	79 df                	jns    21ec3 <fdiv+0x189>
			i--;
			shift_left(tmp);
		}
		if (tmp[3] >= 0)                // 如果tmp[3]大于等于0，设置状态字非格式化异常标志位。
   21ee4:	8b 44 24 14          	mov    0x14(%esp),%eax
   21ee8:	85 c0                	test   %eax,%eax
   21eea:	78 24                	js     21f10 <fdiv+0x1d6>
			set_DE();
   21eec:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   21ef1:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   21ef7:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   21efd:	83 ca 02             	or     $0x2,%edx
   21f00:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	if (tmp[0] || tmp[1] || tmp[2] || tmp[3]) {
		while (i && tmp[3] >= 0) {      // 进行规格化处理。
			i--;
			shift_left(tmp);
		}
		if (tmp[3] >= 0)                // 如果tmp[3]大于等于0，设置状态字非格式化异常标志位。
   21f06:	eb 08                	jmp    21f10 <fdiv+0x1d6>
			set_DE();
	} else
		i = 0;          // 设置结果指数为0。
   21f08:	c7 44 24 3c 00 00 00 	movl   $0x0,0x3c(%esp)
   21f0f:	00 
// 如果结果指数大于0x7fff，表示产生上溢，于是设置状态字溢出异常标志位，并返回。
	if (i>0x7fff) {
   21f10:	81 7c 24 3c ff 7f 00 	cmpl   $0x7fff,0x3c(%esp)
   21f17:	00 
   21f18:	7e 1c                	jle    21f36 <fdiv+0x1fc>
		set_OE();
   21f1a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   21f1f:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   21f25:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   21f2b:	83 ca 08             	or     $0x8,%edx
   21f2e:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
		return;
   21f34:	eb 53                	jmp    21f89 <fdiv+0x24f>
	}
// 如果tmp[0]或tmp[1]不为0，则设置状态字精度异常标志位
	if (tmp[0] || tmp[1])
   21f36:	8b 44 24 08          	mov    0x8(%esp),%eax
   21f3a:	85 c0                	test   %eax,%eax
   21f3c:	75 08                	jne    21f46 <fdiv+0x20c>
   21f3e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   21f42:	85 c0                	test   %eax,%eax
   21f44:	74 1a                	je     21f60 <fdiv+0x226>
		set_PE();
   21f46:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   21f4b:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   21f51:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   21f57:	83 ca 20             	or     $0x20,%edx
   21f5a:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	result->exponent = i | sign;            // 设置返回临时实数的符号位和指数值。
   21f60:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   21f64:	89 c2                	mov    %eax,%edx
   21f66:	8b 44 24 38          	mov    0x38(%esp),%eax
   21f6a:	09 c2                	or     %eax,%edx
   21f6c:	8b 44 24 4c          	mov    0x4c(%esp),%eax
   21f70:	66 89 50 08          	mov    %dx,0x8(%eax)
	result->a = tmp[2];                     // 设置返回临时实数的有效值。
   21f74:	8b 54 24 10          	mov    0x10(%esp),%edx
   21f78:	8b 44 24 4c          	mov    0x4c(%esp),%eax
   21f7c:	89 10                	mov    %edx,(%eax)
	result->b = tmp[3];
   21f7e:	8b 54 24 14          	mov    0x14(%esp),%edx
   21f82:	8b 44 24 4c          	mov    0x4c(%esp),%eax
   21f86:	89 50 04             	mov    %edx,0x4(%eax)
}
   21f89:	83 c4 40             	add    $0x40,%esp
   21f8c:	c3                   	ret    

00021f8d <normalize>:
#define clear_Cx() (I387.swd &= ~0x4500)

// 对临时实数a进行规格化处理。即表示成指数、有效数形式。
// 例如：102.345表示成1.02345 X 10^2。0.0001234表示成1.234 X 10^-1。当然，函数中是二进制表示。
static void normalize(temp_real * a)
{
   21f8d:	83 ec 10             	sub    $0x10,%esp
	int i = a->exponent & 0x7fff;           // 取指数值（略去符号位）。
   21f90:	8b 44 24 14          	mov    0x14(%esp),%eax
   21f94:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21f98:	98                   	cwtl   
   21f99:	25 ff 7f 00 00       	and    $0x7fff,%eax
   21f9e:	89 44 24 0c          	mov    %eax,0xc(%esp)
	int sign = a->exponent & 0x8000;        // 取符号位。
   21fa2:	8b 44 24 14          	mov    0x14(%esp),%eax
   21fa6:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21faa:	98                   	cwtl   
   21fab:	25 00 80 00 00       	and    $0x8000,%eax
   21fb0:	89 44 24 08          	mov    %eax,0x8(%esp)

// 如果临时实数a的64位有效数（尾数）为0，那么说明a等于0。于是清a的指数，返回。
	if (!(a->a || a->b)) {
   21fb4:	8b 44 24 14          	mov    0x14(%esp),%eax
   21fb8:	8b 00                	mov    (%eax),%eax
   21fba:	85 c0                	test   %eax,%eax
   21fbc:	75 3a                	jne    21ff8 <normalize+0x6b>
   21fbe:	8b 44 24 14          	mov    0x14(%esp),%eax
   21fc2:	8b 40 04             	mov    0x4(%eax),%eax
   21fc5:	85 c0                	test   %eax,%eax
   21fc7:	75 2f                	jne    21ff8 <normalize+0x6b>
		a->exponent = 0;
   21fc9:	8b 44 24 14          	mov    0x14(%esp),%eax
   21fcd:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		return;
   21fd3:	eb 49                	jmp    2201e <normalize+0x91>
	}
// 如果a的尾数最左端有0值位，那么将尾数左移，同时调整指数值（递减）。直到尾数的b字段最高有效位MSB是1位置（此时b表现为负值）
// 最后再添加符号位。
	while (i && a->b >= 0) {
		i--;
   21fd5:	83 6c 24 0c 01       	subl   $0x1,0xc(%esp)
		__asm__("addl %0,%0 ; adcl %1,%1"
			:"=r" (a->a),"=r" (a->b)
			:"0" (a->a),"1" (a->b));
   21fda:	8b 44 24 14          	mov    0x14(%esp),%eax
   21fde:	8b 10                	mov    (%eax),%edx
   21fe0:	8b 44 24 14          	mov    0x14(%esp),%eax
   21fe4:	8b 40 04             	mov    0x4(%eax),%eax
	}
// 如果a的尾数最左端有0值位，那么将尾数左移，同时调整指数值（递减）。直到尾数的b字段最高有效位MSB是1位置（此时b表现为负值）
// 最后再添加符号位。
	while (i && a->b >= 0) {
		i--;
		__asm__("addl %0,%0 ; adcl %1,%1"
   21fe7:	01 d2                	add    %edx,%edx
   21fe9:	11 c0                	adc    %eax,%eax
   21feb:	8b 4c 24 14          	mov    0x14(%esp),%ecx
   21fef:	89 11                	mov    %edx,(%ecx)
   21ff1:	8b 54 24 14          	mov    0x14(%esp),%edx
   21ff5:	89 42 04             	mov    %eax,0x4(%edx)
		a->exponent = 0;
		return;
	}
// 如果a的尾数最左端有0值位，那么将尾数左移，同时调整指数值（递减）。直到尾数的b字段最高有效位MSB是1位置（此时b表现为负值）
// 最后再添加符号位。
	while (i && a->b >= 0) {
   21ff8:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   21ffd:	74 0b                	je     2200a <normalize+0x7d>
   21fff:	8b 44 24 14          	mov    0x14(%esp),%eax
   22003:	8b 40 04             	mov    0x4(%eax),%eax
   22006:	85 c0                	test   %eax,%eax
   22008:	79 cb                	jns    21fd5 <normalize+0x48>
		i--;
		__asm__("addl %0,%0 ; adcl %1,%1"
			:"=r" (a->a),"=r" (a->b)
			:"0" (a->a),"1" (a->b));
	}
	a->exponent = i | sign;
   2200a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   2200e:	89 c2                	mov    %eax,%edx
   22010:	8b 44 24 08          	mov    0x8(%esp),%eax
   22014:	09 c2                	or     %eax,%edx
   22016:	8b 44 24 14          	mov    0x14(%esp),%eax
   2201a:	66 89 50 08          	mov    %dx,0x8(%eax)
}
   2201e:	83 c4 10             	add    $0x10,%esp
   22021:	c3                   	ret    

00022022 <ftst>:

// 仿真浮点指令FTST。
// 即栈定累加器ST(0)与0比较，并根据比较结果设置条件位。若ST > 0.0，则C3，C2，C0分别为000；若ST < 0.0，则条件位为001；若
// ST == 0.0，则条件位是100；若不可比较，则条件位为111。
void ftst(const temp_real * a)
{
   22022:	83 ec 10             	sub    $0x10,%esp
	temp_real b;

// 首先清状态字中条件标志位，并对比较值b（ST）进行规格化处理。若b不等于零并且设置了符号位（是负数），则设置条件位C0。否则设置
// 条件位C3。
	clear_Cx();
   22025:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   2202a:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   22030:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   22036:	80 e6 ba             	and    $0xba,%dh
   22039:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	b = *a;
   2203f:	8b 44 24 14          	mov    0x14(%esp),%eax
   22043:	8b 10                	mov    (%eax),%edx
   22045:	89 54 24 04          	mov    %edx,0x4(%esp)
   22049:	8b 50 04             	mov    0x4(%eax),%edx
   2204c:	89 54 24 08          	mov    %edx,0x8(%esp)
   22050:	8b 40 08             	mov    0x8(%eax),%eax
   22053:	89 44 24 0c          	mov    %eax,0xc(%esp)
	normalize(&b);
   22057:	8d 44 24 04          	lea    0x4(%esp),%eax
   2205b:	50                   	push   %eax
   2205c:	e8 2c ff ff ff       	call   21f8d <normalize>
   22061:	83 c4 04             	add    $0x4,%esp
	if (b.a || b.b || b.exponent) {
   22064:	8b 44 24 04          	mov    0x4(%esp),%eax
   22068:	85 c0                	test   %eax,%eax
   2206a:	75 12                	jne    2207e <ftst+0x5c>
   2206c:	8b 44 24 08          	mov    0x8(%esp),%eax
   22070:	85 c0                	test   %eax,%eax
   22072:	75 0a                	jne    2207e <ftst+0x5c>
   22074:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   22079:	66 85 c0             	test   %ax,%ax
   2207c:	74 26                	je     220a4 <ftst+0x82>
		if (b.exponent < 0)
   2207e:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   22083:	66 85 c0             	test   %ax,%ax
   22086:	79 36                	jns    220be <ftst+0x9c>
			set_C0();
   22088:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   2208d:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   22093:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   22099:	80 ce 01             	or     $0x1,%dh
   2209c:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
// 条件位C3。
	clear_Cx();
	b = *a;
	normalize(&b);
	if (b.a || b.b || b.exponent) {
		if (b.exponent < 0)
   220a2:	eb 1a                	jmp    220be <ftst+0x9c>
			set_C0();
	} else
		set_C3();
   220a4:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   220a9:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   220af:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   220b5:	80 ce 40             	or     $0x40,%dh
   220b8:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
}
   220be:	90                   	nop
   220bf:	83 c4 10             	add    $0x10,%esp
   220c2:	c3                   	ret    

000220c3 <fcom>:

// 仿真浮点指令FCOM。
// 比较两个参数src1、src2。并根据比较结果设置条件位。若src1 > src2，则C3，C2，C0分别为000；若src1 < src2，则条件位为
// 001；若两者相等，则条件位是100。
void fcom(const temp_real * src1, const temp_real * src2)
{
   220c3:	83 ec 1c             	sub    $0x1c,%esp
	temp_real a;

	a = *src1;
   220c6:	8b 44 24 20          	mov    0x20(%esp),%eax
   220ca:	8b 10                	mov    (%eax),%edx
   220cc:	89 54 24 04          	mov    %edx,0x4(%esp)
   220d0:	8b 50 04             	mov    0x4(%eax),%edx
   220d3:	89 54 24 08          	mov    %edx,0x8(%esp)
   220d7:	8b 40 08             	mov    0x8(%eax),%eax
   220da:	89 44 24 0c          	mov    %eax,0xc(%esp)
	a.exponent ^= 0x8000;           // 符号位取反。
   220de:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   220e3:	66 35 00 80          	xor    $0x8000,%ax
   220e7:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	fadd(&a,src2,&a);               // 两者相加（即相减）。
   220ec:	83 ec 04             	sub    $0x4,%esp
   220ef:	8d 44 24 08          	lea    0x8(%esp),%eax
   220f3:	50                   	push   %eax
   220f4:	ff 74 24 2c          	pushl  0x2c(%esp)
   220f8:	8d 44 24 10          	lea    0x10(%esp),%eax
   220fc:	50                   	push   %eax
   220fd:	e8 e0 f7 ff ff       	call   218e2 <fadd>
   22102:	83 c4 10             	add    $0x10,%esp
	ftst(&a);                       // 测试结果并设置条件位。
   22105:	83 ec 0c             	sub    $0xc,%esp
   22108:	8d 44 24 10          	lea    0x10(%esp),%eax
   2210c:	50                   	push   %eax
   2210d:	e8 10 ff ff ff       	call   22022 <ftst>
   22112:	83 c4 10             	add    $0x10,%esp
}
   22115:	90                   	nop
   22116:	83 c4 1c             	add    $0x1c,%esp
   22119:	c3                   	ret    

0002211a <fucom>:

// 仿真浮点指令FUCOM（无次序比较）。
// 用于操作数之一是NaN的比较。
void fucom(const temp_real * src1, const temp_real * src2)
{
   2211a:	83 ec 0c             	sub    $0xc,%esp
	fcom(src1,src2);
   2211d:	83 ec 08             	sub    $0x8,%esp
   22120:	ff 74 24 1c          	pushl  0x1c(%esp)
   22124:	ff 74 24 1c          	pushl  0x1c(%esp)
   22128:	e8 96 ff ff ff       	call   220c3 <fcom>
   2212d:	83 c4 10             	add    $0x10,%esp
}
   22130:	90                   	nop
   22131:	83 c4 0c             	add    $0xc,%esp
   22134:	c3                   	ret    

00022135 <short_to_temp>:
// 短实数长度是32位，基有效数（尾数）长度是23位，指数是8位，还有1个符号位。
void short_to_temp(const short_real * a, temp_real * b)
{
// 首先处理被转换的短实数是0的情况。若为0,则设置对应临时实数b的有效数为0。然后根据短实数符号位设置临时实数的符号位，即exponent
// 的最高有效位。
	if (!(*a & 0x7fffffff)) {
   22135:	8b 44 24 04          	mov    0x4(%esp),%eax
   22139:	8b 00                	mov    (%eax),%eax
   2213b:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
   22140:	85 c0                	test   %eax,%eax
   22142:	75 3a                	jne    2217e <short_to_temp+0x49>
		b->a = b->b = 0;                // 置临时实数的有效数 = 0。
   22144:	8b 44 24 08          	mov    0x8(%esp),%eax
   22148:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   2214f:	8b 44 24 08          	mov    0x8(%esp),%eax
   22153:	8b 50 04             	mov    0x4(%eax),%edx
   22156:	8b 44 24 08          	mov    0x8(%esp),%eax
   2215a:	89 10                	mov    %edx,(%eax)
		if (*a)
   2215c:	8b 44 24 04          	mov    0x4(%esp),%eax
   22160:	8b 00                	mov    (%eax),%eax
   22162:	85 c0                	test   %eax,%eax
   22164:	74 0c                	je     22172 <short_to_temp+0x3d>
			b->exponent = 0x8000;   // 设置符号位。
   22166:	8b 44 24 08          	mov    0x8(%esp),%eax
   2216a:	66 c7 40 08 00 80    	movw   $0x8000,0x8(%eax)
		else
			b->exponent = 0;
		return;
   22170:	eb 67                	jmp    221d9 <short_to_temp+0xa4>
	if (!(*a & 0x7fffffff)) {
		b->a = b->b = 0;                // 置临时实数的有效数 = 0。
		if (*a)
			b->exponent = 0x8000;   // 设置符号位。
		else
			b->exponent = 0;
   22172:	8b 44 24 08          	mov    0x8(%esp),%eax
   22176:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		return;
   2217c:	eb 5b                	jmp    221d9 <short_to_temp+0xa4>
	}
// 对于一般短实数，先确定对应临时实数的指数值。这里需要用到整型数偏置表示方法的概念。短实数指数的偏置量是127，而临时实数指数的偏置
// 量是16383。因此在取出短实数中指数值后需要变更其中的偏置量为16383。此时就形成了临时实数格式的指数值exponent。另外，如果短实数
// 是负数，则需要设置临时实数的符号位（位79）。下一步设置尾数值。方法是把短实数左移8位，让23位尾数最高有效位处于临时实数的位62处。
// 而临时实数尾数位63处需要恒置一个1，即需要或上0x80000000。最后清掉临时实数低32位有效数。
	b->exponent = ((*a>>23) & 0xff)-127+16383;      // 取出短实数指数位，更换偏置量。
   2217e:	8b 44 24 04          	mov    0x4(%esp),%eax
   22182:	8b 00                	mov    (%eax),%eax
   22184:	c1 f8 17             	sar    $0x17,%eax
   22187:	0f b6 c0             	movzbl %al,%eax
   2218a:	66 05 80 3f          	add    $0x3f80,%ax
   2218e:	89 c2                	mov    %eax,%edx
   22190:	8b 44 24 08          	mov    0x8(%esp),%eax
   22194:	66 89 50 08          	mov    %dx,0x8(%eax)
	if (*a<0)
   22198:	8b 44 24 04          	mov    0x4(%esp),%eax
   2219c:	8b 00                	mov    (%eax),%eax
   2219e:	85 c0                	test   %eax,%eax
   221a0:	79 16                	jns    221b8 <short_to_temp+0x83>
		b->exponent |= 0x8000;                  // 若为负数则设置符号位。
   221a2:	8b 44 24 08          	mov    0x8(%esp),%eax
   221a6:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   221aa:	66 0d 00 80          	or     $0x8000,%ax
   221ae:	89 c2                	mov    %eax,%edx
   221b0:	8b 44 24 08          	mov    0x8(%esp),%eax
   221b4:	66 89 50 08          	mov    %dx,0x8(%eax)
	b->b = (*a<<8) | 0x80000000;                    // 放置尾数，添加固定1值。
   221b8:	8b 44 24 04          	mov    0x4(%esp),%eax
   221bc:	8b 00                	mov    (%eax),%eax
   221be:	c1 e0 08             	shl    $0x8,%eax
   221c1:	0d 00 00 00 80       	or     $0x80000000,%eax
   221c6:	89 c2                	mov    %eax,%edx
   221c8:	8b 44 24 08          	mov    0x8(%esp),%eax
   221cc:	89 50 04             	mov    %edx,0x4(%eax)
	b->a = 0;
   221cf:	8b 44 24 08          	mov    0x8(%esp),%eax
   221d3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   221d9:	c3                   	ret    

000221da <long_to_temp>:

// 长实数转换成临时实数格式。
// 方法与short_to_temp()安全一样。不过长实数指数偏置量是1034。
void long_to_temp(const long_real * a, temp_real * b)
{
	if (!a->a && !(a->b & 0x7fffffff)) {
   221da:	8b 44 24 04          	mov    0x4(%esp),%eax
   221de:	8b 00                	mov    (%eax),%eax
   221e0:	85 c0                	test   %eax,%eax
   221e2:	75 4b                	jne    2222f <long_to_temp+0x55>
   221e4:	8b 44 24 04          	mov    0x4(%esp),%eax
   221e8:	8b 40 04             	mov    0x4(%eax),%eax
   221eb:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
   221f0:	85 c0                	test   %eax,%eax
   221f2:	75 3b                	jne    2222f <long_to_temp+0x55>
		b->a = b->b = 0;                // 置临时实数的有效数 = 0。
   221f4:	8b 44 24 08          	mov    0x8(%esp),%eax
   221f8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   221ff:	8b 44 24 08          	mov    0x8(%esp),%eax
   22203:	8b 50 04             	mov    0x4(%eax),%edx
   22206:	8b 44 24 08          	mov    0x8(%esp),%eax
   2220a:	89 10                	mov    %edx,(%eax)
		if (a->b)
   2220c:	8b 44 24 04          	mov    0x4(%esp),%eax
   22210:	8b 40 04             	mov    0x4(%eax),%eax
   22213:	85 c0                	test   %eax,%eax
   22215:	74 0c                	je     22223 <long_to_temp+0x49>
			b->exponent = 0x8000;   // 设置符号位。
   22217:	8b 44 24 08          	mov    0x8(%esp),%eax
   2221b:	66 c7 40 08 00 80    	movw   $0x8000,0x8(%eax)
		else
			b->exponent = 0;
		return;
   22221:	eb 7f                	jmp    222a2 <long_to_temp+0xc8>
	if (!a->a && !(a->b & 0x7fffffff)) {
		b->a = b->b = 0;                // 置临时实数的有效数 = 0。
		if (a->b)
			b->exponent = 0x8000;   // 设置符号位。
		else
			b->exponent = 0;
   22223:	8b 44 24 08          	mov    0x8(%esp),%eax
   22227:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		return;
   2222d:	eb 73                	jmp    222a2 <long_to_temp+0xc8>
	}
	b->exponent = ((a->b >> 20) & 0x7ff)-1023+16383;        // 取长实数指数，更换偏置量。
   2222f:	8b 44 24 04          	mov    0x4(%esp),%eax
   22233:	8b 40 04             	mov    0x4(%eax),%eax
   22236:	c1 f8 14             	sar    $0x14,%eax
   22239:	66 25 ff 07          	and    $0x7ff,%ax
   2223d:	66 05 00 3c          	add    $0x3c00,%ax
   22241:	89 c2                	mov    %eax,%edx
   22243:	8b 44 24 08          	mov    0x8(%esp),%eax
   22247:	66 89 50 08          	mov    %dx,0x8(%eax)
	if (a->b<0)
   2224b:	8b 44 24 04          	mov    0x4(%esp),%eax
   2224f:	8b 40 04             	mov    0x4(%eax),%eax
   22252:	85 c0                	test   %eax,%eax
   22254:	79 16                	jns    2226c <long_to_temp+0x92>
		b->exponent |= 0x8000;          // 若为负数则设置符号位。
   22256:	8b 44 24 08          	mov    0x8(%esp),%eax
   2225a:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   2225e:	66 0d 00 80          	or     $0x8000,%ax
   22262:	89 c2                	mov    %eax,%edx
   22264:	8b 44 24 08          	mov    0x8(%esp),%eax
   22268:	66 89 50 08          	mov    %dx,0x8(%eax)
	b->b = 0x80000000 | (a->b<<11) | (((unsigned long)a->a)>>21);
   2226c:	8b 44 24 04          	mov    0x4(%esp),%eax
   22270:	8b 40 04             	mov    0x4(%eax),%eax
   22273:	c1 e0 0b             	shl    $0xb,%eax
   22276:	89 c2                	mov    %eax,%edx
   22278:	8b 44 24 04          	mov    0x4(%esp),%eax
   2227c:	8b 00                	mov    (%eax),%eax
   2227e:	c1 e8 15             	shr    $0x15,%eax
   22281:	09 d0                	or     %edx,%eax
   22283:	0d 00 00 00 80       	or     $0x80000000,%eax
   22288:	89 c2                	mov    %eax,%edx
   2228a:	8b 44 24 08          	mov    0x8(%esp),%eax
   2228e:	89 50 04             	mov    %edx,0x4(%eax)
	b->a = a->a<<11;                        // 放置尾数，添1。
   22291:	8b 44 24 04          	mov    0x4(%esp),%eax
   22295:	8b 00                	mov    (%eax),%eax
   22297:	c1 e0 0b             	shl    $0xb,%eax
   2229a:	89 c2                	mov    %eax,%edx
   2229c:	8b 44 24 08          	mov    0x8(%esp),%eax
   222a0:	89 10                	mov    %edx,(%eax)
}
   222a2:	c3                   	ret    

000222a3 <temp_to_short>:
// 临时实数转换成短实数格式。
// 过程与short_to_temp()相反，但需要处理精度和舍入问题。
void temp_to_short(const temp_real * a, short_real * b)
{
// 如果指数部分为0，则根据有无符号位设置短实数为-0或0。
	if (!(a->exponent & 0x7fff)) {
   222a3:	8b 44 24 04          	mov    0x4(%esp),%eax
   222a7:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   222ab:	98                   	cwtl   
   222ac:	25 ff 7f 00 00       	and    $0x7fff,%eax
   222b1:	85 c0                	test   %eax,%eax
   222b3:	75 24                	jne    222d9 <temp_to_short+0x36>
		*b = (a->exponent)?0x80000000:0;
   222b5:	8b 44 24 04          	mov    0x4(%esp),%eax
   222b9:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   222bd:	66 85 c0             	test   %ax,%ax
   222c0:	74 07                	je     222c9 <temp_to_short+0x26>
   222c2:	ba 00 00 00 80       	mov    $0x80000000,%edx
   222c7:	eb 05                	jmp    222ce <temp_to_short+0x2b>
   222c9:	ba 00 00 00 00       	mov    $0x0,%edx
   222ce:	8b 44 24 08          	mov    0x8(%esp),%eax
   222d2:	89 10                	mov    %edx,(%eax)
		return;
   222d4:	e9 00 01 00 00       	jmp    223d9 <temp_to_short+0x136>
	}
// 先处理指数部分。即更换临时实数指数偏置量（16383）为短实数的偏置量127。
	*b = ((((long) a->exponent)-16383+127) << 23) & 0x7f800000;
   222d9:	8b 44 24 04          	mov    0x4(%esp),%eax
   222dd:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   222e1:	98                   	cwtl   
   222e2:	2d 80 3f 00 00       	sub    $0x3f80,%eax
   222e7:	c1 e0 17             	shl    $0x17,%eax
   222ea:	25 00 00 80 7f       	and    $0x7f800000,%eax
   222ef:	89 c2                	mov    %eax,%edx
   222f1:	8b 44 24 08          	mov    0x8(%esp),%eax
   222f5:	89 10                	mov    %edx,(%eax)
	if (a->exponent < 0)                    // 若是负数则设置符号位。
   222f7:	8b 44 24 04          	mov    0x4(%esp),%eax
   222fb:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   222ff:	66 85 c0             	test   %ax,%ax
   22302:	79 13                	jns    22317 <temp_to_short+0x74>
		*b |= 0x80000000;
   22304:	8b 44 24 08          	mov    0x8(%esp),%eax
   22308:	8b 00                	mov    (%eax),%eax
   2230a:	0d 00 00 00 80       	or     $0x80000000,%eax
   2230f:	89 c2                	mov    %eax,%edx
   22311:	8b 44 24 08          	mov    0x8(%esp),%eax
   22315:	89 10                	mov    %edx,(%eax)
	*b |= (a->b >> 8) & 0x007fffff;         // 取临时实数有效数高23位。
   22317:	8b 44 24 08          	mov    0x8(%esp),%eax
   2231b:	8b 10                	mov    (%eax),%edx
   2231d:	8b 44 24 04          	mov    0x4(%esp),%eax
   22321:	8b 40 04             	mov    0x4(%eax),%eax
   22324:	c1 f8 08             	sar    $0x8,%eax
   22327:	25 ff ff 7f 00       	and    $0x7fffff,%eax
   2232c:	09 c2                	or     %eax,%edx
   2232e:	8b 44 24 08          	mov    0x8(%esp),%eax
   22332:	89 10                	mov    %edx,(%eax)
// 根据控制字中的舍入设置执行舍入操作。
	switch (ROUNDING) {
   22334:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   22339:	8b 80 18 04 00 00    	mov    0x418(%eax),%eax
   2233f:	c1 f8 0a             	sar    $0xa,%eax
   22342:	83 e0 03             	and    $0x3,%eax
   22345:	83 f8 01             	cmp    $0x1,%eax
   22348:	74 2f                	je     22379 <temp_to_short+0xd6>
   2234a:	83 f8 02             	cmp    $0x2,%eax
   2234d:	74 56                	je     223a5 <temp_to_short+0x102>
   2234f:	85 c0                	test   %eax,%eax
   22351:	0f 85 82 00 00 00    	jne    223d9 <temp_to_short+0x136>
		case ROUND_NEAREST:
			if ((a->b & 0xff) > 0x80)
   22357:	8b 44 24 04          	mov    0x4(%esp),%eax
   2235b:	8b 40 04             	mov    0x4(%eax),%eax
   2235e:	0f b6 c0             	movzbl %al,%eax
   22361:	3d 80 00 00 00       	cmp    $0x80,%eax
   22366:	7e 6a                	jle    223d2 <temp_to_short+0x12f>
				++*b;
   22368:	8b 44 24 08          	mov    0x8(%esp),%eax
   2236c:	8b 00                	mov    (%eax),%eax
   2236e:	8d 50 01             	lea    0x1(%eax),%edx
   22371:	8b 44 24 08          	mov    0x8(%esp),%eax
   22375:	89 10                	mov    %edx,(%eax)
			break;
   22377:	eb 59                	jmp    223d2 <temp_to_short+0x12f>
		case ROUND_DOWN:
			if ((a->exponent & 0x8000) && (a->b & 0xff))
   22379:	8b 44 24 04          	mov    0x4(%esp),%eax
   2237d:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   22381:	66 85 c0             	test   %ax,%ax
   22384:	79 4f                	jns    223d5 <temp_to_short+0x132>
   22386:	8b 44 24 04          	mov    0x4(%esp),%eax
   2238a:	8b 40 04             	mov    0x4(%eax),%eax
   2238d:	0f b6 c0             	movzbl %al,%eax
   22390:	85 c0                	test   %eax,%eax
   22392:	74 41                	je     223d5 <temp_to_short+0x132>
				++*b;
   22394:	8b 44 24 08          	mov    0x8(%esp),%eax
   22398:	8b 00                	mov    (%eax),%eax
   2239a:	8d 50 01             	lea    0x1(%eax),%edx
   2239d:	8b 44 24 08          	mov    0x8(%esp),%eax
   223a1:	89 10                	mov    %edx,(%eax)
			break;
   223a3:	eb 30                	jmp    223d5 <temp_to_short+0x132>
		case ROUND_UP:
			if (!(a->exponent & 0x8000) && (a->b & 0xff))
   223a5:	8b 44 24 04          	mov    0x4(%esp),%eax
   223a9:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   223ad:	66 85 c0             	test   %ax,%ax
   223b0:	78 26                	js     223d8 <temp_to_short+0x135>
   223b2:	8b 44 24 04          	mov    0x4(%esp),%eax
   223b6:	8b 40 04             	mov    0x4(%eax),%eax
   223b9:	0f b6 c0             	movzbl %al,%eax
   223bc:	85 c0                	test   %eax,%eax
   223be:	74 18                	je     223d8 <temp_to_short+0x135>
				++*b;
   223c0:	8b 44 24 08          	mov    0x8(%esp),%eax
   223c4:	8b 00                	mov    (%eax),%eax
   223c6:	8d 50 01             	lea    0x1(%eax),%edx
   223c9:	8b 44 24 08          	mov    0x8(%esp),%eax
   223cd:	89 10                	mov    %edx,(%eax)
			break;
   223cf:	90                   	nop
   223d0:	eb 06                	jmp    223d8 <temp_to_short+0x135>
// 根据控制字中的舍入设置执行舍入操作。
	switch (ROUNDING) {
		case ROUND_NEAREST:
			if ((a->b & 0xff) > 0x80)
				++*b;
			break;
   223d2:	90                   	nop
   223d3:	eb 04                	jmp    223d9 <temp_to_short+0x136>
		case ROUND_DOWN:
			if ((a->exponent & 0x8000) && (a->b & 0xff))
				++*b;
			break;
   223d5:	90                   	nop
   223d6:	eb 01                	jmp    223d9 <temp_to_short+0x136>
		case ROUND_UP:
			if (!(a->exponent & 0x8000) && (a->b & 0xff))
				++*b;
			break;
   223d8:	90                   	nop
	}
}
   223d9:	c3                   	ret    

000223da <temp_to_long>:

// 临时实数转换成长实数。
void temp_to_long(const temp_real * a, long_real * b)
{
// 如果指数部分为0，则根据有无符号位设置长实数为-0或0。
	if (!(a->exponent & 0x7fff)) {
   223da:	8b 44 24 04          	mov    0x4(%esp),%eax
   223de:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   223e2:	98                   	cwtl   
   223e3:	25 ff 7f 00 00       	and    $0x7fff,%eax
   223e8:	85 c0                	test   %eax,%eax
   223ea:	75 2f                	jne    2241b <temp_to_long+0x41>
		b->a = 0;
   223ec:	8b 44 24 08          	mov    0x8(%esp),%eax
   223f0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		b->b = (a->exponent)?0x80000000:0;
   223f6:	8b 44 24 04          	mov    0x4(%esp),%eax
   223fa:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   223fe:	66 85 c0             	test   %ax,%ax
   22401:	74 07                	je     2240a <temp_to_long+0x30>
   22403:	ba 00 00 00 80       	mov    $0x80000000,%edx
   22408:	eb 05                	jmp    2240f <temp_to_long+0x35>
   2240a:	ba 00 00 00 00       	mov    $0x0,%edx
   2240f:	8b 44 24 08          	mov    0x8(%esp),%eax
   22413:	89 50 04             	mov    %edx,0x4(%eax)
		return;
   22416:	e9 6b 01 00 00       	jmp    22586 <temp_to_long+0x1ac>
	}
// 先处理指数部分。即更换临时实数指数偏置量（16383）为长实数的偏置量1023.
	b->b = (((0x7fff & (long) a->exponent)-16383+1023) << 20) & 0x7ff00000;
   2241b:	8b 44 24 04          	mov    0x4(%esp),%eax
   2241f:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   22423:	98                   	cwtl   
   22424:	25 ff 7f 00 00       	and    $0x7fff,%eax
   22429:	2d 00 3c 00 00       	sub    $0x3c00,%eax
   2242e:	c1 e0 14             	shl    $0x14,%eax
   22431:	25 00 00 f0 7f       	and    $0x7ff00000,%eax
   22436:	89 c2                	mov    %eax,%edx
   22438:	8b 44 24 08          	mov    0x8(%esp),%eax
   2243c:	89 50 04             	mov    %edx,0x4(%eax)
	if (a->exponent < 0)            // 若是负数则设置符号位。
   2243f:	8b 44 24 04          	mov    0x4(%esp),%eax
   22443:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   22447:	66 85 c0             	test   %ax,%ax
   2244a:	79 15                	jns    22461 <temp_to_long+0x87>
		b->b |= 0x80000000;
   2244c:	8b 44 24 08          	mov    0x8(%esp),%eax
   22450:	8b 40 04             	mov    0x4(%eax),%eax
   22453:	0d 00 00 00 80       	or     $0x80000000,%eax
   22458:	89 c2                	mov    %eax,%edx
   2245a:	8b 44 24 08          	mov    0x8(%esp),%eax
   2245e:	89 50 04             	mov    %edx,0x4(%eax)
	b->b |= (a->b >> 11) & 0x000fffff;      // 取临时实数有效数高20位。
   22461:	8b 44 24 08          	mov    0x8(%esp),%eax
   22465:	8b 50 04             	mov    0x4(%eax),%edx
   22468:	8b 44 24 04          	mov    0x4(%esp),%eax
   2246c:	8b 40 04             	mov    0x4(%eax),%eax
   2246f:	c1 f8 0b             	sar    $0xb,%eax
   22472:	25 ff ff 0f 00       	and    $0xfffff,%eax
   22477:	09 c2                	or     %eax,%edx
   22479:	8b 44 24 08          	mov    0x8(%esp),%eax
   2247d:	89 50 04             	mov    %edx,0x4(%eax)
	b->a = a->b << 21;
   22480:	8b 44 24 04          	mov    0x4(%esp),%eax
   22484:	8b 40 04             	mov    0x4(%eax),%eax
   22487:	c1 e0 15             	shl    $0x15,%eax
   2248a:	89 c2                	mov    %eax,%edx
   2248c:	8b 44 24 08          	mov    0x8(%esp),%eax
   22490:	89 10                	mov    %edx,(%eax)
	b->a |= (a->a >> 11) & 0x001fffff;
   22492:	8b 44 24 08          	mov    0x8(%esp),%eax
   22496:	8b 10                	mov    (%eax),%edx
   22498:	8b 44 24 04          	mov    0x4(%esp),%eax
   2249c:	8b 00                	mov    (%eax),%eax
   2249e:	c1 e8 0b             	shr    $0xb,%eax
   224a1:	09 c2                	or     %eax,%edx
   224a3:	8b 44 24 08          	mov    0x8(%esp),%eax
   224a7:	89 10                	mov    %edx,(%eax)
// 根据控制字中的舍入设置执行舍入操作。
	switch (ROUNDING) {
   224a9:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   224ae:	8b 80 18 04 00 00    	mov    0x418(%eax),%eax
   224b4:	c1 f8 0a             	sar    $0xa,%eax
   224b7:	83 e0 03             	and    $0x3,%eax
   224ba:	83 f8 01             	cmp    $0x1,%eax
   224bd:	74 45                	je     22504 <temp_to_long+0x12a>
   224bf:	83 f8 02             	cmp    $0x2,%eax
   224c2:	74 7d                	je     22541 <temp_to_long+0x167>
   224c4:	85 c0                	test   %eax,%eax
   224c6:	0f 85 ba 00 00 00    	jne    22586 <temp_to_long+0x1ac>
		case ROUND_NEAREST:
			if ((a->a & 0x7ff) > 0x400)
   224cc:	8b 44 24 04          	mov    0x4(%esp),%eax
   224d0:	8b 00                	mov    (%eax),%eax
   224d2:	25 ff 07 00 00       	and    $0x7ff,%eax
   224d7:	3d 00 04 00 00       	cmp    $0x400,%eax
   224dc:	0f 8e 9d 00 00 00    	jle    2257f <temp_to_long+0x1a5>
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
   224e2:	8b 44 24 08          	mov    0x8(%esp),%eax
   224e6:	8b 10                	mov    (%eax),%edx
   224e8:	8b 44 24 08          	mov    0x8(%esp),%eax
   224ec:	8b 40 04             	mov    0x4(%eax),%eax
	b->a |= (a->a >> 11) & 0x001fffff;
// 根据控制字中的舍入设置执行舍入操作。
	switch (ROUNDING) {
		case ROUND_NEAREST:
			if ((a->a & 0x7ff) > 0x400)
				__asm__("addl $1,%0 ; adcl $0,%1"
   224ef:	83 c2 01             	add    $0x1,%edx
   224f2:	83 d0 00             	adc    $0x0,%eax
   224f5:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   224f9:	89 11                	mov    %edx,(%ecx)
   224fb:	8b 54 24 08          	mov    0x8(%esp),%edx
   224ff:	89 42 04             	mov    %eax,0x4(%edx)
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
			break;
   22502:	eb 7b                	jmp    2257f <temp_to_long+0x1a5>
		case ROUND_DOWN:
			if ((a->exponent & 0x8000) && (a->b & 0xff))
   22504:	8b 44 24 04          	mov    0x4(%esp),%eax
   22508:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   2250c:	66 85 c0             	test   %ax,%ax
   2250f:	79 71                	jns    22582 <temp_to_long+0x1a8>
   22511:	8b 44 24 04          	mov    0x4(%esp),%eax
   22515:	8b 40 04             	mov    0x4(%eax),%eax
   22518:	0f b6 c0             	movzbl %al,%eax
   2251b:	85 c0                	test   %eax,%eax
   2251d:	74 63                	je     22582 <temp_to_long+0x1a8>
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
   2251f:	8b 44 24 08          	mov    0x8(%esp),%eax
   22523:	8b 10                	mov    (%eax),%edx
   22525:	8b 44 24 08          	mov    0x8(%esp),%eax
   22529:	8b 40 04             	mov    0x4(%eax),%eax
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
			break;
		case ROUND_DOWN:
			if ((a->exponent & 0x8000) && (a->b & 0xff))
				__asm__("addl $1,%0 ; adcl $0,%1"
   2252c:	83 c2 01             	add    $0x1,%edx
   2252f:	83 d0 00             	adc    $0x0,%eax
   22532:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   22536:	89 11                	mov    %edx,(%ecx)
   22538:	8b 54 24 08          	mov    0x8(%esp),%edx
   2253c:	89 42 04             	mov    %eax,0x4(%edx)
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
			break;
   2253f:	eb 41                	jmp    22582 <temp_to_long+0x1a8>
		case ROUND_UP:
			if (!(a->exponent & 0x8000) && (a->b & 0xff))
   22541:	8b 44 24 04          	mov    0x4(%esp),%eax
   22545:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   22549:	66 85 c0             	test   %ax,%ax
   2254c:	78 37                	js     22585 <temp_to_long+0x1ab>
   2254e:	8b 44 24 04          	mov    0x4(%esp),%eax
   22552:	8b 40 04             	mov    0x4(%eax),%eax
   22555:	0f b6 c0             	movzbl %al,%eax
   22558:	85 c0                	test   %eax,%eax
   2255a:	74 29                	je     22585 <temp_to_long+0x1ab>
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
   2255c:	8b 44 24 08          	mov    0x8(%esp),%eax
   22560:	8b 10                	mov    (%eax),%edx
   22562:	8b 44 24 08          	mov    0x8(%esp),%eax
   22566:	8b 40 04             	mov    0x4(%eax),%eax
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
			break;
		case ROUND_UP:
			if (!(a->exponent & 0x8000) && (a->b & 0xff))
				__asm__("addl $1,%0 ; adcl $0,%1"
   22569:	83 c2 01             	add    $0x1,%edx
   2256c:	83 d0 00             	adc    $0x0,%eax
   2256f:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   22573:	89 11                	mov    %edx,(%ecx)
   22575:	8b 54 24 08          	mov    0x8(%esp),%edx
   22579:	89 42 04             	mov    %eax,0x4(%edx)
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
			break;
   2257c:	90                   	nop
   2257d:	eb 06                	jmp    22585 <temp_to_long+0x1ab>
		case ROUND_NEAREST:
			if ((a->a & 0x7ff) > 0x400)
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
			break;
   2257f:	90                   	nop
   22580:	eb 04                	jmp    22586 <temp_to_long+0x1ac>
		case ROUND_DOWN:
			if ((a->exponent & 0x8000) && (a->b & 0xff))
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
			break;
   22582:	90                   	nop
   22583:	eb 01                	jmp    22586 <temp_to_long+0x1ac>
		case ROUND_UP:
			if (!(a->exponent & 0x8000) && (a->b & 0xff))
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
			break;
   22585:	90                   	nop
	}
}
   22586:	c3                   	ret    

00022587 <real_to_int>:

// 临时实数转换成临时整数格式。
// 临时整数也用10字节表示。其中低8字节是无符号整数值，高2字节表示指数值和符号位。如果高2字节最高有效位为1，则表示是负数；
// 若位0，表示是正数。
void real_to_int(const temp_real * a, temp_int * b)
{
   22587:	53                   	push   %ebx
   22588:	83 ec 10             	sub    $0x10,%esp
// 整数值最大值是2的63次方，加上临时实数偏置值16383,表示一个整数值转换为临时实数，临时实数指数最大值，减去临时实数指数，
// 得到指数差值（相当于与最大整数值的差值）。
	int shift =  16383 + 63 - (a->exponent & 0x7fff);
   2258b:	8b 44 24 18          	mov    0x18(%esp),%eax
   2258f:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   22593:	98                   	cwtl   
   22594:	25 ff 7f 00 00       	and    $0x7fff,%eax
   22599:	ba 3e 40 00 00       	mov    $0x403e,%edx
   2259e:	29 c2                	sub    %eax,%edx
   225a0:	89 d0                	mov    %edx,%eax
   225a2:	89 44 24 0c          	mov    %eax,0xc(%esp)
	unsigned long underflow;

	b->a = b->b = underflow = 0;    // 初始化临时整数值为0。
   225a6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   225ad:	00 
   225ae:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   225b2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   225b9:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   225bd:	8b 50 04             	mov    0x4(%eax),%edx
   225c0:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   225c4:	89 10                	mov    %edx,(%eax)
	b->sign = (a->exponent < 0);    // 置临时整数符号与临时实数符号一致。
   225c6:	8b 44 24 18          	mov    0x18(%esp),%eax
   225ca:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   225ce:	66 c1 e8 0f          	shr    $0xf,%ax
   225d2:	0f b6 d0             	movzbl %al,%edx
   225d5:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   225d9:	66 89 50 08          	mov    %dx,0x8(%eax)
	if (shift < 0) {                // 如果指数差值小于0，说明这个临时实数不能放入临时整数中，
   225dd:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   225e2:	79 1f                	jns    22603 <real_to_int+0x7c>
		set_OE();               // 置状态字溢出位。
   225e4:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   225e9:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   225ef:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   225f5:	83 ca 08             	or     $0x8,%edx
   225f8:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
		return;
   225fe:	e9 8b 01 00 00       	jmp    2278e <real_to_int+0x207>
	}
// 如果两值差值小于2的32次方，直接把实数值放入整数值。
	if (shift < 32) {
   22603:	83 7c 24 0c 1f       	cmpl   $0x1f,0xc(%esp)
   22608:	7f 1c                	jg     22626 <real_to_int+0x9f>
		b->b = a->b; b->a = a->a;
   2260a:	8b 44 24 18          	mov    0x18(%esp),%eax
   2260e:	8b 50 04             	mov    0x4(%eax),%edx
   22611:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22615:	89 50 04             	mov    %edx,0x4(%eax)
   22618:	8b 44 24 18          	mov    0x18(%esp),%eax
   2261c:	8b 10                	mov    (%eax),%edx
   2261e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22622:	89 10                	mov    %edx,(%eax)
   22624:	eb 40                	jmp    22666 <real_to_int+0xdf>
// 如果两值差值介于2的32次方与64次方之间，把实数高位a->b放入整数低位b->a，然后把实数低位放入下溢出变量underflow，指数差值
// shift-32。
	} else if (shift < 64) {
   22626:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
   2262b:	7f 1e                	jg     2264b <real_to_int+0xc4>
		b->a = a->b; underflow = a->a;
   2262d:	8b 44 24 18          	mov    0x18(%esp),%eax
   22631:	8b 50 04             	mov    0x4(%eax),%edx
   22634:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22638:	89 10                	mov    %edx,(%eax)
   2263a:	8b 44 24 18          	mov    0x18(%esp),%eax
   2263e:	8b 00                	mov    (%eax),%eax
   22640:	89 44 24 08          	mov    %eax,0x8(%esp)
		shift -= 32;
   22644:	83 6c 24 0c 20       	subl   $0x20,0xc(%esp)
   22649:	eb 1b                	jmp    22666 <real_to_int+0xdf>
// 如果两值差值介于2的64次方与96次方之间，把实数高位a->b放入下溢出变量underflow，指数差值shift-64。
	} else if (shift < 96) {
   2264b:	83 7c 24 0c 5f       	cmpl   $0x5f,0xc(%esp)
   22650:	0f 8f 31 01 00 00    	jg     22787 <real_to_int+0x200>
		underflow = a->b;
   22656:	8b 44 24 18          	mov    0x18(%esp),%eax
   2265a:	8b 40 04             	mov    0x4(%eax),%eax
   2265d:	89 44 24 08          	mov    %eax,0x8(%esp)
		shift -= 64;
   22661:	83 6c 24 0c 40       	subl   $0x40,0xc(%esp)
	} else
		return;
// 接着再进行细致的调整，调整方法是把临时整数b的向下溢出变量underflow右移shift位。
	__asm__("shrdl %2,%1,%0"
		:"=r" (underflow),"=r" (b->a)
		:"c" ((char) shift),"0" (underflow),"1" (b->a));
   22666:	8b 44 24 0c          	mov    0xc(%esp),%eax
   2266a:	89 c1                	mov    %eax,%ecx
		shift -= 64;
// 否则返回0。
	} else
		return;
// 接着再进行细致的调整，调整方法是把临时整数b的向下溢出变量underflow右移shift位。
	__asm__("shrdl %2,%1,%0"
   2266c:	8b 54 24 08          	mov    0x8(%esp),%edx
		:"=r" (underflow),"=r" (b->a)
		:"c" ((char) shift),"0" (underflow),"1" (b->a));
   22670:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22674:	8b 00                	mov    (%eax),%eax
		shift -= 64;
// 否则返回0。
	} else
		return;
// 接着再进行细致的调整，调整方法是把临时整数b的向下溢出变量underflow右移shift位。
	__asm__("shrdl %2,%1,%0"
   22676:	0f ad c2             	shrd   %cl,%eax,%edx
   22679:	89 54 24 08          	mov    %edx,0x8(%esp)
   2267d:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   22681:	89 02                	mov    %eax,(%edx)
		:"=r" (underflow),"=r" (b->a)
		:"c" ((char) shift),"0" (underflow),"1" (b->a));
// 然后把临时整数b的尾数b->a右移shift位。
	__asm__("shrdl %2,%1,%0"
		:"=r" (b->a),"=r" (b->b)
		:"c" ((char) shift),"0" (b->a),"1" (b->b));
   22683:	8b 44 24 0c          	mov    0xc(%esp),%eax
   22687:	89 c1                	mov    %eax,%ecx
   22689:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   2268d:	8b 10                	mov    (%eax),%edx
   2268f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22693:	8b 40 04             	mov    0x4(%eax),%eax
// 接着再进行细致的调整，调整方法是把临时整数b的向下溢出变量underflow右移shift位。
	__asm__("shrdl %2,%1,%0"
		:"=r" (underflow),"=r" (b->a)
		:"c" ((char) shift),"0" (underflow),"1" (b->a));
// 然后把临时整数b的尾数b->a右移shift位。
	__asm__("shrdl %2,%1,%0"
   22696:	0f ad c2             	shrd   %cl,%eax,%edx
   22699:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   2269d:	89 11                	mov    %edx,(%ecx)
   2269f:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   226a3:	89 42 04             	mov    %eax,0x4(%edx)
		:"=r" (b->a),"=r" (b->b)
		:"c" ((char) shift),"0" (b->a),"1" (b->b));
// 最后把临时整数b的尾数b->b右移shift位。
	__asm__("shrl %1,%0"
		:"=r" (b->b)
		:"c" ((char) shift),"0" (b->b));
   226a6:	8b 44 24 0c          	mov    0xc(%esp),%eax
   226aa:	89 c2                	mov    %eax,%edx
   226ac:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   226b0:	8b 40 04             	mov    0x4(%eax),%eax
// 然后把临时整数b的尾数b->a右移shift位。
	__asm__("shrdl %2,%1,%0"
		:"=r" (b->a),"=r" (b->b)
		:"c" ((char) shift),"0" (b->a),"1" (b->b));
// 最后把临时整数b的尾数b->b右移shift位。
	__asm__("shrl %1,%0"
   226b3:	89 d1                	mov    %edx,%ecx
   226b5:	d3 e8                	shr    %cl,%eax
   226b7:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   226bb:	89 42 04             	mov    %eax,0x4(%edx)
		:"=r" (b->b)
		:"c" ((char) shift),"0" (b->b));
// 根据控制字中的舍入设置执行舍入操作。
	switch (ROUNDING) {
   226be:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   226c3:	8b 80 18 04 00 00    	mov    0x418(%eax),%eax
   226c9:	c1 f8 0a             	sar    $0xa,%eax
   226cc:	83 e0 03             	and    $0x3,%eax
   226cf:	83 f8 01             	cmp    $0x1,%eax
   226d2:	74 7b                	je     2274f <real_to_int+0x1c8>
   226d4:	83 f8 02             	cmp    $0x2,%eax
   226d7:	74 3f                	je     22718 <real_to_int+0x191>
   226d9:	85 c0                	test   %eax,%eax
   226db:	0f 85 ad 00 00 00    	jne    2278e <real_to_int+0x207>
		case ROUND_NEAREST:
			__asm__("addl %4,%5 ; adcl $0,%0 ; adcl $0,%1"
				:"=r" (b->a),"=r" (b->b)
				:"0" (b->a),"1" (b->b)
   226e1:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   226e5:	8b 10                	mov    (%eax),%edx
   226e7:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   226eb:	8b 58 04             	mov    0x4(%eax),%ebx
				,"r" (0x7fffffff + (b->a & 1))
   226ee:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   226f2:	8b 00                	mov    (%eax),%eax
   226f4:	83 e0 01             	and    $0x1,%eax
   226f7:	8d 88 ff ff ff 7f    	lea    0x7fffffff(%eax),%ecx
		:"=r" (b->b)
		:"c" ((char) shift),"0" (b->b));
// 根据控制字中的舍入设置执行舍入操作。
	switch (ROUNDING) {
		case ROUND_NEAREST:
			__asm__("addl %4,%5 ; adcl $0,%0 ; adcl $0,%1"
   226fd:	89 d8                	mov    %ebx,%eax
   226ff:	01 4c 24 08          	add    %ecx,0x8(%esp)
   22703:	83 d2 00             	adc    $0x0,%edx
   22706:	83 d0 00             	adc    $0x0,%eax
   22709:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   2270d:	89 11                	mov    %edx,(%ecx)
   2270f:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   22713:	89 42 04             	mov    %eax,0x4(%edx)
				:"=r" (b->a),"=r" (b->b)
				:"0" (b->a),"1" (b->b)
				,"r" (0x7fffffff + (b->a & 1))
				,"m" (*&underflow));
			break;
   22716:	eb 76                	jmp    2278e <real_to_int+0x207>
		case ROUND_UP:
			if (!b->sign && underflow)
   22718:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   2271c:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   22720:	66 85 c0             	test   %ax,%ax
   22723:	75 65                	jne    2278a <real_to_int+0x203>
   22725:	8b 44 24 08          	mov    0x8(%esp),%eax
   22729:	85 c0                	test   %eax,%eax
   2272b:	74 5d                	je     2278a <real_to_int+0x203>
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
   2272d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22731:	8b 10                	mov    (%eax),%edx
   22733:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22737:	8b 40 04             	mov    0x4(%eax),%eax
				,"r" (0x7fffffff + (b->a & 1))
				,"m" (*&underflow));
			break;
		case ROUND_UP:
			if (!b->sign && underflow)
				__asm__("addl $1,%0 ; adcl $0,%1"
   2273a:	83 c2 01             	add    $0x1,%edx
   2273d:	83 d0 00             	adc    $0x0,%eax
   22740:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   22744:	89 11                	mov    %edx,(%ecx)
   22746:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   2274a:	89 42 04             	mov    %eax,0x4(%edx)
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
			break;
   2274d:	eb 3b                	jmp    2278a <real_to_int+0x203>
		case ROUND_DOWN:
			if (b->sign && underflow)
   2274f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22753:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   22757:	66 85 c0             	test   %ax,%ax
   2275a:	74 31                	je     2278d <real_to_int+0x206>
   2275c:	8b 44 24 08          	mov    0x8(%esp),%eax
   22760:	85 c0                	test   %eax,%eax
   22762:	74 29                	je     2278d <real_to_int+0x206>
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
   22764:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22768:	8b 10                	mov    (%eax),%edx
   2276a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   2276e:	8b 40 04             	mov    0x4(%eax),%eax
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
			break;
		case ROUND_DOWN:
			if (b->sign && underflow)
				__asm__("addl $1,%0 ; adcl $0,%1"
   22771:	83 c2 01             	add    $0x1,%edx
   22774:	83 d0 00             	adc    $0x0,%eax
   22777:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   2277b:	89 11                	mov    %edx,(%ecx)
   2277d:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   22781:	89 42 04             	mov    %eax,0x4(%edx)
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
			break;
   22784:	90                   	nop
   22785:	eb 06                	jmp    2278d <real_to_int+0x206>
	} else if (shift < 96) {
		underflow = a->b;
		shift -= 64;
// 否则返回0。
	} else
		return;
   22787:	90                   	nop
   22788:	eb 04                	jmp    2278e <real_to_int+0x207>
		case ROUND_UP:
			if (!b->sign && underflow)
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
			break;
   2278a:	90                   	nop
   2278b:	eb 01                	jmp    2278e <real_to_int+0x207>
		case ROUND_DOWN:
			if (b->sign && underflow)
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
			break;
   2278d:	90                   	nop
	}
}
   2278e:	83 c4 10             	add    $0x10,%esp
   22791:	5b                   	pop    %ebx
   22792:	c3                   	ret    

00022793 <int_to_real>:

// 临时整数转换成临时实数格式。
void int_to_real(const temp_int * a, temp_real * b)
{
// 由于原值是整数，所以转换成临时实数时指数除了需要加上偏置量16383外，还要加上63。表示
	b->a = a->a;
   22793:	8b 44 24 04          	mov    0x4(%esp),%eax
   22797:	8b 10                	mov    (%eax),%edx
   22799:	8b 44 24 08          	mov    0x8(%esp),%eax
   2279d:	89 10                	mov    %edx,(%eax)
	b->b = a->b;
   2279f:	8b 44 24 04          	mov    0x4(%esp),%eax
   227a3:	8b 50 04             	mov    0x4(%eax),%edx
   227a6:	8b 44 24 08          	mov    0x8(%esp),%eax
   227aa:	89 50 04             	mov    %edx,0x4(%eax)
	if (b->a || b->b)
   227ad:	8b 44 24 08          	mov    0x8(%esp),%eax
   227b1:	8b 00                	mov    (%eax),%eax
   227b3:	85 c0                	test   %eax,%eax
   227b5:	75 0b                	jne    227c2 <int_to_real+0x2f>
   227b7:	8b 44 24 08          	mov    0x8(%esp),%eax
   227bb:	8b 40 04             	mov    0x4(%eax),%eax
   227be:	85 c0                	test   %eax,%eax
   227c0:	74 23                	je     227e5 <int_to_real+0x52>
		b->exponent = 16383 + 63 + (a->sign? 0x8000:0);
   227c2:	8b 44 24 04          	mov    0x4(%esp),%eax
   227c6:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   227ca:	66 85 c0             	test   %ax,%ax
   227cd:	74 07                	je     227d6 <int_to_real+0x43>
   227cf:	ba 3e c0 ff ff       	mov    $0xffffc03e,%edx
   227d4:	eb 05                	jmp    227db <int_to_real+0x48>
   227d6:	ba 3e 40 00 00       	mov    $0x403e,%edx
   227db:	8b 44 24 08          	mov    0x8(%esp),%eax
   227df:	66 89 50 08          	mov    %dx,0x8(%eax)
	else {
		b->exponent = 0;
		return;
	}
// 对格式转换后的临时实数进行规格化处理，即让有效数最高有效位不是0。
	while (b->b >= 0) {
   227e3:	eb 3f                	jmp    22824 <int_to_real+0x91>
	b->a = a->a;
	b->b = a->b;
	if (b->a || b->b)
		b->exponent = 16383 + 63 + (a->sign? 0x8000:0);
	else {
		b->exponent = 0;
   227e5:	8b 44 24 08          	mov    0x8(%esp),%eax
   227e9:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		return;
   227ef:	eb 3e                	jmp    2282f <int_to_real+0x9c>
	}
// 对格式转换后的临时实数进行规格化处理，即让有效数最高有效位不是0。
	while (b->b >= 0) {
		b->exponent--;
   227f1:	8b 44 24 08          	mov    0x8(%esp),%eax
   227f5:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   227f9:	83 e8 01             	sub    $0x1,%eax
   227fc:	89 c2                	mov    %eax,%edx
   227fe:	8b 44 24 08          	mov    0x8(%esp),%eax
   22802:	66 89 50 08          	mov    %dx,0x8(%eax)
		__asm__("addl %0,%0 ; adcl %1,%1"
			:"=r" (b->a),"=r" (b->b)
			:"0" (b->a),"1" (b->b));
   22806:	8b 44 24 08          	mov    0x8(%esp),%eax
   2280a:	8b 10                	mov    (%eax),%edx
   2280c:	8b 44 24 08          	mov    0x8(%esp),%eax
   22810:	8b 40 04             	mov    0x4(%eax),%eax
		return;
	}
// 对格式转换后的临时实数进行规格化处理，即让有效数最高有效位不是0。
	while (b->b >= 0) {
		b->exponent--;
		__asm__("addl %0,%0 ; adcl %1,%1"
   22813:	01 d2                	add    %edx,%edx
   22815:	11 c0                	adc    %eax,%eax
   22817:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   2281b:	89 11                	mov    %edx,(%ecx)
   2281d:	8b 54 24 08          	mov    0x8(%esp),%edx
   22821:	89 42 04             	mov    %eax,0x4(%edx)
	else {
		b->exponent = 0;
		return;
	}
// 对格式转换后的临时实数进行规格化处理，即让有效数最高有效位不是0。
	while (b->b >= 0) {
   22824:	8b 44 24 08          	mov    0x8(%esp),%eax
   22828:	8b 40 04             	mov    0x4(%eax),%eax
   2282b:	85 c0                	test   %eax,%eax
   2282d:	79 c2                	jns    227f1 <int_to_real+0x5e>
		b->exponent--;
		__asm__("addl %0,%0 ; adcl %1,%1"
			:"=r" (b->a),"=r" (b->b)
			:"0" (b->a),"1" (b->b));
	}
}
   2282f:	c3                   	ret    

00022830 <_exit>:
// 直接调用系统中断int 0x80,功能号__NR_exit.
// 参数:exit_code - 退出码.
// 函数名前的关键字volatile用于告诉编译器gcc该函数不会返回.这样可让gcc产生更好的代码,更重要的是使用这个关键字可以避免产生某些(未初始化变量的)
// 假警告信息.等同于gcc的函数属性说明:void do_exit(int error_code) __attribute__((noreturn));
void _exit(int exit_code)
{
   22830:	53                   	push   %ebx
	__asm__ __volatile__ ("int $0x80"::"a" (__NR_exit), "b" (exit_code));
   22831:	b8 01 00 00 00       	mov    $0x1,%eax
   22836:	8b 54 24 08          	mov    0x8(%esp),%edx
   2283a:	89 d3                	mov    %edx,%ebx
   2283c:	cd 80                	int    $0x80
}
   2283e:	90                   	nop
   2283f:	5b                   	pop    %ebx
   22840:	c3                   	ret    

00022841 <open>:
// 打开文件函数
// 打开并有可能创建一个文件.
// 参数:filname - 文件名;flag - 文件打开标志;...
// 返回:文件描述符,若出错则置出错码,并返回-1.
int open(const char * filename, int flag, ...)
{
   22841:	53                   	push   %ebx
   22842:	83 ec 10             	sub    $0x10,%esp

	// 利用va_start()宏函数,取得flag后面参数的指针,然后调用系统中断int 0x80,功能open进行.
	// 文件打开操作.
	// %0 - eax(返回的描述符或出错码); %1 - eax(系统中断调用功能号__NR_open);
	// %2 - ebx(文件名filename); %3 - ecx(打开文件标志flag); %4 - edx(后随参数文件属性mode).
	va_start(arg, flag);
   22845:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   22849:	83 c0 04             	add    $0x4,%eax
   2284c:	89 44 24 0c          	mov    %eax,0xc(%esp)
	__asm__(
   22850:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
		"int $0x80"
		:"=a" (res)
		:"0" (__NR_open), "b" (filename), "c" (flag),
		"d" (va_arg(arg, int)));
   22854:	83 44 24 0c 04       	addl   $0x4,0xc(%esp)
   22859:	8b 44 24 0c          	mov    0xc(%esp),%eax
   2285d:	83 e8 04             	sub    $0x4,%eax
   22860:	8b 10                	mov    (%eax),%edx
	// 利用va_start()宏函数,取得flag后面参数的指针,然后调用系统中断int 0x80,功能open进行.
	// 文件打开操作.
	// %0 - eax(返回的描述符或出错码); %1 - eax(系统中断调用功能号__NR_open);
	// %2 - ebx(文件名filename); %3 - ecx(打开文件标志flag); %4 - edx(后随参数文件属性mode).
	va_start(arg, flag);
	__asm__(
   22862:	b8 05 00 00 00       	mov    $0x5,%eax
   22867:	8b 5c 24 18          	mov    0x18(%esp),%ebx
   2286b:	cd 80                	int    $0x80
   2286d:	89 c3                	mov    %eax,%ebx
		"int $0x80"
		:"=a" (res)
		:"0" (__NR_open), "b" (filename), "c" (flag),
		"d" (va_arg(arg, int)));
	// 系统中断调用返回值大于或等于0,表示是一个文件描述符,则直接返回之.
	if (res >= 0)
   2286f:	85 db                	test   %ebx,%ebx
   22871:	78 04                	js     22877 <open+0x36>
		return res;
   22873:	89 d8                	mov    %ebx,%eax
   22875:	eb 0e                	jmp    22885 <open+0x44>
	// 否则说明返回值小于0,则代表一个出错码.设置该出错码并返回-1.
	errno = -res;
   22877:	89 d8                	mov    %ebx,%eax
   22879:	f7 d8                	neg    %eax
   2287b:	a3 24 58 04 00       	mov    %eax,0x45824
	return -1;
   22880:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   22885:	83 c4 10             	add    $0x10,%esp
   22888:	5b                   	pop    %ebx
   22889:	c3                   	ret    

0002288a <close>:
#define __LIBRARY__
#include <unistd.h>	                                // Linux标准头文件.定义了各种符号常数和类型,并声明了各种函数.

// 关闭文件函数
// 下面该调用宏函数对应:int close(int fd).直接调用了系统中断int 0x80,参数是__NR_close.其中fd是文件描述符.
_syscall1(int, close, int, fd)
   2288a:	53                   	push   %ebx
   2288b:	83 ec 10             	sub    $0x10,%esp
   2288e:	b8 06 00 00 00       	mov    $0x6,%eax
   22893:	8b 54 24 18          	mov    0x18(%esp),%edx
   22897:	89 d3                	mov    %edx,%ebx
   22899:	cd 80                	int    $0x80
   2289b:	89 44 24 0c          	mov    %eax,0xc(%esp)
   2289f:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   228a4:	78 06                	js     228ac <close+0x22>
   228a6:	8b 44 24 0c          	mov    0xc(%esp),%eax
   228aa:	eb 10                	jmp    228bc <close+0x32>
   228ac:	8b 44 24 0c          	mov    0xc(%esp),%eax
   228b0:	f7 d8                	neg    %eax
   228b2:	a3 24 58 04 00       	mov    %eax,0x45824
   228b7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   228bc:	83 c4 10             	add    $0x10,%esp
   228bf:	5b                   	pop    %ebx
   228c0:	c3                   	ret    

000228c1 <write>:

// 写文件系统调用函函数.
// 该宏结构对应于函数:int write(int fd, const char * buf, off_t count)
// 参数:fd - 文件描述符;buf - 写缓冲指针; count - 写字节数.
// 返回:成功时返回写入的字节数(0表示写入0字节);出错时将返回-1,并且设置了出错号.
_syscall3(int, write, int, fd, const char *, buf, off_t, count)
   228c1:	53                   	push   %ebx
   228c2:	83 ec 10             	sub    $0x10,%esp
   228c5:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   228c9:	b8 04 00 00 00       	mov    $0x4,%eax
   228ce:	8b 5c 24 18          	mov    0x18(%esp),%ebx
   228d2:	8b 54 24 20          	mov    0x20(%esp),%edx
   228d6:	cd 80                	int    $0x80
   228d8:	89 44 24 0c          	mov    %eax,0xc(%esp)
   228dc:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   228e1:	78 06                	js     228e9 <write+0x28>
   228e3:	8b 44 24 0c          	mov    0xc(%esp),%eax
   228e7:	eb 10                	jmp    228f9 <write+0x38>
   228e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
   228ed:	f7 d8                	neg    %eax
   228ef:	a3 24 58 04 00       	mov    %eax,0x45824
   228f4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   228f9:	83 c4 10             	add    $0x10,%esp
   228fc:	5b                   	pop    %ebx
   228fd:	c3                   	ret    

000228fe <dup>:
			                                    // 如定义了__LIBRARY__,则还含系统调用号和内嵌汇编_syscall0()等.

// 复制文件描述符函数.
// 下面该调用宏函数对应:int dup(int fd).直接调用了系统中断int 0x80,参数是__NR_dup.
// 其中fd是文件描述符.
_syscall1(int, dup, int, fd)
   228fe:	53                   	push   %ebx
   228ff:	83 ec 10             	sub    $0x10,%esp
   22902:	b8 29 00 00 00       	mov    $0x29,%eax
   22907:	8b 54 24 18          	mov    0x18(%esp),%edx
   2290b:	89 d3                	mov    %edx,%ebx
   2290d:	cd 80                	int    $0x80
   2290f:	89 44 24 0c          	mov    %eax,0xc(%esp)
   22913:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   22918:	78 06                	js     22920 <dup+0x22>
   2291a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   2291e:	eb 10                	jmp    22930 <dup+0x32>
   22920:	8b 44 24 0c          	mov    0xc(%esp),%eax
   22924:	f7 d8                	neg    %eax
   22926:	a3 24 58 04 00       	mov    %eax,0x45824
   2292b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   22930:	83 c4 10             	add    $0x10,%esp
   22933:	5b                   	pop    %ebx
   22934:	c3                   	ret    

00022935 <setsid>:
#include <unistd.h>

// 创建一个会话并设置进程组号。
// 下面系统调用宏对应于函数：pid_t setsid()。
// 返回：调用进程的会话标识符（session ID）。
_syscall0(pid_t, setsid)
   22935:	83 ec 10             	sub    $0x10,%esp
   22938:	b8 42 00 00 00       	mov    $0x42,%eax
   2293d:	cd 80                	int    $0x80
   2293f:	89 44 24 0c          	mov    %eax,0xc(%esp)
   22943:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   22948:	78 06                	js     22950 <setsid+0x1b>
   2294a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   2294e:	eb 10                	jmp    22960 <setsid+0x2b>
   22950:	8b 44 24 0c          	mov    0xc(%esp),%eax
   22954:	f7 d8                	neg    %eax
   22956:	a3 24 58 04 00       	mov    %eax,0x45824
   2295b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   22960:	83 c4 10             	add    $0x10,%esp
   22963:	c3                   	ret    

00022964 <execve>:

// 加载并执行子进程(其他程序)函数.
// 下面该调用宏函数对应:int execve(const char * file,char ** argv, char ** envp).
// 参数:file - 被执行程序文件名;argv - 命令行参数指针数组;envp - 环境变量指针数组.
// 直接调用了系统中断int 0x80,参数是__NR_execve.参见include/unistd.h和fs/exec.c程序.
_syscall3(int, execve, const char *, file, char **, argv, char **, envp)
   22964:	53                   	push   %ebx
   22965:	83 ec 10             	sub    $0x10,%esp
   22968:	8b 5c 24 18          	mov    0x18(%esp),%ebx
   2296c:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   22970:	8b 54 24 20          	mov    0x20(%esp),%edx
   22974:	b8 0b 00 00 00       	mov    $0xb,%eax
   22979:	cd 80                	int    $0x80
   2297b:	89 44 24 0c          	mov    %eax,0xc(%esp)
   2297f:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   22984:	78 06                	js     2298c <execve+0x28>
   22986:	8b 44 24 0c          	mov    0xc(%esp),%eax
   2298a:	eb 10                	jmp    2299c <execve+0x38>
   2298c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   22990:	f7 d8                	neg    %eax
   22992:	a3 24 58 04 00       	mov    %eax,0x45824
   22997:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   2299c:	83 c4 10             	add    $0x10,%esp
   2299f:	5b                   	pop    %ebx
   229a0:	c3                   	ret    

000229a1 <waitpid>:

// 等待进程终止系统调用函数.
// 该下面宏结构对应于函数:pid_t waitpid(pid_t pid,int * wait_stat,int options)
//
// 参数:pid - 等待被终止进程的进程id,或者是用于指定特殊情况的其他特定数值;wait_stat - 用于存放状态信息;options - WNOHANG或WUNTRACED或是0.
_syscall3(pid_t, waitpid, pid_t, pid, int *, wait_stat, int, options)
   229a1:	53                   	push   %ebx
   229a2:	83 ec 10             	sub    $0x10,%esp
   229a5:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   229a9:	b8 07 00 00 00       	mov    $0x7,%eax
   229ae:	8b 5c 24 18          	mov    0x18(%esp),%ebx
   229b2:	8b 54 24 20          	mov    0x20(%esp),%edx
   229b6:	cd 80                	int    $0x80
   229b8:	89 44 24 0c          	mov    %eax,0xc(%esp)
   229bc:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   229c1:	78 06                	js     229c9 <waitpid+0x28>
   229c3:	8b 44 24 0c          	mov    0xc(%esp),%eax
   229c7:	eb 10                	jmp    229d9 <waitpid+0x38>
   229c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
   229cd:	f7 d8                	neg    %eax
   229cf:	a3 24 58 04 00       	mov    %eax,0x45824
   229d4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   229d9:	83 c4 10             	add    $0x10,%esp
   229dc:	5b                   	pop    %ebx
   229dd:	c3                   	ret    

000229de <wait>:

// wait()系统调用.直接调用waitpid()函数.
pid_t wait(int * wait_stat)
{
	return waitpid(-1, wait_stat, 0);
   229de:	6a 00                	push   $0x0
   229e0:	ff 74 24 08          	pushl  0x8(%esp)
   229e4:	6a ff                	push   $0xffffffff
   229e6:	e8 b6 ff ff ff       	call   229a1 <waitpid>
   229eb:	83 c4 0c             	add    $0xc,%esp
}
   229ee:	c3                   	ret    

000229ef <Log>:

static unsigned short cur_log_level = LOG_INFO_TYPE;

// linux0.12 kernel log function
void Log(unsigned short log_level, const char *fmt, ...)
{
   229ef:	83 ec 2c             	sub    $0x2c,%esp
   229f2:	8b 44 24 30          	mov    0x30(%esp),%eax
   229f6:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
    if (log_level >= cur_log_level) {
   229fb:	0f b7 05 e0 f6 03 00 	movzwl 0x3f6e0,%eax
   22a02:	66 39 44 24 0c       	cmp    %ax,0xc(%esp)
   22a07:	72 34                	jb     22a3d <Log+0x4e>
        va_list args;                           // va_list实际上是一个字符指针类型.

        // 运行参数处理开始函数.然后使用格式串fmt将参数列表args输出到buf中.返回值i等于输出字符串的长度.再运行参数处理结束函数.最后调用控制台显示
        // 函数并返回显示字符数.
        va_start(args, fmt);
   22a09:	8d 44 24 34          	lea    0x34(%esp),%eax
   22a0d:	83 c0 04             	add    $0x4,%eax
   22a10:	89 44 24 1c          	mov    %eax,0x1c(%esp)
        vsprintf(log_buf, fmt, args);
   22a14:	8b 44 24 34          	mov    0x34(%esp),%eax
   22a18:	83 ec 04             	sub    $0x4,%esp
   22a1b:	ff 74 24 20          	pushl  0x20(%esp)
   22a1f:	50                   	push   %eax
   22a20:	68 e0 f2 03 00       	push   $0x3f2e0
   22a25:	e8 5b 65 fe ff       	call   8f85 <vsprintf>
   22a2a:	83 c4 10             	add    $0x10,%esp
        va_end(args);
        console_print(log_buf);                 // chr_drv/console.c
   22a2d:	83 ec 0c             	sub    $0xc,%esp
   22a30:	68 e0 f2 03 00       	push   $0x3f2e0
   22a35:	e8 28 ab ff ff       	call   1d562 <console_print>
   22a3a:	83 c4 10             	add    $0x10,%esp
    }
}
   22a3d:	90                   	nop
   22a3e:	83 c4 2c             	add    $0x2c,%esp
   22a41:	c3                   	ret    
